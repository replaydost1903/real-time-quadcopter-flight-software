
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010360  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  080104f0  080104f0  000114f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b04  08010b04  000122d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010b04  08010b04  00011b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b0c  08010b0c  000122d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b0c  08010b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b10  08010b10  00011b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  08010b14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d0  2**0
                  CONTENTS
 10 .bss          00001f7c  200002d0  200002d0  000122d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000224c  2000224c  000122d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5ca  00000000  00000000  00012300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ea1  00000000  00000000  0002f8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f0  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001380  00000000  00000000  00035060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f97  00000000  00000000  000363e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ecf3  00000000  00000000  0005c377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd7af  00000000  00000000  0007b06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158819  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008074  00000000  00000000  0015885c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  001608d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080104d8 	.word	0x080104d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	080104d8 	.word	0x080104d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09a      	sub	sp, #104	@ 0x68
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fbef 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f835 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f000 f957 	bl	80012e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001032:	f000 f89b 	bl	800116c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001036:	f000 f8c7 	bl	80011c8 <MX_I2C2_Init>
  MX_TIM6_Init();
 800103a:	f000 f8f3 	bl	8001224 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f925 	bl	800128c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001042:	f00a f8fb 	bl	800b23c <MX_USB_DEVICE_Init>
  /*!< BMI160 Init Process >!*/
  //Complementary_Init(&bmi160_comp, 0.7f, 50.0f);
  //init_bmi160_sensor_driver_interface(&bmi160);

  /*!< BMP388 Init Process >!*/
  init_bmp388_sensor_driver_interface(&bmp388,&bmp388_intf);
 8001046:	4910      	ldr	r1, [pc, #64]	@ (8001088 <main+0x68>)
 8001048:	4810      	ldr	r0, [pc, #64]	@ (800108c <main+0x6c>)
 800104a:	f009 fdef 	bl	800ac2c <init_bmp388_sensor_driver_interface>
//	  }


//	  sum=0.0f;

	  calibration_bmp388_sensor(&bmp388, &bmp388_data, 50U);
 800104e:	2232      	movs	r2, #50	@ 0x32
 8001050:	490f      	ldr	r1, [pc, #60]	@ (8001090 <main+0x70>)
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <main+0x6c>)
 8001054:	f009 fee8 	bl	800ae28 <calibration_bmp388_sensor>
	  sprintf(text,"reference %f\t\n",bmp388_data.altitude[1]);
 8001058:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <main+0x70>)
 800105a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800105e:	1d38      	adds	r0, r7, #4
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <main+0x74>)
 8001062:	f00b fde9 	bl	800cc38 <siprintf>
	  CDC_Transmit_FS((uint8_t*)text, strlen(text));
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f901 	bl	8000270 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f00a f9ec 	bl	800b454 <CDC_Transmit_FS>
	  HAL_Delay(200);
 800107c:	20c8      	movs	r0, #200	@ 0xc8
 800107e:	f000 fc35 	bl	80018ec <HAL_Delay>
	  calibration_bmp388_sensor(&bmp388, &bmp388_data, 50U);
 8001082:	bf00      	nop
 8001084:	e7e3      	b.n	800104e <main+0x2e>
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	20000428 	.word	0x20000428
 8001090:	200004d8 	.word	0x200004d8
 8001094:	080104f0 	.word	0x080104f0

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	2230      	movs	r2, #48	@ 0x30
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f00b fec0 	bl	800ce2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c4:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <SystemClock_Config+0xcc>)
 80010c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <SystemClock_Config+0xcc>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a21      	ldr	r2, [pc, #132]	@ (8001168 <SystemClock_Config+0xd0>)
 80010e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <SystemClock_Config+0xd0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f4:	2301      	movs	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fe:	2302      	movs	r3, #2
 8001100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800110c:	23a8      	movs	r3, #168	@ 0xa8
 800110e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001114:	2307      	movs	r3, #7
 8001116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	4618      	mov	r0, r3
 800111e:	f003 f947 	bl	80043b0 <HAL_RCC_OscConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001128:	f000 f95e 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800112c:	230f      	movs	r3, #15
 800112e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001130:	2302      	movs	r3, #2
 8001132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001138:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800113c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2105      	movs	r1, #5
 800114a:	4618      	mov	r0, r3
 800114c:	f003 fba8 	bl	80048a0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001156:	f000 f947 	bl	80013e8 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	@ 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_I2C1_Init+0x50>)
 8001172:	4a13      	ldr	r2, [pc, #76]	@ (80011c0 <MX_I2C1_Init+0x54>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001176:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <MX_I2C1_Init+0x50>)
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <MX_I2C1_Init+0x58>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_I2C1_Init+0x50>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001182:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_I2C1_Init+0x50>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001188:	4b0c      	ldr	r3, [pc, #48]	@ (80011bc <MX_I2C1_Init+0x50>)
 800118a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800118e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001190:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <MX_I2C1_Init+0x50>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <MX_I2C1_Init+0x50>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_I2C1_Init+0x50>)
 80011aa:	f000 fe8b 	bl	8001ec4 <HAL_I2C_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b4:	f000 f918 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002ec 	.word	0x200002ec
 80011c0:	40005400 	.word	0x40005400
 80011c4:	00061a80 	.word	0x00061a80

080011c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ce:	4a13      	ldr	r2, [pc, #76]	@ (800121c <MX_I2C2_Init+0x54>)
 80011d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <MX_I2C2_Init+0x58>)
 80011d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_I2C2_Init+0x50>)
 8001206:	f000 fe5d 	bl	8001ec4 <HAL_I2C_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001210:	f000 f8ea 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000340 	.word	0x20000340
 800121c:	40005800 	.word	0x40005800
 8001220:	00061a80 	.word	0x00061a80

08001224 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_TIM6_Init+0x60>)
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <MX_TIM6_Init+0x64>)
 8001236:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_TIM6_Init+0x60>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_TIM6_Init+0x60>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_TIM6_Init+0x60>)
 8001246:	22a7      	movs	r2, #167	@ 0xa7
 8001248:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_TIM6_Init+0x60>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <MX_TIM6_Init+0x60>)
 8001252:	f003 fd45 	bl	8004ce0 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800125c:	f000 f8c4 	bl	80013e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_TIM6_Init+0x60>)
 800126e:	f003 ffeb 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001278:	f000 f8b6 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000394 	.word	0x20000394
 8001288:	40001000 	.word	0x40001000

0800128c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <MX_USART2_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_USART2_UART_Init+0x4c>)
 80012c4:	f004 f850 	bl	8005368 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f88b 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200003dc 	.word	0x200003dc
 80012dc:	40004400 	.word	0x40004400

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	@ 0x28
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a2c      	ldr	r2, [pc, #176]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b26      	ldr	r3, [pc, #152]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a25      	ldr	r2, [pc, #148]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a1e      	ldr	r2, [pc, #120]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <MX_GPIO_Init+0xd0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800136c:	4811      	ldr	r0, [pc, #68]	@ (80013b4 <MX_GPIO_Init+0xd4>)
 800136e:	f000 fd8f 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_GPIO_Init+0xd8>)
 8001386:	f000 fbe7 	bl	8001b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800138a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_GPIO_Init+0xd4>)
 80013a4:	f000 fbd8 	bl	8001b58 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	@ 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40020000 	.word	0x40020000

080013bc <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <_write+0x28>)
 80013d4:	f004 f818 	bl	8005408 <HAL_UART_Transmit>
  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200003dc 	.word	0x200003dc

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_MspInit+0x5c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a13      	ldr	r2, [pc, #76]	@ (8001450 <HAL_MspInit+0x5c>)
 8001404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_MspInit+0x5c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <HAL_MspInit+0x5c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a0c      	ldr	r2, [pc, #48]	@ (8001450 <HAL_MspInit+0x5c>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_MspInit+0x5c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001432:	2007      	movs	r0, #7
 8001434:	f000 fb4e 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2100      	movs	r1, #0
 800143c:	2005      	movs	r0, #5
 800143e:	f000 fb54 	bl	8001aea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001442:	2005      	movs	r0, #5
 8001444:	f000 fb6d 	bl	8001b22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	@ 0x30
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a33      	ldr	r2, [pc, #204]	@ (8001540 <HAL_I2C_MspInit+0xec>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12d      	bne.n	80014d2 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a31      	ldr	r2, [pc, #196]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
 8001490:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 8001492:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a4:	2304      	movs	r3, #4
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4826      	ldr	r0, [pc, #152]	@ (8001548 <HAL_I2C_MspInit+0xf4>)
 80014b0:	f000 fb52 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014bc:	4a21      	ldr	r2, [pc, #132]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014d0:	e031      	b.n	8001536 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <HAL_I2C_MspInit+0xf8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d12c      	bne.n	8001536 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP388_SCL_Pin|BMP388_SDA_Pin;
 80014f8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800150a:	2304      	movs	r3, #4
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <HAL_I2C_MspInit+0xf4>)
 8001516:	f000 fb1f 	bl	8001b58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 8001524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_I2C_MspInit+0xf0>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
}
 8001536:	bf00      	nop
 8001538:	3730      	adds	r7, #48	@ 0x30
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	40005800 	.word	0x40005800

08001550 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0e      	ldr	r2, [pc, #56]	@ (8001598 <HAL_TIM_Base_MspInit+0x48>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d115      	bne.n	800158e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <HAL_TIM_Base_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a0c      	ldr	r2, [pc, #48]	@ (800159c <HAL_TIM_Base_MspInit+0x4c>)
 800156c:	f043 0310 	orr.w	r3, r3, #16
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_TIM_Base_MspInit+0x4c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2036      	movs	r0, #54	@ 0x36
 8001584:	f000 fab1 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001588:	2036      	movs	r0, #54	@ 0x36
 800158a:	f000 faca 	bl	8001b22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40001000 	.word	0x40001000
 800159c:	40023800 	.word	0x40023800

080015a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a19      	ldr	r2, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0x84>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d12b      	bne.n	800161a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a10      	ldr	r2, [pc, #64]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <HAL_UART_MspInit+0x88>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 80015fa:	230c      	movs	r3, #12
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800160a:	2307      	movs	r3, #7
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <HAL_UART_MspInit+0x8c>)
 8001616:	f000 fa9f 	bl	8001b58 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	@ 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <NMI_Handler+0x4>

08001638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <MemManage_Handler+0x4>

08001648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <UsageFault_Handler+0x4>

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f000 f91f 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM6_DAC_IRQHandler+0x10>)
 8001686:	f003 fc1a 	bl	8004ebe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000394 	.word	0x20000394

08001694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001698:	4802      	ldr	r0, [pc, #8]	@ (80016a4 <OTG_FS_IRQHandler+0x10>)
 800169a:	f001 fd7b 	bl	8003194 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200019f8 	.word	0x200019f8

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_kill>:

int _kill(int pid, int sig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c2:	f00b fc05 	bl	800ced0 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2216      	movs	r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_exit>:

void _exit (int status)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffe7 	bl	80016b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ea:	bf00      	nop
 80016ec:	e7fd      	b.n	80016ea <_exit+0x12>

080016ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00a      	b.n	8001716 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001700:	f3af 8000 	nop.w
 8001704:	4601      	mov	r1, r0
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	b2ca      	uxtb	r2, r1
 800170e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	dbf0      	blt.n	8001700 <_read+0x12>
  }

  return len;
 800171e:	687b      	ldr	r3, [r7, #4]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001750:	605a      	str	r2, [r3, #4]
  return 0;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_isatty>:

int _isatty(int file)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001768:	2301      	movs	r3, #1
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	@ (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017b8:	f7ff ffea 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017bc:	480c      	ldr	r0, [pc, #48]	@ (80017f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c4:	e002      	b.n	80017cc <LoopCopyDataInit>

080017c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ca:	3304      	adds	r3, #4

080017cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d0:	d3f9      	bcc.n	80017c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d8:	e001      	b.n	80017de <LoopFillZerobss>

080017da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017dc:	3204      	adds	r2, #4

080017de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e0:	d3fb      	bcc.n	80017da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017e2:	f00b fb7b 	bl	800cedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fc1b 	bl	8001020 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80017f8:	08010b14 	.word	0x08010b14
  ldr r2, =_sbss
 80017fc:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001800:	2000224c 	.word	0x2000224c

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	@ (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	@ (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	@ (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f94f 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fdda 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f967 	bl	8001b3e <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f92f 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	@ (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000000c 	.word	0x2000000c
 80018a4:	20000014 	.word	0x20000014
 80018a8:	20000010 	.word	0x20000010

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000014 	.word	0x20000014
 80018d0:	20000508 	.word	0x20000508

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000508 	.word	0x20000508

080018ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f4:	f7ff ffee 	bl	80018d4 <HAL_GetTick>
 80018f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001904:	d005      	beq.n	8001912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_Delay+0x44>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001912:	bf00      	nop
 8001914:	f7ff ffde 	bl	80018d4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	429a      	cmp	r2, r3
 8001922:	d8f7      	bhi.n	8001914 <HAL_Delay+0x28>
  {
  }
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000014 	.word	0x20000014

08001934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001950:	4013      	ands	r3, r2
 8001952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800195c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <__NVIC_SetPriorityGrouping+0x44>)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	60d3      	str	r3, [r2, #12]
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <__NVIC_GetPriorityGrouping+0x18>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0307 	and.w	r3, r3, #7
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000ed00 	.word	0xe000ed00

08001998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db0b      	blt.n	80019c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	f003 021f 	and.w	r2, r3, #31
 80019b0:	4907      	ldr	r1, [pc, #28]	@ (80019d0 <__NVIC_EnableIRQ+0x38>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2001      	movs	r0, #1
 80019ba:	fa00 f202 	lsl.w	r2, r0, r2
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff29 	bl	8001934 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff3e 	bl	800197c <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	4603      	mov	r3, r0
 8001b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff31 	bl	8001998 <__NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ffa2 	bl	8001a90 <SysTick_Config>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e16b      	b.n	8001e4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b74:	2201      	movs	r2, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f040 815a 	bne.w	8001e46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d005      	beq.n	8001baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d130      	bne.n	8001c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be0:	2201      	movs	r2, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 0201 	and.w	r2, r3, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d123      	bne.n	8001c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	08da      	lsrs	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3208      	adds	r2, #8
 8001c96:	69b9      	ldr	r1, [r7, #24]
 8001c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0203 	and.w	r2, r3, #3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80b4 	beq.w	8001e46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b60      	ldr	r3, [pc, #384]	@ (8001e64 <HAL_GPIO_Init+0x30c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8001e64 <HAL_GPIO_Init+0x30c>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_GPIO_Init+0x30c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001e68 <HAL_GPIO_Init+0x310>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_GPIO_Init+0x314>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d02b      	beq.n	8001d7e <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	@ (8001e70 <HAL_GPIO_Init+0x318>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_GPIO_Init+0x31c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	@ (8001e78 <HAL_GPIO_Init+0x320>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x21a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4e      	ldr	r2, [pc, #312]	@ (8001e7c <HAL_GPIO_Init+0x324>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x216>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4d      	ldr	r2, [pc, #308]	@ (8001e80 <HAL_GPIO_Init+0x328>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x212>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_GPIO_Init+0x32c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x20e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4b      	ldr	r2, [pc, #300]	@ (8001e88 <HAL_GPIO_Init+0x330>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x20a>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e00e      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d62:	2308      	movs	r3, #8
 8001d64:	e00c      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e00a      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d6e:	2304      	movs	r3, #4
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x228>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_GPIO_Init+0x310>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc2:	4a32      	ldr	r2, [pc, #200]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc8:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dec:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df2:	4b26      	ldr	r3, [pc, #152]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e16:	4a1d      	ldr	r2, [pc, #116]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e40:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <HAL_GPIO_Init+0x334>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f ae90 	bls.w	8001b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	@ 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40021c00 	.word	0x40021c00
 8001e8c:	40013c00 	.word	0x40013c00

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e12b      	b.n	800212e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fab2 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	@ 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f28:	f002 feb2 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a81      	ldr	r2, [pc, #516]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d807      	bhi.n	8001f48 <HAL_I2C_Init+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a80      	ldr	r2, [pc, #512]	@ (800213c <HAL_I2C_Init+0x278>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e006      	b.n	8001f56 <HAL_I2C_Init+0x92>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002140 <HAL_I2C_Init+0x27c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e7      	b.n	800212e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a78      	ldr	r2, [pc, #480]	@ (8002144 <HAL_I2C_Init+0x280>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d802      	bhi.n	8001f98 <HAL_I2C_Init+0xd4>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	e009      	b.n	8001fac <HAL_I2C_Init+0xe8>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4a69      	ldr	r2, [pc, #420]	@ (8002148 <HAL_I2C_Init+0x284>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	495c      	ldr	r1, [pc, #368]	@ (8002138 <HAL_I2C_Init+0x274>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d819      	bhi.n	8002000 <HAL_I2C_Init+0x13c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e59      	subs	r1, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_I2C_Init+0x138>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e59      	subs	r1, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	e051      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e04f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <HAL_I2C_Init+0x168>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e012      	b.n	8002052 <HAL_I2C_Init+0x18e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x196>
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10e      	bne.n	8002080 <HAL_I2C_Init+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e58      	subs	r0, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	fbb0 f3f3 	udiv	r3, r0, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800207e:	e00f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	6809      	ldr	r1, [r1, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6911      	ldr	r1, [r2, #16]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	000186a0 	.word	0x000186a0
 800213c:	001e847f 	.word	0x001e847f
 8002140:	003d08ff 	.word	0x003d08ff
 8002144:	431bde83 	.word	0x431bde83
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	4608      	mov	r0, r1
 8002156:	4611      	mov	r1, r2
 8002158:	461a      	mov	r2, r3
 800215a:	4603      	mov	r3, r0
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	460b      	mov	r3, r1
 8002160:	813b      	strh	r3, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002166:	f7ff fbb5 	bl	80018d4 <HAL_GetTick>
 800216a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b20      	cmp	r3, #32
 8002176:	f040 80d9 	bne.w	800232c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2319      	movs	r3, #25
 8002180:	2201      	movs	r2, #1
 8002182:	496d      	ldr	r1, [pc, #436]	@ (8002338 <HAL_I2C_Mem_Write+0x1ec>)
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fc8b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
 8002192:	e0cc      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Write+0x56>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0c5      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d007      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2221      	movs	r2, #33	@ 0x21
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a3a      	ldr	r2, [r7, #32]
 80021f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a4d      	ldr	r2, [pc, #308]	@ (800233c <HAL_I2C_Mem_Write+0x1f0>)
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800220a:	88f8      	ldrh	r0, [r7, #6]
 800220c:	893a      	ldrh	r2, [r7, #8]
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4603      	mov	r3, r0
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 fac2 	bl	80027a4 <I2C_RequestMemoryWrite>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d052      	beq.n	80022cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e081      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fd50 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	2b04      	cmp	r3, #4
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002250:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06b      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b04      	cmp	r3, #4
 8002292:	d11b      	bne.n	80022cc <HAL_I2C_Mem_Write+0x180>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d017      	beq.n	80022cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1aa      	bne.n	800222a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fd43 	bl	8002d64 <I2C_WaitOnBTFFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e016      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	e000      	b.n	800232e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800232c:	2302      	movs	r3, #2
  }
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	00100002 	.word	0x00100002
 800233c:	ffff0000 	.word	0xffff0000

08002340 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08c      	sub	sp, #48	@ 0x30
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800235a:	f7ff fabb 	bl	80018d4 <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	f040 8214 	bne.w	8002796 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2319      	movs	r3, #25
 8002374:	2201      	movs	r2, #1
 8002376:	497b      	ldr	r1, [pc, #492]	@ (8002564 <HAL_I2C_Mem_Read+0x224>)
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fb91 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
 8002386:	e207      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Mem_Read+0x56>
 8002392:	2302      	movs	r3, #2
 8002394:	e200      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d007      	beq.n	80023bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2222      	movs	r2, #34	@ 0x22
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	@ 0x40
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002568 <HAL_I2C_Mem_Read+0x228>)
 80023fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023fe:	88f8      	ldrh	r0, [r7, #6]
 8002400:	893a      	ldrh	r2, [r7, #8]
 8002402:	8979      	ldrh	r1, [r7, #10]
 8002404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4603      	mov	r3, r0
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa5e 	bl	80028d0 <I2C_RequestMemoryRead>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e1bc      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	623b      	str	r3, [r7, #32]
 800243a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e190      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	2b01      	cmp	r3, #1
 8002454:	d11b      	bne.n	800248e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	e170      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	2b02      	cmp	r3, #2
 8002494:	d11b      	bne.n	80024ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	e150      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024e4:	e144      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	f200 80f1 	bhi.w	80026d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d123      	bne.n	8002540 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fc79 	bl	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e145      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800253e:	e117      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002544:	2b02      	cmp	r3, #2
 8002546:	d14e      	bne.n	80025e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	2200      	movs	r2, #0
 8002550:	4906      	ldr	r1, [pc, #24]	@ (800256c <HAL_I2C_Mem_Read+0x22c>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 faa4 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d008      	beq.n	8002570 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e11a      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
 8002562:	bf00      	nop
 8002564:	00100002 	.word	0x00100002
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025e4:	e0c4      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	496c      	ldr	r1, [pc, #432]	@ (80027a0 <HAL_I2C_Mem_Read+0x460>)
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fa55 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cb      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002648:	2200      	movs	r2, #0
 800264a:	4955      	ldr	r1, [pc, #340]	@ (80027a0 <HAL_I2C_Mem_Read+0x460>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fa27 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e09d      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026d0:	e04e      	b.n	8002770 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb8c 	bl	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e058      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d124      	bne.n	8002770 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	2b00      	cmp	r3, #0
 8002776:	f47f aeb6 	bne.w	80024e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3728      	adds	r7, #40	@ 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	00010004 	.word	0x00010004

080027a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f960 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f4:	d103      	bne.n	80027fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e05f      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	492d      	ldr	r1, [pc, #180]	@ (80028cc <I2C_RequestMemoryWrite+0x128>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f9bb 	bl	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa46 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02b      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e021      	b.n	80028c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fa20 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e005      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00010002 	.word	0x00010002

080028d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2200      	movs	r2, #0
 8002912:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8c2 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002930:	d103      	bne.n	800293a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002938:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0aa      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800294c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	4952      	ldr	r1, [pc, #328]	@ (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f91d 	bl	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e097      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f9a8 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e076      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	e021      	b.n	80029fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f982 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e050      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f967 	bl	8002cd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e035      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4906      	ldr	r1, [pc, #24]	@ (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f886 	bl	8002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	e048      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d044      	beq.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe ff0b 	bl	80018d4 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d139      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10d      	bne.n	8002af6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	e00c      	b.n	8002b10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d116      	bne.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e023      	b.n	8002b8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	0c1b      	lsrs	r3, r3, #16
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10d      	bne.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	e00c      	b.n	8002b84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d093      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ba2:	e071      	b.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb2:	d123      	bne.n	8002bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f043 0204 	orr.w	r2, r3, #4
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e067      	b.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c02:	d041      	beq.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7fe fe66 	bl	80018d4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d136      	bne.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d10c      	bne.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	e00b      	b.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	43da      	mvns	r2, r3
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d016      	beq.n	8002c88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f043 0220 	orr.w	r2, r3, #32
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e021      	b.n	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0c1b      	lsrs	r3, r3, #16
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d10c      	bne.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	e00b      	b.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af6d 	bne.w	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f8e3 	bl	8002eae <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fdeb 	bl	80018d4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1a:	2b80      	cmp	r3, #128	@ 0x80
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b80      	cmp	r3, #128	@ 0x80
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d70:	e034      	b.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f89b 	bl	8002eae <I2C_IsAcknowledgeFailed>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e034      	b.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d028      	beq.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8a:	f7fe fda3 	bl	80018d4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d302      	bcc.n	8002da0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d11d      	bne.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d016      	beq.n	8002ddc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e007      	b.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d1c3      	bne.n	8002d72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e00:	e049      	b.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f003 0310 	and.w	r3, r3, #16
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d119      	bne.n	8002e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0210 	mvn.w	r2, #16
 8002e18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e030      	b.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fe fd46 	bl	80018d4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d11d      	bne.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d016      	beq.n	8002e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e007      	b.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d1ae      	bne.n	8002e02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec4:	d11b      	bne.n	8002efe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ece:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e101      	b.n	8003122 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f008 fbd3 	bl	800b6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2203      	movs	r2, #3
 8002f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f4c:	d102      	bne.n	8002f54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 ff28 	bl	8005dae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7c1a      	ldrb	r2, [r3, #16]
 8002f66:	f88d 2000 	strb.w	r2, [sp]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f6e:	f002 fe07 	bl	8005b80 <USB_CoreInit>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e0ce      	b.n	8003122 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f002 ff20 	bl	8005dd0 <USB_SetCurrentMode>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0bf      	b.n	8003122 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e04a      	b.n	800303e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3315      	adds	r3, #21
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3314      	adds	r3, #20
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	b298      	uxth	r0, r3
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	332e      	adds	r3, #46	@ 0x2e
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3318      	adds	r3, #24
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	331c      	adds	r3, #28
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	3320      	adds	r3, #32
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3324      	adds	r3, #36	@ 0x24
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3301      	adds	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3af      	bcc.n	8002fa8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e044      	b.n	80030d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3301      	adds	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d3b5      	bcc.n	800304e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7c1a      	ldrb	r2, [r3, #16]
 80030ea:	f88d 2000 	strb.w	r2, [sp]
 80030ee:	3304      	adds	r3, #4
 80030f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030f2:	f002 feb9 	bl	8005e68 <USB_DevInit>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e00c      	b.n	8003122 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f003 ff03 	bl	8006f26 <USB_DevDisconnect>

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_PCD_Start+0x1c>
 8003142:	2302      	movs	r3, #2
 8003144:	e022      	b.n	800318c <HAL_PCD_Start+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800315e:	2b01      	cmp	r3, #1
 8003160:	d105      	bne.n	800316e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f002 fe0a 	bl	8005d8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4618      	mov	r0, r3
 800317e:	f003 feb1 	bl	8006ee4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b08d      	sub	sp, #52	@ 0x34
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 ff6f 	bl	800708e <USB_GetMode>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 848c 	bne.w	8003ad0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f003 fed3 	bl	8006f68 <USB_ReadInterrupts>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8482 	beq.w	8003ace <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0a1b      	lsrs	r3, r3, #8
 80031d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fec0 	bl	8006f68 <USB_ReadInterrupts>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d107      	bne.n	8003202 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f002 0202 	and.w	r2, r2, #2
 8003200:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 feae 	bl	8006f68 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d161      	bne.n	80032da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0210 	bic.w	r2, r2, #16
 8003224:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 020f 	and.w	r2, r3, #15
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	4413      	add	r3, r2
 8003242:	3304      	adds	r3, #4
 8003244:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800324c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003250:	d124      	bne.n	800329c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d035      	beq.n	80032ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800326c:	b29b      	uxth	r3, r3
 800326e:	461a      	mov	r2, r3
 8003270:	6a38      	ldr	r0, [r7, #32]
 8003272:	f003 fce5 	bl	8006c40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	091b      	lsrs	r3, r3, #4
 800327e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003282:	441a      	add	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003294:	441a      	add	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	615a      	str	r2, [r3, #20]
 800329a:	e016      	b.n	80032ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80032a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032a6:	d110      	bne.n	80032ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032ae:	2208      	movs	r2, #8
 80032b0:	4619      	mov	r1, r3
 80032b2:	6a38      	ldr	r0, [r7, #32]
 80032b4:	f003 fcc4 	bl	8006c40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c4:	441a      	add	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0210 	orr.w	r2, r2, #16
 80032d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fe42 	bl	8006f68 <USB_ReadInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032ee:	f040 80a7 	bne.w	8003440 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fe47 	bl	8006f8e <USB_ReadDevAllOutEpInterrupt>
 8003300:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003302:	e099      	b.n	8003438 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 808e 	beq.w	800342c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fe6b 	bl	8006ff6 <USB_ReadDevOutEPInterrupt>
 8003320:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2301      	movs	r3, #1
 800333c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800333e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fea3 	bl	800408c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00c      	beq.n	800336a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800335c:	461a      	mov	r2, r3
 800335e:	2308      	movs	r3, #8
 8003360:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003362:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 ff79 	bl	800425c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	2310      	movs	r3, #16
 8003384:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d030      	beq.n	80033f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003398:	2b80      	cmp	r3, #128	@ 0x80
 800339a:	d109      	bne.n	80033b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	3304      	adds	r3, #4
 80033c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	78db      	ldrb	r3, [r3, #3]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d108      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2200      	movs	r2, #0
 80033d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f008 fa88 	bl	800b8f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ec:	461a      	mov	r2, r3
 80033ee:	2302      	movs	r3, #2
 80033f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	2320      	movs	r3, #32
 800340c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	4413      	add	r3, r2
 8003420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003424:	461a      	mov	r2, r3
 8003426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800342a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	3301      	adds	r3, #1
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	f47f af62 	bne.w	8003304 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 fd8f 	bl	8006f68 <USB_ReadInterrupts>
 800344a:	4603      	mov	r3, r0
 800344c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003450:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003454:	f040 80db 	bne.w	800360e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fdb0 	bl	8006fc2 <USB_ReadDevAllInEpInterrupt>
 8003462:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003468:	e0cd      	b.n	8003606 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800346a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80c2 	beq.w	80035fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	b2d2      	uxtb	r2, r2
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f003 fdd6 	bl	8007032 <USB_ReadDevInEPInterrupt>
 8003486:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d057      	beq.n	8003542 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	2201      	movs	r2, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80034b2:	4013      	ands	r3, r2
 80034b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034c2:	461a      	mov	r2, r3
 80034c4:	2301      	movs	r3, #1
 80034c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	799b      	ldrb	r3, [r3, #6]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d132      	bne.n	8003536 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3320      	adds	r3, #32
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4403      	add	r3, r0
 80034f0:	331c      	adds	r3, #28
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4419      	add	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4403      	add	r3, r0
 8003504:	3320      	adds	r3, #32
 8003506:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <HAL_PCD_IRQHandler+0x3a2>
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3324      	adds	r3, #36	@ 0x24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800352e:	461a      	mov	r2, r3
 8003530:	2101      	movs	r1, #1
 8003532:	f003 fddd 	bl	80070f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f008 f952 	bl	800b7e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003558:	461a      	mov	r2, r3
 800355a:	2308      	movs	r3, #8
 800355c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d008      	beq.n	800357a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003574:	461a      	mov	r2, r3
 8003576:	2310      	movs	r3, #16
 8003578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003590:	461a      	mov	r2, r3
 8003592:	2340      	movs	r3, #64	@ 0x40
 8003594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d023      	beq.n	80035e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a2:	6a38      	ldr	r0, [r7, #32]
 80035a4:	f002 fdc4 	bl	8006130 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80035a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3310      	adds	r3, #16
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d108      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f008 f99f 	bl	800b914 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e2:	461a      	mov	r2, r3
 80035e4:	2302      	movs	r3, #2
 80035e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fcbd 	bl	8003f74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	3301      	adds	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f af2e 	bne.w	800346a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f003 fca8 	bl	8006f68 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800361e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003622:	d122      	bne.n	800366a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800364a:	2100      	movs	r1, #0
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fea3 	bl	8004398 <HAL_PCDEx_LPM_Callback>
 8003652:	e002      	b.n	800365a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 f93d 	bl	800b8d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695a      	ldr	r2, [r3, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f003 fc7a 	bl	8006f68 <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800367e:	d112      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f008 f8f9 	bl	800b888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695a      	ldr	r2, [r3, #20]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 fc5c 	bl	8006f68 <USB_ReadInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ba:	f040 80b7 	bne.w	800382c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2110      	movs	r1, #16
 80036d8:	4618      	mov	r0, r3
 80036da:	f002 fd29 	bl	8006130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036e2:	e046      	b.n	8003772 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036f0:	461a      	mov	r2, r3
 80036f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003708:	0151      	lsls	r1, r2, #5
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	440a      	add	r2, r1
 800370e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003716:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800372a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	440a      	add	r2, r1
 8003742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003746:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800374a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800374c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	69fa      	ldr	r2, [r7, #28]
 8003760:	440a      	add	r2, r1
 8003762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003766:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800376a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376e:	3301      	adds	r3, #1
 8003770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	791b      	ldrb	r3, [r3, #4]
 8003776:	461a      	mov	r2, r3
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	4293      	cmp	r3, r2
 800377c:	d3b2      	bcc.n	80036e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800378c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003790:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7bdb      	ldrb	r3, [r3, #15]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d016      	beq.n	80037c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037aa:	f043 030b 	orr.w	r3, r3, #11
 80037ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c0:	f043 030b 	orr.w	r3, r3, #11
 80037c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037c6:	e015      	b.n	80037f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80037de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037ee:	f043 030b 	orr.w	r3, r3, #11
 80037f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003802:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003806:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003816:	461a      	mov	r2, r3
 8003818:	f003 fc6a 	bl	80070f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800382a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fb99 	bl	8006f68 <USB_ReadInterrupts>
 8003836:	4603      	mov	r3, r0
 8003838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003840:	d123      	bne.n	800388a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f003 fc2f 	bl	80070aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fce6 	bl	8006222 <USB_GetDevSpeed>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681c      	ldr	r4, [r3, #0]
 8003862:	f001 fa09 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8003866:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800386c:	461a      	mov	r2, r3
 800386e:	4620      	mov	r0, r4
 8003870:	f002 f9ea 	bl	8005c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f007 ffde 	bl	800b836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003888:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fb6a 	bl	8006f68 <USB_ReadInterrupts>
 8003894:	4603      	mov	r3, r0
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b08      	cmp	r3, #8
 800389c:	d10a      	bne.n	80038b4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f007 ffbb 	bl	800b81a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f002 0208 	and.w	r2, r2, #8
 80038b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fb55 	bl	8006f68 <USB_ReadInterrupts>
 80038be:	4603      	mov	r3, r0
 80038c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c4:	2b80      	cmp	r3, #128	@ 0x80
 80038c6:	d123      	bne.n	8003910 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d4:	2301      	movs	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d8:	e014      	b.n	8003904 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d105      	bne.n	80038fe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fb0a 	bl	8003f12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	3301      	adds	r3, #1
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	791b      	ldrb	r3, [r3, #4]
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	4293      	cmp	r3, r2
 800390e:	d3e4      	bcc.n	80038da <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 fb27 	bl	8006f68 <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003924:	d13c      	bne.n	80039a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003926:	2301      	movs	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
 800392a:	e02b      	b.n	8003984 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800392c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3318      	adds	r3, #24
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d115      	bne.n	800397e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003952:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	da12      	bge.n	800397e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	3317      	adds	r3, #23
 8003968:	2201      	movs	r2, #1
 800396a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 faca 	bl	8003f12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	3301      	adds	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	@ 0x24
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	461a      	mov	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	4293      	cmp	r3, r2
 800398e:	d3cd      	bcc.n	800392c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800399e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 fadf 	bl	8006f68 <USB_ReadInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039b4:	d156      	bne.n	8003a64 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b6:	2301      	movs	r3, #1
 80039b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ba:	e045      	b.n	8003a48 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d12e      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	da2b      	bge.n	8003a42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80039f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d121      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a10:	2201      	movs	r2, #1
 8003a12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a1c:	6a3b      	ldr	r3, [r7, #32]
 8003a1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a3e:	6053      	str	r3, [r2, #4]
            break;
 8003a40:	e008      	b.n	8003a54 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	3301      	adds	r3, #1
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	791b      	ldrb	r3, [r3, #4]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d3b3      	bcc.n	80039bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fa7d 	bl	8006f68 <USB_ReadInterrupts>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a78:	d10a      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f007 ff5c 	bl	800b938 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f003 fa67 	bl	8006f68 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d115      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f007 ff4c 	bl	800b954 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e000      	b.n	8003ad0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003ace:	bf00      	nop
    }
  }
}
 8003ad0:	3734      	adds	r7, #52	@ 0x34
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd90      	pop	{r4, r7, pc}

08003ad6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_SetAddress+0x1a>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e012      	b.n	8003b16 <HAL_PCD_SetAddress+0x40>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f003 f9c6 	bl	8006e98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	4608      	mov	r0, r1
 8003b28:	4611      	mov	r1, r2
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	70fb      	strb	r3, [r7, #3]
 8003b30:	460b      	mov	r3, r1
 8003b32:	803b      	strh	r3, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	da0f      	bge.n	8003b64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3310      	adds	r3, #16
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4413      	add	r3, r2
 8003b58:	3304      	adds	r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	705a      	strb	r2, [r3, #1]
 8003b62:	e00f      	b.n	8003b84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b90:	883b      	ldrh	r3, [r7, #0]
 8003b92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	78ba      	ldrb	r2, [r7, #2]
 8003b9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bb2:	78bb      	ldrb	r3, [r7, #2]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d102      	bne.n	8003bbe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_PCD_EP_Open+0xae>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e00e      	b.n	8003bea <HAL_PCD_EP_Open+0xcc>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68f9      	ldr	r1, [r7, #12]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f002 fb46 	bl	800626c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003be8:	7afb      	ldrb	r3, [r7, #11]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b084      	sub	sp, #16
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	da0f      	bge.n	8003c26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3310      	adds	r3, #16
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	705a      	strb	r2, [r3, #1]
 8003c24:	e00f      	b.n	8003c46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c26:	78fb      	ldrb	r3, [r7, #3]
 8003c28:	f003 020f 	and.w	r2, r3, #15
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_PCD_EP_Close+0x6e>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e00e      	b.n	8003c7e <HAL_PCD_EP_Close+0x8c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68f9      	ldr	r1, [r7, #12]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f002 fb84 	bl	800637c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	460b      	mov	r3, r1
 8003c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c96:	7afb      	ldrb	r3, [r7, #11]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	799b      	ldrb	r3, [r3, #6]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d102      	bne.n	8003ce2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	799b      	ldrb	r3, [r3, #6]
 8003cea:	461a      	mov	r2, r3
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	f002 fc21 	bl	8006534 <USB_EPStartXfer>

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 020f 	and.w	r2, r3, #15
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	3304      	adds	r3, #4
 8003d52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6c:	7afb      	ldrb	r3, [r7, #11]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	799b      	ldrb	r3, [r3, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d102      	bne.n	8003d86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	799b      	ldrb	r3, [r3, #6]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6979      	ldr	r1, [r7, #20]
 8003d92:	f002 fbcf 	bl	8006534 <USB_EPStartXfer>

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	7912      	ldrb	r2, [r2, #4]
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04f      	b.n	8003e5e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da0f      	bge.n	8003de6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc6:	78fb      	ldrb	r3, [r7, #3]
 8003dc8:	f003 020f 	and.w	r2, r3, #15
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3310      	adds	r3, #16
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	705a      	strb	r2, [r3, #1]
 8003de4:	e00d      	b.n	8003e02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_PCD_EP_SetStall+0x82>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e01d      	b.n	8003e5e <HAL_PCD_EP_SetStall+0xbe>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f002 ff5d 	bl	8006cf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d109      	bne.n	8003e54 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7999      	ldrb	r1, [r3, #6]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f003 f94e 	bl	80070f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	7912      	ldrb	r2, [r2, #4]
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e042      	b.n	8003f0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da0f      	bge.n	8003eac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 020f 	and.w	r2, r3, #15
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	3310      	adds	r3, #16
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	705a      	strb	r2, [r3, #1]
 8003eaa:	e00f      	b.n	8003ecc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed2:	78fb      	ldrb	r3, [r7, #3]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_PCD_EP_ClrStall+0x86>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e00e      	b.n	8003f0a <HAL_PCD_EP_ClrStall+0xa4>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68f9      	ldr	r1, [r7, #12]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f002 ff66 	bl	8006dcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b084      	sub	sp, #16
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da0c      	bge.n	8003f40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3310      	adds	r3, #16
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e00c      	b.n	8003f5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 020f 	and.w	r2, r3, #15
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	3304      	adds	r3, #4
 8003f58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 fd85 	bl	8006a70 <USB_EPStopXfer>
 8003f66:	4603      	mov	r3, r0
 8003f68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08a      	sub	sp, #40	@ 0x28
 8003f78:	af02      	add	r7, sp, #8
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	3310      	adds	r3, #16
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	3304      	adds	r3, #4
 8003f9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d901      	bls.n	8003fac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e06b      	b.n	8004084 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	69fa      	ldr	r2, [r7, #28]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3303      	adds	r3, #3
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd0:	e02a      	b.n	8004028 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d902      	bls.n	8003fee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3303      	adds	r3, #3
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	68d9      	ldr	r1, [r3, #12]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4603      	mov	r3, r0
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f002 fdda 	bl	8006bc4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	441a      	add	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	441a      	add	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	429a      	cmp	r2, r3
 800403c:	d809      	bhi.n	8004052 <PCD_WriteEmptyTxFifo+0xde>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004046:	429a      	cmp	r2, r3
 8004048:	d203      	bcs.n	8004052 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1bf      	bne.n	8003fd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691a      	ldr	r2, [r3, #16]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	429a      	cmp	r2, r3
 800405c:	d811      	bhi.n	8004082 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	2201      	movs	r2, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	43db      	mvns	r3, r3
 8004078:	6939      	ldr	r1, [r7, #16]
 800407a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800407e:	4013      	ands	r3, r2
 8004080:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	333c      	adds	r3, #60	@ 0x3c
 80040a4:	3304      	adds	r3, #4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	799b      	ldrb	r3, [r3, #6]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d17b      	bne.n	80041ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f003 0308 	and.w	r3, r3, #8
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	4a61      	ldr	r2, [pc, #388]	@ (8004254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	f240 80b9 	bls.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80b3 	beq.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040f4:	6093      	str	r3, [r2, #8]
 80040f6:	e0a7      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410e:	461a      	mov	r2, r3
 8004110:	2320      	movs	r3, #32
 8004112:	6093      	str	r3, [r2, #8]
 8004114:	e098      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 8093 	bne.w	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4a4b      	ldr	r2, [pc, #300]	@ (8004254 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90f      	bls.n	800414a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e07e      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4413      	add	r3, r2
 800415c:	3304      	adds	r3, #4
 800415e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	440b      	add	r3, r1
 800416c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004176:	1ad2      	subs	r2, r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d114      	bne.n	80041ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004194:	461a      	mov	r2, r3
 8004196:	2101      	movs	r1, #1
 8004198:	f002 ffaa 	bl	80070f0 <USB_EP0_OutStart>
 800419c:	e006      	b.n	80041ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f007 fafc 	bl	800b7b0 <HAL_PCD_DataOutStageCallback>
 80041b8:	e046      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4a26      	ldr	r2, [pc, #152]	@ (8004258 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d124      	bne.n	800420c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041de:	6093      	str	r3, [r2, #8]
 80041e0:	e032      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	2320      	movs	r3, #32
 80041fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f007 fad3 	bl	800b7b0 <HAL_PCD_DataOutStageCallback>
 800420a:	e01d      	b.n	8004248 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d114      	bne.n	800423c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004234:	461a      	mov	r2, r3
 8004236:	2100      	movs	r1, #0
 8004238:	f002 ff5a 	bl	80070f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f007 fab4 	bl	800b7b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	4f54300a 	.word	0x4f54300a
 8004258:	4f54310a 	.word	0x4f54310a

0800425c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	333c      	adds	r3, #60	@ 0x3c
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a15      	ldr	r2, [pc, #84]	@ (80042e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d90e      	bls.n	80042b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f007 fa6b 	bl	800b78c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4a0a      	ldr	r2, [pc, #40]	@ (80042e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d90c      	bls.n	80042d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	799b      	ldrb	r3, [r3, #6]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042d0:	461a      	mov	r2, r3
 80042d2:	2101      	movs	r1, #1
 80042d4:	f002 ff0c 	bl	80070f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	4f54300a 	.word	0x4f54300a

080042e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
 80042f4:	4613      	mov	r3, r2
 80042f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004306:	883b      	ldrh	r3, [r7, #0]
 8004308:	0419      	lsls	r1, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	430a      	orrs	r2, r1
 8004312:	629a      	str	r2, [r3, #40]	@ 0x28
 8004314:	e028      	b.n	8004368 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	0c1b      	lsrs	r3, r3, #16
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e00d      	b.n	8004346 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	7bfb      	ldrb	r3, [r7, #15]
 8004330:	3340      	adds	r3, #64	@ 0x40
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	3301      	adds	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	7bfa      	ldrb	r2, [r7, #15]
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	3b01      	subs	r3, #1
 800434c:	429a      	cmp	r2, r3
 800434e:	d3ec      	bcc.n	800432a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004350:	883b      	ldrh	r3, [r7, #0]
 8004352:	0418      	lsls	r0, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	3b01      	subs	r3, #1
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	4302      	orrs	r2, r0
 8004360:	3340      	adds	r3, #64	@ 0x40
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	887a      	ldrh	r2, [r7, #2]
 8004388:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e267      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d075      	beq.n	80044ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043ce:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d00c      	beq.n	80043f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4b85      	ldr	r3, [pc, #532]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d112      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e6:	4b82      	ldr	r3, [pc, #520]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f2:	d10b      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4b7e      	ldr	r3, [pc, #504]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05b      	beq.n	80044b8 <HAL_RCC_OscConfig+0x108>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d157      	bne.n	80044b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e242      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004414:	d106      	bne.n	8004424 <HAL_RCC_OscConfig+0x74>
 8004416:	4b76      	ldr	r3, [pc, #472]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a75      	ldr	r2, [pc, #468]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x98>
 800442e:	4b70      	ldr	r3, [pc, #448]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a6f      	ldr	r2, [pc, #444]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b6d      	ldr	r3, [pc, #436]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a6c      	ldr	r2, [pc, #432]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004448:	4b69      	ldr	r3, [pc, #420]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a68      	ldr	r2, [pc, #416]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800445e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fd fa34 	bl	80018d4 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004470:	f7fd fa30 	bl	80018d4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	@ 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e207      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b5b      	ldr	r3, [pc, #364]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xc0>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fd fa20 	bl	80018d4 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004498:	f7fd fa1c 	bl	80018d4 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	@ 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1f3      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b51      	ldr	r3, [pc, #324]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0xe8>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044c6:	4b4a      	ldr	r3, [pc, #296]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044de:	4b44      	ldr	r3, [pc, #272]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b41      	ldr	r3, [pc, #260]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1c7      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4937      	ldr	r1, [pc, #220]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e03a      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b34      	ldr	r3, [pc, #208]	@ (80045f4 <HAL_RCC_OscConfig+0x244>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fd f9d5 	bl	80018d4 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452e:	f7fd f9d1 	bl	80018d4 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1a8      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b28      	ldr	r3, [pc, #160]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4925      	ldr	r1, [pc, #148]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004562:	4b24      	ldr	r3, [pc, #144]	@ (80045f4 <HAL_RCC_OscConfig+0x244>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd f9b4 	bl	80018d4 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fd f9b0 	bl	80018d4 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e187      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b1b      	ldr	r3, [pc, #108]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d036      	beq.n	8004608 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <HAL_RCC_OscConfig+0x248>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fd f994 	bl	80018d4 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fd f990 	bl	80018d4 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e167      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_RCC_OscConfig+0x240>)
 80045c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x200>
 80045ce:	e01b      	b.n	8004608 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <HAL_RCC_OscConfig+0x248>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d6:	f7fd f97d 	bl	80018d4 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e00e      	b.n	80045fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045de:	f7fd f979 	bl	80018d4 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d907      	bls.n	80045fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e150      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
 80045f0:	40023800 	.word	0x40023800
 80045f4:	42470000 	.word	0x42470000
 80045f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	4b88      	ldr	r3, [pc, #544]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1ea      	bne.n	80045de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8097 	beq.w	8004744 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004616:	2300      	movs	r3, #0
 8004618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800461a:	4b81      	ldr	r3, [pc, #516]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10f      	bne.n	8004646 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	4b7d      	ldr	r3, [pc, #500]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	4a7c      	ldr	r2, [pc, #496]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6413      	str	r3, [r2, #64]	@ 0x40
 8004636:	4b7a      	ldr	r3, [pc, #488]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004642:	2301      	movs	r3, #1
 8004644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	4b77      	ldr	r3, [pc, #476]	@ (8004824 <HAL_RCC_OscConfig+0x474>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d118      	bne.n	8004684 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004652:	4b74      	ldr	r3, [pc, #464]	@ (8004824 <HAL_RCC_OscConfig+0x474>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a73      	ldr	r2, [pc, #460]	@ (8004824 <HAL_RCC_OscConfig+0x474>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800465c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800465e:	f7fd f939 	bl	80018d4 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004666:	f7fd f935 	bl	80018d4 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e10c      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	4b6a      	ldr	r3, [pc, #424]	@ (8004824 <HAL_RCC_OscConfig+0x474>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d106      	bne.n	800469a <HAL_RCC_OscConfig+0x2ea>
 800468c:	4b64      	ldr	r3, [pc, #400]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004690:	4a63      	ldr	r2, [pc, #396]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	6713      	str	r3, [r2, #112]	@ 0x70
 8004698:	e01c      	b.n	80046d4 <HAL_RCC_OscConfig+0x324>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b05      	cmp	r3, #5
 80046a0:	d10c      	bne.n	80046bc <HAL_RCC_OscConfig+0x30c>
 80046a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_OscConfig+0x324>
 80046bc:	4b58      	ldr	r3, [pc, #352]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c0:	4a57      	ldr	r2, [pc, #348]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 0301 	bic.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c8:	4b55      	ldr	r3, [pc, #340]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046cc:	4a54      	ldr	r2, [pc, #336]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046ce:	f023 0304 	bic.w	r3, r3, #4
 80046d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046dc:	f7fd f8fa 	bl	80018d4 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e4:	f7fd f8f6 	bl	80018d4 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e0cb      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fa:	4b49      	ldr	r3, [pc, #292]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0ee      	beq.n	80046e4 <HAL_RCC_OscConfig+0x334>
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004708:	f7fd f8e4 	bl	80018d4 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fd f8e0 	bl	80018d4 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e0b5      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004726:	4b3e      	ldr	r3, [pc, #248]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1ee      	bne.n	8004710 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004738:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	4a38      	ldr	r2, [pc, #224]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004742:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80a1 	beq.w	8004890 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800474e:	4b34      	ldr	r3, [pc, #208]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b08      	cmp	r3, #8
 8004758:	d05c      	beq.n	8004814 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d141      	bne.n	80047e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b31      	ldr	r3, [pc, #196]	@ (8004828 <HAL_RCC_OscConfig+0x478>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd f8b4 	bl	80018d4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd f8b0 	bl	80018d4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e087      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b27      	ldr	r3, [pc, #156]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69da      	ldr	r2, [r3, #28]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	491b      	ldr	r1, [pc, #108]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <HAL_RCC_OscConfig+0x478>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fd f889 	bl	80018d4 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd f885 	bl	80018d4 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e05c      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d8:	4b11      	ldr	r3, [pc, #68]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x416>
 80047e4:	e054      	b.n	8004890 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e6:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <HAL_RCC_OscConfig+0x478>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd f872 	bl	80018d4 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd f86e 	bl	80018d4 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e045      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_RCC_OscConfig+0x470>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x444>
 8004812:	e03d      	b.n	8004890 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e038      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
 8004820:	40023800 	.word	0x40023800
 8004824:	40007000 	.word	0x40007000
 8004828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800482c:	4b1b      	ldr	r3, [pc, #108]	@ (800489c <HAL_RCC_OscConfig+0x4ec>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d028      	beq.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d121      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d11a      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	4293      	cmp	r3, r2
 8004866:	d111      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d107      	bne.n	800488c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cc      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b68      	ldr	r3, [pc, #416]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d90c      	bls.n	80048dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b65      	ldr	r3, [pc, #404]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a58      	ldr	r2, [pc, #352]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a52      	ldr	r2, [pc, #328]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d044      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e067      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b37      	ldr	r3, [pc, #220]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4934      	ldr	r1, [pc, #208]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fc ffa0 	bl	80018d4 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fc ff9c 	bl	80018d4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2b      	ldr	r3, [pc, #172]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b25      	ldr	r3, [pc, #148]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20c      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b22      	ldr	r3, [pc, #136]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	@ (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4b12      	ldr	r3, [pc, #72]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f821 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	@ (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	@ (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc ff00 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	080106c0 	.word	0x080106c0
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	20000010 	.word	0x20000010

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a70:	b094      	sub	sp, #80	@ 0x50
 8004a72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a84:	4b79      	ldr	r3, [pc, #484]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x40>
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	f200 80e1 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d003      	beq.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9e:	e0db      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa0:	4b73      	ldr	r3, [pc, #460]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aa4:	e0db      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa6:	4b73      	ldr	r3, [pc, #460]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aaa:	e0d8      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aac:	4b6f      	ldr	r3, [pc, #444]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab6:	4b6d      	ldr	r3, [pc, #436]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	099b      	lsrs	r3, r3, #6
 8004ac8:	2200      	movs	r2, #0
 8004aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004acc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ada:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ade:	4622      	mov	r2, r4
 8004ae0:	462b      	mov	r3, r5
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f04f 0100 	mov.w	r1, #0
 8004aea:	0159      	lsls	r1, r3, #5
 8004aec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004af0:	0150      	lsls	r0, r2, #5
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4621      	mov	r1, r4
 8004af8:	1a51      	subs	r1, r2, r1
 8004afa:	6139      	str	r1, [r7, #16]
 8004afc:	4629      	mov	r1, r5
 8004afe:	eb63 0301 	sbc.w	r3, r3, r1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b10:	4659      	mov	r1, fp
 8004b12:	018b      	lsls	r3, r1, #6
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	018a      	lsls	r2, r1, #6
 8004b1e:	4651      	mov	r1, sl
 8004b20:	ebb2 0801 	subs.w	r8, r2, r1
 8004b24:	4659      	mov	r1, fp
 8004b26:	eb63 0901 	sbc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	eb49 0303 	adc.w	r3, r9, r3
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b5e:	4629      	mov	r1, r5
 8004b60:	024b      	lsls	r3, r1, #9
 8004b62:	4621      	mov	r1, r4
 8004b64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b68:	4621      	mov	r1, r4
 8004b6a:	024a      	lsls	r2, r1, #9
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b72:	2200      	movs	r2, #0
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b7c:	f7fc f884 	bl	8000c88 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	e058      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b8a:	4b38      	ldr	r3, [pc, #224]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	099b      	lsrs	r3, r3, #6
 8004b90:	2200      	movs	r2, #0
 8004b92:	4618      	mov	r0, r3
 8004b94:	4611      	mov	r1, r2
 8004b96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	0159      	lsls	r1, r3, #5
 8004bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb6:	0150      	lsls	r0, r2, #5
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bdc:	ebb2 040a 	subs.w	r4, r2, sl
 8004be0:	eb63 050b 	sbc.w	r5, r3, fp
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	00eb      	lsls	r3, r5, #3
 8004bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf2:	00e2      	lsls	r2, r4, #3
 8004bf4:	4614      	mov	r4, r2
 8004bf6:	461d      	mov	r5, r3
 8004bf8:	4643      	mov	r3, r8
 8004bfa:	18e3      	adds	r3, r4, r3
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	464b      	mov	r3, r9
 8004c00:	eb45 0303 	adc.w	r3, r5, r3
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c12:	4629      	mov	r1, r5
 8004c14:	028b      	lsls	r3, r1, #10
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	028a      	lsls	r2, r1, #10
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c26:	2200      	movs	r2, #0
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	61fa      	str	r2, [r7, #28]
 8004c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c30:	f7fc f82a 	bl	8000c88 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3750      	adds	r7, #80	@ 0x50
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	007a1200 	.word	0x007a1200

08004c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	@ (8004c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000000c 	.word	0x2000000c

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c94:	f7ff fff0 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	@ (8004cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0a9b      	lsrs	r3, r3, #10
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	@ (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	080106d0 	.word	0x080106d0

08004cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cbc:	f7ff ffdc 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	0b5b      	lsrs	r3, r3, #13
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4903      	ldr	r1, [pc, #12]	@ (8004cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cce:	5ccb      	ldrb	r3, [r1, r3]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	080106d0 	.word	0x080106d0

08004ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e041      	b.n	8004d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fc22 	bl	8001550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2202      	movs	r2, #2
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f000 f9e6 	bl	80050f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d001      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e04e      	b.n	8004e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0201 	orr.w	r2, r2, #1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d01d      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8004e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a19      	ldr	r2, [pc, #100]	@ (8004e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x80>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d111      	bne.n	8004e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d010      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e22:	e007      	b.n	8004e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40010400 	.word	0x40010400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40001800 	.word	0x40001800

08004e60 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0201 	bic.w	r2, r2, #1
 8004e76:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6a1a      	ldr	r2, [r3, #32]
 8004e7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6a1a      	ldr	r2, [r3, #32]
 8004e8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d107      	bne.n	8004ea8 <HAL_TIM_Base_Stop_IT+0x48>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d01b      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0202 	mvn.w	r2, #2
 8004ef2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0303 	and.w	r3, r3, #3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8d2 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004f0e:	e005      	b.n	8004f1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8c4 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8d5 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d020      	beq.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01b      	beq.n	8004f6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f06f 0204 	mvn.w	r2, #4
 8004f3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8ac 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004f5a:	e005      	b.n	8004f68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f89e 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8af 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01b      	beq.n	8004fba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f06f 0208 	mvn.w	r2, #8
 8004f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2204      	movs	r2, #4
 8004f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f886 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004fa6:	e005      	b.n	8004fb4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f878 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f889 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 0310 	and.w	r3, r3, #16
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d01b      	beq.n	8005006 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f06f 0210 	mvn.w	r2, #16
 8004fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f860 	bl	80050b2 <HAL_TIM_IC_CaptureCallback>
 8004ff2:	e005      	b.n	8005000 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f852 	bl	800509e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f863 	bl	80050c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0201 	mvn.w	r2, #1
 8005022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f005 fde3 	bl	800abf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503a:	2b00      	cmp	r3, #0
 800503c:	d007      	beq.n	800504e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f983 	bl	8005354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00c      	beq.n	8005072 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f834 	bl	80050da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00c      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d007      	beq.n	8005096 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f06f 0220 	mvn.w	r2, #32
 800508e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f955 	bl	8005340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a46      	ldr	r2, [pc, #280]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d013      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d00f      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a43      	ldr	r2, [pc, #268]	@ (8005220 <TIM_Base_SetConfig+0x130>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a42      	ldr	r2, [pc, #264]	@ (8005224 <TIM_Base_SetConfig+0x134>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a41      	ldr	r2, [pc, #260]	@ (8005228 <TIM_Base_SetConfig+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a40      	ldr	r2, [pc, #256]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d108      	bne.n	8005142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a35      	ldr	r2, [pc, #212]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005150:	d027      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a32      	ldr	r2, [pc, #200]	@ (8005220 <TIM_Base_SetConfig+0x130>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d023      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a31      	ldr	r2, [pc, #196]	@ (8005224 <TIM_Base_SetConfig+0x134>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01f      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <TIM_Base_SetConfig+0x138>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2f      	ldr	r2, [pc, #188]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d017      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a2e      	ldr	r2, [pc, #184]	@ (8005230 <TIM_Base_SetConfig+0x140>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a2d      	ldr	r2, [pc, #180]	@ (8005234 <TIM_Base_SetConfig+0x144>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a2c      	ldr	r2, [pc, #176]	@ (8005238 <TIM_Base_SetConfig+0x148>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a2b      	ldr	r2, [pc, #172]	@ (800523c <TIM_Base_SetConfig+0x14c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2a      	ldr	r2, [pc, #168]	@ (8005240 <TIM_Base_SetConfig+0x150>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0xb2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a29      	ldr	r2, [pc, #164]	@ (8005244 <TIM_Base_SetConfig+0x154>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a10      	ldr	r2, [pc, #64]	@ (800521c <TIM_Base_SetConfig+0x12c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_Base_SetConfig+0xf8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a12      	ldr	r2, [pc, #72]	@ (800522c <TIM_Base_SetConfig+0x13c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d103      	bne.n	80051f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]
  }
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	40010000 	.word	0x40010000
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40010400 	.word	0x40010400
 8005230:	40014000 	.word	0x40014000
 8005234:	40014400 	.word	0x40014400
 8005238:	40014800 	.word	0x40014800
 800523c:	40001800 	.word	0x40001800
 8005240:	40001c00 	.word	0x40001c00
 8005244:	40002000 	.word	0x40002000

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e05a      	b.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d01d      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	@ (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a15      	ldr	r2, [pc, #84]	@ (800533c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d10c      	bne.n	8005304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40010000 	.word	0x40010000
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00
 8005334:	40010400 	.word	0x40010400
 8005338:	40014000 	.word	0x40014000
 800533c:	40001800 	.word	0x40001800

08005340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e042      	b.n	8005400 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fc f906 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2224      	movs	r2, #36	@ 0x24
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f973 	bl	8005698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	691a      	ldr	r2, [r3, #16]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80053e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2220      	movs	r2, #32
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	@ 0x28
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b20      	cmp	r3, #32
 8005426:	d175      	bne.n	8005514 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Transmit+0x2c>
 800542e:	88fb      	ldrh	r3, [r7, #6]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e06e      	b.n	8005516 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2221      	movs	r2, #33	@ 0x21
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005446:	f7fc fa45 	bl	80018d4 <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	88fa      	ldrh	r2, [r7, #6]
 8005456:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005460:	d108      	bne.n	8005474 <HAL_UART_Transmit+0x6c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d104      	bne.n	8005474 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	e003      	b.n	800547c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800547c:	e02e      	b.n	80054dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2200      	movs	r2, #0
 8005486:	2180      	movs	r1, #128	@ 0x80
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f848 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d005      	beq.n	80054a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e03a      	b.n	8005516 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3302      	adds	r3, #2
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	e007      	b.n	80054ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1cb      	bne.n	800547e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2200      	movs	r2, #0
 80054ee:	2140      	movs	r1, #64	@ 0x40
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f814 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e006      	b.n	8005516 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005510:	2300      	movs	r3, #0
 8005512:	e000      	b.n	8005516 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552e:	e03b      	b.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d037      	beq.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fc f9cc 	bl	80018d4 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	6a3a      	ldr	r2, [r7, #32]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <UART_WaitOnFlagUntilTimeout+0x30>
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e03a      	b.n	80055c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d023      	beq.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b80      	cmp	r3, #128	@ 0x80
 8005564:	d020      	beq.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b40      	cmp	r3, #64	@ 0x40
 800556a:	d01d      	beq.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b08      	cmp	r3, #8
 8005578:	d116      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f81d 	bl	80055d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2208      	movs	r2, #8
 800559a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e00f      	b.n	80055c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4013      	ands	r3, r2
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	bf0c      	ite	eq
 80055b8:	2301      	moveq	r3, #1
 80055ba:	2300      	movne	r3, #0
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d0b4      	beq.n	8005530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b095      	sub	sp, #84	@ 0x54
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80055fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	61fb      	str	r3, [r7, #28]
   return(result);
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f023 0301 	bic.w	r3, r3, #1
 8005622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3314      	adds	r3, #20
 800562a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800562c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800562e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e5      	bne.n	800560c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005644:	2b01      	cmp	r3, #1
 8005646:	d119      	bne.n	800567c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	330c      	adds	r3, #12
 800564e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	60bb      	str	r3, [r7, #8]
   return(result);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f023 0310 	bic.w	r3, r3, #16
 800565e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005668:	61ba      	str	r2, [r7, #24]
 800566a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566c:	6979      	ldr	r1, [r7, #20]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	613b      	str	r3, [r7, #16]
   return(result);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e5      	bne.n	8005648 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800568a:	bf00      	nop
 800568c:	3754      	adds	r7, #84	@ 0x54
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800569c:	b0c0      	sub	sp, #256	@ 0x100
 800569e:	af00      	add	r7, sp, #0
 80056a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b4:	68d9      	ldr	r1, [r3, #12]
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	ea40 0301 	orr.w	r3, r0, r1
 80056c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056f0:	f021 010c 	bic.w	r1, r1, #12
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056fe:	430b      	orrs	r3, r1
 8005700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005712:	6999      	ldr	r1, [r3, #24]
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	ea40 0301 	orr.w	r3, r0, r1
 800571e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b8f      	ldr	r3, [pc, #572]	@ (8005964 <UART_SetConfig+0x2cc>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d005      	beq.n	8005738 <UART_SetConfig+0xa0>
 800572c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b8d      	ldr	r3, [pc, #564]	@ (8005968 <UART_SetConfig+0x2d0>)
 8005734:	429a      	cmp	r2, r3
 8005736:	d104      	bne.n	8005742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7ff fabe 	bl	8004cb8 <HAL_RCC_GetPCLK2Freq>
 800573c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005740:	e003      	b.n	800574a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005742:	f7ff faa5 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 8005746:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005754:	f040 810c 	bne.w	8005970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005762:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	1891      	adds	r1, r2, r2
 8005770:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005772:	415b      	adcs	r3, r3
 8005774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800577a:	4621      	mov	r1, r4
 800577c:	eb12 0801 	adds.w	r8, r2, r1
 8005780:	4629      	mov	r1, r5
 8005782:	eb43 0901 	adc.w	r9, r3, r1
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800579a:	4690      	mov	r8, r2
 800579c:	4699      	mov	r9, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	eb18 0303 	adds.w	r3, r8, r3
 80057a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80057a8:	462b      	mov	r3, r5
 80057aa:	eb49 0303 	adc.w	r3, r9, r3
 80057ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80057be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80057c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80057c6:	460b      	mov	r3, r1
 80057c8:	18db      	adds	r3, r3, r3
 80057ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80057cc:	4613      	mov	r3, r2
 80057ce:	eb42 0303 	adc.w	r3, r2, r3
 80057d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057dc:	f7fb fa54 	bl	8000c88 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4b61      	ldr	r3, [pc, #388]	@ (800596c <UART_SetConfig+0x2d4>)
 80057e6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	011c      	lsls	r4, r3, #4
 80057ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005800:	4642      	mov	r2, r8
 8005802:	464b      	mov	r3, r9
 8005804:	1891      	adds	r1, r2, r2
 8005806:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005808:	415b      	adcs	r3, r3
 800580a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800580c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005810:	4641      	mov	r1, r8
 8005812:	eb12 0a01 	adds.w	sl, r2, r1
 8005816:	4649      	mov	r1, r9
 8005818:	eb43 0b01 	adc.w	fp, r3, r1
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800582c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005830:	4692      	mov	sl, r2
 8005832:	469b      	mov	fp, r3
 8005834:	4643      	mov	r3, r8
 8005836:	eb1a 0303 	adds.w	r3, sl, r3
 800583a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800583e:	464b      	mov	r3, r9
 8005840:	eb4b 0303 	adc.w	r3, fp, r3
 8005844:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005854:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800585c:	460b      	mov	r3, r1
 800585e:	18db      	adds	r3, r3, r3
 8005860:	643b      	str	r3, [r7, #64]	@ 0x40
 8005862:	4613      	mov	r3, r2
 8005864:	eb42 0303 	adc.w	r3, r2, r3
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
 800586a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800586e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005872:	f7fb fa09 	bl	8000c88 <__aeabi_uldivmod>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4611      	mov	r1, r2
 800587c:	4b3b      	ldr	r3, [pc, #236]	@ (800596c <UART_SetConfig+0x2d4>)
 800587e:	fba3 2301 	umull	r2, r3, r3, r1
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	2264      	movs	r2, #100	@ 0x64
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	1acb      	subs	r3, r1, r3
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005892:	4b36      	ldr	r3, [pc, #216]	@ (800596c <UART_SetConfig+0x2d4>)
 8005894:	fba3 2302 	umull	r2, r3, r3, r2
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80058a0:	441c      	add	r4, r3
 80058a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80058b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	1891      	adds	r1, r2, r2
 80058ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80058bc:	415b      	adcs	r3, r3
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058c4:	4641      	mov	r1, r8
 80058c6:	1851      	adds	r1, r2, r1
 80058c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80058ca:	4649      	mov	r1, r9
 80058cc:	414b      	adcs	r3, r1
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058dc:	4659      	mov	r1, fp
 80058de:	00cb      	lsls	r3, r1, #3
 80058e0:	4651      	mov	r1, sl
 80058e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058e6:	4651      	mov	r1, sl
 80058e8:	00ca      	lsls	r2, r1, #3
 80058ea:	4610      	mov	r0, r2
 80058ec:	4619      	mov	r1, r3
 80058ee:	4603      	mov	r3, r0
 80058f0:	4642      	mov	r2, r8
 80058f2:	189b      	adds	r3, r3, r2
 80058f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058f8:	464b      	mov	r3, r9
 80058fa:	460a      	mov	r2, r1
 80058fc:	eb42 0303 	adc.w	r3, r2, r3
 8005900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005910:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005918:	460b      	mov	r3, r1
 800591a:	18db      	adds	r3, r3, r3
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591e:	4613      	mov	r3, r2
 8005920:	eb42 0303 	adc.w	r3, r2, r3
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800592a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800592e:	f7fb f9ab 	bl	8000c88 <__aeabi_uldivmod>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <UART_SetConfig+0x2d4>)
 8005938:	fba3 1302 	umull	r1, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	2164      	movs	r1, #100	@ 0x64
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	3332      	adds	r3, #50	@ 0x32
 800594a:	4a08      	ldr	r2, [pc, #32]	@ (800596c <UART_SetConfig+0x2d4>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	095b      	lsrs	r3, r3, #5
 8005952:	f003 0207 	and.w	r2, r3, #7
 8005956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4422      	add	r2, r4
 800595e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005960:	e106      	b.n	8005b70 <UART_SetConfig+0x4d8>
 8005962:	bf00      	nop
 8005964:	40011000 	.word	0x40011000
 8005968:	40011400 	.word	0x40011400
 800596c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005974:	2200      	movs	r2, #0
 8005976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800597a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800597e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005982:	4642      	mov	r2, r8
 8005984:	464b      	mov	r3, r9
 8005986:	1891      	adds	r1, r2, r2
 8005988:	6239      	str	r1, [r7, #32]
 800598a:	415b      	adcs	r3, r3
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
 800598e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005992:	4641      	mov	r1, r8
 8005994:	1854      	adds	r4, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb43 0501 	adc.w	r5, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	00eb      	lsls	r3, r5, #3
 80059a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059aa:	00e2      	lsls	r2, r4, #3
 80059ac:	4614      	mov	r4, r2
 80059ae:	461d      	mov	r5, r3
 80059b0:	4643      	mov	r3, r8
 80059b2:	18e3      	adds	r3, r4, r3
 80059b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059b8:	464b      	mov	r3, r9
 80059ba:	eb45 0303 	adc.w	r3, r5, r3
 80059be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80059ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059d2:	f04f 0200 	mov.w	r2, #0
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059de:	4629      	mov	r1, r5
 80059e0:	008b      	lsls	r3, r1, #2
 80059e2:	4621      	mov	r1, r4
 80059e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059e8:	4621      	mov	r1, r4
 80059ea:	008a      	lsls	r2, r1, #2
 80059ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059f0:	f7fb f94a 	bl	8000c88 <__aeabi_uldivmod>
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4b60      	ldr	r3, [pc, #384]	@ (8005b7c <UART_SetConfig+0x4e4>)
 80059fa:	fba3 2302 	umull	r2, r3, r3, r2
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	011c      	lsls	r4, r3, #4
 8005a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005a0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005a14:	4642      	mov	r2, r8
 8005a16:	464b      	mov	r3, r9
 8005a18:	1891      	adds	r1, r2, r2
 8005a1a:	61b9      	str	r1, [r7, #24]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a24:	4641      	mov	r1, r8
 8005a26:	1851      	adds	r1, r2, r1
 8005a28:	6139      	str	r1, [r7, #16]
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	414b      	adcs	r3, r1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a3c:	4659      	mov	r1, fp
 8005a3e:	00cb      	lsls	r3, r1, #3
 8005a40:	4651      	mov	r1, sl
 8005a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a46:	4651      	mov	r1, sl
 8005a48:	00ca      	lsls	r2, r1, #3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4642      	mov	r2, r8
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a58:	464b      	mov	r3, r9
 8005a5a:	460a      	mov	r2, r1
 8005a5c:	eb42 0303 	adc.w	r3, r2, r3
 8005a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a7c:	4649      	mov	r1, r9
 8005a7e:	008b      	lsls	r3, r1, #2
 8005a80:	4641      	mov	r1, r8
 8005a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a86:	4641      	mov	r1, r8
 8005a88:	008a      	lsls	r2, r1, #2
 8005a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a8e:	f7fb f8fb 	bl	8000c88 <__aeabi_uldivmod>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	4b38      	ldr	r3, [pc, #224]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2264      	movs	r2, #100	@ 0x64
 8005aa2:	fb02 f303 	mul.w	r3, r2, r3
 8005aa6:	1acb      	subs	r3, r1, r3
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	3332      	adds	r3, #50	@ 0x32
 8005aac:	4a33      	ldr	r2, [pc, #204]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ab8:	441c      	add	r4, r3
 8005aba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005abe:	2200      	movs	r2, #0
 8005ac0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ac2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ac4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ac8:	4642      	mov	r2, r8
 8005aca:	464b      	mov	r3, r9
 8005acc:	1891      	adds	r1, r2, r2
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	415b      	adcs	r3, r3
 8005ad2:	60fb      	str	r3, [r7, #12]
 8005ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ad8:	4641      	mov	r1, r8
 8005ada:	1851      	adds	r1, r2, r1
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	4649      	mov	r1, r9
 8005ae0:	414b      	adcs	r3, r1
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005af0:	4659      	mov	r1, fp
 8005af2:	00cb      	lsls	r3, r1, #3
 8005af4:	4651      	mov	r1, sl
 8005af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005afa:	4651      	mov	r1, sl
 8005afc:	00ca      	lsls	r2, r1, #3
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	4603      	mov	r3, r0
 8005b04:	4642      	mov	r2, r8
 8005b06:	189b      	adds	r3, r3, r2
 8005b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	460a      	mov	r2, r1
 8005b0e:	eb42 0303 	adc.w	r3, r2, r3
 8005b12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	008b      	lsls	r3, r1, #2
 8005b30:	4641      	mov	r1, r8
 8005b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b36:	4641      	mov	r1, r8
 8005b38:	008a      	lsls	r2, r1, #2
 8005b3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b3e:	f7fb f8a3 	bl	8000c88 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005b48:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	2164      	movs	r1, #100	@ 0x64
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	3332      	adds	r3, #50	@ 0x32
 8005b5a:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <UART_SetConfig+0x4e4>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	f003 020f 	and.w	r2, r3, #15
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4422      	add	r2, r4
 8005b6e:	609a      	str	r2, [r3, #8]
}
 8005b70:	bf00      	nop
 8005b72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b76:	46bd      	mov	sp, r7
 8005b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b7c:	51eb851f 	.word	0x51eb851f

08005b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b80:	b084      	sub	sp, #16
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	f107 001c 	add.w	r0, r7, #28
 8005b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d123      	bne.n	8005be2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fae8 	bl	80071ac <USB_CoreReset>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
 8005be0:	e01b      	b.n	8005c1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fadc 	bl	80071ac <USB_CoreReset>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c0c:	e005      	b.n	8005c1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c1a:	7fbb      	ldrb	r3, [r7, #30]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d10b      	bne.n	8005c38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f043 0206 	orr.w	r2, r3, #6
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f043 0220 	orr.w	r2, r3, #32
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c44:	b004      	add	sp, #16
 8005c46:	4770      	bx	lr

08005c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	4613      	mov	r3, r2
 8005c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d165      	bne.n	8005d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4a41      	ldr	r2, [pc, #260]	@ (8005d64 <USB_SetTurnaroundTime+0x11c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d906      	bls.n	8005c72 <USB_SetTurnaroundTime+0x2a>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a40      	ldr	r2, [pc, #256]	@ (8005d68 <USB_SetTurnaroundTime+0x120>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d202      	bcs.n	8005c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c6c:	230f      	movs	r3, #15
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e062      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4a3c      	ldr	r2, [pc, #240]	@ (8005d68 <USB_SetTurnaroundTime+0x120>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d306      	bcc.n	8005c88 <USB_SetTurnaroundTime+0x40>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4a3b      	ldr	r2, [pc, #236]	@ (8005d6c <USB_SetTurnaroundTime+0x124>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d202      	bcs.n	8005c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c82:	230e      	movs	r3, #14
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e057      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4a38      	ldr	r2, [pc, #224]	@ (8005d6c <USB_SetTurnaroundTime+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d306      	bcc.n	8005c9e <USB_SetTurnaroundTime+0x56>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	4a37      	ldr	r2, [pc, #220]	@ (8005d70 <USB_SetTurnaroundTime+0x128>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d202      	bcs.n	8005c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c98:	230d      	movs	r3, #13
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	e04c      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4a33      	ldr	r2, [pc, #204]	@ (8005d70 <USB_SetTurnaroundTime+0x128>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d306      	bcc.n	8005cb4 <USB_SetTurnaroundTime+0x6c>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4a32      	ldr	r2, [pc, #200]	@ (8005d74 <USB_SetTurnaroundTime+0x12c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d802      	bhi.n	8005cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cae:	230c      	movs	r3, #12
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e041      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8005d74 <USB_SetTurnaroundTime+0x12c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d906      	bls.n	8005cca <USB_SetTurnaroundTime+0x82>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8005d78 <USB_SetTurnaroundTime+0x130>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d802      	bhi.n	8005cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005cc4:	230b      	movs	r3, #11
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e036      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	4a2a      	ldr	r2, [pc, #168]	@ (8005d78 <USB_SetTurnaroundTime+0x130>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d906      	bls.n	8005ce0 <USB_SetTurnaroundTime+0x98>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	4a29      	ldr	r2, [pc, #164]	@ (8005d7c <USB_SetTurnaroundTime+0x134>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d802      	bhi.n	8005ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cda:	230a      	movs	r3, #10
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	e02b      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4a26      	ldr	r2, [pc, #152]	@ (8005d7c <USB_SetTurnaroundTime+0x134>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d906      	bls.n	8005cf6 <USB_SetTurnaroundTime+0xae>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4a25      	ldr	r2, [pc, #148]	@ (8005d80 <USB_SetTurnaroundTime+0x138>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d202      	bcs.n	8005cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005cf0:	2309      	movs	r3, #9
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	e020      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	4a21      	ldr	r2, [pc, #132]	@ (8005d80 <USB_SetTurnaroundTime+0x138>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d306      	bcc.n	8005d0c <USB_SetTurnaroundTime+0xc4>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	4a20      	ldr	r2, [pc, #128]	@ (8005d84 <USB_SetTurnaroundTime+0x13c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d802      	bhi.n	8005d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d06:	2308      	movs	r3, #8
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	e015      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d84 <USB_SetTurnaroundTime+0x13c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d906      	bls.n	8005d22 <USB_SetTurnaroundTime+0xda>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	4a1c      	ldr	r2, [pc, #112]	@ (8005d88 <USB_SetTurnaroundTime+0x140>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d202      	bcs.n	8005d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d1c:	2307      	movs	r3, #7
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e00a      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d22:	2306      	movs	r3, #6
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e007      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d28:	79fb      	ldrb	r3, [r7, #7]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d102      	bne.n	8005d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d2e:	2309      	movs	r3, #9
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e001      	b.n	8005d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d34:	2309      	movs	r3, #9
 8005d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	00d8acbf 	.word	0x00d8acbf
 8005d68:	00e4e1c0 	.word	0x00e4e1c0
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	01067380 	.word	0x01067380
 8005d74:	011a499f 	.word	0x011a499f
 8005d78:	01312cff 	.word	0x01312cff
 8005d7c:	014ca43f 	.word	0x014ca43f
 8005d80:	016e3600 	.word	0x016e3600
 8005d84:	01a6ab1f 	.word	0x01a6ab1f
 8005d88:	01e84800 	.word	0x01e84800

08005d8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f043 0201 	orr.w	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 0201 	bic.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d115      	bne.n	8005e1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005dfe:	200a      	movs	r0, #10
 8005e00:	f7fb fd74 	bl	80018ec <HAL_Delay>
      ms += 10U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	330a      	adds	r3, #10
 8005e08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 f93f 	bl	800708e <USB_GetMode>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d01e      	beq.n	8005e54 <USB_SetCurrentMode+0x84>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e1a:	d9f0      	bls.n	8005dfe <USB_SetCurrentMode+0x2e>
 8005e1c:	e01a      	b.n	8005e54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d115      	bne.n	8005e50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e30:	200a      	movs	r0, #10
 8005e32:	f7fb fd5b 	bl	80018ec <HAL_Delay>
      ms += 10U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	330a      	adds	r3, #10
 8005e3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f001 f926 	bl	800708e <USB_GetMode>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <USB_SetCurrentMode+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e4c:	d9f0      	bls.n	8005e30 <USB_SetCurrentMode+0x60>
 8005e4e:	e001      	b.n	8005e54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e005      	b.n	8005e60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2bc8      	cmp	r3, #200	@ 0xc8
 8005e58:	d101      	bne.n	8005e5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e000      	b.n	8005e60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e009      	b.n	8005e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	3340      	adds	r3, #64	@ 0x40
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	2200      	movs	r2, #0
 8005e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	2b0e      	cmp	r3, #14
 8005ea0:	d9f2      	bls.n	8005e88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ea2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d11c      	bne.n	8005ee4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb8:	f043 0302 	orr.w	r3, r3, #2
 8005ebc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ee2:	e00b      	b.n	8005efc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10d      	bne.n	8005f2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f18:	2100      	movs	r1, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f968 	bl	80061f0 <USB_SetDevSpeed>
 8005f20:	e008      	b.n	8005f34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f22:	2101      	movs	r1, #1
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f963 	bl	80061f0 <USB_SetDevSpeed>
 8005f2a:	e003      	b.n	8005f34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f2c:	2103      	movs	r1, #3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f95e 	bl	80061f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f34:	2110      	movs	r1, #16
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8fa 	bl	8006130 <USB_FlushTxFifo>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f924 	bl	8006194 <USB_FlushRxFifo>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	461a      	mov	r2, r3
 8005f76:	2300      	movs	r3, #0
 8005f78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e043      	b.n	8006008 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f96:	d118      	bne.n	8005fca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005faa:	461a      	mov	r2, r3
 8005fac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e013      	b.n	8005fdc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fc6:	6013      	str	r3, [r2, #0]
 8005fc8:	e008      	b.n	8005fdc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2300      	movs	r3, #0
 8005fda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006000:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800600c:	461a      	mov	r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4293      	cmp	r3, r2
 8006012:	d3b5      	bcc.n	8005f80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006014:	2300      	movs	r3, #0
 8006016:	613b      	str	r3, [r7, #16]
 8006018:	e043      	b.n	80060a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800602c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006030:	d118      	bne.n	8006064 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006044:	461a      	mov	r2, r3
 8006046:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	e013      	b.n	8006076 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605a:	461a      	mov	r2, r3
 800605c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	e008      	b.n	8006076 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	015a      	lsls	r2, r3, #5
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006070:	461a      	mov	r2, r3
 8006072:	2300      	movs	r3, #0
 8006074:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006094:	461a      	mov	r2, r3
 8006096:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800609a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	3301      	adds	r3, #1
 80060a0:	613b      	str	r3, [r7, #16]
 80060a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80060a6:	461a      	mov	r2, r3
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d3b5      	bcc.n	800601a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80060ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d105      	bne.n	80060e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f043 0210 	orr.w	r2, r3, #16
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	4b10      	ldr	r3, [pc, #64]	@ (800612c <USB_DevInit+0x2c4>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80060f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f043 0208 	orr.w	r2, r3, #8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006104:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006108:	2b01      	cmp	r3, #1
 800610a:	d107      	bne.n	800611c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006114:	f043 0304 	orr.w	r3, r3, #4
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006128:	b004      	add	sp, #16
 800612a:	4770      	bx	lr
 800612c:	803c3800 	.word	0x803c3800

08006130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800614a:	d901      	bls.n	8006150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e01b      	b.n	8006188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	daf2      	bge.n	800613e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	019b      	lsls	r3, r3, #6
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006174:	d901      	bls.n	800617a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e006      	b.n	8006188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0320 	and.w	r3, r3, #32
 8006182:	2b20      	cmp	r3, #32
 8006184:	d0f0      	beq.n	8006168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3301      	adds	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ac:	d901      	bls.n	80061b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e018      	b.n	80061e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	daf2      	bge.n	80061a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2210      	movs	r2, #16
 80061c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061d0:	d901      	bls.n	80061d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e006      	b.n	80061e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d0f0      	beq.n	80061c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	68f9      	ldr	r1, [r7, #12]
 800620c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006210:	4313      	orrs	r3, r2
 8006212:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b087      	sub	sp, #28
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0306 	and.w	r3, r3, #6
 800623a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006242:	2300      	movs	r3, #0
 8006244:	75fb      	strb	r3, [r7, #23]
 8006246:	e00a      	b.n	800625e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d002      	beq.n	8006254 <USB_GetDevSpeed+0x32>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b06      	cmp	r3, #6
 8006252:	d102      	bne.n	800625a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006254:	2302      	movs	r3, #2
 8006256:	75fb      	strb	r3, [r7, #23]
 8006258:	e001      	b.n	800625e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800625a:	230f      	movs	r3, #15
 800625c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	371c      	adds	r7, #28
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	785b      	ldrb	r3, [r3, #1]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d13a      	bne.n	80062fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2101      	movs	r1, #1
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	b29b      	uxth	r3, r3
 80062a0:	68f9      	ldr	r1, [r7, #12]
 80062a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062a6:	4313      	orrs	r3, r2
 80062a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d155      	bne.n	800636c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	791b      	ldrb	r3, [r3, #4]
 80062da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	059b      	lsls	r3, r3, #22
 80062e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062e4:	4313      	orrs	r3, r2
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e036      	b.n	800636c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	2101      	movs	r1, #1
 8006310:	fa01 f303 	lsl.w	r3, r1, r3
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800631c:	4313      	orrs	r3, r2
 800631e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d11a      	bne.n	800636c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	791b      	ldrb	r3, [r3, #4]
 8006350:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006352:	430b      	orrs	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800636a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
	...

0800637c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d161      	bne.n	800645c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063ae:	d11f      	bne.n	80063f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	2101      	movs	r1, #1
 8006402:	fa01 f303 	lsl.w	r3, r1, r3
 8006406:	b29b      	uxth	r3, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	68f9      	ldr	r1, [r7, #12]
 800640c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006410:	4013      	ands	r3, r2
 8006412:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f303 	lsl.w	r3, r1, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006434:	4013      	ands	r3, r2
 8006436:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	0159      	lsls	r1, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	440b      	add	r3, r1
 800644e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006452:	4619      	mov	r1, r3
 8006454:	4b35      	ldr	r3, [pc, #212]	@ (800652c <USB_DeactivateEndpoint+0x1b0>)
 8006456:	4013      	ands	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
 800645a:	e060      	b.n	800651e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800646e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006472:	d11f      	bne.n	80064b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800648e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006492:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	2101      	movs	r1, #1
 80064c6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	43db      	mvns	r3, r3
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064d4:	4013      	ands	r3, r2
 80064d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064de:	69da      	ldr	r2, [r3, #28]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f303 	lsl.w	r3, r1, r3
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	43db      	mvns	r3, r3
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064f8:	4013      	ands	r3, r2
 80064fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	0159      	lsls	r1, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	440b      	add	r3, r1
 8006512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006516:	4619      	mov	r1, r3
 8006518:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <USB_DeactivateEndpoint+0x1b4>)
 800651a:	4013      	ands	r3, r2
 800651c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	ec337800 	.word	0xec337800
 8006530:	eff37800 	.word	0xeff37800

08006534 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
 8006538:	af02      	add	r7, sp, #8
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b01      	cmp	r3, #1
 8006552:	f040 817f 	bne.w	8006854 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d132      	bne.n	80065c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006578:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800657c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800659c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065bc:	0cdb      	lsrs	r3, r3, #19
 80065be:	04db      	lsls	r3, r3, #19
 80065c0:	6113      	str	r3, [r2, #16]
 80065c2:	e097      	b.n	80066f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	69fa      	ldr	r2, [r7, #28]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065de:	0cdb      	lsrs	r3, r3, #19
 80065e0:	04db      	lsls	r3, r3, #19
 80065e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	69fa      	ldr	r2, [r7, #28]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006602:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006606:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d11a      	bne.n	8006644 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d903      	bls.n	8006622 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006640:	6113      	str	r3, [r2, #16]
 8006642:	e044      	b.n	80066ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4413      	add	r3, r2
 800664e:	1e5a      	subs	r2, r3, #1
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	fbb2 f3f3 	udiv	r3, r2, r3
 8006658:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	8afb      	ldrh	r3, [r7, #22]
 800666a:	04d9      	lsls	r1, r3, #19
 800666c:	4ba4      	ldr	r3, [pc, #656]	@ (8006900 <USB_EPStartXfer+0x3cc>)
 800666e:	400b      	ands	r3, r1
 8006670:	69b9      	ldr	r1, [r7, #24]
 8006672:	0148      	lsls	r0, r1, #5
 8006674:	69f9      	ldr	r1, [r7, #28]
 8006676:	4401      	add	r1, r0
 8006678:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800667c:	4313      	orrs	r3, r2
 800667e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d122      	bne.n	80066ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80066a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	8afb      	ldrh	r3, [r7, #22]
 80066b8:	075b      	lsls	r3, r3, #29
 80066ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80066be:	69b9      	ldr	r1, [r7, #24]
 80066c0:	0148      	lsls	r0, r1, #5
 80066c2:	69f9      	ldr	r1, [r7, #28]
 80066c4:	4401      	add	r1, r0
 80066c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80066ca:	4313      	orrs	r3, r2
 80066cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	0148      	lsls	r0, r1, #5
 80066e8:	69f9      	ldr	r1, [r7, #28]
 80066ea:	4401      	add	r1, r0
 80066ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80066f0:	4313      	orrs	r3, r2
 80066f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d14b      	bne.n	8006792 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d009      	beq.n	8006716 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670e:	461a      	mov	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	791b      	ldrb	r3, [r3, #4]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d128      	bne.n	8006770 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d110      	bne.n	8006750 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006748:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00f      	b.n	8006770 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800676a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800676e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800678a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800678e:	6013      	str	r3, [r2, #0]
 8006790:	e166      	b.n	8006a60 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	791b      	ldrb	r3, [r3, #4]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d015      	beq.n	80067e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 814e 	beq.w	8006a60 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	2101      	movs	r1, #1
 80067d6:	fa01 f303 	lsl.w	r3, r1, r3
 80067da:	69f9      	ldr	r1, [r7, #28]
 80067dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067e0:	4313      	orrs	r3, r2
 80067e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80067e4:	e13c      	b.n	8006a60 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d110      	bne.n	8006818 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006810:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	e00f      	b.n	8006838 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	0151      	lsls	r1, r2, #5
 800682a:	69fa      	ldr	r2, [r7, #28]
 800682c:	440a      	add	r2, r1
 800682e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006836:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	68d9      	ldr	r1, [r3, #12]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	781a      	ldrb	r2, [r3, #0]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	b298      	uxth	r0, r3
 8006846:	79fb      	ldrb	r3, [r7, #7]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4603      	mov	r3, r0
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 f9b9 	bl	8006bc4 <USB_WritePacket>
 8006852:	e105      	b.n	8006a60 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686e:	0cdb      	lsrs	r3, r3, #19
 8006870:	04db      	lsls	r3, r3, #19
 8006872:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006892:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006896:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d132      	bne.n	8006904 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	0148      	lsls	r0, r1, #5
 80068d0:	69f9      	ldr	r1, [r7, #28]
 80068d2:	4401      	add	r1, r0
 80068d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068d8:	4313      	orrs	r3, r2
 80068da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068fa:	6113      	str	r3, [r2, #16]
 80068fc:	e062      	b.n	80069c4 <USB_EPStartXfer+0x490>
 80068fe:	bf00      	nop
 8006900:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d123      	bne.n	8006954 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006922:	69b9      	ldr	r1, [r7, #24]
 8006924:	0148      	lsls	r0, r1, #5
 8006926:	69f9      	ldr	r1, [r7, #28]
 8006928:	4401      	add	r1, r0
 800692a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800692e:	4313      	orrs	r3, r2
 8006930:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006950:	6113      	str	r3, [r2, #16]
 8006952:	e037      	b.n	80069c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	4413      	add	r3, r2
 800695e:	1e5a      	subs	r2, r3, #1
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	fbb2 f3f3 	udiv	r3, r2, r3
 8006968:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	8afa      	ldrh	r2, [r7, #22]
 8006970:	fb03 f202 	mul.w	r2, r3, r2
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	04d9      	lsls	r1, r3, #19
 800698a:	4b38      	ldr	r3, [pc, #224]	@ (8006a6c <USB_EPStartXfer+0x538>)
 800698c:	400b      	ands	r3, r1
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	0148      	lsls	r0, r1, #5
 8006992:	69f9      	ldr	r1, [r7, #28]
 8006994:	4401      	add	r1, r0
 8006996:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069aa:	691a      	ldr	r2, [r3, #16]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069b4:	69b9      	ldr	r1, [r7, #24]
 80069b6:	0148      	lsls	r0, r1, #5
 80069b8:	69f9      	ldr	r1, [r7, #28]
 80069ba:	4401      	add	r1, r0
 80069bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069c0:	4313      	orrs	r3, r2
 80069c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10d      	bne.n	80069e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d009      	beq.n	80069e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68d9      	ldr	r1, [r3, #12]
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e2:	460a      	mov	r2, r1
 80069e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d128      	bne.n	8006a40 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d110      	bne.n	8006a20 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	015a      	lsls	r2, r3, #5
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	4413      	add	r3, r2
 8006a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	0151      	lsls	r1, r2, #5
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	440a      	add	r2, r1
 8006a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e00f      	b.n	8006a40 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	0151      	lsls	r1, r2, #5
 8006a32:	69fa      	ldr	r2, [r7, #28]
 8006a34:	440a      	add	r2, r1
 8006a36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3720      	adds	r7, #32
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	1ff80000 	.word	0x1ff80000

08006a70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d14a      	bne.n	8006b24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa6:	f040 8086 	bne.w	8006bb6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	7812      	ldrb	r2, [r2, #0]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006acc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d902      	bls.n	8006b08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	75fb      	strb	r3, [r7, #23]
          break;
 8006b06:	e056      	b.n	8006bb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b20:	d0e7      	beq.n	8006af2 <USB_EPStopXfer+0x82>
 8006b22:	e048      	b.n	8006bb6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3c:	d13b      	bne.n	8006bb6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	7812      	ldrb	r2, [r2, #0]
 8006b76:	0151      	lsls	r1, r2, #5
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d902      	bls.n	8006b9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	75fb      	strb	r3, [r7, #23]
          break;
 8006b9a:	e00c      	b.n	8006bb6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d0e7      	beq.n	8006b86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	371c      	adds	r7, #28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b089      	sub	sp, #36	@ 0x24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	71fb      	strb	r3, [r7, #7]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006be2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d123      	bne.n	8006c32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bea:	88bb      	ldrh	r3, [r7, #4]
 8006bec:	3303      	adds	r3, #3
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e018      	b.n	8006c2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	031a      	lsls	r2, r3, #12
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c04:	461a      	mov	r2, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3301      	adds	r3, #1
 8006c16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	3301      	adds	r3, #1
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	69ba      	ldr	r2, [r7, #24]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3e2      	bcc.n	8006bf8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3724      	adds	r7, #36	@ 0x24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b08b      	sub	sp, #44	@ 0x2c
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	089b      	lsrs	r3, r3, #2
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	623b      	str	r3, [r7, #32]
 8006c6a:	e014      	b.n	8006c96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	3301      	adds	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c86:	3301      	adds	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	3301      	adds	r3, #1
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d3e6      	bcc.n	8006c6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01e      	beq.n	8006ce2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f107 0310 	add.w	r3, r7, #16
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	701a      	strb	r2, [r3, #0]
      i++;
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	623b      	str	r3, [r7, #32]
      pDest++;
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006cd6:	8bfb      	ldrh	r3, [r7, #30]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006cdc:	8bfb      	ldrh	r3, [r7, #30]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ea      	bne.n	8006cb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	372c      	adds	r7, #44	@ 0x2c
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d12c      	bne.n	8006d66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	db12      	blt.n	8006d44 <USB_EPSetStall+0x54>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00f      	beq.n	8006d44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e02b      	b.n	8006dbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	db12      	blt.n	8006d9e <USB_EPSetStall+0xae>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00f      	beq.n	8006d9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006dbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d128      	bne.n	8006e3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	791b      	ldrb	r3, [r3, #4]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d003      	beq.n	8006e18 <USB_EPClearStall+0x4c>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	791b      	ldrb	r3, [r3, #4]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d138      	bne.n	8006e8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68ba      	ldr	r2, [r7, #8]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e36:	6013      	str	r3, [r2, #0]
 8006e38:	e027      	b.n	8006e8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	791b      	ldrb	r3, [r3, #4]
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d003      	beq.n	8006e6a <USB_EPClearStall+0x9e>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	791b      	ldrb	r3, [r3, #4]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d10f      	bne.n	8006e8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eb6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006eba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006ecc:	68f9      	ldr	r1, [r7, #12]
 8006ece:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f12:	f023 0302 	bic.w	r3, r3, #2
 8006f16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3714      	adds	r7, #20
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f40:	f023 0303 	bic.w	r3, r3, #3
 8006f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f54:	f043 0302 	orr.w	r3, r3, #2
 8006f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f80:	68fb      	ldr	r3, [r7, #12]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	b29b      	uxth	r3, r3
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4013      	ands	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007024:	68bb      	ldr	r3, [r7, #8]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007032:	b480      	push	{r7}
 8007034:	b087      	sub	sp, #28
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007054:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	fa22 f303 	lsr.w	r3, r2, r3
 8007062:	01db      	lsls	r3, r3, #7
 8007064:	b2db      	uxtb	r3, r3
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800706c:	78fb      	ldrb	r3, [r7, #3]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	4013      	ands	r3, r2
 800707e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007080:	68bb      	ldr	r3, [r7, #8]
}
 8007082:	4618      	mov	r0, r3
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	f003 0301 	and.w	r3, r3, #1
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070c4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80070c8:	f023 0307 	bic.w	r3, r3, #7
 80070cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	460b      	mov	r3, r1
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	333c      	adds	r3, #60	@ 0x3c
 8007106:	3304      	adds	r3, #4
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	4a26      	ldr	r2, [pc, #152]	@ (80071a8 <USB_EP0_OutStart+0xb8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d90a      	bls.n	800712a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007124:	d101      	bne.n	800712a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	e037      	b.n	800719a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	461a      	mov	r2, r3
 8007132:	2300      	movs	r3, #0
 8007134:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007144:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007148:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007158:	f043 0318 	orr.w	r3, r3, #24
 800715c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800716c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007170:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007172:	7afb      	ldrb	r3, [r7, #11]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d10f      	bne.n	8007198 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007192:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	4f54300a 	.word	0x4f54300a

080071ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	3301      	adds	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c4:	d901      	bls.n	80071ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e01b      	b.n	8007202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	daf2      	bge.n	80071b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f043 0201 	orr.w	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ee:	d901      	bls.n	80071f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e006      	b.n	8007202 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d0f0      	beq.n	80071e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800721c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007220:	f004 fd30 	bl	800bc84 <USBD_static_malloc>
 8007224:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d109      	bne.n	8007240 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	32b0      	adds	r2, #176	@ 0xb0
 8007236:	2100      	movs	r1, #0
 8007238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800723c:	2302      	movs	r3, #2
 800723e:	e0d4      	b.n	80073ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007240:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007244:	2100      	movs	r1, #0
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f005 fdf0 	bl	800ce2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	32b0      	adds	r2, #176	@ 0xb0
 8007256:	68f9      	ldr	r1, [r7, #12]
 8007258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32b0      	adds	r2, #176	@ 0xb0
 8007266:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7c1b      	ldrb	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d138      	bne.n	80072ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007278:	4b5e      	ldr	r3, [pc, #376]	@ (80073f4 <USBD_CDC_Init+0x1e4>)
 800727a:	7819      	ldrb	r1, [r3, #0]
 800727c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007280:	2202      	movs	r2, #2
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f004 fbdb 	bl	800ba3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007288:	4b5a      	ldr	r3, [pc, #360]	@ (80073f4 <USBD_CDC_Init+0x1e4>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	f003 020f 	and.w	r2, r3, #15
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	440b      	add	r3, r1
 800729c:	3324      	adds	r3, #36	@ 0x24
 800729e:	2201      	movs	r2, #1
 80072a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072a2:	4b55      	ldr	r3, [pc, #340]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 80072a4:	7819      	ldrb	r1, [r3, #0]
 80072a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072aa:	2202      	movs	r2, #2
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f004 fbc6 	bl	800ba3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072b2:	4b51      	ldr	r3, [pc, #324]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	f003 020f 	and.w	r2, r3, #15
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	440b      	add	r3, r1
 80072c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80072ca:	2201      	movs	r2, #1
 80072cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80072ce:	4b4b      	ldr	r3, [pc, #300]	@ (80073fc <USBD_CDC_Init+0x1ec>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	f003 020f 	and.w	r2, r3, #15
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3326      	adds	r3, #38	@ 0x26
 80072e4:	2210      	movs	r2, #16
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e035      	b.n	8007356 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072ea:	4b42      	ldr	r3, [pc, #264]	@ (80073f4 <USBD_CDC_Init+0x1e4>)
 80072ec:	7819      	ldrb	r1, [r3, #0]
 80072ee:	2340      	movs	r3, #64	@ 0x40
 80072f0:	2202      	movs	r2, #2
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f004 fba3 	bl	800ba3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072f8:	4b3e      	ldr	r3, [pc, #248]	@ (80073f4 <USBD_CDC_Init+0x1e4>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 020f 	and.w	r2, r3, #15
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	3324      	adds	r3, #36	@ 0x24
 800730e:	2201      	movs	r2, #1
 8007310:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007312:	4b39      	ldr	r3, [pc, #228]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 8007314:	7819      	ldrb	r1, [r3, #0]
 8007316:	2340      	movs	r3, #64	@ 0x40
 8007318:	2202      	movs	r2, #2
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f004 fb8f 	bl	800ba3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007320:	4b35      	ldr	r3, [pc, #212]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f003 020f 	and.w	r2, r3, #15
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	440b      	add	r3, r1
 8007334:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007338:	2201      	movs	r2, #1
 800733a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800733c:	4b2f      	ldr	r3, [pc, #188]	@ (80073fc <USBD_CDC_Init+0x1ec>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 020f 	and.w	r2, r3, #15
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3326      	adds	r3, #38	@ 0x26
 8007352:	2210      	movs	r2, #16
 8007354:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007356:	4b29      	ldr	r3, [pc, #164]	@ (80073fc <USBD_CDC_Init+0x1ec>)
 8007358:	7819      	ldrb	r1, [r3, #0]
 800735a:	2308      	movs	r3, #8
 800735c:	2203      	movs	r2, #3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f004 fb6d 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007364:	4b25      	ldr	r3, [pc, #148]	@ (80073fc <USBD_CDC_Init+0x1ec>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	f003 020f 	and.w	r2, r3, #15
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	440b      	add	r3, r1
 8007378:	3324      	adds	r3, #36	@ 0x24
 800737a:	2201      	movs	r2, #1
 800737c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	33b0      	adds	r3, #176	@ 0xb0
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80073b4:	2302      	movs	r3, #2
 80073b6:	e018      	b.n	80073ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	7c1b      	ldrb	r3, [r3, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073c0:	4b0d      	ldr	r3, [pc, #52]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 80073c2:	7819      	ldrb	r1, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f004 fc24 	bl	800bc1c <USBD_LL_PrepareReceive>
 80073d4:	e008      	b.n	80073e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80073d6:	4b08      	ldr	r3, [pc, #32]	@ (80073f8 <USBD_CDC_Init+0x1e8>)
 80073d8:	7819      	ldrb	r1, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80073e0:	2340      	movs	r3, #64	@ 0x40
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f004 fc1a 	bl	800bc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	2000009f 	.word	0x2000009f
 80073f8:	200000a0 	.word	0x200000a0
 80073fc:	200000a1 	.word	0x200000a1

08007400 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800740c:	4b3a      	ldr	r3, [pc, #232]	@ (80074f8 <USBD_CDC_DeInit+0xf8>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f004 fb39 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007418:	4b37      	ldr	r3, [pc, #220]	@ (80074f8 <USBD_CDC_DeInit+0xf8>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f003 020f 	and.w	r2, r3, #15
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	3324      	adds	r3, #36	@ 0x24
 800742e:	2200      	movs	r2, #0
 8007430:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007432:	4b32      	ldr	r3, [pc, #200]	@ (80074fc <USBD_CDC_DeInit+0xfc>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f004 fb26 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800743e:	4b2f      	ldr	r3, [pc, #188]	@ (80074fc <USBD_CDC_DeInit+0xfc>)
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 020f 	and.w	r2, r3, #15
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	440b      	add	r3, r1
 8007452:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007456:	2200      	movs	r2, #0
 8007458:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800745a:	4b29      	ldr	r3, [pc, #164]	@ (8007500 <USBD_CDC_DeInit+0x100>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	4619      	mov	r1, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f004 fb12 	bl	800ba8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007466:	4b26      	ldr	r3, [pc, #152]	@ (8007500 <USBD_CDC_DeInit+0x100>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 020f 	and.w	r2, r3, #15
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	3324      	adds	r3, #36	@ 0x24
 800747c:	2200      	movs	r2, #0
 800747e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007480:	4b1f      	ldr	r3, [pc, #124]	@ (8007500 <USBD_CDC_DeInit+0x100>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 020f 	and.w	r2, r3, #15
 8007488:	6879      	ldr	r1, [r7, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	440b      	add	r3, r1
 8007494:	3326      	adds	r3, #38	@ 0x26
 8007496:	2200      	movs	r2, #0
 8007498:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	32b0      	adds	r2, #176	@ 0xb0
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d01f      	beq.n	80074ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	33b0      	adds	r3, #176	@ 0xb0
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32b0      	adds	r2, #176	@ 0xb0
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f004 fbe6 	bl	800bca0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	32b0      	adds	r2, #176	@ 0xb0
 80074de:	2100      	movs	r1, #0
 80074e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	2000009f 	.word	0x2000009f
 80074fc:	200000a0 	.word	0x200000a0
 8007500:	200000a1 	.word	0x200000a1

08007504 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	32b0      	adds	r2, #176	@ 0xb0
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e0bf      	b.n	80076b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800753c:	2b00      	cmp	r3, #0
 800753e:	d050      	beq.n	80075e2 <USBD_CDC_Setup+0xde>
 8007540:	2b20      	cmp	r3, #32
 8007542:	f040 80af 	bne.w	80076a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	88db      	ldrh	r3, [r3, #6]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d03a      	beq.n	80075c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	b25b      	sxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	da1b      	bge.n	8007590 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	33b0      	adds	r3, #176	@ 0xb0
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800756e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	88d2      	ldrh	r2, [r2, #6]
 8007574:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	88db      	ldrh	r3, [r3, #6]
 800757a:	2b07      	cmp	r3, #7
 800757c:	bf28      	it	cs
 800757e:	2307      	movcs	r3, #7
 8007580:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	89fa      	ldrh	r2, [r7, #14]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fd93 	bl	80090b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800758e:	e090      	b.n	80076b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	785a      	ldrb	r2, [r3, #1]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88db      	ldrh	r3, [r3, #6]
 800759e:	2b3f      	cmp	r3, #63	@ 0x3f
 80075a0:	d803      	bhi.n	80075aa <USBD_CDC_Setup+0xa6>
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	e000      	b.n	80075ac <USBD_CDC_Setup+0xa8>
 80075aa:	2240      	movs	r2, #64	@ 0x40
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80075b2:	6939      	ldr	r1, [r7, #16]
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80075ba:	461a      	mov	r2, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 fda5 	bl	800910c <USBD_CtlPrepareRx>
      break;
 80075c2:	e076      	b.n	80076b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	33b0      	adds	r3, #176	@ 0xb0
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	7850      	ldrb	r0, [r2, #1]
 80075da:	2200      	movs	r2, #0
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	4798      	blx	r3
      break;
 80075e0:	e067      	b.n	80076b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b0b      	cmp	r3, #11
 80075e8:	d851      	bhi.n	800768e <USBD_CDC_Setup+0x18a>
 80075ea:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <USBD_CDC_Setup+0xec>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007621 	.word	0x08007621
 80075f4:	0800769d 	.word	0x0800769d
 80075f8:	0800768f 	.word	0x0800768f
 80075fc:	0800768f 	.word	0x0800768f
 8007600:	0800768f 	.word	0x0800768f
 8007604:	0800768f 	.word	0x0800768f
 8007608:	0800768f 	.word	0x0800768f
 800760c:	0800768f 	.word	0x0800768f
 8007610:	0800768f 	.word	0x0800768f
 8007614:	0800768f 	.word	0x0800768f
 8007618:	0800764b 	.word	0x0800764b
 800761c:	08007675 	.word	0x08007675
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d107      	bne.n	800763c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800762c:	f107 030a 	add.w	r3, r7, #10
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fd3d 	bl	80090b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800763a:	e032      	b.n	80076a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fcbb 	bl	8008fba <USBD_CtlError>
            ret = USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	75fb      	strb	r3, [r7, #23]
          break;
 8007648:	e02b      	b.n	80076a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b03      	cmp	r3, #3
 8007654:	d107      	bne.n	8007666 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007656:	f107 030d 	add.w	r3, r7, #13
 800765a:	2201      	movs	r2, #1
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fd28 	bl	80090b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007664:	e01d      	b.n	80076a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fca6 	bl	8008fba <USBD_CtlError>
            ret = USBD_FAIL;
 800766e:	2303      	movs	r3, #3
 8007670:	75fb      	strb	r3, [r7, #23]
          break;
 8007672:	e016      	b.n	80076a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b03      	cmp	r3, #3
 800767e:	d00f      	beq.n	80076a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f001 fc99 	bl	8008fba <USBD_CtlError>
            ret = USBD_FAIL;
 8007688:	2303      	movs	r3, #3
 800768a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800768c:	e008      	b.n	80076a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f001 fc92 	bl	8008fba <USBD_CtlError>
          ret = USBD_FAIL;
 8007696:	2303      	movs	r3, #3
 8007698:	75fb      	strb	r3, [r7, #23]
          break;
 800769a:	e002      	b.n	80076a2 <USBD_CDC_Setup+0x19e>
          break;
 800769c:	bf00      	nop
 800769e:	e008      	b.n	80076b2 <USBD_CDC_Setup+0x1ae>
          break;
 80076a0:	bf00      	nop
      }
      break;
 80076a2:	e006      	b.n	80076b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fc87 	bl	8008fba <USBD_CtlError>
      ret = USBD_FAIL;
 80076ac:	2303      	movs	r3, #3
 80076ae:	75fb      	strb	r3, [r7, #23]
      break;
 80076b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3718      	adds	r7, #24
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80076ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32b0      	adds	r2, #176	@ 0xb0
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80076e2:	2303      	movs	r3, #3
 80076e4:	e065      	b.n	80077b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32b0      	adds	r2, #176	@ 0xb0
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	f003 020f 	and.w	r2, r3, #15
 80076fc:	6879      	ldr	r1, [r7, #4]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	440b      	add	r3, r1
 8007708:	3318      	adds	r3, #24
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d02f      	beq.n	8007770 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007710:	78fb      	ldrb	r3, [r7, #3]
 8007712:	f003 020f 	and.w	r2, r3, #15
 8007716:	6879      	ldr	r1, [r7, #4]
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	440b      	add	r3, r1
 8007722:	3318      	adds	r3, #24
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	f003 010f 	and.w	r1, r3, #15
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	460b      	mov	r3, r1
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	440b      	add	r3, r1
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4403      	add	r3, r0
 8007738:	331c      	adds	r3, #28
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007746:	2b00      	cmp	r3, #0
 8007748:	d112      	bne.n	8007770 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 020f 	and.w	r2, r3, #15
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	440b      	add	r3, r1
 800775c:	3318      	adds	r3, #24
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007762:	78f9      	ldrb	r1, [r7, #3]
 8007764:	2300      	movs	r3, #0
 8007766:	2200      	movs	r2, #0
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f004 fa36 	bl	800bbda <USBD_LL_Transmit>
 800776e:	e01f      	b.n	80077b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	33b0      	adds	r3, #176	@ 0xb0
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d010      	beq.n	80077b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	33b0      	adds	r3, #176	@ 0xb0
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4413      	add	r3, r2
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	460b      	mov	r3, r1
 80077c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	32b0      	adds	r2, #176	@ 0xb0
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	32b0      	adds	r2, #176	@ 0xb0
 80077e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e01a      	b.n	8007822 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f004 fa34 	bl	800bc5e <USBD_LL_GetRxDataSize>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	33b0      	adds	r3, #176	@ 0xb0
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800781c:	4611      	mov	r1, r2
 800781e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	32b0      	adds	r2, #176	@ 0xb0
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	e024      	b.n	8007896 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	33b0      	adds	r3, #176	@ 0xb0
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d019      	beq.n	8007894 <USBD_CDC_EP0_RxReady+0x6a>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007866:	2bff      	cmp	r3, #255	@ 0xff
 8007868:	d014      	beq.n	8007894 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	33b0      	adds	r3, #176	@ 0xb0
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007882:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800788a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	22ff      	movs	r2, #255	@ 0xff
 8007890:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078a8:	2182      	movs	r1, #130	@ 0x82
 80078aa:	4818      	ldr	r0, [pc, #96]	@ (800790c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078ac:	f000 fd4f 	bl	800834e <USBD_GetEpDesc>
 80078b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078b2:	2101      	movs	r1, #1
 80078b4:	4815      	ldr	r0, [pc, #84]	@ (800790c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078b6:	f000 fd4a 	bl	800834e <USBD_GetEpDesc>
 80078ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078bc:	2181      	movs	r1, #129	@ 0x81
 80078be:	4813      	ldr	r0, [pc, #76]	@ (800790c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80078c0:	f000 fd45 	bl	800834e <USBD_GetEpDesc>
 80078c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2210      	movs	r2, #16
 80078d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d006      	beq.n	80078e6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	2200      	movs	r2, #0
 80078dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078e0:	711a      	strb	r2, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d006      	beq.n	80078fa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078f4:	711a      	strb	r2, [r3, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2243      	movs	r2, #67	@ 0x43
 80078fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007902:	4618      	mov	r0, r3
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	2000005c 	.word	0x2000005c

08007910 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007918:	2182      	movs	r1, #130	@ 0x82
 800791a:	4818      	ldr	r0, [pc, #96]	@ (800797c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800791c:	f000 fd17 	bl	800834e <USBD_GetEpDesc>
 8007920:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007922:	2101      	movs	r1, #1
 8007924:	4815      	ldr	r0, [pc, #84]	@ (800797c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007926:	f000 fd12 	bl	800834e <USBD_GetEpDesc>
 800792a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800792c:	2181      	movs	r1, #129	@ 0x81
 800792e:	4813      	ldr	r0, [pc, #76]	@ (800797c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007930:	f000 fd0d 	bl	800834e <USBD_GetEpDesc>
 8007934:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d002      	beq.n	8007942 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2210      	movs	r2, #16
 8007940:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d006      	beq.n	8007956 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	2200      	movs	r2, #0
 800794c:	711a      	strb	r2, [r3, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f042 0202 	orr.w	r2, r2, #2
 8007954:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	711a      	strb	r2, [r3, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f042 0202 	orr.w	r2, r2, #2
 8007968:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2243      	movs	r2, #67	@ 0x43
 800796e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007970:	4b02      	ldr	r3, [pc, #8]	@ (800797c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	2000005c 	.word	0x2000005c

08007980 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007988:	2182      	movs	r1, #130	@ 0x82
 800798a:	4818      	ldr	r0, [pc, #96]	@ (80079ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800798c:	f000 fcdf 	bl	800834e <USBD_GetEpDesc>
 8007990:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007992:	2101      	movs	r1, #1
 8007994:	4815      	ldr	r0, [pc, #84]	@ (80079ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007996:	f000 fcda 	bl	800834e <USBD_GetEpDesc>
 800799a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800799c:	2181      	movs	r1, #129	@ 0x81
 800799e:	4813      	ldr	r0, [pc, #76]	@ (80079ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80079a0:	f000 fcd5 	bl	800834e <USBD_GetEpDesc>
 80079a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	2210      	movs	r2, #16
 80079b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d006      	beq.n	80079c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079c0:	711a      	strb	r2, [r3, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d006      	beq.n	80079da <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079d4:	711a      	strb	r2, [r3, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2243      	movs	r2, #67	@ 0x43
 80079de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079e0:	4b02      	ldr	r3, [pc, #8]	@ (80079ec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	2000005c 	.word	0x2000005c

080079f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	220a      	movs	r2, #10
 80079fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079fe:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000018 	.word	0x20000018

08007a10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d101      	bne.n	8007a24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e009      	b.n	8007a38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	33b0      	adds	r3, #176	@ 0xb0
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	32b0      	adds	r2, #176	@ 0xb0
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d101      	bne.n	8007a6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e008      	b.n	8007a7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	32b0      	adds	r2, #176	@ 0xb0
 8007a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e004      	b.n	8007ab6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
	...

08007ac4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32b0      	adds	r2, #176	@ 0xb0
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e025      	b.n	8007b36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d11f      	bne.n	8007b34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007afc:	4b10      	ldr	r3, [pc, #64]	@ (8007b40 <USBD_CDC_TransmitPacket+0x7c>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	f003 020f 	and.w	r2, r3, #15
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4403      	add	r3, r0
 8007b16:	3318      	adds	r3, #24
 8007b18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007b1a:	4b09      	ldr	r3, [pc, #36]	@ (8007b40 <USBD_CDC_TransmitPacket+0x7c>)
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f004 f855 	bl	800bbda <USBD_LL_Transmit>

    ret = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000009f 	.word	0x2000009f

08007b44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	32b0      	adds	r2, #176	@ 0xb0
 8007b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	32b0      	adds	r2, #176	@ 0xb0
 8007b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e018      	b.n	8007ba4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7c1b      	ldrb	r3, [r3, #16]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007bac <USBD_CDC_ReceivePacket+0x68>)
 8007b7c:	7819      	ldrb	r1, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f004 f847 	bl	800bc1c <USBD_LL_PrepareReceive>
 8007b8e:	e008      	b.n	8007ba2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b90:	4b06      	ldr	r3, [pc, #24]	@ (8007bac <USBD_CDC_ReceivePacket+0x68>)
 8007b92:	7819      	ldrb	r1, [r3, #0]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b9a:	2340      	movs	r3, #64	@ 0x40
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f004 f83d 	bl	800bc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	200000a0 	.word	0x200000a0

08007bb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d101      	bne.n	8007bc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e01f      	b.n	8007c08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	79fa      	ldrb	r2, [r7, #7]
 8007bfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f003 feb7 	bl	800b970 <USBD_LL_Init>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e025      	b.n	8007c74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32ae      	adds	r2, #174	@ 0xae
 8007c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00f      	beq.n	8007c64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32ae      	adds	r2, #174	@ 0xae
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	f107 020e 	add.w	r2, r7, #14
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f003 febf 	bl	800ba08 <USBD_LL_Start>
 8007c8a:	4603      	mov	r3, r0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	460b      	mov	r3, r1
 8007cec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	78fa      	ldrb	r2, [r7, #3]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 f90c 	bl	8008f46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d4a:	f003 031f 	and.w	r3, r3, #31
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d01a      	beq.n	8007d88 <USBD_LL_SetupStage+0x72>
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d822      	bhi.n	8007d9c <USBD_LL_SetupStage+0x86>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <USBD_LL_SetupStage+0x4a>
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d00a      	beq.n	8007d74 <USBD_LL_SetupStage+0x5e>
 8007d5e:	e01d      	b.n	8007d9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fb63 	bl	8008434 <USBD_StdDevReq>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
      break;
 8007d72:	e020      	b.n	8007db6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fbcb 	bl	8008518 <USBD_StdItfReq>
 8007d82:	4603      	mov	r3, r0
 8007d84:	73fb      	strb	r3, [r7, #15]
      break;
 8007d86:	e016      	b.n	8007db6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc2d 	bl	80085f0 <USBD_StdEPReq>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]
      break;
 8007d9a:	e00c      	b.n	8007db6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007da2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f003 fe8c 	bl	800bac8 <USBD_LL_StallEP>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
      break;
 8007db4:	bf00      	nop
  }

  return ret;
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d16e      	bne.n	8007eb6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007dde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	f040 8098 	bne.w	8007f1c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d913      	bls.n	8007e20 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	1ad2      	subs	r2, r2, r3
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	bf28      	it	cs
 8007e12:	4613      	movcs	r3, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f001 f994 	bl	8009146 <USBD_CtlContinueRx>
 8007e1e:	e07d      	b.n	8007f1c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e26:	f003 031f 	and.w	r3, r3, #31
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d014      	beq.n	8007e58 <USBD_LL_DataOutStage+0x98>
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d81d      	bhi.n	8007e6e <USBD_LL_DataOutStage+0xae>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <USBD_LL_DataOutStage+0x7c>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d003      	beq.n	8007e42 <USBD_LL_DataOutStage+0x82>
 8007e3a:	e018      	b.n	8007e6e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007e40:	e018      	b.n	8007e74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fa64 	bl	800831a <USBD_CoreFindIF>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75bb      	strb	r3, [r7, #22]
            break;
 8007e56:	e00d      	b.n	8007e74 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f000 fa66 	bl	8008334 <USBD_CoreFindEP>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75bb      	strb	r3, [r7, #22]
            break;
 8007e6c:	e002      	b.n	8007e74 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	75bb      	strb	r3, [r7, #22]
            break;
 8007e72:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e74:	7dbb      	ldrb	r3, [r7, #22]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d119      	bne.n	8007eae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d113      	bne.n	8007eae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e86:	7dba      	ldrb	r2, [r7, #22]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	32ae      	adds	r2, #174	@ 0xae
 8007e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e96:	7dba      	ldrb	r2, [r7, #22]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e9e:	7dba      	ldrb	r2, [r7, #22]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	32ae      	adds	r2, #174	@ 0xae
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f001 f95a 	bl	8009168 <USBD_CtlSendStatus>
 8007eb4:	e032      	b.n	8007f1c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fa37 	bl	8008334 <USBD_CoreFindEP>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
 8007ecc:	2bff      	cmp	r3, #255	@ 0xff
 8007ece:	d025      	beq.n	8007f1c <USBD_LL_DataOutStage+0x15c>
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d122      	bne.n	8007f1c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d117      	bne.n	8007f12 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ee2:	7dba      	ldrb	r2, [r7, #22]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	32ae      	adds	r2, #174	@ 0xae
 8007ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00f      	beq.n	8007f12 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ef2:	7dba      	ldrb	r2, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007efa:	7dba      	ldrb	r2, [r7, #22]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	32ae      	adds	r2, #174	@ 0xae
 8007f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	7afa      	ldrb	r2, [r7, #11]
 8007f08:	4611      	mov	r1, r2
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	4798      	blx	r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	e000      	b.n	8007f1e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d16f      	bne.n	800801a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d15a      	bne.n	8008000 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d914      	bls.n	8007f80 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	1ad2      	subs	r2, r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f001 f8bc 	bl	80090ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f72:	2300      	movs	r3, #0
 8007f74:	2200      	movs	r2, #0
 8007f76:	2100      	movs	r1, #0
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f003 fe4f 	bl	800bc1c <USBD_LL_PrepareReceive>
 8007f7e:	e03f      	b.n	8008000 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d11c      	bne.n	8007fc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d316      	bcc.n	8007fc6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d20f      	bcs.n	8007fc6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	2100      	movs	r1, #0
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f001 f89d 	bl	80090ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb8:	2300      	movs	r3, #0
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	68f8      	ldr	r0, [r7, #12]
 8007fc0:	f003 fe2c 	bl	800bc1c <USBD_LL_PrepareReceive>
 8007fc4:	e01c      	b.n	8008000 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d10f      	bne.n	8007ff2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ff2:	2180      	movs	r1, #128	@ 0x80
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f003 fd67 	bl	800bac8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f001 f8c7 	bl	800918e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d03a      	beq.n	8008080 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f7ff fe42 	bl	8007c94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008018:	e032      	b.n	8008080 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800801a:	7afb      	ldrb	r3, [r7, #11]
 800801c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008020:	b2db      	uxtb	r3, r3
 8008022:	4619      	mov	r1, r3
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f985 	bl	8008334 <USBD_CoreFindEP>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800802e:	7dfb      	ldrb	r3, [r7, #23]
 8008030:	2bff      	cmp	r3, #255	@ 0xff
 8008032:	d025      	beq.n	8008080 <USBD_LL_DataInStage+0x15a>
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d122      	bne.n	8008080 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b03      	cmp	r3, #3
 8008044:	d11c      	bne.n	8008080 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008046:	7dfa      	ldrb	r2, [r7, #23]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	32ae      	adds	r2, #174	@ 0xae
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d014      	beq.n	8008080 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008056:	7dfa      	ldrb	r2, [r7, #23]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800805e:	7dfa      	ldrb	r2, [r7, #23]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	32ae      	adds	r2, #174	@ 0xae
 8008064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	7afa      	ldrb	r2, [r7, #11]
 800806c:	4611      	mov	r1, r2
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3
 8008072:	4603      	mov	r3, r0
 8008074:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008076:	7dbb      	ldrb	r3, [r7, #22]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800807c:	7dbb      	ldrb	r3, [r7, #22]
 800807e:	e000      	b.n	8008082 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b084      	sub	sp, #16
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d014      	beq.n	80080f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00e      	beq.n	80080f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6852      	ldr	r2, [r2, #4]
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	4611      	mov	r1, r2
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080ec:	2303      	movs	r3, #3
 80080ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080f0:	2340      	movs	r3, #64	@ 0x40
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f003 fca1 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2240      	movs	r2, #64	@ 0x40
 8008108:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810c:	2340      	movs	r3, #64	@ 0x40
 800810e:	2200      	movs	r2, #0
 8008110:	2180      	movs	r1, #128	@ 0x80
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f003 fc93 	bl	800ba3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2240      	movs	r2, #64	@ 0x40
 8008122:	621a      	str	r2, [r3, #32]

  return ret;
 8008124:	7bfb      	ldrb	r3, [r7, #15]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	460b      	mov	r3, r1
 8008138:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b04      	cmp	r3, #4
 8008160:	d006      	beq.n	8008170 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008168:	b2da      	uxtb	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2204      	movs	r2, #4
 8008174:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b04      	cmp	r3, #4
 8008198:	d106      	bne.n	80081a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d110      	bne.n	80081ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00b      	beq.n	80081ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	32ae      	adds	r2, #174	@ 0xae
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008214:	2303      	movs	r3, #3
 8008216:	e01c      	b.n	8008252 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b03      	cmp	r3, #3
 8008222:	d115      	bne.n	8008250 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	32ae      	adds	r2, #174	@ 0xae
 800822e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32ae      	adds	r2, #174	@ 0xae
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	6a1b      	ldr	r3, [r3, #32]
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	4611      	mov	r1, r2
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	32ae      	adds	r2, #174	@ 0xae
 8008270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008278:	2303      	movs	r3, #3
 800827a:	e01c      	b.n	80082b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b03      	cmp	r3, #3
 8008286:	d115      	bne.n	80082b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	@ 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00b      	beq.n	80082b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	32ae      	adds	r2, #174	@ 0xae
 80082a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	4611      	mov	r1, r2
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00e      	beq.n	8008310 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6852      	ldr	r2, [r2, #4]
 80082fe:	b2d2      	uxtb	r2, r2
 8008300:	4611      	mov	r1, r2
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	460b      	mov	r3, r1
 8008324:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008326:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008340:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	885b      	ldrh	r3, [r3, #2]
 800836a:	b29b      	uxth	r3, r3
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	7812      	ldrb	r2, [r2, #0]
 8008370:	4293      	cmp	r3, r2
 8008372:	d91f      	bls.n	80083b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800837a:	e013      	b.n	80083a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800837c:	f107 030a 	add.w	r3, r7, #10
 8008380:	4619      	mov	r1, r3
 8008382:	6978      	ldr	r0, [r7, #20]
 8008384:	f000 f81b 	bl	80083be <USBD_GetNextDesc>
 8008388:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	785b      	ldrb	r3, [r3, #1]
 800838e:	2b05      	cmp	r3, #5
 8008390:	d108      	bne.n	80083a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	789b      	ldrb	r3, [r3, #2]
 800839a:	78fa      	ldrb	r2, [r7, #3]
 800839c:	429a      	cmp	r2, r3
 800839e:	d008      	beq.n	80083b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	885b      	ldrh	r3, [r3, #2]
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	897b      	ldrh	r3, [r7, #10]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d8e5      	bhi.n	800837c <USBD_GetEpDesc+0x2e>
 80083b0:	e000      	b.n	80083b4 <USBD_GetEpDesc+0x66>
          break;
 80083b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083b4:	693b      	ldr	r3, [r7, #16]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	7812      	ldrb	r2, [r2, #0]
 80083d4:	4413      	add	r3, r2
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083e8:	68fb      	ldr	r3, [r7, #12]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b087      	sub	sp, #28
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	3301      	adds	r3, #1
 800840c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008414:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	b21a      	sxth	r2, r3
 800841c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008420:	4313      	orrs	r3, r2
 8008422:	b21b      	sxth	r3, r3
 8008424:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008426:	89fb      	ldrh	r3, [r7, #14]
}
 8008428:	4618      	mov	r0, r3
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d005      	beq.n	800845a <USBD_StdDevReq+0x26>
 800844e:	2b40      	cmp	r3, #64	@ 0x40
 8008450:	d857      	bhi.n	8008502 <USBD_StdDevReq+0xce>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <USBD_StdDevReq+0x42>
 8008456:	2b20      	cmp	r3, #32
 8008458:	d153      	bne.n	8008502 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	32ae      	adds	r2, #174	@ 0xae
 8008464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
      break;
 8008474:	e04a      	b.n	800850c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b09      	cmp	r3, #9
 800847c:	d83b      	bhi.n	80084f6 <USBD_StdDevReq+0xc2>
 800847e:	a201      	add	r2, pc, #4	@ (adr r2, 8008484 <USBD_StdDevReq+0x50>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	080084d9 	.word	0x080084d9
 8008488:	080084ed 	.word	0x080084ed
 800848c:	080084f7 	.word	0x080084f7
 8008490:	080084e3 	.word	0x080084e3
 8008494:	080084f7 	.word	0x080084f7
 8008498:	080084b7 	.word	0x080084b7
 800849c:	080084ad 	.word	0x080084ad
 80084a0:	080084f7 	.word	0x080084f7
 80084a4:	080084cf 	.word	0x080084cf
 80084a8:	080084c1 	.word	0x080084c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa3c 	bl	800892c <USBD_GetDescriptor>
          break;
 80084b4:	e024      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084b6:	6839      	ldr	r1, [r7, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fba1 	bl	8008c00 <USBD_SetAddress>
          break;
 80084be:	e01f      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fbe0 	bl	8008c88 <USBD_SetConfig>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
          break;
 80084cc:	e018      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fc83 	bl	8008ddc <USBD_GetConfig>
          break;
 80084d6:	e013      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084d8:	6839      	ldr	r1, [r7, #0]
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fcb4 	bl	8008e48 <USBD_GetStatus>
          break;
 80084e0:	e00e      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fce3 	bl	8008eb0 <USBD_SetFeature>
          break;
 80084ea:	e009      	b.n	8008500 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fd07 	bl	8008f02 <USBD_ClrFeature>
          break;
 80084f4:	e004      	b.n	8008500 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fd5e 	bl	8008fba <USBD_CtlError>
          break;
 80084fe:	bf00      	nop
      }
      break;
 8008500:	e004      	b.n	800850c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fd58 	bl	8008fba <USBD_CtlError>
      break;
 800850a:	bf00      	nop
  }

  return ret;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800852e:	2b40      	cmp	r3, #64	@ 0x40
 8008530:	d005      	beq.n	800853e <USBD_StdItfReq+0x26>
 8008532:	2b40      	cmp	r3, #64	@ 0x40
 8008534:	d852      	bhi.n	80085dc <USBD_StdItfReq+0xc4>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <USBD_StdItfReq+0x26>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d14e      	bne.n	80085dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008544:	b2db      	uxtb	r3, r3
 8008546:	3b01      	subs	r3, #1
 8008548:	2b02      	cmp	r3, #2
 800854a:	d840      	bhi.n	80085ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	889b      	ldrh	r3, [r3, #4]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	d836      	bhi.n	80085c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	889b      	ldrh	r3, [r3, #4]
 800855a:	b2db      	uxtb	r3, r3
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7ff fedb 	bl	800831a <USBD_CoreFindIF>
 8008564:	4603      	mov	r3, r0
 8008566:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2bff      	cmp	r3, #255	@ 0xff
 800856c:	d01d      	beq.n	80085aa <USBD_StdItfReq+0x92>
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d11a      	bne.n	80085aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008574:	7bba      	ldrb	r2, [r7, #14]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	32ae      	adds	r2, #174	@ 0xae
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00f      	beq.n	80085a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008584:	7bba      	ldrb	r2, [r7, #14]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800858c:	7bba      	ldrb	r2, [r7, #14]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	32ae      	adds	r2, #174	@ 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085a2:	e004      	b.n	80085ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80085a4:	2303      	movs	r3, #3
 80085a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085a8:	e001      	b.n	80085ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085aa:	2303      	movs	r3, #3
 80085ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	88db      	ldrh	r3, [r3, #6]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d110      	bne.n	80085d8 <USBD_StdItfReq+0xc0>
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d10d      	bne.n	80085d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fdd3 	bl	8009168 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085c2:	e009      	b.n	80085d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fcf7 	bl	8008fba <USBD_CtlError>
          break;
 80085cc:	e004      	b.n	80085d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fcf2 	bl	8008fba <USBD_CtlError>
          break;
 80085d6:	e000      	b.n	80085da <USBD_StdItfReq+0xc2>
          break;
 80085d8:	bf00      	nop
      }
      break;
 80085da:	e004      	b.n	80085e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fceb 	bl	8008fba <USBD_CtlError>
      break;
 80085e4:	bf00      	nop
  }

  return ret;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	889b      	ldrh	r3, [r3, #4]
 8008602:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	d007      	beq.n	8008620 <USBD_StdEPReq+0x30>
 8008610:	2b40      	cmp	r3, #64	@ 0x40
 8008612:	f200 817f 	bhi.w	8008914 <USBD_StdEPReq+0x324>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d02a      	beq.n	8008670 <USBD_StdEPReq+0x80>
 800861a:	2b20      	cmp	r3, #32
 800861c:	f040 817a 	bne.w	8008914 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff fe85 	bl	8008334 <USBD_CoreFindEP>
 800862a:	4603      	mov	r3, r0
 800862c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800862e:	7b7b      	ldrb	r3, [r7, #13]
 8008630:	2bff      	cmp	r3, #255	@ 0xff
 8008632:	f000 8174 	beq.w	800891e <USBD_StdEPReq+0x32e>
 8008636:	7b7b      	ldrb	r3, [r7, #13]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 8170 	bne.w	800891e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800863e:	7b7a      	ldrb	r2, [r7, #13]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008646:	7b7a      	ldrb	r2, [r7, #13]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	32ae      	adds	r2, #174	@ 0xae
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8163 	beq.w	800891e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008658:	7b7a      	ldrb	r2, [r7, #13]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	32ae      	adds	r2, #174	@ 0xae
 800865e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800866e:	e156      	b.n	800891e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b03      	cmp	r3, #3
 8008676:	d008      	beq.n	800868a <USBD_StdEPReq+0x9a>
 8008678:	2b03      	cmp	r3, #3
 800867a:	f300 8145 	bgt.w	8008908 <USBD_StdEPReq+0x318>
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 809b 	beq.w	80087ba <USBD_StdEPReq+0x1ca>
 8008684:	2b01      	cmp	r3, #1
 8008686:	d03c      	beq.n	8008702 <USBD_StdEPReq+0x112>
 8008688:	e13e      	b.n	8008908 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d002      	beq.n	800869c <USBD_StdEPReq+0xac>
 8008696:	2b03      	cmp	r3, #3
 8008698:	d016      	beq.n	80086c8 <USBD_StdEPReq+0xd8>
 800869a:	e02c      	b.n	80086f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800869c:	7bbb      	ldrb	r3, [r7, #14]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00d      	beq.n	80086be <USBD_StdEPReq+0xce>
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b80      	cmp	r3, #128	@ 0x80
 80086a6:	d00a      	beq.n	80086be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f003 fa0b 	bl	800bac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086b2:	2180      	movs	r1, #128	@ 0x80
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f003 fa07 	bl	800bac8 <USBD_LL_StallEP>
 80086ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086bc:	e020      	b.n	8008700 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fc7a 	bl	8008fba <USBD_CtlError>
              break;
 80086c6:	e01b      	b.n	8008700 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	885b      	ldrh	r3, [r3, #2]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10e      	bne.n	80086ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00b      	beq.n	80086ee <USBD_StdEPReq+0xfe>
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b80      	cmp	r3, #128	@ 0x80
 80086da:	d008      	beq.n	80086ee <USBD_StdEPReq+0xfe>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	88db      	ldrh	r3, [r3, #6]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d104      	bne.n	80086ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	4619      	mov	r1, r3
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f003 f9ed 	bl	800bac8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fd3a 	bl	8009168 <USBD_CtlSendStatus>

              break;
 80086f4:	e004      	b.n	8008700 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086f6:	6839      	ldr	r1, [r7, #0]
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fc5e 	bl	8008fba <USBD_CtlError>
              break;
 80086fe:	bf00      	nop
          }
          break;
 8008700:	e107      	b.n	8008912 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d002      	beq.n	8008714 <USBD_StdEPReq+0x124>
 800870e:	2b03      	cmp	r3, #3
 8008710:	d016      	beq.n	8008740 <USBD_StdEPReq+0x150>
 8008712:	e04b      	b.n	80087ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <USBD_StdEPReq+0x146>
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	2b80      	cmp	r3, #128	@ 0x80
 800871e:	d00a      	beq.n	8008736 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008720:	7bbb      	ldrb	r3, [r7, #14]
 8008722:	4619      	mov	r1, r3
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f003 f9cf 	bl	800bac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800872a:	2180      	movs	r1, #128	@ 0x80
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f003 f9cb 	bl	800bac8 <USBD_LL_StallEP>
 8008732:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008734:	e040      	b.n	80087b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fc3e 	bl	8008fba <USBD_CtlError>
              break;
 800873e:	e03b      	b.n	80087b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	885b      	ldrh	r3, [r3, #2]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d136      	bne.n	80087b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	4619      	mov	r1, r3
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f003 f9d5 	bl	800bb06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fd03 	bl	8009168 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fde4 	bl	8008334 <USBD_CoreFindEP>
 800876c:	4603      	mov	r3, r0
 800876e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008770:	7b7b      	ldrb	r3, [r7, #13]
 8008772:	2bff      	cmp	r3, #255	@ 0xff
 8008774:	d01f      	beq.n	80087b6 <USBD_StdEPReq+0x1c6>
 8008776:	7b7b      	ldrb	r3, [r7, #13]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d11c      	bne.n	80087b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800877c:	7b7a      	ldrb	r2, [r7, #13]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008784:	7b7a      	ldrb	r2, [r7, #13]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32ae      	adds	r2, #174	@ 0xae
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d010      	beq.n	80087b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008794:	7b7a      	ldrb	r2, [r7, #13]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	32ae      	adds	r2, #174	@ 0xae
 800879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	6839      	ldr	r1, [r7, #0]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087aa:	e004      	b.n	80087b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fc03 	bl	8008fba <USBD_CtlError>
              break;
 80087b4:	e000      	b.n	80087b8 <USBD_StdEPReq+0x1c8>
              break;
 80087b6:	bf00      	nop
          }
          break;
 80087b8:	e0ab      	b.n	8008912 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d002      	beq.n	80087cc <USBD_StdEPReq+0x1dc>
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d032      	beq.n	8008830 <USBD_StdEPReq+0x240>
 80087ca:	e097      	b.n	80088fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d007      	beq.n	80087e2 <USBD_StdEPReq+0x1f2>
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	2b80      	cmp	r3, #128	@ 0x80
 80087d6:	d004      	beq.n	80087e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fbed 	bl	8008fba <USBD_CtlError>
                break;
 80087e0:	e091      	b.n	8008906 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da0b      	bge.n	8008802 <USBD_StdEPReq+0x212>
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	3310      	adds	r3, #16
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	3304      	adds	r3, #4
 8008800:	e00b      	b.n	800881a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	4413      	add	r3, r2
 8008818:	3304      	adds	r3, #4
 800881a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	2202      	movs	r2, #2
 8008826:	4619      	mov	r1, r3
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fc43 	bl	80090b4 <USBD_CtlSendData>
              break;
 800882e:	e06a      	b.n	8008906 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008834:	2b00      	cmp	r3, #0
 8008836:	da11      	bge.n	800885c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	f003 020f 	and.w	r2, r3, #15
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	3324      	adds	r3, #36	@ 0x24
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d117      	bne.n	8008882 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fbb0 	bl	8008fba <USBD_CtlError>
                  break;
 800885a:	e054      	b.n	8008906 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	f003 020f 	and.w	r2, r3, #15
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d104      	bne.n	8008882 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fb9d 	bl	8008fba <USBD_CtlError>
                  break;
 8008880:	e041      	b.n	8008906 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008882:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008886:	2b00      	cmp	r3, #0
 8008888:	da0b      	bge.n	80088a2 <USBD_StdEPReq+0x2b2>
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	3310      	adds	r3, #16
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	4413      	add	r3, r2
 800889e:	3304      	adds	r3, #4
 80088a0:	e00b      	b.n	80088ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	3304      	adds	r3, #4
 80088ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d002      	beq.n	80088c8 <USBD_StdEPReq+0x2d8>
 80088c2:	7bbb      	ldrb	r3, [r7, #14]
 80088c4:	2b80      	cmp	r3, #128	@ 0x80
 80088c6:	d103      	bne.n	80088d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]
 80088ce:	e00e      	b.n	80088ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	4619      	mov	r1, r3
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f003 f935 	bl	800bb44 <USBD_LL_IsStallEP>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d003      	beq.n	80088e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2201      	movs	r2, #1
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	e002      	b.n	80088ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2202      	movs	r2, #2
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fbdd 	bl	80090b4 <USBD_CtlSendData>
              break;
 80088fa:	e004      	b.n	8008906 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088fc:	6839      	ldr	r1, [r7, #0]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fb5b 	bl	8008fba <USBD_CtlError>
              break;
 8008904:	bf00      	nop
          }
          break;
 8008906:	e004      	b.n	8008912 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008908:	6839      	ldr	r1, [r7, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fb55 	bl	8008fba <USBD_CtlError>
          break;
 8008910:	bf00      	nop
      }
      break;
 8008912:	e005      	b.n	8008920 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fb4f 	bl	8008fba <USBD_CtlError>
      break;
 800891c:	e000      	b.n	8008920 <USBD_StdEPReq+0x330>
      break;
 800891e:	bf00      	nop
  }

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	885b      	ldrh	r3, [r3, #2]
 8008946:	0a1b      	lsrs	r3, r3, #8
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	2b06      	cmp	r3, #6
 800894e:	f200 8128 	bhi.w	8008ba2 <USBD_GetDescriptor+0x276>
 8008952:	a201      	add	r2, pc, #4	@ (adr r2, 8008958 <USBD_GetDescriptor+0x2c>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	08008975 	.word	0x08008975
 800895c:	0800898d 	.word	0x0800898d
 8008960:	080089cd 	.word	0x080089cd
 8008964:	08008ba3 	.word	0x08008ba3
 8008968:	08008ba3 	.word	0x08008ba3
 800896c:	08008b43 	.word	0x08008b43
 8008970:	08008b6f 	.word	0x08008b6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	7c12      	ldrb	r2, [r2, #16]
 8008980:	f107 0108 	add.w	r1, r7, #8
 8008984:	4610      	mov	r0, r2
 8008986:	4798      	blx	r3
 8008988:	60f8      	str	r0, [r7, #12]
      break;
 800898a:	e112      	b.n	8008bb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	7c1b      	ldrb	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10d      	bne.n	80089b0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800899c:	f107 0208 	add.w	r2, r7, #8
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	2202      	movs	r2, #2
 80089ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089ae:	e100      	b.n	8008bb2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b8:	f107 0208 	add.w	r2, r7, #8
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
 80089c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3301      	adds	r3, #1
 80089c6:	2202      	movs	r2, #2
 80089c8:	701a      	strb	r2, [r3, #0]
      break;
 80089ca:	e0f2      	b.n	8008bb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	885b      	ldrh	r3, [r3, #2]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	f200 80ac 	bhi.w	8008b30 <USBD_GetDescriptor+0x204>
 80089d8:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <USBD_GetDescriptor+0xb4>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f9 	.word	0x080089f9
 80089e4:	08008a2d 	.word	0x08008a2d
 80089e8:	08008a61 	.word	0x08008a61
 80089ec:	08008a95 	.word	0x08008a95
 80089f0:	08008ac9 	.word	0x08008ac9
 80089f4:	08008afd 	.word	0x08008afd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e091      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 facb 	bl	8008fba <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e089      	b.n	8008b40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7c12      	ldrb	r2, [r2, #16]
 8008a44:	f107 0108 	add.w	r1, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4e:	e077      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fab1 	bl	8008fba <USBD_CtlError>
            err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5e:	e06f      	b.n	8008b40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00b      	beq.n	8008a84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	7c12      	ldrb	r2, [r2, #16]
 8008a78:	f107 0108 	add.w	r1, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a82:	e05d      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa97 	bl	8008fba <USBD_CtlError>
            err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
          break;
 8008a92:	e055      	b.n	8008b40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00b      	beq.n	8008ab8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	7c12      	ldrb	r2, [r2, #16]
 8008aac:	f107 0108 	add.w	r1, r7, #8
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
 8008ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ab6:	e043      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fa7d 	bl	8008fba <USBD_CtlError>
            err++;
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ac6:	e03b      	b.n	8008b40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	7c12      	ldrb	r2, [r2, #16]
 8008ae0:	f107 0108 	add.w	r1, r7, #8
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4798      	blx	r3
 8008ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aea:	e029      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fa63 	bl	8008fba <USBD_CtlError>
            err++;
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	3301      	adds	r3, #1
 8008af8:	72fb      	strb	r3, [r7, #11]
          break;
 8008afa:	e021      	b.n	8008b40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	7c12      	ldrb	r2, [r2, #16]
 8008b14:	f107 0108 	add.w	r1, r7, #8
 8008b18:	4610      	mov	r0, r2
 8008b1a:	4798      	blx	r3
 8008b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b1e:	e00f      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fa49 	bl	8008fba <USBD_CtlError>
            err++;
 8008b28:	7afb      	ldrb	r3, [r7, #11]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b2e:	e007      	b.n	8008b40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa41 	bl	8008fba <USBD_CtlError>
          err++;
 8008b38:	7afb      	ldrb	r3, [r7, #11]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b3e:	bf00      	nop
      }
      break;
 8008b40:	e037      	b.n	8008bb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	7c1b      	ldrb	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b52:	f107 0208 	add.w	r2, r7, #8
 8008b56:	4610      	mov	r0, r2
 8008b58:	4798      	blx	r3
 8008b5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b5c:	e029      	b.n	8008bb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fa2a 	bl	8008fba <USBD_CtlError>
        err++;
 8008b66:	7afb      	ldrb	r3, [r7, #11]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8008b6c:	e021      	b.n	8008bb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7c1b      	ldrb	r3, [r3, #16]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10d      	bne.n	8008b92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7e:	f107 0208 	add.w	r2, r7, #8
 8008b82:	4610      	mov	r0, r2
 8008b84:	4798      	blx	r3
 8008b86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b90:	e00f      	b.n	8008bb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fa10 	bl	8008fba <USBD_CtlError>
        err++;
 8008b9a:	7afb      	ldrb	r3, [r7, #11]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba0:	e007      	b.n	8008bb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fa08 	bl	8008fba <USBD_CtlError>
      err++;
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	3301      	adds	r3, #1
 8008bae:	72fb      	strb	r3, [r7, #11]
      break;
 8008bb0:	bf00      	nop
  }

  if (err != 0U)
 8008bb2:	7afb      	ldrb	r3, [r7, #11]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d11e      	bne.n	8008bf6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	88db      	ldrh	r3, [r3, #6]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d016      	beq.n	8008bee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bc0:	893b      	ldrh	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00e      	beq.n	8008be4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	88da      	ldrh	r2, [r3, #6]
 8008bca:	893b      	ldrh	r3, [r7, #8]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bf28      	it	cs
 8008bd0:	4613      	movcs	r3, r2
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bd6:	893b      	ldrh	r3, [r7, #8]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68f9      	ldr	r1, [r7, #12]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fa69 	bl	80090b4 <USBD_CtlSendData>
 8008be2:	e009      	b.n	8008bf8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008be4:	6839      	ldr	r1, [r7, #0]
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9e7 	bl	8008fba <USBD_CtlError>
 8008bec:	e004      	b.n	8008bf8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 faba 	bl	8009168 <USBD_CtlSendStatus>
 8008bf4:	e000      	b.n	8008bf8 <USBD_GetDescriptor+0x2cc>
    return;
 8008bf6:	bf00      	nop
  }
}
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop

08008c00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	889b      	ldrh	r3, [r3, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d131      	bne.n	8008c76 <USBD_SetAddress+0x76>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	88db      	ldrh	r3, [r3, #6]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d12d      	bne.n	8008c76 <USBD_SetAddress+0x76>
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c20:	d829      	bhi.n	8008c76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	885b      	ldrh	r3, [r3, #2]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d104      	bne.n	8008c44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f9bc 	bl	8008fba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c42:	e01d      	b.n	8008c80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7bfa      	ldrb	r2, [r7, #15]
 8008c48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f002 ffa3 	bl	800bb9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa86 	bl	8009168 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6a:	e009      	b.n	8008c80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c74:	e004      	b.n	8008c80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f99e 	bl	8008fba <USBD_CtlError>
  }
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c92:	2300      	movs	r3, #0
 8008c94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	885b      	ldrh	r3, [r3, #2]
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008c9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d905      	bls.n	8008cb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f985 	bl	8008fba <USBD_CtlError>
    return USBD_FAIL;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e08c      	b.n	8008dce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d002      	beq.n	8008cc6 <USBD_SetConfig+0x3e>
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d029      	beq.n	8008d18 <USBD_SetConfig+0x90>
 8008cc4:	e075      	b.n	8008db2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cc6:	4b44      	ldr	r3, [pc, #272]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d020      	beq.n	8008d10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cce:	4b42      	ldr	r3, [pc, #264]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fe ffe3 	bl	8007caa <USBD_SetClassConfig>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ce8:	7bfb      	ldrb	r3, [r7, #15]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d008      	beq.n	8008d00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f962 	bl	8008fba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cfe:	e065      	b.n	8008dcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa31 	bl	8009168 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d0e:	e05d      	b.n	8008dcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fa29 	bl	8009168 <USBD_CtlSendStatus>
      break;
 8008d16:	e059      	b.n	8008dcc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d18:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d112      	bne.n	8008d46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008d28:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d32:	4b29      	ldr	r3, [pc, #164]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7fe ffd2 	bl	8007ce2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa12 	bl	8009168 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d44:	e042      	b.n	8008dcc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d46:	4b24      	ldr	r3, [pc, #144]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d02a      	beq.n	8008daa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7fe ffc0 	bl	8007ce2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d62:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7fe ff99 	bl	8007caa <USBD_SetClassConfig>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00f      	beq.n	8008da2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f918 	bl	8008fba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fe ffa5 	bl	8007ce2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008da0:	e014      	b.n	8008dcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9e0 	bl	8009168 <USBD_CtlSendStatus>
      break;
 8008da8:	e010      	b.n	8008dcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9dc 	bl	8009168 <USBD_CtlSendStatus>
      break;
 8008db0:	e00c      	b.n	8008dcc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f900 	bl	8008fba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <USBD_SetConfig+0x150>)
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7fe ff8e 	bl	8007ce2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dca:	bf00      	nop
  }

  return ret;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000050c 	.word	0x2000050c

08008ddc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d004      	beq.n	8008df8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 f8e2 	bl	8008fba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008df6:	e023      	b.n	8008e40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	dc02      	bgt.n	8008e0a <USBD_GetConfig+0x2e>
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	dc03      	bgt.n	8008e10 <USBD_GetConfig+0x34>
 8008e08:	e015      	b.n	8008e36 <USBD_GetConfig+0x5a>
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	d00b      	beq.n	8008e26 <USBD_GetConfig+0x4a>
 8008e0e:	e012      	b.n	8008e36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	3308      	adds	r3, #8
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 f948 	bl	80090b4 <USBD_CtlSendData>
        break;
 8008e24:	e00c      	b.n	8008e40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f940 	bl	80090b4 <USBD_CtlSendData>
        break;
 8008e34:	e004      	b.n	8008e40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f8be 	bl	8008fba <USBD_CtlError>
        break;
 8008e3e:	bf00      	nop
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d81e      	bhi.n	8008e9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	88db      	ldrh	r3, [r3, #6]
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d004      	beq.n	8008e72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f8a5 	bl	8008fba <USBD_CtlError>
        break;
 8008e70:	e01a      	b.n	8008ea8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f043 0202 	orr.w	r2, r3, #2
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	330c      	adds	r3, #12
 8008e92:	2202      	movs	r2, #2
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f90c 	bl	80090b4 <USBD_CtlSendData>
      break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f88a 	bl	8008fba <USBD_CtlError>
      break;
 8008ea6:	bf00      	nop
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	885b      	ldrh	r3, [r3, #2]
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d107      	bne.n	8008ed2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f94c 	bl	8009168 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ed0:	e013      	b.n	8008efa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d10b      	bne.n	8008ef2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	889b      	ldrh	r3, [r3, #4]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f93c 	bl	8009168 <USBD_CtlSendStatus>
}
 8008ef0:	e003      	b.n	8008efa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f860 	bl	8008fba <USBD_CtlError>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
 8008f0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	3b01      	subs	r3, #1
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d80b      	bhi.n	8008f32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	885b      	ldrh	r3, [r3, #2]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d10c      	bne.n	8008f3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f91c 	bl	8009168 <USBD_CtlSendStatus>
      }
      break;
 8008f30:	e004      	b.n	8008f3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 f840 	bl	8008fba <USBD_CtlError>
      break;
 8008f3a:	e000      	b.n	8008f3e <USBD_ClrFeature+0x3c>
      break;
 8008f3c:	bf00      	nop
  }
}
 8008f3e:	bf00      	nop
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	781a      	ldrb	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff fa40 	bl	80083f6 <SWAPBYTE>
 8008f76:	4603      	mov	r3, r0
 8008f78:	461a      	mov	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3301      	adds	r3, #1
 8008f88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f7ff fa33 	bl	80083f6 <SWAPBYTE>
 8008f90:	4603      	mov	r3, r0
 8008f92:	461a      	mov	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f7ff fa26 	bl	80083f6 <SWAPBYTE>
 8008faa:	4603      	mov	r3, r0
 8008fac:	461a      	mov	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	80da      	strh	r2, [r3, #6]
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fc4:	2180      	movs	r1, #128	@ 0x80
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f002 fd7e 	bl	800bac8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f002 fd7a 	bl	800bac8 <USBD_LL_StallEP>
}
 8008fd4:	bf00      	nop
 8008fd6:	3708      	adds	r7, #8
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d042      	beq.n	8009078 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ff6:	6938      	ldr	r0, [r7, #16]
 8008ff8:	f000 f842 	bl	8009080 <USBD_GetLen>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	3301      	adds	r3, #1
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009006:	d808      	bhi.n	800901a <USBD_GetString+0x3e>
 8009008:	6938      	ldr	r0, [r7, #16]
 800900a:	f000 f839 	bl	8009080 <USBD_GetLen>
 800900e:	4603      	mov	r3, r0
 8009010:	3301      	adds	r3, #1
 8009012:	b29b      	uxth	r3, r3
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	e001      	b.n	800901e <USBD_GetString+0x42>
 800901a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	4413      	add	r3, r2
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	7812      	ldrb	r2, [r2, #0]
 800902c:	701a      	strb	r2, [r3, #0]
  idx++;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	3301      	adds	r3, #1
 8009032:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009034:	7dfb      	ldrb	r3, [r7, #23]
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	4413      	add	r3, r2
 800903a:	2203      	movs	r2, #3
 800903c:	701a      	strb	r2, [r3, #0]
  idx++;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	3301      	adds	r3, #1
 8009042:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009044:	e013      	b.n	800906e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	4413      	add	r3, r2
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	7812      	ldrb	r2, [r2, #0]
 8009050:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	3301      	adds	r3, #1
 8009056:	613b      	str	r3, [r7, #16]
    idx++;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	3301      	adds	r3, #1
 800905c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	4413      	add	r3, r2
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
    idx++;
 8009068:	7dfb      	ldrb	r3, [r7, #23]
 800906a:	3301      	adds	r3, #1
 800906c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e7      	bne.n	8009046 <USBD_GetString+0x6a>
 8009076:	e000      	b.n	800907a <USBD_GetString+0x9e>
    return;
 8009078:	bf00      	nop
  }
}
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009090:	e005      	b.n	800909e <USBD_GetLen+0x1e>
  {
    len++;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	3301      	adds	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	3301      	adds	r3, #1
 800909c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1f5      	bne.n	8009092 <USBD_GetLen+0x12>
  }

  return len;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	2100      	movs	r1, #0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f002 fd7d 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	60f8      	str	r0, [r7, #12]
 80090f2:	60b9      	str	r1, [r7, #8]
 80090f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	2100      	movs	r1, #0
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f002 fd6c 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2203      	movs	r2, #3
 800911c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	2100      	movs	r1, #0
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f002 fd70 	bl	800bc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	60f8      	str	r0, [r7, #12]
 800914e:	60b9      	str	r1, [r7, #8]
 8009150:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	2100      	movs	r1, #0
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f002 fd5f 	bl	800bc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2204      	movs	r2, #4
 8009174:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009178:	2300      	movs	r3, #0
 800917a:	2200      	movs	r2, #0
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f002 fd2b 	bl	800bbda <USBD_LL_Transmit>

  return USBD_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2205      	movs	r2, #5
 800919a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800919e:	2300      	movs	r3, #0
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 fd39 	bl	800bc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fbea 	bl	800a99a <null_ptr_check>
 80091c6:	4603      	mov	r3, r0
 80091c8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80091ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d131      	bne.n	8009236 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	7a1b      	ldrb	r3, [r3, #8]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d003      	beq.n	80091e2 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	729a      	strb	r2, [r3, #10]
 80091e0:	e002      	b.n	80091e8 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 80091e8:	f107 010e 	add.w	r1, r7, #14
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	2000      	movs	r0, #0
 80091f2:	f000 f826 	bl	8009242 <bmp3_get_regs>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80091fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d119      	bne.n	8009236 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8009202:	7bbb      	ldrb	r3, [r7, #14]
 8009204:	2b50      	cmp	r3, #80	@ 0x50
 8009206:	d002      	beq.n	800920e <bmp3_init+0x5a>
 8009208:	7bbb      	ldrb	r3, [r7, #14]
 800920a:	2b60      	cmp	r3, #96	@ 0x60
 800920c:	d111      	bne.n	8009232 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 800920e:	7bba      	ldrb	r2, [r7, #14]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9b2 	bl	800957e <bmp3_soft_reset>
 800921a:	4603      	mov	r3, r0
 800921c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800921e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d107      	bne.n	8009236 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fb54 	bl	80098d4 <get_calib_data>
 800922c:	4603      	mov	r3, r0
 800922e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8009230:	e001      	b.n	8009236 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8009232:	23f9      	movs	r3, #249	@ 0xf9
 8009234:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8009236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8009242:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009246:	b08b      	sub	sp, #44	@ 0x2c
 8009248:	af00      	add	r7, sp, #0
 800924a:	60b9      	str	r1, [r7, #8]
 800924c:	607a      	str	r2, [r7, #4]
 800924e:	603b      	str	r3, [r7, #0]
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8009254:	6838      	ldr	r0, [r7, #0]
 8009256:	f001 fba0 	bl	800a99a <null_ptr_check>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8009260:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009264:	2b00      	cmp	r3, #0
 8009266:	d172      	bne.n	800934e <bmp3_get_regs+0x10c>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d06f      	beq.n	800934e <bmp3_get_regs+0x10c>
    {
 800926e:	466b      	mov	r3, sp
 8009270:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	7a9b      	ldrb	r3, [r3, #10]
 8009276:	461a      	mov	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4413      	add	r3, r2
 800927c:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	7a9b      	ldrb	r3, [r3, #10]
 8009282:	461a      	mov	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	18d1      	adds	r1, r2, r3
 8009288:	460b      	mov	r3, r1
 800928a:	3b01      	subs	r3, #1
 800928c:	61bb      	str	r3, [r7, #24]
 800928e:	2300      	movs	r3, #0
 8009290:	4688      	mov	r8, r1
 8009292:	4699      	mov	r9, r3
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092a8:	2300      	movs	r3, #0
 80092aa:	460c      	mov	r4, r1
 80092ac:	461d      	mov	r5, r3
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	f04f 0300 	mov.w	r3, #0
 80092b6:	00eb      	lsls	r3, r5, #3
 80092b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092bc:	00e2      	lsls	r2, r4, #3
 80092be:	1dcb      	adds	r3, r1, #7
 80092c0:	08db      	lsrs	r3, r3, #3
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	ebad 0d03 	sub.w	sp, sp, r3
 80092c8:	466b      	mov	r3, sp
 80092ca:	3300      	adds	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	7a1b      	ldrb	r3, [r3, #8]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d025      	beq.n	8009322 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80092dc:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68dc      	ldr	r4, [r3, #12]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	7bf8      	ldrb	r0, [r7, #15]
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	6979      	ldr	r1, [r7, #20]
 80092ec:	47a0      	blx	r4
 80092ee:	4603      	mov	r3, r0
 80092f0:	461a      	mov	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80092f6:	2300      	movs	r3, #0
 80092f8:	623b      	str	r3, [r7, #32]
 80092fa:	e00d      	b.n	8009318 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	7a9b      	ldrb	r3, [r3, #10]
 8009300:	461a      	mov	r2, r3
 8009302:	6a3b      	ldr	r3, [r7, #32]
 8009304:	441a      	add	r2, r3
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	6a3b      	ldr	r3, [r7, #32]
 800930a:	440b      	add	r3, r1
 800930c:	6979      	ldr	r1, [r7, #20]
 800930e:	5c8a      	ldrb	r2, [r1, r2]
 8009310:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	3301      	adds	r3, #1
 8009316:	623b      	str	r3, [r7, #32]
 8009318:	6a3a      	ldr	r2, [r7, #32]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d3ed      	bcc.n	80092fc <bmp3_get_regs+0xba>
 8009320:	e00b      	b.n	800933a <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68dc      	ldr	r4, [r3, #12]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	7bf8      	ldrb	r0, [r7, #15]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	68b9      	ldr	r1, [r7, #8]
 8009330:	47a0      	blx	r4
 8009332:	4603      	mov	r3, r0
 8009334:	461a      	mov	r2, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8009344:	23fe      	movs	r3, #254	@ 0xfe
 8009346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800934a:	46b5      	mov	sp, r6
    {
 800934c:	e002      	b.n	8009354 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800934e:	23ff      	movs	r3, #255	@ 0xff
 8009350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8009354:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009358:	4618      	mov	r0, r3
 800935a:	372c      	adds	r7, #44	@ 0x2c
 800935c:	46bd      	mov	sp, r7
 800935e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009362 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8009362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009366:	b08b      	sub	sp, #44	@ 0x2c
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
 8009372:	466b      	mov	r3, sp
 8009374:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	0059      	lsls	r1, r3, #1
 800937a:	460b      	mov	r3, r1
 800937c:	3b01      	subs	r3, #1
 800937e:	61bb      	str	r3, [r7, #24]
 8009380:	2300      	movs	r3, #0
 8009382:	4688      	mov	r8, r1
 8009384:	4699      	mov	r9, r3
 8009386:	f04f 0200 	mov.w	r2, #0
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800939a:	2300      	movs	r3, #0
 800939c:	460c      	mov	r4, r1
 800939e:	461d      	mov	r5, r3
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	00eb      	lsls	r3, r5, #3
 80093aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ae:	00e2      	lsls	r2, r4, #3
 80093b0:	1dcb      	adds	r3, r1, #7
 80093b2:	08db      	lsrs	r3, r3, #3
 80093b4:	00db      	lsls	r3, r3, #3
 80093b6:	ebad 0d03 	sub.w	sp, sp, r3
 80093ba:	466b      	mov	r3, sp
 80093bc:	3300      	adds	r3, #0
 80093be:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80093c0:	6838      	ldr	r0, [r7, #0]
 80093c2:	f001 faea 	bl	800a99a <null_ptr_check>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80093cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d14e      	bne.n	8009472 <bmp3_set_regs+0x110>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d04b      	beq.n	8009472 <bmp3_set_regs+0x110>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d048      	beq.n	8009472 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d041      	beq.n	800946a <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	781a      	ldrb	r2, [r3, #0]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	7a1b      	ldrb	r3, [r3, #8]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d114      	bne.n	8009420 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80093f6:	2300      	movs	r3, #0
 80093f8:	77fb      	strb	r3, [r7, #31]
 80093fa:	e00d      	b.n	8009418 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80093fc:	7ffb      	ldrb	r3, [r7, #31]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	4413      	add	r3, r2
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	7ffb      	ldrb	r3, [r7, #31]
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	440b      	add	r3, r1
 800940a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8009412:	7ffb      	ldrb	r3, [r7, #31]
 8009414:	3301      	adds	r3, #1
 8009416:	77fb      	strb	r3, [r7, #31]
 8009418:	7ffb      	ldrb	r3, [r7, #31]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	429a      	cmp	r2, r3
 800941e:	d8ed      	bhi.n	80093fc <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d909      	bls.n	800943a <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fa75 	bl	800991c <interleave_reg_addr>
                temp_len = len * 2;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	623b      	str	r3, [r7, #32]
 8009438:	e001      	b.n	800943e <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	691c      	ldr	r4, [r3, #16]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	7818      	ldrb	r0, [r3, #0]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	6979      	ldr	r1, [r7, #20]
 800944e:	47a0      	blx	r4
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8009462:	23fe      	movs	r3, #254	@ 0xfe
 8009464:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 8009468:	e007      	b.n	800947a <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800946a:	23fa      	movs	r3, #250	@ 0xfa
 800946c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 8009470:	e003      	b.n	800947a <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8009472:	23ff      	movs	r3, #255	@ 0xff
 8009474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009478:	e000      	b.n	800947c <bmp3_set_regs+0x11a>
        if (len != 0)
 800947a:	bf00      	nop
    }

    return rslt;
 800947c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009480:	46b5      	mov	sp, r6
}
 8009482:	4618      	mov	r0, r3
 8009484:	372c      	adds	r7, #44	@ 0x2c
 8009486:	46bd      	mov	sp, r7
 8009488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800948c <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d03a      	beq.n	8009518 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	2006      	movs	r0, #6
 80094a6:	f001 fa60 	bl	800a96a <are_settings_changed>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d006      	beq.n	80094be <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 fa97 	bl	80099e8 <set_pwr_ctrl_settings>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	20f0      	movs	r0, #240	@ 0xf0
 80094c2:	f001 fa52 	bl	800a96a <are_settings_changed>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d006      	beq.n	80094da <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 fad8 	bl	8009a86 <set_odr_filter_settings>
 80094d6:	4603      	mov	r3, r0
 80094d8:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 80094da:	68f9      	ldr	r1, [r7, #12]
 80094dc:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 80094e0:	f001 fa43 	bl	800a96a <are_settings_changed>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d006      	beq.n	80094f8 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	68b9      	ldr	r1, [r7, #8]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fb36 	bl	8009b60 <set_int_ctrl_settings>
 80094f4:	4603      	mov	r3, r0
 80094f6:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80094f8:	68f9      	ldr	r1, [r7, #12]
 80094fa:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80094fe:	f001 fa34 	bl	800a96a <are_settings_changed>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fba4 	bl	8009c5a <set_advance_settings>
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]
 8009516:	e001      	b.n	800951c <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8009518:	23ff      	movs	r3, #255	@ 0xff
 800951a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800951c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009520:	4618      	mov	r0, r3
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d01a      	beq.n	800956e <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 fa51 	bl	800a9e2 <get_sensor_status>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 8009544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 fa8a 	bl	800aa68 <get_int_status>
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 8009558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f001 faae 	bl	800aac4 <get_err_status>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	e001      	b.n	8009572 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800956e:	23ff      	movs	r3, #255	@ 0xff
 8009570:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009572:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b084      	sub	sp, #16
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8009586:	237e      	movs	r3, #126	@ 0x7e
 8009588:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800958a:	23b6      	movs	r3, #182	@ 0xb6
 800958c:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800958e:	f107 010c 	add.w	r1, r7, #12
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	2003      	movs	r0, #3
 8009598:	f7ff fe53 	bl	8009242 <bmp3_get_regs>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80095a0:	7b3b      	ldrb	r3, [r7, #12]
 80095a2:	f003 0310 	and.w	r3, r3, #16
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d02d      	beq.n	8009606 <bmp3_soft_reset+0x88>
 80095aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d129      	bne.n	8009606 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80095b2:	f107 010d 	add.w	r1, r7, #13
 80095b6:	f107 000e 	add.w	r0, r7, #14
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f7ff fed0 	bl	8009362 <bmp3_set_regs>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80095c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d11b      	bne.n	8009606 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	6852      	ldr	r2, [r2, #4]
 80095d6:	4611      	mov	r1, r2
 80095d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80095dc:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 80095de:	f107 010b 	add.w	r1, r7, #11
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	2002      	movs	r0, #2
 80095e8:	f7ff fe2b 	bl	8009242 <bmp3_get_regs>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 80095f0:	7afb      	ldrb	r3, [r7, #11]
 80095f2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d103      	bne.n	8009602 <bmp3_soft_reset+0x84>
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8009602:	23fc      	movs	r3, #252	@ 0xfc
 8009604:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8009606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800961c:	6838      	ldr	r0, [r7, #0]
 800961e:	f001 f9bc 	bl	800a99a <null_ptr_check>
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8009626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d139      	bne.n	80096a2 <bmp3_set_op_mode+0x90>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d036      	beq.n	80096a2 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800963a:	f107 030d 	add.w	r3, r7, #13
 800963e:	6839      	ldr	r1, [r7, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	f000 f838 	bl	80096b6 <bmp3_get_op_mode>
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800964a:	7b7b      	ldrb	r3, [r7, #13]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d010      	beq.n	8009672 <bmp3_set_op_mode+0x60>
 8009650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10c      	bne.n	8009672 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 8009658:	6838      	ldr	r0, [r7, #0]
 800965a:	f000 f8f9 	bl	8009850 <put_device_to_sleep>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	6852      	ldr	r2, [r2, #4]
 800966a:	4611      	mov	r1, r2
 800966c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8009670:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8009672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d116      	bne.n	80096a8 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800967a:	7bbb      	ldrb	r3, [r7, #14]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d106      	bne.n	800968e <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f87a 	bl	800977c <set_normal_mode>
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]
    {
 800968c:	e00c      	b.n	80096a8 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d109      	bne.n	80096a8 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f8a3 	bl	80097e2 <write_power_mode>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
    {
 80096a0:	e002      	b.n	80096a8 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80096a2:	23ff      	movs	r3, #255	@ 0xff
 80096a4:	73fb      	strb	r3, [r7, #15]
 80096a6:	e000      	b.n	80096aa <bmp3_set_op_mode+0x98>
    {
 80096a8:	bf00      	nop
    }

    return rslt;
 80096aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d011      	beq.n	80096ea <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2201      	movs	r2, #1
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	201b      	movs	r0, #27
 80096ce:	f7ff fdb8 	bl	8009242 <bmp3_get_regs>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	111b      	asrs	r3, r3, #4
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e001      	b.n	80096ee <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80096ea:	23ff      	movs	r3, #255	@ 0xff
 80096ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80096ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b08a      	sub	sp, #40	@ 0x28
 80096fe:	af00      	add	r7, sp, #0
 8009700:	4603      	mov	r3, r0
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8009708:	f107 0320 	add.w	r3, r7, #32
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8009712:	f107 0310 	add.w	r3, r7, #16
 8009716:	2200      	movs	r2, #0
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	605a      	str	r2, [r3, #4]
 800971c:	609a      	str	r2, [r3, #8]
 800971e:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d021      	beq.n	800976a <bmp3_get_sensor_data+0x70>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8009726:	f107 0120 	add.w	r1, r7, #32
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2206      	movs	r2, #6
 800972e:	2004      	movs	r0, #4
 8009730:	f7ff fd87 	bl	8009242 <bmp3_get_regs>
 8009734:	4603      	mov	r3, r0
 8009736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMP3_OK)
 800973a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800973e:	2b00      	cmp	r3, #0
 8009740:	d116      	bne.n	8009770 <bmp3_get_sensor_data+0x76>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8009742:	f107 0210 	add.w	r2, r7, #16
 8009746:	f107 0320 	add.w	r3, r7, #32
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fc75 	bl	800a03c <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	3318      	adds	r3, #24
 8009756:	f107 0110 	add.w	r1, r7, #16
 800975a:	7bf8      	ldrb	r0, [r7, #15]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	f000 fca8 	bl	800a0b2 <compensate_data>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009768:	e002      	b.n	8009770 <bmp3_get_sensor_data+0x76>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800976a:	23ff      	movs	r3, #255	@ 0xff
 800976c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8009770:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009774:	4618      	mov	r0, r3
 8009776:	3728      	adds	r7, #40	@ 0x28
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f889 	bl	80098a0 <validate_normal_mode_settings>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8009792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11d      	bne.n	80097d6 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f820 	bl	80097e2 <write_power_mode>
 80097a2:	4603      	mov	r3, r0
 80097a4:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 80097a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d113      	bne.n	80097d6 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 80097ae:	f107 010e 	add.w	r1, r7, #14
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2201      	movs	r2, #1
 80097b6:	2002      	movs	r0, #2
 80097b8:	f7ff fd43 	bl	8009242 <bmp3_get_regs>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 80097c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
 80097ca:	f003 0304 	and.w	r3, r3, #4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 80097d2:	23fb      	movs	r3, #251	@ 0xfb
 80097d4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80097d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80097ec:	231b      	movs	r3, #27
 80097ee:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 80097f6:	7b78      	ldrb	r0, [r7, #13]
 80097f8:	f107 010c 	add.w	r1, r7, #12
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	2201      	movs	r2, #1
 8009800:	f7ff fd1f 	bl	8009242 <bmp3_get_regs>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8009808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d119      	bne.n	8009844 <write_power_mode+0x62>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8009810:	7b3b      	ldrb	r3, [r7, #12]
 8009812:	b25b      	sxtb	r3, r3
 8009814:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8009818:	b25a      	sxtb	r2, r3
 800981a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981e:	011b      	lsls	r3, r3, #4
 8009820:	b25b      	sxtb	r3, r3
 8009822:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009826:	b25b      	sxtb	r3, r3
 8009828:	4313      	orrs	r3, r2
 800982a:	b25b      	sxtb	r3, r3
 800982c:	b2db      	uxtb	r3, r3
 800982e:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8009830:	f107 010c 	add.w	r1, r7, #12
 8009834:	f107 000d 	add.w	r0, r7, #13
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	f7ff fd91 	bl	8009362 <bmp3_set_regs>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009844:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8009858:	231b      	movs	r3, #27
 800985a:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800985c:	f107 010d 	add.w	r1, r7, #13
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	201b      	movs	r0, #27
 8009866:	f7ff fcec 	bl	8009242 <bmp3_get_regs>
 800986a:	4603      	mov	r3, r0
 800986c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800986e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10e      	bne.n	8009894 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8009876:	7b7b      	ldrb	r3, [r7, #13]
 8009878:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800987c:	b2db      	uxtb	r3, r3
 800987e:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8009880:	f107 010d 	add.w	r1, r7, #13
 8009884:	f107 000e 	add.w	r0, r7, #14
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f7ff fd69 	bl	8009362 <bmp3_set_regs>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fa29 	bl	8009d04 <get_odr_filter_settings>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80098b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d104      	bne.n	80098c8 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa3c 	bl	8009d3c <validate_osr_and_odr_settings>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80098c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80098dc:	2331      	movs	r3, #49	@ 0x31
 80098de:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	2200      	movs	r2, #0
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	605a      	str	r2, [r3, #4]
 80098ea:	609a      	str	r2, [r3, #8]
 80098ec:	60da      	str	r2, [r3, #12]
 80098ee:	611a      	str	r2, [r3, #16]
 80098f0:	751a      	strb	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 80098f2:	f107 0108 	add.w	r1, r7, #8
 80098f6:	7ff8      	ldrb	r0, [r7, #31]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2215      	movs	r2, #21
 80098fc:	f7ff fca1 	bl	8009242 <bmp3_get_regs>
 8009900:	4603      	mov	r3, r0
 8009902:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8009904:	f107 0308 	add.w	r3, r7, #8
 8009908:	6879      	ldr	r1, [r7, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fc44 	bl	800a198 <parse_calib_data>

    return rslt;
 8009910:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3720      	adds	r7, #32
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800991c:	b480      	push	{r7}
 800991e:	b087      	sub	sp, #28
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800992a:	2301      	movs	r3, #1
 800992c:	617b      	str	r3, [r7, #20]
 800992e:	e015      	b.n	800995c <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8009930:	68fa      	ldr	r2, [r7, #12]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	441a      	add	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	3b01      	subs	r3, #1
 800993c:	68b9      	ldr	r1, [r7, #8]
 800993e:	440b      	add	r3, r1
 8009940:	7812      	ldrb	r2, [r2, #0]
 8009942:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	441a      	add	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	005b      	lsls	r3, r3, #1
 800994e:	68b9      	ldr	r1, [r7, #8]
 8009950:	440b      	add	r3, r1
 8009952:	7812      	ldrb	r2, [r2, #0]
 8009954:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	3301      	adds	r3, #1
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d3e5      	bcc.n	8009930 <interleave_reg_addr+0x14>
    }
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 0307 	and.w	r3, r3, #7
 800998c:	b2da      	uxtb	r2, r3
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8009992:	7bfb      	ldrb	r3, [r7, #15]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	10db      	asrs	r3, r3, #3
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	3301      	adds	r3, #1
 80099ac:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	4413      	add	r3, r2
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	b2da      	uxtb	r2, r3
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	3302      	adds	r3, #2
 80099c4:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 80099c6:	7bfb      	ldrb	r3, [r7, #15]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	4413      	add	r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	105b      	asrs	r3, r3, #1
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	f003 0307 	and.w	r3, r3, #7
 80099d6:	b2da      	uxtb	r2, r3
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	709a      	strb	r2, [r3, #2]
}
 80099dc:	bf00      	nop
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80099f4:	231b      	movs	r3, #27
 80099f6:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80099f8:	7db8      	ldrb	r0, [r7, #22]
 80099fa:	f107 0115 	add.w	r1, r7, #21
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f7ff fc1e 	bl	8009242 <bmp3_get_regs>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8009a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d133      	bne.n	8009a7a <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00e      	beq.n	8009a3a <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8009a1c:	7d7b      	ldrb	r3, [r7, #21]
 8009a1e:	b25b      	sxtb	r3, r3
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	b25a      	sxtb	r2, r3
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	b25b      	sxtb	r3, r3
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	b25b      	sxtb	r3, r3
 8009a32:	4313      	orrs	r3, r2
 8009a34:	b25b      	sxtb	r3, r3
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f003 0304 	and.w	r3, r3, #4
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d010      	beq.n	8009a66 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8009a44:	7d7b      	ldrb	r3, [r7, #21]
 8009a46:	b25b      	sxtb	r3, r3
 8009a48:	f023 0302 	bic.w	r3, r3, #2
 8009a4c:	b25a      	sxtb	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	789b      	ldrb	r3, [r3, #2]
 8009a52:	b25b      	sxtb	r3, r3
 8009a54:	005b      	lsls	r3, r3, #1
 8009a56:	b25b      	sxtb	r3, r3
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	b25b      	sxtb	r3, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8009a66:	f107 0115 	add.w	r1, r7, #21
 8009a6a:	f107 0016 	add.w	r0, r7, #22
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f7ff fc76 	bl	8009362 <bmp3_set_regs>
 8009a76:	4603      	mov	r3, r0
 8009a78:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3718      	adds	r7, #24
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b08a      	sub	sp, #40	@ 0x28
 8009a8a:	af02      	add	r7, sp, #8
 8009a8c:	60f8      	str	r0, [r7, #12]
 8009a8e:	60b9      	str	r1, [r7, #8]
 8009a90:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8009a92:	f107 031c 	add.w	r3, r7, #28
 8009a96:	2100      	movs	r1, #0
 8009a98:	460a      	mov	r2, r1
 8009a9a:	801a      	strh	r2, [r3, #0]
 8009a9c:	460a      	mov	r2, r1
 8009a9e:	709a      	strb	r2, [r3, #2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8009aa4:	f107 0118 	add.w	r1, r7, #24
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	201c      	movs	r0, #28
 8009aae:	f7ff fbc8 	bl	8009242 <bmp3_get_regs>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8009ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d14a      	bne.n	8009b54 <set_odr_filter_settings+0xce>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	2030      	movs	r0, #48	@ 0x30
 8009ac2:	f000 ff52 	bl	800a96a <are_settings_changed>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d00b      	beq.n	8009ae4 <set_odr_filter_settings+0x5e>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8009acc:	f107 0017 	add.w	r0, r7, #23
 8009ad0:	f107 0218 	add.w	r2, r7, #24
 8009ad4:	f107 011c 	add.w	r1, r7, #28
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	4603      	mov	r3, r0
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 f9e2 	bl	8009ea8 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	2080      	movs	r0, #128	@ 0x80
 8009ae8:	f000 ff3f 	bl	800a96a <are_settings_changed>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <set_odr_filter_settings+0x7e>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8009af2:	f107 0217 	add.w	r2, r7, #23
 8009af6:	f107 0118 	add.w	r1, r7, #24
 8009afa:	f107 001c 	add.w	r0, r7, #28
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	f000 fa2b 	bl	8009f5a <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8009b04:	68f9      	ldr	r1, [r7, #12]
 8009b06:	2040      	movs	r0, #64	@ 0x40
 8009b08:	f000 ff2f 	bl	800a96a <are_settings_changed>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d008      	beq.n	8009b24 <set_odr_filter_settings+0x9e>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8009b12:	f107 0217 	add.w	r2, r7, #23
 8009b16:	f107 0118 	add.w	r1, r7, #24
 8009b1a:	f107 001c 	add.w	r0, r7, #28
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f000 fa55 	bl	8009fce <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d104      	bne.n	8009b36 <set_odr_filter_settings+0xb0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8009b2c:	68b8      	ldr	r0, [r7, #8]
 8009b2e:	f000 f905 	bl	8009d3c <validate_osr_and_odr_settings>
 8009b32:	4603      	mov	r3, r0
 8009b34:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8009b36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <set_odr_filter_settings+0xce>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	461a      	mov	r2, r3
 8009b42:	f107 0118 	add.w	r1, r7, #24
 8009b46:	f107 001c 	add.w	r0, r7, #28
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f7ff fc09 	bl	8009362 <bmp3_set_regs>
 8009b50:	4603      	mov	r3, r0
 8009b52:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8009b54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3720      	adds	r7, #32
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8009b6c:	2319      	movs	r3, #25
 8009b6e:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8009b70:	7d78      	ldrb	r0, [r7, #21]
 8009b72:	f107 0116 	add.w	r1, r7, #22
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	f7ff fb62 	bl	8009242 <bmp3_get_regs>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8009b82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d161      	bne.n	8009c4e <set_int_ctrl_settings+0xee>
    {
        int_settings = settings->int_settings;
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	3207      	adds	r2, #7
 8009b92:	6810      	ldr	r0, [r2, #0]
 8009b94:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00d      	beq.n	8009bbc <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8009ba0:	7dbb      	ldrb	r3, [r7, #22]
 8009ba2:	b25b      	sxtb	r3, r3
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	b25a      	sxtb	r2, r3
 8009baa:	7c3b      	ldrb	r3, [r7, #16]
 8009bac:	b25b      	sxtb	r3, r3
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	b25b      	sxtb	r3, r3
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	b25b      	sxtb	r3, r3
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00f      	beq.n	8009be6 <set_int_ctrl_settings+0x86>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8009bc6:	7dbb      	ldrb	r3, [r7, #22]
 8009bc8:	b25b      	sxtb	r3, r3
 8009bca:	f023 0302 	bic.w	r3, r3, #2
 8009bce:	b25a      	sxtb	r2, r3
 8009bd0:	7c7b      	ldrb	r3, [r7, #17]
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b25b      	sxtb	r3, r3
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	b25b      	sxtb	r3, r3
 8009bde:	4313      	orrs	r3, r2
 8009be0:	b25b      	sxtb	r3, r3
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00f      	beq.n	8009c10 <set_int_ctrl_settings+0xb0>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8009bf0:	7dbb      	ldrb	r3, [r7, #22]
 8009bf2:	b25b      	sxtb	r3, r3
 8009bf4:	f023 0304 	bic.w	r3, r3, #4
 8009bf8:	b25a      	sxtb	r2, r3
 8009bfa:	7cbb      	ldrb	r3, [r7, #18]
 8009bfc:	b25b      	sxtb	r3, r3
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	b25b      	sxtb	r3, r3
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	b25b      	sxtb	r3, r3
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	b25b      	sxtb	r3, r3
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f003 0308 	and.w	r3, r3, #8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00f      	beq.n	8009c3a <set_int_ctrl_settings+0xda>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8009c1a:	7dbb      	ldrb	r3, [r7, #22]
 8009c1c:	b25b      	sxtb	r3, r3
 8009c1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c22:	b25a      	sxtb	r2, r3
 8009c24:	7cfb      	ldrb	r3, [r7, #19]
 8009c26:	b25b      	sxtb	r3, r3
 8009c28:	019b      	lsls	r3, r3, #6
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	4313      	orrs	r3, r2
 8009c34:	b25b      	sxtb	r3, r3
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8009c3a:	f107 0116 	add.w	r1, r7, #22
 8009c3e:	f107 0015 	add.w	r0, r7, #21
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f7ff fb8c 	bl	8009362 <bmp3_set_regs>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b086      	sub	sp, #24
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	f107 0310 	add.w	r3, r7, #16
 8009c6c:	320b      	adds	r2, #11
 8009c6e:	8812      	ldrh	r2, [r2, #0]
 8009c70:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8009c72:	231a      	movs	r3, #26
 8009c74:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8009c76:	7db8      	ldrb	r0, [r7, #22]
 8009c78:	f107 0115 	add.w	r1, r7, #21
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f7ff fadf 	bl	8009242 <bmp3_get_regs>
 8009c84:	4603      	mov	r3, r0
 8009c86:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8009c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d133      	bne.n	8009cf8 <set_advance_settings+0x9e>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00f      	beq.n	8009cba <set_advance_settings+0x60>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8009c9a:	7d7b      	ldrb	r3, [r7, #21]
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	f023 0302 	bic.w	r3, r3, #2
 8009ca2:	b25a      	sxtb	r2, r3
 8009ca4:	7c3b      	ldrb	r3, [r7, #16]
 8009ca6:	b25b      	sxtb	r3, r3
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	b25b      	sxtb	r3, r3
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	b25b      	sxtb	r3, r3
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	b25b      	sxtb	r3, r3
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00f      	beq.n	8009ce4 <set_advance_settings+0x8a>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8009cc4:	7d7b      	ldrb	r3, [r7, #21]
 8009cc6:	b25b      	sxtb	r3, r3
 8009cc8:	f023 0304 	bic.w	r3, r3, #4
 8009ccc:	b25a      	sxtb	r2, r3
 8009cce:	7c7b      	ldrb	r3, [r7, #17]
 8009cd0:	b25b      	sxtb	r3, r3
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	b25b      	sxtb	r3, r3
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	b25b      	sxtb	r3, r3
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	b25b      	sxtb	r3, r3
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8009ce4:	f107 0115 	add.w	r1, r7, #21
 8009ce8:	f107 0016 	add.w	r0, r7, #22
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f7ff fb37 	bl	8009362 <bmp3_set_regs>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8009d0e:	f107 0108 	add.w	r1, r7, #8
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2204      	movs	r2, #4
 8009d16:	201c      	movs	r0, #28
 8009d18:	f7ff fa93 	bl	8009242 <bmp3_get_regs>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	1cda      	adds	r2, r3, #3
 8009d24:	f107 0308 	add.w	r3, r7, #8
 8009d28:	4611      	mov	r1, r2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff fe21 	bl	8009972 <parse_odr_filter_settings>

    return rslt;
 8009d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b098      	sub	sp, #96	@ 0x60
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8009d44:	23ea      	movs	r3, #234	@ 0xea
 8009d46:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t meas_t_p = 0;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8009d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009db8 <validate_osr_and_odr_settings+0x7c>)
 8009d4e:	f107 030c 	add.w	r3, r7, #12
 8009d52:	4611      	mov	r1, r2
 8009d54:	2248      	movs	r2, #72	@ 0x48
 8009d56:	4618      	mov	r0, r3
 8009d58:	f003 f8e7 	bl	800cf2a <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f83f 	bl	8009de8 <calculate_press_meas_time>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d6e:	4413      	add	r3, r2
 8009d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    if (settings->temp_en)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	789b      	ldrb	r3, [r3, #2]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d006      	beq.n	8009d88 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f864 	bl	8009e48 <calculate_temp_meas_time>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d84:	4413      	add	r3, r2
 8009d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8009d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d8c:	4413      	add	r3, r2
 8009d8e:	65bb      	str	r3, [r7, #88]	@ 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	799b      	ldrb	r3, [r3, #6]
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	3360      	adds	r3, #96	@ 0x60
 8009d98:	443b      	add	r3, r7
 8009d9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009da2:	f000 f80b 	bl	8009dbc <verify_meas_time_and_odr_duration>
 8009da6:	4603      	mov	r3, r0
 8009da8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    return rslt;
 8009dac:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3760      	adds	r7, #96	@ 0x60
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	08010500 	.word	0x08010500

08009dbc <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d202      	bcs.n	8009dd4 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	73fb      	strb	r3, [r7, #15]
 8009dd2:	e001      	b.n	8009dd8 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8009dd4:	23fd      	movs	r3, #253	@ 0xfd
 8009dd6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	f107 030c 	add.w	r3, r7, #12
 8009df6:	3203      	adds	r2, #3
 8009df8:	6810      	ldr	r0, [r2, #0]
 8009dfa:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8009e08:	7b3b      	ldrb	r3, [r7, #12]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	ed97 0b06 	vldr	d0, [r7, #24]
 8009e10:	f000 fd86 	bl	800a920 <pow_bmp3>
 8009e14:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8009e18:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e1c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009e40 <calculate_press_meas_time+0x58>
 8009e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e24:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009e44 <calculate_press_meas_time+0x5c>
 8009e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e30:	ee17 3a90 	vmov	r3, s15
 8009e34:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8009e36:	693b      	ldr	r3, [r7, #16]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3720      	adds	r7, #32
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	44fa0000 	.word	0x44fa0000
 8009e44:	43c40000 	.word	0x43c40000

08009e48 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	f107 030c 	add.w	r3, r7, #12
 8009e56:	3203      	adds	r2, #3
 8009e58:	6810      	ldr	r0, [r2, #0]
 8009e5a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8009e5c:	f04f 0200 	mov.w	r2, #0
 8009e60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8009e68:	7b7b      	ldrb	r3, [r7, #13]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	ed97 0b06 	vldr	d0, [r7, #24]
 8009e70:	f000 fd56 	bl	800a920 <pow_bmp3>
 8009e74:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8009e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e7c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009ea0 <calculate_temp_meas_time+0x58>
 8009e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e84:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8009ea4 <calculate_temp_meas_time+0x5c>
 8009e88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e90:	ee17 3a90 	vmov	r3, s15
 8009e94:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8009e96:	693b      	ldr	r3, [r7, #16]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	44fa0000 	.word	0x44fa0000
 8009ea4:	439c8000 	.word	0x439c8000

08009ea8 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
 8009eb4:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8009eb6:	6a3a      	ldr	r2, [r7, #32]
 8009eb8:	f107 0314 	add.w	r3, r7, #20
 8009ebc:	3203      	adds	r2, #3
 8009ebe:	6810      	ldr	r0, [r2, #0]
 8009ec0:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d040      	beq.n	8009f4e <fill_osr_data+0xa6>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f003 0310 	and.w	r3, r3, #16
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d013      	beq.n	8009efe <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b25b      	sxtb	r3, r3
 8009edc:	f023 0307 	bic.w	r3, r3, #7
 8009ee0:	b25a      	sxtb	r2, r3
 8009ee2:	7d3b      	ldrb	r3, [r7, #20]
 8009ee4:	b25b      	sxtb	r3, r3
 8009ee6:	f003 0307 	and.w	r3, r3, #7
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	4313      	orrs	r3, r2
 8009eee:	b25a      	sxtb	r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	440b      	add	r3, r1
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f003 0320 	and.w	r3, r3, #32
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d015      	beq.n	8009f34 <fill_osr_data+0x8c>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8009f12:	b25a      	sxtb	r2, r3
 8009f14:	7d7b      	ldrb	r3, [r7, #21]
 8009f16:	b25b      	sxtb	r3, r3
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	b25b      	sxtb	r3, r3
 8009f1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f20:	b25b      	sxtb	r3, r3
 8009f22:	4313      	orrs	r3, r2
 8009f24:	b25a      	sxtb	r2, r3
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	440b      	add	r3, r1
 8009f30:	b2d2      	uxtb	r2, r2
 8009f32:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	221c      	movs	r2, #28
 8009f40:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	701a      	strb	r2, [r3, #0]
    }
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
 8009f66:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	3303      	adds	r3, #3
 8009f6c:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	78db      	ldrb	r3, [r3, #3]
 8009f72:	2b11      	cmp	r3, #17
 8009f74:	d902      	bls.n	8009f7c <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2211      	movs	r2, #17
 8009f7a:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	b25b      	sxtb	r3, r3
 8009f84:	f023 031f 	bic.w	r3, r3, #31
 8009f88:	b25a      	sxtb	r2, r3
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	78db      	ldrb	r3, [r3, #3]
 8009f8e:	b25b      	sxtb	r3, r3
 8009f90:	f003 031f 	and.w	r3, r3, #31
 8009f94:	b25b      	sxtb	r3, r3
 8009f96:	4313      	orrs	r3, r2
 8009f98:	b25a      	sxtb	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	b2d2      	uxtb	r2, r2
 8009fa6:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	461a      	mov	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	221d      	movs	r2, #29
 8009fb4:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	701a      	strb	r2, [r3, #0]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
 8009fda:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	f107 0314 	add.w	r3, r7, #20
 8009fe2:	3203      	adds	r2, #3
 8009fe4:	6810      	ldr	r0, [r2, #0]
 8009fe6:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	3303      	adds	r3, #3
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b25b      	sxtb	r3, r3
 8009ff0:	f023 030e 	bic.w	r3, r3, #14
 8009ff4:	b25a      	sxtb	r2, r3
 8009ff6:	7dbb      	ldrb	r3, [r7, #22]
 8009ff8:	b25b      	sxtb	r3, r3
 8009ffa:	005b      	lsls	r3, r3, #1
 8009ffc:	b25b      	sxtb	r3, r3
 8009ffe:	f003 030e 	and.w	r3, r3, #14
 800a002:	b25b      	sxtb	r3, r3
 800a004:	4313      	orrs	r3, r2
 800a006:	b25a      	sxtb	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	4619      	mov	r1, r3
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	440b      	add	r3, r1
 800a012:	b2d2      	uxtb	r2, r2
 800a014:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	461a      	mov	r2, r3
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	221f      	movs	r2, #31
 800a022:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	3301      	adds	r3, #1
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	701a      	strb	r2, [r3, #0]
}
 800a030:	bf00      	nop
 800a032:	371c      	adds	r7, #28
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 800a03c:	b4b0      	push	{r4, r5, r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 800a046:	6879      	ldr	r1, [r7, #4]
 800a048:	7809      	ldrb	r1, [r1, #0]
 800a04a:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	3101      	adds	r1, #1
 800a050:	7809      	ldrb	r1, [r1, #0]
 800a052:	0209      	lsls	r1, r1, #8
 800a054:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	3102      	adds	r1, #2
 800a05a:	7809      	ldrb	r1, [r1, #0]
 800a05c:	0409      	lsls	r1, r1, #16
 800a05e:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	6939      	ldr	r1, [r7, #16]
 800a064:	4308      	orrs	r0, r1
 800a066:	6979      	ldr	r1, [r7, #20]
 800a068:	4301      	orrs	r1, r0
 800a06a:	2000      	movs	r0, #0
 800a06c:	460c      	mov	r4, r1
 800a06e:	4605      	mov	r5, r0
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 800a076:	6879      	ldr	r1, [r7, #4]
 800a078:	3103      	adds	r1, #3
 800a07a:	7809      	ldrb	r1, [r1, #0]
 800a07c:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	3104      	adds	r1, #4
 800a082:	7809      	ldrb	r1, [r1, #0]
 800a084:	0209      	lsls	r1, r1, #8
 800a086:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 800a088:	6879      	ldr	r1, [r7, #4]
 800a08a:	3105      	adds	r1, #5
 800a08c:	7809      	ldrb	r1, [r1, #0]
 800a08e:	0409      	lsls	r1, r1, #16
 800a090:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800a092:	68f8      	ldr	r0, [r7, #12]
 800a094:	6939      	ldr	r1, [r7, #16]
 800a096:	4308      	orrs	r0, r1
 800a098:	6979      	ldr	r1, [r7, #20]
 800a09a:	4301      	orrs	r1, r0
 800a09c:	2000      	movs	r0, #0
 800a09e:	460a      	mov	r2, r1
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	371c      	adds	r7, #28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bcb0      	pop	{r4, r5, r7}
 800a0b0:	4770      	bx	lr

0800a0b2 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	603b      	str	r3, [r7, #0]
 800a0be:	4603      	mov	r3, r0
 800a0c0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d05a      	beq.n	800a182 <compensate_data+0xd0>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d057      	beq.n	800a182 <compensate_data+0xd0>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d054      	beq.n	800a182 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	2b03      	cmp	r3, #3
 800a0dc:	d115      	bne.n	800a10a <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	68b9      	ldr	r1, [r7, #8]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 fa27 	bl	800a538 <compensate_temperature>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800a0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d148      	bne.n	800a188 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f000 fa96 	bl	800a630 <compensate_pressure>
 800a104:	4603      	mov	r3, r0
 800a106:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a108:	e03e      	b.n	800a188 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	d116      	bne.n	800a13e <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	68b9      	ldr	r1, [r7, #8]
 800a116:	4618      	mov	r0, r3
 800a118:	f000 fa0e 	bl	800a538 <compensate_temperature>
            comp_data->temperature = 0;
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	f04f 0300 	mov.w	r3, #0
 800a126:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	3308      	adds	r3, #8
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 fa7c 	bl	800a630 <compensate_pressure>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a13c:	e024      	b.n	800a188 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d10f      	bne.n	800a164 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	68b9      	ldr	r1, [r7, #8]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f9f4 	bl	800a538 <compensate_temperature>
 800a150:	4603      	mov	r3, r0
 800a152:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 800a154:	6879      	ldr	r1, [r7, #4]
 800a156:	f04f 0200 	mov.w	r2, #0
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a162:	e011      	b.n	800a188 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	f04f 0300 	mov.w	r3, #0
 800a16e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a180:	e002      	b.n	800a188 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800a182:	23ff      	movs	r3, #255	@ 0xff
 800a184:	75fb      	strb	r3, [r7, #23]
 800a186:	e000      	b.n	800a18a <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 800a188:	bf00      	nop
    }

    return rslt;
 800a18a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	3390      	adds	r3, #144	@ 0x90
 800a1a6:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	4ba4      	ldr	r3, [pc, #656]	@ (800a444 <parse_calib_data+0x2ac>)
 800a1b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	b21b      	sxth	r3, r3
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	b21a      	sxth	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7f6 f993 	bl	8000504 <__aeabi_ui2d>
 800a1de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1e2:	f7f6 fb33 	bl	800084c <__aeabi_ddiv>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	6939      	ldr	r1, [r7, #16]
 800a1ec:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3303      	adds	r3, #3
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	b21b      	sxth	r3, r3
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	b21a      	sxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3302      	adds	r3, #2
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b21b      	sxth	r3, r3
 800a204:	4313      	orrs	r3, r2
 800a206:	b21b      	sxth	r3, r3
 800a208:	b29a      	uxth	r2, r3
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 800a20e:	f04f 0200 	mov.w	r2, #0
 800a212:	4b8d      	ldr	r3, [pc, #564]	@ (800a448 <parse_calib_data+0x2b0>)
 800a214:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	885b      	ldrh	r3, [r3, #2]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7f6 f971 	bl	8000504 <__aeabi_ui2d>
 800a222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a226:	f7f6 fb11 	bl	800084c <__aeabi_ddiv>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	6939      	ldr	r1, [r7, #16]
 800a230:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	b25a      	sxtb	r2, r3
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 800a240:	f04f 0200 	mov.w	r2, #0
 800a244:	4b81      	ldr	r3, [pc, #516]	@ (800a44c <parse_calib_data+0x2b4>)
 800a246:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a250:	4618      	mov	r0, r3
 800a252:	f7f6 f967 	bl	8000524 <__aeabi_i2d>
 800a256:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a25a:	f7f6 faf7 	bl	800084c <__aeabi_ddiv>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	6939      	ldr	r1, [r7, #16]
 800a264:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	3306      	adds	r3, #6
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	b21b      	sxth	r3, r3
 800a270:	021b      	lsls	r3, r3, #8
 800a272:	b21a      	sxth	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3305      	adds	r3, #5
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b21b      	sxth	r3, r3
 800a27c:	4313      	orrs	r3, r2
 800a27e:	b21a      	sxth	r2, r3
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 800a284:	f04f 0200 	mov.w	r2, #0
 800a288:	4b71      	ldr	r3, [pc, #452]	@ (800a450 <parse_calib_data+0x2b8>)
 800a28a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a294:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a298:	4618      	mov	r0, r3
 800a29a:	f7f6 f943 	bl	8000524 <__aeabi_i2d>
 800a29e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2a2:	f7f6 fad3 	bl	800084c <__aeabi_ddiv>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	6939      	ldr	r1, [r7, #16]
 800a2ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	3308      	adds	r3, #8
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	b21b      	sxth	r3, r3
 800a2b8:	021b      	lsls	r3, r3, #8
 800a2ba:	b21a      	sxth	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3307      	adds	r3, #7
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	b21b      	sxth	r3, r3
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b21a      	sxth	r2, r3
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800a2cc:	f04f 0200 	mov.w	r2, #0
 800a2d0:	4b60      	ldr	r3, [pc, #384]	@ (800a454 <parse_calib_data+0x2bc>)
 800a2d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a2dc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f6 f91f 	bl	8000524 <__aeabi_i2d>
 800a2e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2ea:	f7f6 faaf 	bl	800084c <__aeabi_ddiv>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	6939      	ldr	r1, [r7, #16]
 800a2f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3309      	adds	r3, #9
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b25a      	sxtb	r2, r3
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	4b53      	ldr	r3, [pc, #332]	@ (800a458 <parse_calib_data+0x2c0>)
 800a30a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800a314:	4618      	mov	r0, r3
 800a316:	f7f6 f905 	bl	8000524 <__aeabi_i2d>
 800a31a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a31e:	f7f6 fa95 	bl	800084c <__aeabi_ddiv>
 800a322:	4602      	mov	r2, r0
 800a324:	460b      	mov	r3, r1
 800a326:	6939      	ldr	r1, [r7, #16]
 800a328:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	330a      	adds	r3, #10
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b25a      	sxtb	r2, r3
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	4b47      	ldr	r3, [pc, #284]	@ (800a45c <parse_calib_data+0x2c4>)
 800a33e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800a348:	4618      	mov	r0, r3
 800a34a:	f7f6 f8eb 	bl	8000524 <__aeabi_i2d>
 800a34e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a352:	f7f6 fa7b 	bl	800084c <__aeabi_ddiv>
 800a356:	4602      	mov	r2, r0
 800a358:	460b      	mov	r3, r1
 800a35a:	6939      	ldr	r1, [r7, #16]
 800a35c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	330c      	adds	r3, #12
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b21b      	sxth	r3, r3
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	330b      	adds	r3, #11
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	b21b      	sxth	r3, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	b21b      	sxth	r3, r3
 800a378:	b29a      	uxth	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a386:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	899b      	ldrh	r3, [r3, #12]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 f8b8 	bl	8000504 <__aeabi_ui2d>
 800a394:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a398:	f7f6 fa58 	bl	800084c <__aeabi_ddiv>
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	330e      	adds	r3, #14
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	b21b      	sxth	r3, r3
 800a3ae:	021b      	lsls	r3, r3, #8
 800a3b0:	b21a      	sxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	330d      	adds	r3, #13
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	b21b      	sxth	r3, r3
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	b21b      	sxth	r3, r3
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	4b25      	ldr	r3, [pc, #148]	@ (800a460 <parse_calib_data+0x2c8>)
 800a3ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	89db      	ldrh	r3, [r3, #14]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7f6 f896 	bl	8000504 <__aeabi_ui2d>
 800a3d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3dc:	f7f6 fa36 	bl	800084c <__aeabi_ddiv>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	6939      	ldr	r1, [r7, #16]
 800a3e6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	330f      	adds	r3, #15
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	b25a      	sxtb	r2, r3
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800a3f6:	f04f 0200 	mov.w	r2, #0
 800a3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800a464 <parse_calib_data+0x2cc>)
 800a3fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800a406:	4618      	mov	r0, r3
 800a408:	f7f6 f88c 	bl	8000524 <__aeabi_i2d>
 800a40c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a410:	f7f6 fa1c 	bl	800084c <__aeabi_ddiv>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	6939      	ldr	r1, [r7, #16]
 800a41a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3310      	adds	r3, #16
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	b25a      	sxtb	r2, r3
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800a42a:	f04f 0200 	mov.w	r2, #0
 800a42e:	4b0e      	ldr	r3, [pc, #56]	@ (800a468 <parse_calib_data+0x2d0>)
 800a430:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7f6 f872 	bl	8000524 <__aeabi_i2d>
 800a440:	e014      	b.n	800a46c <parse_calib_data+0x2d4>
 800a442:	bf00      	nop
 800a444:	3f700000 	.word	0x3f700000
 800a448:	41d00000 	.word	0x41d00000
 800a44c:	42f00000 	.word	0x42f00000
 800a450:	41300000 	.word	0x41300000
 800a454:	41c00000 	.word	0x41c00000
 800a458:	41f00000 	.word	0x41f00000
 800a45c:	42400000 	.word	0x42400000
 800a460:	40500000 	.word	0x40500000
 800a464:	40700000 	.word	0x40700000
 800a468:	40e00000 	.word	0x40e00000
 800a46c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a470:	f7f6 f9ec 	bl	800084c <__aeabi_ddiv>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	6939      	ldr	r1, [r7, #16]
 800a47a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3312      	adds	r3, #18
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	b21b      	sxth	r3, r3
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	b21a      	sxth	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3311      	adds	r3, #17
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	b21b      	sxth	r3, r3
 800a492:	4313      	orrs	r3, r2
 800a494:	b21a      	sxth	r2, r3
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800a49a:	f04f 0200 	mov.w	r2, #0
 800a49e:	4b25      	ldr	r3, [pc, #148]	@ (800a534 <parse_calib_data+0x39c>)
 800a4a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f6 f83a 	bl	8000524 <__aeabi_i2d>
 800a4b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4b4:	f7f6 f9ca 	bl	800084c <__aeabi_ddiv>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	6939      	ldr	r1, [r7, #16]
 800a4be:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3313      	adds	r3, #19
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b25a      	sxtb	r2, r3
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	4b18      	ldr	r3, [pc, #96]	@ (800a534 <parse_calib_data+0x39c>)
 800a4d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7f6 f820 	bl	8000524 <__aeabi_i2d>
 800a4e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a4e8:	f7f6 f9b0 	bl	800084c <__aeabi_ddiv>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	6939      	ldr	r1, [r7, #16]
 800a4f2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3314      	adds	r3, #20
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	b25a      	sxtb	r2, r3
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 800a50a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800a514:	4618      	mov	r0, r3
 800a516:	f7f6 f805 	bl	8000524 <__aeabi_i2d>
 800a51a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a51e:	f7f6 f995 	bl	800084c <__aeabi_ddiv>
 800a522:	4602      	mov	r2, r0
 800a524:	460b      	mov	r3, r1
 800a526:	6939      	ldr	r1, [r7, #16]
 800a528:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 800a52c:	bf00      	nop
 800a52e:	3718      	adds	r7, #24
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	42f00000 	.word	0x42f00000

0800a538 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b08c      	sub	sp, #48	@ 0x30
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800a544:	2300      	movs	r3, #0
 800a546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a550:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800a554:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a558:	f7f6 f820 	bl	800059c <__aeabi_l2d>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe91 	bl	8000288 <__aeabi_dsub>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800a574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a578:	f7f6 f83e 	bl	80005f8 <__aeabi_dmul>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800a584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a588:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a58c:	f7f6 f834 	bl	80005f8 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4610      	mov	r0, r2
 800a596:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800a59e:	f7f6 f82b 	bl	80005f8 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4610      	mov	r0, r2
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a5ae:	f7f5 fe6d 	bl	800028c <__adddf3>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	4b17      	ldr	r3, [pc, #92]	@ (800a624 <compensate_temperature+0xec>)
 800a5c8:	f7f6 fa88 	bl	8000adc <__aeabi_dcmplt>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d008      	beq.n	800a5e4 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	f04f 0200 	mov.w	r2, #0
 800a5d8:	4b12      	ldr	r3, [pc, #72]	@ (800a624 <compensate_temperature+0xec>)
 800a5da:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MIN_TEMP;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800a5ea:	f04f 0200 	mov.w	r2, #0
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a628 <compensate_temperature+0xf0>)
 800a5f0:	f7f6 fa92 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d008      	beq.n	800a60c <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	f04f 0200 	mov.w	r2, #0
 800a600:	4b09      	ldr	r3, [pc, #36]	@ (800a628 <compensate_temperature+0xf0>)
 800a602:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MAX_TEMP;
 800a606:	2304      	movs	r3, #4
 800a608:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800a612:	68f9      	ldr	r1, [r7, #12]
 800a614:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800a618:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3730      	adds	r7, #48	@ 0x30
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	c0440000 	.word	0xc0440000
 800a628:	40554000 	.word	0x40554000
 800a62c:	00000000 	.word	0x00000000

0800a630 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 800a630:	b5b0      	push	{r4, r5, r7, lr}
 800a632:	b096      	sub	sp, #88	@ 0x58
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	647b      	str	r3, [r7, #68]	@ 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 800a646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a648:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800a64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a64e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	4602      	mov	r2, r0
 800a658:	460b      	mov	r3, r1
 800a65a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800a65e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a660:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 800a664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a666:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800a66a:	2002      	movs	r0, #2
 800a66c:	eeb0 0a47 	vmov.f32	s0, s14
 800a670:	eef0 0a67 	vmov.f32	s1, s15
 800a674:	f000 f954 	bl	800a920 <pow_bmp3>
 800a678:	ee10 3a10 	vmov	r3, s0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7f5 ff63 	bl	8000548 <__aeabi_f2d>
 800a682:	4602      	mov	r2, r0
 800a684:	460b      	mov	r3, r1
 800a686:	4620      	mov	r0, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	f7f5 ffb5 	bl	80005f8 <__aeabi_dmul>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800a696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a698:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800a69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a69e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800a6a2:	2003      	movs	r0, #3
 800a6a4:	eeb0 0a47 	vmov.f32	s0, s14
 800a6a8:	eef0 0a67 	vmov.f32	s1, s15
 800a6ac:	f000 f938 	bl	800a920 <pow_bmp3>
 800a6b0:	ee10 3a10 	vmov	r3, s0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7f5 ff47 	bl	8000548 <__aeabi_f2d>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4620      	mov	r0, r4
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	f7f5 ff99 	bl	80005f8 <__aeabi_dmul>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800a6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800a6d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a6d8:	f7f5 fdd8 	bl	800028c <__adddf3>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a6e8:	f7f5 fdd0 	bl	800028c <__adddf3>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a6f4:	f7f5 fdca 	bl	800028c <__adddf3>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 800a700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a702:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800a706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a708:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800a70c:	f7f5 ff74 	bl	80005f8 <__aeabi_dmul>
 800a710:	4602      	mov	r2, r0
 800a712:	460b      	mov	r3, r1
 800a714:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800a718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a71a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800a71e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a720:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800a724:	2002      	movs	r0, #2
 800a726:	eeb0 0a47 	vmov.f32	s0, s14
 800a72a:	eef0 0a67 	vmov.f32	s1, s15
 800a72e:	f000 f8f7 	bl	800a920 <pow_bmp3>
 800a732:	ee10 3a10 	vmov	r3, s0
 800a736:	4618      	mov	r0, r3
 800a738:	f7f5 ff06 	bl	8000548 <__aeabi_f2d>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4620      	mov	r0, r4
 800a742:	4629      	mov	r1, r5
 800a744:	f7f5 ff58 	bl	80005f8 <__aeabi_dmul>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800a750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a752:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800a756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a758:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800a75c:	2003      	movs	r0, #3
 800a75e:	eeb0 0a47 	vmov.f32	s0, s14
 800a762:	eef0 0a67 	vmov.f32	s1, s15
 800a766:	f000 f8db 	bl	800a920 <pow_bmp3>
 800a76a:	ee10 3a10 	vmov	r3, s0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7f5 feea 	bl	8000548 <__aeabi_f2d>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4620      	mov	r0, r4
 800a77a:	4629      	mov	r1, r5
 800a77c:	f7f5 ff3c 	bl	80005f8 <__aeabi_dmul>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out2 = uncomp_data->pressure *
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	4610      	mov	r0, r2
 800a790:	4619      	mov	r1, r3
 800a792:	f7f5 fefb 	bl	800058c <__aeabi_ul2d>
 800a796:	4604      	mov	r4, r0
 800a798:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800a79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a79c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800a7a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7a4:	f7f5 fd72 	bl	800028c <__adddf3>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a7b4:	f7f5 fd6a 	bl	800028c <__adddf3>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a7c4:	f7f5 fd62 	bl	800028c <__adddf3>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f7f5 fed1 	bl	800058c <__aeabi_ul2d>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	2002      	movs	r0, #2
 800a7f0:	ec43 2b10 	vmov	d0, r2, r3
 800a7f4:	f000 f894 	bl	800a920 <pow_bmp3>
 800a7f8:	ee10 3a10 	vmov	r3, s0
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7f5 fea3 	bl	8000548 <__aeabi_f2d>
 800a802:	4602      	mov	r2, r0
 800a804:	460b      	mov	r3, r1
 800a806:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800a80a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a80c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800a810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a812:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800a816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a818:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800a81c:	f7f5 feec 	bl	80005f8 <__aeabi_dmul>
 800a820:	4602      	mov	r2, r0
 800a822:	460b      	mov	r3, r1
 800a824:	4620      	mov	r0, r4
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 fd30 	bl	800028c <__adddf3>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = partial_data1 * partial_data2;
 800a834:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a838:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800a83c:	f7f5 fedc 	bl	80005f8 <__aeabi_dmul>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	4610      	mov	r0, r2
 800a850:	4619      	mov	r1, r3
 800a852:	f7f5 fe9b 	bl	800058c <__aeabi_ul2d>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	2003      	movs	r0, #3
 800a85c:	ec43 2b10 	vmov	d0, r2, r3
 800a860:	f000 f85e 	bl	800a920 <pow_bmp3>
 800a864:	ee10 3a10 	vmov	r3, s0
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f5 fe6d 	bl	8000548 <__aeabi_f2d>
 800a86e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a870:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800a874:	f7f5 fec0 	bl	80005f8 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a880:	f7f5 fd04 	bl	800028c <__adddf3>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800a88c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a890:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a894:	f7f5 fcfa 	bl	800028c <__adddf3>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800a8ac:	a318      	add	r3, pc, #96	@ (adr r3, 800a910 <compensate_pressure+0x2e0>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a8b6:	f7f6 f911 	bl	8000adc <__aeabi_dcmplt>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d007      	beq.n	800a8d0 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 800a8c0:	a313      	add	r3, pc, #76	@ (adr r3, 800a910 <compensate_pressure+0x2e0>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MIN_PRES;
 800a8ca:	2305      	movs	r3, #5
 800a8cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 800a8d0:	a311      	add	r3, pc, #68	@ (adr r3, 800a918 <compensate_pressure+0x2e8>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800a8da:	f7f6 f91d 	bl	8000b18 <__aeabi_dcmpgt>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d007      	beq.n	800a8f4 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 800a8e4:	a30c      	add	r3, pc, #48	@ (adr r3, 800a918 <compensate_pressure+0x2e8>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MAX_PRES;
 800a8ee:	2306      	movs	r3, #6
 800a8f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    (*pressure) = comp_press;
 800a8f4:	68f9      	ldr	r1, [r7, #12]
 800a8f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a8fa:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800a8fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800a902:	4618      	mov	r0, r3
 800a904:	3758      	adds	r7, #88	@ 0x58
 800a906:	46bd      	mov	sp, r7
 800a908:	bdb0      	pop	{r4, r5, r7, pc}
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w
 800a910:	00000000 	.word	0x00000000
 800a914:	40dd4c00 	.word	0x40dd4c00
 800a918:	00000000 	.word	0x00000000
 800a91c:	40fe8480 	.word	0x40fe8480

0800a920 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	ed87 0b02 	vstr	d0, [r7, #8]
 800a92a:	4603      	mov	r3, r0
 800a92c:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800a92e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800a932:	617b      	str	r3, [r7, #20]

    while (power != 0)
 800a934:	e00e      	b.n	800a954 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 800a936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a93a:	f7f6 f955 	bl	8000be8 <__aeabi_d2f>
 800a93e:	ee07 0a10 	vmov	s14, r0
 800a942:	edd7 7a05 	vldr	s15, [r7, #20]
 800a946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a94a:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	3b01      	subs	r3, #1
 800a952:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1ed      	bne.n	800a936 <pow_bmp3+0x16>
    }

    return pow_output;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	ee07 3a90 	vmov	s15, r3
}
 800a960:	eeb0 0a67 	vmov.f32	s0, s15
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800a96a:	b480      	push	{r7}
 800a96c:	b085      	sub	sp, #20
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	4013      	ands	r3, r2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d002      	beq.n	800a988 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
 800a986:	e001      	b.n	800a98c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800a988:	2300      	movs	r3, #0
 800a98a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800a98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00f      	beq.n	800a9c8 <null_ptr_check+0x2e>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00b      	beq.n	800a9c8 <null_ptr_check+0x2e>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <null_ptr_check+0x2e>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800a9c8:	23ff      	movs	r3, #255	@ 0xff
 800a9ca:	73fb      	strb	r3, [r7, #15]
 800a9cc:	e001      	b.n	800a9d2 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800a9ec:	2303      	movs	r3, #3
 800a9ee:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800a9f0:	f107 010d 	add.w	r1, r7, #13
 800a9f4:	7bb8      	ldrb	r0, [r7, #14]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	f7fe fc22 	bl	8009242 <bmp3_get_regs>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800aa02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d128      	bne.n	800aa5c <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 800aa0a:	7b7b      	ldrb	r3, [r7, #13]
 800aa0c:	111b      	asrs	r3, r3, #4
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	f003 0301 	and.w	r3, r3, #1
 800aa14:	b2da      	uxtb	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 800aa1a:	7b7b      	ldrb	r3, [r7, #13]
 800aa1c:	115b      	asrs	r3, r3, #5
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0301 	and.w	r3, r3, #1
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 800aa2a:	7b7b      	ldrb	r3, [r7, #13]
 800aa2c:	119b      	asrs	r3, r3, #6
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	b2da      	uxtb	r2, r3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800aa3e:	f107 010d 	add.w	r1, r7, #13
 800aa42:	7bb8      	ldrb	r0, [r7, #14]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f7fe fbfb 	bl	8009242 <bmp3_get_regs>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 800aa50:	7b7b      	ldrb	r3, [r7, #13]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 800aa5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3710      	adds	r7, #16
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 800aa72:	f107 010e 	add.w	r1, r7, #14
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	2011      	movs	r0, #17
 800aa7c:	f7fe fbe1 	bl	8009242 <bmp3_get_regs>
 800aa80:	4603      	mov	r3, r0
 800aa82:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800aa84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d115      	bne.n	800aab8 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	105b      	asrs	r3, r3, #1
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	10db      	asrs	r3, r3, #3
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 800aab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800aace:	f107 010e 	add.w	r1, r7, #14
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2201      	movs	r2, #1
 800aad6:	2002      	movs	r0, #2
 800aad8:	f7fe fbb3 	bl	8009242 <bmp3_get_regs>
 800aadc:	4603      	mov	r3, r0
 800aade:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800aae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d115      	bne.n	800ab14 <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	b2da      	uxtb	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 800aaf4:	7bbb      	ldrb	r3, [r7, #14]
 800aaf6:	105b      	asrs	r3, r3, #1
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	b2da      	uxtb	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 800ab04:	7bbb      	ldrb	r3, [r7, #14]
 800ab06:	109b      	asrs	r3, r3, #2
 800ab08:	b2db      	uxtb	r3, r3
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 800ab14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <bmp388_read>:
extern struct bmp388_interface bmp388_intf;

static volatile uint32_t counter = 0U;

BMP3_INTF_RET_TYPE bmp388_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 800ab20:	b590      	push	{r4, r7, lr}
 800ab22:	b08b      	sub	sp, #44	@ 0x2c
 800ab24:	af04      	add	r7, sp, #16
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(intf->hi2c, (intf->dev_addr << 1U), reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	6858      	ldr	r0, [r3, #4]
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	7a1b      	ldrb	r3, [r3, #8]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	b299      	uxth	r1, r3
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	f04f 34ff 	mov.w	r4, #4294967295
 800ab4c:	9402      	str	r4, [sp, #8]
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	2301      	movs	r3, #1
 800ab56:	f7f7 fbf3 	bl	8002340 <HAL_I2C_Mem_Read>
	return ( BMP3_INTF_RET_SUCCESS );
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd90      	pop	{r4, r7, pc}

0800ab64 <bmp388_write>:

BMP3_INTF_RET_TYPE bmp388_write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len,void *intf_ptr)
{
 800ab64:	b590      	push	{r4, r7, lr}
 800ab66:	b08b      	sub	sp, #44	@ 0x2c
 800ab68:	af04      	add	r7, sp, #16
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	603b      	str	r3, [r7, #0]
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Write(intf->hi2c, ((intf->dev_addr << 1U) | 0x1U), reg_addr, 1U, (uint8_t*)read_data, len, HAL_MAX_DELAY);
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	6858      	ldr	r0, [r3, #4]
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	7a1b      	ldrb	r3, [r3, #8]
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	f043 0301 	orr.w	r3, r3, #1
 800ab88:	b299      	uxth	r1, r3
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f04f 34ff 	mov.w	r4, #4294967295
 800ab96:	9402      	str	r4, [sp, #8]
 800ab98:	9301      	str	r3, [sp, #4]
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	9300      	str	r3, [sp, #0]
 800ab9e:	2301      	movs	r3, #1
 800aba0:	f7f7 fad4 	bl	800214c <HAL_I2C_Mem_Write>
	return ( BMP3_INTF_RET_SUCCESS );
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd90      	pop	{r4, r7, pc}
	...

0800abb0 <delay_us>:

void delay_us(uint32_t period, void *intf_ptr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	60fb      	str	r3, [r7, #12]

	HAL_TIM_Base_Start_IT(intf->htim);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7fa f8dc 	bl	8004d80 <HAL_TIM_Base_Start_IT>

	while(counter != period);
 800abc8:	bf00      	nop
 800abca:	4b08      	ldr	r3, [pc, #32]	@ (800abec <delay_us+0x3c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d1fa      	bne.n	800abca <delay_us+0x1a>

	HAL_TIM_Base_Stop_IT(intf->htim);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fa f941 	bl	8004e60 <HAL_TIM_Base_Stop_IT>

	counter = 0U;
 800abde:	4b03      	ldr	r3, [pc, #12]	@ (800abec <delay_us+0x3c>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
}
 800abe4:	bf00      	nop
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	20000510 	.word	0x20000510

0800abf0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 800abfe:	f7f6 fbf3 	bl	80013e8 <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	4b07      	ldr	r3, [pc, #28]	@ (800ac24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 800ac10:	4b05      	ldr	r3, [pc, #20]	@ (800ac28 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	4a04      	ldr	r2, [pc, #16]	@ (800ac28 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800ac18:	6013      	str	r3, [r2, #0]
	}

}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000000 	.word	0x20000000
 800ac28:	20000510 	.word	0x20000510

0800ac2c <init_bmp388_sensor_driver_interface>:

BMP3_INTF_RET_TYPE init_bmp388_sensor_driver_interface(struct bmp3_dev *bmp388,struct bmp388_interface *bmp388_intf)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( bmp388_intf == NULL ) )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d002      	beq.n	800ac42 <init_bmp388_sensor_driver_interface+0x16>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <init_bmp388_sensor_driver_interface+0x1a>
	{
		Error_Handler();
 800ac42:	f7f6 fbd1 	bl	80013e8 <Error_Handler>
	}

	struct bmp3_settings settings = { 0 };
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	605a      	str	r2, [r3, #4]
 800ac50:	609a      	str	r2, [r3, #8]
 800ac52:	731a      	strb	r2, [r3, #12]
	int8_t rslt = 0U;
 800ac54:	2300      	movs	r3, #0
 800ac56:	77fb      	strb	r3, [r7, #31]
	uint16_t settings_sel = 0U;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	83bb      	strh	r3, [r7, #28]

	bmp388->intf = BMP3_I2C_INTF;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	721a      	strb	r2, [r3, #8]
	bmp388->read = bmp388_read;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a3a      	ldr	r2, [pc, #232]	@ (800ad50 <init_bmp388_sensor_driver_interface+0x124>)
 800ac66:	60da      	str	r2, [r3, #12]
	bmp388->write = bmp388_write;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a3a      	ldr	r2, [pc, #232]	@ (800ad54 <init_bmp388_sensor_driver_interface+0x128>)
 800ac6c:	611a      	str	r2, [r3, #16]
	bmp388->delay_us = delay_us;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a39      	ldr	r2, [pc, #228]	@ (800ad58 <init_bmp388_sensor_driver_interface+0x12c>)
 800ac72:	615a      	str	r2, [r3, #20]
	bmp388->intf_ptr = bmp388_intf;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	605a      	str	r2, [r3, #4]

	rslt = bmp3_selftest_check(bmp388);
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f974 	bl	800af68 <bmp3_selftest_check>
 800ac80:	4603      	mov	r3, r0
 800ac82:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800ac84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d004      	beq.n	800ac96 <init_bmp388_sensor_driver_interface+0x6a>
	{
		printf("BMP388 self-test failure !\n");
 800ac8c:	4833      	ldr	r0, [pc, #204]	@ (800ad5c <init_bmp388_sensor_driver_interface+0x130>)
 800ac8e:	f001 ffcb 	bl	800cc28 <puts>
		Error_Handler();
 800ac92:	f7f6 fba9 	bl	80013e8 <Error_Handler>
	}

	printf("BMP388 self-test success !\n");
 800ac96:	4832      	ldr	r0, [pc, #200]	@ (800ad60 <init_bmp388_sensor_driver_interface+0x134>)
 800ac98:	f001 ffc6 	bl	800cc28 <puts>

	rslt = bmp3_init(bmp388);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f7fe fa89 	bl	80091b4 <bmp3_init>
 800aca2:	4603      	mov	r3, r0
 800aca4:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800aca6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <init_bmp388_sensor_driver_interface+0x8c>
	{
		printf("BMP388 initialization failure !\n");
 800acae:	482d      	ldr	r0, [pc, #180]	@ (800ad64 <init_bmp388_sensor_driver_interface+0x138>)
 800acb0:	f001 ffba 	bl	800cc28 <puts>
		Error_Handler();
 800acb4:	f7f6 fb98 	bl	80013e8 <Error_Handler>
	}

	printf("BMP388 initialization success !\n");
 800acb8:	482b      	ldr	r0, [pc, #172]	@ (800ad68 <init_bmp388_sensor_driver_interface+0x13c>)
 800acba:	f001 ffb5 	bl	800cc28 <puts>
	printf("Chip ID 0x%X\n" , bmp388->chip_id);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	4619      	mov	r1, r3
 800acc4:	4829      	ldr	r0, [pc, #164]	@ (800ad6c <init_bmp388_sensor_driver_interface+0x140>)
 800acc6:	f001 ff47 	bl	800cb58 <iprintf>

	settings.press_en = BMP3_ENABLE;
 800acca:	2301      	movs	r3, #1
 800accc:	737b      	strb	r3, [r7, #13]
	settings.temp_en = BMP3_ENABLE;
 800acce:	2301      	movs	r3, #1
 800acd0:	73bb      	strb	r3, [r7, #14]

	settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_63; //BMP3_IIR_FILTER_COEFF_3
 800acd2:	2306      	movs	r3, #6
 800acd4:	747b      	strb	r3, [r7, #17]
	settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800acda:	2300      	movs	r3, #0
 800acdc:	743b      	strb	r3, [r7, #16]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 800acde:	2302      	movs	r3, #2
 800ace0:	74bb      	strb	r3, [r7, #18]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 800ace2:	23fe      	movs	r3, #254	@ 0xfe
 800ace4:	83bb      	strh	r3, [r7, #28]
				 BMP3_SEL_DRDY_EN | BMP3_SEL_IIR_FILTER;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, bmp388);
 800ace6:	8bbb      	ldrh	r3, [r7, #28]
 800ace8:	f107 010c 	add.w	r1, r7, #12
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fbcc 	bl	800948c <bmp3_set_sensor_settings>
 800acf4:	4603      	mov	r3, r0
 800acf6:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800acf8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d004      	beq.n	800ad0a <init_bmp388_sensor_driver_interface+0xde>
	{
		printf("BMP388 set sensor settings failure !\n");
 800ad00:	481b      	ldr	r0, [pc, #108]	@ (800ad70 <init_bmp388_sensor_driver_interface+0x144>)
 800ad02:	f001 ff91 	bl	800cc28 <puts>
		Error_Handler();
 800ad06:	f7f6 fb6f 	bl	80013e8 <Error_Handler>
	}

	printf("BMP388 set sensor settings success !\n");
 800ad0a:	481a      	ldr	r0, [pc, #104]	@ (800ad74 <init_bmp388_sensor_driver_interface+0x148>)
 800ad0c:	f001 ff8c 	bl	800cc28 <puts>

	settings.op_mode = BMP3_MODE_NORMAL;
 800ad10:	2303      	movs	r3, #3
 800ad12:	733b      	strb	r3, [r7, #12]
	rslt = bmp3_set_op_mode(&settings, bmp388);
 800ad14:	f107 030c 	add.w	r3, r7, #12
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7fe fc79 	bl	8009612 <bmp3_set_op_mode>
 800ad20:	4603      	mov	r3, r0
 800ad22:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800ad24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <init_bmp388_sensor_driver_interface+0x10a>
	{
		printf("BMP388 sensor op mode failure !\n");
 800ad2c:	4812      	ldr	r0, [pc, #72]	@ (800ad78 <init_bmp388_sensor_driver_interface+0x14c>)
 800ad2e:	f001 ff7b 	bl	800cc28 <puts>
		Error_Handler();
 800ad32:	f7f6 fb59 	bl	80013e8 <Error_Handler>
	}

	printf("BMP388 sensor op mode failure !\n");
 800ad36:	4810      	ldr	r0, [pc, #64]	@ (800ad78 <init_bmp388_sensor_driver_interface+0x14c>)
 800ad38:	f001 ff76 	bl	800cc28 <puts>

	HAL_Delay(4000);
 800ad3c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800ad40:	f7f6 fdd4 	bl	80018ec <HAL_Delay>

	return ( BMP3_INTF_RET_SUCCESS );
 800ad44:	2300      	movs	r3, #0

}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	0800ab21 	.word	0x0800ab21
 800ad54:	0800ab65 	.word	0x0800ab65
 800ad58:	0800abb1 	.word	0x0800abb1
 800ad5c:	08010548 	.word	0x08010548
 800ad60:	08010564 	.word	0x08010564
 800ad64:	08010580 	.word	0x08010580
 800ad68:	080105a0 	.word	0x080105a0
 800ad6c:	080105c0 	.word	0x080105c0
 800ad70:	080105d0 	.word	0x080105d0
 800ad74:	080105f8 	.word	0x080105f8
 800ad78:	08010620 	.word	0x08010620

0800ad7c <get_bmp388_sensor_data>:

BMP3_INTF_RET_TYPE get_bmp388_sensor_data(struct bmp3_dev *bmp388,struct bmp3_data *bmp388_data)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( bmp388_data == NULL ) )
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <get_bmp388_sensor_data+0x16>
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <get_bmp388_sensor_data+0x1a>
	{
		Error_Handler();
 800ad92:	f7f6 fb29 	bl	80013e8 <Error_Handler>
	}

	struct bmp3_status status = { { 0 } };
 800ad96:	f107 030c 	add.w	r3, r7, #12
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	811a      	strh	r2, [r3, #8]
	int8_t rslt = 0U;
 800ada2:	2300      	movs	r3, #0
 800ada4:	75fb      	strb	r3, [r7, #23]

	rslt = bmp3_get_status(&status, bmp388);
 800ada6:	f107 030c 	add.w	r3, r7, #12
 800adaa:	6879      	ldr	r1, [r7, #4]
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fbbb 	bl	8009528 <bmp3_get_status>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]

	if ( rslt !=  BMP3_OK )
 800adb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <get_bmp388_sensor_data+0x4c>
	{
		  printf("BMP388 sensor get status failure !\n");
 800adbe:	4819      	ldr	r0, [pc, #100]	@ (800ae24 <get_bmp388_sensor_data+0xa8>)
 800adc0:	f001 ff32 	bl	800cc28 <puts>
		  Error_Handler();
 800adc4:	f7f6 fb10 	bl	80013e8 <Error_Handler>
	}

	/* Read temperature and pressure data iteratively based on data ready interrupt */
	if ( (rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE) )
 800adc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d123      	bne.n	800ae18 <get_bmp388_sensor_data+0x9c>
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d120      	bne.n	800ae18 <get_bmp388_sensor_data+0x9c>
		   * First parameter indicates the type of data to be read
		   * BMP3_PRESS_TEMP : To read pressure and temperature data
		   * BMP3_TEMP       : To read only temperature data
		   * BMP3_PRESS      : To read only pressure data
		   */
		  rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, bmp388_data , bmp388);
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	2003      	movs	r0, #3
 800addc:	f7fe fc8d 	bl	80096fa <bmp3_get_sensor_data>
 800ade0:	4603      	mov	r3, r0
 800ade2:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800ade4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <get_bmp388_sensor_data+0x7a>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800adec:	480d      	ldr	r0, [pc, #52]	@ (800ae24 <get_bmp388_sensor_data+0xa8>)
 800adee:	f001 ff1b 	bl	800cc28 <puts>
			  Error_Handler();
 800adf2:	f7f6 faf9 	bl	80013e8 <Error_Handler>
		  }

		  /* NOTE : Read status register again to clear data ready interrupt status */
		  rslt = bmp3_get_status(&status, bmp388);
 800adf6:	f107 030c 	add.w	r3, r7, #12
 800adfa:	6879      	ldr	r1, [r7, #4]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7fe fb93 	bl	8009528 <bmp3_get_status>
 800ae02:	4603      	mov	r3, r0
 800ae04:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800ae06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <get_bmp388_sensor_data+0x9c>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800ae0e:	4805      	ldr	r0, [pc, #20]	@ (800ae24 <get_bmp388_sensor_data+0xa8>)
 800ae10:	f001 ff0a 	bl	800cc28 <puts>
			  Error_Handler();
 800ae14:	f7f6 fae8 	bl	80013e8 <Error_Handler>
		  }
	}

	return ( BMP3_INTF_RET_SUCCESS );
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3718      	adds	r7, #24
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	08010640 	.word	0x08010640

0800ae28 <calibration_bmp388_sensor>:

BMP3_INTF_RET_TYPE calibration_bmp388_sensor(struct bmp3_dev *bmp388,struct bmp3_data *bmp388_data,uint32_t sample_count)
{
 800ae28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ae2c:	b08a      	sub	sp, #40	@ 0x28
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	60f8      	str	r0, [r7, #12]
 800ae32:	60b9      	str	r1, [r7, #8]
 800ae34:	607a      	str	r2, [r7, #4]
	if( ( bmp388 == NULL ) || ( bmp388_data == NULL ) || ( sample_count <= 0U) )
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d005      	beq.n	800ae48 <calibration_bmp388_sensor+0x20>
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <calibration_bmp388_sensor+0x20>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d101      	bne.n	800ae4c <calibration_bmp388_sensor+0x24>
	{
		Error_Handler();
 800ae48:	f7f6 face 	bl	80013e8 <Error_Handler>
	}

	uint32_t iter = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
	double calibration_data = 0.0f;
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	f04f 0300 	mov.w	r3, #0
 800ae58:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double LowPassFilteredData = 0.0f;
 800ae5c:	f04f 0200 	mov.w	r2, #0
 800ae60:	f04f 0300 	mov.w	r3, #0
 800ae64:	e9c7 2304 	strd	r2, r3, [r7, #16]


	while ( iter++ < sample_count )
 800ae68:	e032      	b.n	800aed0 <calibration_bmp388_sensor+0xa8>
	{
		if ( get_bmp388_sensor_data(bmp388,bmp388_data) != BMP3_OK )
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff ff85 	bl	800ad7c <get_bmp388_sensor_data>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <calibration_bmp388_sensor+0x5a>
		{
			  printf("BMP388 sensor get data failure !\n");
 800ae78:	4839      	ldr	r0, [pc, #228]	@ (800af60 <calibration_bmp388_sensor+0x138>)
 800ae7a:	f001 fed5 	bl	800cc28 <puts>
			  Error_Handler();
 800ae7e:	f7f6 fab3 	bl	80013e8 <Error_Handler>
		}

		LowPassFilteredData = LPF_BAR_ALPHA * LowPassFilteredData + (1.0f - LPF_BAR_ALPHA) * bmp388_data->pressure;
 800ae82:	a331      	add	r3, pc, #196	@ (adr r3, 800af48 <calibration_bmp388_sensor+0x120>)
 800ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ae8c:	f7f5 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4690      	mov	r8, r2
 800ae96:	4699      	mov	r9, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800ae9e:	a32c      	add	r3, pc, #176	@ (adr r3, 800af50 <calibration_bmp388_sensor+0x128>)
 800aea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea4:	f7f5 fba8 	bl	80005f8 <__aeabi_dmul>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 f9ec 	bl	800028c <__adddf3>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	e9c7 2304 	strd	r2, r3, [r7, #16]

		calibration_data += LowPassFilteredData;
 800aebc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aec0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aec4:	f7f5 f9e2 	bl	800028c <__adddf3>
 800aec8:	4602      	mov	r2, r0
 800aeca:	460b      	mov	r3, r1
 800aecc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while ( iter++ < sample_count )
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	1c5a      	adds	r2, r3, #1
 800aed4:	627a      	str	r2, [r7, #36]	@ 0x24
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d8c6      	bhi.n	800ae6a <calibration_bmp388_sensor+0x42>

	}

	calibration_data /= (double)sample_count;
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7f5 fb11 	bl	8000504 <__aeabi_ui2d>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aeea:	f7f5 fcaf 	bl	800084c <__aeabi_ddiv>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	bmp388_data->altitude[1] = - (LowPassFilteredData - calibration_data) / (DENSITY_AIR_KG_M3 * GRAVITY_AIR_KG_MPS2)/1000;
 800aef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aefa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800aefe:	f7f5 f9c3 	bl	8000288 <__aeabi_dsub>
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4614      	mov	r4, r2
 800af08:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800af0c:	a312      	add	r3, pc, #72	@ (adr r3, 800af58 <calibration_bmp388_sensor+0x130>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	4620      	mov	r0, r4
 800af14:	4629      	mov	r1, r5
 800af16:	f7f5 fc99 	bl	800084c <__aeabi_ddiv>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f04f 0200 	mov.w	r2, #0
 800af26:	4b0f      	ldr	r3, [pc, #60]	@ (800af64 <calibration_bmp388_sensor+0x13c>)
 800af28:	f7f5 fc90 	bl	800084c <__aeabi_ddiv>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	e9c1 2306 	strd	r2, r3, [r1, #24]
	return ( BMP3_INTF_RET_SUCCESS );
 800af36:	2300      	movs	r3, #0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3728      	adds	r7, #40	@ 0x28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800af42:	bf00      	nop
 800af44:	f3af 8000 	nop.w
 800af48:	40000000 	.word	0x40000000
 800af4c:	3fd33333 	.word	0x3fd33333
 800af50:	60000000 	.word	0x60000000
 800af54:	3fe66666 	.word	0x3fe66666
 800af58:	170c49c0 	.word	0x170c49c0
 800af5c:	402808d5 	.word	0x402808d5
 800af60:	08010664 	.word	0x08010664
 800af64:	408f4000 	.word	0x408f4000

0800af68 <bmp3_selftest_check>:

/*!
 * @brief       Self-test API for the BMP38X
 */
int8_t bmp3_selftest_check(struct bmp3_dev *dev)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b092      	sub	sp, #72	@ 0x48
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]

    /* Variable used to select the sensor component */
    uint8_t sensor_comp;

    /* Variable used to store the compensated data */
    struct bmp3_data data = { 0 };
 800af70:	f107 0318 	add.w	r3, r7, #24
 800af74:	2228      	movs	r2, #40	@ 0x28
 800af76:	2100      	movs	r1, #0
 800af78:	4618      	mov	r0, r3
 800af7a:	f001 ff57 	bl	800ce2c <memset>

    /* Used to select the settings user needs to change */
    uint16_t settings_sel;

    /* Reset the sensor */
    rslt = bmp3_soft_reset(dev);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7fe fafd 	bl	800957e <bmp3_soft_reset>
 800af84:	4603      	mov	r3, r0
 800af86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (rslt == BMP3_SENSOR_OK)
 800af8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d17c      	bne.n	800b08c <bmp3_selftest_check+0x124>
    {
        rslt = bmp3_init(dev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7fe f90e 	bl	80091b4 <bmp3_init>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        if (rslt == BMP3_E_COMM_FAIL || rslt == BMP3_E_DEV_NOT_FOUND)
 800af9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800afa2:	f113 0f02 	cmn.w	r3, #2
 800afa6:	d004      	beq.n	800afb2 <bmp3_selftest_check+0x4a>
 800afa8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800afac:	f113 0f07 	cmn.w	r3, #7
 800afb0:	d102      	bne.n	800afb8 <bmp3_selftest_check+0x50>
        {
            rslt = BMP3_COMMUNICATION_ERROR_OR_WRONG_DEVICE;
 800afb2:	230a      	movs	r3, #10
 800afb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }

        if (rslt == BMP3_SENSOR_OK)
 800afb8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d105      	bne.n	800afcc <bmp3_selftest_check+0x64>
        {
            rslt = validate_trimming_param(dev);
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f8b7 	bl	800b134 <validate_trimming_param>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }

        if (rslt == BMP3_SENSOR_OK)
 800afcc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d140      	bne.n	800b056 <bmp3_selftest_check+0xee>
        {
            /* Select the pressure and temperature sensor to be enabled */
        	dev_setting.press_en = BMP3_ENABLE;
 800afd4:	2301      	movs	r3, #1
 800afd6:	727b      	strb	r3, [r7, #9]
        	dev_setting.temp_en = BMP3_ENABLE;
 800afd8:	2301      	movs	r3, #1
 800afda:	72bb      	strb	r3, [r7, #10]

            /* Select the output data rate and over sampling settings for pressure and temperature */
        	dev_setting.odr_filter.press_os = BMP3_NO_OVERSAMPLING;
 800afdc:	2300      	movs	r3, #0
 800afde:	72fb      	strb	r3, [r7, #11]
        	dev_setting.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800afe0:	2300      	movs	r3, #0
 800afe2:	733b      	strb	r3, [r7, #12]
        	dev_setting.odr_filter.odr = BMP3_ODR_25_HZ;
 800afe4:	2303      	movs	r3, #3
 800afe6:	73bb      	strb	r3, [r7, #14]

            /* Assign the settings which needs to be set in the sensor */
            settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 800afe8:	23b6      	movs	r3, #182	@ 0xb6
 800afea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            rslt = bmp3_set_sensor_settings(settings_sel, &dev_setting,dev);
 800afee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800aff2:	f107 0108 	add.w	r1, r7, #8
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe fa47 	bl	800948c <bmp3_set_sensor_settings>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            if (rslt == BMP3_SENSOR_OK)
 800b004:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d124      	bne.n	800b056 <bmp3_selftest_check+0xee>
            {
            	dev_setting.op_mode = BMP3_MODE_NORMAL;
 800b00c:	2303      	movs	r3, #3
 800b00e:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	4618      	mov	r0, r3
 800b018:	f7fe fafb 	bl	8009612 <bmp3_set_op_mode>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if (rslt == BMP3_SENSOR_OK)
 800b022:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b026:	2b00      	cmp	r3, #0
 800b028:	d115      	bne.n	800b056 <bmp3_selftest_check+0xee>
                {
                    dev->delay_us(40000, dev->intf_ptr);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	6852      	ldr	r2, [r2, #4]
 800b032:	4611      	mov	r1, r2
 800b034:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800b038:	4798      	blx	r3

                    /* Sensor component selection */
                    sensor_comp = BMP3_PRESS | BMP3_TEMP;
 800b03a:	2303      	movs	r3, #3
 800b03c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                    /* Temperature and Pressure data are read and stored in the bmp3_data instance */
                    rslt = bmp3_get_sensor_data(sensor_comp, &data, dev);
 800b040:	f107 0118 	add.w	r1, r7, #24
 800b044:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fb55 	bl	80096fa <bmp3_get_sensor_data>
 800b050:	4603      	mov	r3, r0
 800b052:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                }
            }
        }

        if (rslt == BMP3_SENSOR_OK)
 800b056:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d116      	bne.n	800b08c <bmp3_selftest_check+0x124>
        {
            rslt = analyze_sensor_data(&data);
 800b05e:	f107 0318 	add.w	r3, r7, #24
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f818 	bl	800b098 <analyze_sensor_data>
 800b068:	4603      	mov	r3, r0
 800b06a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

            /* Set the power mode to sleep mode */
            if (rslt == BMP3_SENSOR_OK)
 800b06e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10a      	bne.n	800b08c <bmp3_selftest_check+0x124>
            {
            	dev_setting.op_mode = BMP3_MODE_SLEEP;
 800b076:	2300      	movs	r3, #0
 800b078:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800b07a:	f107 0308 	add.w	r3, r7, #8
 800b07e:	6879      	ldr	r1, [r7, #4]
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fac6 	bl	8009612 <bmp3_set_op_mode>
 800b086:	4603      	mov	r3, r0
 800b088:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }
        }
    }

    return rslt;
 800b08c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800b090:	4618      	mov	r0, r3
 800b092:	3748      	adds	r7, #72	@ 0x48
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <analyze_sensor_data>:

/*!
 * @brief  Function to analyze the sensor data
 */
static int8_t analyze_sensor_data(const struct bmp3_data *sens_data)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP3_SENSOR_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	73fb      	strb	r3, [r7, #15]

    if ((sens_data->temperature < BMP3_MIN_TEMPERATURE) || (sens_data->temperature > BMP3_MAX_TEMPERATURE))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0aa:	f04f 0200 	mov.w	r2, #0
 800b0ae:	f04f 0300 	mov.w	r3, #0
 800b0b2:	f7f5 fd13 	bl	8000adc <__aeabi_dcmplt>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10a      	bne.n	800b0d2 <analyze_sensor_data+0x3a>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0c2:	f04f 0200 	mov.w	r2, #0
 800b0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800b130 <analyze_sensor_data+0x98>)
 800b0c8:	f7f5 fd26 	bl	8000b18 <__aeabi_dcmpgt>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <analyze_sensor_data+0x3e>
    {
        rslt = BMP3_IMPLAUSIBLE_TEMPERATURE;
 800b0d2:	2328      	movs	r3, #40	@ 0x28
 800b0d4:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMP3_SENSOR_OK)
 800b0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d117      	bne.n	800b10e <analyze_sensor_data+0x76>
    {
        if ((sens_data->pressure < BMP3_MIN_PRESSURE) || (sens_data->pressure > BMP3_MAX_PRESSURE))
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b0e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b120 <analyze_sensor_data+0x88>)
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	f7f5 fcf7 	bl	8000adc <__aeabi_dcmplt>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10a      	bne.n	800b10a <analyze_sensor_data+0x72>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b0fa:	a30b      	add	r3, pc, #44	@ (adr r3, 800b128 <analyze_sensor_data+0x90>)
 800b0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b100:	f7f5 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <analyze_sensor_data+0x76>
        {
            rslt = BMP3_IMPLAUSIBLE_PRESSURE;
 800b10a:	2329      	movs	r3, #41	@ 0x29
 800b10c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800b10e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	00000000 	.word	0x00000000
 800b124:	40f5f900 	.word	0x40f5f900
 800b128:	00000000 	.word	0x00000000
 800b12c:	40fadb00 	.word	0x40fadb00
 800b130:	40af4000 	.word	0x40af4000

0800b134 <validate_trimming_param>:

/*
 * @brief Function to verify the trimming parameters
 * */
static int8_t validate_trimming_param(struct bmp3_dev *dev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	@ 0x28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t crc = 0xFF;
 800b13c:	23ff      	movs	r3, #255	@ 0xff
 800b13e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t stored_crc;
    uint8_t trim_param[21];
    uint8_t i;

    rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 800b142:	f107 010c 	add.w	r1, r7, #12
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2215      	movs	r2, #21
 800b14a:	2031      	movs	r0, #49	@ 0x31
 800b14c:	f7fe f879 	bl	8009242 <bmp3_get_regs>
 800b150:	4603      	mov	r3, r0
 800b152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMP3_SENSOR_OK)
 800b156:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d133      	bne.n	800b1c6 <validate_trimming_param+0x92>
    {
        for (i = 0; i < 21; i++)
 800b15e:	2300      	movs	r3, #0
 800b160:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b164:	e013      	b.n	800b18e <validate_trimming_param+0x5a>
        {
            crc = (uint8_t)cal_crc(crc, trim_param[i]);
 800b166:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b16a:	3328      	adds	r3, #40	@ 0x28
 800b16c:	443b      	add	r3, r7
 800b16e:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800b172:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b176:	4611      	mov	r1, r2
 800b178:	4618      	mov	r0, r3
 800b17a:	f000 f82a 	bl	800b1d2 <cal_crc>
 800b17e:	4603      	mov	r3, r0
 800b180:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (i = 0; i < 21; i++)
 800b184:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b188:	3301      	adds	r3, #1
 800b18a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800b18e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b192:	2b14      	cmp	r3, #20
 800b194:	d9e7      	bls.n	800b166 <validate_trimming_param+0x32>
        }

        crc = (crc ^ 0xFF);
 800b196:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b19a:	43db      	mvns	r3, r3
 800b19c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 800b1a0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	2030      	movs	r0, #48	@ 0x30
 800b1aa:	f7fe f84a 	bl	8009242 <bmp3_get_regs>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (stored_crc != crc)
 800b1b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b1b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d002      	beq.n	800b1c6 <validate_trimming_param+0x92>
        {
            rslt = BMP3_TRIMMING_DATA_OUT_OF_BOUND;
 800b1c0:	2314      	movs	r3, #20
 800b1c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 800b1c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3728      	adds	r7, #40	@ 0x28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <cal_crc>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b085      	sub	sp, #20
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	4603      	mov	r3, r0
 800b1da:	460a      	mov	r2, r1
 800b1dc:	71fb      	strb	r3, [r7, #7]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71bb      	strb	r3, [r7, #6]
    int8_t poly = 0x1D;
 800b1e2:	231d      	movs	r3, #29
 800b1e4:	737b      	strb	r3, [r7, #13]
    int8_t var2;
    uint8_t i;

    for (i = 0; i < 8; i++)
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73bb      	strb	r3, [r7, #14]
 800b1ea:	e01c      	b.n	800b226 <cal_crc+0x54>
    {
        if ((seed & 0x80) ^ (data & 0x80))
 800b1ec:	79fa      	ldrb	r2, [r7, #7]
 800b1ee:	79bb      	ldrb	r3, [r7, #6]
 800b1f0:	4053      	eors	r3, r2
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	b25b      	sxtb	r3, r3
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	da02      	bge.n	800b200 <cal_crc+0x2e>
        {
            var2 = 1;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	73fb      	strb	r3, [r7, #15]
 800b1fe:	e001      	b.n	800b204 <cal_crc+0x32>
        }
        else
        {
            var2 = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
        }

        seed = (seed & 0x7F) << 1;
 800b204:	79fb      	ldrb	r3, [r7, #7]
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	71fb      	strb	r3, [r7, #7]
        data = (data & 0x7F) << 1;
 800b20a:	79bb      	ldrb	r3, [r7, #6]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	71bb      	strb	r3, [r7, #6]
        seed = seed ^ (uint8_t)(poly * var2);
 800b210:	7b7a      	ldrb	r2, [r7, #13]
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	fb12 f303 	smulbb	r3, r2, r3
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	4053      	eors	r3, r2
 800b21e:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	3301      	adds	r3, #1
 800b224:	73bb      	strb	r3, [r7, #14]
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	2b07      	cmp	r3, #7
 800b22a:	d9df      	bls.n	800b1ec <cal_crc+0x1a>
    }

    return (int8_t)seed;
 800b22c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b230:	4618      	mov	r0, r3
 800b232:	3714      	adds	r7, #20
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b240:	2200      	movs	r2, #0
 800b242:	4912      	ldr	r1, [pc, #72]	@ (800b28c <MX_USB_DEVICE_Init+0x50>)
 800b244:	4812      	ldr	r0, [pc, #72]	@ (800b290 <MX_USB_DEVICE_Init+0x54>)
 800b246:	f7fc fcb3 	bl	8007bb0 <USBD_Init>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d001      	beq.n	800b254 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b250:	f7f6 f8ca 	bl	80013e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b254:	490f      	ldr	r1, [pc, #60]	@ (800b294 <MX_USB_DEVICE_Init+0x58>)
 800b256:	480e      	ldr	r0, [pc, #56]	@ (800b290 <MX_USB_DEVICE_Init+0x54>)
 800b258:	f7fc fcda 	bl	8007c10 <USBD_RegisterClass>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b262:	f7f6 f8c1 	bl	80013e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b266:	490c      	ldr	r1, [pc, #48]	@ (800b298 <MX_USB_DEVICE_Init+0x5c>)
 800b268:	4809      	ldr	r0, [pc, #36]	@ (800b290 <MX_USB_DEVICE_Init+0x54>)
 800b26a:	f7fc fbd1 	bl	8007a10 <USBD_CDC_RegisterInterface>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d001      	beq.n	800b278 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b274:	f7f6 f8b8 	bl	80013e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b278:	4805      	ldr	r0, [pc, #20]	@ (800b290 <MX_USB_DEVICE_Init+0x54>)
 800b27a:	f7fc fcff 	bl	8007c7c <USBD_Start>
 800b27e:	4603      	mov	r3, r0
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b284:	f7f6 f8b0 	bl	80013e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b288:	bf00      	nop
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	200000b8 	.word	0x200000b8
 800b290:	20000514 	.word	0x20000514
 800b294:	20000024 	.word	0x20000024
 800b298:	200000a4 	.word	0x200000a4

0800b29c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4905      	ldr	r1, [pc, #20]	@ (800b2b8 <CDC_Init_FS+0x1c>)
 800b2a4:	4805      	ldr	r0, [pc, #20]	@ (800b2bc <CDC_Init_FS+0x20>)
 800b2a6:	f7fc fbcd 	bl	8007a44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2aa:	4905      	ldr	r1, [pc, #20]	@ (800b2c0 <CDC_Init_FS+0x24>)
 800b2ac:	4803      	ldr	r0, [pc, #12]	@ (800b2bc <CDC_Init_FS+0x20>)
 800b2ae:	f7fc fbeb 	bl	8007a88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000ff8 	.word	0x20000ff8
 800b2bc:	20000514 	.word	0x20000514
 800b2c0:	200007f8 	.word	0x200007f8

0800b2c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	4603      	mov	r3, r0
 800b2dc:	6039      	str	r1, [r7, #0]
 800b2de:	71fb      	strb	r3, [r7, #7]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b2e4:	79fb      	ldrb	r3, [r7, #7]
 800b2e6:	2b23      	cmp	r3, #35	@ 0x23
 800b2e8:	f200 808c 	bhi.w	800b404 <CDC_Control_FS+0x130>
 800b2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f4 <CDC_Control_FS+0x20>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b405 	.word	0x0800b405
 800b2f8:	0800b405 	.word	0x0800b405
 800b2fc:	0800b405 	.word	0x0800b405
 800b300:	0800b405 	.word	0x0800b405
 800b304:	0800b405 	.word	0x0800b405
 800b308:	0800b405 	.word	0x0800b405
 800b30c:	0800b405 	.word	0x0800b405
 800b310:	0800b405 	.word	0x0800b405
 800b314:	0800b405 	.word	0x0800b405
 800b318:	0800b405 	.word	0x0800b405
 800b31c:	0800b405 	.word	0x0800b405
 800b320:	0800b405 	.word	0x0800b405
 800b324:	0800b405 	.word	0x0800b405
 800b328:	0800b405 	.word	0x0800b405
 800b32c:	0800b405 	.word	0x0800b405
 800b330:	0800b405 	.word	0x0800b405
 800b334:	0800b405 	.word	0x0800b405
 800b338:	0800b405 	.word	0x0800b405
 800b33c:	0800b405 	.word	0x0800b405
 800b340:	0800b405 	.word	0x0800b405
 800b344:	0800b405 	.word	0x0800b405
 800b348:	0800b405 	.word	0x0800b405
 800b34c:	0800b405 	.word	0x0800b405
 800b350:	0800b405 	.word	0x0800b405
 800b354:	0800b405 	.word	0x0800b405
 800b358:	0800b405 	.word	0x0800b405
 800b35c:	0800b405 	.word	0x0800b405
 800b360:	0800b405 	.word	0x0800b405
 800b364:	0800b405 	.word	0x0800b405
 800b368:	0800b405 	.word	0x0800b405
 800b36c:	0800b405 	.word	0x0800b405
 800b370:	0800b405 	.word	0x0800b405
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b3bf 	.word	0x0800b3bf
 800b37c:	0800b405 	.word	0x0800b405
 800b380:	0800b405 	.word	0x0800b405
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	4b22      	ldr	r3, [pc, #136]	@ (800b414 <CDC_Control_FS+0x140>)
 800b38a:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	785a      	ldrb	r2, [r3, #1]
 800b390:	4b20      	ldr	r3, [pc, #128]	@ (800b414 <CDC_Control_FS+0x140>)
 800b392:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	789a      	ldrb	r2, [r3, #2]
 800b398:	4b1e      	ldr	r3, [pc, #120]	@ (800b414 <CDC_Control_FS+0x140>)
 800b39a:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	78da      	ldrb	r2, [r3, #3]
 800b3a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3a2:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	791a      	ldrb	r2, [r3, #4]
 800b3a8:	4b1a      	ldr	r3, [pc, #104]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3aa:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	795a      	ldrb	r2, [r3, #5]
 800b3b0:	4b18      	ldr	r3, [pc, #96]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3b2:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	799a      	ldrb	r2, [r3, #6]
 800b3b8:	4b16      	ldr	r3, [pc, #88]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3ba:	719a      	strb	r2, [r3, #6]
    break;
 800b3bc:	e023      	b.n	800b406 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 800b3be:	4b15      	ldr	r3, [pc, #84]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	4a12      	ldr	r2, [pc, #72]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3cc:	7852      	ldrb	r2, [r2, #1]
 800b3ce:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	4a0f      	ldr	r2, [pc, #60]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3d6:	7892      	ldrb	r2, [r2, #2]
 800b3d8:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	4a0d      	ldr	r2, [pc, #52]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3e0:	78d2      	ldrb	r2, [r2, #3]
 800b3e2:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3ea:	7912      	ldrb	r2, [r2, #4]
 800b3ec:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	3305      	adds	r3, #5
 800b3f2:	4a08      	ldr	r2, [pc, #32]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3f4:	7952      	ldrb	r2, [r2, #5]
 800b3f6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	3306      	adds	r3, #6
 800b3fc:	4a05      	ldr	r2, [pc, #20]	@ (800b414 <CDC_Control_FS+0x140>)
 800b3fe:	7992      	ldrb	r2, [r2, #6]
 800b400:	701a      	strb	r2, [r3, #0]
    break;
 800b402:	e000      	b.n	800b406 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b404:	bf00      	nop
  }

  return (USBD_OK);
 800b406:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b408:	4618      	mov	r0, r3
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	200007f0 	.word	0x200007f0

0800b418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	4808      	ldr	r0, [pc, #32]	@ (800b448 <CDC_Receive_FS+0x30>)
 800b426:	f7fc fb2f 	bl	8007a88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b42a:	4807      	ldr	r0, [pc, #28]	@ (800b448 <CDC_Receive_FS+0x30>)
 800b42c:	f7fc fb8a 	bl	8007b44 <USBD_CDC_ReceivePacket>
  usb_ch = Buf[0];
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	781a      	ldrb	r2, [r3, #0]
 800b434:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <CDC_Receive_FS+0x34>)
 800b436:	701a      	strb	r2, [r3, #0]
  flag=1;
 800b438:	4b05      	ldr	r3, [pc, #20]	@ (800b450 <CDC_Receive_FS+0x38>)
 800b43a:	2201      	movs	r2, #1
 800b43c:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800b43e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000514 	.word	0x20000514
 800b44c:	20000500 	.word	0x20000500
 800b450:	20000504 	.word	0x20000504

0800b454 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b464:	4b0d      	ldr	r3, [pc, #52]	@ (800b49c <CDC_Transmit_FS+0x48>)
 800b466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b46a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b476:	2301      	movs	r3, #1
 800b478:	e00b      	b.n	800b492 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b47a:	887b      	ldrh	r3, [r7, #2]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	4806      	ldr	r0, [pc, #24]	@ (800b49c <CDC_Transmit_FS+0x48>)
 800b482:	f7fc fadf 	bl	8007a44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <CDC_Transmit_FS+0x48>)
 800b488:	f7fc fb1c 	bl	8007ac4 <USBD_CDC_TransmitPacket>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b490:	7bfb      	ldrb	r3, [r7, #15]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000514 	.word	0x20000514

0800b4a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2212      	movs	r2, #18
 800b4d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4d6:	4b03      	ldr	r3, [pc, #12]	@ (800b4e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	200000d4 	.word	0x200000d4

0800b4e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b083      	sub	sp, #12
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2204      	movs	r2, #4
 800b4f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4fa:	4b03      	ldr	r3, [pc, #12]	@ (800b508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	200000e8 	.word	0x200000e8

0800b50c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d105      	bne.n	800b52a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	4907      	ldr	r1, [pc, #28]	@ (800b540 <USBD_FS_ProductStrDescriptor+0x34>)
 800b522:	4808      	ldr	r0, [pc, #32]	@ (800b544 <USBD_FS_ProductStrDescriptor+0x38>)
 800b524:	f7fd fd5a 	bl	8008fdc <USBD_GetString>
 800b528:	e004      	b.n	800b534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4904      	ldr	r1, [pc, #16]	@ (800b540 <USBD_FS_ProductStrDescriptor+0x34>)
 800b52e:	4805      	ldr	r0, [pc, #20]	@ (800b544 <USBD_FS_ProductStrDescriptor+0x38>)
 800b530:	f7fd fd54 	bl	8008fdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b534:	4b02      	ldr	r3, [pc, #8]	@ (800b540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	200017f8 	.word	0x200017f8
 800b544:	08010688 	.word	0x08010688

0800b548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	4904      	ldr	r1, [pc, #16]	@ (800b568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b558:	4804      	ldr	r0, [pc, #16]	@ (800b56c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b55a:	f7fd fd3f 	bl	8008fdc <USBD_GetString>
  return USBD_StrDesc;
 800b55e:	4b02      	ldr	r3, [pc, #8]	@ (800b568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	200017f8 	.word	0x200017f8
 800b56c:	08010690 	.word	0x08010690

0800b570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	6039      	str	r1, [r7, #0]
 800b57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	221a      	movs	r2, #26
 800b580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b582:	f000 f843 	bl	800b60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b586:	4b02      	ldr	r3, [pc, #8]	@ (800b590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	200000ec 	.word	0x200000ec

0800b594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	4603      	mov	r3, r0
 800b59c:	6039      	str	r1, [r7, #0]
 800b59e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d105      	bne.n	800b5b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	4907      	ldr	r1, [pc, #28]	@ (800b5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5aa:	4808      	ldr	r0, [pc, #32]	@ (800b5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5ac:	f7fd fd16 	bl	8008fdc <USBD_GetString>
 800b5b0:	e004      	b.n	800b5bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	4904      	ldr	r1, [pc, #16]	@ (800b5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b5b6:	4805      	ldr	r0, [pc, #20]	@ (800b5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b5b8:	f7fd fd10 	bl	8008fdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5bc:	4b02      	ldr	r3, [pc, #8]	@ (800b5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200017f8 	.word	0x200017f8
 800b5cc:	080106a4 	.word	0x080106a4

0800b5d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	6039      	str	r1, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5dc:	79fb      	ldrb	r3, [r7, #7]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d105      	bne.n	800b5ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	4907      	ldr	r1, [pc, #28]	@ (800b604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5e6:	4808      	ldr	r0, [pc, #32]	@ (800b608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5e8:	f7fd fcf8 	bl	8008fdc <USBD_GetString>
 800b5ec:	e004      	b.n	800b5f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	4904      	ldr	r1, [pc, #16]	@ (800b604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5f2:	4805      	ldr	r0, [pc, #20]	@ (800b608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5f4:	f7fd fcf2 	bl	8008fdc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5f8:	4b02      	ldr	r3, [pc, #8]	@ (800b604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	200017f8 	.word	0x200017f8
 800b608:	080106b0 	.word	0x080106b0

0800b60c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b612:	4b0f      	ldr	r3, [pc, #60]	@ (800b650 <Get_SerialNum+0x44>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b618:	4b0e      	ldr	r3, [pc, #56]	@ (800b654 <Get_SerialNum+0x48>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b61e:	4b0e      	ldr	r3, [pc, #56]	@ (800b658 <Get_SerialNum+0x4c>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d009      	beq.n	800b646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b632:	2208      	movs	r2, #8
 800b634:	4909      	ldr	r1, [pc, #36]	@ (800b65c <Get_SerialNum+0x50>)
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 f814 	bl	800b664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b63c:	2204      	movs	r2, #4
 800b63e:	4908      	ldr	r1, [pc, #32]	@ (800b660 <Get_SerialNum+0x54>)
 800b640:	68b8      	ldr	r0, [r7, #8]
 800b642:	f000 f80f 	bl	800b664 <IntToUnicode>
  }
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	1fff7a10 	.word	0x1fff7a10
 800b654:	1fff7a14 	.word	0x1fff7a14
 800b658:	1fff7a18 	.word	0x1fff7a18
 800b65c:	200000ee 	.word	0x200000ee
 800b660:	200000fe 	.word	0x200000fe

0800b664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b664:	b480      	push	{r7}
 800b666:	b087      	sub	sp, #28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b676:	2300      	movs	r3, #0
 800b678:	75fb      	strb	r3, [r7, #23]
 800b67a:	e027      	b.n	800b6cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	0f1b      	lsrs	r3, r3, #28
 800b680:	2b09      	cmp	r3, #9
 800b682:	d80b      	bhi.n	800b69c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	0f1b      	lsrs	r3, r3, #28
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	7dfb      	ldrb	r3, [r7, #23]
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	4619      	mov	r1, r3
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	440b      	add	r3, r1
 800b694:	3230      	adds	r2, #48	@ 0x30
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	e00a      	b.n	800b6b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	0f1b      	lsrs	r3, r3, #28
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	7dfb      	ldrb	r3, [r7, #23]
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3237      	adds	r2, #55	@ 0x37
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	011b      	lsls	r3, r3, #4
 800b6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	005b      	lsls	r3, r3, #1
 800b6bc:	3301      	adds	r3, #1
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	75fb      	strb	r3, [r7, #23]
 800b6cc:	7dfa      	ldrb	r2, [r7, #23]
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d3d3      	bcc.n	800b67c <IntToUnicode+0x18>
  }
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop
 800b6d8:	371c      	adds	r7, #28
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08a      	sub	sp, #40	@ 0x28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6ec:	f107 0314 	add.w	r3, r7, #20
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
 800b6f4:	605a      	str	r2, [r3, #4]
 800b6f6:	609a      	str	r2, [r3, #8]
 800b6f8:	60da      	str	r2, [r3, #12]
 800b6fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b704:	d13a      	bne.n	800b77c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b706:	2300      	movs	r3, #0
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	4b1e      	ldr	r3, [pc, #120]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70e:	4a1d      	ldr	r2, [pc, #116]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b710:	f043 0301 	orr.w	r3, r3, #1
 800b714:	6313      	str	r3, [r2, #48]	@ 0x30
 800b716:	4b1b      	ldr	r3, [pc, #108]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b71a:	f003 0301 	and.w	r3, r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
 800b720:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b722:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b728:	2302      	movs	r3, #2
 800b72a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b72c:	2300      	movs	r3, #0
 800b72e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b730:	2303      	movs	r3, #3
 800b732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b734:	230a      	movs	r3, #10
 800b736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b738:	f107 0314 	add.w	r3, r7, #20
 800b73c:	4619      	mov	r1, r3
 800b73e:	4812      	ldr	r0, [pc, #72]	@ (800b788 <HAL_PCD_MspInit+0xa4>)
 800b740:	f7f6 fa0a 	bl	8001b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b744:	4b0f      	ldr	r3, [pc, #60]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b748:	4a0e      	ldr	r2, [pc, #56]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b74e:	6353      	str	r3, [r2, #52]	@ 0x34
 800b750:	2300      	movs	r3, #0
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	4b0b      	ldr	r3, [pc, #44]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b758:	4a0a      	ldr	r2, [pc, #40]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b75a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b75e:	6453      	str	r3, [r2, #68]	@ 0x44
 800b760:	4b08      	ldr	r3, [pc, #32]	@ (800b784 <HAL_PCD_MspInit+0xa0>)
 800b762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b768:	60fb      	str	r3, [r7, #12]
 800b76a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b76c:	2200      	movs	r2, #0
 800b76e:	2100      	movs	r1, #0
 800b770:	2043      	movs	r0, #67	@ 0x43
 800b772:	f7f6 f9ba 	bl	8001aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b776:	2043      	movs	r0, #67	@ 0x43
 800b778:	f7f6 f9d3 	bl	8001b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b77c:	bf00      	nop
 800b77e:	3728      	adds	r7, #40	@ 0x28
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	40023800 	.word	0x40023800
 800b788:	40020000 	.word	0x40020000

0800b78c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	f7fc fab7 	bl	8007d16 <USBD_LL_SetupStage>
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	6879      	ldr	r1, [r7, #4]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	00db      	lsls	r3, r3, #3
 800b7ca:	4413      	add	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	440b      	add	r3, r1
 800b7d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	f7fc faf1 	bl	8007dc0 <USBD_LL_DataOutStage>
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b7f8:	78fa      	ldrb	r2, [r7, #3]
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	4413      	add	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	440b      	add	r3, r1
 800b806:	3320      	adds	r3, #32
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	78fb      	ldrb	r3, [r7, #3]
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7fc fb8a 	bl	8007f26 <USBD_LL_DataInStage>
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b082      	sub	sp, #8
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b828:	4618      	mov	r0, r3
 800b82a:	f7fc fcc4 	bl	80081b6 <USBD_LL_SOF>
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b83e:	2301      	movs	r3, #1
 800b840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	79db      	ldrb	r3, [r3, #7]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
 800b84e:	e008      	b.n	800b862 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	79db      	ldrb	r3, [r3, #7]
 800b854:	2b02      	cmp	r3, #2
 800b856:	d102      	bne.n	800b85e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b858:	2301      	movs	r3, #1
 800b85a:	73fb      	strb	r3, [r7, #15]
 800b85c:	e001      	b.n	800b862 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b85e:	f7f5 fdc3 	bl	80013e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b868:	7bfa      	ldrb	r2, [r7, #15]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fc fc5e 	bl	800812e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fc fc06 	bl	800808a <USBD_LL_Reset>
}
 800b87e:	bf00      	nop
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
	...

0800b888 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b896:	4618      	mov	r0, r3
 800b898:	f7fc fc59 	bl	800814e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	7adb      	ldrb	r3, [r3, #11]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d005      	beq.n	800b8c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8bc:	4b04      	ldr	r3, [pc, #16]	@ (800b8d0 <HAL_PCD_SuspendCallback+0x48>)
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	4a03      	ldr	r2, [pc, #12]	@ (800b8d0 <HAL_PCD_SuspendCallback+0x48>)
 800b8c2:	f043 0306 	orr.w	r3, r3, #6
 800b8c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b8c8:	bf00      	nop
 800b8ca:	3708      	adds	r7, #8
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	e000ed00 	.word	0xe000ed00

0800b8d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fc fc4f 	bl	8008186 <USBD_LL_Resume>
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7fc fca7 	bl	800825a <USBD_LL_IsoOUTIncomplete>
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b926:	78fa      	ldrb	r2, [r7, #3]
 800b928:	4611      	mov	r1, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7fc fc63 	bl	80081f6 <USBD_LL_IsoINIncomplete>
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b946:	4618      	mov	r0, r3
 800b948:	f7fc fcb9 	bl	80082be <USBD_LL_DevConnected>
}
 800b94c:	bf00      	nop
 800b94e:	3708      	adds	r7, #8
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b962:	4618      	mov	r0, r3
 800b964:	f7fc fcb6 	bl	80082d4 <USBD_LL_DevDisconnected>
}
 800b968:	bf00      	nop
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d13c      	bne.n	800b9fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b980:	4a20      	ldr	r2, [pc, #128]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b98c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b990:	4b1c      	ldr	r3, [pc, #112]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b992:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b998:	4b1a      	ldr	r3, [pc, #104]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b99a:	2204      	movs	r2, #4
 800b99c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b99e:	4b19      	ldr	r3, [pc, #100]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9a4:	4b17      	ldr	r3, [pc, #92]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b9aa:	4b16      	ldr	r3, [pc, #88]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9ac:	2202      	movs	r2, #2
 800b9ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9b0:	4b14      	ldr	r3, [pc, #80]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b9b6:	4b13      	ldr	r3, [pc, #76]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b9bc:	4b11      	ldr	r3, [pc, #68]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b9c2:	4b10      	ldr	r3, [pc, #64]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b9ce:	480d      	ldr	r0, [pc, #52]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9d0:	f7f7 fa9c 	bl	8002f0c <HAL_PCD_Init>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b9da:	f7f5 fd05 	bl	80013e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b9de:	2180      	movs	r1, #128	@ 0x80
 800b9e0:	4808      	ldr	r0, [pc, #32]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9e2:	f7f8 fcc8 	bl	8004376 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b9e6:	2240      	movs	r2, #64	@ 0x40
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4806      	ldr	r0, [pc, #24]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9ec:	f7f8 fc7c 	bl	80042e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b9f0:	2280      	movs	r2, #128	@ 0x80
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	4803      	ldr	r0, [pc, #12]	@ (800ba04 <USBD_LL_Init+0x94>)
 800b9f6:	f7f8 fc77 	bl	80042e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	200019f8 	.word	0x200019f8

0800ba08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f7 fb83 	bl	800312a <HAL_PCD_Start>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 f942 	bl	800bcb4 <USBD_Get_USB_Status>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3710      	adds	r7, #16
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b084      	sub	sp, #16
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	70fb      	strb	r3, [r7, #3]
 800ba50:	460b      	mov	r3, r1
 800ba52:	70bb      	strb	r3, [r7, #2]
 800ba54:	4613      	mov	r3, r2
 800ba56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ba66:	78bb      	ldrb	r3, [r7, #2]
 800ba68:	883a      	ldrh	r2, [r7, #0]
 800ba6a:	78f9      	ldrb	r1, [r7, #3]
 800ba6c:	f7f8 f857 	bl	8003b1e <HAL_PCD_EP_Open>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 f91c 	bl	800bcb4 <USBD_Get_USB_Status>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f8 f8a2 	bl	8003bf2 <HAL_PCD_EP_Close>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f8fd 	bl	800bcb4 <USBD_Get_USB_Status>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800babe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bae2:	78fa      	ldrb	r2, [r7, #3]
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f8 f95a 	bl	8003da0 <HAL_PCD_EP_SetStall>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f8de 	bl	800bcb4 <USBD_Get_USB_Status>
 800baf8:	4603      	mov	r3, r0
 800bafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb20:	78fa      	ldrb	r2, [r7, #3]
 800bb22:	4611      	mov	r1, r2
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7f8 f99e 	bl	8003e66 <HAL_PCD_EP_ClrStall>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f8bf 	bl	800bcb4 <USBD_Get_USB_Status>
 800bb36:	4603      	mov	r3, r0
 800bb38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	da0b      	bge.n	800bb78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb66:	68f9      	ldr	r1, [r7, #12]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	440b      	add	r3, r1
 800bb72:	3316      	adds	r3, #22
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	e00b      	b.n	800bb90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb78:	78fb      	ldrb	r3, [r7, #3]
 800bb7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb7e:	68f9      	ldr	r1, [r7, #12]
 800bb80:	4613      	mov	r3, r2
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	4413      	add	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	440b      	add	r3, r1
 800bb8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bb8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbb6:	78fa      	ldrb	r2, [r7, #3]
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f7 ff8b 	bl	8003ad6 <HAL_PCD_SetAddress>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f874 	bl	800bcb4 <USBD_Get_USB_Status>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b086      	sub	sp, #24
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	60f8      	str	r0, [r7, #12]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbea:	2300      	movs	r3, #0
 800bbec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbf8:	7af9      	ldrb	r1, [r7, #11]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	f7f8 f895 	bl	8003d2c <HAL_PCD_EP_Transmit>
 800bc02:	4603      	mov	r3, r0
 800bc04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f000 f853 	bl	800bcb4 <USBD_Get_USB_Status>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc12:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b086      	sub	sp, #24
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	607a      	str	r2, [r7, #4]
 800bc26:	603b      	str	r3, [r7, #0]
 800bc28:	460b      	mov	r3, r1
 800bc2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc3a:	7af9      	ldrb	r1, [r7, #11]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	f7f8 f821 	bl	8003c86 <HAL_PCD_EP_Receive>
 800bc44:	4603      	mov	r3, r0
 800bc46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc48:	7dfb      	ldrb	r3, [r7, #23]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 f832 	bl	800bcb4 <USBD_Get_USB_Status>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc54:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3718      	adds	r7, #24
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	4611      	mov	r1, r2
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7f8 f841 	bl	8003cfc <HAL_PCD_EP_GetRxCount>
 800bc7a:	4603      	mov	r3, r0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc8c:	4b03      	ldr	r3, [pc, #12]	@ (800bc9c <USBD_static_malloc+0x18>)
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	20001edc 	.word	0x20001edc

0800bca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]

}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d817      	bhi.n	800bcf8 <USBD_Get_USB_Status+0x44>
 800bcc8:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd0 <USBD_Get_USB_Status+0x1c>)
 800bcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcce:	bf00      	nop
 800bcd0:	0800bce1 	.word	0x0800bce1
 800bcd4:	0800bce7 	.word	0x0800bce7
 800bcd8:	0800bced 	.word	0x0800bced
 800bcdc:	0800bcf3 	.word	0x0800bcf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73fb      	strb	r3, [r7, #15]
    break;
 800bce4:	e00b      	b.n	800bcfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bce6:	2303      	movs	r3, #3
 800bce8:	73fb      	strb	r3, [r7, #15]
    break;
 800bcea:	e008      	b.n	800bcfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcec:	2301      	movs	r3, #1
 800bcee:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf0:	e005      	b.n	800bcfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcf2:	2303      	movs	r3, #3
 800bcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf6:	e002      	b.n	800bcfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfc:	bf00      	nop
  }
  return usb_status;
 800bcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <__cvt>:
 800bd0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd10:	ec57 6b10 	vmov	r6, r7, d0
 800bd14:	2f00      	cmp	r7, #0
 800bd16:	460c      	mov	r4, r1
 800bd18:	4619      	mov	r1, r3
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	bfbb      	ittet	lt
 800bd1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bd22:	461f      	movlt	r7, r3
 800bd24:	2300      	movge	r3, #0
 800bd26:	232d      	movlt	r3, #45	@ 0x2d
 800bd28:	700b      	strb	r3, [r1, #0]
 800bd2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bd30:	4691      	mov	r9, r2
 800bd32:	f023 0820 	bic.w	r8, r3, #32
 800bd36:	bfbc      	itt	lt
 800bd38:	4632      	movlt	r2, r6
 800bd3a:	4616      	movlt	r6, r2
 800bd3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd40:	d005      	beq.n	800bd4e <__cvt+0x42>
 800bd42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bd46:	d100      	bne.n	800bd4a <__cvt+0x3e>
 800bd48:	3401      	adds	r4, #1
 800bd4a:	2102      	movs	r1, #2
 800bd4c:	e000      	b.n	800bd50 <__cvt+0x44>
 800bd4e:	2103      	movs	r1, #3
 800bd50:	ab03      	add	r3, sp, #12
 800bd52:	9301      	str	r3, [sp, #4]
 800bd54:	ab02      	add	r3, sp, #8
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	ec47 6b10 	vmov	d0, r6, r7
 800bd5c:	4653      	mov	r3, sl
 800bd5e:	4622      	mov	r2, r4
 800bd60:	f001 f982 	bl	800d068 <_dtoa_r>
 800bd64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bd68:	4605      	mov	r5, r0
 800bd6a:	d119      	bne.n	800bda0 <__cvt+0x94>
 800bd6c:	f019 0f01 	tst.w	r9, #1
 800bd70:	d00e      	beq.n	800bd90 <__cvt+0x84>
 800bd72:	eb00 0904 	add.w	r9, r0, r4
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd82:	b108      	cbz	r0, 800bd88 <__cvt+0x7c>
 800bd84:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd88:	2230      	movs	r2, #48	@ 0x30
 800bd8a:	9b03      	ldr	r3, [sp, #12]
 800bd8c:	454b      	cmp	r3, r9
 800bd8e:	d31e      	bcc.n	800bdce <__cvt+0xc2>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd94:	1b5b      	subs	r3, r3, r5
 800bd96:	4628      	mov	r0, r5
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	b004      	add	sp, #16
 800bd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bda4:	eb00 0904 	add.w	r9, r0, r4
 800bda8:	d1e5      	bne.n	800bd76 <__cvt+0x6a>
 800bdaa:	7803      	ldrb	r3, [r0, #0]
 800bdac:	2b30      	cmp	r3, #48	@ 0x30
 800bdae:	d10a      	bne.n	800bdc6 <__cvt+0xba>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	f7f4 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdbc:	b918      	cbnz	r0, 800bdc6 <__cvt+0xba>
 800bdbe:	f1c4 0401 	rsb	r4, r4, #1
 800bdc2:	f8ca 4000 	str.w	r4, [sl]
 800bdc6:	f8da 3000 	ldr.w	r3, [sl]
 800bdca:	4499      	add	r9, r3
 800bdcc:	e7d3      	b.n	800bd76 <__cvt+0x6a>
 800bdce:	1c59      	adds	r1, r3, #1
 800bdd0:	9103      	str	r1, [sp, #12]
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	e7d9      	b.n	800bd8a <__cvt+0x7e>

0800bdd6 <__exponent>:
 800bdd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	bfba      	itte	lt
 800bddc:	4249      	neglt	r1, r1
 800bdde:	232d      	movlt	r3, #45	@ 0x2d
 800bde0:	232b      	movge	r3, #43	@ 0x2b
 800bde2:	2909      	cmp	r1, #9
 800bde4:	7002      	strb	r2, [r0, #0]
 800bde6:	7043      	strb	r3, [r0, #1]
 800bde8:	dd29      	ble.n	800be3e <__exponent+0x68>
 800bdea:	f10d 0307 	add.w	r3, sp, #7
 800bdee:	461d      	mov	r5, r3
 800bdf0:	270a      	movs	r7, #10
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	fbb1 f6f7 	udiv	r6, r1, r7
 800bdf8:	fb07 1416 	mls	r4, r7, r6, r1
 800bdfc:	3430      	adds	r4, #48	@ 0x30
 800bdfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800be02:	460c      	mov	r4, r1
 800be04:	2c63      	cmp	r4, #99	@ 0x63
 800be06:	f103 33ff 	add.w	r3, r3, #4294967295
 800be0a:	4631      	mov	r1, r6
 800be0c:	dcf1      	bgt.n	800bdf2 <__exponent+0x1c>
 800be0e:	3130      	adds	r1, #48	@ 0x30
 800be10:	1e94      	subs	r4, r2, #2
 800be12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800be16:	1c41      	adds	r1, r0, #1
 800be18:	4623      	mov	r3, r4
 800be1a:	42ab      	cmp	r3, r5
 800be1c:	d30a      	bcc.n	800be34 <__exponent+0x5e>
 800be1e:	f10d 0309 	add.w	r3, sp, #9
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	42ac      	cmp	r4, r5
 800be26:	bf88      	it	hi
 800be28:	2300      	movhi	r3, #0
 800be2a:	3302      	adds	r3, #2
 800be2c:	4403      	add	r3, r0
 800be2e:	1a18      	subs	r0, r3, r0
 800be30:	b003      	add	sp, #12
 800be32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800be38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800be3c:	e7ed      	b.n	800be1a <__exponent+0x44>
 800be3e:	2330      	movs	r3, #48	@ 0x30
 800be40:	3130      	adds	r1, #48	@ 0x30
 800be42:	7083      	strb	r3, [r0, #2]
 800be44:	70c1      	strb	r1, [r0, #3]
 800be46:	1d03      	adds	r3, r0, #4
 800be48:	e7f1      	b.n	800be2e <__exponent+0x58>
	...

0800be4c <_printf_float>:
 800be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	b08d      	sub	sp, #52	@ 0x34
 800be52:	460c      	mov	r4, r1
 800be54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800be58:	4616      	mov	r6, r2
 800be5a:	461f      	mov	r7, r3
 800be5c:	4605      	mov	r5, r0
 800be5e:	f000 ffed 	bl	800ce3c <_localeconv_r>
 800be62:	6803      	ldr	r3, [r0, #0]
 800be64:	9304      	str	r3, [sp, #16]
 800be66:	4618      	mov	r0, r3
 800be68:	f7f4 fa02 	bl	8000270 <strlen>
 800be6c:	2300      	movs	r3, #0
 800be6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800be70:	f8d8 3000 	ldr.w	r3, [r8]
 800be74:	9005      	str	r0, [sp, #20]
 800be76:	3307      	adds	r3, #7
 800be78:	f023 0307 	bic.w	r3, r3, #7
 800be7c:	f103 0208 	add.w	r2, r3, #8
 800be80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800be84:	f8d4 b000 	ldr.w	fp, [r4]
 800be88:	f8c8 2000 	str.w	r2, [r8]
 800be8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800be94:	9307      	str	r3, [sp, #28]
 800be96:	f8cd 8018 	str.w	r8, [sp, #24]
 800be9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800be9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bea2:	4b9c      	ldr	r3, [pc, #624]	@ (800c114 <_printf_float+0x2c8>)
 800bea4:	f04f 32ff 	mov.w	r2, #4294967295
 800bea8:	f7f4 fe40 	bl	8000b2c <__aeabi_dcmpun>
 800beac:	bb70      	cbnz	r0, 800bf0c <_printf_float+0xc0>
 800beae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beb2:	4b98      	ldr	r3, [pc, #608]	@ (800c114 <_printf_float+0x2c8>)
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	f7f4 fe1a 	bl	8000af0 <__aeabi_dcmple>
 800bebc:	bb30      	cbnz	r0, 800bf0c <_printf_float+0xc0>
 800bebe:	2200      	movs	r2, #0
 800bec0:	2300      	movs	r3, #0
 800bec2:	4640      	mov	r0, r8
 800bec4:	4649      	mov	r1, r9
 800bec6:	f7f4 fe09 	bl	8000adc <__aeabi_dcmplt>
 800beca:	b110      	cbz	r0, 800bed2 <_printf_float+0x86>
 800becc:	232d      	movs	r3, #45	@ 0x2d
 800bece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bed2:	4a91      	ldr	r2, [pc, #580]	@ (800c118 <_printf_float+0x2cc>)
 800bed4:	4b91      	ldr	r3, [pc, #580]	@ (800c11c <_printf_float+0x2d0>)
 800bed6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800beda:	bf8c      	ite	hi
 800bedc:	4690      	movhi	r8, r2
 800bede:	4698      	movls	r8, r3
 800bee0:	2303      	movs	r3, #3
 800bee2:	6123      	str	r3, [r4, #16]
 800bee4:	f02b 0304 	bic.w	r3, fp, #4
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	f04f 0900 	mov.w	r9, #0
 800beee:	9700      	str	r7, [sp, #0]
 800bef0:	4633      	mov	r3, r6
 800bef2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bef4:	4621      	mov	r1, r4
 800bef6:	4628      	mov	r0, r5
 800bef8:	f000 f9d2 	bl	800c2a0 <_printf_common>
 800befc:	3001      	adds	r0, #1
 800befe:	f040 808d 	bne.w	800c01c <_printf_float+0x1d0>
 800bf02:	f04f 30ff 	mov.w	r0, #4294967295
 800bf06:	b00d      	add	sp, #52	@ 0x34
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0c:	4642      	mov	r2, r8
 800bf0e:	464b      	mov	r3, r9
 800bf10:	4640      	mov	r0, r8
 800bf12:	4649      	mov	r1, r9
 800bf14:	f7f4 fe0a 	bl	8000b2c <__aeabi_dcmpun>
 800bf18:	b140      	cbz	r0, 800bf2c <_printf_float+0xe0>
 800bf1a:	464b      	mov	r3, r9
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	bfbc      	itt	lt
 800bf20:	232d      	movlt	r3, #45	@ 0x2d
 800bf22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bf26:	4a7e      	ldr	r2, [pc, #504]	@ (800c120 <_printf_float+0x2d4>)
 800bf28:	4b7e      	ldr	r3, [pc, #504]	@ (800c124 <_printf_float+0x2d8>)
 800bf2a:	e7d4      	b.n	800bed6 <_printf_float+0x8a>
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bf32:	9206      	str	r2, [sp, #24]
 800bf34:	1c5a      	adds	r2, r3, #1
 800bf36:	d13b      	bne.n	800bfb0 <_printf_float+0x164>
 800bf38:	2306      	movs	r3, #6
 800bf3a:	6063      	str	r3, [r4, #4]
 800bf3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bf40:	2300      	movs	r3, #0
 800bf42:	6022      	str	r2, [r4, #0]
 800bf44:	9303      	str	r3, [sp, #12]
 800bf46:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bf4c:	ab09      	add	r3, sp, #36	@ 0x24
 800bf4e:	9300      	str	r3, [sp, #0]
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	ec49 8b10 	vmov	d0, r8, r9
 800bf56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f7ff fed6 	bl	800bd0c <__cvt>
 800bf60:	9b06      	ldr	r3, [sp, #24]
 800bf62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bf64:	2b47      	cmp	r3, #71	@ 0x47
 800bf66:	4680      	mov	r8, r0
 800bf68:	d129      	bne.n	800bfbe <_printf_float+0x172>
 800bf6a:	1cc8      	adds	r0, r1, #3
 800bf6c:	db02      	blt.n	800bf74 <_printf_float+0x128>
 800bf6e:	6863      	ldr	r3, [r4, #4]
 800bf70:	4299      	cmp	r1, r3
 800bf72:	dd41      	ble.n	800bff8 <_printf_float+0x1ac>
 800bf74:	f1aa 0a02 	sub.w	sl, sl, #2
 800bf78:	fa5f fa8a 	uxtb.w	sl, sl
 800bf7c:	3901      	subs	r1, #1
 800bf7e:	4652      	mov	r2, sl
 800bf80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bf84:	9109      	str	r1, [sp, #36]	@ 0x24
 800bf86:	f7ff ff26 	bl	800bdd6 <__exponent>
 800bf8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf8c:	1813      	adds	r3, r2, r0
 800bf8e:	2a01      	cmp	r2, #1
 800bf90:	4681      	mov	r9, r0
 800bf92:	6123      	str	r3, [r4, #16]
 800bf94:	dc02      	bgt.n	800bf9c <_printf_float+0x150>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	07d2      	lsls	r2, r2, #31
 800bf9a:	d501      	bpl.n	800bfa0 <_printf_float+0x154>
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	6123      	str	r3, [r4, #16]
 800bfa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0a2      	beq.n	800beee <_printf_float+0xa2>
 800bfa8:	232d      	movs	r3, #45	@ 0x2d
 800bfaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bfae:	e79e      	b.n	800beee <_printf_float+0xa2>
 800bfb0:	9a06      	ldr	r2, [sp, #24]
 800bfb2:	2a47      	cmp	r2, #71	@ 0x47
 800bfb4:	d1c2      	bne.n	800bf3c <_printf_float+0xf0>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1c0      	bne.n	800bf3c <_printf_float+0xf0>
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e7bd      	b.n	800bf3a <_printf_float+0xee>
 800bfbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bfc2:	d9db      	bls.n	800bf7c <_printf_float+0x130>
 800bfc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bfc8:	d118      	bne.n	800bffc <_printf_float+0x1b0>
 800bfca:	2900      	cmp	r1, #0
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	dd0b      	ble.n	800bfe8 <_printf_float+0x19c>
 800bfd0:	6121      	str	r1, [r4, #16]
 800bfd2:	b913      	cbnz	r3, 800bfda <_printf_float+0x18e>
 800bfd4:	6822      	ldr	r2, [r4, #0]
 800bfd6:	07d0      	lsls	r0, r2, #31
 800bfd8:	d502      	bpl.n	800bfe0 <_printf_float+0x194>
 800bfda:	3301      	adds	r3, #1
 800bfdc:	440b      	add	r3, r1
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bfe2:	f04f 0900 	mov.w	r9, #0
 800bfe6:	e7db      	b.n	800bfa0 <_printf_float+0x154>
 800bfe8:	b913      	cbnz	r3, 800bff0 <_printf_float+0x1a4>
 800bfea:	6822      	ldr	r2, [r4, #0]
 800bfec:	07d2      	lsls	r2, r2, #31
 800bfee:	d501      	bpl.n	800bff4 <_printf_float+0x1a8>
 800bff0:	3302      	adds	r3, #2
 800bff2:	e7f4      	b.n	800bfde <_printf_float+0x192>
 800bff4:	2301      	movs	r3, #1
 800bff6:	e7f2      	b.n	800bfde <_printf_float+0x192>
 800bff8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bffe:	4299      	cmp	r1, r3
 800c000:	db05      	blt.n	800c00e <_printf_float+0x1c2>
 800c002:	6823      	ldr	r3, [r4, #0]
 800c004:	6121      	str	r1, [r4, #16]
 800c006:	07d8      	lsls	r0, r3, #31
 800c008:	d5ea      	bpl.n	800bfe0 <_printf_float+0x194>
 800c00a:	1c4b      	adds	r3, r1, #1
 800c00c:	e7e7      	b.n	800bfde <_printf_float+0x192>
 800c00e:	2900      	cmp	r1, #0
 800c010:	bfd4      	ite	le
 800c012:	f1c1 0202 	rsble	r2, r1, #2
 800c016:	2201      	movgt	r2, #1
 800c018:	4413      	add	r3, r2
 800c01a:	e7e0      	b.n	800bfde <_printf_float+0x192>
 800c01c:	6823      	ldr	r3, [r4, #0]
 800c01e:	055a      	lsls	r2, r3, #21
 800c020:	d407      	bmi.n	800c032 <_printf_float+0x1e6>
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	4642      	mov	r2, r8
 800c026:	4631      	mov	r1, r6
 800c028:	4628      	mov	r0, r5
 800c02a:	47b8      	blx	r7
 800c02c:	3001      	adds	r0, #1
 800c02e:	d12b      	bne.n	800c088 <_printf_float+0x23c>
 800c030:	e767      	b.n	800bf02 <_printf_float+0xb6>
 800c032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c036:	f240 80dd 	bls.w	800c1f4 <_printf_float+0x3a8>
 800c03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c03e:	2200      	movs	r2, #0
 800c040:	2300      	movs	r3, #0
 800c042:	f7f4 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 800c046:	2800      	cmp	r0, #0
 800c048:	d033      	beq.n	800c0b2 <_printf_float+0x266>
 800c04a:	4a37      	ldr	r2, [pc, #220]	@ (800c128 <_printf_float+0x2dc>)
 800c04c:	2301      	movs	r3, #1
 800c04e:	4631      	mov	r1, r6
 800c050:	4628      	mov	r0, r5
 800c052:	47b8      	blx	r7
 800c054:	3001      	adds	r0, #1
 800c056:	f43f af54 	beq.w	800bf02 <_printf_float+0xb6>
 800c05a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c05e:	4543      	cmp	r3, r8
 800c060:	db02      	blt.n	800c068 <_printf_float+0x21c>
 800c062:	6823      	ldr	r3, [r4, #0]
 800c064:	07d8      	lsls	r0, r3, #31
 800c066:	d50f      	bpl.n	800c088 <_printf_float+0x23c>
 800c068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c06c:	4631      	mov	r1, r6
 800c06e:	4628      	mov	r0, r5
 800c070:	47b8      	blx	r7
 800c072:	3001      	adds	r0, #1
 800c074:	f43f af45 	beq.w	800bf02 <_printf_float+0xb6>
 800c078:	f04f 0900 	mov.w	r9, #0
 800c07c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c080:	f104 0a1a 	add.w	sl, r4, #26
 800c084:	45c8      	cmp	r8, r9
 800c086:	dc09      	bgt.n	800c09c <_printf_float+0x250>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	079b      	lsls	r3, r3, #30
 800c08c:	f100 8103 	bmi.w	800c296 <_printf_float+0x44a>
 800c090:	68e0      	ldr	r0, [r4, #12]
 800c092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c094:	4298      	cmp	r0, r3
 800c096:	bfb8      	it	lt
 800c098:	4618      	movlt	r0, r3
 800c09a:	e734      	b.n	800bf06 <_printf_float+0xba>
 800c09c:	2301      	movs	r3, #1
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af2b 	beq.w	800bf02 <_printf_float+0xb6>
 800c0ac:	f109 0901 	add.w	r9, r9, #1
 800c0b0:	e7e8      	b.n	800c084 <_printf_float+0x238>
 800c0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	dc39      	bgt.n	800c12c <_printf_float+0x2e0>
 800c0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800c128 <_printf_float+0x2dc>)
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	4631      	mov	r1, r6
 800c0be:	4628      	mov	r0, r5
 800c0c0:	47b8      	blx	r7
 800c0c2:	3001      	adds	r0, #1
 800c0c4:	f43f af1d 	beq.w	800bf02 <_printf_float+0xb6>
 800c0c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c0cc:	ea59 0303 	orrs.w	r3, r9, r3
 800c0d0:	d102      	bne.n	800c0d8 <_printf_float+0x28c>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	07d9      	lsls	r1, r3, #31
 800c0d6:	d5d7      	bpl.n	800c088 <_printf_float+0x23c>
 800c0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0dc:	4631      	mov	r1, r6
 800c0de:	4628      	mov	r0, r5
 800c0e0:	47b8      	blx	r7
 800c0e2:	3001      	adds	r0, #1
 800c0e4:	f43f af0d 	beq.w	800bf02 <_printf_float+0xb6>
 800c0e8:	f04f 0a00 	mov.w	sl, #0
 800c0ec:	f104 0b1a 	add.w	fp, r4, #26
 800c0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f2:	425b      	negs	r3, r3
 800c0f4:	4553      	cmp	r3, sl
 800c0f6:	dc01      	bgt.n	800c0fc <_printf_float+0x2b0>
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	e793      	b.n	800c024 <_printf_float+0x1d8>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	465a      	mov	r2, fp
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	47b8      	blx	r7
 800c106:	3001      	adds	r0, #1
 800c108:	f43f aefb 	beq.w	800bf02 <_printf_float+0xb6>
 800c10c:	f10a 0a01 	add.w	sl, sl, #1
 800c110:	e7ee      	b.n	800c0f0 <_printf_float+0x2a4>
 800c112:	bf00      	nop
 800c114:	7fefffff 	.word	0x7fefffff
 800c118:	080106dc 	.word	0x080106dc
 800c11c:	080106d8 	.word	0x080106d8
 800c120:	080106e4 	.word	0x080106e4
 800c124:	080106e0 	.word	0x080106e0
 800c128:	080106e8 	.word	0x080106e8
 800c12c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c12e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c132:	4553      	cmp	r3, sl
 800c134:	bfa8      	it	ge
 800c136:	4653      	movge	r3, sl
 800c138:	2b00      	cmp	r3, #0
 800c13a:	4699      	mov	r9, r3
 800c13c:	dc36      	bgt.n	800c1ac <_printf_float+0x360>
 800c13e:	f04f 0b00 	mov.w	fp, #0
 800c142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c146:	f104 021a 	add.w	r2, r4, #26
 800c14a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c14c:	9306      	str	r3, [sp, #24]
 800c14e:	eba3 0309 	sub.w	r3, r3, r9
 800c152:	455b      	cmp	r3, fp
 800c154:	dc31      	bgt.n	800c1ba <_printf_float+0x36e>
 800c156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c158:	459a      	cmp	sl, r3
 800c15a:	dc3a      	bgt.n	800c1d2 <_printf_float+0x386>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	07da      	lsls	r2, r3, #31
 800c160:	d437      	bmi.n	800c1d2 <_printf_float+0x386>
 800c162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c164:	ebaa 0903 	sub.w	r9, sl, r3
 800c168:	9b06      	ldr	r3, [sp, #24]
 800c16a:	ebaa 0303 	sub.w	r3, sl, r3
 800c16e:	4599      	cmp	r9, r3
 800c170:	bfa8      	it	ge
 800c172:	4699      	movge	r9, r3
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	dc33      	bgt.n	800c1e2 <_printf_float+0x396>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c182:	f104 0b1a 	add.w	fp, r4, #26
 800c186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c188:	ebaa 0303 	sub.w	r3, sl, r3
 800c18c:	eba3 0309 	sub.w	r3, r3, r9
 800c190:	4543      	cmp	r3, r8
 800c192:	f77f af79 	ble.w	800c088 <_printf_float+0x23c>
 800c196:	2301      	movs	r3, #1
 800c198:	465a      	mov	r2, fp
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	f43f aeae 	beq.w	800bf02 <_printf_float+0xb6>
 800c1a6:	f108 0801 	add.w	r8, r8, #1
 800c1aa:	e7ec      	b.n	800c186 <_printf_float+0x33a>
 800c1ac:	4642      	mov	r2, r8
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b8      	blx	r7
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d1c2      	bne.n	800c13e <_printf_float+0x2f2>
 800c1b8:	e6a3      	b.n	800bf02 <_printf_float+0xb6>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4631      	mov	r1, r6
 800c1be:	4628      	mov	r0, r5
 800c1c0:	9206      	str	r2, [sp, #24]
 800c1c2:	47b8      	blx	r7
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	f43f ae9c 	beq.w	800bf02 <_printf_float+0xb6>
 800c1ca:	9a06      	ldr	r2, [sp, #24]
 800c1cc:	f10b 0b01 	add.w	fp, fp, #1
 800c1d0:	e7bb      	b.n	800c14a <_printf_float+0x2fe>
 800c1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b8      	blx	r7
 800c1dc:	3001      	adds	r0, #1
 800c1de:	d1c0      	bne.n	800c162 <_printf_float+0x316>
 800c1e0:	e68f      	b.n	800bf02 <_printf_float+0xb6>
 800c1e2:	9a06      	ldr	r2, [sp, #24]
 800c1e4:	464b      	mov	r3, r9
 800c1e6:	4442      	add	r2, r8
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d1c3      	bne.n	800c17a <_printf_float+0x32e>
 800c1f2:	e686      	b.n	800bf02 <_printf_float+0xb6>
 800c1f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c1f8:	f1ba 0f01 	cmp.w	sl, #1
 800c1fc:	dc01      	bgt.n	800c202 <_printf_float+0x3b6>
 800c1fe:	07db      	lsls	r3, r3, #31
 800c200:	d536      	bpl.n	800c270 <_printf_float+0x424>
 800c202:	2301      	movs	r3, #1
 800c204:	4642      	mov	r2, r8
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	f43f ae78 	beq.w	800bf02 <_printf_float+0xb6>
 800c212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c216:	4631      	mov	r1, r6
 800c218:	4628      	mov	r0, r5
 800c21a:	47b8      	blx	r7
 800c21c:	3001      	adds	r0, #1
 800c21e:	f43f ae70 	beq.w	800bf02 <_printf_float+0xb6>
 800c222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c22e:	f7f4 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c232:	b9c0      	cbnz	r0, 800c266 <_printf_float+0x41a>
 800c234:	4653      	mov	r3, sl
 800c236:	f108 0201 	add.w	r2, r8, #1
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	d10c      	bne.n	800c25e <_printf_float+0x412>
 800c244:	e65d      	b.n	800bf02 <_printf_float+0xb6>
 800c246:	2301      	movs	r3, #1
 800c248:	465a      	mov	r2, fp
 800c24a:	4631      	mov	r1, r6
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b8      	blx	r7
 800c250:	3001      	adds	r0, #1
 800c252:	f43f ae56 	beq.w	800bf02 <_printf_float+0xb6>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	45d0      	cmp	r8, sl
 800c25c:	dbf3      	blt.n	800c246 <_printf_float+0x3fa>
 800c25e:	464b      	mov	r3, r9
 800c260:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c264:	e6df      	b.n	800c026 <_printf_float+0x1da>
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	f104 0b1a 	add.w	fp, r4, #26
 800c26e:	e7f4      	b.n	800c25a <_printf_float+0x40e>
 800c270:	2301      	movs	r3, #1
 800c272:	4642      	mov	r2, r8
 800c274:	e7e1      	b.n	800c23a <_printf_float+0x3ee>
 800c276:	2301      	movs	r3, #1
 800c278:	464a      	mov	r2, r9
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	3001      	adds	r0, #1
 800c282:	f43f ae3e 	beq.w	800bf02 <_printf_float+0xb6>
 800c286:	f108 0801 	add.w	r8, r8, #1
 800c28a:	68e3      	ldr	r3, [r4, #12]
 800c28c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c28e:	1a5b      	subs	r3, r3, r1
 800c290:	4543      	cmp	r3, r8
 800c292:	dcf0      	bgt.n	800c276 <_printf_float+0x42a>
 800c294:	e6fc      	b.n	800c090 <_printf_float+0x244>
 800c296:	f04f 0800 	mov.w	r8, #0
 800c29a:	f104 0919 	add.w	r9, r4, #25
 800c29e:	e7f4      	b.n	800c28a <_printf_float+0x43e>

0800c2a0 <_printf_common>:
 800c2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a4:	4616      	mov	r6, r2
 800c2a6:	4698      	mov	r8, r3
 800c2a8:	688a      	ldr	r2, [r1, #8]
 800c2aa:	690b      	ldr	r3, [r1, #16]
 800c2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	bfb8      	it	lt
 800c2b4:	4613      	movlt	r3, r2
 800c2b6:	6033      	str	r3, [r6, #0]
 800c2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2bc:	4607      	mov	r7, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	b10a      	cbz	r2, 800c2c6 <_printf_common+0x26>
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	6033      	str	r3, [r6, #0]
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	0699      	lsls	r1, r3, #26
 800c2ca:	bf42      	ittt	mi
 800c2cc:	6833      	ldrmi	r3, [r6, #0]
 800c2ce:	3302      	addmi	r3, #2
 800c2d0:	6033      	strmi	r3, [r6, #0]
 800c2d2:	6825      	ldr	r5, [r4, #0]
 800c2d4:	f015 0506 	ands.w	r5, r5, #6
 800c2d8:	d106      	bne.n	800c2e8 <_printf_common+0x48>
 800c2da:	f104 0a19 	add.w	sl, r4, #25
 800c2de:	68e3      	ldr	r3, [r4, #12]
 800c2e0:	6832      	ldr	r2, [r6, #0]
 800c2e2:	1a9b      	subs	r3, r3, r2
 800c2e4:	42ab      	cmp	r3, r5
 800c2e6:	dc26      	bgt.n	800c336 <_printf_common+0x96>
 800c2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c2ec:	6822      	ldr	r2, [r4, #0]
 800c2ee:	3b00      	subs	r3, #0
 800c2f0:	bf18      	it	ne
 800c2f2:	2301      	movne	r3, #1
 800c2f4:	0692      	lsls	r2, r2, #26
 800c2f6:	d42b      	bmi.n	800c350 <_printf_common+0xb0>
 800c2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c2fc:	4641      	mov	r1, r8
 800c2fe:	4638      	mov	r0, r7
 800c300:	47c8      	blx	r9
 800c302:	3001      	adds	r0, #1
 800c304:	d01e      	beq.n	800c344 <_printf_common+0xa4>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	6922      	ldr	r2, [r4, #16]
 800c30a:	f003 0306 	and.w	r3, r3, #6
 800c30e:	2b04      	cmp	r3, #4
 800c310:	bf02      	ittt	eq
 800c312:	68e5      	ldreq	r5, [r4, #12]
 800c314:	6833      	ldreq	r3, [r6, #0]
 800c316:	1aed      	subeq	r5, r5, r3
 800c318:	68a3      	ldr	r3, [r4, #8]
 800c31a:	bf0c      	ite	eq
 800c31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c320:	2500      	movne	r5, #0
 800c322:	4293      	cmp	r3, r2
 800c324:	bfc4      	itt	gt
 800c326:	1a9b      	subgt	r3, r3, r2
 800c328:	18ed      	addgt	r5, r5, r3
 800c32a:	2600      	movs	r6, #0
 800c32c:	341a      	adds	r4, #26
 800c32e:	42b5      	cmp	r5, r6
 800c330:	d11a      	bne.n	800c368 <_printf_common+0xc8>
 800c332:	2000      	movs	r0, #0
 800c334:	e008      	b.n	800c348 <_printf_common+0xa8>
 800c336:	2301      	movs	r3, #1
 800c338:	4652      	mov	r2, sl
 800c33a:	4641      	mov	r1, r8
 800c33c:	4638      	mov	r0, r7
 800c33e:	47c8      	blx	r9
 800c340:	3001      	adds	r0, #1
 800c342:	d103      	bne.n	800c34c <_printf_common+0xac>
 800c344:	f04f 30ff 	mov.w	r0, #4294967295
 800c348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34c:	3501      	adds	r5, #1
 800c34e:	e7c6      	b.n	800c2de <_printf_common+0x3e>
 800c350:	18e1      	adds	r1, r4, r3
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	2030      	movs	r0, #48	@ 0x30
 800c356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c35a:	4422      	add	r2, r4
 800c35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c364:	3302      	adds	r3, #2
 800c366:	e7c7      	b.n	800c2f8 <_printf_common+0x58>
 800c368:	2301      	movs	r3, #1
 800c36a:	4622      	mov	r2, r4
 800c36c:	4641      	mov	r1, r8
 800c36e:	4638      	mov	r0, r7
 800c370:	47c8      	blx	r9
 800c372:	3001      	adds	r0, #1
 800c374:	d0e6      	beq.n	800c344 <_printf_common+0xa4>
 800c376:	3601      	adds	r6, #1
 800c378:	e7d9      	b.n	800c32e <_printf_common+0x8e>
	...

0800c37c <_printf_i>:
 800c37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c380:	7e0f      	ldrb	r7, [r1, #24]
 800c382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c384:	2f78      	cmp	r7, #120	@ 0x78
 800c386:	4691      	mov	r9, r2
 800c388:	4680      	mov	r8, r0
 800c38a:	460c      	mov	r4, r1
 800c38c:	469a      	mov	sl, r3
 800c38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c392:	d807      	bhi.n	800c3a4 <_printf_i+0x28>
 800c394:	2f62      	cmp	r7, #98	@ 0x62
 800c396:	d80a      	bhi.n	800c3ae <_printf_i+0x32>
 800c398:	2f00      	cmp	r7, #0
 800c39a:	f000 80d1 	beq.w	800c540 <_printf_i+0x1c4>
 800c39e:	2f58      	cmp	r7, #88	@ 0x58
 800c3a0:	f000 80b8 	beq.w	800c514 <_printf_i+0x198>
 800c3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3ac:	e03a      	b.n	800c424 <_printf_i+0xa8>
 800c3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c3b2:	2b15      	cmp	r3, #21
 800c3b4:	d8f6      	bhi.n	800c3a4 <_printf_i+0x28>
 800c3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800c3bc <_printf_i+0x40>)
 800c3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3bc:	0800c415 	.word	0x0800c415
 800c3c0:	0800c429 	.word	0x0800c429
 800c3c4:	0800c3a5 	.word	0x0800c3a5
 800c3c8:	0800c3a5 	.word	0x0800c3a5
 800c3cc:	0800c3a5 	.word	0x0800c3a5
 800c3d0:	0800c3a5 	.word	0x0800c3a5
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c3a5 	.word	0x0800c3a5
 800c3dc:	0800c3a5 	.word	0x0800c3a5
 800c3e0:	0800c3a5 	.word	0x0800c3a5
 800c3e4:	0800c3a5 	.word	0x0800c3a5
 800c3e8:	0800c527 	.word	0x0800c527
 800c3ec:	0800c453 	.word	0x0800c453
 800c3f0:	0800c4e1 	.word	0x0800c4e1
 800c3f4:	0800c3a5 	.word	0x0800c3a5
 800c3f8:	0800c3a5 	.word	0x0800c3a5
 800c3fc:	0800c549 	.word	0x0800c549
 800c400:	0800c3a5 	.word	0x0800c3a5
 800c404:	0800c453 	.word	0x0800c453
 800c408:	0800c3a5 	.word	0x0800c3a5
 800c40c:	0800c3a5 	.word	0x0800c3a5
 800c410:	0800c4e9 	.word	0x0800c4e9
 800c414:	6833      	ldr	r3, [r6, #0]
 800c416:	1d1a      	adds	r2, r3, #4
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	6032      	str	r2, [r6, #0]
 800c41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c424:	2301      	movs	r3, #1
 800c426:	e09c      	b.n	800c562 <_printf_i+0x1e6>
 800c428:	6833      	ldr	r3, [r6, #0]
 800c42a:	6820      	ldr	r0, [r4, #0]
 800c42c:	1d19      	adds	r1, r3, #4
 800c42e:	6031      	str	r1, [r6, #0]
 800c430:	0606      	lsls	r6, r0, #24
 800c432:	d501      	bpl.n	800c438 <_printf_i+0xbc>
 800c434:	681d      	ldr	r5, [r3, #0]
 800c436:	e003      	b.n	800c440 <_printf_i+0xc4>
 800c438:	0645      	lsls	r5, r0, #25
 800c43a:	d5fb      	bpl.n	800c434 <_printf_i+0xb8>
 800c43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c440:	2d00      	cmp	r5, #0
 800c442:	da03      	bge.n	800c44c <_printf_i+0xd0>
 800c444:	232d      	movs	r3, #45	@ 0x2d
 800c446:	426d      	negs	r5, r5
 800c448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c44c:	4858      	ldr	r0, [pc, #352]	@ (800c5b0 <_printf_i+0x234>)
 800c44e:	230a      	movs	r3, #10
 800c450:	e011      	b.n	800c476 <_printf_i+0xfa>
 800c452:	6821      	ldr	r1, [r4, #0]
 800c454:	6833      	ldr	r3, [r6, #0]
 800c456:	0608      	lsls	r0, r1, #24
 800c458:	f853 5b04 	ldr.w	r5, [r3], #4
 800c45c:	d402      	bmi.n	800c464 <_printf_i+0xe8>
 800c45e:	0649      	lsls	r1, r1, #25
 800c460:	bf48      	it	mi
 800c462:	b2ad      	uxthmi	r5, r5
 800c464:	2f6f      	cmp	r7, #111	@ 0x6f
 800c466:	4852      	ldr	r0, [pc, #328]	@ (800c5b0 <_printf_i+0x234>)
 800c468:	6033      	str	r3, [r6, #0]
 800c46a:	bf14      	ite	ne
 800c46c:	230a      	movne	r3, #10
 800c46e:	2308      	moveq	r3, #8
 800c470:	2100      	movs	r1, #0
 800c472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c476:	6866      	ldr	r6, [r4, #4]
 800c478:	60a6      	str	r6, [r4, #8]
 800c47a:	2e00      	cmp	r6, #0
 800c47c:	db05      	blt.n	800c48a <_printf_i+0x10e>
 800c47e:	6821      	ldr	r1, [r4, #0]
 800c480:	432e      	orrs	r6, r5
 800c482:	f021 0104 	bic.w	r1, r1, #4
 800c486:	6021      	str	r1, [r4, #0]
 800c488:	d04b      	beq.n	800c522 <_printf_i+0x1a6>
 800c48a:	4616      	mov	r6, r2
 800c48c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c490:	fb03 5711 	mls	r7, r3, r1, r5
 800c494:	5dc7      	ldrb	r7, [r0, r7]
 800c496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c49a:	462f      	mov	r7, r5
 800c49c:	42bb      	cmp	r3, r7
 800c49e:	460d      	mov	r5, r1
 800c4a0:	d9f4      	bls.n	800c48c <_printf_i+0x110>
 800c4a2:	2b08      	cmp	r3, #8
 800c4a4:	d10b      	bne.n	800c4be <_printf_i+0x142>
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	07df      	lsls	r7, r3, #31
 800c4aa:	d508      	bpl.n	800c4be <_printf_i+0x142>
 800c4ac:	6923      	ldr	r3, [r4, #16]
 800c4ae:	6861      	ldr	r1, [r4, #4]
 800c4b0:	4299      	cmp	r1, r3
 800c4b2:	bfde      	ittt	le
 800c4b4:	2330      	movle	r3, #48	@ 0x30
 800c4b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4be:	1b92      	subs	r2, r2, r6
 800c4c0:	6122      	str	r2, [r4, #16]
 800c4c2:	f8cd a000 	str.w	sl, [sp]
 800c4c6:	464b      	mov	r3, r9
 800c4c8:	aa03      	add	r2, sp, #12
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	f7ff fee7 	bl	800c2a0 <_printf_common>
 800c4d2:	3001      	adds	r0, #1
 800c4d4:	d14a      	bne.n	800c56c <_printf_i+0x1f0>
 800c4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4da:	b004      	add	sp, #16
 800c4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	f043 0320 	orr.w	r3, r3, #32
 800c4e6:	6023      	str	r3, [r4, #0]
 800c4e8:	4832      	ldr	r0, [pc, #200]	@ (800c5b4 <_printf_i+0x238>)
 800c4ea:	2778      	movs	r7, #120	@ 0x78
 800c4ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c4f0:	6823      	ldr	r3, [r4, #0]
 800c4f2:	6831      	ldr	r1, [r6, #0]
 800c4f4:	061f      	lsls	r7, r3, #24
 800c4f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800c4fa:	d402      	bmi.n	800c502 <_printf_i+0x186>
 800c4fc:	065f      	lsls	r7, r3, #25
 800c4fe:	bf48      	it	mi
 800c500:	b2ad      	uxthmi	r5, r5
 800c502:	6031      	str	r1, [r6, #0]
 800c504:	07d9      	lsls	r1, r3, #31
 800c506:	bf44      	itt	mi
 800c508:	f043 0320 	orrmi.w	r3, r3, #32
 800c50c:	6023      	strmi	r3, [r4, #0]
 800c50e:	b11d      	cbz	r5, 800c518 <_printf_i+0x19c>
 800c510:	2310      	movs	r3, #16
 800c512:	e7ad      	b.n	800c470 <_printf_i+0xf4>
 800c514:	4826      	ldr	r0, [pc, #152]	@ (800c5b0 <_printf_i+0x234>)
 800c516:	e7e9      	b.n	800c4ec <_printf_i+0x170>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	f023 0320 	bic.w	r3, r3, #32
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	e7f6      	b.n	800c510 <_printf_i+0x194>
 800c522:	4616      	mov	r6, r2
 800c524:	e7bd      	b.n	800c4a2 <_printf_i+0x126>
 800c526:	6833      	ldr	r3, [r6, #0]
 800c528:	6825      	ldr	r5, [r4, #0]
 800c52a:	6961      	ldr	r1, [r4, #20]
 800c52c:	1d18      	adds	r0, r3, #4
 800c52e:	6030      	str	r0, [r6, #0]
 800c530:	062e      	lsls	r6, r5, #24
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	d501      	bpl.n	800c53a <_printf_i+0x1be>
 800c536:	6019      	str	r1, [r3, #0]
 800c538:	e002      	b.n	800c540 <_printf_i+0x1c4>
 800c53a:	0668      	lsls	r0, r5, #25
 800c53c:	d5fb      	bpl.n	800c536 <_printf_i+0x1ba>
 800c53e:	8019      	strh	r1, [r3, #0]
 800c540:	2300      	movs	r3, #0
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	4616      	mov	r6, r2
 800c546:	e7bc      	b.n	800c4c2 <_printf_i+0x146>
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	1d1a      	adds	r2, r3, #4
 800c54c:	6032      	str	r2, [r6, #0]
 800c54e:	681e      	ldr	r6, [r3, #0]
 800c550:	6862      	ldr	r2, [r4, #4]
 800c552:	2100      	movs	r1, #0
 800c554:	4630      	mov	r0, r6
 800c556:	f7f3 fe3b 	bl	80001d0 <memchr>
 800c55a:	b108      	cbz	r0, 800c560 <_printf_i+0x1e4>
 800c55c:	1b80      	subs	r0, r0, r6
 800c55e:	6060      	str	r0, [r4, #4]
 800c560:	6863      	ldr	r3, [r4, #4]
 800c562:	6123      	str	r3, [r4, #16]
 800c564:	2300      	movs	r3, #0
 800c566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c56a:	e7aa      	b.n	800c4c2 <_printf_i+0x146>
 800c56c:	6923      	ldr	r3, [r4, #16]
 800c56e:	4632      	mov	r2, r6
 800c570:	4649      	mov	r1, r9
 800c572:	4640      	mov	r0, r8
 800c574:	47d0      	blx	sl
 800c576:	3001      	adds	r0, #1
 800c578:	d0ad      	beq.n	800c4d6 <_printf_i+0x15a>
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	079b      	lsls	r3, r3, #30
 800c57e:	d413      	bmi.n	800c5a8 <_printf_i+0x22c>
 800c580:	68e0      	ldr	r0, [r4, #12]
 800c582:	9b03      	ldr	r3, [sp, #12]
 800c584:	4298      	cmp	r0, r3
 800c586:	bfb8      	it	lt
 800c588:	4618      	movlt	r0, r3
 800c58a:	e7a6      	b.n	800c4da <_printf_i+0x15e>
 800c58c:	2301      	movs	r3, #1
 800c58e:	4632      	mov	r2, r6
 800c590:	4649      	mov	r1, r9
 800c592:	4640      	mov	r0, r8
 800c594:	47d0      	blx	sl
 800c596:	3001      	adds	r0, #1
 800c598:	d09d      	beq.n	800c4d6 <_printf_i+0x15a>
 800c59a:	3501      	adds	r5, #1
 800c59c:	68e3      	ldr	r3, [r4, #12]
 800c59e:	9903      	ldr	r1, [sp, #12]
 800c5a0:	1a5b      	subs	r3, r3, r1
 800c5a2:	42ab      	cmp	r3, r5
 800c5a4:	dcf2      	bgt.n	800c58c <_printf_i+0x210>
 800c5a6:	e7eb      	b.n	800c580 <_printf_i+0x204>
 800c5a8:	2500      	movs	r5, #0
 800c5aa:	f104 0619 	add.w	r6, r4, #25
 800c5ae:	e7f5      	b.n	800c59c <_printf_i+0x220>
 800c5b0:	080106ea 	.word	0x080106ea
 800c5b4:	080106fb 	.word	0x080106fb

0800c5b8 <_scanf_float>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	b087      	sub	sp, #28
 800c5be:	4691      	mov	r9, r2
 800c5c0:	9303      	str	r3, [sp, #12]
 800c5c2:	688b      	ldr	r3, [r1, #8]
 800c5c4:	1e5a      	subs	r2, r3, #1
 800c5c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c5ca:	bf81      	itttt	hi
 800c5cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c5d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c5d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c5d8:	608b      	strhi	r3, [r1, #8]
 800c5da:	680b      	ldr	r3, [r1, #0]
 800c5dc:	460a      	mov	r2, r1
 800c5de:	f04f 0500 	mov.w	r5, #0
 800c5e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c5e6:	f842 3b1c 	str.w	r3, [r2], #28
 800c5ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c5ee:	4680      	mov	r8, r0
 800c5f0:	460c      	mov	r4, r1
 800c5f2:	bf98      	it	ls
 800c5f4:	f04f 0b00 	movls.w	fp, #0
 800c5f8:	9201      	str	r2, [sp, #4]
 800c5fa:	4616      	mov	r6, r2
 800c5fc:	46aa      	mov	sl, r5
 800c5fe:	462f      	mov	r7, r5
 800c600:	9502      	str	r5, [sp, #8]
 800c602:	68a2      	ldr	r2, [r4, #8]
 800c604:	b15a      	cbz	r2, 800c61e <_scanf_float+0x66>
 800c606:	f8d9 3000 	ldr.w	r3, [r9]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b4e      	cmp	r3, #78	@ 0x4e
 800c60e:	d863      	bhi.n	800c6d8 <_scanf_float+0x120>
 800c610:	2b40      	cmp	r3, #64	@ 0x40
 800c612:	d83b      	bhi.n	800c68c <_scanf_float+0xd4>
 800c614:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c618:	b2c8      	uxtb	r0, r1
 800c61a:	280e      	cmp	r0, #14
 800c61c:	d939      	bls.n	800c692 <_scanf_float+0xda>
 800c61e:	b11f      	cbz	r7, 800c628 <_scanf_float+0x70>
 800c620:	6823      	ldr	r3, [r4, #0]
 800c622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c626:	6023      	str	r3, [r4, #0]
 800c628:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c62c:	f1ba 0f01 	cmp.w	sl, #1
 800c630:	f200 8114 	bhi.w	800c85c <_scanf_float+0x2a4>
 800c634:	9b01      	ldr	r3, [sp, #4]
 800c636:	429e      	cmp	r6, r3
 800c638:	f200 8105 	bhi.w	800c846 <_scanf_float+0x28e>
 800c63c:	2001      	movs	r0, #1
 800c63e:	b007      	add	sp, #28
 800c640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c644:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c648:	2a0d      	cmp	r2, #13
 800c64a:	d8e8      	bhi.n	800c61e <_scanf_float+0x66>
 800c64c:	a101      	add	r1, pc, #4	@ (adr r1, 800c654 <_scanf_float+0x9c>)
 800c64e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c652:	bf00      	nop
 800c654:	0800c79d 	.word	0x0800c79d
 800c658:	0800c61f 	.word	0x0800c61f
 800c65c:	0800c61f 	.word	0x0800c61f
 800c660:	0800c61f 	.word	0x0800c61f
 800c664:	0800c7f9 	.word	0x0800c7f9
 800c668:	0800c7d3 	.word	0x0800c7d3
 800c66c:	0800c61f 	.word	0x0800c61f
 800c670:	0800c61f 	.word	0x0800c61f
 800c674:	0800c7ab 	.word	0x0800c7ab
 800c678:	0800c61f 	.word	0x0800c61f
 800c67c:	0800c61f 	.word	0x0800c61f
 800c680:	0800c61f 	.word	0x0800c61f
 800c684:	0800c61f 	.word	0x0800c61f
 800c688:	0800c767 	.word	0x0800c767
 800c68c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c690:	e7da      	b.n	800c648 <_scanf_float+0x90>
 800c692:	290e      	cmp	r1, #14
 800c694:	d8c3      	bhi.n	800c61e <_scanf_float+0x66>
 800c696:	a001      	add	r0, pc, #4	@ (adr r0, 800c69c <_scanf_float+0xe4>)
 800c698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c69c:	0800c757 	.word	0x0800c757
 800c6a0:	0800c61f 	.word	0x0800c61f
 800c6a4:	0800c757 	.word	0x0800c757
 800c6a8:	0800c7e7 	.word	0x0800c7e7
 800c6ac:	0800c61f 	.word	0x0800c61f
 800c6b0:	0800c6f9 	.word	0x0800c6f9
 800c6b4:	0800c73d 	.word	0x0800c73d
 800c6b8:	0800c73d 	.word	0x0800c73d
 800c6bc:	0800c73d 	.word	0x0800c73d
 800c6c0:	0800c73d 	.word	0x0800c73d
 800c6c4:	0800c73d 	.word	0x0800c73d
 800c6c8:	0800c73d 	.word	0x0800c73d
 800c6cc:	0800c73d 	.word	0x0800c73d
 800c6d0:	0800c73d 	.word	0x0800c73d
 800c6d4:	0800c73d 	.word	0x0800c73d
 800c6d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c6da:	d809      	bhi.n	800c6f0 <_scanf_float+0x138>
 800c6dc:	2b60      	cmp	r3, #96	@ 0x60
 800c6de:	d8b1      	bhi.n	800c644 <_scanf_float+0x8c>
 800c6e0:	2b54      	cmp	r3, #84	@ 0x54
 800c6e2:	d07b      	beq.n	800c7dc <_scanf_float+0x224>
 800c6e4:	2b59      	cmp	r3, #89	@ 0x59
 800c6e6:	d19a      	bne.n	800c61e <_scanf_float+0x66>
 800c6e8:	2d07      	cmp	r5, #7
 800c6ea:	d198      	bne.n	800c61e <_scanf_float+0x66>
 800c6ec:	2508      	movs	r5, #8
 800c6ee:	e02f      	b.n	800c750 <_scanf_float+0x198>
 800c6f0:	2b74      	cmp	r3, #116	@ 0x74
 800c6f2:	d073      	beq.n	800c7dc <_scanf_float+0x224>
 800c6f4:	2b79      	cmp	r3, #121	@ 0x79
 800c6f6:	e7f6      	b.n	800c6e6 <_scanf_float+0x12e>
 800c6f8:	6821      	ldr	r1, [r4, #0]
 800c6fa:	05c8      	lsls	r0, r1, #23
 800c6fc:	d51e      	bpl.n	800c73c <_scanf_float+0x184>
 800c6fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c702:	6021      	str	r1, [r4, #0]
 800c704:	3701      	adds	r7, #1
 800c706:	f1bb 0f00 	cmp.w	fp, #0
 800c70a:	d003      	beq.n	800c714 <_scanf_float+0x15c>
 800c70c:	3201      	adds	r2, #1
 800c70e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c712:	60a2      	str	r2, [r4, #8]
 800c714:	68a3      	ldr	r3, [r4, #8]
 800c716:	3b01      	subs	r3, #1
 800c718:	60a3      	str	r3, [r4, #8]
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	3301      	adds	r3, #1
 800c71e:	6123      	str	r3, [r4, #16]
 800c720:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c724:	3b01      	subs	r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	f8c9 3004 	str.w	r3, [r9, #4]
 800c72c:	f340 8082 	ble.w	800c834 <_scanf_float+0x27c>
 800c730:	f8d9 3000 	ldr.w	r3, [r9]
 800c734:	3301      	adds	r3, #1
 800c736:	f8c9 3000 	str.w	r3, [r9]
 800c73a:	e762      	b.n	800c602 <_scanf_float+0x4a>
 800c73c:	eb1a 0105 	adds.w	r1, sl, r5
 800c740:	f47f af6d 	bne.w	800c61e <_scanf_float+0x66>
 800c744:	6822      	ldr	r2, [r4, #0]
 800c746:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c74a:	6022      	str	r2, [r4, #0]
 800c74c:	460d      	mov	r5, r1
 800c74e:	468a      	mov	sl, r1
 800c750:	f806 3b01 	strb.w	r3, [r6], #1
 800c754:	e7de      	b.n	800c714 <_scanf_float+0x15c>
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	0610      	lsls	r0, r2, #24
 800c75a:	f57f af60 	bpl.w	800c61e <_scanf_float+0x66>
 800c75e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	e7f4      	b.n	800c750 <_scanf_float+0x198>
 800c766:	f1ba 0f00 	cmp.w	sl, #0
 800c76a:	d10c      	bne.n	800c786 <_scanf_float+0x1ce>
 800c76c:	b977      	cbnz	r7, 800c78c <_scanf_float+0x1d4>
 800c76e:	6822      	ldr	r2, [r4, #0]
 800c770:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c774:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c778:	d108      	bne.n	800c78c <_scanf_float+0x1d4>
 800c77a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c77e:	6022      	str	r2, [r4, #0]
 800c780:	f04f 0a01 	mov.w	sl, #1
 800c784:	e7e4      	b.n	800c750 <_scanf_float+0x198>
 800c786:	f1ba 0f02 	cmp.w	sl, #2
 800c78a:	d050      	beq.n	800c82e <_scanf_float+0x276>
 800c78c:	2d01      	cmp	r5, #1
 800c78e:	d002      	beq.n	800c796 <_scanf_float+0x1de>
 800c790:	2d04      	cmp	r5, #4
 800c792:	f47f af44 	bne.w	800c61e <_scanf_float+0x66>
 800c796:	3501      	adds	r5, #1
 800c798:	b2ed      	uxtb	r5, r5
 800c79a:	e7d9      	b.n	800c750 <_scanf_float+0x198>
 800c79c:	f1ba 0f01 	cmp.w	sl, #1
 800c7a0:	f47f af3d 	bne.w	800c61e <_scanf_float+0x66>
 800c7a4:	f04f 0a02 	mov.w	sl, #2
 800c7a8:	e7d2      	b.n	800c750 <_scanf_float+0x198>
 800c7aa:	b975      	cbnz	r5, 800c7ca <_scanf_float+0x212>
 800c7ac:	2f00      	cmp	r7, #0
 800c7ae:	f47f af37 	bne.w	800c620 <_scanf_float+0x68>
 800c7b2:	6822      	ldr	r2, [r4, #0]
 800c7b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c7b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c7bc:	f040 8103 	bne.w	800c9c6 <_scanf_float+0x40e>
 800c7c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	2501      	movs	r5, #1
 800c7c8:	e7c2      	b.n	800c750 <_scanf_float+0x198>
 800c7ca:	2d03      	cmp	r5, #3
 800c7cc:	d0e3      	beq.n	800c796 <_scanf_float+0x1de>
 800c7ce:	2d05      	cmp	r5, #5
 800c7d0:	e7df      	b.n	800c792 <_scanf_float+0x1da>
 800c7d2:	2d02      	cmp	r5, #2
 800c7d4:	f47f af23 	bne.w	800c61e <_scanf_float+0x66>
 800c7d8:	2503      	movs	r5, #3
 800c7da:	e7b9      	b.n	800c750 <_scanf_float+0x198>
 800c7dc:	2d06      	cmp	r5, #6
 800c7de:	f47f af1e 	bne.w	800c61e <_scanf_float+0x66>
 800c7e2:	2507      	movs	r5, #7
 800c7e4:	e7b4      	b.n	800c750 <_scanf_float+0x198>
 800c7e6:	6822      	ldr	r2, [r4, #0]
 800c7e8:	0591      	lsls	r1, r2, #22
 800c7ea:	f57f af18 	bpl.w	800c61e <_scanf_float+0x66>
 800c7ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c7f2:	6022      	str	r2, [r4, #0]
 800c7f4:	9702      	str	r7, [sp, #8]
 800c7f6:	e7ab      	b.n	800c750 <_scanf_float+0x198>
 800c7f8:	6822      	ldr	r2, [r4, #0]
 800c7fa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c7fe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c802:	d005      	beq.n	800c810 <_scanf_float+0x258>
 800c804:	0550      	lsls	r0, r2, #21
 800c806:	f57f af0a 	bpl.w	800c61e <_scanf_float+0x66>
 800c80a:	2f00      	cmp	r7, #0
 800c80c:	f000 80db 	beq.w	800c9c6 <_scanf_float+0x40e>
 800c810:	0591      	lsls	r1, r2, #22
 800c812:	bf58      	it	pl
 800c814:	9902      	ldrpl	r1, [sp, #8]
 800c816:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c81a:	bf58      	it	pl
 800c81c:	1a79      	subpl	r1, r7, r1
 800c81e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c822:	bf58      	it	pl
 800c824:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c828:	6022      	str	r2, [r4, #0]
 800c82a:	2700      	movs	r7, #0
 800c82c:	e790      	b.n	800c750 <_scanf_float+0x198>
 800c82e:	f04f 0a03 	mov.w	sl, #3
 800c832:	e78d      	b.n	800c750 <_scanf_float+0x198>
 800c834:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c838:	4649      	mov	r1, r9
 800c83a:	4640      	mov	r0, r8
 800c83c:	4798      	blx	r3
 800c83e:	2800      	cmp	r0, #0
 800c840:	f43f aedf 	beq.w	800c602 <_scanf_float+0x4a>
 800c844:	e6eb      	b.n	800c61e <_scanf_float+0x66>
 800c846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c84a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c84e:	464a      	mov	r2, r9
 800c850:	4640      	mov	r0, r8
 800c852:	4798      	blx	r3
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	3b01      	subs	r3, #1
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	e6eb      	b.n	800c634 <_scanf_float+0x7c>
 800c85c:	1e6b      	subs	r3, r5, #1
 800c85e:	2b06      	cmp	r3, #6
 800c860:	d824      	bhi.n	800c8ac <_scanf_float+0x2f4>
 800c862:	2d02      	cmp	r5, #2
 800c864:	d836      	bhi.n	800c8d4 <_scanf_float+0x31c>
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	429e      	cmp	r6, r3
 800c86a:	f67f aee7 	bls.w	800c63c <_scanf_float+0x84>
 800c86e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c876:	464a      	mov	r2, r9
 800c878:	4640      	mov	r0, r8
 800c87a:	4798      	blx	r3
 800c87c:	6923      	ldr	r3, [r4, #16]
 800c87e:	3b01      	subs	r3, #1
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	e7f0      	b.n	800c866 <_scanf_float+0x2ae>
 800c884:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c888:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c88c:	464a      	mov	r2, r9
 800c88e:	4640      	mov	r0, r8
 800c890:	4798      	blx	r3
 800c892:	6923      	ldr	r3, [r4, #16]
 800c894:	3b01      	subs	r3, #1
 800c896:	6123      	str	r3, [r4, #16]
 800c898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c89c:	fa5f fa8a 	uxtb.w	sl, sl
 800c8a0:	f1ba 0f02 	cmp.w	sl, #2
 800c8a4:	d1ee      	bne.n	800c884 <_scanf_float+0x2cc>
 800c8a6:	3d03      	subs	r5, #3
 800c8a8:	b2ed      	uxtb	r5, r5
 800c8aa:	1b76      	subs	r6, r6, r5
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	05da      	lsls	r2, r3, #23
 800c8b0:	d530      	bpl.n	800c914 <_scanf_float+0x35c>
 800c8b2:	055b      	lsls	r3, r3, #21
 800c8b4:	d511      	bpl.n	800c8da <_scanf_float+0x322>
 800c8b6:	9b01      	ldr	r3, [sp, #4]
 800c8b8:	429e      	cmp	r6, r3
 800c8ba:	f67f aebf 	bls.w	800c63c <_scanf_float+0x84>
 800c8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c8c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c8c6:	464a      	mov	r2, r9
 800c8c8:	4640      	mov	r0, r8
 800c8ca:	4798      	blx	r3
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	e7f0      	b.n	800c8b6 <_scanf_float+0x2fe>
 800c8d4:	46aa      	mov	sl, r5
 800c8d6:	46b3      	mov	fp, r6
 800c8d8:	e7de      	b.n	800c898 <_scanf_float+0x2e0>
 800c8da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c8de:	6923      	ldr	r3, [r4, #16]
 800c8e0:	2965      	cmp	r1, #101	@ 0x65
 800c8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c8e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c8ea:	6123      	str	r3, [r4, #16]
 800c8ec:	d00c      	beq.n	800c908 <_scanf_float+0x350>
 800c8ee:	2945      	cmp	r1, #69	@ 0x45
 800c8f0:	d00a      	beq.n	800c908 <_scanf_float+0x350>
 800c8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c8f6:	464a      	mov	r2, r9
 800c8f8:	4640      	mov	r0, r8
 800c8fa:	4798      	blx	r3
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c902:	3b01      	subs	r3, #1
 800c904:	1eb5      	subs	r5, r6, #2
 800c906:	6123      	str	r3, [r4, #16]
 800c908:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c90c:	464a      	mov	r2, r9
 800c90e:	4640      	mov	r0, r8
 800c910:	4798      	blx	r3
 800c912:	462e      	mov	r6, r5
 800c914:	6822      	ldr	r2, [r4, #0]
 800c916:	f012 0210 	ands.w	r2, r2, #16
 800c91a:	d001      	beq.n	800c920 <_scanf_float+0x368>
 800c91c:	2000      	movs	r0, #0
 800c91e:	e68e      	b.n	800c63e <_scanf_float+0x86>
 800c920:	7032      	strb	r2, [r6, #0]
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c92c:	d125      	bne.n	800c97a <_scanf_float+0x3c2>
 800c92e:	9b02      	ldr	r3, [sp, #8]
 800c930:	429f      	cmp	r7, r3
 800c932:	d00a      	beq.n	800c94a <_scanf_float+0x392>
 800c934:	1bda      	subs	r2, r3, r7
 800c936:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c93a:	429e      	cmp	r6, r3
 800c93c:	bf28      	it	cs
 800c93e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c942:	4922      	ldr	r1, [pc, #136]	@ (800c9cc <_scanf_float+0x414>)
 800c944:	4630      	mov	r0, r6
 800c946:	f000 f977 	bl	800cc38 <siprintf>
 800c94a:	9901      	ldr	r1, [sp, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	4640      	mov	r0, r8
 800c950:	f002 fd06 	bl	800f360 <_strtod_r>
 800c954:	9b03      	ldr	r3, [sp, #12]
 800c956:	6821      	ldr	r1, [r4, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f011 0f02 	tst.w	r1, #2
 800c95e:	ec57 6b10 	vmov	r6, r7, d0
 800c962:	f103 0204 	add.w	r2, r3, #4
 800c966:	d015      	beq.n	800c994 <_scanf_float+0x3dc>
 800c968:	9903      	ldr	r1, [sp, #12]
 800c96a:	600a      	str	r2, [r1, #0]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	e9c3 6700 	strd	r6, r7, [r3]
 800c972:	68e3      	ldr	r3, [r4, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60e3      	str	r3, [r4, #12]
 800c978:	e7d0      	b.n	800c91c <_scanf_float+0x364>
 800c97a:	9b04      	ldr	r3, [sp, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0e4      	beq.n	800c94a <_scanf_float+0x392>
 800c980:	9905      	ldr	r1, [sp, #20]
 800c982:	230a      	movs	r3, #10
 800c984:	3101      	adds	r1, #1
 800c986:	4640      	mov	r0, r8
 800c988:	f002 fd6a 	bl	800f460 <_strtol_r>
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	9e05      	ldr	r6, [sp, #20]
 800c990:	1ac2      	subs	r2, r0, r3
 800c992:	e7d0      	b.n	800c936 <_scanf_float+0x37e>
 800c994:	f011 0f04 	tst.w	r1, #4
 800c998:	9903      	ldr	r1, [sp, #12]
 800c99a:	600a      	str	r2, [r1, #0]
 800c99c:	d1e6      	bne.n	800c96c <_scanf_float+0x3b4>
 800c99e:	681d      	ldr	r5, [r3, #0]
 800c9a0:	4632      	mov	r2, r6
 800c9a2:	463b      	mov	r3, r7
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	f7f4 f8c0 	bl	8000b2c <__aeabi_dcmpun>
 800c9ac:	b128      	cbz	r0, 800c9ba <_scanf_float+0x402>
 800c9ae:	4808      	ldr	r0, [pc, #32]	@ (800c9d0 <_scanf_float+0x418>)
 800c9b0:	f000 faca 	bl	800cf48 <nanf>
 800c9b4:	ed85 0a00 	vstr	s0, [r5]
 800c9b8:	e7db      	b.n	800c972 <_scanf_float+0x3ba>
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	4639      	mov	r1, r7
 800c9be:	f7f4 f913 	bl	8000be8 <__aeabi_d2f>
 800c9c2:	6028      	str	r0, [r5, #0]
 800c9c4:	e7d5      	b.n	800c972 <_scanf_float+0x3ba>
 800c9c6:	2700      	movs	r7, #0
 800c9c8:	e62e      	b.n	800c628 <_scanf_float+0x70>
 800c9ca:	bf00      	nop
 800c9cc:	0801070c 	.word	0x0801070c
 800c9d0:	0801084d 	.word	0x0801084d

0800c9d4 <std>:
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	4604      	mov	r4, r0
 800c9da:	e9c0 3300 	strd	r3, r3, [r0]
 800c9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9e2:	6083      	str	r3, [r0, #8]
 800c9e4:	8181      	strh	r1, [r0, #12]
 800c9e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800c9e8:	81c2      	strh	r2, [r0, #14]
 800c9ea:	6183      	str	r3, [r0, #24]
 800c9ec:	4619      	mov	r1, r3
 800c9ee:	2208      	movs	r2, #8
 800c9f0:	305c      	adds	r0, #92	@ 0x5c
 800c9f2:	f000 fa1b 	bl	800ce2c <memset>
 800c9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ca2c <std+0x58>)
 800c9f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800c9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ca30 <std+0x5c>)
 800c9fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800ca34 <std+0x60>)
 800ca00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca02:	4b0d      	ldr	r3, [pc, #52]	@ (800ca38 <std+0x64>)
 800ca04:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca06:	4b0d      	ldr	r3, [pc, #52]	@ (800ca3c <std+0x68>)
 800ca08:	6224      	str	r4, [r4, #32]
 800ca0a:	429c      	cmp	r4, r3
 800ca0c:	d006      	beq.n	800ca1c <std+0x48>
 800ca0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca12:	4294      	cmp	r4, r2
 800ca14:	d002      	beq.n	800ca1c <std+0x48>
 800ca16:	33d0      	adds	r3, #208	@ 0xd0
 800ca18:	429c      	cmp	r4, r3
 800ca1a:	d105      	bne.n	800ca28 <std+0x54>
 800ca1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca24:	f000 ba7e 	b.w	800cf24 <__retarget_lock_init_recursive>
 800ca28:	bd10      	pop	{r4, pc}
 800ca2a:	bf00      	nop
 800ca2c:	0800cc7d 	.word	0x0800cc7d
 800ca30:	0800cc9f 	.word	0x0800cc9f
 800ca34:	0800ccd7 	.word	0x0800ccd7
 800ca38:	0800ccfb 	.word	0x0800ccfb
 800ca3c:	200020fc 	.word	0x200020fc

0800ca40 <stdio_exit_handler>:
 800ca40:	4a02      	ldr	r2, [pc, #8]	@ (800ca4c <stdio_exit_handler+0xc>)
 800ca42:	4903      	ldr	r1, [pc, #12]	@ (800ca50 <stdio_exit_handler+0x10>)
 800ca44:	4803      	ldr	r0, [pc, #12]	@ (800ca54 <stdio_exit_handler+0x14>)
 800ca46:	f000 b869 	b.w	800cb1c <_fwalk_sglue>
 800ca4a:	bf00      	nop
 800ca4c:	20000108 	.word	0x20000108
 800ca50:	0800faa1 	.word	0x0800faa1
 800ca54:	20000118 	.word	0x20000118

0800ca58 <cleanup_stdio>:
 800ca58:	6841      	ldr	r1, [r0, #4]
 800ca5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca8c <cleanup_stdio+0x34>)
 800ca5c:	4299      	cmp	r1, r3
 800ca5e:	b510      	push	{r4, lr}
 800ca60:	4604      	mov	r4, r0
 800ca62:	d001      	beq.n	800ca68 <cleanup_stdio+0x10>
 800ca64:	f003 f81c 	bl	800faa0 <_fflush_r>
 800ca68:	68a1      	ldr	r1, [r4, #8]
 800ca6a:	4b09      	ldr	r3, [pc, #36]	@ (800ca90 <cleanup_stdio+0x38>)
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	d002      	beq.n	800ca76 <cleanup_stdio+0x1e>
 800ca70:	4620      	mov	r0, r4
 800ca72:	f003 f815 	bl	800faa0 <_fflush_r>
 800ca76:	68e1      	ldr	r1, [r4, #12]
 800ca78:	4b06      	ldr	r3, [pc, #24]	@ (800ca94 <cleanup_stdio+0x3c>)
 800ca7a:	4299      	cmp	r1, r3
 800ca7c:	d004      	beq.n	800ca88 <cleanup_stdio+0x30>
 800ca7e:	4620      	mov	r0, r4
 800ca80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca84:	f003 b80c 	b.w	800faa0 <_fflush_r>
 800ca88:	bd10      	pop	{r4, pc}
 800ca8a:	bf00      	nop
 800ca8c:	200020fc 	.word	0x200020fc
 800ca90:	20002164 	.word	0x20002164
 800ca94:	200021cc 	.word	0x200021cc

0800ca98 <global_stdio_init.part.0>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cac8 <global_stdio_init.part.0+0x30>)
 800ca9c:	4c0b      	ldr	r4, [pc, #44]	@ (800cacc <global_stdio_init.part.0+0x34>)
 800ca9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cad0 <global_stdio_init.part.0+0x38>)
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	4620      	mov	r0, r4
 800caa4:	2200      	movs	r2, #0
 800caa6:	2104      	movs	r1, #4
 800caa8:	f7ff ff94 	bl	800c9d4 <std>
 800caac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cab0:	2201      	movs	r2, #1
 800cab2:	2109      	movs	r1, #9
 800cab4:	f7ff ff8e 	bl	800c9d4 <std>
 800cab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cabc:	2202      	movs	r2, #2
 800cabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac2:	2112      	movs	r1, #18
 800cac4:	f7ff bf86 	b.w	800c9d4 <std>
 800cac8:	20002234 	.word	0x20002234
 800cacc:	200020fc 	.word	0x200020fc
 800cad0:	0800ca41 	.word	0x0800ca41

0800cad4 <__sfp_lock_acquire>:
 800cad4:	4801      	ldr	r0, [pc, #4]	@ (800cadc <__sfp_lock_acquire+0x8>)
 800cad6:	f000 ba26 	b.w	800cf26 <__retarget_lock_acquire_recursive>
 800cada:	bf00      	nop
 800cadc:	2000223d 	.word	0x2000223d

0800cae0 <__sfp_lock_release>:
 800cae0:	4801      	ldr	r0, [pc, #4]	@ (800cae8 <__sfp_lock_release+0x8>)
 800cae2:	f000 ba21 	b.w	800cf28 <__retarget_lock_release_recursive>
 800cae6:	bf00      	nop
 800cae8:	2000223d 	.word	0x2000223d

0800caec <__sinit>:
 800caec:	b510      	push	{r4, lr}
 800caee:	4604      	mov	r4, r0
 800caf0:	f7ff fff0 	bl	800cad4 <__sfp_lock_acquire>
 800caf4:	6a23      	ldr	r3, [r4, #32]
 800caf6:	b11b      	cbz	r3, 800cb00 <__sinit+0x14>
 800caf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cafc:	f7ff bff0 	b.w	800cae0 <__sfp_lock_release>
 800cb00:	4b04      	ldr	r3, [pc, #16]	@ (800cb14 <__sinit+0x28>)
 800cb02:	6223      	str	r3, [r4, #32]
 800cb04:	4b04      	ldr	r3, [pc, #16]	@ (800cb18 <__sinit+0x2c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f5      	bne.n	800caf8 <__sinit+0xc>
 800cb0c:	f7ff ffc4 	bl	800ca98 <global_stdio_init.part.0>
 800cb10:	e7f2      	b.n	800caf8 <__sinit+0xc>
 800cb12:	bf00      	nop
 800cb14:	0800ca59 	.word	0x0800ca59
 800cb18:	20002234 	.word	0x20002234

0800cb1c <_fwalk_sglue>:
 800cb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb20:	4607      	mov	r7, r0
 800cb22:	4688      	mov	r8, r1
 800cb24:	4614      	mov	r4, r2
 800cb26:	2600      	movs	r6, #0
 800cb28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb2c:	f1b9 0901 	subs.w	r9, r9, #1
 800cb30:	d505      	bpl.n	800cb3e <_fwalk_sglue+0x22>
 800cb32:	6824      	ldr	r4, [r4, #0]
 800cb34:	2c00      	cmp	r4, #0
 800cb36:	d1f7      	bne.n	800cb28 <_fwalk_sglue+0xc>
 800cb38:	4630      	mov	r0, r6
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	89ab      	ldrh	r3, [r5, #12]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d907      	bls.n	800cb54 <_fwalk_sglue+0x38>
 800cb44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	d003      	beq.n	800cb54 <_fwalk_sglue+0x38>
 800cb4c:	4629      	mov	r1, r5
 800cb4e:	4638      	mov	r0, r7
 800cb50:	47c0      	blx	r8
 800cb52:	4306      	orrs	r6, r0
 800cb54:	3568      	adds	r5, #104	@ 0x68
 800cb56:	e7e9      	b.n	800cb2c <_fwalk_sglue+0x10>

0800cb58 <iprintf>:
 800cb58:	b40f      	push	{r0, r1, r2, r3}
 800cb5a:	b507      	push	{r0, r1, r2, lr}
 800cb5c:	4906      	ldr	r1, [pc, #24]	@ (800cb78 <iprintf+0x20>)
 800cb5e:	ab04      	add	r3, sp, #16
 800cb60:	6808      	ldr	r0, [r1, #0]
 800cb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb66:	6881      	ldr	r1, [r0, #8]
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	f002 fdfd 	bl	800f768 <_vfiprintf_r>
 800cb6e:	b003      	add	sp, #12
 800cb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb74:	b004      	add	sp, #16
 800cb76:	4770      	bx	lr
 800cb78:	20000114 	.word	0x20000114

0800cb7c <_puts_r>:
 800cb7c:	6a03      	ldr	r3, [r0, #32]
 800cb7e:	b570      	push	{r4, r5, r6, lr}
 800cb80:	6884      	ldr	r4, [r0, #8]
 800cb82:	4605      	mov	r5, r0
 800cb84:	460e      	mov	r6, r1
 800cb86:	b90b      	cbnz	r3, 800cb8c <_puts_r+0x10>
 800cb88:	f7ff ffb0 	bl	800caec <__sinit>
 800cb8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cb8e:	07db      	lsls	r3, r3, #31
 800cb90:	d405      	bmi.n	800cb9e <_puts_r+0x22>
 800cb92:	89a3      	ldrh	r3, [r4, #12]
 800cb94:	0598      	lsls	r0, r3, #22
 800cb96:	d402      	bmi.n	800cb9e <_puts_r+0x22>
 800cb98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cb9a:	f000 f9c4 	bl	800cf26 <__retarget_lock_acquire_recursive>
 800cb9e:	89a3      	ldrh	r3, [r4, #12]
 800cba0:	0719      	lsls	r1, r3, #28
 800cba2:	d502      	bpl.n	800cbaa <_puts_r+0x2e>
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d135      	bne.n	800cc16 <_puts_r+0x9a>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 f8e7 	bl	800cd80 <__swsetup_r>
 800cbb2:	b380      	cbz	r0, 800cc16 <_puts_r+0x9a>
 800cbb4:	f04f 35ff 	mov.w	r5, #4294967295
 800cbb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbba:	07da      	lsls	r2, r3, #31
 800cbbc:	d405      	bmi.n	800cbca <_puts_r+0x4e>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	059b      	lsls	r3, r3, #22
 800cbc2:	d402      	bmi.n	800cbca <_puts_r+0x4e>
 800cbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbc6:	f000 f9af 	bl	800cf28 <__retarget_lock_release_recursive>
 800cbca:	4628      	mov	r0, r5
 800cbcc:	bd70      	pop	{r4, r5, r6, pc}
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	da04      	bge.n	800cbdc <_puts_r+0x60>
 800cbd2:	69a2      	ldr	r2, [r4, #24]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	dc17      	bgt.n	800cc08 <_puts_r+0x8c>
 800cbd8:	290a      	cmp	r1, #10
 800cbda:	d015      	beq.n	800cc08 <_puts_r+0x8c>
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	1c5a      	adds	r2, r3, #1
 800cbe0:	6022      	str	r2, [r4, #0]
 800cbe2:	7019      	strb	r1, [r3, #0]
 800cbe4:	68a3      	ldr	r3, [r4, #8]
 800cbe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cbea:	3b01      	subs	r3, #1
 800cbec:	60a3      	str	r3, [r4, #8]
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	d1ed      	bne.n	800cbce <_puts_r+0x52>
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	da11      	bge.n	800cc1a <_puts_r+0x9e>
 800cbf6:	4622      	mov	r2, r4
 800cbf8:	210a      	movs	r1, #10
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	f000 f881 	bl	800cd02 <__swbuf_r>
 800cc00:	3001      	adds	r0, #1
 800cc02:	d0d7      	beq.n	800cbb4 <_puts_r+0x38>
 800cc04:	250a      	movs	r5, #10
 800cc06:	e7d7      	b.n	800cbb8 <_puts_r+0x3c>
 800cc08:	4622      	mov	r2, r4
 800cc0a:	4628      	mov	r0, r5
 800cc0c:	f000 f879 	bl	800cd02 <__swbuf_r>
 800cc10:	3001      	adds	r0, #1
 800cc12:	d1e7      	bne.n	800cbe4 <_puts_r+0x68>
 800cc14:	e7ce      	b.n	800cbb4 <_puts_r+0x38>
 800cc16:	3e01      	subs	r6, #1
 800cc18:	e7e4      	b.n	800cbe4 <_puts_r+0x68>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	6022      	str	r2, [r4, #0]
 800cc20:	220a      	movs	r2, #10
 800cc22:	701a      	strb	r2, [r3, #0]
 800cc24:	e7ee      	b.n	800cc04 <_puts_r+0x88>
	...

0800cc28 <puts>:
 800cc28:	4b02      	ldr	r3, [pc, #8]	@ (800cc34 <puts+0xc>)
 800cc2a:	4601      	mov	r1, r0
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f7ff bfa5 	b.w	800cb7c <_puts_r>
 800cc32:	bf00      	nop
 800cc34:	20000114 	.word	0x20000114

0800cc38 <siprintf>:
 800cc38:	b40e      	push	{r1, r2, r3}
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	b09d      	sub	sp, #116	@ 0x74
 800cc3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cc40:	9002      	str	r0, [sp, #8]
 800cc42:	9006      	str	r0, [sp, #24]
 800cc44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cc48:	480a      	ldr	r0, [pc, #40]	@ (800cc74 <siprintf+0x3c>)
 800cc4a:	9107      	str	r1, [sp, #28]
 800cc4c:	9104      	str	r1, [sp, #16]
 800cc4e:	490a      	ldr	r1, [pc, #40]	@ (800cc78 <siprintf+0x40>)
 800cc50:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc54:	9105      	str	r1, [sp, #20]
 800cc56:	2400      	movs	r4, #0
 800cc58:	a902      	add	r1, sp, #8
 800cc5a:	6800      	ldr	r0, [r0, #0]
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cc60:	f002 fc5c 	bl	800f51c <_svfiprintf_r>
 800cc64:	9b02      	ldr	r3, [sp, #8]
 800cc66:	701c      	strb	r4, [r3, #0]
 800cc68:	b01d      	add	sp, #116	@ 0x74
 800cc6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc6e:	b003      	add	sp, #12
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	20000114 	.word	0x20000114
 800cc78:	ffff0208 	.word	0xffff0208

0800cc7c <__sread>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	460c      	mov	r4, r1
 800cc80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc84:	f000 f900 	bl	800ce88 <_read_r>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	bfab      	itete	ge
 800cc8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc8e:	89a3      	ldrhlt	r3, [r4, #12]
 800cc90:	181b      	addge	r3, r3, r0
 800cc92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc96:	bfac      	ite	ge
 800cc98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc9a:	81a3      	strhlt	r3, [r4, #12]
 800cc9c:	bd10      	pop	{r4, pc}

0800cc9e <__swrite>:
 800cc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca2:	461f      	mov	r7, r3
 800cca4:	898b      	ldrh	r3, [r1, #12]
 800cca6:	05db      	lsls	r3, r3, #23
 800cca8:	4605      	mov	r5, r0
 800ccaa:	460c      	mov	r4, r1
 800ccac:	4616      	mov	r6, r2
 800ccae:	d505      	bpl.n	800ccbc <__swrite+0x1e>
 800ccb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb4:	2302      	movs	r3, #2
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f000 f8d4 	bl	800ce64 <_lseek_r>
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	4632      	mov	r2, r6
 800ccca:	463b      	mov	r3, r7
 800cccc:	4628      	mov	r0, r5
 800ccce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd2:	f000 b8eb 	b.w	800ceac <_write_r>

0800ccd6 <__sseek>:
 800ccd6:	b510      	push	{r4, lr}
 800ccd8:	460c      	mov	r4, r1
 800ccda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccde:	f000 f8c1 	bl	800ce64 <_lseek_r>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	bf15      	itete	ne
 800cce8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ccea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ccee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccf2:	81a3      	strheq	r3, [r4, #12]
 800ccf4:	bf18      	it	ne
 800ccf6:	81a3      	strhne	r3, [r4, #12]
 800ccf8:	bd10      	pop	{r4, pc}

0800ccfa <__sclose>:
 800ccfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfe:	f000 b8a1 	b.w	800ce44 <_close_r>

0800cd02 <__swbuf_r>:
 800cd02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd04:	460e      	mov	r6, r1
 800cd06:	4614      	mov	r4, r2
 800cd08:	4605      	mov	r5, r0
 800cd0a:	b118      	cbz	r0, 800cd14 <__swbuf_r+0x12>
 800cd0c:	6a03      	ldr	r3, [r0, #32]
 800cd0e:	b90b      	cbnz	r3, 800cd14 <__swbuf_r+0x12>
 800cd10:	f7ff feec 	bl	800caec <__sinit>
 800cd14:	69a3      	ldr	r3, [r4, #24]
 800cd16:	60a3      	str	r3, [r4, #8]
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	071a      	lsls	r2, r3, #28
 800cd1c:	d501      	bpl.n	800cd22 <__swbuf_r+0x20>
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	b943      	cbnz	r3, 800cd34 <__swbuf_r+0x32>
 800cd22:	4621      	mov	r1, r4
 800cd24:	4628      	mov	r0, r5
 800cd26:	f000 f82b 	bl	800cd80 <__swsetup_r>
 800cd2a:	b118      	cbz	r0, 800cd34 <__swbuf_r+0x32>
 800cd2c:	f04f 37ff 	mov.w	r7, #4294967295
 800cd30:	4638      	mov	r0, r7
 800cd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd34:	6823      	ldr	r3, [r4, #0]
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	1a98      	subs	r0, r3, r2
 800cd3a:	6963      	ldr	r3, [r4, #20]
 800cd3c:	b2f6      	uxtb	r6, r6
 800cd3e:	4283      	cmp	r3, r0
 800cd40:	4637      	mov	r7, r6
 800cd42:	dc05      	bgt.n	800cd50 <__swbuf_r+0x4e>
 800cd44:	4621      	mov	r1, r4
 800cd46:	4628      	mov	r0, r5
 800cd48:	f002 feaa 	bl	800faa0 <_fflush_r>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d1ed      	bne.n	800cd2c <__swbuf_r+0x2a>
 800cd50:	68a3      	ldr	r3, [r4, #8]
 800cd52:	3b01      	subs	r3, #1
 800cd54:	60a3      	str	r3, [r4, #8]
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	1c5a      	adds	r2, r3, #1
 800cd5a:	6022      	str	r2, [r4, #0]
 800cd5c:	701e      	strb	r6, [r3, #0]
 800cd5e:	6962      	ldr	r2, [r4, #20]
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d004      	beq.n	800cd70 <__swbuf_r+0x6e>
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	07db      	lsls	r3, r3, #31
 800cd6a:	d5e1      	bpl.n	800cd30 <__swbuf_r+0x2e>
 800cd6c:	2e0a      	cmp	r6, #10
 800cd6e:	d1df      	bne.n	800cd30 <__swbuf_r+0x2e>
 800cd70:	4621      	mov	r1, r4
 800cd72:	4628      	mov	r0, r5
 800cd74:	f002 fe94 	bl	800faa0 <_fflush_r>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d0d9      	beq.n	800cd30 <__swbuf_r+0x2e>
 800cd7c:	e7d6      	b.n	800cd2c <__swbuf_r+0x2a>
	...

0800cd80 <__swsetup_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	4b29      	ldr	r3, [pc, #164]	@ (800ce28 <__swsetup_r+0xa8>)
 800cd84:	4605      	mov	r5, r0
 800cd86:	6818      	ldr	r0, [r3, #0]
 800cd88:	460c      	mov	r4, r1
 800cd8a:	b118      	cbz	r0, 800cd94 <__swsetup_r+0x14>
 800cd8c:	6a03      	ldr	r3, [r0, #32]
 800cd8e:	b90b      	cbnz	r3, 800cd94 <__swsetup_r+0x14>
 800cd90:	f7ff feac 	bl	800caec <__sinit>
 800cd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd98:	0719      	lsls	r1, r3, #28
 800cd9a:	d422      	bmi.n	800cde2 <__swsetup_r+0x62>
 800cd9c:	06da      	lsls	r2, r3, #27
 800cd9e:	d407      	bmi.n	800cdb0 <__swsetup_r+0x30>
 800cda0:	2209      	movs	r2, #9
 800cda2:	602a      	str	r2, [r5, #0]
 800cda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cda8:	81a3      	strh	r3, [r4, #12]
 800cdaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cdae:	e033      	b.n	800ce18 <__swsetup_r+0x98>
 800cdb0:	0758      	lsls	r0, r3, #29
 800cdb2:	d512      	bpl.n	800cdda <__swsetup_r+0x5a>
 800cdb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdb6:	b141      	cbz	r1, 800cdca <__swsetup_r+0x4a>
 800cdb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cdbc:	4299      	cmp	r1, r3
 800cdbe:	d002      	beq.n	800cdc6 <__swsetup_r+0x46>
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f000 ff21 	bl	800dc08 <_free_r>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdd0:	81a3      	strh	r3, [r4, #12]
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	6923      	ldr	r3, [r4, #16]
 800cdd8:	6023      	str	r3, [r4, #0]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f043 0308 	orr.w	r3, r3, #8
 800cde0:	81a3      	strh	r3, [r4, #12]
 800cde2:	6923      	ldr	r3, [r4, #16]
 800cde4:	b94b      	cbnz	r3, 800cdfa <__swsetup_r+0x7a>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cdec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cdf0:	d003      	beq.n	800cdfa <__swsetup_r+0x7a>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f002 fea1 	bl	800fb3c <__smakebuf_r>
 800cdfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdfe:	f013 0201 	ands.w	r2, r3, #1
 800ce02:	d00a      	beq.n	800ce1a <__swsetup_r+0x9a>
 800ce04:	2200      	movs	r2, #0
 800ce06:	60a2      	str	r2, [r4, #8]
 800ce08:	6962      	ldr	r2, [r4, #20]
 800ce0a:	4252      	negs	r2, r2
 800ce0c:	61a2      	str	r2, [r4, #24]
 800ce0e:	6922      	ldr	r2, [r4, #16]
 800ce10:	b942      	cbnz	r2, 800ce24 <__swsetup_r+0xa4>
 800ce12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce16:	d1c5      	bne.n	800cda4 <__swsetup_r+0x24>
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	0799      	lsls	r1, r3, #30
 800ce1c:	bf58      	it	pl
 800ce1e:	6962      	ldrpl	r2, [r4, #20]
 800ce20:	60a2      	str	r2, [r4, #8]
 800ce22:	e7f4      	b.n	800ce0e <__swsetup_r+0x8e>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e7f7      	b.n	800ce18 <__swsetup_r+0x98>
 800ce28:	20000114 	.word	0x20000114

0800ce2c <memset>:
 800ce2c:	4402      	add	r2, r0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d100      	bne.n	800ce36 <memset+0xa>
 800ce34:	4770      	bx	lr
 800ce36:	f803 1b01 	strb.w	r1, [r3], #1
 800ce3a:	e7f9      	b.n	800ce30 <memset+0x4>

0800ce3c <_localeconv_r>:
 800ce3c:	4800      	ldr	r0, [pc, #0]	@ (800ce40 <_localeconv_r+0x4>)
 800ce3e:	4770      	bx	lr
 800ce40:	20000254 	.word	0x20000254

0800ce44 <_close_r>:
 800ce44:	b538      	push	{r3, r4, r5, lr}
 800ce46:	4d06      	ldr	r5, [pc, #24]	@ (800ce60 <_close_r+0x1c>)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4604      	mov	r4, r0
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	602b      	str	r3, [r5, #0]
 800ce50:	f7f4 fc6a 	bl	8001728 <_close>
 800ce54:	1c43      	adds	r3, r0, #1
 800ce56:	d102      	bne.n	800ce5e <_close_r+0x1a>
 800ce58:	682b      	ldr	r3, [r5, #0]
 800ce5a:	b103      	cbz	r3, 800ce5e <_close_r+0x1a>
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	bd38      	pop	{r3, r4, r5, pc}
 800ce60:	20002238 	.word	0x20002238

0800ce64 <_lseek_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d07      	ldr	r5, [pc, #28]	@ (800ce84 <_lseek_r+0x20>)
 800ce68:	4604      	mov	r4, r0
 800ce6a:	4608      	mov	r0, r1
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	f7f4 fc7f 	bl	8001776 <_lseek>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_lseek_r+0x1e>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_lseek_r+0x1e>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	20002238 	.word	0x20002238

0800ce88 <_read_r>:
 800ce88:	b538      	push	{r3, r4, r5, lr}
 800ce8a:	4d07      	ldr	r5, [pc, #28]	@ (800cea8 <_read_r+0x20>)
 800ce8c:	4604      	mov	r4, r0
 800ce8e:	4608      	mov	r0, r1
 800ce90:	4611      	mov	r1, r2
 800ce92:	2200      	movs	r2, #0
 800ce94:	602a      	str	r2, [r5, #0]
 800ce96:	461a      	mov	r2, r3
 800ce98:	f7f4 fc29 	bl	80016ee <_read>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_read_r+0x1e>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_read_r+0x1e>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20002238 	.word	0x20002238

0800ceac <_write_r>:
 800ceac:	b538      	push	{r3, r4, r5, lr}
 800ceae:	4d07      	ldr	r5, [pc, #28]	@ (800cecc <_write_r+0x20>)
 800ceb0:	4604      	mov	r4, r0
 800ceb2:	4608      	mov	r0, r1
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	602a      	str	r2, [r5, #0]
 800ceba:	461a      	mov	r2, r3
 800cebc:	f7f4 fa7e 	bl	80013bc <_write>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d102      	bne.n	800ceca <_write_r+0x1e>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	b103      	cbz	r3, 800ceca <_write_r+0x1e>
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
 800cecc:	20002238 	.word	0x20002238

0800ced0 <__errno>:
 800ced0:	4b01      	ldr	r3, [pc, #4]	@ (800ced8 <__errno+0x8>)
 800ced2:	6818      	ldr	r0, [r3, #0]
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20000114 	.word	0x20000114

0800cedc <__libc_init_array>:
 800cedc:	b570      	push	{r4, r5, r6, lr}
 800cede:	4d0d      	ldr	r5, [pc, #52]	@ (800cf14 <__libc_init_array+0x38>)
 800cee0:	4c0d      	ldr	r4, [pc, #52]	@ (800cf18 <__libc_init_array+0x3c>)
 800cee2:	1b64      	subs	r4, r4, r5
 800cee4:	10a4      	asrs	r4, r4, #2
 800cee6:	2600      	movs	r6, #0
 800cee8:	42a6      	cmp	r6, r4
 800ceea:	d109      	bne.n	800cf00 <__libc_init_array+0x24>
 800ceec:	4d0b      	ldr	r5, [pc, #44]	@ (800cf1c <__libc_init_array+0x40>)
 800ceee:	4c0c      	ldr	r4, [pc, #48]	@ (800cf20 <__libc_init_array+0x44>)
 800cef0:	f003 faf2 	bl	80104d8 <_init>
 800cef4:	1b64      	subs	r4, r4, r5
 800cef6:	10a4      	asrs	r4, r4, #2
 800cef8:	2600      	movs	r6, #0
 800cefa:	42a6      	cmp	r6, r4
 800cefc:	d105      	bne.n	800cf0a <__libc_init_array+0x2e>
 800cefe:	bd70      	pop	{r4, r5, r6, pc}
 800cf00:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf04:	4798      	blx	r3
 800cf06:	3601      	adds	r6, #1
 800cf08:	e7ee      	b.n	800cee8 <__libc_init_array+0xc>
 800cf0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf0e:	4798      	blx	r3
 800cf10:	3601      	adds	r6, #1
 800cf12:	e7f2      	b.n	800cefa <__libc_init_array+0x1e>
 800cf14:	08010b0c 	.word	0x08010b0c
 800cf18:	08010b0c 	.word	0x08010b0c
 800cf1c:	08010b0c 	.word	0x08010b0c
 800cf20:	08010b10 	.word	0x08010b10

0800cf24 <__retarget_lock_init_recursive>:
 800cf24:	4770      	bx	lr

0800cf26 <__retarget_lock_acquire_recursive>:
 800cf26:	4770      	bx	lr

0800cf28 <__retarget_lock_release_recursive>:
 800cf28:	4770      	bx	lr

0800cf2a <memcpy>:
 800cf2a:	440a      	add	r2, r1
 800cf2c:	4291      	cmp	r1, r2
 800cf2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf32:	d100      	bne.n	800cf36 <memcpy+0xc>
 800cf34:	4770      	bx	lr
 800cf36:	b510      	push	{r4, lr}
 800cf38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf40:	4291      	cmp	r1, r2
 800cf42:	d1f9      	bne.n	800cf38 <memcpy+0xe>
 800cf44:	bd10      	pop	{r4, pc}
	...

0800cf48 <nanf>:
 800cf48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cf50 <nanf+0x8>
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	7fc00000 	.word	0x7fc00000

0800cf54 <quorem>:
 800cf54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf58:	6903      	ldr	r3, [r0, #16]
 800cf5a:	690c      	ldr	r4, [r1, #16]
 800cf5c:	42a3      	cmp	r3, r4
 800cf5e:	4607      	mov	r7, r0
 800cf60:	db7e      	blt.n	800d060 <quorem+0x10c>
 800cf62:	3c01      	subs	r4, #1
 800cf64:	f101 0814 	add.w	r8, r1, #20
 800cf68:	00a3      	lsls	r3, r4, #2
 800cf6a:	f100 0514 	add.w	r5, r0, #20
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf74:	9301      	str	r3, [sp, #4]
 800cf76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	429a      	cmp	r2, r3
 800cf82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf86:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf8a:	d32e      	bcc.n	800cfea <quorem+0x96>
 800cf8c:	f04f 0a00 	mov.w	sl, #0
 800cf90:	46c4      	mov	ip, r8
 800cf92:	46ae      	mov	lr, r5
 800cf94:	46d3      	mov	fp, sl
 800cf96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cf9a:	b298      	uxth	r0, r3
 800cf9c:	fb06 a000 	mla	r0, r6, r0, sl
 800cfa0:	0c02      	lsrs	r2, r0, #16
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	fb06 2303 	mla	r3, r6, r3, r2
 800cfa8:	f8de 2000 	ldr.w	r2, [lr]
 800cfac:	b280      	uxth	r0, r0
 800cfae:	b292      	uxth	r2, r2
 800cfb0:	1a12      	subs	r2, r2, r0
 800cfb2:	445a      	add	r2, fp
 800cfb4:	f8de 0000 	ldr.w	r0, [lr]
 800cfb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfbc:	b29b      	uxth	r3, r3
 800cfbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cfc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cfc6:	b292      	uxth	r2, r2
 800cfc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cfcc:	45e1      	cmp	r9, ip
 800cfce:	f84e 2b04 	str.w	r2, [lr], #4
 800cfd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cfd6:	d2de      	bcs.n	800cf96 <quorem+0x42>
 800cfd8:	9b00      	ldr	r3, [sp, #0]
 800cfda:	58eb      	ldr	r3, [r5, r3]
 800cfdc:	b92b      	cbnz	r3, 800cfea <quorem+0x96>
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	3b04      	subs	r3, #4
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	d32f      	bcc.n	800d048 <quorem+0xf4>
 800cfe8:	613c      	str	r4, [r7, #16]
 800cfea:	4638      	mov	r0, r7
 800cfec:	f001 f9c8 	bl	800e380 <__mcmp>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	db25      	blt.n	800d040 <quorem+0xec>
 800cff4:	4629      	mov	r1, r5
 800cff6:	2000      	movs	r0, #0
 800cff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cffc:	f8d1 c000 	ldr.w	ip, [r1]
 800d000:	fa1f fe82 	uxth.w	lr, r2
 800d004:	fa1f f38c 	uxth.w	r3, ip
 800d008:	eba3 030e 	sub.w	r3, r3, lr
 800d00c:	4403      	add	r3, r0
 800d00e:	0c12      	lsrs	r2, r2, #16
 800d010:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d014:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d018:	b29b      	uxth	r3, r3
 800d01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d01e:	45c1      	cmp	r9, r8
 800d020:	f841 3b04 	str.w	r3, [r1], #4
 800d024:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d028:	d2e6      	bcs.n	800cff8 <quorem+0xa4>
 800d02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d032:	b922      	cbnz	r2, 800d03e <quorem+0xea>
 800d034:	3b04      	subs	r3, #4
 800d036:	429d      	cmp	r5, r3
 800d038:	461a      	mov	r2, r3
 800d03a:	d30b      	bcc.n	800d054 <quorem+0x100>
 800d03c:	613c      	str	r4, [r7, #16]
 800d03e:	3601      	adds	r6, #1
 800d040:	4630      	mov	r0, r6
 800d042:	b003      	add	sp, #12
 800d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d048:	6812      	ldr	r2, [r2, #0]
 800d04a:	3b04      	subs	r3, #4
 800d04c:	2a00      	cmp	r2, #0
 800d04e:	d1cb      	bne.n	800cfe8 <quorem+0x94>
 800d050:	3c01      	subs	r4, #1
 800d052:	e7c6      	b.n	800cfe2 <quorem+0x8e>
 800d054:	6812      	ldr	r2, [r2, #0]
 800d056:	3b04      	subs	r3, #4
 800d058:	2a00      	cmp	r2, #0
 800d05a:	d1ef      	bne.n	800d03c <quorem+0xe8>
 800d05c:	3c01      	subs	r4, #1
 800d05e:	e7ea      	b.n	800d036 <quorem+0xe2>
 800d060:	2000      	movs	r0, #0
 800d062:	e7ee      	b.n	800d042 <quorem+0xee>
 800d064:	0000      	movs	r0, r0
	...

0800d068 <_dtoa_r>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	69c7      	ldr	r7, [r0, #28]
 800d06e:	b097      	sub	sp, #92	@ 0x5c
 800d070:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d074:	ec55 4b10 	vmov	r4, r5, d0
 800d078:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d07a:	9107      	str	r1, [sp, #28]
 800d07c:	4681      	mov	r9, r0
 800d07e:	920c      	str	r2, [sp, #48]	@ 0x30
 800d080:	9311      	str	r3, [sp, #68]	@ 0x44
 800d082:	b97f      	cbnz	r7, 800d0a4 <_dtoa_r+0x3c>
 800d084:	2010      	movs	r0, #16
 800d086:	f000 fe09 	bl	800dc9c <malloc>
 800d08a:	4602      	mov	r2, r0
 800d08c:	f8c9 001c 	str.w	r0, [r9, #28]
 800d090:	b920      	cbnz	r0, 800d09c <_dtoa_r+0x34>
 800d092:	4ba9      	ldr	r3, [pc, #676]	@ (800d338 <_dtoa_r+0x2d0>)
 800d094:	21ef      	movs	r1, #239	@ 0xef
 800d096:	48a9      	ldr	r0, [pc, #676]	@ (800d33c <_dtoa_r+0x2d4>)
 800d098:	f002 fdf2 	bl	800fc80 <__assert_func>
 800d09c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d0a0:	6007      	str	r7, [r0, #0]
 800d0a2:	60c7      	str	r7, [r0, #12]
 800d0a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d0a8:	6819      	ldr	r1, [r3, #0]
 800d0aa:	b159      	cbz	r1, 800d0c4 <_dtoa_r+0x5c>
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	604a      	str	r2, [r1, #4]
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	4093      	lsls	r3, r2
 800d0b4:	608b      	str	r3, [r1, #8]
 800d0b6:	4648      	mov	r0, r9
 800d0b8:	f000 fee6 	bl	800de88 <_Bfree>
 800d0bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	1e2b      	subs	r3, r5, #0
 800d0c6:	bfb9      	ittee	lt
 800d0c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d0cc:	9305      	strlt	r3, [sp, #20]
 800d0ce:	2300      	movge	r3, #0
 800d0d0:	6033      	strge	r3, [r6, #0]
 800d0d2:	9f05      	ldr	r7, [sp, #20]
 800d0d4:	4b9a      	ldr	r3, [pc, #616]	@ (800d340 <_dtoa_r+0x2d8>)
 800d0d6:	bfbc      	itt	lt
 800d0d8:	2201      	movlt	r2, #1
 800d0da:	6032      	strlt	r2, [r6, #0]
 800d0dc:	43bb      	bics	r3, r7
 800d0de:	d112      	bne.n	800d106 <_dtoa_r+0x9e>
 800d0e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d0e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d0ec:	4323      	orrs	r3, r4
 800d0ee:	f000 855a 	beq.w	800dba6 <_dtoa_r+0xb3e>
 800d0f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d0f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d354 <_dtoa_r+0x2ec>
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 855c 	beq.w	800dbb6 <_dtoa_r+0xb4e>
 800d0fe:	f10a 0303 	add.w	r3, sl, #3
 800d102:	f000 bd56 	b.w	800dbb2 <_dtoa_r+0xb4a>
 800d106:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d10a:	2200      	movs	r2, #0
 800d10c:	ec51 0b17 	vmov	r0, r1, d7
 800d110:	2300      	movs	r3, #0
 800d112:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d116:	f7f3 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d11a:	4680      	mov	r8, r0
 800d11c:	b158      	cbz	r0, 800d136 <_dtoa_r+0xce>
 800d11e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d120:	2301      	movs	r3, #1
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d126:	b113      	cbz	r3, 800d12e <_dtoa_r+0xc6>
 800d128:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d12a:	4b86      	ldr	r3, [pc, #536]	@ (800d344 <_dtoa_r+0x2dc>)
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d358 <_dtoa_r+0x2f0>
 800d132:	f000 bd40 	b.w	800dbb6 <_dtoa_r+0xb4e>
 800d136:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d13a:	aa14      	add	r2, sp, #80	@ 0x50
 800d13c:	a915      	add	r1, sp, #84	@ 0x54
 800d13e:	4648      	mov	r0, r9
 800d140:	f001 fa3e 	bl	800e5c0 <__d2b>
 800d144:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d148:	9002      	str	r0, [sp, #8]
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	d078      	beq.n	800d240 <_dtoa_r+0x1d8>
 800d14e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d150:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d15c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d160:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d164:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d168:	4619      	mov	r1, r3
 800d16a:	2200      	movs	r2, #0
 800d16c:	4b76      	ldr	r3, [pc, #472]	@ (800d348 <_dtoa_r+0x2e0>)
 800d16e:	f7f3 f88b 	bl	8000288 <__aeabi_dsub>
 800d172:	a36b      	add	r3, pc, #428	@ (adr r3, 800d320 <_dtoa_r+0x2b8>)
 800d174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d178:	f7f3 fa3e 	bl	80005f8 <__aeabi_dmul>
 800d17c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d328 <_dtoa_r+0x2c0>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	f7f3 f883 	bl	800028c <__adddf3>
 800d186:	4604      	mov	r4, r0
 800d188:	4630      	mov	r0, r6
 800d18a:	460d      	mov	r5, r1
 800d18c:	f7f3 f9ca 	bl	8000524 <__aeabi_i2d>
 800d190:	a367      	add	r3, pc, #412	@ (adr r3, 800d330 <_dtoa_r+0x2c8>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 fa2f 	bl	80005f8 <__aeabi_dmul>
 800d19a:	4602      	mov	r2, r0
 800d19c:	460b      	mov	r3, r1
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	f7f3 f873 	bl	800028c <__adddf3>
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	460d      	mov	r5, r1
 800d1aa:	f7f3 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 fc90 	bl	8000adc <__aeabi_dcmplt>
 800d1bc:	b140      	cbz	r0, 800d1d0 <_dtoa_r+0x168>
 800d1be:	4638      	mov	r0, r7
 800d1c0:	f7f3 f9b0 	bl	8000524 <__aeabi_i2d>
 800d1c4:	4622      	mov	r2, r4
 800d1c6:	462b      	mov	r3, r5
 800d1c8:	f7f3 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1cc:	b900      	cbnz	r0, 800d1d0 <_dtoa_r+0x168>
 800d1ce:	3f01      	subs	r7, #1
 800d1d0:	2f16      	cmp	r7, #22
 800d1d2:	d852      	bhi.n	800d27a <_dtoa_r+0x212>
 800d1d4:	4b5d      	ldr	r3, [pc, #372]	@ (800d34c <_dtoa_r+0x2e4>)
 800d1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d1e2:	f7f3 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	d049      	beq.n	800d27e <_dtoa_r+0x216>
 800d1ea:	3f01      	subs	r7, #1
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1f2:	1b9b      	subs	r3, r3, r6
 800d1f4:	1e5a      	subs	r2, r3, #1
 800d1f6:	bf45      	ittet	mi
 800d1f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d1fc:	9300      	strmi	r3, [sp, #0]
 800d1fe:	2300      	movpl	r3, #0
 800d200:	2300      	movmi	r3, #0
 800d202:	9206      	str	r2, [sp, #24]
 800d204:	bf54      	ite	pl
 800d206:	9300      	strpl	r3, [sp, #0]
 800d208:	9306      	strmi	r3, [sp, #24]
 800d20a:	2f00      	cmp	r7, #0
 800d20c:	db39      	blt.n	800d282 <_dtoa_r+0x21a>
 800d20e:	9b06      	ldr	r3, [sp, #24]
 800d210:	970d      	str	r7, [sp, #52]	@ 0x34
 800d212:	443b      	add	r3, r7
 800d214:	9306      	str	r3, [sp, #24]
 800d216:	2300      	movs	r3, #0
 800d218:	9308      	str	r3, [sp, #32]
 800d21a:	9b07      	ldr	r3, [sp, #28]
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d863      	bhi.n	800d2e8 <_dtoa_r+0x280>
 800d220:	2b05      	cmp	r3, #5
 800d222:	bfc4      	itt	gt
 800d224:	3b04      	subgt	r3, #4
 800d226:	9307      	strgt	r3, [sp, #28]
 800d228:	9b07      	ldr	r3, [sp, #28]
 800d22a:	f1a3 0302 	sub.w	r3, r3, #2
 800d22e:	bfcc      	ite	gt
 800d230:	2400      	movgt	r4, #0
 800d232:	2401      	movle	r4, #1
 800d234:	2b03      	cmp	r3, #3
 800d236:	d863      	bhi.n	800d300 <_dtoa_r+0x298>
 800d238:	e8df f003 	tbb	[pc, r3]
 800d23c:	2b375452 	.word	0x2b375452
 800d240:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d244:	441e      	add	r6, r3
 800d246:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d24a:	2b20      	cmp	r3, #32
 800d24c:	bfc1      	itttt	gt
 800d24e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d252:	409f      	lslgt	r7, r3
 800d254:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d258:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d25c:	bfd6      	itet	le
 800d25e:	f1c3 0320 	rsble	r3, r3, #32
 800d262:	ea47 0003 	orrgt.w	r0, r7, r3
 800d266:	fa04 f003 	lslle.w	r0, r4, r3
 800d26a:	f7f3 f94b 	bl	8000504 <__aeabi_ui2d>
 800d26e:	2201      	movs	r2, #1
 800d270:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d274:	3e01      	subs	r6, #1
 800d276:	9212      	str	r2, [sp, #72]	@ 0x48
 800d278:	e776      	b.n	800d168 <_dtoa_r+0x100>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e7b7      	b.n	800d1ee <_dtoa_r+0x186>
 800d27e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d280:	e7b6      	b.n	800d1f0 <_dtoa_r+0x188>
 800d282:	9b00      	ldr	r3, [sp, #0]
 800d284:	1bdb      	subs	r3, r3, r7
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	427b      	negs	r3, r7
 800d28a:	9308      	str	r3, [sp, #32]
 800d28c:	2300      	movs	r3, #0
 800d28e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d290:	e7c3      	b.n	800d21a <_dtoa_r+0x1b2>
 800d292:	2301      	movs	r3, #1
 800d294:	9309      	str	r3, [sp, #36]	@ 0x24
 800d296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d298:	eb07 0b03 	add.w	fp, r7, r3
 800d29c:	f10b 0301 	add.w	r3, fp, #1
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	9303      	str	r3, [sp, #12]
 800d2a4:	bfb8      	it	lt
 800d2a6:	2301      	movlt	r3, #1
 800d2a8:	e006      	b.n	800d2b8 <_dtoa_r+0x250>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	dd28      	ble.n	800d306 <_dtoa_r+0x29e>
 800d2b4:	469b      	mov	fp, r3
 800d2b6:	9303      	str	r3, [sp, #12]
 800d2b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d2bc:	2100      	movs	r1, #0
 800d2be:	2204      	movs	r2, #4
 800d2c0:	f102 0514 	add.w	r5, r2, #20
 800d2c4:	429d      	cmp	r5, r3
 800d2c6:	d926      	bls.n	800d316 <_dtoa_r+0x2ae>
 800d2c8:	6041      	str	r1, [r0, #4]
 800d2ca:	4648      	mov	r0, r9
 800d2cc:	f000 fd9c 	bl	800de08 <_Balloc>
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d142      	bne.n	800d35c <_dtoa_r+0x2f4>
 800d2d6:	4b1e      	ldr	r3, [pc, #120]	@ (800d350 <_dtoa_r+0x2e8>)
 800d2d8:	4602      	mov	r2, r0
 800d2da:	f240 11af 	movw	r1, #431	@ 0x1af
 800d2de:	e6da      	b.n	800d096 <_dtoa_r+0x2e>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e7e3      	b.n	800d2ac <_dtoa_r+0x244>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e7d5      	b.n	800d294 <_dtoa_r+0x22c>
 800d2e8:	2401      	movs	r4, #1
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	9307      	str	r3, [sp, #28]
 800d2ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800d2f0:	f04f 3bff 	mov.w	fp, #4294967295
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d2fa:	2312      	movs	r3, #18
 800d2fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d2fe:	e7db      	b.n	800d2b8 <_dtoa_r+0x250>
 800d300:	2301      	movs	r3, #1
 800d302:	9309      	str	r3, [sp, #36]	@ 0x24
 800d304:	e7f4      	b.n	800d2f0 <_dtoa_r+0x288>
 800d306:	f04f 0b01 	mov.w	fp, #1
 800d30a:	f8cd b00c 	str.w	fp, [sp, #12]
 800d30e:	465b      	mov	r3, fp
 800d310:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d314:	e7d0      	b.n	800d2b8 <_dtoa_r+0x250>
 800d316:	3101      	adds	r1, #1
 800d318:	0052      	lsls	r2, r2, #1
 800d31a:	e7d1      	b.n	800d2c0 <_dtoa_r+0x258>
 800d31c:	f3af 8000 	nop.w
 800d320:	636f4361 	.word	0x636f4361
 800d324:	3fd287a7 	.word	0x3fd287a7
 800d328:	8b60c8b3 	.word	0x8b60c8b3
 800d32c:	3fc68a28 	.word	0x3fc68a28
 800d330:	509f79fb 	.word	0x509f79fb
 800d334:	3fd34413 	.word	0x3fd34413
 800d338:	0801071e 	.word	0x0801071e
 800d33c:	08010735 	.word	0x08010735
 800d340:	7ff00000 	.word	0x7ff00000
 800d344:	080106e9 	.word	0x080106e9
 800d348:	3ff80000 	.word	0x3ff80000
 800d34c:	080108e8 	.word	0x080108e8
 800d350:	0801078d 	.word	0x0801078d
 800d354:	0801071a 	.word	0x0801071a
 800d358:	080106e8 	.word	0x080106e8
 800d35c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d360:	6018      	str	r0, [r3, #0]
 800d362:	9b03      	ldr	r3, [sp, #12]
 800d364:	2b0e      	cmp	r3, #14
 800d366:	f200 80a1 	bhi.w	800d4ac <_dtoa_r+0x444>
 800d36a:	2c00      	cmp	r4, #0
 800d36c:	f000 809e 	beq.w	800d4ac <_dtoa_r+0x444>
 800d370:	2f00      	cmp	r7, #0
 800d372:	dd33      	ble.n	800d3dc <_dtoa_r+0x374>
 800d374:	4b9c      	ldr	r3, [pc, #624]	@ (800d5e8 <_dtoa_r+0x580>)
 800d376:	f007 020f 	and.w	r2, r7, #15
 800d37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d37e:	ed93 7b00 	vldr	d7, [r3]
 800d382:	05f8      	lsls	r0, r7, #23
 800d384:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d38c:	d516      	bpl.n	800d3bc <_dtoa_r+0x354>
 800d38e:	4b97      	ldr	r3, [pc, #604]	@ (800d5ec <_dtoa_r+0x584>)
 800d390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d398:	f7f3 fa58 	bl	800084c <__aeabi_ddiv>
 800d39c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3a0:	f004 040f 	and.w	r4, r4, #15
 800d3a4:	2603      	movs	r6, #3
 800d3a6:	4d91      	ldr	r5, [pc, #580]	@ (800d5ec <_dtoa_r+0x584>)
 800d3a8:	b954      	cbnz	r4, 800d3c0 <_dtoa_r+0x358>
 800d3aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d3ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d3b2:	f7f3 fa4b 	bl	800084c <__aeabi_ddiv>
 800d3b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3ba:	e028      	b.n	800d40e <_dtoa_r+0x3a6>
 800d3bc:	2602      	movs	r6, #2
 800d3be:	e7f2      	b.n	800d3a6 <_dtoa_r+0x33e>
 800d3c0:	07e1      	lsls	r1, r4, #31
 800d3c2:	d508      	bpl.n	800d3d6 <_dtoa_r+0x36e>
 800d3c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d3c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3cc:	f7f3 f914 	bl	80005f8 <__aeabi_dmul>
 800d3d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d3d4:	3601      	adds	r6, #1
 800d3d6:	1064      	asrs	r4, r4, #1
 800d3d8:	3508      	adds	r5, #8
 800d3da:	e7e5      	b.n	800d3a8 <_dtoa_r+0x340>
 800d3dc:	f000 80af 	beq.w	800d53e <_dtoa_r+0x4d6>
 800d3e0:	427c      	negs	r4, r7
 800d3e2:	4b81      	ldr	r3, [pc, #516]	@ (800d5e8 <_dtoa_r+0x580>)
 800d3e4:	4d81      	ldr	r5, [pc, #516]	@ (800d5ec <_dtoa_r+0x584>)
 800d3e6:	f004 020f 	and.w	r2, r4, #15
 800d3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d3f6:	f7f3 f8ff 	bl	80005f8 <__aeabi_dmul>
 800d3fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3fe:	1124      	asrs	r4, r4, #4
 800d400:	2300      	movs	r3, #0
 800d402:	2602      	movs	r6, #2
 800d404:	2c00      	cmp	r4, #0
 800d406:	f040 808f 	bne.w	800d528 <_dtoa_r+0x4c0>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1d3      	bne.n	800d3b6 <_dtoa_r+0x34e>
 800d40e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d410:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	f000 8094 	beq.w	800d542 <_dtoa_r+0x4da>
 800d41a:	4b75      	ldr	r3, [pc, #468]	@ (800d5f0 <_dtoa_r+0x588>)
 800d41c:	2200      	movs	r2, #0
 800d41e:	4620      	mov	r0, r4
 800d420:	4629      	mov	r1, r5
 800d422:	f7f3 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800d426:	2800      	cmp	r0, #0
 800d428:	f000 808b 	beq.w	800d542 <_dtoa_r+0x4da>
 800d42c:	9b03      	ldr	r3, [sp, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 8087 	beq.w	800d542 <_dtoa_r+0x4da>
 800d434:	f1bb 0f00 	cmp.w	fp, #0
 800d438:	dd34      	ble.n	800d4a4 <_dtoa_r+0x43c>
 800d43a:	4620      	mov	r0, r4
 800d43c:	4b6d      	ldr	r3, [pc, #436]	@ (800d5f4 <_dtoa_r+0x58c>)
 800d43e:	2200      	movs	r2, #0
 800d440:	4629      	mov	r1, r5
 800d442:	f7f3 f8d9 	bl	80005f8 <__aeabi_dmul>
 800d446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d44a:	f107 38ff 	add.w	r8, r7, #4294967295
 800d44e:	3601      	adds	r6, #1
 800d450:	465c      	mov	r4, fp
 800d452:	4630      	mov	r0, r6
 800d454:	f7f3 f866 	bl	8000524 <__aeabi_i2d>
 800d458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d45c:	f7f3 f8cc 	bl	80005f8 <__aeabi_dmul>
 800d460:	4b65      	ldr	r3, [pc, #404]	@ (800d5f8 <_dtoa_r+0x590>)
 800d462:	2200      	movs	r2, #0
 800d464:	f7f2 ff12 	bl	800028c <__adddf3>
 800d468:	4605      	mov	r5, r0
 800d46a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d46e:	2c00      	cmp	r4, #0
 800d470:	d16a      	bne.n	800d548 <_dtoa_r+0x4e0>
 800d472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d476:	4b61      	ldr	r3, [pc, #388]	@ (800d5fc <_dtoa_r+0x594>)
 800d478:	2200      	movs	r2, #0
 800d47a:	f7f2 ff05 	bl	8000288 <__aeabi_dsub>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d486:	462a      	mov	r2, r5
 800d488:	4633      	mov	r3, r6
 800d48a:	f7f3 fb45 	bl	8000b18 <__aeabi_dcmpgt>
 800d48e:	2800      	cmp	r0, #0
 800d490:	f040 8298 	bne.w	800d9c4 <_dtoa_r+0x95c>
 800d494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d498:	462a      	mov	r2, r5
 800d49a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d49e:	f7f3 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800d4a2:	bb38      	cbnz	r0, 800d4f4 <_dtoa_r+0x48c>
 800d4a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d4a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d4ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f2c0 8157 	blt.w	800d762 <_dtoa_r+0x6fa>
 800d4b4:	2f0e      	cmp	r7, #14
 800d4b6:	f300 8154 	bgt.w	800d762 <_dtoa_r+0x6fa>
 800d4ba:	4b4b      	ldr	r3, [pc, #300]	@ (800d5e8 <_dtoa_r+0x580>)
 800d4bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4c0:	ed93 7b00 	vldr	d7, [r3]
 800d4c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	ed8d 7b00 	vstr	d7, [sp]
 800d4cc:	f280 80e5 	bge.w	800d69a <_dtoa_r+0x632>
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f300 80e1 	bgt.w	800d69a <_dtoa_r+0x632>
 800d4d8:	d10c      	bne.n	800d4f4 <_dtoa_r+0x48c>
 800d4da:	4b48      	ldr	r3, [pc, #288]	@ (800d5fc <_dtoa_r+0x594>)
 800d4dc:	2200      	movs	r2, #0
 800d4de:	ec51 0b17 	vmov	r0, r1, d7
 800d4e2:	f7f3 f889 	bl	80005f8 <__aeabi_dmul>
 800d4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ea:	f7f3 fb0b 	bl	8000b04 <__aeabi_dcmpge>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f000 8266 	beq.w	800d9c0 <_dtoa_r+0x958>
 800d4f4:	2400      	movs	r4, #0
 800d4f6:	4625      	mov	r5, r4
 800d4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4fa:	4656      	mov	r6, sl
 800d4fc:	ea6f 0803 	mvn.w	r8, r3
 800d500:	2700      	movs	r7, #0
 800d502:	4621      	mov	r1, r4
 800d504:	4648      	mov	r0, r9
 800d506:	f000 fcbf 	bl	800de88 <_Bfree>
 800d50a:	2d00      	cmp	r5, #0
 800d50c:	f000 80bd 	beq.w	800d68a <_dtoa_r+0x622>
 800d510:	b12f      	cbz	r7, 800d51e <_dtoa_r+0x4b6>
 800d512:	42af      	cmp	r7, r5
 800d514:	d003      	beq.n	800d51e <_dtoa_r+0x4b6>
 800d516:	4639      	mov	r1, r7
 800d518:	4648      	mov	r0, r9
 800d51a:	f000 fcb5 	bl	800de88 <_Bfree>
 800d51e:	4629      	mov	r1, r5
 800d520:	4648      	mov	r0, r9
 800d522:	f000 fcb1 	bl	800de88 <_Bfree>
 800d526:	e0b0      	b.n	800d68a <_dtoa_r+0x622>
 800d528:	07e2      	lsls	r2, r4, #31
 800d52a:	d505      	bpl.n	800d538 <_dtoa_r+0x4d0>
 800d52c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d530:	f7f3 f862 	bl	80005f8 <__aeabi_dmul>
 800d534:	3601      	adds	r6, #1
 800d536:	2301      	movs	r3, #1
 800d538:	1064      	asrs	r4, r4, #1
 800d53a:	3508      	adds	r5, #8
 800d53c:	e762      	b.n	800d404 <_dtoa_r+0x39c>
 800d53e:	2602      	movs	r6, #2
 800d540:	e765      	b.n	800d40e <_dtoa_r+0x3a6>
 800d542:	9c03      	ldr	r4, [sp, #12]
 800d544:	46b8      	mov	r8, r7
 800d546:	e784      	b.n	800d452 <_dtoa_r+0x3ea>
 800d548:	4b27      	ldr	r3, [pc, #156]	@ (800d5e8 <_dtoa_r+0x580>)
 800d54a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d554:	4454      	add	r4, sl
 800d556:	2900      	cmp	r1, #0
 800d558:	d054      	beq.n	800d604 <_dtoa_r+0x59c>
 800d55a:	4929      	ldr	r1, [pc, #164]	@ (800d600 <_dtoa_r+0x598>)
 800d55c:	2000      	movs	r0, #0
 800d55e:	f7f3 f975 	bl	800084c <__aeabi_ddiv>
 800d562:	4633      	mov	r3, r6
 800d564:	462a      	mov	r2, r5
 800d566:	f7f2 fe8f 	bl	8000288 <__aeabi_dsub>
 800d56a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d56e:	4656      	mov	r6, sl
 800d570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d574:	f7f3 faf0 	bl	8000b58 <__aeabi_d2iz>
 800d578:	4605      	mov	r5, r0
 800d57a:	f7f2 ffd3 	bl	8000524 <__aeabi_i2d>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	3530      	adds	r5, #48	@ 0x30
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d594:	f806 5b01 	strb.w	r5, [r6], #1
 800d598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d59c:	f7f3 fa9e 	bl	8000adc <__aeabi_dcmplt>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d172      	bne.n	800d68a <_dtoa_r+0x622>
 800d5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5a8:	4911      	ldr	r1, [pc, #68]	@ (800d5f0 <_dtoa_r+0x588>)
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	f7f2 fe6c 	bl	8000288 <__aeabi_dsub>
 800d5b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d5b4:	f7f3 fa92 	bl	8000adc <__aeabi_dcmplt>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	f040 80b4 	bne.w	800d726 <_dtoa_r+0x6be>
 800d5be:	42a6      	cmp	r6, r4
 800d5c0:	f43f af70 	beq.w	800d4a4 <_dtoa_r+0x43c>
 800d5c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f4 <_dtoa_r+0x58c>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f7f3 f814 	bl	80005f8 <__aeabi_dmul>
 800d5d0:	4b08      	ldr	r3, [pc, #32]	@ (800d5f4 <_dtoa_r+0x58c>)
 800d5d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5dc:	f7f3 f80c 	bl	80005f8 <__aeabi_dmul>
 800d5e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5e4:	e7c4      	b.n	800d570 <_dtoa_r+0x508>
 800d5e6:	bf00      	nop
 800d5e8:	080108e8 	.word	0x080108e8
 800d5ec:	080108c0 	.word	0x080108c0
 800d5f0:	3ff00000 	.word	0x3ff00000
 800d5f4:	40240000 	.word	0x40240000
 800d5f8:	401c0000 	.word	0x401c0000
 800d5fc:	40140000 	.word	0x40140000
 800d600:	3fe00000 	.word	0x3fe00000
 800d604:	4631      	mov	r1, r6
 800d606:	4628      	mov	r0, r5
 800d608:	f7f2 fff6 	bl	80005f8 <__aeabi_dmul>
 800d60c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d610:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d612:	4656      	mov	r6, sl
 800d614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d618:	f7f3 fa9e 	bl	8000b58 <__aeabi_d2iz>
 800d61c:	4605      	mov	r5, r0
 800d61e:	f7f2 ff81 	bl	8000524 <__aeabi_i2d>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d62a:	f7f2 fe2d 	bl	8000288 <__aeabi_dsub>
 800d62e:	3530      	adds	r5, #48	@ 0x30
 800d630:	f806 5b01 	strb.w	r5, [r6], #1
 800d634:	4602      	mov	r2, r0
 800d636:	460b      	mov	r3, r1
 800d638:	42a6      	cmp	r6, r4
 800d63a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	d124      	bne.n	800d68e <_dtoa_r+0x626>
 800d644:	4baf      	ldr	r3, [pc, #700]	@ (800d904 <_dtoa_r+0x89c>)
 800d646:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d64a:	f7f2 fe1f 	bl	800028c <__adddf3>
 800d64e:	4602      	mov	r2, r0
 800d650:	460b      	mov	r3, r1
 800d652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d656:	f7f3 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d163      	bne.n	800d726 <_dtoa_r+0x6be>
 800d65e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d662:	49a8      	ldr	r1, [pc, #672]	@ (800d904 <_dtoa_r+0x89c>)
 800d664:	2000      	movs	r0, #0
 800d666:	f7f2 fe0f 	bl	8000288 <__aeabi_dsub>
 800d66a:	4602      	mov	r2, r0
 800d66c:	460b      	mov	r3, r1
 800d66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d672:	f7f3 fa33 	bl	8000adc <__aeabi_dcmplt>
 800d676:	2800      	cmp	r0, #0
 800d678:	f43f af14 	beq.w	800d4a4 <_dtoa_r+0x43c>
 800d67c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d67e:	1e73      	subs	r3, r6, #1
 800d680:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d682:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d686:	2b30      	cmp	r3, #48	@ 0x30
 800d688:	d0f8      	beq.n	800d67c <_dtoa_r+0x614>
 800d68a:	4647      	mov	r7, r8
 800d68c:	e03b      	b.n	800d706 <_dtoa_r+0x69e>
 800d68e:	4b9e      	ldr	r3, [pc, #632]	@ (800d908 <_dtoa_r+0x8a0>)
 800d690:	f7f2 ffb2 	bl	80005f8 <__aeabi_dmul>
 800d694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d698:	e7bc      	b.n	800d614 <_dtoa_r+0x5ac>
 800d69a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d69e:	4656      	mov	r6, sl
 800d6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	f7f3 f8d0 	bl	800084c <__aeabi_ddiv>
 800d6ac:	f7f3 fa54 	bl	8000b58 <__aeabi_d2iz>
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	f7f2 ff37 	bl	8000524 <__aeabi_i2d>
 800d6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6ba:	f7f2 ff9d 	bl	80005f8 <__aeabi_dmul>
 800d6be:	4602      	mov	r2, r0
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4629      	mov	r1, r5
 800d6c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d6ca:	f7f2 fddd 	bl	8000288 <__aeabi_dsub>
 800d6ce:	f806 4b01 	strb.w	r4, [r6], #1
 800d6d2:	9d03      	ldr	r5, [sp, #12]
 800d6d4:	eba6 040a 	sub.w	r4, r6, sl
 800d6d8:	42a5      	cmp	r5, r4
 800d6da:	4602      	mov	r2, r0
 800d6dc:	460b      	mov	r3, r1
 800d6de:	d133      	bne.n	800d748 <_dtoa_r+0x6e0>
 800d6e0:	f7f2 fdd4 	bl	800028c <__adddf3>
 800d6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	f7f3 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 800d6f0:	b9c0      	cbnz	r0, 800d724 <_dtoa_r+0x6bc>
 800d6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	f7f3 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6fe:	b110      	cbz	r0, 800d706 <_dtoa_r+0x69e>
 800d700:	f018 0f01 	tst.w	r8, #1
 800d704:	d10e      	bne.n	800d724 <_dtoa_r+0x6bc>
 800d706:	9902      	ldr	r1, [sp, #8]
 800d708:	4648      	mov	r0, r9
 800d70a:	f000 fbbd 	bl	800de88 <_Bfree>
 800d70e:	2300      	movs	r3, #0
 800d710:	7033      	strb	r3, [r6, #0]
 800d712:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d714:	3701      	adds	r7, #1
 800d716:	601f      	str	r7, [r3, #0]
 800d718:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f000 824b 	beq.w	800dbb6 <_dtoa_r+0xb4e>
 800d720:	601e      	str	r6, [r3, #0]
 800d722:	e248      	b.n	800dbb6 <_dtoa_r+0xb4e>
 800d724:	46b8      	mov	r8, r7
 800d726:	4633      	mov	r3, r6
 800d728:	461e      	mov	r6, r3
 800d72a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d72e:	2a39      	cmp	r2, #57	@ 0x39
 800d730:	d106      	bne.n	800d740 <_dtoa_r+0x6d8>
 800d732:	459a      	cmp	sl, r3
 800d734:	d1f8      	bne.n	800d728 <_dtoa_r+0x6c0>
 800d736:	2230      	movs	r2, #48	@ 0x30
 800d738:	f108 0801 	add.w	r8, r8, #1
 800d73c:	f88a 2000 	strb.w	r2, [sl]
 800d740:	781a      	ldrb	r2, [r3, #0]
 800d742:	3201      	adds	r2, #1
 800d744:	701a      	strb	r2, [r3, #0]
 800d746:	e7a0      	b.n	800d68a <_dtoa_r+0x622>
 800d748:	4b6f      	ldr	r3, [pc, #444]	@ (800d908 <_dtoa_r+0x8a0>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	f7f2 ff54 	bl	80005f8 <__aeabi_dmul>
 800d750:	2200      	movs	r2, #0
 800d752:	2300      	movs	r3, #0
 800d754:	4604      	mov	r4, r0
 800d756:	460d      	mov	r5, r1
 800d758:	f7f3 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	d09f      	beq.n	800d6a0 <_dtoa_r+0x638>
 800d760:	e7d1      	b.n	800d706 <_dtoa_r+0x69e>
 800d762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d764:	2a00      	cmp	r2, #0
 800d766:	f000 80ea 	beq.w	800d93e <_dtoa_r+0x8d6>
 800d76a:	9a07      	ldr	r2, [sp, #28]
 800d76c:	2a01      	cmp	r2, #1
 800d76e:	f300 80cd 	bgt.w	800d90c <_dtoa_r+0x8a4>
 800d772:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d774:	2a00      	cmp	r2, #0
 800d776:	f000 80c1 	beq.w	800d8fc <_dtoa_r+0x894>
 800d77a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d77e:	9c08      	ldr	r4, [sp, #32]
 800d780:	9e00      	ldr	r6, [sp, #0]
 800d782:	9a00      	ldr	r2, [sp, #0]
 800d784:	441a      	add	r2, r3
 800d786:	9200      	str	r2, [sp, #0]
 800d788:	9a06      	ldr	r2, [sp, #24]
 800d78a:	2101      	movs	r1, #1
 800d78c:	441a      	add	r2, r3
 800d78e:	4648      	mov	r0, r9
 800d790:	9206      	str	r2, [sp, #24]
 800d792:	f000 fc77 	bl	800e084 <__i2b>
 800d796:	4605      	mov	r5, r0
 800d798:	b166      	cbz	r6, 800d7b4 <_dtoa_r+0x74c>
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	dd09      	ble.n	800d7b4 <_dtoa_r+0x74c>
 800d7a0:	42b3      	cmp	r3, r6
 800d7a2:	9a00      	ldr	r2, [sp, #0]
 800d7a4:	bfa8      	it	ge
 800d7a6:	4633      	movge	r3, r6
 800d7a8:	1ad2      	subs	r2, r2, r3
 800d7aa:	9200      	str	r2, [sp, #0]
 800d7ac:	9a06      	ldr	r2, [sp, #24]
 800d7ae:	1af6      	subs	r6, r6, r3
 800d7b0:	1ad3      	subs	r3, r2, r3
 800d7b2:	9306      	str	r3, [sp, #24]
 800d7b4:	9b08      	ldr	r3, [sp, #32]
 800d7b6:	b30b      	cbz	r3, 800d7fc <_dtoa_r+0x794>
 800d7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 80c6 	beq.w	800d94c <_dtoa_r+0x8e4>
 800d7c0:	2c00      	cmp	r4, #0
 800d7c2:	f000 80c0 	beq.w	800d946 <_dtoa_r+0x8de>
 800d7c6:	4629      	mov	r1, r5
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	4648      	mov	r0, r9
 800d7cc:	f000 fd12 	bl	800e1f4 <__pow5mult>
 800d7d0:	9a02      	ldr	r2, [sp, #8]
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	4648      	mov	r0, r9
 800d7d8:	f000 fc6a 	bl	800e0b0 <__multiply>
 800d7dc:	9902      	ldr	r1, [sp, #8]
 800d7de:	4680      	mov	r8, r0
 800d7e0:	4648      	mov	r0, r9
 800d7e2:	f000 fb51 	bl	800de88 <_Bfree>
 800d7e6:	9b08      	ldr	r3, [sp, #32]
 800d7e8:	1b1b      	subs	r3, r3, r4
 800d7ea:	9308      	str	r3, [sp, #32]
 800d7ec:	f000 80b1 	beq.w	800d952 <_dtoa_r+0x8ea>
 800d7f0:	9a08      	ldr	r2, [sp, #32]
 800d7f2:	4641      	mov	r1, r8
 800d7f4:	4648      	mov	r0, r9
 800d7f6:	f000 fcfd 	bl	800e1f4 <__pow5mult>
 800d7fa:	9002      	str	r0, [sp, #8]
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	4648      	mov	r0, r9
 800d800:	f000 fc40 	bl	800e084 <__i2b>
 800d804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d806:	4604      	mov	r4, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 81d8 	beq.w	800dbbe <_dtoa_r+0xb56>
 800d80e:	461a      	mov	r2, r3
 800d810:	4601      	mov	r1, r0
 800d812:	4648      	mov	r0, r9
 800d814:	f000 fcee 	bl	800e1f4 <__pow5mult>
 800d818:	9b07      	ldr	r3, [sp, #28]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	4604      	mov	r4, r0
 800d81e:	f300 809f 	bgt.w	800d960 <_dtoa_r+0x8f8>
 800d822:	9b04      	ldr	r3, [sp, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f040 8097 	bne.w	800d958 <_dtoa_r+0x8f0>
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d830:	2b00      	cmp	r3, #0
 800d832:	f040 8093 	bne.w	800d95c <_dtoa_r+0x8f4>
 800d836:	9b05      	ldr	r3, [sp, #20]
 800d838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d83c:	0d1b      	lsrs	r3, r3, #20
 800d83e:	051b      	lsls	r3, r3, #20
 800d840:	b133      	cbz	r3, 800d850 <_dtoa_r+0x7e8>
 800d842:	9b00      	ldr	r3, [sp, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	9b06      	ldr	r3, [sp, #24]
 800d84a:	3301      	adds	r3, #1
 800d84c:	9306      	str	r3, [sp, #24]
 800d84e:	2301      	movs	r3, #1
 800d850:	9308      	str	r3, [sp, #32]
 800d852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d854:	2b00      	cmp	r3, #0
 800d856:	f000 81b8 	beq.w	800dbca <_dtoa_r+0xb62>
 800d85a:	6923      	ldr	r3, [r4, #16]
 800d85c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d860:	6918      	ldr	r0, [r3, #16]
 800d862:	f000 fbc3 	bl	800dfec <__hi0bits>
 800d866:	f1c0 0020 	rsb	r0, r0, #32
 800d86a:	9b06      	ldr	r3, [sp, #24]
 800d86c:	4418      	add	r0, r3
 800d86e:	f010 001f 	ands.w	r0, r0, #31
 800d872:	f000 8082 	beq.w	800d97a <_dtoa_r+0x912>
 800d876:	f1c0 0320 	rsb	r3, r0, #32
 800d87a:	2b04      	cmp	r3, #4
 800d87c:	dd73      	ble.n	800d966 <_dtoa_r+0x8fe>
 800d87e:	9b00      	ldr	r3, [sp, #0]
 800d880:	f1c0 001c 	rsb	r0, r0, #28
 800d884:	4403      	add	r3, r0
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	9b06      	ldr	r3, [sp, #24]
 800d88a:	4403      	add	r3, r0
 800d88c:	4406      	add	r6, r0
 800d88e:	9306      	str	r3, [sp, #24]
 800d890:	9b00      	ldr	r3, [sp, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd05      	ble.n	800d8a2 <_dtoa_r+0x83a>
 800d896:	9902      	ldr	r1, [sp, #8]
 800d898:	461a      	mov	r2, r3
 800d89a:	4648      	mov	r0, r9
 800d89c:	f000 fd04 	bl	800e2a8 <__lshift>
 800d8a0:	9002      	str	r0, [sp, #8]
 800d8a2:	9b06      	ldr	r3, [sp, #24]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dd05      	ble.n	800d8b4 <_dtoa_r+0x84c>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	4648      	mov	r0, r9
 800d8ae:	f000 fcfb 	bl	800e2a8 <__lshift>
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d061      	beq.n	800d97e <_dtoa_r+0x916>
 800d8ba:	9802      	ldr	r0, [sp, #8]
 800d8bc:	4621      	mov	r1, r4
 800d8be:	f000 fd5f 	bl	800e380 <__mcmp>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	da5b      	bge.n	800d97e <_dtoa_r+0x916>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	9902      	ldr	r1, [sp, #8]
 800d8ca:	220a      	movs	r2, #10
 800d8cc:	4648      	mov	r0, r9
 800d8ce:	f000 fafd 	bl	800decc <__multadd>
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	9002      	str	r0, [sp, #8]
 800d8d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 8177 	beq.w	800dbce <_dtoa_r+0xb66>
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	220a      	movs	r2, #10
 800d8e6:	4648      	mov	r0, r9
 800d8e8:	f000 faf0 	bl	800decc <__multadd>
 800d8ec:	f1bb 0f00 	cmp.w	fp, #0
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	dc6f      	bgt.n	800d9d4 <_dtoa_r+0x96c>
 800d8f4:	9b07      	ldr	r3, [sp, #28]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	dc49      	bgt.n	800d98e <_dtoa_r+0x926>
 800d8fa:	e06b      	b.n	800d9d4 <_dtoa_r+0x96c>
 800d8fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d902:	e73c      	b.n	800d77e <_dtoa_r+0x716>
 800d904:	3fe00000 	.word	0x3fe00000
 800d908:	40240000 	.word	0x40240000
 800d90c:	9b03      	ldr	r3, [sp, #12]
 800d90e:	1e5c      	subs	r4, r3, #1
 800d910:	9b08      	ldr	r3, [sp, #32]
 800d912:	42a3      	cmp	r3, r4
 800d914:	db09      	blt.n	800d92a <_dtoa_r+0x8c2>
 800d916:	1b1c      	subs	r4, r3, r4
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	f6bf af30 	bge.w	800d780 <_dtoa_r+0x718>
 800d920:	9b00      	ldr	r3, [sp, #0]
 800d922:	9a03      	ldr	r2, [sp, #12]
 800d924:	1a9e      	subs	r6, r3, r2
 800d926:	2300      	movs	r3, #0
 800d928:	e72b      	b.n	800d782 <_dtoa_r+0x71a>
 800d92a:	9b08      	ldr	r3, [sp, #32]
 800d92c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d92e:	9408      	str	r4, [sp, #32]
 800d930:	1ae3      	subs	r3, r4, r3
 800d932:	441a      	add	r2, r3
 800d934:	9e00      	ldr	r6, [sp, #0]
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	920d      	str	r2, [sp, #52]	@ 0x34
 800d93a:	2400      	movs	r4, #0
 800d93c:	e721      	b.n	800d782 <_dtoa_r+0x71a>
 800d93e:	9c08      	ldr	r4, [sp, #32]
 800d940:	9e00      	ldr	r6, [sp, #0]
 800d942:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d944:	e728      	b.n	800d798 <_dtoa_r+0x730>
 800d946:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d94a:	e751      	b.n	800d7f0 <_dtoa_r+0x788>
 800d94c:	9a08      	ldr	r2, [sp, #32]
 800d94e:	9902      	ldr	r1, [sp, #8]
 800d950:	e750      	b.n	800d7f4 <_dtoa_r+0x78c>
 800d952:	f8cd 8008 	str.w	r8, [sp, #8]
 800d956:	e751      	b.n	800d7fc <_dtoa_r+0x794>
 800d958:	2300      	movs	r3, #0
 800d95a:	e779      	b.n	800d850 <_dtoa_r+0x7e8>
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	e777      	b.n	800d850 <_dtoa_r+0x7e8>
 800d960:	2300      	movs	r3, #0
 800d962:	9308      	str	r3, [sp, #32]
 800d964:	e779      	b.n	800d85a <_dtoa_r+0x7f2>
 800d966:	d093      	beq.n	800d890 <_dtoa_r+0x828>
 800d968:	9a00      	ldr	r2, [sp, #0]
 800d96a:	331c      	adds	r3, #28
 800d96c:	441a      	add	r2, r3
 800d96e:	9200      	str	r2, [sp, #0]
 800d970:	9a06      	ldr	r2, [sp, #24]
 800d972:	441a      	add	r2, r3
 800d974:	441e      	add	r6, r3
 800d976:	9206      	str	r2, [sp, #24]
 800d978:	e78a      	b.n	800d890 <_dtoa_r+0x828>
 800d97a:	4603      	mov	r3, r0
 800d97c:	e7f4      	b.n	800d968 <_dtoa_r+0x900>
 800d97e:	9b03      	ldr	r3, [sp, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	46b8      	mov	r8, r7
 800d984:	dc20      	bgt.n	800d9c8 <_dtoa_r+0x960>
 800d986:	469b      	mov	fp, r3
 800d988:	9b07      	ldr	r3, [sp, #28]
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	dd1e      	ble.n	800d9cc <_dtoa_r+0x964>
 800d98e:	f1bb 0f00 	cmp.w	fp, #0
 800d992:	f47f adb1 	bne.w	800d4f8 <_dtoa_r+0x490>
 800d996:	4621      	mov	r1, r4
 800d998:	465b      	mov	r3, fp
 800d99a:	2205      	movs	r2, #5
 800d99c:	4648      	mov	r0, r9
 800d99e:	f000 fa95 	bl	800decc <__multadd>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	9802      	ldr	r0, [sp, #8]
 800d9a8:	f000 fcea 	bl	800e380 <__mcmp>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	f77f ada3 	ble.w	800d4f8 <_dtoa_r+0x490>
 800d9b2:	4656      	mov	r6, sl
 800d9b4:	2331      	movs	r3, #49	@ 0x31
 800d9b6:	f806 3b01 	strb.w	r3, [r6], #1
 800d9ba:	f108 0801 	add.w	r8, r8, #1
 800d9be:	e59f      	b.n	800d500 <_dtoa_r+0x498>
 800d9c0:	9c03      	ldr	r4, [sp, #12]
 800d9c2:	46b8      	mov	r8, r7
 800d9c4:	4625      	mov	r5, r4
 800d9c6:	e7f4      	b.n	800d9b2 <_dtoa_r+0x94a>
 800d9c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 8101 	beq.w	800dbd6 <_dtoa_r+0xb6e>
 800d9d4:	2e00      	cmp	r6, #0
 800d9d6:	dd05      	ble.n	800d9e4 <_dtoa_r+0x97c>
 800d9d8:	4629      	mov	r1, r5
 800d9da:	4632      	mov	r2, r6
 800d9dc:	4648      	mov	r0, r9
 800d9de:	f000 fc63 	bl	800e2a8 <__lshift>
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	9b08      	ldr	r3, [sp, #32]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d05c      	beq.n	800daa4 <_dtoa_r+0xa3c>
 800d9ea:	6869      	ldr	r1, [r5, #4]
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fa0b 	bl	800de08 <_Balloc>
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	b928      	cbnz	r0, 800da02 <_dtoa_r+0x99a>
 800d9f6:	4b82      	ldr	r3, [pc, #520]	@ (800dc00 <_dtoa_r+0xb98>)
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d9fe:	f7ff bb4a 	b.w	800d096 <_dtoa_r+0x2e>
 800da02:	692a      	ldr	r2, [r5, #16]
 800da04:	3202      	adds	r2, #2
 800da06:	0092      	lsls	r2, r2, #2
 800da08:	f105 010c 	add.w	r1, r5, #12
 800da0c:	300c      	adds	r0, #12
 800da0e:	f7ff fa8c 	bl	800cf2a <memcpy>
 800da12:	2201      	movs	r2, #1
 800da14:	4631      	mov	r1, r6
 800da16:	4648      	mov	r0, r9
 800da18:	f000 fc46 	bl	800e2a8 <__lshift>
 800da1c:	f10a 0301 	add.w	r3, sl, #1
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	eb0a 030b 	add.w	r3, sl, fp
 800da26:	9308      	str	r3, [sp, #32]
 800da28:	9b04      	ldr	r3, [sp, #16]
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	462f      	mov	r7, r5
 800da30:	9306      	str	r3, [sp, #24]
 800da32:	4605      	mov	r5, r0
 800da34:	9b00      	ldr	r3, [sp, #0]
 800da36:	9802      	ldr	r0, [sp, #8]
 800da38:	4621      	mov	r1, r4
 800da3a:	f103 3bff 	add.w	fp, r3, #4294967295
 800da3e:	f7ff fa89 	bl	800cf54 <quorem>
 800da42:	4603      	mov	r3, r0
 800da44:	3330      	adds	r3, #48	@ 0x30
 800da46:	9003      	str	r0, [sp, #12]
 800da48:	4639      	mov	r1, r7
 800da4a:	9802      	ldr	r0, [sp, #8]
 800da4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800da4e:	f000 fc97 	bl	800e380 <__mcmp>
 800da52:	462a      	mov	r2, r5
 800da54:	9004      	str	r0, [sp, #16]
 800da56:	4621      	mov	r1, r4
 800da58:	4648      	mov	r0, r9
 800da5a:	f000 fcad 	bl	800e3b8 <__mdiff>
 800da5e:	68c2      	ldr	r2, [r0, #12]
 800da60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da62:	4606      	mov	r6, r0
 800da64:	bb02      	cbnz	r2, 800daa8 <_dtoa_r+0xa40>
 800da66:	4601      	mov	r1, r0
 800da68:	9802      	ldr	r0, [sp, #8]
 800da6a:	f000 fc89 	bl	800e380 <__mcmp>
 800da6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da70:	4602      	mov	r2, r0
 800da72:	4631      	mov	r1, r6
 800da74:	4648      	mov	r0, r9
 800da76:	920c      	str	r2, [sp, #48]	@ 0x30
 800da78:	9309      	str	r3, [sp, #36]	@ 0x24
 800da7a:	f000 fa05 	bl	800de88 <_Bfree>
 800da7e:	9b07      	ldr	r3, [sp, #28]
 800da80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800da82:	9e00      	ldr	r6, [sp, #0]
 800da84:	ea42 0103 	orr.w	r1, r2, r3
 800da88:	9b06      	ldr	r3, [sp, #24]
 800da8a:	4319      	orrs	r1, r3
 800da8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da8e:	d10d      	bne.n	800daac <_dtoa_r+0xa44>
 800da90:	2b39      	cmp	r3, #57	@ 0x39
 800da92:	d027      	beq.n	800dae4 <_dtoa_r+0xa7c>
 800da94:	9a04      	ldr	r2, [sp, #16]
 800da96:	2a00      	cmp	r2, #0
 800da98:	dd01      	ble.n	800da9e <_dtoa_r+0xa36>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	3331      	adds	r3, #49	@ 0x31
 800da9e:	f88b 3000 	strb.w	r3, [fp]
 800daa2:	e52e      	b.n	800d502 <_dtoa_r+0x49a>
 800daa4:	4628      	mov	r0, r5
 800daa6:	e7b9      	b.n	800da1c <_dtoa_r+0x9b4>
 800daa8:	2201      	movs	r2, #1
 800daaa:	e7e2      	b.n	800da72 <_dtoa_r+0xa0a>
 800daac:	9904      	ldr	r1, [sp, #16]
 800daae:	2900      	cmp	r1, #0
 800dab0:	db04      	blt.n	800dabc <_dtoa_r+0xa54>
 800dab2:	9807      	ldr	r0, [sp, #28]
 800dab4:	4301      	orrs	r1, r0
 800dab6:	9806      	ldr	r0, [sp, #24]
 800dab8:	4301      	orrs	r1, r0
 800daba:	d120      	bne.n	800dafe <_dtoa_r+0xa96>
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	ddee      	ble.n	800da9e <_dtoa_r+0xa36>
 800dac0:	9902      	ldr	r1, [sp, #8]
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	2201      	movs	r2, #1
 800dac6:	4648      	mov	r0, r9
 800dac8:	f000 fbee 	bl	800e2a8 <__lshift>
 800dacc:	4621      	mov	r1, r4
 800dace:	9002      	str	r0, [sp, #8]
 800dad0:	f000 fc56 	bl	800e380 <__mcmp>
 800dad4:	2800      	cmp	r0, #0
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	dc02      	bgt.n	800dae0 <_dtoa_r+0xa78>
 800dada:	d1e0      	bne.n	800da9e <_dtoa_r+0xa36>
 800dadc:	07da      	lsls	r2, r3, #31
 800dade:	d5de      	bpl.n	800da9e <_dtoa_r+0xa36>
 800dae0:	2b39      	cmp	r3, #57	@ 0x39
 800dae2:	d1da      	bne.n	800da9a <_dtoa_r+0xa32>
 800dae4:	2339      	movs	r3, #57	@ 0x39
 800dae6:	f88b 3000 	strb.w	r3, [fp]
 800daea:	4633      	mov	r3, r6
 800daec:	461e      	mov	r6, r3
 800daee:	3b01      	subs	r3, #1
 800daf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800daf4:	2a39      	cmp	r2, #57	@ 0x39
 800daf6:	d04e      	beq.n	800db96 <_dtoa_r+0xb2e>
 800daf8:	3201      	adds	r2, #1
 800dafa:	701a      	strb	r2, [r3, #0]
 800dafc:	e501      	b.n	800d502 <_dtoa_r+0x49a>
 800dafe:	2a00      	cmp	r2, #0
 800db00:	dd03      	ble.n	800db0a <_dtoa_r+0xaa2>
 800db02:	2b39      	cmp	r3, #57	@ 0x39
 800db04:	d0ee      	beq.n	800dae4 <_dtoa_r+0xa7c>
 800db06:	3301      	adds	r3, #1
 800db08:	e7c9      	b.n	800da9e <_dtoa_r+0xa36>
 800db0a:	9a00      	ldr	r2, [sp, #0]
 800db0c:	9908      	ldr	r1, [sp, #32]
 800db0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800db12:	428a      	cmp	r2, r1
 800db14:	d028      	beq.n	800db68 <_dtoa_r+0xb00>
 800db16:	9902      	ldr	r1, [sp, #8]
 800db18:	2300      	movs	r3, #0
 800db1a:	220a      	movs	r2, #10
 800db1c:	4648      	mov	r0, r9
 800db1e:	f000 f9d5 	bl	800decc <__multadd>
 800db22:	42af      	cmp	r7, r5
 800db24:	9002      	str	r0, [sp, #8]
 800db26:	f04f 0300 	mov.w	r3, #0
 800db2a:	f04f 020a 	mov.w	r2, #10
 800db2e:	4639      	mov	r1, r7
 800db30:	4648      	mov	r0, r9
 800db32:	d107      	bne.n	800db44 <_dtoa_r+0xadc>
 800db34:	f000 f9ca 	bl	800decc <__multadd>
 800db38:	4607      	mov	r7, r0
 800db3a:	4605      	mov	r5, r0
 800db3c:	9b00      	ldr	r3, [sp, #0]
 800db3e:	3301      	adds	r3, #1
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	e777      	b.n	800da34 <_dtoa_r+0x9cc>
 800db44:	f000 f9c2 	bl	800decc <__multadd>
 800db48:	4629      	mov	r1, r5
 800db4a:	4607      	mov	r7, r0
 800db4c:	2300      	movs	r3, #0
 800db4e:	220a      	movs	r2, #10
 800db50:	4648      	mov	r0, r9
 800db52:	f000 f9bb 	bl	800decc <__multadd>
 800db56:	4605      	mov	r5, r0
 800db58:	e7f0      	b.n	800db3c <_dtoa_r+0xad4>
 800db5a:	f1bb 0f00 	cmp.w	fp, #0
 800db5e:	bfcc      	ite	gt
 800db60:	465e      	movgt	r6, fp
 800db62:	2601      	movle	r6, #1
 800db64:	4456      	add	r6, sl
 800db66:	2700      	movs	r7, #0
 800db68:	9902      	ldr	r1, [sp, #8]
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	2201      	movs	r2, #1
 800db6e:	4648      	mov	r0, r9
 800db70:	f000 fb9a 	bl	800e2a8 <__lshift>
 800db74:	4621      	mov	r1, r4
 800db76:	9002      	str	r0, [sp, #8]
 800db78:	f000 fc02 	bl	800e380 <__mcmp>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	dcb4      	bgt.n	800daea <_dtoa_r+0xa82>
 800db80:	d102      	bne.n	800db88 <_dtoa_r+0xb20>
 800db82:	9b00      	ldr	r3, [sp, #0]
 800db84:	07db      	lsls	r3, r3, #31
 800db86:	d4b0      	bmi.n	800daea <_dtoa_r+0xa82>
 800db88:	4633      	mov	r3, r6
 800db8a:	461e      	mov	r6, r3
 800db8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db90:	2a30      	cmp	r2, #48	@ 0x30
 800db92:	d0fa      	beq.n	800db8a <_dtoa_r+0xb22>
 800db94:	e4b5      	b.n	800d502 <_dtoa_r+0x49a>
 800db96:	459a      	cmp	sl, r3
 800db98:	d1a8      	bne.n	800daec <_dtoa_r+0xa84>
 800db9a:	2331      	movs	r3, #49	@ 0x31
 800db9c:	f108 0801 	add.w	r8, r8, #1
 800dba0:	f88a 3000 	strb.w	r3, [sl]
 800dba4:	e4ad      	b.n	800d502 <_dtoa_r+0x49a>
 800dba6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dba8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dc04 <_dtoa_r+0xb9c>
 800dbac:	b11b      	cbz	r3, 800dbb6 <_dtoa_r+0xb4e>
 800dbae:	f10a 0308 	add.w	r3, sl, #8
 800dbb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dbb4:	6013      	str	r3, [r2, #0]
 800dbb6:	4650      	mov	r0, sl
 800dbb8:	b017      	add	sp, #92	@ 0x5c
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	9b07      	ldr	r3, [sp, #28]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	f77f ae2e 	ble.w	800d822 <_dtoa_r+0x7ba>
 800dbc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dbc8:	9308      	str	r3, [sp, #32]
 800dbca:	2001      	movs	r0, #1
 800dbcc:	e64d      	b.n	800d86a <_dtoa_r+0x802>
 800dbce:	f1bb 0f00 	cmp.w	fp, #0
 800dbd2:	f77f aed9 	ble.w	800d988 <_dtoa_r+0x920>
 800dbd6:	4656      	mov	r6, sl
 800dbd8:	9802      	ldr	r0, [sp, #8]
 800dbda:	4621      	mov	r1, r4
 800dbdc:	f7ff f9ba 	bl	800cf54 <quorem>
 800dbe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dbe4:	f806 3b01 	strb.w	r3, [r6], #1
 800dbe8:	eba6 020a 	sub.w	r2, r6, sl
 800dbec:	4593      	cmp	fp, r2
 800dbee:	ddb4      	ble.n	800db5a <_dtoa_r+0xaf2>
 800dbf0:	9902      	ldr	r1, [sp, #8]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	220a      	movs	r2, #10
 800dbf6:	4648      	mov	r0, r9
 800dbf8:	f000 f968 	bl	800decc <__multadd>
 800dbfc:	9002      	str	r0, [sp, #8]
 800dbfe:	e7eb      	b.n	800dbd8 <_dtoa_r+0xb70>
 800dc00:	0801078d 	.word	0x0801078d
 800dc04:	08010711 	.word	0x08010711

0800dc08 <_free_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	2900      	cmp	r1, #0
 800dc0e:	d041      	beq.n	800dc94 <_free_r+0x8c>
 800dc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc14:	1f0c      	subs	r4, r1, #4
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfb8      	it	lt
 800dc1a:	18e4      	addlt	r4, r4, r3
 800dc1c:	f000 f8e8 	bl	800ddf0 <__malloc_lock>
 800dc20:	4a1d      	ldr	r2, [pc, #116]	@ (800dc98 <_free_r+0x90>)
 800dc22:	6813      	ldr	r3, [r2, #0]
 800dc24:	b933      	cbnz	r3, 800dc34 <_free_r+0x2c>
 800dc26:	6063      	str	r3, [r4, #4]
 800dc28:	6014      	str	r4, [r2, #0]
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc30:	f000 b8e4 	b.w	800ddfc <__malloc_unlock>
 800dc34:	42a3      	cmp	r3, r4
 800dc36:	d908      	bls.n	800dc4a <_free_r+0x42>
 800dc38:	6820      	ldr	r0, [r4, #0]
 800dc3a:	1821      	adds	r1, r4, r0
 800dc3c:	428b      	cmp	r3, r1
 800dc3e:	bf01      	itttt	eq
 800dc40:	6819      	ldreq	r1, [r3, #0]
 800dc42:	685b      	ldreq	r3, [r3, #4]
 800dc44:	1809      	addeq	r1, r1, r0
 800dc46:	6021      	streq	r1, [r4, #0]
 800dc48:	e7ed      	b.n	800dc26 <_free_r+0x1e>
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	b10b      	cbz	r3, 800dc54 <_free_r+0x4c>
 800dc50:	42a3      	cmp	r3, r4
 800dc52:	d9fa      	bls.n	800dc4a <_free_r+0x42>
 800dc54:	6811      	ldr	r1, [r2, #0]
 800dc56:	1850      	adds	r0, r2, r1
 800dc58:	42a0      	cmp	r0, r4
 800dc5a:	d10b      	bne.n	800dc74 <_free_r+0x6c>
 800dc5c:	6820      	ldr	r0, [r4, #0]
 800dc5e:	4401      	add	r1, r0
 800dc60:	1850      	adds	r0, r2, r1
 800dc62:	4283      	cmp	r3, r0
 800dc64:	6011      	str	r1, [r2, #0]
 800dc66:	d1e0      	bne.n	800dc2a <_free_r+0x22>
 800dc68:	6818      	ldr	r0, [r3, #0]
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	6053      	str	r3, [r2, #4]
 800dc6e:	4408      	add	r0, r1
 800dc70:	6010      	str	r0, [r2, #0]
 800dc72:	e7da      	b.n	800dc2a <_free_r+0x22>
 800dc74:	d902      	bls.n	800dc7c <_free_r+0x74>
 800dc76:	230c      	movs	r3, #12
 800dc78:	602b      	str	r3, [r5, #0]
 800dc7a:	e7d6      	b.n	800dc2a <_free_r+0x22>
 800dc7c:	6820      	ldr	r0, [r4, #0]
 800dc7e:	1821      	adds	r1, r4, r0
 800dc80:	428b      	cmp	r3, r1
 800dc82:	bf04      	itt	eq
 800dc84:	6819      	ldreq	r1, [r3, #0]
 800dc86:	685b      	ldreq	r3, [r3, #4]
 800dc88:	6063      	str	r3, [r4, #4]
 800dc8a:	bf04      	itt	eq
 800dc8c:	1809      	addeq	r1, r1, r0
 800dc8e:	6021      	streq	r1, [r4, #0]
 800dc90:	6054      	str	r4, [r2, #4]
 800dc92:	e7ca      	b.n	800dc2a <_free_r+0x22>
 800dc94:	bd38      	pop	{r3, r4, r5, pc}
 800dc96:	bf00      	nop
 800dc98:	20002244 	.word	0x20002244

0800dc9c <malloc>:
 800dc9c:	4b02      	ldr	r3, [pc, #8]	@ (800dca8 <malloc+0xc>)
 800dc9e:	4601      	mov	r1, r0
 800dca0:	6818      	ldr	r0, [r3, #0]
 800dca2:	f000 b825 	b.w	800dcf0 <_malloc_r>
 800dca6:	bf00      	nop
 800dca8:	20000114 	.word	0x20000114

0800dcac <sbrk_aligned>:
 800dcac:	b570      	push	{r4, r5, r6, lr}
 800dcae:	4e0f      	ldr	r6, [pc, #60]	@ (800dcec <sbrk_aligned+0x40>)
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	6831      	ldr	r1, [r6, #0]
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	b911      	cbnz	r1, 800dcbe <sbrk_aligned+0x12>
 800dcb8:	f001 ffca 	bl	800fc50 <_sbrk_r>
 800dcbc:	6030      	str	r0, [r6, #0]
 800dcbe:	4621      	mov	r1, r4
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	f001 ffc5 	bl	800fc50 <_sbrk_r>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d103      	bne.n	800dcd2 <sbrk_aligned+0x26>
 800dcca:	f04f 34ff 	mov.w	r4, #4294967295
 800dcce:	4620      	mov	r0, r4
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
 800dcd2:	1cc4      	adds	r4, r0, #3
 800dcd4:	f024 0403 	bic.w	r4, r4, #3
 800dcd8:	42a0      	cmp	r0, r4
 800dcda:	d0f8      	beq.n	800dcce <sbrk_aligned+0x22>
 800dcdc:	1a21      	subs	r1, r4, r0
 800dcde:	4628      	mov	r0, r5
 800dce0:	f001 ffb6 	bl	800fc50 <_sbrk_r>
 800dce4:	3001      	adds	r0, #1
 800dce6:	d1f2      	bne.n	800dcce <sbrk_aligned+0x22>
 800dce8:	e7ef      	b.n	800dcca <sbrk_aligned+0x1e>
 800dcea:	bf00      	nop
 800dcec:	20002240 	.word	0x20002240

0800dcf0 <_malloc_r>:
 800dcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf4:	1ccd      	adds	r5, r1, #3
 800dcf6:	f025 0503 	bic.w	r5, r5, #3
 800dcfa:	3508      	adds	r5, #8
 800dcfc:	2d0c      	cmp	r5, #12
 800dcfe:	bf38      	it	cc
 800dd00:	250c      	movcc	r5, #12
 800dd02:	2d00      	cmp	r5, #0
 800dd04:	4606      	mov	r6, r0
 800dd06:	db01      	blt.n	800dd0c <_malloc_r+0x1c>
 800dd08:	42a9      	cmp	r1, r5
 800dd0a:	d904      	bls.n	800dd16 <_malloc_r+0x26>
 800dd0c:	230c      	movs	r3, #12
 800dd0e:	6033      	str	r3, [r6, #0]
 800dd10:	2000      	movs	r0, #0
 800dd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ddec <_malloc_r+0xfc>
 800dd1a:	f000 f869 	bl	800ddf0 <__malloc_lock>
 800dd1e:	f8d8 3000 	ldr.w	r3, [r8]
 800dd22:	461c      	mov	r4, r3
 800dd24:	bb44      	cbnz	r4, 800dd78 <_malloc_r+0x88>
 800dd26:	4629      	mov	r1, r5
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7ff ffbf 	bl	800dcac <sbrk_aligned>
 800dd2e:	1c43      	adds	r3, r0, #1
 800dd30:	4604      	mov	r4, r0
 800dd32:	d158      	bne.n	800dde6 <_malloc_r+0xf6>
 800dd34:	f8d8 4000 	ldr.w	r4, [r8]
 800dd38:	4627      	mov	r7, r4
 800dd3a:	2f00      	cmp	r7, #0
 800dd3c:	d143      	bne.n	800ddc6 <_malloc_r+0xd6>
 800dd3e:	2c00      	cmp	r4, #0
 800dd40:	d04b      	beq.n	800ddda <_malloc_r+0xea>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	4639      	mov	r1, r7
 800dd46:	4630      	mov	r0, r6
 800dd48:	eb04 0903 	add.w	r9, r4, r3
 800dd4c:	f001 ff80 	bl	800fc50 <_sbrk_r>
 800dd50:	4581      	cmp	r9, r0
 800dd52:	d142      	bne.n	800ddda <_malloc_r+0xea>
 800dd54:	6821      	ldr	r1, [r4, #0]
 800dd56:	1a6d      	subs	r5, r5, r1
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7ff ffa6 	bl	800dcac <sbrk_aligned>
 800dd60:	3001      	adds	r0, #1
 800dd62:	d03a      	beq.n	800ddda <_malloc_r+0xea>
 800dd64:	6823      	ldr	r3, [r4, #0]
 800dd66:	442b      	add	r3, r5
 800dd68:	6023      	str	r3, [r4, #0]
 800dd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800dd6e:	685a      	ldr	r2, [r3, #4]
 800dd70:	bb62      	cbnz	r2, 800ddcc <_malloc_r+0xdc>
 800dd72:	f8c8 7000 	str.w	r7, [r8]
 800dd76:	e00f      	b.n	800dd98 <_malloc_r+0xa8>
 800dd78:	6822      	ldr	r2, [r4, #0]
 800dd7a:	1b52      	subs	r2, r2, r5
 800dd7c:	d420      	bmi.n	800ddc0 <_malloc_r+0xd0>
 800dd7e:	2a0b      	cmp	r2, #11
 800dd80:	d917      	bls.n	800ddb2 <_malloc_r+0xc2>
 800dd82:	1961      	adds	r1, r4, r5
 800dd84:	42a3      	cmp	r3, r4
 800dd86:	6025      	str	r5, [r4, #0]
 800dd88:	bf18      	it	ne
 800dd8a:	6059      	strne	r1, [r3, #4]
 800dd8c:	6863      	ldr	r3, [r4, #4]
 800dd8e:	bf08      	it	eq
 800dd90:	f8c8 1000 	streq.w	r1, [r8]
 800dd94:	5162      	str	r2, [r4, r5]
 800dd96:	604b      	str	r3, [r1, #4]
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f000 f82f 	bl	800ddfc <__malloc_unlock>
 800dd9e:	f104 000b 	add.w	r0, r4, #11
 800dda2:	1d23      	adds	r3, r4, #4
 800dda4:	f020 0007 	bic.w	r0, r0, #7
 800dda8:	1ac2      	subs	r2, r0, r3
 800ddaa:	bf1c      	itt	ne
 800ddac:	1a1b      	subne	r3, r3, r0
 800ddae:	50a3      	strne	r3, [r4, r2]
 800ddb0:	e7af      	b.n	800dd12 <_malloc_r+0x22>
 800ddb2:	6862      	ldr	r2, [r4, #4]
 800ddb4:	42a3      	cmp	r3, r4
 800ddb6:	bf0c      	ite	eq
 800ddb8:	f8c8 2000 	streq.w	r2, [r8]
 800ddbc:	605a      	strne	r2, [r3, #4]
 800ddbe:	e7eb      	b.n	800dd98 <_malloc_r+0xa8>
 800ddc0:	4623      	mov	r3, r4
 800ddc2:	6864      	ldr	r4, [r4, #4]
 800ddc4:	e7ae      	b.n	800dd24 <_malloc_r+0x34>
 800ddc6:	463c      	mov	r4, r7
 800ddc8:	687f      	ldr	r7, [r7, #4]
 800ddca:	e7b6      	b.n	800dd3a <_malloc_r+0x4a>
 800ddcc:	461a      	mov	r2, r3
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	42a3      	cmp	r3, r4
 800ddd2:	d1fb      	bne.n	800ddcc <_malloc_r+0xdc>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	6053      	str	r3, [r2, #4]
 800ddd8:	e7de      	b.n	800dd98 <_malloc_r+0xa8>
 800ddda:	230c      	movs	r3, #12
 800dddc:	6033      	str	r3, [r6, #0]
 800ddde:	4630      	mov	r0, r6
 800dde0:	f000 f80c 	bl	800ddfc <__malloc_unlock>
 800dde4:	e794      	b.n	800dd10 <_malloc_r+0x20>
 800dde6:	6005      	str	r5, [r0, #0]
 800dde8:	e7d6      	b.n	800dd98 <_malloc_r+0xa8>
 800ddea:	bf00      	nop
 800ddec:	20002244 	.word	0x20002244

0800ddf0 <__malloc_lock>:
 800ddf0:	4801      	ldr	r0, [pc, #4]	@ (800ddf8 <__malloc_lock+0x8>)
 800ddf2:	f7ff b898 	b.w	800cf26 <__retarget_lock_acquire_recursive>
 800ddf6:	bf00      	nop
 800ddf8:	2000223c 	.word	0x2000223c

0800ddfc <__malloc_unlock>:
 800ddfc:	4801      	ldr	r0, [pc, #4]	@ (800de04 <__malloc_unlock+0x8>)
 800ddfe:	f7ff b893 	b.w	800cf28 <__retarget_lock_release_recursive>
 800de02:	bf00      	nop
 800de04:	2000223c 	.word	0x2000223c

0800de08 <_Balloc>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	69c6      	ldr	r6, [r0, #28]
 800de0c:	4604      	mov	r4, r0
 800de0e:	460d      	mov	r5, r1
 800de10:	b976      	cbnz	r6, 800de30 <_Balloc+0x28>
 800de12:	2010      	movs	r0, #16
 800de14:	f7ff ff42 	bl	800dc9c <malloc>
 800de18:	4602      	mov	r2, r0
 800de1a:	61e0      	str	r0, [r4, #28]
 800de1c:	b920      	cbnz	r0, 800de28 <_Balloc+0x20>
 800de1e:	4b18      	ldr	r3, [pc, #96]	@ (800de80 <_Balloc+0x78>)
 800de20:	4818      	ldr	r0, [pc, #96]	@ (800de84 <_Balloc+0x7c>)
 800de22:	216b      	movs	r1, #107	@ 0x6b
 800de24:	f001 ff2c 	bl	800fc80 <__assert_func>
 800de28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de2c:	6006      	str	r6, [r0, #0]
 800de2e:	60c6      	str	r6, [r0, #12]
 800de30:	69e6      	ldr	r6, [r4, #28]
 800de32:	68f3      	ldr	r3, [r6, #12]
 800de34:	b183      	cbz	r3, 800de58 <_Balloc+0x50>
 800de36:	69e3      	ldr	r3, [r4, #28]
 800de38:	68db      	ldr	r3, [r3, #12]
 800de3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800de3e:	b9b8      	cbnz	r0, 800de70 <_Balloc+0x68>
 800de40:	2101      	movs	r1, #1
 800de42:	fa01 f605 	lsl.w	r6, r1, r5
 800de46:	1d72      	adds	r2, r6, #5
 800de48:	0092      	lsls	r2, r2, #2
 800de4a:	4620      	mov	r0, r4
 800de4c:	f001 ff36 	bl	800fcbc <_calloc_r>
 800de50:	b160      	cbz	r0, 800de6c <_Balloc+0x64>
 800de52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800de56:	e00e      	b.n	800de76 <_Balloc+0x6e>
 800de58:	2221      	movs	r2, #33	@ 0x21
 800de5a:	2104      	movs	r1, #4
 800de5c:	4620      	mov	r0, r4
 800de5e:	f001 ff2d 	bl	800fcbc <_calloc_r>
 800de62:	69e3      	ldr	r3, [r4, #28]
 800de64:	60f0      	str	r0, [r6, #12]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1e4      	bne.n	800de36 <_Balloc+0x2e>
 800de6c:	2000      	movs	r0, #0
 800de6e:	bd70      	pop	{r4, r5, r6, pc}
 800de70:	6802      	ldr	r2, [r0, #0]
 800de72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800de76:	2300      	movs	r3, #0
 800de78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800de7c:	e7f7      	b.n	800de6e <_Balloc+0x66>
 800de7e:	bf00      	nop
 800de80:	0801071e 	.word	0x0801071e
 800de84:	0801079e 	.word	0x0801079e

0800de88 <_Bfree>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	69c6      	ldr	r6, [r0, #28]
 800de8c:	4605      	mov	r5, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	b976      	cbnz	r6, 800deb0 <_Bfree+0x28>
 800de92:	2010      	movs	r0, #16
 800de94:	f7ff ff02 	bl	800dc9c <malloc>
 800de98:	4602      	mov	r2, r0
 800de9a:	61e8      	str	r0, [r5, #28]
 800de9c:	b920      	cbnz	r0, 800dea8 <_Bfree+0x20>
 800de9e:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <_Bfree+0x3c>)
 800dea0:	4809      	ldr	r0, [pc, #36]	@ (800dec8 <_Bfree+0x40>)
 800dea2:	218f      	movs	r1, #143	@ 0x8f
 800dea4:	f001 feec 	bl	800fc80 <__assert_func>
 800dea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800deac:	6006      	str	r6, [r0, #0]
 800deae:	60c6      	str	r6, [r0, #12]
 800deb0:	b13c      	cbz	r4, 800dec2 <_Bfree+0x3a>
 800deb2:	69eb      	ldr	r3, [r5, #28]
 800deb4:	6862      	ldr	r2, [r4, #4]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800debc:	6021      	str	r1, [r4, #0]
 800debe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dec2:	bd70      	pop	{r4, r5, r6, pc}
 800dec4:	0801071e 	.word	0x0801071e
 800dec8:	0801079e 	.word	0x0801079e

0800decc <__multadd>:
 800decc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ded0:	690d      	ldr	r5, [r1, #16]
 800ded2:	4607      	mov	r7, r0
 800ded4:	460c      	mov	r4, r1
 800ded6:	461e      	mov	r6, r3
 800ded8:	f101 0c14 	add.w	ip, r1, #20
 800dedc:	2000      	movs	r0, #0
 800dede:	f8dc 3000 	ldr.w	r3, [ip]
 800dee2:	b299      	uxth	r1, r3
 800dee4:	fb02 6101 	mla	r1, r2, r1, r6
 800dee8:	0c1e      	lsrs	r6, r3, #16
 800deea:	0c0b      	lsrs	r3, r1, #16
 800deec:	fb02 3306 	mla	r3, r2, r6, r3
 800def0:	b289      	uxth	r1, r1
 800def2:	3001      	adds	r0, #1
 800def4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800def8:	4285      	cmp	r5, r0
 800defa:	f84c 1b04 	str.w	r1, [ip], #4
 800defe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df02:	dcec      	bgt.n	800dede <__multadd+0x12>
 800df04:	b30e      	cbz	r6, 800df4a <__multadd+0x7e>
 800df06:	68a3      	ldr	r3, [r4, #8]
 800df08:	42ab      	cmp	r3, r5
 800df0a:	dc19      	bgt.n	800df40 <__multadd+0x74>
 800df0c:	6861      	ldr	r1, [r4, #4]
 800df0e:	4638      	mov	r0, r7
 800df10:	3101      	adds	r1, #1
 800df12:	f7ff ff79 	bl	800de08 <_Balloc>
 800df16:	4680      	mov	r8, r0
 800df18:	b928      	cbnz	r0, 800df26 <__multadd+0x5a>
 800df1a:	4602      	mov	r2, r0
 800df1c:	4b0c      	ldr	r3, [pc, #48]	@ (800df50 <__multadd+0x84>)
 800df1e:	480d      	ldr	r0, [pc, #52]	@ (800df54 <__multadd+0x88>)
 800df20:	21ba      	movs	r1, #186	@ 0xba
 800df22:	f001 fead 	bl	800fc80 <__assert_func>
 800df26:	6922      	ldr	r2, [r4, #16]
 800df28:	3202      	adds	r2, #2
 800df2a:	f104 010c 	add.w	r1, r4, #12
 800df2e:	0092      	lsls	r2, r2, #2
 800df30:	300c      	adds	r0, #12
 800df32:	f7fe fffa 	bl	800cf2a <memcpy>
 800df36:	4621      	mov	r1, r4
 800df38:	4638      	mov	r0, r7
 800df3a:	f7ff ffa5 	bl	800de88 <_Bfree>
 800df3e:	4644      	mov	r4, r8
 800df40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800df44:	3501      	adds	r5, #1
 800df46:	615e      	str	r6, [r3, #20]
 800df48:	6125      	str	r5, [r4, #16]
 800df4a:	4620      	mov	r0, r4
 800df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df50:	0801078d 	.word	0x0801078d
 800df54:	0801079e 	.word	0x0801079e

0800df58 <__s2b>:
 800df58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df5c:	460c      	mov	r4, r1
 800df5e:	4615      	mov	r5, r2
 800df60:	461f      	mov	r7, r3
 800df62:	2209      	movs	r2, #9
 800df64:	3308      	adds	r3, #8
 800df66:	4606      	mov	r6, r0
 800df68:	fb93 f3f2 	sdiv	r3, r3, r2
 800df6c:	2100      	movs	r1, #0
 800df6e:	2201      	movs	r2, #1
 800df70:	429a      	cmp	r2, r3
 800df72:	db09      	blt.n	800df88 <__s2b+0x30>
 800df74:	4630      	mov	r0, r6
 800df76:	f7ff ff47 	bl	800de08 <_Balloc>
 800df7a:	b940      	cbnz	r0, 800df8e <__s2b+0x36>
 800df7c:	4602      	mov	r2, r0
 800df7e:	4b19      	ldr	r3, [pc, #100]	@ (800dfe4 <__s2b+0x8c>)
 800df80:	4819      	ldr	r0, [pc, #100]	@ (800dfe8 <__s2b+0x90>)
 800df82:	21d3      	movs	r1, #211	@ 0xd3
 800df84:	f001 fe7c 	bl	800fc80 <__assert_func>
 800df88:	0052      	lsls	r2, r2, #1
 800df8a:	3101      	adds	r1, #1
 800df8c:	e7f0      	b.n	800df70 <__s2b+0x18>
 800df8e:	9b08      	ldr	r3, [sp, #32]
 800df90:	6143      	str	r3, [r0, #20]
 800df92:	2d09      	cmp	r5, #9
 800df94:	f04f 0301 	mov.w	r3, #1
 800df98:	6103      	str	r3, [r0, #16]
 800df9a:	dd16      	ble.n	800dfca <__s2b+0x72>
 800df9c:	f104 0909 	add.w	r9, r4, #9
 800dfa0:	46c8      	mov	r8, r9
 800dfa2:	442c      	add	r4, r5
 800dfa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dfa8:	4601      	mov	r1, r0
 800dfaa:	3b30      	subs	r3, #48	@ 0x30
 800dfac:	220a      	movs	r2, #10
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f7ff ff8c 	bl	800decc <__multadd>
 800dfb4:	45a0      	cmp	r8, r4
 800dfb6:	d1f5      	bne.n	800dfa4 <__s2b+0x4c>
 800dfb8:	f1a5 0408 	sub.w	r4, r5, #8
 800dfbc:	444c      	add	r4, r9
 800dfbe:	1b2d      	subs	r5, r5, r4
 800dfc0:	1963      	adds	r3, r4, r5
 800dfc2:	42bb      	cmp	r3, r7
 800dfc4:	db04      	blt.n	800dfd0 <__s2b+0x78>
 800dfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfca:	340a      	adds	r4, #10
 800dfcc:	2509      	movs	r5, #9
 800dfce:	e7f6      	b.n	800dfbe <__s2b+0x66>
 800dfd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dfd4:	4601      	mov	r1, r0
 800dfd6:	3b30      	subs	r3, #48	@ 0x30
 800dfd8:	220a      	movs	r2, #10
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7ff ff76 	bl	800decc <__multadd>
 800dfe0:	e7ee      	b.n	800dfc0 <__s2b+0x68>
 800dfe2:	bf00      	nop
 800dfe4:	0801078d 	.word	0x0801078d
 800dfe8:	0801079e 	.word	0x0801079e

0800dfec <__hi0bits>:
 800dfec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800dff0:	4603      	mov	r3, r0
 800dff2:	bf36      	itet	cc
 800dff4:	0403      	lslcc	r3, r0, #16
 800dff6:	2000      	movcs	r0, #0
 800dff8:	2010      	movcc	r0, #16
 800dffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dffe:	bf3c      	itt	cc
 800e000:	021b      	lslcc	r3, r3, #8
 800e002:	3008      	addcc	r0, #8
 800e004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e008:	bf3c      	itt	cc
 800e00a:	011b      	lslcc	r3, r3, #4
 800e00c:	3004      	addcc	r0, #4
 800e00e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e012:	bf3c      	itt	cc
 800e014:	009b      	lslcc	r3, r3, #2
 800e016:	3002      	addcc	r0, #2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	db05      	blt.n	800e028 <__hi0bits+0x3c>
 800e01c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e020:	f100 0001 	add.w	r0, r0, #1
 800e024:	bf08      	it	eq
 800e026:	2020      	moveq	r0, #32
 800e028:	4770      	bx	lr

0800e02a <__lo0bits>:
 800e02a:	6803      	ldr	r3, [r0, #0]
 800e02c:	4602      	mov	r2, r0
 800e02e:	f013 0007 	ands.w	r0, r3, #7
 800e032:	d00b      	beq.n	800e04c <__lo0bits+0x22>
 800e034:	07d9      	lsls	r1, r3, #31
 800e036:	d421      	bmi.n	800e07c <__lo0bits+0x52>
 800e038:	0798      	lsls	r0, r3, #30
 800e03a:	bf49      	itett	mi
 800e03c:	085b      	lsrmi	r3, r3, #1
 800e03e:	089b      	lsrpl	r3, r3, #2
 800e040:	2001      	movmi	r0, #1
 800e042:	6013      	strmi	r3, [r2, #0]
 800e044:	bf5c      	itt	pl
 800e046:	6013      	strpl	r3, [r2, #0]
 800e048:	2002      	movpl	r0, #2
 800e04a:	4770      	bx	lr
 800e04c:	b299      	uxth	r1, r3
 800e04e:	b909      	cbnz	r1, 800e054 <__lo0bits+0x2a>
 800e050:	0c1b      	lsrs	r3, r3, #16
 800e052:	2010      	movs	r0, #16
 800e054:	b2d9      	uxtb	r1, r3
 800e056:	b909      	cbnz	r1, 800e05c <__lo0bits+0x32>
 800e058:	3008      	adds	r0, #8
 800e05a:	0a1b      	lsrs	r3, r3, #8
 800e05c:	0719      	lsls	r1, r3, #28
 800e05e:	bf04      	itt	eq
 800e060:	091b      	lsreq	r3, r3, #4
 800e062:	3004      	addeq	r0, #4
 800e064:	0799      	lsls	r1, r3, #30
 800e066:	bf04      	itt	eq
 800e068:	089b      	lsreq	r3, r3, #2
 800e06a:	3002      	addeq	r0, #2
 800e06c:	07d9      	lsls	r1, r3, #31
 800e06e:	d403      	bmi.n	800e078 <__lo0bits+0x4e>
 800e070:	085b      	lsrs	r3, r3, #1
 800e072:	f100 0001 	add.w	r0, r0, #1
 800e076:	d003      	beq.n	800e080 <__lo0bits+0x56>
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	4770      	bx	lr
 800e07c:	2000      	movs	r0, #0
 800e07e:	4770      	bx	lr
 800e080:	2020      	movs	r0, #32
 800e082:	4770      	bx	lr

0800e084 <__i2b>:
 800e084:	b510      	push	{r4, lr}
 800e086:	460c      	mov	r4, r1
 800e088:	2101      	movs	r1, #1
 800e08a:	f7ff febd 	bl	800de08 <_Balloc>
 800e08e:	4602      	mov	r2, r0
 800e090:	b928      	cbnz	r0, 800e09e <__i2b+0x1a>
 800e092:	4b05      	ldr	r3, [pc, #20]	@ (800e0a8 <__i2b+0x24>)
 800e094:	4805      	ldr	r0, [pc, #20]	@ (800e0ac <__i2b+0x28>)
 800e096:	f240 1145 	movw	r1, #325	@ 0x145
 800e09a:	f001 fdf1 	bl	800fc80 <__assert_func>
 800e09e:	2301      	movs	r3, #1
 800e0a0:	6144      	str	r4, [r0, #20]
 800e0a2:	6103      	str	r3, [r0, #16]
 800e0a4:	bd10      	pop	{r4, pc}
 800e0a6:	bf00      	nop
 800e0a8:	0801078d 	.word	0x0801078d
 800e0ac:	0801079e 	.word	0x0801079e

0800e0b0 <__multiply>:
 800e0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b4:	4617      	mov	r7, r2
 800e0b6:	690a      	ldr	r2, [r1, #16]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	bfa8      	it	ge
 800e0be:	463b      	movge	r3, r7
 800e0c0:	4689      	mov	r9, r1
 800e0c2:	bfa4      	itt	ge
 800e0c4:	460f      	movge	r7, r1
 800e0c6:	4699      	movge	r9, r3
 800e0c8:	693d      	ldr	r5, [r7, #16]
 800e0ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0ce:	68bb      	ldr	r3, [r7, #8]
 800e0d0:	6879      	ldr	r1, [r7, #4]
 800e0d2:	eb05 060a 	add.w	r6, r5, sl
 800e0d6:	42b3      	cmp	r3, r6
 800e0d8:	b085      	sub	sp, #20
 800e0da:	bfb8      	it	lt
 800e0dc:	3101      	addlt	r1, #1
 800e0de:	f7ff fe93 	bl	800de08 <_Balloc>
 800e0e2:	b930      	cbnz	r0, 800e0f2 <__multiply+0x42>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	4b41      	ldr	r3, [pc, #260]	@ (800e1ec <__multiply+0x13c>)
 800e0e8:	4841      	ldr	r0, [pc, #260]	@ (800e1f0 <__multiply+0x140>)
 800e0ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e0ee:	f001 fdc7 	bl	800fc80 <__assert_func>
 800e0f2:	f100 0414 	add.w	r4, r0, #20
 800e0f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e0fa:	4623      	mov	r3, r4
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	4573      	cmp	r3, lr
 800e100:	d320      	bcc.n	800e144 <__multiply+0x94>
 800e102:	f107 0814 	add.w	r8, r7, #20
 800e106:	f109 0114 	add.w	r1, r9, #20
 800e10a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e10e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e112:	9302      	str	r3, [sp, #8]
 800e114:	1beb      	subs	r3, r5, r7
 800e116:	3b15      	subs	r3, #21
 800e118:	f023 0303 	bic.w	r3, r3, #3
 800e11c:	3304      	adds	r3, #4
 800e11e:	3715      	adds	r7, #21
 800e120:	42bd      	cmp	r5, r7
 800e122:	bf38      	it	cc
 800e124:	2304      	movcc	r3, #4
 800e126:	9301      	str	r3, [sp, #4]
 800e128:	9b02      	ldr	r3, [sp, #8]
 800e12a:	9103      	str	r1, [sp, #12]
 800e12c:	428b      	cmp	r3, r1
 800e12e:	d80c      	bhi.n	800e14a <__multiply+0x9a>
 800e130:	2e00      	cmp	r6, #0
 800e132:	dd03      	ble.n	800e13c <__multiply+0x8c>
 800e134:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d055      	beq.n	800e1e8 <__multiply+0x138>
 800e13c:	6106      	str	r6, [r0, #16]
 800e13e:	b005      	add	sp, #20
 800e140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e144:	f843 2b04 	str.w	r2, [r3], #4
 800e148:	e7d9      	b.n	800e0fe <__multiply+0x4e>
 800e14a:	f8b1 a000 	ldrh.w	sl, [r1]
 800e14e:	f1ba 0f00 	cmp.w	sl, #0
 800e152:	d01f      	beq.n	800e194 <__multiply+0xe4>
 800e154:	46c4      	mov	ip, r8
 800e156:	46a1      	mov	r9, r4
 800e158:	2700      	movs	r7, #0
 800e15a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e15e:	f8d9 3000 	ldr.w	r3, [r9]
 800e162:	fa1f fb82 	uxth.w	fp, r2
 800e166:	b29b      	uxth	r3, r3
 800e168:	fb0a 330b 	mla	r3, sl, fp, r3
 800e16c:	443b      	add	r3, r7
 800e16e:	f8d9 7000 	ldr.w	r7, [r9]
 800e172:	0c12      	lsrs	r2, r2, #16
 800e174:	0c3f      	lsrs	r7, r7, #16
 800e176:	fb0a 7202 	mla	r2, sl, r2, r7
 800e17a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e17e:	b29b      	uxth	r3, r3
 800e180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e184:	4565      	cmp	r5, ip
 800e186:	f849 3b04 	str.w	r3, [r9], #4
 800e18a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e18e:	d8e4      	bhi.n	800e15a <__multiply+0xaa>
 800e190:	9b01      	ldr	r3, [sp, #4]
 800e192:	50e7      	str	r7, [r4, r3]
 800e194:	9b03      	ldr	r3, [sp, #12]
 800e196:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e19a:	3104      	adds	r1, #4
 800e19c:	f1b9 0f00 	cmp.w	r9, #0
 800e1a0:	d020      	beq.n	800e1e4 <__multiply+0x134>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	4647      	mov	r7, r8
 800e1a6:	46a4      	mov	ip, r4
 800e1a8:	f04f 0a00 	mov.w	sl, #0
 800e1ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800e1b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e1b4:	fb09 220b 	mla	r2, r9, fp, r2
 800e1b8:	4452      	add	r2, sl
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e1c0:	f84c 3b04 	str.w	r3, [ip], #4
 800e1c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800e1c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800e1d0:	fb09 330a 	mla	r3, r9, sl, r3
 800e1d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e1d8:	42bd      	cmp	r5, r7
 800e1da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e1de:	d8e5      	bhi.n	800e1ac <__multiply+0xfc>
 800e1e0:	9a01      	ldr	r2, [sp, #4]
 800e1e2:	50a3      	str	r3, [r4, r2]
 800e1e4:	3404      	adds	r4, #4
 800e1e6:	e79f      	b.n	800e128 <__multiply+0x78>
 800e1e8:	3e01      	subs	r6, #1
 800e1ea:	e7a1      	b.n	800e130 <__multiply+0x80>
 800e1ec:	0801078d 	.word	0x0801078d
 800e1f0:	0801079e 	.word	0x0801079e

0800e1f4 <__pow5mult>:
 800e1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f8:	4615      	mov	r5, r2
 800e1fa:	f012 0203 	ands.w	r2, r2, #3
 800e1fe:	4607      	mov	r7, r0
 800e200:	460e      	mov	r6, r1
 800e202:	d007      	beq.n	800e214 <__pow5mult+0x20>
 800e204:	4c25      	ldr	r4, [pc, #148]	@ (800e29c <__pow5mult+0xa8>)
 800e206:	3a01      	subs	r2, #1
 800e208:	2300      	movs	r3, #0
 800e20a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e20e:	f7ff fe5d 	bl	800decc <__multadd>
 800e212:	4606      	mov	r6, r0
 800e214:	10ad      	asrs	r5, r5, #2
 800e216:	d03d      	beq.n	800e294 <__pow5mult+0xa0>
 800e218:	69fc      	ldr	r4, [r7, #28]
 800e21a:	b97c      	cbnz	r4, 800e23c <__pow5mult+0x48>
 800e21c:	2010      	movs	r0, #16
 800e21e:	f7ff fd3d 	bl	800dc9c <malloc>
 800e222:	4602      	mov	r2, r0
 800e224:	61f8      	str	r0, [r7, #28]
 800e226:	b928      	cbnz	r0, 800e234 <__pow5mult+0x40>
 800e228:	4b1d      	ldr	r3, [pc, #116]	@ (800e2a0 <__pow5mult+0xac>)
 800e22a:	481e      	ldr	r0, [pc, #120]	@ (800e2a4 <__pow5mult+0xb0>)
 800e22c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e230:	f001 fd26 	bl	800fc80 <__assert_func>
 800e234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e238:	6004      	str	r4, [r0, #0]
 800e23a:	60c4      	str	r4, [r0, #12]
 800e23c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e244:	b94c      	cbnz	r4, 800e25a <__pow5mult+0x66>
 800e246:	f240 2171 	movw	r1, #625	@ 0x271
 800e24a:	4638      	mov	r0, r7
 800e24c:	f7ff ff1a 	bl	800e084 <__i2b>
 800e250:	2300      	movs	r3, #0
 800e252:	f8c8 0008 	str.w	r0, [r8, #8]
 800e256:	4604      	mov	r4, r0
 800e258:	6003      	str	r3, [r0, #0]
 800e25a:	f04f 0900 	mov.w	r9, #0
 800e25e:	07eb      	lsls	r3, r5, #31
 800e260:	d50a      	bpl.n	800e278 <__pow5mult+0x84>
 800e262:	4631      	mov	r1, r6
 800e264:	4622      	mov	r2, r4
 800e266:	4638      	mov	r0, r7
 800e268:	f7ff ff22 	bl	800e0b0 <__multiply>
 800e26c:	4631      	mov	r1, r6
 800e26e:	4680      	mov	r8, r0
 800e270:	4638      	mov	r0, r7
 800e272:	f7ff fe09 	bl	800de88 <_Bfree>
 800e276:	4646      	mov	r6, r8
 800e278:	106d      	asrs	r5, r5, #1
 800e27a:	d00b      	beq.n	800e294 <__pow5mult+0xa0>
 800e27c:	6820      	ldr	r0, [r4, #0]
 800e27e:	b938      	cbnz	r0, 800e290 <__pow5mult+0x9c>
 800e280:	4622      	mov	r2, r4
 800e282:	4621      	mov	r1, r4
 800e284:	4638      	mov	r0, r7
 800e286:	f7ff ff13 	bl	800e0b0 <__multiply>
 800e28a:	6020      	str	r0, [r4, #0]
 800e28c:	f8c0 9000 	str.w	r9, [r0]
 800e290:	4604      	mov	r4, r0
 800e292:	e7e4      	b.n	800e25e <__pow5mult+0x6a>
 800e294:	4630      	mov	r0, r6
 800e296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29a:	bf00      	nop
 800e29c:	080108b0 	.word	0x080108b0
 800e2a0:	0801071e 	.word	0x0801071e
 800e2a4:	0801079e 	.word	0x0801079e

0800e2a8 <__lshift>:
 800e2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ac:	460c      	mov	r4, r1
 800e2ae:	6849      	ldr	r1, [r1, #4]
 800e2b0:	6923      	ldr	r3, [r4, #16]
 800e2b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2b6:	68a3      	ldr	r3, [r4, #8]
 800e2b8:	4607      	mov	r7, r0
 800e2ba:	4691      	mov	r9, r2
 800e2bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2c0:	f108 0601 	add.w	r6, r8, #1
 800e2c4:	42b3      	cmp	r3, r6
 800e2c6:	db0b      	blt.n	800e2e0 <__lshift+0x38>
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f7ff fd9d 	bl	800de08 <_Balloc>
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	b948      	cbnz	r0, 800e2e6 <__lshift+0x3e>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	4b28      	ldr	r3, [pc, #160]	@ (800e378 <__lshift+0xd0>)
 800e2d6:	4829      	ldr	r0, [pc, #164]	@ (800e37c <__lshift+0xd4>)
 800e2d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e2dc:	f001 fcd0 	bl	800fc80 <__assert_func>
 800e2e0:	3101      	adds	r1, #1
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	e7ee      	b.n	800e2c4 <__lshift+0x1c>
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	f100 0114 	add.w	r1, r0, #20
 800e2ec:	f100 0210 	add.w	r2, r0, #16
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	4553      	cmp	r3, sl
 800e2f4:	db33      	blt.n	800e35e <__lshift+0xb6>
 800e2f6:	6920      	ldr	r0, [r4, #16]
 800e2f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2fc:	f104 0314 	add.w	r3, r4, #20
 800e300:	f019 091f 	ands.w	r9, r9, #31
 800e304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e30c:	d02b      	beq.n	800e366 <__lshift+0xbe>
 800e30e:	f1c9 0e20 	rsb	lr, r9, #32
 800e312:	468a      	mov	sl, r1
 800e314:	2200      	movs	r2, #0
 800e316:	6818      	ldr	r0, [r3, #0]
 800e318:	fa00 f009 	lsl.w	r0, r0, r9
 800e31c:	4310      	orrs	r0, r2
 800e31e:	f84a 0b04 	str.w	r0, [sl], #4
 800e322:	f853 2b04 	ldr.w	r2, [r3], #4
 800e326:	459c      	cmp	ip, r3
 800e328:	fa22 f20e 	lsr.w	r2, r2, lr
 800e32c:	d8f3      	bhi.n	800e316 <__lshift+0x6e>
 800e32e:	ebac 0304 	sub.w	r3, ip, r4
 800e332:	3b15      	subs	r3, #21
 800e334:	f023 0303 	bic.w	r3, r3, #3
 800e338:	3304      	adds	r3, #4
 800e33a:	f104 0015 	add.w	r0, r4, #21
 800e33e:	4560      	cmp	r0, ip
 800e340:	bf88      	it	hi
 800e342:	2304      	movhi	r3, #4
 800e344:	50ca      	str	r2, [r1, r3]
 800e346:	b10a      	cbz	r2, 800e34c <__lshift+0xa4>
 800e348:	f108 0602 	add.w	r6, r8, #2
 800e34c:	3e01      	subs	r6, #1
 800e34e:	4638      	mov	r0, r7
 800e350:	612e      	str	r6, [r5, #16]
 800e352:	4621      	mov	r1, r4
 800e354:	f7ff fd98 	bl	800de88 <_Bfree>
 800e358:	4628      	mov	r0, r5
 800e35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e35e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e362:	3301      	adds	r3, #1
 800e364:	e7c5      	b.n	800e2f2 <__lshift+0x4a>
 800e366:	3904      	subs	r1, #4
 800e368:	f853 2b04 	ldr.w	r2, [r3], #4
 800e36c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e370:	459c      	cmp	ip, r3
 800e372:	d8f9      	bhi.n	800e368 <__lshift+0xc0>
 800e374:	e7ea      	b.n	800e34c <__lshift+0xa4>
 800e376:	bf00      	nop
 800e378:	0801078d 	.word	0x0801078d
 800e37c:	0801079e 	.word	0x0801079e

0800e380 <__mcmp>:
 800e380:	690a      	ldr	r2, [r1, #16]
 800e382:	4603      	mov	r3, r0
 800e384:	6900      	ldr	r0, [r0, #16]
 800e386:	1a80      	subs	r0, r0, r2
 800e388:	b530      	push	{r4, r5, lr}
 800e38a:	d10e      	bne.n	800e3aa <__mcmp+0x2a>
 800e38c:	3314      	adds	r3, #20
 800e38e:	3114      	adds	r1, #20
 800e390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e39c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e3a0:	4295      	cmp	r5, r2
 800e3a2:	d003      	beq.n	800e3ac <__mcmp+0x2c>
 800e3a4:	d205      	bcs.n	800e3b2 <__mcmp+0x32>
 800e3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3aa:	bd30      	pop	{r4, r5, pc}
 800e3ac:	42a3      	cmp	r3, r4
 800e3ae:	d3f3      	bcc.n	800e398 <__mcmp+0x18>
 800e3b0:	e7fb      	b.n	800e3aa <__mcmp+0x2a>
 800e3b2:	2001      	movs	r0, #1
 800e3b4:	e7f9      	b.n	800e3aa <__mcmp+0x2a>
	...

0800e3b8 <__mdiff>:
 800e3b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	4689      	mov	r9, r1
 800e3be:	4606      	mov	r6, r0
 800e3c0:	4611      	mov	r1, r2
 800e3c2:	4648      	mov	r0, r9
 800e3c4:	4614      	mov	r4, r2
 800e3c6:	f7ff ffdb 	bl	800e380 <__mcmp>
 800e3ca:	1e05      	subs	r5, r0, #0
 800e3cc:	d112      	bne.n	800e3f4 <__mdiff+0x3c>
 800e3ce:	4629      	mov	r1, r5
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f7ff fd19 	bl	800de08 <_Balloc>
 800e3d6:	4602      	mov	r2, r0
 800e3d8:	b928      	cbnz	r0, 800e3e6 <__mdiff+0x2e>
 800e3da:	4b3f      	ldr	r3, [pc, #252]	@ (800e4d8 <__mdiff+0x120>)
 800e3dc:	f240 2137 	movw	r1, #567	@ 0x237
 800e3e0:	483e      	ldr	r0, [pc, #248]	@ (800e4dc <__mdiff+0x124>)
 800e3e2:	f001 fc4d 	bl	800fc80 <__assert_func>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3ec:	4610      	mov	r0, r2
 800e3ee:	b003      	add	sp, #12
 800e3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3f4:	bfbc      	itt	lt
 800e3f6:	464b      	movlt	r3, r9
 800e3f8:	46a1      	movlt	r9, r4
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e400:	bfba      	itte	lt
 800e402:	461c      	movlt	r4, r3
 800e404:	2501      	movlt	r5, #1
 800e406:	2500      	movge	r5, #0
 800e408:	f7ff fcfe 	bl	800de08 <_Balloc>
 800e40c:	4602      	mov	r2, r0
 800e40e:	b918      	cbnz	r0, 800e418 <__mdiff+0x60>
 800e410:	4b31      	ldr	r3, [pc, #196]	@ (800e4d8 <__mdiff+0x120>)
 800e412:	f240 2145 	movw	r1, #581	@ 0x245
 800e416:	e7e3      	b.n	800e3e0 <__mdiff+0x28>
 800e418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e41c:	6926      	ldr	r6, [r4, #16]
 800e41e:	60c5      	str	r5, [r0, #12]
 800e420:	f109 0310 	add.w	r3, r9, #16
 800e424:	f109 0514 	add.w	r5, r9, #20
 800e428:	f104 0e14 	add.w	lr, r4, #20
 800e42c:	f100 0b14 	add.w	fp, r0, #20
 800e430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	46d9      	mov	r9, fp
 800e43c:	f04f 0c00 	mov.w	ip, #0
 800e440:	9b01      	ldr	r3, [sp, #4]
 800e442:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e446:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e44a:	9301      	str	r3, [sp, #4]
 800e44c:	fa1f f38a 	uxth.w	r3, sl
 800e450:	4619      	mov	r1, r3
 800e452:	b283      	uxth	r3, r0
 800e454:	1acb      	subs	r3, r1, r3
 800e456:	0c00      	lsrs	r0, r0, #16
 800e458:	4463      	add	r3, ip
 800e45a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e45e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e462:	b29b      	uxth	r3, r3
 800e464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e468:	4576      	cmp	r6, lr
 800e46a:	f849 3b04 	str.w	r3, [r9], #4
 800e46e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e472:	d8e5      	bhi.n	800e440 <__mdiff+0x88>
 800e474:	1b33      	subs	r3, r6, r4
 800e476:	3b15      	subs	r3, #21
 800e478:	f023 0303 	bic.w	r3, r3, #3
 800e47c:	3415      	adds	r4, #21
 800e47e:	3304      	adds	r3, #4
 800e480:	42a6      	cmp	r6, r4
 800e482:	bf38      	it	cc
 800e484:	2304      	movcc	r3, #4
 800e486:	441d      	add	r5, r3
 800e488:	445b      	add	r3, fp
 800e48a:	461e      	mov	r6, r3
 800e48c:	462c      	mov	r4, r5
 800e48e:	4544      	cmp	r4, r8
 800e490:	d30e      	bcc.n	800e4b0 <__mdiff+0xf8>
 800e492:	f108 0103 	add.w	r1, r8, #3
 800e496:	1b49      	subs	r1, r1, r5
 800e498:	f021 0103 	bic.w	r1, r1, #3
 800e49c:	3d03      	subs	r5, #3
 800e49e:	45a8      	cmp	r8, r5
 800e4a0:	bf38      	it	cc
 800e4a2:	2100      	movcc	r1, #0
 800e4a4:	440b      	add	r3, r1
 800e4a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4aa:	b191      	cbz	r1, 800e4d2 <__mdiff+0x11a>
 800e4ac:	6117      	str	r7, [r2, #16]
 800e4ae:	e79d      	b.n	800e3ec <__mdiff+0x34>
 800e4b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800e4b4:	46e6      	mov	lr, ip
 800e4b6:	0c08      	lsrs	r0, r1, #16
 800e4b8:	fa1c fc81 	uxtah	ip, ip, r1
 800e4bc:	4471      	add	r1, lr
 800e4be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e4c2:	b289      	uxth	r1, r1
 800e4c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e4c8:	f846 1b04 	str.w	r1, [r6], #4
 800e4cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e4d0:	e7dd      	b.n	800e48e <__mdiff+0xd6>
 800e4d2:	3f01      	subs	r7, #1
 800e4d4:	e7e7      	b.n	800e4a6 <__mdiff+0xee>
 800e4d6:	bf00      	nop
 800e4d8:	0801078d 	.word	0x0801078d
 800e4dc:	0801079e 	.word	0x0801079e

0800e4e0 <__ulp>:
 800e4e0:	b082      	sub	sp, #8
 800e4e2:	ed8d 0b00 	vstr	d0, [sp]
 800e4e6:	9a01      	ldr	r2, [sp, #4]
 800e4e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e528 <__ulp+0x48>)
 800e4ea:	4013      	ands	r3, r2
 800e4ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	dc08      	bgt.n	800e506 <__ulp+0x26>
 800e4f4:	425b      	negs	r3, r3
 800e4f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e4fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e4fe:	da04      	bge.n	800e50a <__ulp+0x2a>
 800e500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e504:	4113      	asrs	r3, r2
 800e506:	2200      	movs	r2, #0
 800e508:	e008      	b.n	800e51c <__ulp+0x3c>
 800e50a:	f1a2 0314 	sub.w	r3, r2, #20
 800e50e:	2b1e      	cmp	r3, #30
 800e510:	bfda      	itte	le
 800e512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e516:	40da      	lsrle	r2, r3
 800e518:	2201      	movgt	r2, #1
 800e51a:	2300      	movs	r3, #0
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	ec41 0b10 	vmov	d0, r0, r1
 800e524:	b002      	add	sp, #8
 800e526:	4770      	bx	lr
 800e528:	7ff00000 	.word	0x7ff00000

0800e52c <__b2d>:
 800e52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e530:	6906      	ldr	r6, [r0, #16]
 800e532:	f100 0814 	add.w	r8, r0, #20
 800e536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e53a:	1f37      	subs	r7, r6, #4
 800e53c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e540:	4610      	mov	r0, r2
 800e542:	f7ff fd53 	bl	800dfec <__hi0bits>
 800e546:	f1c0 0320 	rsb	r3, r0, #32
 800e54a:	280a      	cmp	r0, #10
 800e54c:	600b      	str	r3, [r1, #0]
 800e54e:	491b      	ldr	r1, [pc, #108]	@ (800e5bc <__b2d+0x90>)
 800e550:	dc15      	bgt.n	800e57e <__b2d+0x52>
 800e552:	f1c0 0c0b 	rsb	ip, r0, #11
 800e556:	fa22 f30c 	lsr.w	r3, r2, ip
 800e55a:	45b8      	cmp	r8, r7
 800e55c:	ea43 0501 	orr.w	r5, r3, r1
 800e560:	bf34      	ite	cc
 800e562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e566:	2300      	movcs	r3, #0
 800e568:	3015      	adds	r0, #21
 800e56a:	fa02 f000 	lsl.w	r0, r2, r0
 800e56e:	fa23 f30c 	lsr.w	r3, r3, ip
 800e572:	4303      	orrs	r3, r0
 800e574:	461c      	mov	r4, r3
 800e576:	ec45 4b10 	vmov	d0, r4, r5
 800e57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e57e:	45b8      	cmp	r8, r7
 800e580:	bf3a      	itte	cc
 800e582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e586:	f1a6 0708 	subcc.w	r7, r6, #8
 800e58a:	2300      	movcs	r3, #0
 800e58c:	380b      	subs	r0, #11
 800e58e:	d012      	beq.n	800e5b6 <__b2d+0x8a>
 800e590:	f1c0 0120 	rsb	r1, r0, #32
 800e594:	fa23 f401 	lsr.w	r4, r3, r1
 800e598:	4082      	lsls	r2, r0
 800e59a:	4322      	orrs	r2, r4
 800e59c:	4547      	cmp	r7, r8
 800e59e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e5a2:	bf8c      	ite	hi
 800e5a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e5a8:	2200      	movls	r2, #0
 800e5aa:	4083      	lsls	r3, r0
 800e5ac:	40ca      	lsrs	r2, r1
 800e5ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	e7de      	b.n	800e574 <__b2d+0x48>
 800e5b6:	ea42 0501 	orr.w	r5, r2, r1
 800e5ba:	e7db      	b.n	800e574 <__b2d+0x48>
 800e5bc:	3ff00000 	.word	0x3ff00000

0800e5c0 <__d2b>:
 800e5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	ec59 8b10 	vmov	r8, r9, d0
 800e5cc:	4616      	mov	r6, r2
 800e5ce:	f7ff fc1b 	bl	800de08 <_Balloc>
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	b930      	cbnz	r0, 800e5e4 <__d2b+0x24>
 800e5d6:	4602      	mov	r2, r0
 800e5d8:	4b23      	ldr	r3, [pc, #140]	@ (800e668 <__d2b+0xa8>)
 800e5da:	4824      	ldr	r0, [pc, #144]	@ (800e66c <__d2b+0xac>)
 800e5dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800e5e0:	f001 fb4e 	bl	800fc80 <__assert_func>
 800e5e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e5ec:	b10d      	cbz	r5, 800e5f2 <__d2b+0x32>
 800e5ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e5f2:	9301      	str	r3, [sp, #4]
 800e5f4:	f1b8 0300 	subs.w	r3, r8, #0
 800e5f8:	d023      	beq.n	800e642 <__d2b+0x82>
 800e5fa:	4668      	mov	r0, sp
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	f7ff fd14 	bl	800e02a <__lo0bits>
 800e602:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e606:	b1d0      	cbz	r0, 800e63e <__d2b+0x7e>
 800e608:	f1c0 0320 	rsb	r3, r0, #32
 800e60c:	fa02 f303 	lsl.w	r3, r2, r3
 800e610:	430b      	orrs	r3, r1
 800e612:	40c2      	lsrs	r2, r0
 800e614:	6163      	str	r3, [r4, #20]
 800e616:	9201      	str	r2, [sp, #4]
 800e618:	9b01      	ldr	r3, [sp, #4]
 800e61a:	61a3      	str	r3, [r4, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bf0c      	ite	eq
 800e620:	2201      	moveq	r2, #1
 800e622:	2202      	movne	r2, #2
 800e624:	6122      	str	r2, [r4, #16]
 800e626:	b1a5      	cbz	r5, 800e652 <__d2b+0x92>
 800e628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e62c:	4405      	add	r5, r0
 800e62e:	603d      	str	r5, [r7, #0]
 800e630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e634:	6030      	str	r0, [r6, #0]
 800e636:	4620      	mov	r0, r4
 800e638:	b003      	add	sp, #12
 800e63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e63e:	6161      	str	r1, [r4, #20]
 800e640:	e7ea      	b.n	800e618 <__d2b+0x58>
 800e642:	a801      	add	r0, sp, #4
 800e644:	f7ff fcf1 	bl	800e02a <__lo0bits>
 800e648:	9b01      	ldr	r3, [sp, #4]
 800e64a:	6163      	str	r3, [r4, #20]
 800e64c:	3020      	adds	r0, #32
 800e64e:	2201      	movs	r2, #1
 800e650:	e7e8      	b.n	800e624 <__d2b+0x64>
 800e652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e65a:	6038      	str	r0, [r7, #0]
 800e65c:	6918      	ldr	r0, [r3, #16]
 800e65e:	f7ff fcc5 	bl	800dfec <__hi0bits>
 800e662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e666:	e7e5      	b.n	800e634 <__d2b+0x74>
 800e668:	0801078d 	.word	0x0801078d
 800e66c:	0801079e 	.word	0x0801079e

0800e670 <__ratio>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	b085      	sub	sp, #20
 800e676:	e9cd 1000 	strd	r1, r0, [sp]
 800e67a:	a902      	add	r1, sp, #8
 800e67c:	f7ff ff56 	bl	800e52c <__b2d>
 800e680:	9800      	ldr	r0, [sp, #0]
 800e682:	a903      	add	r1, sp, #12
 800e684:	ec55 4b10 	vmov	r4, r5, d0
 800e688:	f7ff ff50 	bl	800e52c <__b2d>
 800e68c:	9b01      	ldr	r3, [sp, #4]
 800e68e:	6919      	ldr	r1, [r3, #16]
 800e690:	9b00      	ldr	r3, [sp, #0]
 800e692:	691b      	ldr	r3, [r3, #16]
 800e694:	1ac9      	subs	r1, r1, r3
 800e696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e69a:	1a9b      	subs	r3, r3, r2
 800e69c:	ec5b ab10 	vmov	sl, fp, d0
 800e6a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	bfce      	itee	gt
 800e6a8:	462a      	movgt	r2, r5
 800e6aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e6ae:	465a      	movle	r2, fp
 800e6b0:	462f      	mov	r7, r5
 800e6b2:	46d9      	mov	r9, fp
 800e6b4:	bfcc      	ite	gt
 800e6b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e6ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e6be:	464b      	mov	r3, r9
 800e6c0:	4652      	mov	r2, sl
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f2 f8c1 	bl	800084c <__aeabi_ddiv>
 800e6ca:	ec41 0b10 	vmov	d0, r0, r1
 800e6ce:	b005      	add	sp, #20
 800e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e6d4 <__copybits>:
 800e6d4:	3901      	subs	r1, #1
 800e6d6:	b570      	push	{r4, r5, r6, lr}
 800e6d8:	1149      	asrs	r1, r1, #5
 800e6da:	6914      	ldr	r4, [r2, #16]
 800e6dc:	3101      	adds	r1, #1
 800e6de:	f102 0314 	add.w	r3, r2, #20
 800e6e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e6e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e6ea:	1f05      	subs	r5, r0, #4
 800e6ec:	42a3      	cmp	r3, r4
 800e6ee:	d30c      	bcc.n	800e70a <__copybits+0x36>
 800e6f0:	1aa3      	subs	r3, r4, r2
 800e6f2:	3b11      	subs	r3, #17
 800e6f4:	f023 0303 	bic.w	r3, r3, #3
 800e6f8:	3211      	adds	r2, #17
 800e6fa:	42a2      	cmp	r2, r4
 800e6fc:	bf88      	it	hi
 800e6fe:	2300      	movhi	r3, #0
 800e700:	4418      	add	r0, r3
 800e702:	2300      	movs	r3, #0
 800e704:	4288      	cmp	r0, r1
 800e706:	d305      	bcc.n	800e714 <__copybits+0x40>
 800e708:	bd70      	pop	{r4, r5, r6, pc}
 800e70a:	f853 6b04 	ldr.w	r6, [r3], #4
 800e70e:	f845 6f04 	str.w	r6, [r5, #4]!
 800e712:	e7eb      	b.n	800e6ec <__copybits+0x18>
 800e714:	f840 3b04 	str.w	r3, [r0], #4
 800e718:	e7f4      	b.n	800e704 <__copybits+0x30>

0800e71a <__any_on>:
 800e71a:	f100 0214 	add.w	r2, r0, #20
 800e71e:	6900      	ldr	r0, [r0, #16]
 800e720:	114b      	asrs	r3, r1, #5
 800e722:	4298      	cmp	r0, r3
 800e724:	b510      	push	{r4, lr}
 800e726:	db11      	blt.n	800e74c <__any_on+0x32>
 800e728:	dd0a      	ble.n	800e740 <__any_on+0x26>
 800e72a:	f011 011f 	ands.w	r1, r1, #31
 800e72e:	d007      	beq.n	800e740 <__any_on+0x26>
 800e730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e734:	fa24 f001 	lsr.w	r0, r4, r1
 800e738:	fa00 f101 	lsl.w	r1, r0, r1
 800e73c:	428c      	cmp	r4, r1
 800e73e:	d10b      	bne.n	800e758 <__any_on+0x3e>
 800e740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e744:	4293      	cmp	r3, r2
 800e746:	d803      	bhi.n	800e750 <__any_on+0x36>
 800e748:	2000      	movs	r0, #0
 800e74a:	bd10      	pop	{r4, pc}
 800e74c:	4603      	mov	r3, r0
 800e74e:	e7f7      	b.n	800e740 <__any_on+0x26>
 800e750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e754:	2900      	cmp	r1, #0
 800e756:	d0f5      	beq.n	800e744 <__any_on+0x2a>
 800e758:	2001      	movs	r0, #1
 800e75a:	e7f6      	b.n	800e74a <__any_on+0x30>

0800e75c <sulp>:
 800e75c:	b570      	push	{r4, r5, r6, lr}
 800e75e:	4604      	mov	r4, r0
 800e760:	460d      	mov	r5, r1
 800e762:	ec45 4b10 	vmov	d0, r4, r5
 800e766:	4616      	mov	r6, r2
 800e768:	f7ff feba 	bl	800e4e0 <__ulp>
 800e76c:	ec51 0b10 	vmov	r0, r1, d0
 800e770:	b17e      	cbz	r6, 800e792 <sulp+0x36>
 800e772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e776:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	dd09      	ble.n	800e792 <sulp+0x36>
 800e77e:	051b      	lsls	r3, r3, #20
 800e780:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e784:	2400      	movs	r4, #0
 800e786:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e78a:	4622      	mov	r2, r4
 800e78c:	462b      	mov	r3, r5
 800e78e:	f7f1 ff33 	bl	80005f8 <__aeabi_dmul>
 800e792:	ec41 0b10 	vmov	d0, r0, r1
 800e796:	bd70      	pop	{r4, r5, r6, pc}

0800e798 <_strtod_l>:
 800e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79c:	b09f      	sub	sp, #124	@ 0x7c
 800e79e:	460c      	mov	r4, r1
 800e7a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e7a6:	9005      	str	r0, [sp, #20]
 800e7a8:	f04f 0a00 	mov.w	sl, #0
 800e7ac:	f04f 0b00 	mov.w	fp, #0
 800e7b0:	460a      	mov	r2, r1
 800e7b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e7b4:	7811      	ldrb	r1, [r2, #0]
 800e7b6:	292b      	cmp	r1, #43	@ 0x2b
 800e7b8:	d04a      	beq.n	800e850 <_strtod_l+0xb8>
 800e7ba:	d838      	bhi.n	800e82e <_strtod_l+0x96>
 800e7bc:	290d      	cmp	r1, #13
 800e7be:	d832      	bhi.n	800e826 <_strtod_l+0x8e>
 800e7c0:	2908      	cmp	r1, #8
 800e7c2:	d832      	bhi.n	800e82a <_strtod_l+0x92>
 800e7c4:	2900      	cmp	r1, #0
 800e7c6:	d03b      	beq.n	800e840 <_strtod_l+0xa8>
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800e7cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e7ce:	782a      	ldrb	r2, [r5, #0]
 800e7d0:	2a30      	cmp	r2, #48	@ 0x30
 800e7d2:	f040 80b2 	bne.w	800e93a <_strtod_l+0x1a2>
 800e7d6:	786a      	ldrb	r2, [r5, #1]
 800e7d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e7dc:	2a58      	cmp	r2, #88	@ 0x58
 800e7de:	d16e      	bne.n	800e8be <_strtod_l+0x126>
 800e7e0:	9302      	str	r3, [sp, #8]
 800e7e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e4:	9301      	str	r3, [sp, #4]
 800e7e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	4a8f      	ldr	r2, [pc, #572]	@ (800ea28 <_strtod_l+0x290>)
 800e7ec:	9805      	ldr	r0, [sp, #20]
 800e7ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e7f0:	a919      	add	r1, sp, #100	@ 0x64
 800e7f2:	f001 fadf 	bl	800fdb4 <__gethex>
 800e7f6:	f010 060f 	ands.w	r6, r0, #15
 800e7fa:	4604      	mov	r4, r0
 800e7fc:	d005      	beq.n	800e80a <_strtod_l+0x72>
 800e7fe:	2e06      	cmp	r6, #6
 800e800:	d128      	bne.n	800e854 <_strtod_l+0xbc>
 800e802:	3501      	adds	r5, #1
 800e804:	2300      	movs	r3, #0
 800e806:	9519      	str	r5, [sp, #100]	@ 0x64
 800e808:	930e      	str	r3, [sp, #56]	@ 0x38
 800e80a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f040 858e 	bne.w	800f32e <_strtod_l+0xb96>
 800e812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e814:	b1cb      	cbz	r3, 800e84a <_strtod_l+0xb2>
 800e816:	4652      	mov	r2, sl
 800e818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e81c:	ec43 2b10 	vmov	d0, r2, r3
 800e820:	b01f      	add	sp, #124	@ 0x7c
 800e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e826:	2920      	cmp	r1, #32
 800e828:	d1ce      	bne.n	800e7c8 <_strtod_l+0x30>
 800e82a:	3201      	adds	r2, #1
 800e82c:	e7c1      	b.n	800e7b2 <_strtod_l+0x1a>
 800e82e:	292d      	cmp	r1, #45	@ 0x2d
 800e830:	d1ca      	bne.n	800e7c8 <_strtod_l+0x30>
 800e832:	2101      	movs	r1, #1
 800e834:	910e      	str	r1, [sp, #56]	@ 0x38
 800e836:	1c51      	adds	r1, r2, #1
 800e838:	9119      	str	r1, [sp, #100]	@ 0x64
 800e83a:	7852      	ldrb	r2, [r2, #1]
 800e83c:	2a00      	cmp	r2, #0
 800e83e:	d1c5      	bne.n	800e7cc <_strtod_l+0x34>
 800e840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e842:	9419      	str	r4, [sp, #100]	@ 0x64
 800e844:	2b00      	cmp	r3, #0
 800e846:	f040 8570 	bne.w	800f32a <_strtod_l+0xb92>
 800e84a:	4652      	mov	r2, sl
 800e84c:	465b      	mov	r3, fp
 800e84e:	e7e5      	b.n	800e81c <_strtod_l+0x84>
 800e850:	2100      	movs	r1, #0
 800e852:	e7ef      	b.n	800e834 <_strtod_l+0x9c>
 800e854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e856:	b13a      	cbz	r2, 800e868 <_strtod_l+0xd0>
 800e858:	2135      	movs	r1, #53	@ 0x35
 800e85a:	a81c      	add	r0, sp, #112	@ 0x70
 800e85c:	f7ff ff3a 	bl	800e6d4 <__copybits>
 800e860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e862:	9805      	ldr	r0, [sp, #20]
 800e864:	f7ff fb10 	bl	800de88 <_Bfree>
 800e868:	3e01      	subs	r6, #1
 800e86a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e86c:	2e04      	cmp	r6, #4
 800e86e:	d806      	bhi.n	800e87e <_strtod_l+0xe6>
 800e870:	e8df f006 	tbb	[pc, r6]
 800e874:	201d0314 	.word	0x201d0314
 800e878:	14          	.byte	0x14
 800e879:	00          	.byte	0x00
 800e87a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e87e:	05e1      	lsls	r1, r4, #23
 800e880:	bf48      	it	mi
 800e882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e88a:	0d1b      	lsrs	r3, r3, #20
 800e88c:	051b      	lsls	r3, r3, #20
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1bb      	bne.n	800e80a <_strtod_l+0x72>
 800e892:	f7fe fb1d 	bl	800ced0 <__errno>
 800e896:	2322      	movs	r3, #34	@ 0x22
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	e7b6      	b.n	800e80a <_strtod_l+0x72>
 800e89c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e8a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e8a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e8a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e8ac:	e7e7      	b.n	800e87e <_strtod_l+0xe6>
 800e8ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ea30 <_strtod_l+0x298>
 800e8b2:	e7e4      	b.n	800e87e <_strtod_l+0xe6>
 800e8b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e8b8:	f04f 3aff 	mov.w	sl, #4294967295
 800e8bc:	e7df      	b.n	800e87e <_strtod_l+0xe6>
 800e8be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8c4:	785b      	ldrb	r3, [r3, #1]
 800e8c6:	2b30      	cmp	r3, #48	@ 0x30
 800e8c8:	d0f9      	beq.n	800e8be <_strtod_l+0x126>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d09d      	beq.n	800e80a <_strtod_l+0x72>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	2700      	movs	r7, #0
 800e8d2:	9308      	str	r3, [sp, #32]
 800e8d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8d6:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e8da:	46b9      	mov	r9, r7
 800e8dc:	220a      	movs	r2, #10
 800e8de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e8e0:	7805      	ldrb	r5, [r0, #0]
 800e8e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e8e6:	b2d9      	uxtb	r1, r3
 800e8e8:	2909      	cmp	r1, #9
 800e8ea:	d928      	bls.n	800e93e <_strtod_l+0x1a6>
 800e8ec:	494f      	ldr	r1, [pc, #316]	@ (800ea2c <_strtod_l+0x294>)
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f001 f97a 	bl	800fbe8 <strncmp>
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d032      	beq.n	800e95e <_strtod_l+0x1c6>
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	462a      	mov	r2, r5
 800e8fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e8fe:	464d      	mov	r5, r9
 800e900:	4603      	mov	r3, r0
 800e902:	2a65      	cmp	r2, #101	@ 0x65
 800e904:	d001      	beq.n	800e90a <_strtod_l+0x172>
 800e906:	2a45      	cmp	r2, #69	@ 0x45
 800e908:	d114      	bne.n	800e934 <_strtod_l+0x19c>
 800e90a:	b91d      	cbnz	r5, 800e914 <_strtod_l+0x17c>
 800e90c:	9a08      	ldr	r2, [sp, #32]
 800e90e:	4302      	orrs	r2, r0
 800e910:	d096      	beq.n	800e840 <_strtod_l+0xa8>
 800e912:	2500      	movs	r5, #0
 800e914:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e916:	1c62      	adds	r2, r4, #1
 800e918:	9219      	str	r2, [sp, #100]	@ 0x64
 800e91a:	7862      	ldrb	r2, [r4, #1]
 800e91c:	2a2b      	cmp	r2, #43	@ 0x2b
 800e91e:	d07a      	beq.n	800ea16 <_strtod_l+0x27e>
 800e920:	2a2d      	cmp	r2, #45	@ 0x2d
 800e922:	d07e      	beq.n	800ea22 <_strtod_l+0x28a>
 800e924:	f04f 0c00 	mov.w	ip, #0
 800e928:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e92c:	2909      	cmp	r1, #9
 800e92e:	f240 8085 	bls.w	800ea3c <_strtod_l+0x2a4>
 800e932:	9419      	str	r4, [sp, #100]	@ 0x64
 800e934:	f04f 0800 	mov.w	r8, #0
 800e938:	e0a5      	b.n	800ea86 <_strtod_l+0x2ee>
 800e93a:	2300      	movs	r3, #0
 800e93c:	e7c8      	b.n	800e8d0 <_strtod_l+0x138>
 800e93e:	f1b9 0f08 	cmp.w	r9, #8
 800e942:	bfd8      	it	le
 800e944:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e946:	f100 0001 	add.w	r0, r0, #1
 800e94a:	bfda      	itte	le
 800e94c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e950:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e952:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e956:	f109 0901 	add.w	r9, r9, #1
 800e95a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e95c:	e7bf      	b.n	800e8de <_strtod_l+0x146>
 800e95e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e960:	1c5a      	adds	r2, r3, #1
 800e962:	9219      	str	r2, [sp, #100]	@ 0x64
 800e964:	785a      	ldrb	r2, [r3, #1]
 800e966:	f1b9 0f00 	cmp.w	r9, #0
 800e96a:	d03b      	beq.n	800e9e4 <_strtod_l+0x24c>
 800e96c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e96e:	464d      	mov	r5, r9
 800e970:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e974:	2b09      	cmp	r3, #9
 800e976:	d912      	bls.n	800e99e <_strtod_l+0x206>
 800e978:	2301      	movs	r3, #1
 800e97a:	e7c2      	b.n	800e902 <_strtod_l+0x16a>
 800e97c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	9219      	str	r2, [sp, #100]	@ 0x64
 800e982:	785a      	ldrb	r2, [r3, #1]
 800e984:	3001      	adds	r0, #1
 800e986:	2a30      	cmp	r2, #48	@ 0x30
 800e988:	d0f8      	beq.n	800e97c <_strtod_l+0x1e4>
 800e98a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e98e:	2b08      	cmp	r3, #8
 800e990:	f200 84d2 	bhi.w	800f338 <_strtod_l+0xba0>
 800e994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e996:	900a      	str	r0, [sp, #40]	@ 0x28
 800e998:	2000      	movs	r0, #0
 800e99a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e99c:	4605      	mov	r5, r0
 800e99e:	3a30      	subs	r2, #48	@ 0x30
 800e9a0:	f100 0301 	add.w	r3, r0, #1
 800e9a4:	d018      	beq.n	800e9d8 <_strtod_l+0x240>
 800e9a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9a8:	4419      	add	r1, r3
 800e9aa:	910a      	str	r1, [sp, #40]	@ 0x28
 800e9ac:	462e      	mov	r6, r5
 800e9ae:	f04f 0e0a 	mov.w	lr, #10
 800e9b2:	1c71      	adds	r1, r6, #1
 800e9b4:	eba1 0c05 	sub.w	ip, r1, r5
 800e9b8:	4563      	cmp	r3, ip
 800e9ba:	dc15      	bgt.n	800e9e8 <_strtod_l+0x250>
 800e9bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e9c0:	182b      	adds	r3, r5, r0
 800e9c2:	2b08      	cmp	r3, #8
 800e9c4:	f105 0501 	add.w	r5, r5, #1
 800e9c8:	4405      	add	r5, r0
 800e9ca:	dc1a      	bgt.n	800ea02 <_strtod_l+0x26a>
 800e9cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e9ce:	230a      	movs	r3, #10
 800e9d0:	fb03 2301 	mla	r3, r3, r1, r2
 800e9d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e9da:	1c51      	adds	r1, r2, #1
 800e9dc:	9119      	str	r1, [sp, #100]	@ 0x64
 800e9de:	7852      	ldrb	r2, [r2, #1]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	e7c5      	b.n	800e970 <_strtod_l+0x1d8>
 800e9e4:	4648      	mov	r0, r9
 800e9e6:	e7ce      	b.n	800e986 <_strtod_l+0x1ee>
 800e9e8:	2e08      	cmp	r6, #8
 800e9ea:	dc05      	bgt.n	800e9f8 <_strtod_l+0x260>
 800e9ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e9ee:	fb0e f606 	mul.w	r6, lr, r6
 800e9f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e9f4:	460e      	mov	r6, r1
 800e9f6:	e7dc      	b.n	800e9b2 <_strtod_l+0x21a>
 800e9f8:	2910      	cmp	r1, #16
 800e9fa:	bfd8      	it	le
 800e9fc:	fb0e f707 	mulle.w	r7, lr, r7
 800ea00:	e7f8      	b.n	800e9f4 <_strtod_l+0x25c>
 800ea02:	2b0f      	cmp	r3, #15
 800ea04:	bfdc      	itt	le
 800ea06:	230a      	movle	r3, #10
 800ea08:	fb03 2707 	mlale	r7, r3, r7, r2
 800ea0c:	e7e3      	b.n	800e9d6 <_strtod_l+0x23e>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea12:	2301      	movs	r3, #1
 800ea14:	e77a      	b.n	800e90c <_strtod_l+0x174>
 800ea16:	f04f 0c00 	mov.w	ip, #0
 800ea1a:	1ca2      	adds	r2, r4, #2
 800ea1c:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea1e:	78a2      	ldrb	r2, [r4, #2]
 800ea20:	e782      	b.n	800e928 <_strtod_l+0x190>
 800ea22:	f04f 0c01 	mov.w	ip, #1
 800ea26:	e7f8      	b.n	800ea1a <_strtod_l+0x282>
 800ea28:	080109c4 	.word	0x080109c4
 800ea2c:	080107f7 	.word	0x080107f7
 800ea30:	7ff00000 	.word	0x7ff00000
 800ea34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea36:	1c51      	adds	r1, r2, #1
 800ea38:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea3a:	7852      	ldrb	r2, [r2, #1]
 800ea3c:	2a30      	cmp	r2, #48	@ 0x30
 800ea3e:	d0f9      	beq.n	800ea34 <_strtod_l+0x29c>
 800ea40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ea44:	2908      	cmp	r1, #8
 800ea46:	f63f af75 	bhi.w	800e934 <_strtod_l+0x19c>
 800ea4a:	3a30      	subs	r2, #48	@ 0x30
 800ea4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea50:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ea52:	f04f 080a 	mov.w	r8, #10
 800ea56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ea58:	1c56      	adds	r6, r2, #1
 800ea5a:	9619      	str	r6, [sp, #100]	@ 0x64
 800ea5c:	7852      	ldrb	r2, [r2, #1]
 800ea5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ea62:	f1be 0f09 	cmp.w	lr, #9
 800ea66:	d939      	bls.n	800eadc <_strtod_l+0x344>
 800ea68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ea6a:	1a76      	subs	r6, r6, r1
 800ea6c:	2e08      	cmp	r6, #8
 800ea6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ea72:	dc03      	bgt.n	800ea7c <_strtod_l+0x2e4>
 800ea74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ea76:	4588      	cmp	r8, r1
 800ea78:	bfa8      	it	ge
 800ea7a:	4688      	movge	r8, r1
 800ea7c:	f1bc 0f00 	cmp.w	ip, #0
 800ea80:	d001      	beq.n	800ea86 <_strtod_l+0x2ee>
 800ea82:	f1c8 0800 	rsb	r8, r8, #0
 800ea86:	2d00      	cmp	r5, #0
 800ea88:	d14e      	bne.n	800eb28 <_strtod_l+0x390>
 800ea8a:	9908      	ldr	r1, [sp, #32]
 800ea8c:	4308      	orrs	r0, r1
 800ea8e:	f47f aebc 	bne.w	800e80a <_strtod_l+0x72>
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f47f aed4 	bne.w	800e840 <_strtod_l+0xa8>
 800ea98:	2a69      	cmp	r2, #105	@ 0x69
 800ea9a:	d028      	beq.n	800eaee <_strtod_l+0x356>
 800ea9c:	dc25      	bgt.n	800eaea <_strtod_l+0x352>
 800ea9e:	2a49      	cmp	r2, #73	@ 0x49
 800eaa0:	d025      	beq.n	800eaee <_strtod_l+0x356>
 800eaa2:	2a4e      	cmp	r2, #78	@ 0x4e
 800eaa4:	f47f aecc 	bne.w	800e840 <_strtod_l+0xa8>
 800eaa8:	499a      	ldr	r1, [pc, #616]	@ (800ed14 <_strtod_l+0x57c>)
 800eaaa:	a819      	add	r0, sp, #100	@ 0x64
 800eaac:	f001 fba4 	bl	80101f8 <__match>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f43f aec5 	beq.w	800e840 <_strtod_l+0xa8>
 800eab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eab8:	781b      	ldrb	r3, [r3, #0]
 800eaba:	2b28      	cmp	r3, #40	@ 0x28
 800eabc:	d12e      	bne.n	800eb1c <_strtod_l+0x384>
 800eabe:	4996      	ldr	r1, [pc, #600]	@ (800ed18 <_strtod_l+0x580>)
 800eac0:	aa1c      	add	r2, sp, #112	@ 0x70
 800eac2:	a819      	add	r0, sp, #100	@ 0x64
 800eac4:	f001 fbac 	bl	8010220 <__hexnan>
 800eac8:	2805      	cmp	r0, #5
 800eaca:	d127      	bne.n	800eb1c <_strtod_l+0x384>
 800eacc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800eace:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ead2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ead6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800eada:	e696      	b.n	800e80a <_strtod_l+0x72>
 800eadc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eade:	fb08 2101 	mla	r1, r8, r1, r2
 800eae2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800eae6:	9209      	str	r2, [sp, #36]	@ 0x24
 800eae8:	e7b5      	b.n	800ea56 <_strtod_l+0x2be>
 800eaea:	2a6e      	cmp	r2, #110	@ 0x6e
 800eaec:	e7da      	b.n	800eaa4 <_strtod_l+0x30c>
 800eaee:	498b      	ldr	r1, [pc, #556]	@ (800ed1c <_strtod_l+0x584>)
 800eaf0:	a819      	add	r0, sp, #100	@ 0x64
 800eaf2:	f001 fb81 	bl	80101f8 <__match>
 800eaf6:	2800      	cmp	r0, #0
 800eaf8:	f43f aea2 	beq.w	800e840 <_strtod_l+0xa8>
 800eafc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eafe:	4988      	ldr	r1, [pc, #544]	@ (800ed20 <_strtod_l+0x588>)
 800eb00:	3b01      	subs	r3, #1
 800eb02:	a819      	add	r0, sp, #100	@ 0x64
 800eb04:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb06:	f001 fb77 	bl	80101f8 <__match>
 800eb0a:	b910      	cbnz	r0, 800eb12 <_strtod_l+0x37a>
 800eb0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb0e:	3301      	adds	r3, #1
 800eb10:	9319      	str	r3, [sp, #100]	@ 0x64
 800eb12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ed30 <_strtod_l+0x598>
 800eb16:	f04f 0a00 	mov.w	sl, #0
 800eb1a:	e676      	b.n	800e80a <_strtod_l+0x72>
 800eb1c:	4881      	ldr	r0, [pc, #516]	@ (800ed24 <_strtod_l+0x58c>)
 800eb1e:	f001 f8a7 	bl	800fc70 <nan>
 800eb22:	ec5b ab10 	vmov	sl, fp, d0
 800eb26:	e670      	b.n	800e80a <_strtod_l+0x72>
 800eb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800eb2c:	eba8 0303 	sub.w	r3, r8, r3
 800eb30:	f1b9 0f00 	cmp.w	r9, #0
 800eb34:	bf08      	it	eq
 800eb36:	46a9      	moveq	r9, r5
 800eb38:	2d10      	cmp	r5, #16
 800eb3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb3c:	462c      	mov	r4, r5
 800eb3e:	bfa8      	it	ge
 800eb40:	2410      	movge	r4, #16
 800eb42:	f7f1 fcdf 	bl	8000504 <__aeabi_ui2d>
 800eb46:	2d09      	cmp	r5, #9
 800eb48:	4682      	mov	sl, r0
 800eb4a:	468b      	mov	fp, r1
 800eb4c:	dc13      	bgt.n	800eb76 <_strtod_l+0x3de>
 800eb4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f43f ae5a 	beq.w	800e80a <_strtod_l+0x72>
 800eb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb58:	dd78      	ble.n	800ec4c <_strtod_l+0x4b4>
 800eb5a:	2b16      	cmp	r3, #22
 800eb5c:	dc5f      	bgt.n	800ec1e <_strtod_l+0x486>
 800eb5e:	4972      	ldr	r1, [pc, #456]	@ (800ed28 <_strtod_l+0x590>)
 800eb60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb68:	4652      	mov	r2, sl
 800eb6a:	465b      	mov	r3, fp
 800eb6c:	f7f1 fd44 	bl	80005f8 <__aeabi_dmul>
 800eb70:	4682      	mov	sl, r0
 800eb72:	468b      	mov	fp, r1
 800eb74:	e649      	b.n	800e80a <_strtod_l+0x72>
 800eb76:	4b6c      	ldr	r3, [pc, #432]	@ (800ed28 <_strtod_l+0x590>)
 800eb78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eb80:	f7f1 fd3a 	bl	80005f8 <__aeabi_dmul>
 800eb84:	4682      	mov	sl, r0
 800eb86:	4638      	mov	r0, r7
 800eb88:	468b      	mov	fp, r1
 800eb8a:	f7f1 fcbb 	bl	8000504 <__aeabi_ui2d>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4650      	mov	r0, sl
 800eb94:	4659      	mov	r1, fp
 800eb96:	f7f1 fb79 	bl	800028c <__adddf3>
 800eb9a:	2d0f      	cmp	r5, #15
 800eb9c:	4682      	mov	sl, r0
 800eb9e:	468b      	mov	fp, r1
 800eba0:	ddd5      	ble.n	800eb4e <_strtod_l+0x3b6>
 800eba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eba4:	1b2c      	subs	r4, r5, r4
 800eba6:	441c      	add	r4, r3
 800eba8:	2c00      	cmp	r4, #0
 800ebaa:	f340 8093 	ble.w	800ecd4 <_strtod_l+0x53c>
 800ebae:	f014 030f 	ands.w	r3, r4, #15
 800ebb2:	d00a      	beq.n	800ebca <_strtod_l+0x432>
 800ebb4:	495c      	ldr	r1, [pc, #368]	@ (800ed28 <_strtod_l+0x590>)
 800ebb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ebba:	4652      	mov	r2, sl
 800ebbc:	465b      	mov	r3, fp
 800ebbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebc2:	f7f1 fd19 	bl	80005f8 <__aeabi_dmul>
 800ebc6:	4682      	mov	sl, r0
 800ebc8:	468b      	mov	fp, r1
 800ebca:	f034 040f 	bics.w	r4, r4, #15
 800ebce:	d073      	beq.n	800ecb8 <_strtod_l+0x520>
 800ebd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ebd4:	dd49      	ble.n	800ec6a <_strtod_l+0x4d2>
 800ebd6:	2400      	movs	r4, #0
 800ebd8:	46a0      	mov	r8, r4
 800ebda:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ebdc:	46a1      	mov	r9, r4
 800ebde:	9a05      	ldr	r2, [sp, #20]
 800ebe0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ed30 <_strtod_l+0x598>
 800ebe4:	2322      	movs	r3, #34	@ 0x22
 800ebe6:	6013      	str	r3, [r2, #0]
 800ebe8:	f04f 0a00 	mov.w	sl, #0
 800ebec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f43f ae0b 	beq.w	800e80a <_strtod_l+0x72>
 800ebf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ebf6:	9805      	ldr	r0, [sp, #20]
 800ebf8:	f7ff f946 	bl	800de88 <_Bfree>
 800ebfc:	9805      	ldr	r0, [sp, #20]
 800ebfe:	4649      	mov	r1, r9
 800ec00:	f7ff f942 	bl	800de88 <_Bfree>
 800ec04:	9805      	ldr	r0, [sp, #20]
 800ec06:	4641      	mov	r1, r8
 800ec08:	f7ff f93e 	bl	800de88 <_Bfree>
 800ec0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec0e:	9805      	ldr	r0, [sp, #20]
 800ec10:	f7ff f93a 	bl	800de88 <_Bfree>
 800ec14:	9805      	ldr	r0, [sp, #20]
 800ec16:	4621      	mov	r1, r4
 800ec18:	f7ff f936 	bl	800de88 <_Bfree>
 800ec1c:	e5f5      	b.n	800e80a <_strtod_l+0x72>
 800ec1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ec20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ec24:	4293      	cmp	r3, r2
 800ec26:	dbbc      	blt.n	800eba2 <_strtod_l+0x40a>
 800ec28:	4c3f      	ldr	r4, [pc, #252]	@ (800ed28 <_strtod_l+0x590>)
 800ec2a:	f1c5 050f 	rsb	r5, r5, #15
 800ec2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ec32:	4652      	mov	r2, sl
 800ec34:	465b      	mov	r3, fp
 800ec36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec3a:	f7f1 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ec3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec40:	1b5d      	subs	r5, r3, r5
 800ec42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ec46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec4a:	e78f      	b.n	800eb6c <_strtod_l+0x3d4>
 800ec4c:	3316      	adds	r3, #22
 800ec4e:	dba8      	blt.n	800eba2 <_strtod_l+0x40a>
 800ec50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec52:	eba3 0808 	sub.w	r8, r3, r8
 800ec56:	4b34      	ldr	r3, [pc, #208]	@ (800ed28 <_strtod_l+0x590>)
 800ec58:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ec5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ec60:	4650      	mov	r0, sl
 800ec62:	4659      	mov	r1, fp
 800ec64:	f7f1 fdf2 	bl	800084c <__aeabi_ddiv>
 800ec68:	e782      	b.n	800eb70 <_strtod_l+0x3d8>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	4f2f      	ldr	r7, [pc, #188]	@ (800ed2c <_strtod_l+0x594>)
 800ec6e:	1124      	asrs	r4, r4, #4
 800ec70:	4650      	mov	r0, sl
 800ec72:	4659      	mov	r1, fp
 800ec74:	461e      	mov	r6, r3
 800ec76:	2c01      	cmp	r4, #1
 800ec78:	dc21      	bgt.n	800ecbe <_strtod_l+0x526>
 800ec7a:	b10b      	cbz	r3, 800ec80 <_strtod_l+0x4e8>
 800ec7c:	4682      	mov	sl, r0
 800ec7e:	468b      	mov	fp, r1
 800ec80:	492a      	ldr	r1, [pc, #168]	@ (800ed2c <_strtod_l+0x594>)
 800ec82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ec86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ec8a:	4652      	mov	r2, sl
 800ec8c:	465b      	mov	r3, fp
 800ec8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec92:	f7f1 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ec96:	4b26      	ldr	r3, [pc, #152]	@ (800ed30 <_strtod_l+0x598>)
 800ec98:	460a      	mov	r2, r1
 800ec9a:	400b      	ands	r3, r1
 800ec9c:	4925      	ldr	r1, [pc, #148]	@ (800ed34 <_strtod_l+0x59c>)
 800ec9e:	428b      	cmp	r3, r1
 800eca0:	4682      	mov	sl, r0
 800eca2:	d898      	bhi.n	800ebd6 <_strtod_l+0x43e>
 800eca4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eca8:	428b      	cmp	r3, r1
 800ecaa:	bf86      	itte	hi
 800ecac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ed38 <_strtod_l+0x5a0>
 800ecb0:	f04f 3aff 	movhi.w	sl, #4294967295
 800ecb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ecb8:	2300      	movs	r3, #0
 800ecba:	9308      	str	r3, [sp, #32]
 800ecbc:	e076      	b.n	800edac <_strtod_l+0x614>
 800ecbe:	07e2      	lsls	r2, r4, #31
 800ecc0:	d504      	bpl.n	800eccc <_strtod_l+0x534>
 800ecc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecc6:	f7f1 fc97 	bl	80005f8 <__aeabi_dmul>
 800ecca:	2301      	movs	r3, #1
 800eccc:	3601      	adds	r6, #1
 800ecce:	1064      	asrs	r4, r4, #1
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	e7d0      	b.n	800ec76 <_strtod_l+0x4de>
 800ecd4:	d0f0      	beq.n	800ecb8 <_strtod_l+0x520>
 800ecd6:	4264      	negs	r4, r4
 800ecd8:	f014 020f 	ands.w	r2, r4, #15
 800ecdc:	d00a      	beq.n	800ecf4 <_strtod_l+0x55c>
 800ecde:	4b12      	ldr	r3, [pc, #72]	@ (800ed28 <_strtod_l+0x590>)
 800ece0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ece4:	4650      	mov	r0, sl
 800ece6:	4659      	mov	r1, fp
 800ece8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecec:	f7f1 fdae 	bl	800084c <__aeabi_ddiv>
 800ecf0:	4682      	mov	sl, r0
 800ecf2:	468b      	mov	fp, r1
 800ecf4:	1124      	asrs	r4, r4, #4
 800ecf6:	d0df      	beq.n	800ecb8 <_strtod_l+0x520>
 800ecf8:	2c1f      	cmp	r4, #31
 800ecfa:	dd1f      	ble.n	800ed3c <_strtod_l+0x5a4>
 800ecfc:	2400      	movs	r4, #0
 800ecfe:	46a0      	mov	r8, r4
 800ed00:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ed02:	46a1      	mov	r9, r4
 800ed04:	9a05      	ldr	r2, [sp, #20]
 800ed06:	2322      	movs	r3, #34	@ 0x22
 800ed08:	f04f 0a00 	mov.w	sl, #0
 800ed0c:	f04f 0b00 	mov.w	fp, #0
 800ed10:	6013      	str	r3, [r2, #0]
 800ed12:	e76b      	b.n	800ebec <_strtod_l+0x454>
 800ed14:	080106e5 	.word	0x080106e5
 800ed18:	080109b0 	.word	0x080109b0
 800ed1c:	080106dd 	.word	0x080106dd
 800ed20:	08010714 	.word	0x08010714
 800ed24:	0801084d 	.word	0x0801084d
 800ed28:	080108e8 	.word	0x080108e8
 800ed2c:	080108c0 	.word	0x080108c0
 800ed30:	7ff00000 	.word	0x7ff00000
 800ed34:	7ca00000 	.word	0x7ca00000
 800ed38:	7fefffff 	.word	0x7fefffff
 800ed3c:	f014 0310 	ands.w	r3, r4, #16
 800ed40:	bf18      	it	ne
 800ed42:	236a      	movne	r3, #106	@ 0x6a
 800ed44:	4ea9      	ldr	r6, [pc, #676]	@ (800efec <_strtod_l+0x854>)
 800ed46:	9308      	str	r3, [sp, #32]
 800ed48:	4650      	mov	r0, sl
 800ed4a:	4659      	mov	r1, fp
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	07e7      	lsls	r7, r4, #31
 800ed50:	d504      	bpl.n	800ed5c <_strtod_l+0x5c4>
 800ed52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ed56:	f7f1 fc4f 	bl	80005f8 <__aeabi_dmul>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	1064      	asrs	r4, r4, #1
 800ed5e:	f106 0608 	add.w	r6, r6, #8
 800ed62:	d1f4      	bne.n	800ed4e <_strtod_l+0x5b6>
 800ed64:	b10b      	cbz	r3, 800ed6a <_strtod_l+0x5d2>
 800ed66:	4682      	mov	sl, r0
 800ed68:	468b      	mov	fp, r1
 800ed6a:	9b08      	ldr	r3, [sp, #32]
 800ed6c:	b1b3      	cbz	r3, 800ed9c <_strtod_l+0x604>
 800ed6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ed72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	4659      	mov	r1, fp
 800ed7a:	dd0f      	ble.n	800ed9c <_strtod_l+0x604>
 800ed7c:	2b1f      	cmp	r3, #31
 800ed7e:	dd56      	ble.n	800ee2e <_strtod_l+0x696>
 800ed80:	2b34      	cmp	r3, #52	@ 0x34
 800ed82:	bfde      	ittt	le
 800ed84:	f04f 33ff 	movle.w	r3, #4294967295
 800ed88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ed8c:	4093      	lslle	r3, r2
 800ed8e:	f04f 0a00 	mov.w	sl, #0
 800ed92:	bfcc      	ite	gt
 800ed94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ed98:	ea03 0b01 	andle.w	fp, r3, r1
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	2300      	movs	r3, #0
 800eda0:	4650      	mov	r0, sl
 800eda2:	4659      	mov	r1, fp
 800eda4:	f7f1 fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d1a7      	bne.n	800ecfc <_strtod_l+0x564>
 800edac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edae:	9300      	str	r3, [sp, #0]
 800edb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800edb2:	9805      	ldr	r0, [sp, #20]
 800edb4:	462b      	mov	r3, r5
 800edb6:	464a      	mov	r2, r9
 800edb8:	f7ff f8ce 	bl	800df58 <__s2b>
 800edbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800edbe:	2800      	cmp	r0, #0
 800edc0:	f43f af09 	beq.w	800ebd6 <_strtod_l+0x43e>
 800edc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800edc8:	2a00      	cmp	r2, #0
 800edca:	eba3 0308 	sub.w	r3, r3, r8
 800edce:	bfa8      	it	ge
 800edd0:	2300      	movge	r3, #0
 800edd2:	9312      	str	r3, [sp, #72]	@ 0x48
 800edd4:	2400      	movs	r4, #0
 800edd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800edda:	9316      	str	r3, [sp, #88]	@ 0x58
 800eddc:	46a0      	mov	r8, r4
 800edde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede0:	9805      	ldr	r0, [sp, #20]
 800ede2:	6859      	ldr	r1, [r3, #4]
 800ede4:	f7ff f810 	bl	800de08 <_Balloc>
 800ede8:	4681      	mov	r9, r0
 800edea:	2800      	cmp	r0, #0
 800edec:	f43f aef7 	beq.w	800ebde <_strtod_l+0x446>
 800edf0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800edf2:	691a      	ldr	r2, [r3, #16]
 800edf4:	3202      	adds	r2, #2
 800edf6:	f103 010c 	add.w	r1, r3, #12
 800edfa:	0092      	lsls	r2, r2, #2
 800edfc:	300c      	adds	r0, #12
 800edfe:	f7fe f894 	bl	800cf2a <memcpy>
 800ee02:	ec4b ab10 	vmov	d0, sl, fp
 800ee06:	9805      	ldr	r0, [sp, #20]
 800ee08:	aa1c      	add	r2, sp, #112	@ 0x70
 800ee0a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ee0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ee10:	f7ff fbd6 	bl	800e5c0 <__d2b>
 800ee14:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee16:	2800      	cmp	r0, #0
 800ee18:	f43f aee1 	beq.w	800ebde <_strtod_l+0x446>
 800ee1c:	9805      	ldr	r0, [sp, #20]
 800ee1e:	2101      	movs	r1, #1
 800ee20:	f7ff f930 	bl	800e084 <__i2b>
 800ee24:	4680      	mov	r8, r0
 800ee26:	b948      	cbnz	r0, 800ee3c <_strtod_l+0x6a4>
 800ee28:	f04f 0800 	mov.w	r8, #0
 800ee2c:	e6d7      	b.n	800ebde <_strtod_l+0x446>
 800ee2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee32:	fa02 f303 	lsl.w	r3, r2, r3
 800ee36:	ea03 0a0a 	and.w	sl, r3, sl
 800ee3a:	e7af      	b.n	800ed9c <_strtod_l+0x604>
 800ee3c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ee3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ee40:	2d00      	cmp	r5, #0
 800ee42:	bfab      	itete	ge
 800ee44:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ee46:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ee48:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ee4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ee4c:	bfac      	ite	ge
 800ee4e:	18ef      	addge	r7, r5, r3
 800ee50:	1b5e      	sublt	r6, r3, r5
 800ee52:	9b08      	ldr	r3, [sp, #32]
 800ee54:	1aed      	subs	r5, r5, r3
 800ee56:	4415      	add	r5, r2
 800ee58:	4b65      	ldr	r3, [pc, #404]	@ (800eff0 <_strtod_l+0x858>)
 800ee5a:	3d01      	subs	r5, #1
 800ee5c:	429d      	cmp	r5, r3
 800ee5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ee62:	da50      	bge.n	800ef06 <_strtod_l+0x76e>
 800ee64:	1b5b      	subs	r3, r3, r5
 800ee66:	2b1f      	cmp	r3, #31
 800ee68:	eba2 0203 	sub.w	r2, r2, r3
 800ee6c:	f04f 0101 	mov.w	r1, #1
 800ee70:	dc3d      	bgt.n	800eeee <_strtod_l+0x756>
 800ee72:	fa01 f303 	lsl.w	r3, r1, r3
 800ee76:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee78:	2300      	movs	r3, #0
 800ee7a:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee7c:	18bd      	adds	r5, r7, r2
 800ee7e:	9b08      	ldr	r3, [sp, #32]
 800ee80:	42af      	cmp	r7, r5
 800ee82:	4416      	add	r6, r2
 800ee84:	441e      	add	r6, r3
 800ee86:	463b      	mov	r3, r7
 800ee88:	bfa8      	it	ge
 800ee8a:	462b      	movge	r3, r5
 800ee8c:	42b3      	cmp	r3, r6
 800ee8e:	bfa8      	it	ge
 800ee90:	4633      	movge	r3, r6
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bfc2      	ittt	gt
 800ee96:	1aed      	subgt	r5, r5, r3
 800ee98:	1af6      	subgt	r6, r6, r3
 800ee9a:	1aff      	subgt	r7, r7, r3
 800ee9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	dd16      	ble.n	800eed0 <_strtod_l+0x738>
 800eea2:	4641      	mov	r1, r8
 800eea4:	9805      	ldr	r0, [sp, #20]
 800eea6:	461a      	mov	r2, r3
 800eea8:	f7ff f9a4 	bl	800e1f4 <__pow5mult>
 800eeac:	4680      	mov	r8, r0
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d0ba      	beq.n	800ee28 <_strtod_l+0x690>
 800eeb2:	4601      	mov	r1, r0
 800eeb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eeb6:	9805      	ldr	r0, [sp, #20]
 800eeb8:	f7ff f8fa 	bl	800e0b0 <__multiply>
 800eebc:	900a      	str	r0, [sp, #40]	@ 0x28
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f43f ae8d 	beq.w	800ebde <_strtod_l+0x446>
 800eec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eec6:	9805      	ldr	r0, [sp, #20]
 800eec8:	f7fe ffde 	bl	800de88 <_Bfree>
 800eecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eece:	931a      	str	r3, [sp, #104]	@ 0x68
 800eed0:	2d00      	cmp	r5, #0
 800eed2:	dc1d      	bgt.n	800ef10 <_strtod_l+0x778>
 800eed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	dd23      	ble.n	800ef22 <_strtod_l+0x78a>
 800eeda:	4649      	mov	r1, r9
 800eedc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800eede:	9805      	ldr	r0, [sp, #20]
 800eee0:	f7ff f988 	bl	800e1f4 <__pow5mult>
 800eee4:	4681      	mov	r9, r0
 800eee6:	b9e0      	cbnz	r0, 800ef22 <_strtod_l+0x78a>
 800eee8:	f04f 0900 	mov.w	r9, #0
 800eeec:	e677      	b.n	800ebde <_strtod_l+0x446>
 800eeee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800eef2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800eef6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800eefa:	35e2      	adds	r5, #226	@ 0xe2
 800eefc:	fa01 f305 	lsl.w	r3, r1, r5
 800ef00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef02:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ef04:	e7ba      	b.n	800ee7c <_strtod_l+0x6e4>
 800ef06:	2300      	movs	r3, #0
 800ef08:	9310      	str	r3, [sp, #64]	@ 0x40
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef0e:	e7b5      	b.n	800ee7c <_strtod_l+0x6e4>
 800ef10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef12:	9805      	ldr	r0, [sp, #20]
 800ef14:	462a      	mov	r2, r5
 800ef16:	f7ff f9c7 	bl	800e2a8 <__lshift>
 800ef1a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d1d9      	bne.n	800eed4 <_strtod_l+0x73c>
 800ef20:	e65d      	b.n	800ebde <_strtod_l+0x446>
 800ef22:	2e00      	cmp	r6, #0
 800ef24:	dd07      	ble.n	800ef36 <_strtod_l+0x79e>
 800ef26:	4649      	mov	r1, r9
 800ef28:	9805      	ldr	r0, [sp, #20]
 800ef2a:	4632      	mov	r2, r6
 800ef2c:	f7ff f9bc 	bl	800e2a8 <__lshift>
 800ef30:	4681      	mov	r9, r0
 800ef32:	2800      	cmp	r0, #0
 800ef34:	d0d8      	beq.n	800eee8 <_strtod_l+0x750>
 800ef36:	2f00      	cmp	r7, #0
 800ef38:	dd08      	ble.n	800ef4c <_strtod_l+0x7b4>
 800ef3a:	4641      	mov	r1, r8
 800ef3c:	9805      	ldr	r0, [sp, #20]
 800ef3e:	463a      	mov	r2, r7
 800ef40:	f7ff f9b2 	bl	800e2a8 <__lshift>
 800ef44:	4680      	mov	r8, r0
 800ef46:	2800      	cmp	r0, #0
 800ef48:	f43f ae49 	beq.w	800ebde <_strtod_l+0x446>
 800ef4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef4e:	9805      	ldr	r0, [sp, #20]
 800ef50:	464a      	mov	r2, r9
 800ef52:	f7ff fa31 	bl	800e3b8 <__mdiff>
 800ef56:	4604      	mov	r4, r0
 800ef58:	2800      	cmp	r0, #0
 800ef5a:	f43f ae40 	beq.w	800ebde <_strtod_l+0x446>
 800ef5e:	68c3      	ldr	r3, [r0, #12]
 800ef60:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ef62:	2300      	movs	r3, #0
 800ef64:	60c3      	str	r3, [r0, #12]
 800ef66:	4641      	mov	r1, r8
 800ef68:	f7ff fa0a 	bl	800e380 <__mcmp>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	da45      	bge.n	800effc <_strtod_l+0x864>
 800ef70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef72:	ea53 030a 	orrs.w	r3, r3, sl
 800ef76:	d16b      	bne.n	800f050 <_strtod_l+0x8b8>
 800ef78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d167      	bne.n	800f050 <_strtod_l+0x8b8>
 800ef80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef84:	0d1b      	lsrs	r3, r3, #20
 800ef86:	051b      	lsls	r3, r3, #20
 800ef88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef8c:	d960      	bls.n	800f050 <_strtod_l+0x8b8>
 800ef8e:	6963      	ldr	r3, [r4, #20]
 800ef90:	b913      	cbnz	r3, 800ef98 <_strtod_l+0x800>
 800ef92:	6923      	ldr	r3, [r4, #16]
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	dd5b      	ble.n	800f050 <_strtod_l+0x8b8>
 800ef98:	4621      	mov	r1, r4
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	9805      	ldr	r0, [sp, #20]
 800ef9e:	f7ff f983 	bl	800e2a8 <__lshift>
 800efa2:	4641      	mov	r1, r8
 800efa4:	4604      	mov	r4, r0
 800efa6:	f7ff f9eb 	bl	800e380 <__mcmp>
 800efaa:	2800      	cmp	r0, #0
 800efac:	dd50      	ble.n	800f050 <_strtod_l+0x8b8>
 800efae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800efb2:	9a08      	ldr	r2, [sp, #32]
 800efb4:	0d1b      	lsrs	r3, r3, #20
 800efb6:	051b      	lsls	r3, r3, #20
 800efb8:	2a00      	cmp	r2, #0
 800efba:	d06a      	beq.n	800f092 <_strtod_l+0x8fa>
 800efbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800efc0:	d867      	bhi.n	800f092 <_strtod_l+0x8fa>
 800efc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800efc6:	f67f ae9d 	bls.w	800ed04 <_strtod_l+0x56c>
 800efca:	4b0a      	ldr	r3, [pc, #40]	@ (800eff4 <_strtod_l+0x85c>)
 800efcc:	4650      	mov	r0, sl
 800efce:	4659      	mov	r1, fp
 800efd0:	2200      	movs	r2, #0
 800efd2:	f7f1 fb11 	bl	80005f8 <__aeabi_dmul>
 800efd6:	4b08      	ldr	r3, [pc, #32]	@ (800eff8 <_strtod_l+0x860>)
 800efd8:	400b      	ands	r3, r1
 800efda:	4682      	mov	sl, r0
 800efdc:	468b      	mov	fp, r1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f47f ae08 	bne.w	800ebf4 <_strtod_l+0x45c>
 800efe4:	9a05      	ldr	r2, [sp, #20]
 800efe6:	2322      	movs	r3, #34	@ 0x22
 800efe8:	6013      	str	r3, [r2, #0]
 800efea:	e603      	b.n	800ebf4 <_strtod_l+0x45c>
 800efec:	080109d8 	.word	0x080109d8
 800eff0:	fffffc02 	.word	0xfffffc02
 800eff4:	39500000 	.word	0x39500000
 800eff8:	7ff00000 	.word	0x7ff00000
 800effc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f000:	d165      	bne.n	800f0ce <_strtod_l+0x936>
 800f002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f008:	b35a      	cbz	r2, 800f062 <_strtod_l+0x8ca>
 800f00a:	4a9f      	ldr	r2, [pc, #636]	@ (800f288 <_strtod_l+0xaf0>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d12b      	bne.n	800f068 <_strtod_l+0x8d0>
 800f010:	9b08      	ldr	r3, [sp, #32]
 800f012:	4651      	mov	r1, sl
 800f014:	b303      	cbz	r3, 800f058 <_strtod_l+0x8c0>
 800f016:	4b9d      	ldr	r3, [pc, #628]	@ (800f28c <_strtod_l+0xaf4>)
 800f018:	465a      	mov	r2, fp
 800f01a:	4013      	ands	r3, r2
 800f01c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f020:	f04f 32ff 	mov.w	r2, #4294967295
 800f024:	d81b      	bhi.n	800f05e <_strtod_l+0x8c6>
 800f026:	0d1b      	lsrs	r3, r3, #20
 800f028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f02c:	fa02 f303 	lsl.w	r3, r2, r3
 800f030:	4299      	cmp	r1, r3
 800f032:	d119      	bne.n	800f068 <_strtod_l+0x8d0>
 800f034:	4b96      	ldr	r3, [pc, #600]	@ (800f290 <_strtod_l+0xaf8>)
 800f036:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f038:	429a      	cmp	r2, r3
 800f03a:	d102      	bne.n	800f042 <_strtod_l+0x8aa>
 800f03c:	3101      	adds	r1, #1
 800f03e:	f43f adce 	beq.w	800ebde <_strtod_l+0x446>
 800f042:	4b92      	ldr	r3, [pc, #584]	@ (800f28c <_strtod_l+0xaf4>)
 800f044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f046:	401a      	ands	r2, r3
 800f048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f04c:	f04f 0a00 	mov.w	sl, #0
 800f050:	9b08      	ldr	r3, [sp, #32]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d1b9      	bne.n	800efca <_strtod_l+0x832>
 800f056:	e5cd      	b.n	800ebf4 <_strtod_l+0x45c>
 800f058:	f04f 33ff 	mov.w	r3, #4294967295
 800f05c:	e7e8      	b.n	800f030 <_strtod_l+0x898>
 800f05e:	4613      	mov	r3, r2
 800f060:	e7e6      	b.n	800f030 <_strtod_l+0x898>
 800f062:	ea53 030a 	orrs.w	r3, r3, sl
 800f066:	d0a2      	beq.n	800efae <_strtod_l+0x816>
 800f068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f06a:	b1db      	cbz	r3, 800f0a4 <_strtod_l+0x90c>
 800f06c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f06e:	4213      	tst	r3, r2
 800f070:	d0ee      	beq.n	800f050 <_strtod_l+0x8b8>
 800f072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f074:	9a08      	ldr	r2, [sp, #32]
 800f076:	4650      	mov	r0, sl
 800f078:	4659      	mov	r1, fp
 800f07a:	b1bb      	cbz	r3, 800f0ac <_strtod_l+0x914>
 800f07c:	f7ff fb6e 	bl	800e75c <sulp>
 800f080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f084:	ec53 2b10 	vmov	r2, r3, d0
 800f088:	f7f1 f900 	bl	800028c <__adddf3>
 800f08c:	4682      	mov	sl, r0
 800f08e:	468b      	mov	fp, r1
 800f090:	e7de      	b.n	800f050 <_strtod_l+0x8b8>
 800f092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f09a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f09e:	f04f 3aff 	mov.w	sl, #4294967295
 800f0a2:	e7d5      	b.n	800f050 <_strtod_l+0x8b8>
 800f0a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f0a6:	ea13 0f0a 	tst.w	r3, sl
 800f0aa:	e7e1      	b.n	800f070 <_strtod_l+0x8d8>
 800f0ac:	f7ff fb56 	bl	800e75c <sulp>
 800f0b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0b4:	ec53 2b10 	vmov	r2, r3, d0
 800f0b8:	f7f1 f8e6 	bl	8000288 <__aeabi_dsub>
 800f0bc:	2200      	movs	r2, #0
 800f0be:	2300      	movs	r3, #0
 800f0c0:	4682      	mov	sl, r0
 800f0c2:	468b      	mov	fp, r1
 800f0c4:	f7f1 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0c8:	2800      	cmp	r0, #0
 800f0ca:	d0c1      	beq.n	800f050 <_strtod_l+0x8b8>
 800f0cc:	e61a      	b.n	800ed04 <_strtod_l+0x56c>
 800f0ce:	4641      	mov	r1, r8
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f7ff facd 	bl	800e670 <__ratio>
 800f0d6:	ec57 6b10 	vmov	r6, r7, d0
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	4639      	mov	r1, r7
 800f0e4:	f7f1 fd04 	bl	8000af0 <__aeabi_dcmple>
 800f0e8:	2800      	cmp	r0, #0
 800f0ea:	d06f      	beq.n	800f1cc <_strtod_l+0xa34>
 800f0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d17a      	bne.n	800f1e8 <_strtod_l+0xa50>
 800f0f2:	f1ba 0f00 	cmp.w	sl, #0
 800f0f6:	d158      	bne.n	800f1aa <_strtod_l+0xa12>
 800f0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d15a      	bne.n	800f1b8 <_strtod_l+0xa20>
 800f102:	4b64      	ldr	r3, [pc, #400]	@ (800f294 <_strtod_l+0xafc>)
 800f104:	2200      	movs	r2, #0
 800f106:	4630      	mov	r0, r6
 800f108:	4639      	mov	r1, r7
 800f10a:	f7f1 fce7 	bl	8000adc <__aeabi_dcmplt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	d159      	bne.n	800f1c6 <_strtod_l+0xa2e>
 800f112:	4630      	mov	r0, r6
 800f114:	4639      	mov	r1, r7
 800f116:	4b60      	ldr	r3, [pc, #384]	@ (800f298 <_strtod_l+0xb00>)
 800f118:	2200      	movs	r2, #0
 800f11a:	f7f1 fa6d 	bl	80005f8 <__aeabi_dmul>
 800f11e:	4606      	mov	r6, r0
 800f120:	460f      	mov	r7, r1
 800f122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f126:	9606      	str	r6, [sp, #24]
 800f128:	9307      	str	r3, [sp, #28]
 800f12a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f12e:	4d57      	ldr	r5, [pc, #348]	@ (800f28c <_strtod_l+0xaf4>)
 800f130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f136:	401d      	ands	r5, r3
 800f138:	4b58      	ldr	r3, [pc, #352]	@ (800f29c <_strtod_l+0xb04>)
 800f13a:	429d      	cmp	r5, r3
 800f13c:	f040 80b2 	bne.w	800f2a4 <_strtod_l+0xb0c>
 800f140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f146:	ec4b ab10 	vmov	d0, sl, fp
 800f14a:	f7ff f9c9 	bl	800e4e0 <__ulp>
 800f14e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f152:	ec51 0b10 	vmov	r0, r1, d0
 800f156:	f7f1 fa4f 	bl	80005f8 <__aeabi_dmul>
 800f15a:	4652      	mov	r2, sl
 800f15c:	465b      	mov	r3, fp
 800f15e:	f7f1 f895 	bl	800028c <__adddf3>
 800f162:	460b      	mov	r3, r1
 800f164:	4949      	ldr	r1, [pc, #292]	@ (800f28c <_strtod_l+0xaf4>)
 800f166:	4a4e      	ldr	r2, [pc, #312]	@ (800f2a0 <_strtod_l+0xb08>)
 800f168:	4019      	ands	r1, r3
 800f16a:	4291      	cmp	r1, r2
 800f16c:	4682      	mov	sl, r0
 800f16e:	d942      	bls.n	800f1f6 <_strtod_l+0xa5e>
 800f170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f172:	4b47      	ldr	r3, [pc, #284]	@ (800f290 <_strtod_l+0xaf8>)
 800f174:	429a      	cmp	r2, r3
 800f176:	d103      	bne.n	800f180 <_strtod_l+0x9e8>
 800f178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f17a:	3301      	adds	r3, #1
 800f17c:	f43f ad2f 	beq.w	800ebde <_strtod_l+0x446>
 800f180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f290 <_strtod_l+0xaf8>
 800f184:	f04f 3aff 	mov.w	sl, #4294967295
 800f188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f18a:	9805      	ldr	r0, [sp, #20]
 800f18c:	f7fe fe7c 	bl	800de88 <_Bfree>
 800f190:	9805      	ldr	r0, [sp, #20]
 800f192:	4649      	mov	r1, r9
 800f194:	f7fe fe78 	bl	800de88 <_Bfree>
 800f198:	9805      	ldr	r0, [sp, #20]
 800f19a:	4641      	mov	r1, r8
 800f19c:	f7fe fe74 	bl	800de88 <_Bfree>
 800f1a0:	9805      	ldr	r0, [sp, #20]
 800f1a2:	4621      	mov	r1, r4
 800f1a4:	f7fe fe70 	bl	800de88 <_Bfree>
 800f1a8:	e619      	b.n	800edde <_strtod_l+0x646>
 800f1aa:	f1ba 0f01 	cmp.w	sl, #1
 800f1ae:	d103      	bne.n	800f1b8 <_strtod_l+0xa20>
 800f1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f43f ada6 	beq.w	800ed04 <_strtod_l+0x56c>
 800f1b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f268 <_strtod_l+0xad0>
 800f1bc:	4f35      	ldr	r7, [pc, #212]	@ (800f294 <_strtod_l+0xafc>)
 800f1be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1c2:	2600      	movs	r6, #0
 800f1c4:	e7b1      	b.n	800f12a <_strtod_l+0x992>
 800f1c6:	4f34      	ldr	r7, [pc, #208]	@ (800f298 <_strtod_l+0xb00>)
 800f1c8:	2600      	movs	r6, #0
 800f1ca:	e7aa      	b.n	800f122 <_strtod_l+0x98a>
 800f1cc:	4b32      	ldr	r3, [pc, #200]	@ (800f298 <_strtod_l+0xb00>)
 800f1ce:	4630      	mov	r0, r6
 800f1d0:	4639      	mov	r1, r7
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f7f1 fa10 	bl	80005f8 <__aeabi_dmul>
 800f1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1da:	4606      	mov	r6, r0
 800f1dc:	460f      	mov	r7, r1
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d09f      	beq.n	800f122 <_strtod_l+0x98a>
 800f1e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f1e6:	e7a0      	b.n	800f12a <_strtod_l+0x992>
 800f1e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f270 <_strtod_l+0xad8>
 800f1ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1f0:	ec57 6b17 	vmov	r6, r7, d7
 800f1f4:	e799      	b.n	800f12a <_strtod_l+0x992>
 800f1f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f1fa:	9b08      	ldr	r3, [sp, #32]
 800f1fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1c1      	bne.n	800f188 <_strtod_l+0x9f0>
 800f204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f208:	0d1b      	lsrs	r3, r3, #20
 800f20a:	051b      	lsls	r3, r3, #20
 800f20c:	429d      	cmp	r5, r3
 800f20e:	d1bb      	bne.n	800f188 <_strtod_l+0x9f0>
 800f210:	4630      	mov	r0, r6
 800f212:	4639      	mov	r1, r7
 800f214:	f7f1 fd50 	bl	8000cb8 <__aeabi_d2lz>
 800f218:	f7f1 f9c0 	bl	800059c <__aeabi_l2d>
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	4630      	mov	r0, r6
 800f222:	4639      	mov	r1, r7
 800f224:	f7f1 f830 	bl	8000288 <__aeabi_dsub>
 800f228:	460b      	mov	r3, r1
 800f22a:	4602      	mov	r2, r0
 800f22c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f236:	ea46 060a 	orr.w	r6, r6, sl
 800f23a:	431e      	orrs	r6, r3
 800f23c:	d06f      	beq.n	800f31e <_strtod_l+0xb86>
 800f23e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f278 <_strtod_l+0xae0>)
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f7f1 fc4a 	bl	8000adc <__aeabi_dcmplt>
 800f248:	2800      	cmp	r0, #0
 800f24a:	f47f acd3 	bne.w	800ebf4 <_strtod_l+0x45c>
 800f24e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f280 <_strtod_l+0xae8>)
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f258:	f7f1 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d093      	beq.n	800f188 <_strtod_l+0x9f0>
 800f260:	e4c8      	b.n	800ebf4 <_strtod_l+0x45c>
 800f262:	bf00      	nop
 800f264:	f3af 8000 	nop.w
 800f268:	00000000 	.word	0x00000000
 800f26c:	bff00000 	.word	0xbff00000
 800f270:	00000000 	.word	0x00000000
 800f274:	3ff00000 	.word	0x3ff00000
 800f278:	94a03595 	.word	0x94a03595
 800f27c:	3fdfffff 	.word	0x3fdfffff
 800f280:	35afe535 	.word	0x35afe535
 800f284:	3fe00000 	.word	0x3fe00000
 800f288:	000fffff 	.word	0x000fffff
 800f28c:	7ff00000 	.word	0x7ff00000
 800f290:	7fefffff 	.word	0x7fefffff
 800f294:	3ff00000 	.word	0x3ff00000
 800f298:	3fe00000 	.word	0x3fe00000
 800f29c:	7fe00000 	.word	0x7fe00000
 800f2a0:	7c9fffff 	.word	0x7c9fffff
 800f2a4:	9b08      	ldr	r3, [sp, #32]
 800f2a6:	b323      	cbz	r3, 800f2f2 <_strtod_l+0xb5a>
 800f2a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f2ac:	d821      	bhi.n	800f2f2 <_strtod_l+0xb5a>
 800f2ae:	a328      	add	r3, pc, #160	@ (adr r3, 800f350 <_strtod_l+0xbb8>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	4639      	mov	r1, r7
 800f2b8:	f7f1 fc1a 	bl	8000af0 <__aeabi_dcmple>
 800f2bc:	b1a0      	cbz	r0, 800f2e8 <_strtod_l+0xb50>
 800f2be:	4639      	mov	r1, r7
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7f1 fc71 	bl	8000ba8 <__aeabi_d2uiz>
 800f2c6:	2801      	cmp	r0, #1
 800f2c8:	bf38      	it	cc
 800f2ca:	2001      	movcc	r0, #1
 800f2cc:	f7f1 f91a 	bl	8000504 <__aeabi_ui2d>
 800f2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2d2:	4606      	mov	r6, r0
 800f2d4:	460f      	mov	r7, r1
 800f2d6:	b9fb      	cbnz	r3, 800f318 <_strtod_l+0xb80>
 800f2d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f2dc:	9014      	str	r0, [sp, #80]	@ 0x50
 800f2de:	9315      	str	r3, [sp, #84]	@ 0x54
 800f2e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f2e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f2e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f2ee:	1b5b      	subs	r3, r3, r5
 800f2f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f2f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f2f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f2fa:	f7ff f8f1 	bl	800e4e0 <__ulp>
 800f2fe:	4650      	mov	r0, sl
 800f300:	ec53 2b10 	vmov	r2, r3, d0
 800f304:	4659      	mov	r1, fp
 800f306:	f7f1 f977 	bl	80005f8 <__aeabi_dmul>
 800f30a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f30e:	f7f0 ffbd 	bl	800028c <__adddf3>
 800f312:	4682      	mov	sl, r0
 800f314:	468b      	mov	fp, r1
 800f316:	e770      	b.n	800f1fa <_strtod_l+0xa62>
 800f318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f31c:	e7e0      	b.n	800f2e0 <_strtod_l+0xb48>
 800f31e:	a30e      	add	r3, pc, #56	@ (adr r3, 800f358 <_strtod_l+0xbc0>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	f7f1 fbda 	bl	8000adc <__aeabi_dcmplt>
 800f328:	e798      	b.n	800f25c <_strtod_l+0xac4>
 800f32a:	2300      	movs	r3, #0
 800f32c:	930e      	str	r3, [sp, #56]	@ 0x38
 800f32e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f332:	6013      	str	r3, [r2, #0]
 800f334:	f7ff ba6d 	b.w	800e812 <_strtod_l+0x7a>
 800f338:	2a65      	cmp	r2, #101	@ 0x65
 800f33a:	f43f ab68 	beq.w	800ea0e <_strtod_l+0x276>
 800f33e:	2a45      	cmp	r2, #69	@ 0x45
 800f340:	f43f ab65 	beq.w	800ea0e <_strtod_l+0x276>
 800f344:	2301      	movs	r3, #1
 800f346:	f7ff bba0 	b.w	800ea8a <_strtod_l+0x2f2>
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w
 800f350:	ffc00000 	.word	0xffc00000
 800f354:	41dfffff 	.word	0x41dfffff
 800f358:	94a03595 	.word	0x94a03595
 800f35c:	3fcfffff 	.word	0x3fcfffff

0800f360 <_strtod_r>:
 800f360:	4b01      	ldr	r3, [pc, #4]	@ (800f368 <_strtod_r+0x8>)
 800f362:	f7ff ba19 	b.w	800e798 <_strtod_l>
 800f366:	bf00      	nop
 800f368:	20000164 	.word	0x20000164

0800f36c <_strtol_l.isra.0>:
 800f36c:	2b24      	cmp	r3, #36	@ 0x24
 800f36e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f372:	4686      	mov	lr, r0
 800f374:	4690      	mov	r8, r2
 800f376:	d801      	bhi.n	800f37c <_strtol_l.isra.0+0x10>
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d106      	bne.n	800f38a <_strtol_l.isra.0+0x1e>
 800f37c:	f7fd fda8 	bl	800ced0 <__errno>
 800f380:	2316      	movs	r3, #22
 800f382:	6003      	str	r3, [r0, #0]
 800f384:	2000      	movs	r0, #0
 800f386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38a:	4834      	ldr	r0, [pc, #208]	@ (800f45c <_strtol_l.isra.0+0xf0>)
 800f38c:	460d      	mov	r5, r1
 800f38e:	462a      	mov	r2, r5
 800f390:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f394:	5d06      	ldrb	r6, [r0, r4]
 800f396:	f016 0608 	ands.w	r6, r6, #8
 800f39a:	d1f8      	bne.n	800f38e <_strtol_l.isra.0+0x22>
 800f39c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f39e:	d110      	bne.n	800f3c2 <_strtol_l.isra.0+0x56>
 800f3a0:	782c      	ldrb	r4, [r5, #0]
 800f3a2:	2601      	movs	r6, #1
 800f3a4:	1c95      	adds	r5, r2, #2
 800f3a6:	f033 0210 	bics.w	r2, r3, #16
 800f3aa:	d115      	bne.n	800f3d8 <_strtol_l.isra.0+0x6c>
 800f3ac:	2c30      	cmp	r4, #48	@ 0x30
 800f3ae:	d10d      	bne.n	800f3cc <_strtol_l.isra.0+0x60>
 800f3b0:	782a      	ldrb	r2, [r5, #0]
 800f3b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f3b6:	2a58      	cmp	r2, #88	@ 0x58
 800f3b8:	d108      	bne.n	800f3cc <_strtol_l.isra.0+0x60>
 800f3ba:	786c      	ldrb	r4, [r5, #1]
 800f3bc:	3502      	adds	r5, #2
 800f3be:	2310      	movs	r3, #16
 800f3c0:	e00a      	b.n	800f3d8 <_strtol_l.isra.0+0x6c>
 800f3c2:	2c2b      	cmp	r4, #43	@ 0x2b
 800f3c4:	bf04      	itt	eq
 800f3c6:	782c      	ldrbeq	r4, [r5, #0]
 800f3c8:	1c95      	addeq	r5, r2, #2
 800f3ca:	e7ec      	b.n	800f3a6 <_strtol_l.isra.0+0x3a>
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1f6      	bne.n	800f3be <_strtol_l.isra.0+0x52>
 800f3d0:	2c30      	cmp	r4, #48	@ 0x30
 800f3d2:	bf14      	ite	ne
 800f3d4:	230a      	movne	r3, #10
 800f3d6:	2308      	moveq	r3, #8
 800f3d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f3dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	fbbc f9f3 	udiv	r9, ip, r3
 800f3e6:	4610      	mov	r0, r2
 800f3e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800f3ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f3f0:	2f09      	cmp	r7, #9
 800f3f2:	d80f      	bhi.n	800f414 <_strtol_l.isra.0+0xa8>
 800f3f4:	463c      	mov	r4, r7
 800f3f6:	42a3      	cmp	r3, r4
 800f3f8:	dd1b      	ble.n	800f432 <_strtol_l.isra.0+0xc6>
 800f3fa:	1c57      	adds	r7, r2, #1
 800f3fc:	d007      	beq.n	800f40e <_strtol_l.isra.0+0xa2>
 800f3fe:	4581      	cmp	r9, r0
 800f400:	d314      	bcc.n	800f42c <_strtol_l.isra.0+0xc0>
 800f402:	d101      	bne.n	800f408 <_strtol_l.isra.0+0x9c>
 800f404:	45a2      	cmp	sl, r4
 800f406:	db11      	blt.n	800f42c <_strtol_l.isra.0+0xc0>
 800f408:	fb00 4003 	mla	r0, r0, r3, r4
 800f40c:	2201      	movs	r2, #1
 800f40e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f412:	e7eb      	b.n	800f3ec <_strtol_l.isra.0+0x80>
 800f414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f418:	2f19      	cmp	r7, #25
 800f41a:	d801      	bhi.n	800f420 <_strtol_l.isra.0+0xb4>
 800f41c:	3c37      	subs	r4, #55	@ 0x37
 800f41e:	e7ea      	b.n	800f3f6 <_strtol_l.isra.0+0x8a>
 800f420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f424:	2f19      	cmp	r7, #25
 800f426:	d804      	bhi.n	800f432 <_strtol_l.isra.0+0xc6>
 800f428:	3c57      	subs	r4, #87	@ 0x57
 800f42a:	e7e4      	b.n	800f3f6 <_strtol_l.isra.0+0x8a>
 800f42c:	f04f 32ff 	mov.w	r2, #4294967295
 800f430:	e7ed      	b.n	800f40e <_strtol_l.isra.0+0xa2>
 800f432:	1c53      	adds	r3, r2, #1
 800f434:	d108      	bne.n	800f448 <_strtol_l.isra.0+0xdc>
 800f436:	2322      	movs	r3, #34	@ 0x22
 800f438:	f8ce 3000 	str.w	r3, [lr]
 800f43c:	4660      	mov	r0, ip
 800f43e:	f1b8 0f00 	cmp.w	r8, #0
 800f442:	d0a0      	beq.n	800f386 <_strtol_l.isra.0+0x1a>
 800f444:	1e69      	subs	r1, r5, #1
 800f446:	e006      	b.n	800f456 <_strtol_l.isra.0+0xea>
 800f448:	b106      	cbz	r6, 800f44c <_strtol_l.isra.0+0xe0>
 800f44a:	4240      	negs	r0, r0
 800f44c:	f1b8 0f00 	cmp.w	r8, #0
 800f450:	d099      	beq.n	800f386 <_strtol_l.isra.0+0x1a>
 800f452:	2a00      	cmp	r2, #0
 800f454:	d1f6      	bne.n	800f444 <_strtol_l.isra.0+0xd8>
 800f456:	f8c8 1000 	str.w	r1, [r8]
 800f45a:	e794      	b.n	800f386 <_strtol_l.isra.0+0x1a>
 800f45c:	08010a01 	.word	0x08010a01

0800f460 <_strtol_r>:
 800f460:	f7ff bf84 	b.w	800f36c <_strtol_l.isra.0>

0800f464 <__ssputs_r>:
 800f464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f468:	688e      	ldr	r6, [r1, #8]
 800f46a:	461f      	mov	r7, r3
 800f46c:	42be      	cmp	r6, r7
 800f46e:	680b      	ldr	r3, [r1, #0]
 800f470:	4682      	mov	sl, r0
 800f472:	460c      	mov	r4, r1
 800f474:	4690      	mov	r8, r2
 800f476:	d82d      	bhi.n	800f4d4 <__ssputs_r+0x70>
 800f478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f47c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f480:	d026      	beq.n	800f4d0 <__ssputs_r+0x6c>
 800f482:	6965      	ldr	r5, [r4, #20]
 800f484:	6909      	ldr	r1, [r1, #16]
 800f486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f48a:	eba3 0901 	sub.w	r9, r3, r1
 800f48e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f492:	1c7b      	adds	r3, r7, #1
 800f494:	444b      	add	r3, r9
 800f496:	106d      	asrs	r5, r5, #1
 800f498:	429d      	cmp	r5, r3
 800f49a:	bf38      	it	cc
 800f49c:	461d      	movcc	r5, r3
 800f49e:	0553      	lsls	r3, r2, #21
 800f4a0:	d527      	bpl.n	800f4f2 <__ssputs_r+0x8e>
 800f4a2:	4629      	mov	r1, r5
 800f4a4:	f7fe fc24 	bl	800dcf0 <_malloc_r>
 800f4a8:	4606      	mov	r6, r0
 800f4aa:	b360      	cbz	r0, 800f506 <__ssputs_r+0xa2>
 800f4ac:	6921      	ldr	r1, [r4, #16]
 800f4ae:	464a      	mov	r2, r9
 800f4b0:	f7fd fd3b 	bl	800cf2a <memcpy>
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4be:	81a3      	strh	r3, [r4, #12]
 800f4c0:	6126      	str	r6, [r4, #16]
 800f4c2:	6165      	str	r5, [r4, #20]
 800f4c4:	444e      	add	r6, r9
 800f4c6:	eba5 0509 	sub.w	r5, r5, r9
 800f4ca:	6026      	str	r6, [r4, #0]
 800f4cc:	60a5      	str	r5, [r4, #8]
 800f4ce:	463e      	mov	r6, r7
 800f4d0:	42be      	cmp	r6, r7
 800f4d2:	d900      	bls.n	800f4d6 <__ssputs_r+0x72>
 800f4d4:	463e      	mov	r6, r7
 800f4d6:	6820      	ldr	r0, [r4, #0]
 800f4d8:	4632      	mov	r2, r6
 800f4da:	4641      	mov	r1, r8
 800f4dc:	f000 fb6a 	bl	800fbb4 <memmove>
 800f4e0:	68a3      	ldr	r3, [r4, #8]
 800f4e2:	1b9b      	subs	r3, r3, r6
 800f4e4:	60a3      	str	r3, [r4, #8]
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	4433      	add	r3, r6
 800f4ea:	6023      	str	r3, [r4, #0]
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f2:	462a      	mov	r2, r5
 800f4f4:	f000 ff41 	bl	801037a <_realloc_r>
 800f4f8:	4606      	mov	r6, r0
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d1e0      	bne.n	800f4c0 <__ssputs_r+0x5c>
 800f4fe:	6921      	ldr	r1, [r4, #16]
 800f500:	4650      	mov	r0, sl
 800f502:	f7fe fb81 	bl	800dc08 <_free_r>
 800f506:	230c      	movs	r3, #12
 800f508:	f8ca 3000 	str.w	r3, [sl]
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f512:	81a3      	strh	r3, [r4, #12]
 800f514:	f04f 30ff 	mov.w	r0, #4294967295
 800f518:	e7e9      	b.n	800f4ee <__ssputs_r+0x8a>
	...

0800f51c <_svfiprintf_r>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	4698      	mov	r8, r3
 800f522:	898b      	ldrh	r3, [r1, #12]
 800f524:	061b      	lsls	r3, r3, #24
 800f526:	b09d      	sub	sp, #116	@ 0x74
 800f528:	4607      	mov	r7, r0
 800f52a:	460d      	mov	r5, r1
 800f52c:	4614      	mov	r4, r2
 800f52e:	d510      	bpl.n	800f552 <_svfiprintf_r+0x36>
 800f530:	690b      	ldr	r3, [r1, #16]
 800f532:	b973      	cbnz	r3, 800f552 <_svfiprintf_r+0x36>
 800f534:	2140      	movs	r1, #64	@ 0x40
 800f536:	f7fe fbdb 	bl	800dcf0 <_malloc_r>
 800f53a:	6028      	str	r0, [r5, #0]
 800f53c:	6128      	str	r0, [r5, #16]
 800f53e:	b930      	cbnz	r0, 800f54e <_svfiprintf_r+0x32>
 800f540:	230c      	movs	r3, #12
 800f542:	603b      	str	r3, [r7, #0]
 800f544:	f04f 30ff 	mov.w	r0, #4294967295
 800f548:	b01d      	add	sp, #116	@ 0x74
 800f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54e:	2340      	movs	r3, #64	@ 0x40
 800f550:	616b      	str	r3, [r5, #20]
 800f552:	2300      	movs	r3, #0
 800f554:	9309      	str	r3, [sp, #36]	@ 0x24
 800f556:	2320      	movs	r3, #32
 800f558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f55c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f560:	2330      	movs	r3, #48	@ 0x30
 800f562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f700 <_svfiprintf_r+0x1e4>
 800f566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f56a:	f04f 0901 	mov.w	r9, #1
 800f56e:	4623      	mov	r3, r4
 800f570:	469a      	mov	sl, r3
 800f572:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f576:	b10a      	cbz	r2, 800f57c <_svfiprintf_r+0x60>
 800f578:	2a25      	cmp	r2, #37	@ 0x25
 800f57a:	d1f9      	bne.n	800f570 <_svfiprintf_r+0x54>
 800f57c:	ebba 0b04 	subs.w	fp, sl, r4
 800f580:	d00b      	beq.n	800f59a <_svfiprintf_r+0x7e>
 800f582:	465b      	mov	r3, fp
 800f584:	4622      	mov	r2, r4
 800f586:	4629      	mov	r1, r5
 800f588:	4638      	mov	r0, r7
 800f58a:	f7ff ff6b 	bl	800f464 <__ssputs_r>
 800f58e:	3001      	adds	r0, #1
 800f590:	f000 80a7 	beq.w	800f6e2 <_svfiprintf_r+0x1c6>
 800f594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f596:	445a      	add	r2, fp
 800f598:	9209      	str	r2, [sp, #36]	@ 0x24
 800f59a:	f89a 3000 	ldrb.w	r3, [sl]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	f000 809f 	beq.w	800f6e2 <_svfiprintf_r+0x1c6>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5ae:	f10a 0a01 	add.w	sl, sl, #1
 800f5b2:	9304      	str	r3, [sp, #16]
 800f5b4:	9307      	str	r3, [sp, #28]
 800f5b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5bc:	4654      	mov	r4, sl
 800f5be:	2205      	movs	r2, #5
 800f5c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c4:	484e      	ldr	r0, [pc, #312]	@ (800f700 <_svfiprintf_r+0x1e4>)
 800f5c6:	f7f0 fe03 	bl	80001d0 <memchr>
 800f5ca:	9a04      	ldr	r2, [sp, #16]
 800f5cc:	b9d8      	cbnz	r0, 800f606 <_svfiprintf_r+0xea>
 800f5ce:	06d0      	lsls	r0, r2, #27
 800f5d0:	bf44      	itt	mi
 800f5d2:	2320      	movmi	r3, #32
 800f5d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d8:	0711      	lsls	r1, r2, #28
 800f5da:	bf44      	itt	mi
 800f5dc:	232b      	movmi	r3, #43	@ 0x2b
 800f5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f5e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5e8:	d015      	beq.n	800f616 <_svfiprintf_r+0xfa>
 800f5ea:	9a07      	ldr	r2, [sp, #28]
 800f5ec:	4654      	mov	r4, sl
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f04f 0c0a 	mov.w	ip, #10
 800f5f4:	4621      	mov	r1, r4
 800f5f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5fa:	3b30      	subs	r3, #48	@ 0x30
 800f5fc:	2b09      	cmp	r3, #9
 800f5fe:	d94b      	bls.n	800f698 <_svfiprintf_r+0x17c>
 800f600:	b1b0      	cbz	r0, 800f630 <_svfiprintf_r+0x114>
 800f602:	9207      	str	r2, [sp, #28]
 800f604:	e014      	b.n	800f630 <_svfiprintf_r+0x114>
 800f606:	eba0 0308 	sub.w	r3, r0, r8
 800f60a:	fa09 f303 	lsl.w	r3, r9, r3
 800f60e:	4313      	orrs	r3, r2
 800f610:	9304      	str	r3, [sp, #16]
 800f612:	46a2      	mov	sl, r4
 800f614:	e7d2      	b.n	800f5bc <_svfiprintf_r+0xa0>
 800f616:	9b03      	ldr	r3, [sp, #12]
 800f618:	1d19      	adds	r1, r3, #4
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	9103      	str	r1, [sp, #12]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	bfbb      	ittet	lt
 800f622:	425b      	neglt	r3, r3
 800f624:	f042 0202 	orrlt.w	r2, r2, #2
 800f628:	9307      	strge	r3, [sp, #28]
 800f62a:	9307      	strlt	r3, [sp, #28]
 800f62c:	bfb8      	it	lt
 800f62e:	9204      	strlt	r2, [sp, #16]
 800f630:	7823      	ldrb	r3, [r4, #0]
 800f632:	2b2e      	cmp	r3, #46	@ 0x2e
 800f634:	d10a      	bne.n	800f64c <_svfiprintf_r+0x130>
 800f636:	7863      	ldrb	r3, [r4, #1]
 800f638:	2b2a      	cmp	r3, #42	@ 0x2a
 800f63a:	d132      	bne.n	800f6a2 <_svfiprintf_r+0x186>
 800f63c:	9b03      	ldr	r3, [sp, #12]
 800f63e:	1d1a      	adds	r2, r3, #4
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	9203      	str	r2, [sp, #12]
 800f644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f648:	3402      	adds	r4, #2
 800f64a:	9305      	str	r3, [sp, #20]
 800f64c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f710 <_svfiprintf_r+0x1f4>
 800f650:	7821      	ldrb	r1, [r4, #0]
 800f652:	2203      	movs	r2, #3
 800f654:	4650      	mov	r0, sl
 800f656:	f7f0 fdbb 	bl	80001d0 <memchr>
 800f65a:	b138      	cbz	r0, 800f66c <_svfiprintf_r+0x150>
 800f65c:	9b04      	ldr	r3, [sp, #16]
 800f65e:	eba0 000a 	sub.w	r0, r0, sl
 800f662:	2240      	movs	r2, #64	@ 0x40
 800f664:	4082      	lsls	r2, r0
 800f666:	4313      	orrs	r3, r2
 800f668:	3401      	adds	r4, #1
 800f66a:	9304      	str	r3, [sp, #16]
 800f66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f670:	4824      	ldr	r0, [pc, #144]	@ (800f704 <_svfiprintf_r+0x1e8>)
 800f672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f676:	2206      	movs	r2, #6
 800f678:	f7f0 fdaa 	bl	80001d0 <memchr>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d036      	beq.n	800f6ee <_svfiprintf_r+0x1d2>
 800f680:	4b21      	ldr	r3, [pc, #132]	@ (800f708 <_svfiprintf_r+0x1ec>)
 800f682:	bb1b      	cbnz	r3, 800f6cc <_svfiprintf_r+0x1b0>
 800f684:	9b03      	ldr	r3, [sp, #12]
 800f686:	3307      	adds	r3, #7
 800f688:	f023 0307 	bic.w	r3, r3, #7
 800f68c:	3308      	adds	r3, #8
 800f68e:	9303      	str	r3, [sp, #12]
 800f690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f692:	4433      	add	r3, r6
 800f694:	9309      	str	r3, [sp, #36]	@ 0x24
 800f696:	e76a      	b.n	800f56e <_svfiprintf_r+0x52>
 800f698:	fb0c 3202 	mla	r2, ip, r2, r3
 800f69c:	460c      	mov	r4, r1
 800f69e:	2001      	movs	r0, #1
 800f6a0:	e7a8      	b.n	800f5f4 <_svfiprintf_r+0xd8>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	3401      	adds	r4, #1
 800f6a6:	9305      	str	r3, [sp, #20]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	f04f 0c0a 	mov.w	ip, #10
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6b4:	3a30      	subs	r2, #48	@ 0x30
 800f6b6:	2a09      	cmp	r2, #9
 800f6b8:	d903      	bls.n	800f6c2 <_svfiprintf_r+0x1a6>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0c6      	beq.n	800f64c <_svfiprintf_r+0x130>
 800f6be:	9105      	str	r1, [sp, #20]
 800f6c0:	e7c4      	b.n	800f64c <_svfiprintf_r+0x130>
 800f6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e7f0      	b.n	800f6ae <_svfiprintf_r+0x192>
 800f6cc:	ab03      	add	r3, sp, #12
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	462a      	mov	r2, r5
 800f6d2:	4b0e      	ldr	r3, [pc, #56]	@ (800f70c <_svfiprintf_r+0x1f0>)
 800f6d4:	a904      	add	r1, sp, #16
 800f6d6:	4638      	mov	r0, r7
 800f6d8:	f7fc fbb8 	bl	800be4c <_printf_float>
 800f6dc:	1c42      	adds	r2, r0, #1
 800f6de:	4606      	mov	r6, r0
 800f6e0:	d1d6      	bne.n	800f690 <_svfiprintf_r+0x174>
 800f6e2:	89ab      	ldrh	r3, [r5, #12]
 800f6e4:	065b      	lsls	r3, r3, #25
 800f6e6:	f53f af2d 	bmi.w	800f544 <_svfiprintf_r+0x28>
 800f6ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6ec:	e72c      	b.n	800f548 <_svfiprintf_r+0x2c>
 800f6ee:	ab03      	add	r3, sp, #12
 800f6f0:	9300      	str	r3, [sp, #0]
 800f6f2:	462a      	mov	r2, r5
 800f6f4:	4b05      	ldr	r3, [pc, #20]	@ (800f70c <_svfiprintf_r+0x1f0>)
 800f6f6:	a904      	add	r1, sp, #16
 800f6f8:	4638      	mov	r0, r7
 800f6fa:	f7fc fe3f 	bl	800c37c <_printf_i>
 800f6fe:	e7ed      	b.n	800f6dc <_svfiprintf_r+0x1c0>
 800f700:	080107f9 	.word	0x080107f9
 800f704:	08010803 	.word	0x08010803
 800f708:	0800be4d 	.word	0x0800be4d
 800f70c:	0800f465 	.word	0x0800f465
 800f710:	080107ff 	.word	0x080107ff

0800f714 <__sfputc_r>:
 800f714:	6893      	ldr	r3, [r2, #8]
 800f716:	3b01      	subs	r3, #1
 800f718:	2b00      	cmp	r3, #0
 800f71a:	b410      	push	{r4}
 800f71c:	6093      	str	r3, [r2, #8]
 800f71e:	da08      	bge.n	800f732 <__sfputc_r+0x1e>
 800f720:	6994      	ldr	r4, [r2, #24]
 800f722:	42a3      	cmp	r3, r4
 800f724:	db01      	blt.n	800f72a <__sfputc_r+0x16>
 800f726:	290a      	cmp	r1, #10
 800f728:	d103      	bne.n	800f732 <__sfputc_r+0x1e>
 800f72a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f72e:	f7fd bae8 	b.w	800cd02 <__swbuf_r>
 800f732:	6813      	ldr	r3, [r2, #0]
 800f734:	1c58      	adds	r0, r3, #1
 800f736:	6010      	str	r0, [r2, #0]
 800f738:	7019      	strb	r1, [r3, #0]
 800f73a:	4608      	mov	r0, r1
 800f73c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <__sfputs_r>:
 800f742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f744:	4606      	mov	r6, r0
 800f746:	460f      	mov	r7, r1
 800f748:	4614      	mov	r4, r2
 800f74a:	18d5      	adds	r5, r2, r3
 800f74c:	42ac      	cmp	r4, r5
 800f74e:	d101      	bne.n	800f754 <__sfputs_r+0x12>
 800f750:	2000      	movs	r0, #0
 800f752:	e007      	b.n	800f764 <__sfputs_r+0x22>
 800f754:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f758:	463a      	mov	r2, r7
 800f75a:	4630      	mov	r0, r6
 800f75c:	f7ff ffda 	bl	800f714 <__sfputc_r>
 800f760:	1c43      	adds	r3, r0, #1
 800f762:	d1f3      	bne.n	800f74c <__sfputs_r+0xa>
 800f764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f768 <_vfiprintf_r>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	460d      	mov	r5, r1
 800f76e:	b09d      	sub	sp, #116	@ 0x74
 800f770:	4614      	mov	r4, r2
 800f772:	4698      	mov	r8, r3
 800f774:	4606      	mov	r6, r0
 800f776:	b118      	cbz	r0, 800f780 <_vfiprintf_r+0x18>
 800f778:	6a03      	ldr	r3, [r0, #32]
 800f77a:	b90b      	cbnz	r3, 800f780 <_vfiprintf_r+0x18>
 800f77c:	f7fd f9b6 	bl	800caec <__sinit>
 800f780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f782:	07d9      	lsls	r1, r3, #31
 800f784:	d405      	bmi.n	800f792 <_vfiprintf_r+0x2a>
 800f786:	89ab      	ldrh	r3, [r5, #12]
 800f788:	059a      	lsls	r2, r3, #22
 800f78a:	d402      	bmi.n	800f792 <_vfiprintf_r+0x2a>
 800f78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f78e:	f7fd fbca 	bl	800cf26 <__retarget_lock_acquire_recursive>
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	071b      	lsls	r3, r3, #28
 800f796:	d501      	bpl.n	800f79c <_vfiprintf_r+0x34>
 800f798:	692b      	ldr	r3, [r5, #16]
 800f79a:	b99b      	cbnz	r3, 800f7c4 <_vfiprintf_r+0x5c>
 800f79c:	4629      	mov	r1, r5
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f7fd faee 	bl	800cd80 <__swsetup_r>
 800f7a4:	b170      	cbz	r0, 800f7c4 <_vfiprintf_r+0x5c>
 800f7a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7a8:	07dc      	lsls	r4, r3, #31
 800f7aa:	d504      	bpl.n	800f7b6 <_vfiprintf_r+0x4e>
 800f7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f7b0:	b01d      	add	sp, #116	@ 0x74
 800f7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b6:	89ab      	ldrh	r3, [r5, #12]
 800f7b8:	0598      	lsls	r0, r3, #22
 800f7ba:	d4f7      	bmi.n	800f7ac <_vfiprintf_r+0x44>
 800f7bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7be:	f7fd fbb3 	bl	800cf28 <__retarget_lock_release_recursive>
 800f7c2:	e7f3      	b.n	800f7ac <_vfiprintf_r+0x44>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7c8:	2320      	movs	r3, #32
 800f7ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f7ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7d2:	2330      	movs	r3, #48	@ 0x30
 800f7d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f984 <_vfiprintf_r+0x21c>
 800f7d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f7dc:	f04f 0901 	mov.w	r9, #1
 800f7e0:	4623      	mov	r3, r4
 800f7e2:	469a      	mov	sl, r3
 800f7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7e8:	b10a      	cbz	r2, 800f7ee <_vfiprintf_r+0x86>
 800f7ea:	2a25      	cmp	r2, #37	@ 0x25
 800f7ec:	d1f9      	bne.n	800f7e2 <_vfiprintf_r+0x7a>
 800f7ee:	ebba 0b04 	subs.w	fp, sl, r4
 800f7f2:	d00b      	beq.n	800f80c <_vfiprintf_r+0xa4>
 800f7f4:	465b      	mov	r3, fp
 800f7f6:	4622      	mov	r2, r4
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f7ff ffa1 	bl	800f742 <__sfputs_r>
 800f800:	3001      	adds	r0, #1
 800f802:	f000 80a7 	beq.w	800f954 <_vfiprintf_r+0x1ec>
 800f806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f808:	445a      	add	r2, fp
 800f80a:	9209      	str	r2, [sp, #36]	@ 0x24
 800f80c:	f89a 3000 	ldrb.w	r3, [sl]
 800f810:	2b00      	cmp	r3, #0
 800f812:	f000 809f 	beq.w	800f954 <_vfiprintf_r+0x1ec>
 800f816:	2300      	movs	r3, #0
 800f818:	f04f 32ff 	mov.w	r2, #4294967295
 800f81c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f820:	f10a 0a01 	add.w	sl, sl, #1
 800f824:	9304      	str	r3, [sp, #16]
 800f826:	9307      	str	r3, [sp, #28]
 800f828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f82c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f82e:	4654      	mov	r4, sl
 800f830:	2205      	movs	r2, #5
 800f832:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f836:	4853      	ldr	r0, [pc, #332]	@ (800f984 <_vfiprintf_r+0x21c>)
 800f838:	f7f0 fcca 	bl	80001d0 <memchr>
 800f83c:	9a04      	ldr	r2, [sp, #16]
 800f83e:	b9d8      	cbnz	r0, 800f878 <_vfiprintf_r+0x110>
 800f840:	06d1      	lsls	r1, r2, #27
 800f842:	bf44      	itt	mi
 800f844:	2320      	movmi	r3, #32
 800f846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f84a:	0713      	lsls	r3, r2, #28
 800f84c:	bf44      	itt	mi
 800f84e:	232b      	movmi	r3, #43	@ 0x2b
 800f850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f854:	f89a 3000 	ldrb.w	r3, [sl]
 800f858:	2b2a      	cmp	r3, #42	@ 0x2a
 800f85a:	d015      	beq.n	800f888 <_vfiprintf_r+0x120>
 800f85c:	9a07      	ldr	r2, [sp, #28]
 800f85e:	4654      	mov	r4, sl
 800f860:	2000      	movs	r0, #0
 800f862:	f04f 0c0a 	mov.w	ip, #10
 800f866:	4621      	mov	r1, r4
 800f868:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f86c:	3b30      	subs	r3, #48	@ 0x30
 800f86e:	2b09      	cmp	r3, #9
 800f870:	d94b      	bls.n	800f90a <_vfiprintf_r+0x1a2>
 800f872:	b1b0      	cbz	r0, 800f8a2 <_vfiprintf_r+0x13a>
 800f874:	9207      	str	r2, [sp, #28]
 800f876:	e014      	b.n	800f8a2 <_vfiprintf_r+0x13a>
 800f878:	eba0 0308 	sub.w	r3, r0, r8
 800f87c:	fa09 f303 	lsl.w	r3, r9, r3
 800f880:	4313      	orrs	r3, r2
 800f882:	9304      	str	r3, [sp, #16]
 800f884:	46a2      	mov	sl, r4
 800f886:	e7d2      	b.n	800f82e <_vfiprintf_r+0xc6>
 800f888:	9b03      	ldr	r3, [sp, #12]
 800f88a:	1d19      	adds	r1, r3, #4
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	9103      	str	r1, [sp, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	bfbb      	ittet	lt
 800f894:	425b      	neglt	r3, r3
 800f896:	f042 0202 	orrlt.w	r2, r2, #2
 800f89a:	9307      	strge	r3, [sp, #28]
 800f89c:	9307      	strlt	r3, [sp, #28]
 800f89e:	bfb8      	it	lt
 800f8a0:	9204      	strlt	r2, [sp, #16]
 800f8a2:	7823      	ldrb	r3, [r4, #0]
 800f8a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8a6:	d10a      	bne.n	800f8be <_vfiprintf_r+0x156>
 800f8a8:	7863      	ldrb	r3, [r4, #1]
 800f8aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8ac:	d132      	bne.n	800f914 <_vfiprintf_r+0x1ac>
 800f8ae:	9b03      	ldr	r3, [sp, #12]
 800f8b0:	1d1a      	adds	r2, r3, #4
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	9203      	str	r2, [sp, #12]
 800f8b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8ba:	3402      	adds	r4, #2
 800f8bc:	9305      	str	r3, [sp, #20]
 800f8be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f994 <_vfiprintf_r+0x22c>
 800f8c2:	7821      	ldrb	r1, [r4, #0]
 800f8c4:	2203      	movs	r2, #3
 800f8c6:	4650      	mov	r0, sl
 800f8c8:	f7f0 fc82 	bl	80001d0 <memchr>
 800f8cc:	b138      	cbz	r0, 800f8de <_vfiprintf_r+0x176>
 800f8ce:	9b04      	ldr	r3, [sp, #16]
 800f8d0:	eba0 000a 	sub.w	r0, r0, sl
 800f8d4:	2240      	movs	r2, #64	@ 0x40
 800f8d6:	4082      	lsls	r2, r0
 800f8d8:	4313      	orrs	r3, r2
 800f8da:	3401      	adds	r4, #1
 800f8dc:	9304      	str	r3, [sp, #16]
 800f8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8e2:	4829      	ldr	r0, [pc, #164]	@ (800f988 <_vfiprintf_r+0x220>)
 800f8e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f8e8:	2206      	movs	r2, #6
 800f8ea:	f7f0 fc71 	bl	80001d0 <memchr>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	d03f      	beq.n	800f972 <_vfiprintf_r+0x20a>
 800f8f2:	4b26      	ldr	r3, [pc, #152]	@ (800f98c <_vfiprintf_r+0x224>)
 800f8f4:	bb1b      	cbnz	r3, 800f93e <_vfiprintf_r+0x1d6>
 800f8f6:	9b03      	ldr	r3, [sp, #12]
 800f8f8:	3307      	adds	r3, #7
 800f8fa:	f023 0307 	bic.w	r3, r3, #7
 800f8fe:	3308      	adds	r3, #8
 800f900:	9303      	str	r3, [sp, #12]
 800f902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f904:	443b      	add	r3, r7
 800f906:	9309      	str	r3, [sp, #36]	@ 0x24
 800f908:	e76a      	b.n	800f7e0 <_vfiprintf_r+0x78>
 800f90a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f90e:	460c      	mov	r4, r1
 800f910:	2001      	movs	r0, #1
 800f912:	e7a8      	b.n	800f866 <_vfiprintf_r+0xfe>
 800f914:	2300      	movs	r3, #0
 800f916:	3401      	adds	r4, #1
 800f918:	9305      	str	r3, [sp, #20]
 800f91a:	4619      	mov	r1, r3
 800f91c:	f04f 0c0a 	mov.w	ip, #10
 800f920:	4620      	mov	r0, r4
 800f922:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f926:	3a30      	subs	r2, #48	@ 0x30
 800f928:	2a09      	cmp	r2, #9
 800f92a:	d903      	bls.n	800f934 <_vfiprintf_r+0x1cc>
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d0c6      	beq.n	800f8be <_vfiprintf_r+0x156>
 800f930:	9105      	str	r1, [sp, #20]
 800f932:	e7c4      	b.n	800f8be <_vfiprintf_r+0x156>
 800f934:	fb0c 2101 	mla	r1, ip, r1, r2
 800f938:	4604      	mov	r4, r0
 800f93a:	2301      	movs	r3, #1
 800f93c:	e7f0      	b.n	800f920 <_vfiprintf_r+0x1b8>
 800f93e:	ab03      	add	r3, sp, #12
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	462a      	mov	r2, r5
 800f944:	4b12      	ldr	r3, [pc, #72]	@ (800f990 <_vfiprintf_r+0x228>)
 800f946:	a904      	add	r1, sp, #16
 800f948:	4630      	mov	r0, r6
 800f94a:	f7fc fa7f 	bl	800be4c <_printf_float>
 800f94e:	4607      	mov	r7, r0
 800f950:	1c78      	adds	r0, r7, #1
 800f952:	d1d6      	bne.n	800f902 <_vfiprintf_r+0x19a>
 800f954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f956:	07d9      	lsls	r1, r3, #31
 800f958:	d405      	bmi.n	800f966 <_vfiprintf_r+0x1fe>
 800f95a:	89ab      	ldrh	r3, [r5, #12]
 800f95c:	059a      	lsls	r2, r3, #22
 800f95e:	d402      	bmi.n	800f966 <_vfiprintf_r+0x1fe>
 800f960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f962:	f7fd fae1 	bl	800cf28 <__retarget_lock_release_recursive>
 800f966:	89ab      	ldrh	r3, [r5, #12]
 800f968:	065b      	lsls	r3, r3, #25
 800f96a:	f53f af1f 	bmi.w	800f7ac <_vfiprintf_r+0x44>
 800f96e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f970:	e71e      	b.n	800f7b0 <_vfiprintf_r+0x48>
 800f972:	ab03      	add	r3, sp, #12
 800f974:	9300      	str	r3, [sp, #0]
 800f976:	462a      	mov	r2, r5
 800f978:	4b05      	ldr	r3, [pc, #20]	@ (800f990 <_vfiprintf_r+0x228>)
 800f97a:	a904      	add	r1, sp, #16
 800f97c:	4630      	mov	r0, r6
 800f97e:	f7fc fcfd 	bl	800c37c <_printf_i>
 800f982:	e7e4      	b.n	800f94e <_vfiprintf_r+0x1e6>
 800f984:	080107f9 	.word	0x080107f9
 800f988:	08010803 	.word	0x08010803
 800f98c:	0800be4d 	.word	0x0800be4d
 800f990:	0800f743 	.word	0x0800f743
 800f994:	080107ff 	.word	0x080107ff

0800f998 <__sflush_r>:
 800f998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a0:	0716      	lsls	r6, r2, #28
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	d454      	bmi.n	800fa52 <__sflush_r+0xba>
 800f9a8:	684b      	ldr	r3, [r1, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	dc02      	bgt.n	800f9b4 <__sflush_r+0x1c>
 800f9ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dd48      	ble.n	800fa46 <__sflush_r+0xae>
 800f9b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	d045      	beq.n	800fa46 <__sflush_r+0xae>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f9c0:	682f      	ldr	r7, [r5, #0]
 800f9c2:	6a21      	ldr	r1, [r4, #32]
 800f9c4:	602b      	str	r3, [r5, #0]
 800f9c6:	d030      	beq.n	800fa2a <__sflush_r+0x92>
 800f9c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f9ca:	89a3      	ldrh	r3, [r4, #12]
 800f9cc:	0759      	lsls	r1, r3, #29
 800f9ce:	d505      	bpl.n	800f9dc <__sflush_r+0x44>
 800f9d0:	6863      	ldr	r3, [r4, #4]
 800f9d2:	1ad2      	subs	r2, r2, r3
 800f9d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f9d6:	b10b      	cbz	r3, 800f9dc <__sflush_r+0x44>
 800f9d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f9da:	1ad2      	subs	r2, r2, r3
 800f9dc:	2300      	movs	r3, #0
 800f9de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f9e0:	6a21      	ldr	r1, [r4, #32]
 800f9e2:	4628      	mov	r0, r5
 800f9e4:	47b0      	blx	r6
 800f9e6:	1c43      	adds	r3, r0, #1
 800f9e8:	89a3      	ldrh	r3, [r4, #12]
 800f9ea:	d106      	bne.n	800f9fa <__sflush_r+0x62>
 800f9ec:	6829      	ldr	r1, [r5, #0]
 800f9ee:	291d      	cmp	r1, #29
 800f9f0:	d82b      	bhi.n	800fa4a <__sflush_r+0xb2>
 800f9f2:	4a2a      	ldr	r2, [pc, #168]	@ (800fa9c <__sflush_r+0x104>)
 800f9f4:	40ca      	lsrs	r2, r1
 800f9f6:	07d6      	lsls	r6, r2, #31
 800f9f8:	d527      	bpl.n	800fa4a <__sflush_r+0xb2>
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	6062      	str	r2, [r4, #4]
 800f9fe:	04d9      	lsls	r1, r3, #19
 800fa00:	6922      	ldr	r2, [r4, #16]
 800fa02:	6022      	str	r2, [r4, #0]
 800fa04:	d504      	bpl.n	800fa10 <__sflush_r+0x78>
 800fa06:	1c42      	adds	r2, r0, #1
 800fa08:	d101      	bne.n	800fa0e <__sflush_r+0x76>
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	b903      	cbnz	r3, 800fa10 <__sflush_r+0x78>
 800fa0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fa10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa12:	602f      	str	r7, [r5, #0]
 800fa14:	b1b9      	cbz	r1, 800fa46 <__sflush_r+0xae>
 800fa16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa1a:	4299      	cmp	r1, r3
 800fa1c:	d002      	beq.n	800fa24 <__sflush_r+0x8c>
 800fa1e:	4628      	mov	r0, r5
 800fa20:	f7fe f8f2 	bl	800dc08 <_free_r>
 800fa24:	2300      	movs	r3, #0
 800fa26:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa28:	e00d      	b.n	800fa46 <__sflush_r+0xae>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	47b0      	blx	r6
 800fa30:	4602      	mov	r2, r0
 800fa32:	1c50      	adds	r0, r2, #1
 800fa34:	d1c9      	bne.n	800f9ca <__sflush_r+0x32>
 800fa36:	682b      	ldr	r3, [r5, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0c6      	beq.n	800f9ca <__sflush_r+0x32>
 800fa3c:	2b1d      	cmp	r3, #29
 800fa3e:	d001      	beq.n	800fa44 <__sflush_r+0xac>
 800fa40:	2b16      	cmp	r3, #22
 800fa42:	d11e      	bne.n	800fa82 <__sflush_r+0xea>
 800fa44:	602f      	str	r7, [r5, #0]
 800fa46:	2000      	movs	r0, #0
 800fa48:	e022      	b.n	800fa90 <__sflush_r+0xf8>
 800fa4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa4e:	b21b      	sxth	r3, r3
 800fa50:	e01b      	b.n	800fa8a <__sflush_r+0xf2>
 800fa52:	690f      	ldr	r7, [r1, #16]
 800fa54:	2f00      	cmp	r7, #0
 800fa56:	d0f6      	beq.n	800fa46 <__sflush_r+0xae>
 800fa58:	0793      	lsls	r3, r2, #30
 800fa5a:	680e      	ldr	r6, [r1, #0]
 800fa5c:	bf08      	it	eq
 800fa5e:	694b      	ldreq	r3, [r1, #20]
 800fa60:	600f      	str	r7, [r1, #0]
 800fa62:	bf18      	it	ne
 800fa64:	2300      	movne	r3, #0
 800fa66:	eba6 0807 	sub.w	r8, r6, r7
 800fa6a:	608b      	str	r3, [r1, #8]
 800fa6c:	f1b8 0f00 	cmp.w	r8, #0
 800fa70:	dde9      	ble.n	800fa46 <__sflush_r+0xae>
 800fa72:	6a21      	ldr	r1, [r4, #32]
 800fa74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fa76:	4643      	mov	r3, r8
 800fa78:	463a      	mov	r2, r7
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	47b0      	blx	r6
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	dc08      	bgt.n	800fa94 <__sflush_r+0xfc>
 800fa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa94:	4407      	add	r7, r0
 800fa96:	eba8 0800 	sub.w	r8, r8, r0
 800fa9a:	e7e7      	b.n	800fa6c <__sflush_r+0xd4>
 800fa9c:	20400001 	.word	0x20400001

0800faa0 <_fflush_r>:
 800faa0:	b538      	push	{r3, r4, r5, lr}
 800faa2:	690b      	ldr	r3, [r1, #16]
 800faa4:	4605      	mov	r5, r0
 800faa6:	460c      	mov	r4, r1
 800faa8:	b913      	cbnz	r3, 800fab0 <_fflush_r+0x10>
 800faaa:	2500      	movs	r5, #0
 800faac:	4628      	mov	r0, r5
 800faae:	bd38      	pop	{r3, r4, r5, pc}
 800fab0:	b118      	cbz	r0, 800faba <_fflush_r+0x1a>
 800fab2:	6a03      	ldr	r3, [r0, #32]
 800fab4:	b90b      	cbnz	r3, 800faba <_fflush_r+0x1a>
 800fab6:	f7fd f819 	bl	800caec <__sinit>
 800faba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d0f3      	beq.n	800faaa <_fflush_r+0xa>
 800fac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fac4:	07d0      	lsls	r0, r2, #31
 800fac6:	d404      	bmi.n	800fad2 <_fflush_r+0x32>
 800fac8:	0599      	lsls	r1, r3, #22
 800faca:	d402      	bmi.n	800fad2 <_fflush_r+0x32>
 800facc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800face:	f7fd fa2a 	bl	800cf26 <__retarget_lock_acquire_recursive>
 800fad2:	4628      	mov	r0, r5
 800fad4:	4621      	mov	r1, r4
 800fad6:	f7ff ff5f 	bl	800f998 <__sflush_r>
 800fada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fadc:	07da      	lsls	r2, r3, #31
 800fade:	4605      	mov	r5, r0
 800fae0:	d4e4      	bmi.n	800faac <_fflush_r+0xc>
 800fae2:	89a3      	ldrh	r3, [r4, #12]
 800fae4:	059b      	lsls	r3, r3, #22
 800fae6:	d4e1      	bmi.n	800faac <_fflush_r+0xc>
 800fae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800faea:	f7fd fa1d 	bl	800cf28 <__retarget_lock_release_recursive>
 800faee:	e7dd      	b.n	800faac <_fflush_r+0xc>

0800faf0 <__swhatbuf_r>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	460c      	mov	r4, r1
 800faf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faf8:	2900      	cmp	r1, #0
 800fafa:	b096      	sub	sp, #88	@ 0x58
 800fafc:	4615      	mov	r5, r2
 800fafe:	461e      	mov	r6, r3
 800fb00:	da0d      	bge.n	800fb1e <__swhatbuf_r+0x2e>
 800fb02:	89a3      	ldrh	r3, [r4, #12]
 800fb04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fb08:	f04f 0100 	mov.w	r1, #0
 800fb0c:	bf14      	ite	ne
 800fb0e:	2340      	movne	r3, #64	@ 0x40
 800fb10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fb14:	2000      	movs	r0, #0
 800fb16:	6031      	str	r1, [r6, #0]
 800fb18:	602b      	str	r3, [r5, #0]
 800fb1a:	b016      	add	sp, #88	@ 0x58
 800fb1c:	bd70      	pop	{r4, r5, r6, pc}
 800fb1e:	466a      	mov	r2, sp
 800fb20:	f000 f874 	bl	800fc0c <_fstat_r>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	dbec      	blt.n	800fb02 <__swhatbuf_r+0x12>
 800fb28:	9901      	ldr	r1, [sp, #4]
 800fb2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fb2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fb32:	4259      	negs	r1, r3
 800fb34:	4159      	adcs	r1, r3
 800fb36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb3a:	e7eb      	b.n	800fb14 <__swhatbuf_r+0x24>

0800fb3c <__smakebuf_r>:
 800fb3c:	898b      	ldrh	r3, [r1, #12]
 800fb3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb40:	079d      	lsls	r5, r3, #30
 800fb42:	4606      	mov	r6, r0
 800fb44:	460c      	mov	r4, r1
 800fb46:	d507      	bpl.n	800fb58 <__smakebuf_r+0x1c>
 800fb48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	6123      	str	r3, [r4, #16]
 800fb50:	2301      	movs	r3, #1
 800fb52:	6163      	str	r3, [r4, #20]
 800fb54:	b003      	add	sp, #12
 800fb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb58:	ab01      	add	r3, sp, #4
 800fb5a:	466a      	mov	r2, sp
 800fb5c:	f7ff ffc8 	bl	800faf0 <__swhatbuf_r>
 800fb60:	9f00      	ldr	r7, [sp, #0]
 800fb62:	4605      	mov	r5, r0
 800fb64:	4639      	mov	r1, r7
 800fb66:	4630      	mov	r0, r6
 800fb68:	f7fe f8c2 	bl	800dcf0 <_malloc_r>
 800fb6c:	b948      	cbnz	r0, 800fb82 <__smakebuf_r+0x46>
 800fb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb72:	059a      	lsls	r2, r3, #22
 800fb74:	d4ee      	bmi.n	800fb54 <__smakebuf_r+0x18>
 800fb76:	f023 0303 	bic.w	r3, r3, #3
 800fb7a:	f043 0302 	orr.w	r3, r3, #2
 800fb7e:	81a3      	strh	r3, [r4, #12]
 800fb80:	e7e2      	b.n	800fb48 <__smakebuf_r+0xc>
 800fb82:	89a3      	ldrh	r3, [r4, #12]
 800fb84:	6020      	str	r0, [r4, #0]
 800fb86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fb8a:	81a3      	strh	r3, [r4, #12]
 800fb8c:	9b01      	ldr	r3, [sp, #4]
 800fb8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fb92:	b15b      	cbz	r3, 800fbac <__smakebuf_r+0x70>
 800fb94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb98:	4630      	mov	r0, r6
 800fb9a:	f000 f849 	bl	800fc30 <_isatty_r>
 800fb9e:	b128      	cbz	r0, 800fbac <__smakebuf_r+0x70>
 800fba0:	89a3      	ldrh	r3, [r4, #12]
 800fba2:	f023 0303 	bic.w	r3, r3, #3
 800fba6:	f043 0301 	orr.w	r3, r3, #1
 800fbaa:	81a3      	strh	r3, [r4, #12]
 800fbac:	89a3      	ldrh	r3, [r4, #12]
 800fbae:	431d      	orrs	r5, r3
 800fbb0:	81a5      	strh	r5, [r4, #12]
 800fbb2:	e7cf      	b.n	800fb54 <__smakebuf_r+0x18>

0800fbb4 <memmove>:
 800fbb4:	4288      	cmp	r0, r1
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	eb01 0402 	add.w	r4, r1, r2
 800fbbc:	d902      	bls.n	800fbc4 <memmove+0x10>
 800fbbe:	4284      	cmp	r4, r0
 800fbc0:	4623      	mov	r3, r4
 800fbc2:	d807      	bhi.n	800fbd4 <memmove+0x20>
 800fbc4:	1e43      	subs	r3, r0, #1
 800fbc6:	42a1      	cmp	r1, r4
 800fbc8:	d008      	beq.n	800fbdc <memmove+0x28>
 800fbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbd2:	e7f8      	b.n	800fbc6 <memmove+0x12>
 800fbd4:	4402      	add	r2, r0
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	428a      	cmp	r2, r1
 800fbda:	d100      	bne.n	800fbde <memmove+0x2a>
 800fbdc:	bd10      	pop	{r4, pc}
 800fbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbe6:	e7f7      	b.n	800fbd8 <memmove+0x24>

0800fbe8 <strncmp>:
 800fbe8:	b510      	push	{r4, lr}
 800fbea:	b16a      	cbz	r2, 800fc08 <strncmp+0x20>
 800fbec:	3901      	subs	r1, #1
 800fbee:	1884      	adds	r4, r0, r2
 800fbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d103      	bne.n	800fc04 <strncmp+0x1c>
 800fbfc:	42a0      	cmp	r0, r4
 800fbfe:	d001      	beq.n	800fc04 <strncmp+0x1c>
 800fc00:	2a00      	cmp	r2, #0
 800fc02:	d1f5      	bne.n	800fbf0 <strncmp+0x8>
 800fc04:	1ad0      	subs	r0, r2, r3
 800fc06:	bd10      	pop	{r4, pc}
 800fc08:	4610      	mov	r0, r2
 800fc0a:	e7fc      	b.n	800fc06 <strncmp+0x1e>

0800fc0c <_fstat_r>:
 800fc0c:	b538      	push	{r3, r4, r5, lr}
 800fc0e:	4d07      	ldr	r5, [pc, #28]	@ (800fc2c <_fstat_r+0x20>)
 800fc10:	2300      	movs	r3, #0
 800fc12:	4604      	mov	r4, r0
 800fc14:	4608      	mov	r0, r1
 800fc16:	4611      	mov	r1, r2
 800fc18:	602b      	str	r3, [r5, #0]
 800fc1a:	f7f1 fd91 	bl	8001740 <_fstat>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	d102      	bne.n	800fc28 <_fstat_r+0x1c>
 800fc22:	682b      	ldr	r3, [r5, #0]
 800fc24:	b103      	cbz	r3, 800fc28 <_fstat_r+0x1c>
 800fc26:	6023      	str	r3, [r4, #0]
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20002238 	.word	0x20002238

0800fc30 <_isatty_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d06      	ldr	r5, [pc, #24]	@ (800fc4c <_isatty_r+0x1c>)
 800fc34:	2300      	movs	r3, #0
 800fc36:	4604      	mov	r4, r0
 800fc38:	4608      	mov	r0, r1
 800fc3a:	602b      	str	r3, [r5, #0]
 800fc3c:	f7f1 fd90 	bl	8001760 <_isatty>
 800fc40:	1c43      	adds	r3, r0, #1
 800fc42:	d102      	bne.n	800fc4a <_isatty_r+0x1a>
 800fc44:	682b      	ldr	r3, [r5, #0]
 800fc46:	b103      	cbz	r3, 800fc4a <_isatty_r+0x1a>
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	20002238 	.word	0x20002238

0800fc50 <_sbrk_r>:
 800fc50:	b538      	push	{r3, r4, r5, lr}
 800fc52:	4d06      	ldr	r5, [pc, #24]	@ (800fc6c <_sbrk_r+0x1c>)
 800fc54:	2300      	movs	r3, #0
 800fc56:	4604      	mov	r4, r0
 800fc58:	4608      	mov	r0, r1
 800fc5a:	602b      	str	r3, [r5, #0]
 800fc5c:	f000 fc2e 	bl	80104bc <_sbrk>
 800fc60:	1c43      	adds	r3, r0, #1
 800fc62:	d102      	bne.n	800fc6a <_sbrk_r+0x1a>
 800fc64:	682b      	ldr	r3, [r5, #0]
 800fc66:	b103      	cbz	r3, 800fc6a <_sbrk_r+0x1a>
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	bd38      	pop	{r3, r4, r5, pc}
 800fc6c:	20002238 	.word	0x20002238

0800fc70 <nan>:
 800fc70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fc78 <nan+0x8>
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	00000000 	.word	0x00000000
 800fc7c:	7ff80000 	.word	0x7ff80000

0800fc80 <__assert_func>:
 800fc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc82:	4614      	mov	r4, r2
 800fc84:	461a      	mov	r2, r3
 800fc86:	4b09      	ldr	r3, [pc, #36]	@ (800fcac <__assert_func+0x2c>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4605      	mov	r5, r0
 800fc8c:	68d8      	ldr	r0, [r3, #12]
 800fc8e:	b14c      	cbz	r4, 800fca4 <__assert_func+0x24>
 800fc90:	4b07      	ldr	r3, [pc, #28]	@ (800fcb0 <__assert_func+0x30>)
 800fc92:	9100      	str	r1, [sp, #0]
 800fc94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc98:	4906      	ldr	r1, [pc, #24]	@ (800fcb4 <__assert_func+0x34>)
 800fc9a:	462b      	mov	r3, r5
 800fc9c:	f000 fba8 	bl	80103f0 <fiprintf>
 800fca0:	f000 fbb8 	bl	8010414 <abort>
 800fca4:	4b04      	ldr	r3, [pc, #16]	@ (800fcb8 <__assert_func+0x38>)
 800fca6:	461c      	mov	r4, r3
 800fca8:	e7f3      	b.n	800fc92 <__assert_func+0x12>
 800fcaa:	bf00      	nop
 800fcac:	20000114 	.word	0x20000114
 800fcb0:	08010812 	.word	0x08010812
 800fcb4:	0801081f 	.word	0x0801081f
 800fcb8:	0801084d 	.word	0x0801084d

0800fcbc <_calloc_r>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	fba1 5402 	umull	r5, r4, r1, r2
 800fcc2:	b934      	cbnz	r4, 800fcd2 <_calloc_r+0x16>
 800fcc4:	4629      	mov	r1, r5
 800fcc6:	f7fe f813 	bl	800dcf0 <_malloc_r>
 800fcca:	4606      	mov	r6, r0
 800fccc:	b928      	cbnz	r0, 800fcda <_calloc_r+0x1e>
 800fcce:	4630      	mov	r0, r6
 800fcd0:	bd70      	pop	{r4, r5, r6, pc}
 800fcd2:	220c      	movs	r2, #12
 800fcd4:	6002      	str	r2, [r0, #0]
 800fcd6:	2600      	movs	r6, #0
 800fcd8:	e7f9      	b.n	800fcce <_calloc_r+0x12>
 800fcda:	462a      	mov	r2, r5
 800fcdc:	4621      	mov	r1, r4
 800fcde:	f7fd f8a5 	bl	800ce2c <memset>
 800fce2:	e7f4      	b.n	800fcce <_calloc_r+0x12>

0800fce4 <rshift>:
 800fce4:	6903      	ldr	r3, [r0, #16]
 800fce6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fcea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcf2:	f100 0414 	add.w	r4, r0, #20
 800fcf6:	dd45      	ble.n	800fd84 <rshift+0xa0>
 800fcf8:	f011 011f 	ands.w	r1, r1, #31
 800fcfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fd00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd04:	d10c      	bne.n	800fd20 <rshift+0x3c>
 800fd06:	f100 0710 	add.w	r7, r0, #16
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	42b1      	cmp	r1, r6
 800fd0e:	d334      	bcc.n	800fd7a <rshift+0x96>
 800fd10:	1a9b      	subs	r3, r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	1eea      	subs	r2, r5, #3
 800fd16:	4296      	cmp	r6, r2
 800fd18:	bf38      	it	cc
 800fd1a:	2300      	movcc	r3, #0
 800fd1c:	4423      	add	r3, r4
 800fd1e:	e015      	b.n	800fd4c <rshift+0x68>
 800fd20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fd24:	f1c1 0820 	rsb	r8, r1, #32
 800fd28:	40cf      	lsrs	r7, r1
 800fd2a:	f105 0e04 	add.w	lr, r5, #4
 800fd2e:	46a1      	mov	r9, r4
 800fd30:	4576      	cmp	r6, lr
 800fd32:	46f4      	mov	ip, lr
 800fd34:	d815      	bhi.n	800fd62 <rshift+0x7e>
 800fd36:	1a9a      	subs	r2, r3, r2
 800fd38:	0092      	lsls	r2, r2, #2
 800fd3a:	3a04      	subs	r2, #4
 800fd3c:	3501      	adds	r5, #1
 800fd3e:	42ae      	cmp	r6, r5
 800fd40:	bf38      	it	cc
 800fd42:	2200      	movcc	r2, #0
 800fd44:	18a3      	adds	r3, r4, r2
 800fd46:	50a7      	str	r7, [r4, r2]
 800fd48:	b107      	cbz	r7, 800fd4c <rshift+0x68>
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	1b1a      	subs	r2, r3, r4
 800fd4e:	42a3      	cmp	r3, r4
 800fd50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd54:	bf08      	it	eq
 800fd56:	2300      	moveq	r3, #0
 800fd58:	6102      	str	r2, [r0, #16]
 800fd5a:	bf08      	it	eq
 800fd5c:	6143      	streq	r3, [r0, #20]
 800fd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd62:	f8dc c000 	ldr.w	ip, [ip]
 800fd66:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd6a:	ea4c 0707 	orr.w	r7, ip, r7
 800fd6e:	f849 7b04 	str.w	r7, [r9], #4
 800fd72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd76:	40cf      	lsrs	r7, r1
 800fd78:	e7da      	b.n	800fd30 <rshift+0x4c>
 800fd7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd82:	e7c3      	b.n	800fd0c <rshift+0x28>
 800fd84:	4623      	mov	r3, r4
 800fd86:	e7e1      	b.n	800fd4c <rshift+0x68>

0800fd88 <__hexdig_fun>:
 800fd88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fd8c:	2b09      	cmp	r3, #9
 800fd8e:	d802      	bhi.n	800fd96 <__hexdig_fun+0xe>
 800fd90:	3820      	subs	r0, #32
 800fd92:	b2c0      	uxtb	r0, r0
 800fd94:	4770      	bx	lr
 800fd96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fd9a:	2b05      	cmp	r3, #5
 800fd9c:	d801      	bhi.n	800fda2 <__hexdig_fun+0x1a>
 800fd9e:	3847      	subs	r0, #71	@ 0x47
 800fda0:	e7f7      	b.n	800fd92 <__hexdig_fun+0xa>
 800fda2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fda6:	2b05      	cmp	r3, #5
 800fda8:	d801      	bhi.n	800fdae <__hexdig_fun+0x26>
 800fdaa:	3827      	subs	r0, #39	@ 0x27
 800fdac:	e7f1      	b.n	800fd92 <__hexdig_fun+0xa>
 800fdae:	2000      	movs	r0, #0
 800fdb0:	4770      	bx	lr
	...

0800fdb4 <__gethex>:
 800fdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb8:	b085      	sub	sp, #20
 800fdba:	468a      	mov	sl, r1
 800fdbc:	9302      	str	r3, [sp, #8]
 800fdbe:	680b      	ldr	r3, [r1, #0]
 800fdc0:	9001      	str	r0, [sp, #4]
 800fdc2:	4690      	mov	r8, r2
 800fdc4:	1c9c      	adds	r4, r3, #2
 800fdc6:	46a1      	mov	r9, r4
 800fdc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fdcc:	2830      	cmp	r0, #48	@ 0x30
 800fdce:	d0fa      	beq.n	800fdc6 <__gethex+0x12>
 800fdd0:	eba9 0303 	sub.w	r3, r9, r3
 800fdd4:	f1a3 0b02 	sub.w	fp, r3, #2
 800fdd8:	f7ff ffd6 	bl	800fd88 <__hexdig_fun>
 800fddc:	4605      	mov	r5, r0
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d168      	bne.n	800feb4 <__gethex+0x100>
 800fde2:	49a0      	ldr	r1, [pc, #640]	@ (8010064 <__gethex+0x2b0>)
 800fde4:	2201      	movs	r2, #1
 800fde6:	4648      	mov	r0, r9
 800fde8:	f7ff fefe 	bl	800fbe8 <strncmp>
 800fdec:	4607      	mov	r7, r0
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d167      	bne.n	800fec2 <__gethex+0x10e>
 800fdf2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fdf6:	4626      	mov	r6, r4
 800fdf8:	f7ff ffc6 	bl	800fd88 <__hexdig_fun>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d062      	beq.n	800fec6 <__gethex+0x112>
 800fe00:	4623      	mov	r3, r4
 800fe02:	7818      	ldrb	r0, [r3, #0]
 800fe04:	2830      	cmp	r0, #48	@ 0x30
 800fe06:	4699      	mov	r9, r3
 800fe08:	f103 0301 	add.w	r3, r3, #1
 800fe0c:	d0f9      	beq.n	800fe02 <__gethex+0x4e>
 800fe0e:	f7ff ffbb 	bl	800fd88 <__hexdig_fun>
 800fe12:	fab0 f580 	clz	r5, r0
 800fe16:	096d      	lsrs	r5, r5, #5
 800fe18:	f04f 0b01 	mov.w	fp, #1
 800fe1c:	464a      	mov	r2, r9
 800fe1e:	4616      	mov	r6, r2
 800fe20:	3201      	adds	r2, #1
 800fe22:	7830      	ldrb	r0, [r6, #0]
 800fe24:	f7ff ffb0 	bl	800fd88 <__hexdig_fun>
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d1f8      	bne.n	800fe1e <__gethex+0x6a>
 800fe2c:	498d      	ldr	r1, [pc, #564]	@ (8010064 <__gethex+0x2b0>)
 800fe2e:	2201      	movs	r2, #1
 800fe30:	4630      	mov	r0, r6
 800fe32:	f7ff fed9 	bl	800fbe8 <strncmp>
 800fe36:	2800      	cmp	r0, #0
 800fe38:	d13f      	bne.n	800feba <__gethex+0x106>
 800fe3a:	b944      	cbnz	r4, 800fe4e <__gethex+0x9a>
 800fe3c:	1c74      	adds	r4, r6, #1
 800fe3e:	4622      	mov	r2, r4
 800fe40:	4616      	mov	r6, r2
 800fe42:	3201      	adds	r2, #1
 800fe44:	7830      	ldrb	r0, [r6, #0]
 800fe46:	f7ff ff9f 	bl	800fd88 <__hexdig_fun>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d1f8      	bne.n	800fe40 <__gethex+0x8c>
 800fe4e:	1ba4      	subs	r4, r4, r6
 800fe50:	00a7      	lsls	r7, r4, #2
 800fe52:	7833      	ldrb	r3, [r6, #0]
 800fe54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fe58:	2b50      	cmp	r3, #80	@ 0x50
 800fe5a:	d13e      	bne.n	800feda <__gethex+0x126>
 800fe5c:	7873      	ldrb	r3, [r6, #1]
 800fe5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800fe60:	d033      	beq.n	800feca <__gethex+0x116>
 800fe62:	2b2d      	cmp	r3, #45	@ 0x2d
 800fe64:	d034      	beq.n	800fed0 <__gethex+0x11c>
 800fe66:	1c71      	adds	r1, r6, #1
 800fe68:	2400      	movs	r4, #0
 800fe6a:	7808      	ldrb	r0, [r1, #0]
 800fe6c:	f7ff ff8c 	bl	800fd88 <__hexdig_fun>
 800fe70:	1e43      	subs	r3, r0, #1
 800fe72:	b2db      	uxtb	r3, r3
 800fe74:	2b18      	cmp	r3, #24
 800fe76:	d830      	bhi.n	800feda <__gethex+0x126>
 800fe78:	f1a0 0210 	sub.w	r2, r0, #16
 800fe7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe80:	f7ff ff82 	bl	800fd88 <__hexdig_fun>
 800fe84:	f100 3cff 	add.w	ip, r0, #4294967295
 800fe88:	fa5f fc8c 	uxtb.w	ip, ip
 800fe8c:	f1bc 0f18 	cmp.w	ip, #24
 800fe90:	f04f 030a 	mov.w	r3, #10
 800fe94:	d91e      	bls.n	800fed4 <__gethex+0x120>
 800fe96:	b104      	cbz	r4, 800fe9a <__gethex+0xe6>
 800fe98:	4252      	negs	r2, r2
 800fe9a:	4417      	add	r7, r2
 800fe9c:	f8ca 1000 	str.w	r1, [sl]
 800fea0:	b1ed      	cbz	r5, 800fede <__gethex+0x12a>
 800fea2:	f1bb 0f00 	cmp.w	fp, #0
 800fea6:	bf0c      	ite	eq
 800fea8:	2506      	moveq	r5, #6
 800feaa:	2500      	movne	r5, #0
 800feac:	4628      	mov	r0, r5
 800feae:	b005      	add	sp, #20
 800feb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb4:	2500      	movs	r5, #0
 800feb6:	462c      	mov	r4, r5
 800feb8:	e7b0      	b.n	800fe1c <__gethex+0x68>
 800feba:	2c00      	cmp	r4, #0
 800febc:	d1c7      	bne.n	800fe4e <__gethex+0x9a>
 800febe:	4627      	mov	r7, r4
 800fec0:	e7c7      	b.n	800fe52 <__gethex+0x9e>
 800fec2:	464e      	mov	r6, r9
 800fec4:	462f      	mov	r7, r5
 800fec6:	2501      	movs	r5, #1
 800fec8:	e7c3      	b.n	800fe52 <__gethex+0x9e>
 800feca:	2400      	movs	r4, #0
 800fecc:	1cb1      	adds	r1, r6, #2
 800fece:	e7cc      	b.n	800fe6a <__gethex+0xb6>
 800fed0:	2401      	movs	r4, #1
 800fed2:	e7fb      	b.n	800fecc <__gethex+0x118>
 800fed4:	fb03 0002 	mla	r0, r3, r2, r0
 800fed8:	e7ce      	b.n	800fe78 <__gethex+0xc4>
 800feda:	4631      	mov	r1, r6
 800fedc:	e7de      	b.n	800fe9c <__gethex+0xe8>
 800fede:	eba6 0309 	sub.w	r3, r6, r9
 800fee2:	3b01      	subs	r3, #1
 800fee4:	4629      	mov	r1, r5
 800fee6:	2b07      	cmp	r3, #7
 800fee8:	dc0a      	bgt.n	800ff00 <__gethex+0x14c>
 800feea:	9801      	ldr	r0, [sp, #4]
 800feec:	f7fd ff8c 	bl	800de08 <_Balloc>
 800fef0:	4604      	mov	r4, r0
 800fef2:	b940      	cbnz	r0, 800ff06 <__gethex+0x152>
 800fef4:	4b5c      	ldr	r3, [pc, #368]	@ (8010068 <__gethex+0x2b4>)
 800fef6:	4602      	mov	r2, r0
 800fef8:	21e4      	movs	r1, #228	@ 0xe4
 800fefa:	485c      	ldr	r0, [pc, #368]	@ (801006c <__gethex+0x2b8>)
 800fefc:	f7ff fec0 	bl	800fc80 <__assert_func>
 800ff00:	3101      	adds	r1, #1
 800ff02:	105b      	asrs	r3, r3, #1
 800ff04:	e7ef      	b.n	800fee6 <__gethex+0x132>
 800ff06:	f100 0a14 	add.w	sl, r0, #20
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4655      	mov	r5, sl
 800ff0e:	469b      	mov	fp, r3
 800ff10:	45b1      	cmp	r9, r6
 800ff12:	d337      	bcc.n	800ff84 <__gethex+0x1d0>
 800ff14:	f845 bb04 	str.w	fp, [r5], #4
 800ff18:	eba5 050a 	sub.w	r5, r5, sl
 800ff1c:	10ad      	asrs	r5, r5, #2
 800ff1e:	6125      	str	r5, [r4, #16]
 800ff20:	4658      	mov	r0, fp
 800ff22:	f7fe f863 	bl	800dfec <__hi0bits>
 800ff26:	016d      	lsls	r5, r5, #5
 800ff28:	f8d8 6000 	ldr.w	r6, [r8]
 800ff2c:	1a2d      	subs	r5, r5, r0
 800ff2e:	42b5      	cmp	r5, r6
 800ff30:	dd54      	ble.n	800ffdc <__gethex+0x228>
 800ff32:	1bad      	subs	r5, r5, r6
 800ff34:	4629      	mov	r1, r5
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7fe fbef 	bl	800e71a <__any_on>
 800ff3c:	4681      	mov	r9, r0
 800ff3e:	b178      	cbz	r0, 800ff60 <__gethex+0x1ac>
 800ff40:	1e6b      	subs	r3, r5, #1
 800ff42:	1159      	asrs	r1, r3, #5
 800ff44:	f003 021f 	and.w	r2, r3, #31
 800ff48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ff4c:	f04f 0901 	mov.w	r9, #1
 800ff50:	fa09 f202 	lsl.w	r2, r9, r2
 800ff54:	420a      	tst	r2, r1
 800ff56:	d003      	beq.n	800ff60 <__gethex+0x1ac>
 800ff58:	454b      	cmp	r3, r9
 800ff5a:	dc36      	bgt.n	800ffca <__gethex+0x216>
 800ff5c:	f04f 0902 	mov.w	r9, #2
 800ff60:	4629      	mov	r1, r5
 800ff62:	4620      	mov	r0, r4
 800ff64:	f7ff febe 	bl	800fce4 <rshift>
 800ff68:	442f      	add	r7, r5
 800ff6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff6e:	42bb      	cmp	r3, r7
 800ff70:	da42      	bge.n	800fff8 <__gethex+0x244>
 800ff72:	9801      	ldr	r0, [sp, #4]
 800ff74:	4621      	mov	r1, r4
 800ff76:	f7fd ff87 	bl	800de88 <_Bfree>
 800ff7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	6013      	str	r3, [r2, #0]
 800ff80:	25a3      	movs	r5, #163	@ 0xa3
 800ff82:	e793      	b.n	800feac <__gethex+0xf8>
 800ff84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ff88:	2a2e      	cmp	r2, #46	@ 0x2e
 800ff8a:	d012      	beq.n	800ffb2 <__gethex+0x1fe>
 800ff8c:	2b20      	cmp	r3, #32
 800ff8e:	d104      	bne.n	800ff9a <__gethex+0x1e6>
 800ff90:	f845 bb04 	str.w	fp, [r5], #4
 800ff94:	f04f 0b00 	mov.w	fp, #0
 800ff98:	465b      	mov	r3, fp
 800ff9a:	7830      	ldrb	r0, [r6, #0]
 800ff9c:	9303      	str	r3, [sp, #12]
 800ff9e:	f7ff fef3 	bl	800fd88 <__hexdig_fun>
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	f000 000f 	and.w	r0, r0, #15
 800ffa8:	4098      	lsls	r0, r3
 800ffaa:	ea4b 0b00 	orr.w	fp, fp, r0
 800ffae:	3304      	adds	r3, #4
 800ffb0:	e7ae      	b.n	800ff10 <__gethex+0x15c>
 800ffb2:	45b1      	cmp	r9, r6
 800ffb4:	d8ea      	bhi.n	800ff8c <__gethex+0x1d8>
 800ffb6:	492b      	ldr	r1, [pc, #172]	@ (8010064 <__gethex+0x2b0>)
 800ffb8:	9303      	str	r3, [sp, #12]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	f7ff fe13 	bl	800fbe8 <strncmp>
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	d1e1      	bne.n	800ff8c <__gethex+0x1d8>
 800ffc8:	e7a2      	b.n	800ff10 <__gethex+0x15c>
 800ffca:	1ea9      	subs	r1, r5, #2
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f7fe fba4 	bl	800e71a <__any_on>
 800ffd2:	2800      	cmp	r0, #0
 800ffd4:	d0c2      	beq.n	800ff5c <__gethex+0x1a8>
 800ffd6:	f04f 0903 	mov.w	r9, #3
 800ffda:	e7c1      	b.n	800ff60 <__gethex+0x1ac>
 800ffdc:	da09      	bge.n	800fff2 <__gethex+0x23e>
 800ffde:	1b75      	subs	r5, r6, r5
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	9801      	ldr	r0, [sp, #4]
 800ffe4:	462a      	mov	r2, r5
 800ffe6:	f7fe f95f 	bl	800e2a8 <__lshift>
 800ffea:	1b7f      	subs	r7, r7, r5
 800ffec:	4604      	mov	r4, r0
 800ffee:	f100 0a14 	add.w	sl, r0, #20
 800fff2:	f04f 0900 	mov.w	r9, #0
 800fff6:	e7b8      	b.n	800ff6a <__gethex+0x1b6>
 800fff8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fffc:	42bd      	cmp	r5, r7
 800fffe:	dd6f      	ble.n	80100e0 <__gethex+0x32c>
 8010000:	1bed      	subs	r5, r5, r7
 8010002:	42ae      	cmp	r6, r5
 8010004:	dc34      	bgt.n	8010070 <__gethex+0x2bc>
 8010006:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801000a:	2b02      	cmp	r3, #2
 801000c:	d022      	beq.n	8010054 <__gethex+0x2a0>
 801000e:	2b03      	cmp	r3, #3
 8010010:	d024      	beq.n	801005c <__gethex+0x2a8>
 8010012:	2b01      	cmp	r3, #1
 8010014:	d115      	bne.n	8010042 <__gethex+0x28e>
 8010016:	42ae      	cmp	r6, r5
 8010018:	d113      	bne.n	8010042 <__gethex+0x28e>
 801001a:	2e01      	cmp	r6, #1
 801001c:	d10b      	bne.n	8010036 <__gethex+0x282>
 801001e:	9a02      	ldr	r2, [sp, #8]
 8010020:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010024:	6013      	str	r3, [r2, #0]
 8010026:	2301      	movs	r3, #1
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	f8ca 3000 	str.w	r3, [sl]
 801002e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010030:	2562      	movs	r5, #98	@ 0x62
 8010032:	601c      	str	r4, [r3, #0]
 8010034:	e73a      	b.n	800feac <__gethex+0xf8>
 8010036:	1e71      	subs	r1, r6, #1
 8010038:	4620      	mov	r0, r4
 801003a:	f7fe fb6e 	bl	800e71a <__any_on>
 801003e:	2800      	cmp	r0, #0
 8010040:	d1ed      	bne.n	801001e <__gethex+0x26a>
 8010042:	9801      	ldr	r0, [sp, #4]
 8010044:	4621      	mov	r1, r4
 8010046:	f7fd ff1f 	bl	800de88 <_Bfree>
 801004a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801004c:	2300      	movs	r3, #0
 801004e:	6013      	str	r3, [r2, #0]
 8010050:	2550      	movs	r5, #80	@ 0x50
 8010052:	e72b      	b.n	800feac <__gethex+0xf8>
 8010054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010056:	2b00      	cmp	r3, #0
 8010058:	d1f3      	bne.n	8010042 <__gethex+0x28e>
 801005a:	e7e0      	b.n	801001e <__gethex+0x26a>
 801005c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1dd      	bne.n	801001e <__gethex+0x26a>
 8010062:	e7ee      	b.n	8010042 <__gethex+0x28e>
 8010064:	080107f7 	.word	0x080107f7
 8010068:	0801078d 	.word	0x0801078d
 801006c:	0801084e 	.word	0x0801084e
 8010070:	1e6f      	subs	r7, r5, #1
 8010072:	f1b9 0f00 	cmp.w	r9, #0
 8010076:	d130      	bne.n	80100da <__gethex+0x326>
 8010078:	b127      	cbz	r7, 8010084 <__gethex+0x2d0>
 801007a:	4639      	mov	r1, r7
 801007c:	4620      	mov	r0, r4
 801007e:	f7fe fb4c 	bl	800e71a <__any_on>
 8010082:	4681      	mov	r9, r0
 8010084:	117a      	asrs	r2, r7, #5
 8010086:	2301      	movs	r3, #1
 8010088:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801008c:	f007 071f 	and.w	r7, r7, #31
 8010090:	40bb      	lsls	r3, r7
 8010092:	4213      	tst	r3, r2
 8010094:	4629      	mov	r1, r5
 8010096:	4620      	mov	r0, r4
 8010098:	bf18      	it	ne
 801009a:	f049 0902 	orrne.w	r9, r9, #2
 801009e:	f7ff fe21 	bl	800fce4 <rshift>
 80100a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80100a6:	1b76      	subs	r6, r6, r5
 80100a8:	2502      	movs	r5, #2
 80100aa:	f1b9 0f00 	cmp.w	r9, #0
 80100ae:	d047      	beq.n	8010140 <__gethex+0x38c>
 80100b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	d015      	beq.n	80100e4 <__gethex+0x330>
 80100b8:	2b03      	cmp	r3, #3
 80100ba:	d017      	beq.n	80100ec <__gethex+0x338>
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d109      	bne.n	80100d4 <__gethex+0x320>
 80100c0:	f019 0f02 	tst.w	r9, #2
 80100c4:	d006      	beq.n	80100d4 <__gethex+0x320>
 80100c6:	f8da 3000 	ldr.w	r3, [sl]
 80100ca:	ea49 0903 	orr.w	r9, r9, r3
 80100ce:	f019 0f01 	tst.w	r9, #1
 80100d2:	d10e      	bne.n	80100f2 <__gethex+0x33e>
 80100d4:	f045 0510 	orr.w	r5, r5, #16
 80100d8:	e032      	b.n	8010140 <__gethex+0x38c>
 80100da:	f04f 0901 	mov.w	r9, #1
 80100de:	e7d1      	b.n	8010084 <__gethex+0x2d0>
 80100e0:	2501      	movs	r5, #1
 80100e2:	e7e2      	b.n	80100aa <__gethex+0x2f6>
 80100e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100e6:	f1c3 0301 	rsb	r3, r3, #1
 80100ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d0f0      	beq.n	80100d4 <__gethex+0x320>
 80100f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80100f6:	f104 0314 	add.w	r3, r4, #20
 80100fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80100fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010102:	f04f 0c00 	mov.w	ip, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f853 2b04 	ldr.w	r2, [r3], #4
 801010c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010110:	d01b      	beq.n	801014a <__gethex+0x396>
 8010112:	3201      	adds	r2, #1
 8010114:	6002      	str	r2, [r0, #0]
 8010116:	2d02      	cmp	r5, #2
 8010118:	f104 0314 	add.w	r3, r4, #20
 801011c:	d13c      	bne.n	8010198 <__gethex+0x3e4>
 801011e:	f8d8 2000 	ldr.w	r2, [r8]
 8010122:	3a01      	subs	r2, #1
 8010124:	42b2      	cmp	r2, r6
 8010126:	d109      	bne.n	801013c <__gethex+0x388>
 8010128:	1171      	asrs	r1, r6, #5
 801012a:	2201      	movs	r2, #1
 801012c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010130:	f006 061f 	and.w	r6, r6, #31
 8010134:	fa02 f606 	lsl.w	r6, r2, r6
 8010138:	421e      	tst	r6, r3
 801013a:	d13a      	bne.n	80101b2 <__gethex+0x3fe>
 801013c:	f045 0520 	orr.w	r5, r5, #32
 8010140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010142:	601c      	str	r4, [r3, #0]
 8010144:	9b02      	ldr	r3, [sp, #8]
 8010146:	601f      	str	r7, [r3, #0]
 8010148:	e6b0      	b.n	800feac <__gethex+0xf8>
 801014a:	4299      	cmp	r1, r3
 801014c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010150:	d8d9      	bhi.n	8010106 <__gethex+0x352>
 8010152:	68a3      	ldr	r3, [r4, #8]
 8010154:	459b      	cmp	fp, r3
 8010156:	db17      	blt.n	8010188 <__gethex+0x3d4>
 8010158:	6861      	ldr	r1, [r4, #4]
 801015a:	9801      	ldr	r0, [sp, #4]
 801015c:	3101      	adds	r1, #1
 801015e:	f7fd fe53 	bl	800de08 <_Balloc>
 8010162:	4681      	mov	r9, r0
 8010164:	b918      	cbnz	r0, 801016e <__gethex+0x3ba>
 8010166:	4b1a      	ldr	r3, [pc, #104]	@ (80101d0 <__gethex+0x41c>)
 8010168:	4602      	mov	r2, r0
 801016a:	2184      	movs	r1, #132	@ 0x84
 801016c:	e6c5      	b.n	800fefa <__gethex+0x146>
 801016e:	6922      	ldr	r2, [r4, #16]
 8010170:	3202      	adds	r2, #2
 8010172:	f104 010c 	add.w	r1, r4, #12
 8010176:	0092      	lsls	r2, r2, #2
 8010178:	300c      	adds	r0, #12
 801017a:	f7fc fed6 	bl	800cf2a <memcpy>
 801017e:	4621      	mov	r1, r4
 8010180:	9801      	ldr	r0, [sp, #4]
 8010182:	f7fd fe81 	bl	800de88 <_Bfree>
 8010186:	464c      	mov	r4, r9
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010190:	6122      	str	r2, [r4, #16]
 8010192:	2201      	movs	r2, #1
 8010194:	615a      	str	r2, [r3, #20]
 8010196:	e7be      	b.n	8010116 <__gethex+0x362>
 8010198:	6922      	ldr	r2, [r4, #16]
 801019a:	455a      	cmp	r2, fp
 801019c:	dd0b      	ble.n	80101b6 <__gethex+0x402>
 801019e:	2101      	movs	r1, #1
 80101a0:	4620      	mov	r0, r4
 80101a2:	f7ff fd9f 	bl	800fce4 <rshift>
 80101a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80101aa:	3701      	adds	r7, #1
 80101ac:	42bb      	cmp	r3, r7
 80101ae:	f6ff aee0 	blt.w	800ff72 <__gethex+0x1be>
 80101b2:	2501      	movs	r5, #1
 80101b4:	e7c2      	b.n	801013c <__gethex+0x388>
 80101b6:	f016 061f 	ands.w	r6, r6, #31
 80101ba:	d0fa      	beq.n	80101b2 <__gethex+0x3fe>
 80101bc:	4453      	add	r3, sl
 80101be:	f1c6 0620 	rsb	r6, r6, #32
 80101c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80101c6:	f7fd ff11 	bl	800dfec <__hi0bits>
 80101ca:	42b0      	cmp	r0, r6
 80101cc:	dbe7      	blt.n	801019e <__gethex+0x3ea>
 80101ce:	e7f0      	b.n	80101b2 <__gethex+0x3fe>
 80101d0:	0801078d 	.word	0x0801078d

080101d4 <L_shift>:
 80101d4:	f1c2 0208 	rsb	r2, r2, #8
 80101d8:	0092      	lsls	r2, r2, #2
 80101da:	b570      	push	{r4, r5, r6, lr}
 80101dc:	f1c2 0620 	rsb	r6, r2, #32
 80101e0:	6843      	ldr	r3, [r0, #4]
 80101e2:	6804      	ldr	r4, [r0, #0]
 80101e4:	fa03 f506 	lsl.w	r5, r3, r6
 80101e8:	432c      	orrs	r4, r5
 80101ea:	40d3      	lsrs	r3, r2
 80101ec:	6004      	str	r4, [r0, #0]
 80101ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80101f2:	4288      	cmp	r0, r1
 80101f4:	d3f4      	bcc.n	80101e0 <L_shift+0xc>
 80101f6:	bd70      	pop	{r4, r5, r6, pc}

080101f8 <__match>:
 80101f8:	b530      	push	{r4, r5, lr}
 80101fa:	6803      	ldr	r3, [r0, #0]
 80101fc:	3301      	adds	r3, #1
 80101fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010202:	b914      	cbnz	r4, 801020a <__match+0x12>
 8010204:	6003      	str	r3, [r0, #0]
 8010206:	2001      	movs	r0, #1
 8010208:	bd30      	pop	{r4, r5, pc}
 801020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801020e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010212:	2d19      	cmp	r5, #25
 8010214:	bf98      	it	ls
 8010216:	3220      	addls	r2, #32
 8010218:	42a2      	cmp	r2, r4
 801021a:	d0f0      	beq.n	80101fe <__match+0x6>
 801021c:	2000      	movs	r0, #0
 801021e:	e7f3      	b.n	8010208 <__match+0x10>

08010220 <__hexnan>:
 8010220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010224:	680b      	ldr	r3, [r1, #0]
 8010226:	6801      	ldr	r1, [r0, #0]
 8010228:	115e      	asrs	r6, r3, #5
 801022a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801022e:	f013 031f 	ands.w	r3, r3, #31
 8010232:	b087      	sub	sp, #28
 8010234:	bf18      	it	ne
 8010236:	3604      	addne	r6, #4
 8010238:	2500      	movs	r5, #0
 801023a:	1f37      	subs	r7, r6, #4
 801023c:	4682      	mov	sl, r0
 801023e:	4690      	mov	r8, r2
 8010240:	9301      	str	r3, [sp, #4]
 8010242:	f846 5c04 	str.w	r5, [r6, #-4]
 8010246:	46b9      	mov	r9, r7
 8010248:	463c      	mov	r4, r7
 801024a:	9502      	str	r5, [sp, #8]
 801024c:	46ab      	mov	fp, r5
 801024e:	784a      	ldrb	r2, [r1, #1]
 8010250:	1c4b      	adds	r3, r1, #1
 8010252:	9303      	str	r3, [sp, #12]
 8010254:	b342      	cbz	r2, 80102a8 <__hexnan+0x88>
 8010256:	4610      	mov	r0, r2
 8010258:	9105      	str	r1, [sp, #20]
 801025a:	9204      	str	r2, [sp, #16]
 801025c:	f7ff fd94 	bl	800fd88 <__hexdig_fun>
 8010260:	2800      	cmp	r0, #0
 8010262:	d151      	bne.n	8010308 <__hexnan+0xe8>
 8010264:	9a04      	ldr	r2, [sp, #16]
 8010266:	9905      	ldr	r1, [sp, #20]
 8010268:	2a20      	cmp	r2, #32
 801026a:	d818      	bhi.n	801029e <__hexnan+0x7e>
 801026c:	9b02      	ldr	r3, [sp, #8]
 801026e:	459b      	cmp	fp, r3
 8010270:	dd13      	ble.n	801029a <__hexnan+0x7a>
 8010272:	454c      	cmp	r4, r9
 8010274:	d206      	bcs.n	8010284 <__hexnan+0x64>
 8010276:	2d07      	cmp	r5, #7
 8010278:	dc04      	bgt.n	8010284 <__hexnan+0x64>
 801027a:	462a      	mov	r2, r5
 801027c:	4649      	mov	r1, r9
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff ffa8 	bl	80101d4 <L_shift>
 8010284:	4544      	cmp	r4, r8
 8010286:	d952      	bls.n	801032e <__hexnan+0x10e>
 8010288:	2300      	movs	r3, #0
 801028a:	f1a4 0904 	sub.w	r9, r4, #4
 801028e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010292:	f8cd b008 	str.w	fp, [sp, #8]
 8010296:	464c      	mov	r4, r9
 8010298:	461d      	mov	r5, r3
 801029a:	9903      	ldr	r1, [sp, #12]
 801029c:	e7d7      	b.n	801024e <__hexnan+0x2e>
 801029e:	2a29      	cmp	r2, #41	@ 0x29
 80102a0:	d157      	bne.n	8010352 <__hexnan+0x132>
 80102a2:	3102      	adds	r1, #2
 80102a4:	f8ca 1000 	str.w	r1, [sl]
 80102a8:	f1bb 0f00 	cmp.w	fp, #0
 80102ac:	d051      	beq.n	8010352 <__hexnan+0x132>
 80102ae:	454c      	cmp	r4, r9
 80102b0:	d206      	bcs.n	80102c0 <__hexnan+0xa0>
 80102b2:	2d07      	cmp	r5, #7
 80102b4:	dc04      	bgt.n	80102c0 <__hexnan+0xa0>
 80102b6:	462a      	mov	r2, r5
 80102b8:	4649      	mov	r1, r9
 80102ba:	4620      	mov	r0, r4
 80102bc:	f7ff ff8a 	bl	80101d4 <L_shift>
 80102c0:	4544      	cmp	r4, r8
 80102c2:	d936      	bls.n	8010332 <__hexnan+0x112>
 80102c4:	f1a8 0204 	sub.w	r2, r8, #4
 80102c8:	4623      	mov	r3, r4
 80102ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80102ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80102d2:	429f      	cmp	r7, r3
 80102d4:	d2f9      	bcs.n	80102ca <__hexnan+0xaa>
 80102d6:	1b3b      	subs	r3, r7, r4
 80102d8:	f023 0303 	bic.w	r3, r3, #3
 80102dc:	3304      	adds	r3, #4
 80102de:	3401      	adds	r4, #1
 80102e0:	3e03      	subs	r6, #3
 80102e2:	42b4      	cmp	r4, r6
 80102e4:	bf88      	it	hi
 80102e6:	2304      	movhi	r3, #4
 80102e8:	4443      	add	r3, r8
 80102ea:	2200      	movs	r2, #0
 80102ec:	f843 2b04 	str.w	r2, [r3], #4
 80102f0:	429f      	cmp	r7, r3
 80102f2:	d2fb      	bcs.n	80102ec <__hexnan+0xcc>
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	b91b      	cbnz	r3, 8010300 <__hexnan+0xe0>
 80102f8:	4547      	cmp	r7, r8
 80102fa:	d128      	bne.n	801034e <__hexnan+0x12e>
 80102fc:	2301      	movs	r3, #1
 80102fe:	603b      	str	r3, [r7, #0]
 8010300:	2005      	movs	r0, #5
 8010302:	b007      	add	sp, #28
 8010304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010308:	3501      	adds	r5, #1
 801030a:	2d08      	cmp	r5, #8
 801030c:	f10b 0b01 	add.w	fp, fp, #1
 8010310:	dd06      	ble.n	8010320 <__hexnan+0x100>
 8010312:	4544      	cmp	r4, r8
 8010314:	d9c1      	bls.n	801029a <__hexnan+0x7a>
 8010316:	2300      	movs	r3, #0
 8010318:	f844 3c04 	str.w	r3, [r4, #-4]
 801031c:	2501      	movs	r5, #1
 801031e:	3c04      	subs	r4, #4
 8010320:	6822      	ldr	r2, [r4, #0]
 8010322:	f000 000f 	and.w	r0, r0, #15
 8010326:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801032a:	6020      	str	r0, [r4, #0]
 801032c:	e7b5      	b.n	801029a <__hexnan+0x7a>
 801032e:	2508      	movs	r5, #8
 8010330:	e7b3      	b.n	801029a <__hexnan+0x7a>
 8010332:	9b01      	ldr	r3, [sp, #4]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d0dd      	beq.n	80102f4 <__hexnan+0xd4>
 8010338:	f1c3 0320 	rsb	r3, r3, #32
 801033c:	f04f 32ff 	mov.w	r2, #4294967295
 8010340:	40da      	lsrs	r2, r3
 8010342:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010346:	4013      	ands	r3, r2
 8010348:	f846 3c04 	str.w	r3, [r6, #-4]
 801034c:	e7d2      	b.n	80102f4 <__hexnan+0xd4>
 801034e:	3f04      	subs	r7, #4
 8010350:	e7d0      	b.n	80102f4 <__hexnan+0xd4>
 8010352:	2004      	movs	r0, #4
 8010354:	e7d5      	b.n	8010302 <__hexnan+0xe2>

08010356 <__ascii_mbtowc>:
 8010356:	b082      	sub	sp, #8
 8010358:	b901      	cbnz	r1, 801035c <__ascii_mbtowc+0x6>
 801035a:	a901      	add	r1, sp, #4
 801035c:	b142      	cbz	r2, 8010370 <__ascii_mbtowc+0x1a>
 801035e:	b14b      	cbz	r3, 8010374 <__ascii_mbtowc+0x1e>
 8010360:	7813      	ldrb	r3, [r2, #0]
 8010362:	600b      	str	r3, [r1, #0]
 8010364:	7812      	ldrb	r2, [r2, #0]
 8010366:	1e10      	subs	r0, r2, #0
 8010368:	bf18      	it	ne
 801036a:	2001      	movne	r0, #1
 801036c:	b002      	add	sp, #8
 801036e:	4770      	bx	lr
 8010370:	4610      	mov	r0, r2
 8010372:	e7fb      	b.n	801036c <__ascii_mbtowc+0x16>
 8010374:	f06f 0001 	mvn.w	r0, #1
 8010378:	e7f8      	b.n	801036c <__ascii_mbtowc+0x16>

0801037a <_realloc_r>:
 801037a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037e:	4607      	mov	r7, r0
 8010380:	4614      	mov	r4, r2
 8010382:	460d      	mov	r5, r1
 8010384:	b921      	cbnz	r1, 8010390 <_realloc_r+0x16>
 8010386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801038a:	4611      	mov	r1, r2
 801038c:	f7fd bcb0 	b.w	800dcf0 <_malloc_r>
 8010390:	b92a      	cbnz	r2, 801039e <_realloc_r+0x24>
 8010392:	f7fd fc39 	bl	800dc08 <_free_r>
 8010396:	4625      	mov	r5, r4
 8010398:	4628      	mov	r0, r5
 801039a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801039e:	f000 f840 	bl	8010422 <_malloc_usable_size_r>
 80103a2:	4284      	cmp	r4, r0
 80103a4:	4606      	mov	r6, r0
 80103a6:	d802      	bhi.n	80103ae <_realloc_r+0x34>
 80103a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103ac:	d8f4      	bhi.n	8010398 <_realloc_r+0x1e>
 80103ae:	4621      	mov	r1, r4
 80103b0:	4638      	mov	r0, r7
 80103b2:	f7fd fc9d 	bl	800dcf0 <_malloc_r>
 80103b6:	4680      	mov	r8, r0
 80103b8:	b908      	cbnz	r0, 80103be <_realloc_r+0x44>
 80103ba:	4645      	mov	r5, r8
 80103bc:	e7ec      	b.n	8010398 <_realloc_r+0x1e>
 80103be:	42b4      	cmp	r4, r6
 80103c0:	4622      	mov	r2, r4
 80103c2:	4629      	mov	r1, r5
 80103c4:	bf28      	it	cs
 80103c6:	4632      	movcs	r2, r6
 80103c8:	f7fc fdaf 	bl	800cf2a <memcpy>
 80103cc:	4629      	mov	r1, r5
 80103ce:	4638      	mov	r0, r7
 80103d0:	f7fd fc1a 	bl	800dc08 <_free_r>
 80103d4:	e7f1      	b.n	80103ba <_realloc_r+0x40>

080103d6 <__ascii_wctomb>:
 80103d6:	4603      	mov	r3, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	b141      	cbz	r1, 80103ee <__ascii_wctomb+0x18>
 80103dc:	2aff      	cmp	r2, #255	@ 0xff
 80103de:	d904      	bls.n	80103ea <__ascii_wctomb+0x14>
 80103e0:	228a      	movs	r2, #138	@ 0x8a
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
 80103e8:	4770      	bx	lr
 80103ea:	700a      	strb	r2, [r1, #0]
 80103ec:	2001      	movs	r0, #1
 80103ee:	4770      	bx	lr

080103f0 <fiprintf>:
 80103f0:	b40e      	push	{r1, r2, r3}
 80103f2:	b503      	push	{r0, r1, lr}
 80103f4:	4601      	mov	r1, r0
 80103f6:	ab03      	add	r3, sp, #12
 80103f8:	4805      	ldr	r0, [pc, #20]	@ (8010410 <fiprintf+0x20>)
 80103fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80103fe:	6800      	ldr	r0, [r0, #0]
 8010400:	9301      	str	r3, [sp, #4]
 8010402:	f7ff f9b1 	bl	800f768 <_vfiprintf_r>
 8010406:	b002      	add	sp, #8
 8010408:	f85d eb04 	ldr.w	lr, [sp], #4
 801040c:	b003      	add	sp, #12
 801040e:	4770      	bx	lr
 8010410:	20000114 	.word	0x20000114

08010414 <abort>:
 8010414:	b508      	push	{r3, lr}
 8010416:	2006      	movs	r0, #6
 8010418:	f000 f834 	bl	8010484 <raise>
 801041c:	2001      	movs	r0, #1
 801041e:	f7f1 f95b 	bl	80016d8 <_exit>

08010422 <_malloc_usable_size_r>:
 8010422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010426:	1f18      	subs	r0, r3, #4
 8010428:	2b00      	cmp	r3, #0
 801042a:	bfbc      	itt	lt
 801042c:	580b      	ldrlt	r3, [r1, r0]
 801042e:	18c0      	addlt	r0, r0, r3
 8010430:	4770      	bx	lr

08010432 <_raise_r>:
 8010432:	291f      	cmp	r1, #31
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	4605      	mov	r5, r0
 8010438:	460c      	mov	r4, r1
 801043a:	d904      	bls.n	8010446 <_raise_r+0x14>
 801043c:	2316      	movs	r3, #22
 801043e:	6003      	str	r3, [r0, #0]
 8010440:	f04f 30ff 	mov.w	r0, #4294967295
 8010444:	bd38      	pop	{r3, r4, r5, pc}
 8010446:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010448:	b112      	cbz	r2, 8010450 <_raise_r+0x1e>
 801044a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801044e:	b94b      	cbnz	r3, 8010464 <_raise_r+0x32>
 8010450:	4628      	mov	r0, r5
 8010452:	f000 f831 	bl	80104b8 <_getpid_r>
 8010456:	4622      	mov	r2, r4
 8010458:	4601      	mov	r1, r0
 801045a:	4628      	mov	r0, r5
 801045c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010460:	f000 b818 	b.w	8010494 <_kill_r>
 8010464:	2b01      	cmp	r3, #1
 8010466:	d00a      	beq.n	801047e <_raise_r+0x4c>
 8010468:	1c59      	adds	r1, r3, #1
 801046a:	d103      	bne.n	8010474 <_raise_r+0x42>
 801046c:	2316      	movs	r3, #22
 801046e:	6003      	str	r3, [r0, #0]
 8010470:	2001      	movs	r0, #1
 8010472:	e7e7      	b.n	8010444 <_raise_r+0x12>
 8010474:	2100      	movs	r1, #0
 8010476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801047a:	4620      	mov	r0, r4
 801047c:	4798      	blx	r3
 801047e:	2000      	movs	r0, #0
 8010480:	e7e0      	b.n	8010444 <_raise_r+0x12>
	...

08010484 <raise>:
 8010484:	4b02      	ldr	r3, [pc, #8]	@ (8010490 <raise+0xc>)
 8010486:	4601      	mov	r1, r0
 8010488:	6818      	ldr	r0, [r3, #0]
 801048a:	f7ff bfd2 	b.w	8010432 <_raise_r>
 801048e:	bf00      	nop
 8010490:	20000114 	.word	0x20000114

08010494 <_kill_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4d07      	ldr	r5, [pc, #28]	@ (80104b4 <_kill_r+0x20>)
 8010498:	2300      	movs	r3, #0
 801049a:	4604      	mov	r4, r0
 801049c:	4608      	mov	r0, r1
 801049e:	4611      	mov	r1, r2
 80104a0:	602b      	str	r3, [r5, #0]
 80104a2:	f7f1 f909 	bl	80016b8 <_kill>
 80104a6:	1c43      	adds	r3, r0, #1
 80104a8:	d102      	bne.n	80104b0 <_kill_r+0x1c>
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	b103      	cbz	r3, 80104b0 <_kill_r+0x1c>
 80104ae:	6023      	str	r3, [r4, #0]
 80104b0:	bd38      	pop	{r3, r4, r5, pc}
 80104b2:	bf00      	nop
 80104b4:	20002238 	.word	0x20002238

080104b8 <_getpid_r>:
 80104b8:	f7f1 b8f6 	b.w	80016a8 <_getpid>

080104bc <_sbrk>:
 80104bc:	4a04      	ldr	r2, [pc, #16]	@ (80104d0 <_sbrk+0x14>)
 80104be:	6811      	ldr	r1, [r2, #0]
 80104c0:	4603      	mov	r3, r0
 80104c2:	b909      	cbnz	r1, 80104c8 <_sbrk+0xc>
 80104c4:	4903      	ldr	r1, [pc, #12]	@ (80104d4 <_sbrk+0x18>)
 80104c6:	6011      	str	r1, [r2, #0]
 80104c8:	6810      	ldr	r0, [r2, #0]
 80104ca:	4403      	add	r3, r0
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	4770      	bx	lr
 80104d0:	20002248 	.word	0x20002248
 80104d4:	20002250 	.word	0x20002250

080104d8 <_init>:
 80104d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104da:	bf00      	nop
 80104dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104de:	bc08      	pop	{r3}
 80104e0:	469e      	mov	lr, r3
 80104e2:	4770      	bx	lr

080104e4 <_fini>:
 80104e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104e6:	bf00      	nop
 80104e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ea:	bc08      	pop	{r3}
 80104ec:	469e      	mov	lr, r3
 80104ee:	4770      	bx	lr
