
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b50  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000085c  08012ce0  08012ce0  00013ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801353c  0801353c  000152d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801353c  0801353c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013544  08013544  000152d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013544  08013544  00014544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013548  08013548  00014548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0801354c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000152d0  2**0
                  CONTENTS
 10 .bss          00002150  200002d0  200002d0  000152d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20002420  20002420  000152d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000152d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f70a  00000000  00000000  00015300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004170  00000000  00000000  00034a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  00038b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159a  00000000  00000000  0003a738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002716d  00000000  00000000  0003bcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020fe2  00000000  00000000  00062e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3688  00000000  00000000  00083e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001674a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d78  00000000  00000000  001674ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  00170264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012cc8 	.word	0x08012cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	08012cc8 	.word	0x08012cc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <Kalman_Init>:
Kalman_t kalmanRoll, kalmanPitch;

RCFilter roll_lowpass,pitch_lowpass;

// Kalman filtresini başlat
void Kalman_Init(Kalman_t *k) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    k->angle = 0.0f;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
    k->bias = 0.0f;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
    k->P[0][0] = 0.0f;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
    k->P[0][1] = 0.0f;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
    k->P[1][0] = 0.0f;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
    k->P[1][1] = 0.0f;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
    k->Q_angle = 0.001f;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a07      	ldr	r2, [pc, #28]	@ (8001078 <Kalman_Init+0x58>)
 800105c:	61da      	str	r2, [r3, #28]
    k->Q_bias = 0.003f;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <Kalman_Init+0x5c>)
 8001062:	621a      	str	r2, [r3, #32]
    k->R_measure = 0.03f;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <Kalman_Init+0x60>)
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	3a83126f 	.word	0x3a83126f
 800107c:	3b449ba6 	.word	0x3b449ba6
 8001080:	3cf5c28f 	.word	0x3cf5c28f

08001084 <Kalman_Update>:

// Kalman filtre güncellemesi
float Kalman_Update(Kalman_t *k, float newAngle, float newRate, float dt) {
 8001084:	b480      	push	{r7}
 8001086:	b08b      	sub	sp, #44	@ 0x2c
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	edc7 0a01 	vstr	s1, [r7, #4]
 8001094:	ed87 1a00 	vstr	s2, [r7]
    // Prediction
    k->rate = newRate - k->bias;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edd3 7a01 	vldr	s15, [r3, #4]
 800109e:	ed97 7a01 	vldr	s14, [r7, #4]
 80010a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	edc3 7a02 	vstr	s15, [r3, #8]
    k->angle += dt * k->rate;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80010b8:	edd7 7a00 	vldr	s15, [r7]
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edc3 7a00 	vstr	s15, [r3]

    // Update error covariance matrix
    k->P[0][0] += dt * (dt * k->P[1][1] - k->P[0][1] - k->P[1][0] + k->Q_angle);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	edd3 6a06 	vldr	s13, [r3, #24]
 80010d6:	edd7 7a00 	vldr	s15, [r7]
 80010da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80010e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80010f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80010fc:	edd7 7a00 	vldr	s15, [r7]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	edc3 7a03 	vstr	s15, [r3, #12]
    k->P[0][1] -= dt * k->P[1][1];
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	ed93 7a04 	vldr	s14, [r3, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	edd3 6a06 	vldr	s13, [r3, #24]
 800111a:	edd7 7a00 	vldr	s15, [r7]
 800111e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	edc3 7a04 	vstr	s15, [r3, #16]
    k->P[1][0] -= dt * k->P[1][1];
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	edd3 6a06 	vldr	s13, [r3, #24]
 8001138:	edd7 7a00 	vldr	s15, [r7]
 800113c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	edc3 7a05 	vstr	s15, [r3, #20]
    k->P[1][1] += k->Q_bias * dt;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	edd3 6a08 	vldr	s13, [r3, #32]
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edc3 7a06 	vstr	s15, [r3, #24]

    // Innovation
    float y = newAngle - k->angle;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float S = k->P[0][0] + k->R_measure;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800118a:	edc7 7a08 	vstr	s15, [r7, #32]
    float K[2];
    K[0] = k->P[0][0] / S;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	edd3 6a03 	vldr	s13, [r3, #12]
 8001194:	ed97 7a08 	vldr	s14, [r7, #32]
 8001198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119c:	edc7 7a04 	vstr	s15, [r7, #16]
    K[1] = k->P[1][0] / S;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 6a05 	vldr	s13, [r3, #20]
 80011a6:	ed97 7a08 	vldr	s14, [r7, #32]
 80011aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ae:	edc7 7a05 	vstr	s15, [r7, #20]

    // Update estimates
    k->angle += K[0] * y;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	edd7 6a04 	vldr	s13, [r7, #16]
 80011bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	edc3 7a00 	vstr	s15, [r3]
    k->bias += K[1] * y;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80011d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80011d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80011dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update error covariance matrix
    float P00_temp = k->P[0][0];
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	61fb      	str	r3, [r7, #28]
    float P01_temp = k->P[0][1];
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	61bb      	str	r3, [r7, #24]

    k->P[0][0] -= K[0] * P00_temp;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80011fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001200:	edd7 7a07 	vldr	s15, [r7, #28]
 8001204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	edc3 7a03 	vstr	s15, [r3, #12]
    k->P[0][1] -= K[0] * P01_temp;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	ed93 7a04 	vldr	s14, [r3, #16]
 8001218:	edd7 6a04 	vldr	s13, [r7, #16]
 800121c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	edc3 7a04 	vstr	s15, [r3, #16]
    k->P[1][0] -= K[1] * P00_temp;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	ed93 7a05 	vldr	s14, [r3, #20]
 8001234:	edd7 6a05 	vldr	s13, [r7, #20]
 8001238:	edd7 7a07 	vldr	s15, [r7, #28]
 800123c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	edc3 7a05 	vstr	s15, [r3, #20]
    k->P[1][1] -= K[1] * P01_temp;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001250:	edd7 6a05 	vldr	s13, [r7, #20]
 8001254:	edd7 7a06 	vldr	s15, [r7, #24]
 8001258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edc3 7a06 	vstr	s15, [r3, #24]

    return k->angle;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
}
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	372c      	adds	r7, #44	@ 0x2c
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <IMU_Update>:

// Her döngüde sensör verilerini oku ve açıları hesapla
void IMU_Update(float accX, float accY, float accZ, float gyroX, float gyroY, float gyroZ,
                float* roll, float* pitch, float* yaw) {
 800127c:	b580      	push	{r7, lr}
 800127e:	ed2d 8b02 	vpush	{d8}
 8001282:	b08c      	sub	sp, #48	@ 0x30
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800128a:	edc7 0a08 	vstr	s1, [r7, #32]
 800128e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001292:	edc7 1a06 	vstr	s3, [r7, #24]
 8001296:	ed87 2a05 	vstr	s4, [r7, #20]
 800129a:	edc7 2a04 	vstr	s5, [r7, #16]
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
    // Accelerometer'dan açı tahmini (trigonometrik yöntem)
    float accRoll  = atan2f(accY, accZ) * RAD_TO_DEG;
 80012a4:	edd7 0a07 	vldr	s1, [r7, #28]
 80012a8:	ed97 0a08 	vldr	s0, [r7, #32]
 80012ac:	f011 fb5e 	bl	801296c <atan2f>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001364 <IMU_Update+0xe8>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float accPitch = atan2f(-accX, sqrtf(accY * accY + accZ * accZ)) * RAD_TO_DEG;
 80012c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012c4:	eeb1 8a67 	vneg.f32	s16, s15
 80012c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80012d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	eeb0 0a67 	vmov.f32	s0, s15
 80012e0:	f011 fb46 	bl	8012970 <sqrtf>
 80012e4:	eef0 7a40 	vmov.f32	s15, s0
 80012e8:	eef0 0a67 	vmov.f32	s1, s15
 80012ec:	eeb0 0a48 	vmov.f32	s0, s16
 80012f0:	f011 fb3c 	bl	801296c <atan2f>
 80012f4:	eef0 7a40 	vmov.f32	s15, s0
 80012f8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001364 <IMU_Update+0xe8>
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Kalman filtresi ile açı hesaplama
    *roll  = Kalman_Update(&kalmanRoll, accRoll,  gyroX, DT);
 8001304:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8001368 <IMU_Update+0xec>
 8001308:	edd7 0a06 	vldr	s1, [r7, #24]
 800130c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001310:	4816      	ldr	r0, [pc, #88]	@ (800136c <IMU_Update+0xf0>)
 8001312:	f7ff feb7 	bl	8001084 <Kalman_Update>
 8001316:	eef0 7a40 	vmov.f32	s15, s0
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	edc3 7a00 	vstr	s15, [r3]
    *pitch = Kalman_Update(&kalmanPitch, accPitch, gyroY, DT);
 8001320:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8001368 <IMU_Update+0xec>
 8001324:	edd7 0a05 	vldr	s1, [r7, #20]
 8001328:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800132c:	4810      	ldr	r0, [pc, #64]	@ (8001370 <IMU_Update+0xf4>)
 800132e:	f7ff fea9 	bl	8001084 <Kalman_Update>
 8001332:	eef0 7a40 	vmov.f32	s15, s0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	edc3 7a00 	vstr	s15, [r3]

    // Yaw sadece jiroskoptan entegre edilir (drift olabilir)
    *yaw += gyroZ * DT;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	ed93 7a00 	vldr	s14, [r3]
 8001342:	edd7 7a04 	vldr	s15, [r7, #16]
 8001346:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001368 <IMU_Update+0xec>
 800134a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800134e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a00 	vstr	s15, [r3]
}
 8001358:	bf00      	nop
 800135a:	3730      	adds	r7, #48	@ 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	ecbd 8b02 	vpop	{d8}
 8001362:	bd80      	pop	{r7, pc}
 8001364:	42652ee1 	.word	0x42652ee1
 8001368:	3c23d70a 	.word	0x3c23d70a
 800136c:	20000668 	.word	0x20000668
 8001370:	20000690 	.word	0x20000690
 8001374:	00000000 	.word	0x00000000

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fe89 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 faa7 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 fbcb 	bl	8001b20 <MX_GPIO_Init>
  MX_I2C1_Init();
 800138a:	f000 fb0d 	bl	80019a8 <MX_I2C1_Init>
  MX_TIM6_Init();
 800138e:	f000 fb93 	bl	8001ab8 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001392:	f00c f9fb 	bl	800d78c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001396:	f000 fb35 	bl	8001a04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*!< Initialise bmi160 sensor >!*/
  if ( bmi160_interface_init(&bmi160) != BMI160_OK)
 800139a:	48bd      	ldr	r0, [pc, #756]	@ (8001690 <main+0x318>)
 800139c:	f009 fe04 	bl	800afa8 <bmi160_interface_init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <main+0x38>
  {
	  printf("BMI160 not initialised !\n");
 80013a6:	48bb      	ldr	r0, [pc, #748]	@ (8001694 <main+0x31c>)
 80013a8:	f00d fe98 	bl	800f0dc <puts>
	  Error_Handler();
 80013ac:	f000 fc26 	bl	8001bfc <Error_Handler>
  }

  /*!< Calibration process for bmi160 sensor >!*/
  if ( bmi160_calibration(&bmi160,3000U) != BMI160_OK)
 80013b0:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80013b4:	48b6      	ldr	r0, [pc, #728]	@ (8001690 <main+0x318>)
 80013b6:	f009 feef 	bl	800b198 <bmi160_calibration>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <main+0x52>
  {
	  printf("BMI160 not initialised !\n");
 80013c0:	48b4      	ldr	r0, [pc, #720]	@ (8001694 <main+0x31c>)
 80013c2:	f00d fe8b 	bl	800f0dc <puts>
	  Error_Handler();
 80013c6:	f000 fc19 	bl	8001bfc <Error_Handler>
  }

  /*!< Initialise bmp388 sensor >!*/
  if ( bmp388_interface_init(&bmp388, &bmp388_intf) != BMP3_OK )
 80013ca:	49b3      	ldr	r1, [pc, #716]	@ (8001698 <main+0x320>)
 80013cc:	48b3      	ldr	r0, [pc, #716]	@ (800169c <main+0x324>)
 80013ce:	f00b fe71 	bl	800d0b4 <bmp388_interface_init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <main+0x64>
  {
	  Error_Handler();
 80013d8:	f000 fc10 	bl	8001bfc <Error_Handler>
  }

  /*!< Calibration process for bmp388 sensor >!*/
  if ( bmp388_calibration(&bmp388, 1000U) != BMP3_OK )
 80013dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013e0:	48ae      	ldr	r0, [pc, #696]	@ (800169c <main+0x324>)
 80013e2:	f00b ff61 	bl	800d2a8 <bmp388_calibration>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <main+0x78>
  {
	  Error_Handler();
 80013ec:	f000 fc06 	bl	8001bfc <Error_Handler>
  }

  /*!< Initialise for IMU Kalman Filter  >!*/
  Kalman_Init(&kalmanRoll);
 80013f0:	48ab      	ldr	r0, [pc, #684]	@ (80016a0 <main+0x328>)
 80013f2:	f7ff fe15 	bl	8001020 <Kalman_Init>
  Kalman_Init(&kalmanPitch);
 80013f6:	48ab      	ldr	r0, [pc, #684]	@ (80016a4 <main+0x32c>)
 80013f8:	f7ff fe12 	bl	8001020 <Kalman_Init>

  /*!< Low-pass filter for IMU raw gyro and acc data  >!*/
  RCFilter_Init(&roll_lowpass, 5.0f,0.02f);
 80013fc:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 80016a8 <main+0x330>
 8001400:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001404:	48a9      	ldr	r0, [pc, #676]	@ (80016ac <main+0x334>)
 8001406:	f000 fe07 	bl	8002018 <RCFilter_Init>
  RCFilter_Init(&pitch_lowpass, 5.0f,0.02f);
 800140a:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 80016a8 <main+0x330>
 800140e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001412:	48a7      	ldr	r0, [pc, #668]	@ (80016b0 <main+0x338>)
 8001414:	f000 fe00 	bl	8002018 <RCFilter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*!< Get calibrated data for bmi160 sensor >!*/
	  if ( bmi160_get_acc_gyro(&bmi160) != BMI160_OK)
 8001418:	489d      	ldr	r0, [pc, #628]	@ (8001690 <main+0x318>)
 800141a:	f00a f849 	bl	800b4b0 <bmi160_get_acc_gyro>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d004      	beq.n	800142e <main+0xb6>
	  {
		  printf("BMI160 isnt get data !\n");
 8001424:	48a3      	ldr	r0, [pc, #652]	@ (80016b4 <main+0x33c>)
 8001426:	f00d fe59 	bl	800f0dc <puts>
		  Error_Handler();
 800142a:	f000 fbe7 	bl	8001bfc <Error_Handler>
	  }

	  /*!< Get calibrated data for bmp388 sensor >!*/
	  if ( bmp388_get_altitude(&bmp388, ALPHA) != BMP3_OK )
 800142e:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8001680 <main+0x308>
 8001432:	489a      	ldr	r0, [pc, #616]	@ (800169c <main+0x324>)
 8001434:	f00b ffd4 	bl	800d3e0 <bmp388_get_altitude>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <main+0xd0>
	  {
		  printf("BMP388 isnt get data !\n");
 800143e:	489e      	ldr	r0, [pc, #632]	@ (80016b8 <main+0x340>)
 8001440:	f00d fe4c 	bl	800f0dc <puts>
		  Error_Handler();
 8001444:	f000 fbda 	bl	8001bfc <Error_Handler>
	  }

	  /*!< Convert int16_t to float data types >!*/
	  ax_f = bmi160.accel_data.xd;
 8001448:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <main+0x318>)
 800144a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fbc9 	bl	8000be8 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	4a98      	ldr	r2, [pc, #608]	@ (80016bc <main+0x344>)
 800145a:	6013      	str	r3, [r2, #0]
	  ay_f = bmi160.accel_data.yd;
 800145c:	4b8c      	ldr	r3, [pc, #560]	@ (8001690 <main+0x318>)
 800145e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001462:	4610      	mov	r0, r2
 8001464:	4619      	mov	r1, r3
 8001466:	f7ff fbbf 	bl	8000be8 <__aeabi_d2f>
 800146a:	4603      	mov	r3, r0
 800146c:	4a94      	ldr	r2, [pc, #592]	@ (80016c0 <main+0x348>)
 800146e:	6013      	str	r3, [r2, #0]
	  az_f = bmi160.accel_data.zd;
 8001470:	4b87      	ldr	r3, [pc, #540]	@ (8001690 <main+0x318>)
 8001472:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff fbb5 	bl	8000be8 <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	4a90      	ldr	r2, [pc, #576]	@ (80016c4 <main+0x34c>)
 8001482:	6013      	str	r3, [r2, #0]
	  gx_f = bmi160.gyro_data.xd;
 8001484:	4b82      	ldr	r3, [pc, #520]	@ (8001690 <main+0x318>)
 8001486:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff fbab 	bl	8000be8 <__aeabi_d2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4a8c      	ldr	r2, [pc, #560]	@ (80016c8 <main+0x350>)
 8001496:	6013      	str	r3, [r2, #0]
	  gy_f = bmi160.gyro_data.yd;
 8001498:	4b7d      	ldr	r3, [pc, #500]	@ (8001690 <main+0x318>)
 800149a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fba1 	bl	8000be8 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a88      	ldr	r2, [pc, #544]	@ (80016cc <main+0x354>)
 80014aa:	6013      	str	r3, [r2, #0]
	  gz_f = bmi160.gyro_data.zd;
 80014ac:	4b78      	ldr	r3, [pc, #480]	@ (8001690 <main+0x318>)
 80014ae:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	f7ff fb97 	bl	8000be8 <__aeabi_d2f>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a84      	ldr	r2, [pc, #528]	@ (80016d0 <main+0x358>)
 80014be:	6013      	str	r3, [r2, #0]

	  /*!< First-order simple low-pass low-pass filter applied to 3-axis accelerometer data >!*/
	  filtered_ax_f = ALPHA * filtered_ax_f + (1 - ALPHA) * (bmi160.accel_data.xd);
 80014c0:	4b84      	ldr	r3, [pc, #528]	@ (80016d4 <main+0x35c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f83f 	bl	8000548 <__aeabi_f2d>
 80014ca:	a36d      	add	r3, pc, #436	@ (adr r3, 8001680 <main+0x308>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f892 	bl	80005f8 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4614      	mov	r4, r2
 80014da:	461d      	mov	r5, r3
 80014dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001690 <main+0x318>)
 80014de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014e2:	a369      	add	r3, pc, #420	@ (adr r3, 8001688 <main+0x310>)
 80014e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e8:	f7ff f886 	bl	80005f8 <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4620      	mov	r0, r4
 80014f2:	4629      	mov	r1, r5
 80014f4:	f7fe feca 	bl	800028c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb72 	bl	8000be8 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4a73      	ldr	r2, [pc, #460]	@ (80016d4 <main+0x35c>)
 8001508:	6013      	str	r3, [r2, #0]
	  filtered_ay_f = ALPHA * filtered_ay_f + (1 - ALPHA) * (bmi160.accel_data.yd);
 800150a:	4b73      	ldr	r3, [pc, #460]	@ (80016d8 <main+0x360>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f81a 	bl	8000548 <__aeabi_f2d>
 8001514:	a35a      	add	r3, pc, #360	@ (adr r3, 8001680 <main+0x308>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f86d 	bl	80005f8 <__aeabi_dmul>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4614      	mov	r4, r2
 8001524:	461d      	mov	r5, r3
 8001526:	4b5a      	ldr	r3, [pc, #360]	@ (8001690 <main+0x318>)
 8001528:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800152c:	a356      	add	r3, pc, #344	@ (adr r3, 8001688 <main+0x310>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff f861 	bl	80005f8 <__aeabi_dmul>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fea5 	bl	800028c <__adddf3>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb4d 	bl	8000be8 <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	4a61      	ldr	r2, [pc, #388]	@ (80016d8 <main+0x360>)
 8001552:	6013      	str	r3, [r2, #0]
	  filtered_az_f = ALPHA * filtered_az_f + (1 - ALPHA) * (bmi160.accel_data.zd);
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <main+0x364>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fff5 	bl	8000548 <__aeabi_f2d>
 800155e:	a348      	add	r3, pc, #288	@ (adr r3, 8001680 <main+0x308>)
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f7ff f848 	bl	80005f8 <__aeabi_dmul>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4614      	mov	r4, r2
 800156e:	461d      	mov	r5, r3
 8001570:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <main+0x318>)
 8001572:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001576:	a344      	add	r3, pc, #272	@ (adr r3, 8001688 <main+0x310>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7ff f83c 	bl	80005f8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7fe fe80 	bl	800028c <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fb28 	bl	8000be8 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	4a50      	ldr	r2, [pc, #320]	@ (80016dc <main+0x364>)
 800159c:	6013      	str	r3, [r2, #0]

	  /*!< First-order simple low-pass low-pass filter applied to 3-axis gyroscope data >!*/
	  filtered_gx_f = ALPHA * filtered_gx_f + (1 - ALPHA) * (bmi160.gyro_data.xd);
 800159e:	4b50      	ldr	r3, [pc, #320]	@ (80016e0 <main+0x368>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffd0 	bl	8000548 <__aeabi_f2d>
 80015a8:	a335      	add	r3, pc, #212	@ (adr r3, 8001680 <main+0x308>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f823 	bl	80005f8 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4614      	mov	r4, r2
 80015b8:	461d      	mov	r5, r3
 80015ba:	4b35      	ldr	r3, [pc, #212]	@ (8001690 <main+0x318>)
 80015bc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80015c0:	a331      	add	r3, pc, #196	@ (adr r3, 8001688 <main+0x310>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7ff f817 	bl	80005f8 <__aeabi_dmul>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4620      	mov	r0, r4
 80015d0:	4629      	mov	r1, r5
 80015d2:	f7fe fe5b 	bl	800028c <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb03 	bl	8000be8 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a3e      	ldr	r2, [pc, #248]	@ (80016e0 <main+0x368>)
 80015e6:	6013      	str	r3, [r2, #0]
	  filtered_gy_f = ALPHA * filtered_gy_f + (1 - ALPHA) * (bmi160.gyro_data.yd);
 80015e8:	4b3e      	ldr	r3, [pc, #248]	@ (80016e4 <main+0x36c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffab 	bl	8000548 <__aeabi_f2d>
 80015f2:	a323      	add	r3, pc, #140	@ (adr r3, 8001680 <main+0x308>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fffe 	bl	80005f8 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <main+0x318>)
 8001606:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800160a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001688 <main+0x310>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7fe fff2 	bl	80005f8 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7fe fe36 	bl	800028c <__adddf3>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fade 	bl	8000be8 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <main+0x36c>)
 8001630:	6013      	str	r3, [r2, #0]
	  filtered_gz_f = ALPHA * filtered_gz_f + (1 - ALPHA) * (bmi160.gyro_data.zd);
 8001632:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <main+0x370>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff86 	bl	8000548 <__aeabi_f2d>
 800163c:	a310      	add	r3, pc, #64	@ (adr r3, 8001680 <main+0x308>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffd9 	bl	80005f8 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <main+0x318>)
 8001650:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001654:	a30c      	add	r3, pc, #48	@ (adr r3, 8001688 <main+0x310>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffcd 	bl	80005f8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7fe fe11 	bl	800028c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fab9 	bl	8000be8 <__aeabi_d2f>
 8001676:	4603      	mov	r3, r0
 8001678:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <main+0x370>)
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e036      	b.n	80016ec <main+0x374>
 800167e:	bf00      	nop
 8001680:	00000000 	.word	0x00000000
 8001684:	3fef5c29 	.word	0x3fef5c29
 8001688:	00000000 	.word	0x00000000
 800168c:	3f947ae0 	.word	0x3f947ae0
 8001690:	200003d0 	.word	0x200003d0
 8001694:	08012ce0 	.word	0x08012ce0
 8001698:	20000000 	.word	0x20000000
 800169c:	20000480 	.word	0x20000480
 80016a0:	20000668 	.word	0x20000668
 80016a4:	20000690 	.word	0x20000690
 80016a8:	3ca3d70a 	.word	0x3ca3d70a
 80016ac:	200006b8 	.word	0x200006b8
 80016b0:	200006c8 	.word	0x200006c8
 80016b4:	08012cfc 	.word	0x08012cfc
 80016b8:	08012d14 	.word	0x08012d14
 80016bc:	20000638 	.word	0x20000638
 80016c0:	2000063c 	.word	0x2000063c
 80016c4:	20000640 	.word	0x20000640
 80016c8:	20000644 	.word	0x20000644
 80016cc:	20000648 	.word	0x20000648
 80016d0:	2000064c 	.word	0x2000064c
 80016d4:	20000620 	.word	0x20000620
 80016d8:	20000624 	.word	0x20000624
 80016dc:	20000628 	.word	0x20000628
 80016e0:	2000062c 	.word	0x2000062c
 80016e4:	20000630 	.word	0x20000630
 80016e8:	20000634 	.word	0x20000634

	  /*!< (°/s) data converted to (rad/s) for angular velocity >!*/
	  gx_f_rad = filtered_gx_f * DEGREES_TO_RADIAN;
 80016ec:	4b66      	ldr	r3, [pc, #408]	@ (8001888 <main+0x510>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff29 	bl	8000548 <__aeabi_f2d>
 80016f6:	a362      	add	r3, pc, #392	@ (adr r3, 8001880 <main+0x508>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe ff7c 	bl	80005f8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa6e 	bl	8000be8 <__aeabi_d2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4a5f      	ldr	r2, [pc, #380]	@ (800188c <main+0x514>)
 8001710:	6013      	str	r3, [r2, #0]
	  gy_f_rad = filtered_gy_f * DEGREES_TO_RADIAN;
 8001712:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <main+0x518>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a358      	add	r3, pc, #352	@ (adr r3, 8001880 <main+0x508>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff69 	bl	80005f8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa5b 	bl	8000be8 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	4a57      	ldr	r2, [pc, #348]	@ (8001894 <main+0x51c>)
 8001736:	6013      	str	r3, [r2, #0]
	  gz_f_rad = filtered_gz_f * DEGREES_TO_RADIAN;
 8001738:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <main+0x520>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe ff03 	bl	8000548 <__aeabi_f2d>
 8001742:	a34f      	add	r3, pc, #316	@ (adr r3, 8001880 <main+0x508>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff56 	bl	80005f8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	f7ff fa48 	bl	8000be8 <__aeabi_d2f>
 8001758:	4603      	mov	r3, r0
 800175a:	4a50      	ldr	r2, [pc, #320]	@ (800189c <main+0x524>)
 800175c:	6013      	str	r3, [r2, #0]

	  /*!< IMU kalman >!*/
	  IMU_Update(filtered_ax_f/9.81f, filtered_ay_f/9.81f, filtered_az_f/9.81f,\
 800175e:	4b50      	ldr	r3, [pc, #320]	@ (80018a0 <main+0x528>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80018a4 <main+0x52c>
 8001768:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800176c:	4b4e      	ldr	r3, [pc, #312]	@ (80018a8 <main+0x530>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ed9f 6a4c 	vldr	s12, [pc, #304]	@ 80018a4 <main+0x52c>
 8001776:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800177a:	4b4c      	ldr	r3, [pc, #304]	@ (80018ac <main+0x534>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eddf 5a48 	vldr	s11, [pc, #288]	@ 80018a4 <main+0x52c>
 8001784:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001788:	4b40      	ldr	r3, [pc, #256]	@ (800188c <main+0x514>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <main+0x51c>)
 8001790:	edd3 5a00 	vldr	s11, [r3]
 8001794:	4b41      	ldr	r3, [pc, #260]	@ (800189c <main+0x524>)
 8001796:	ed93 5a00 	vldr	s10, [r3]
 800179a:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <main+0x538>)
 800179c:	4945      	ldr	r1, [pc, #276]	@ (80018b4 <main+0x53c>)
 800179e:	4846      	ldr	r0, [pc, #280]	@ (80018b8 <main+0x540>)
 80017a0:	eef0 2a45 	vmov.f32	s5, s10
 80017a4:	eeb0 2a65 	vmov.f32	s4, s11
 80017a8:	eef0 1a67 	vmov.f32	s3, s15
 80017ac:	eeb0 1a46 	vmov.f32	s2, s12
 80017b0:	eef0 0a66 	vmov.f32	s1, s13
 80017b4:	eeb0 0a47 	vmov.f32	s0, s14
 80017b8:	f7ff fd60 	bl	800127c <IMU_Update>
			  	  	  gx_f_rad, gy_f_rad, gz_f_rad, &roll, &pitch, &yaw);

	  /*!< Fixed frame +x position [0,90] >!*/
	  if ( ( pitch >= 80.0f ) && ( pitch <= 90.0f ) )
 80017bc:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <main+0x53c>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80018bc <main+0x544>
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	db15      	blt.n	80017fc <main+0x484>
 80017d0:	4b38      	ldr	r3, [pc, #224]	@ (80018b4 <main+0x53c>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80018c0 <main+0x548>
 80017da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d80b      	bhi.n	80017fc <main+0x484>
	  {
		  pitch = 0.0f;
 80017e4:	4b33      	ldr	r3, [pc, #204]	@ (80018b4 <main+0x53c>)
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
		  roll = 0.0f;
 80017ec:	4b32      	ldr	r3, [pc, #200]	@ (80018b8 <main+0x540>)
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
		  yaw = 0.0f;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <main+0x538>)
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
	  }

	  /*!< Fixed frame -x position [0,-90] >!*/
	  if ( ( pitch <= -80.0f ) && ( pitch >= -90.0f ) )
 80017fc:	4b2d      	ldr	r3, [pc, #180]	@ (80018b4 <main+0x53c>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80018c4 <main+0x54c>
 8001806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d815      	bhi.n	800183c <main+0x4c4>
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <main+0x53c>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80018c8 <main+0x550>
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	db0b      	blt.n	800183c <main+0x4c4>
	  {
		  pitch = 0.0f;
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <main+0x53c>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
		  roll = 0.0f;
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <main+0x540>)
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
		  yaw = 0.0f;
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <main+0x538>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
	  //sprintf(usb_msg,"%f,%f,%f,%f,%f,%f\r\n",gx_f,gy_f,gz_f,filtered_gx_f,filtered_gy_f,filtered_gz_f);


	  //sprintf(usb_msg,"%f,%f,%f,%f,%f,%f\r\n",ax_f,ay_f,az_f,filtered_ax_f,filtered_ay_f,filtered_az_f);
	  //sprintf(usb_msg,"%f,%f,%f,%f,%f,%f\r\n",gx_f,gy_f,gz_f,filtered_gx_f,filtered_gy_f,filtered_gz_f);
      sprintf(usb_msg,"%f,%f\r\n",roll,pitch);
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <main+0x540>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <main+0x53c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe7a 	bl	8000548 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	e9cd 2300 	strd	r2, r3, [sp]
 800185c:	4622      	mov	r2, r4
 800185e:	462b      	mov	r3, r5
 8001860:	491a      	ldr	r1, [pc, #104]	@ (80018cc <main+0x554>)
 8001862:	481b      	ldr	r0, [pc, #108]	@ (80018d0 <main+0x558>)
 8001864:	f00d fc42 	bl	800f0ec <siprintf>
	  //sprintf(usb_msg,"%f,%f,%f,%f\r\n",q0,q1,q2,q3);
      //sprintf(usb_msg,"Orientation: %.2f %.2f %.2f\r\n",-roll,pitch,yaw);
      CDC_Transmit_FS((uint8_t*)usb_msg,strlen(usb_msg));
 8001868:	4819      	ldr	r0, [pc, #100]	@ (80018d0 <main+0x558>)
 800186a:	f7fe fd01 	bl	8000270 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29b      	uxth	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	4816      	ldr	r0, [pc, #88]	@ (80018d0 <main+0x558>)
 8001876:	f00c f847 	bl	800d908 <CDC_Transmit_FS>
	  if ( bmi160_get_acc_gyro(&bmi160) != BMI160_OK)
 800187a:	e5cd      	b.n	8001418 <main+0xa0>
 800187c:	f3af 8000 	nop.w
 8001880:	a2529d39 	.word	0xa2529d39
 8001884:	3f91df46 	.word	0x3f91df46
 8001888:	2000062c 	.word	0x2000062c
 800188c:	20000650 	.word	0x20000650
 8001890:	20000630 	.word	0x20000630
 8001894:	20000654 	.word	0x20000654
 8001898:	20000634 	.word	0x20000634
 800189c:	20000658 	.word	0x20000658
 80018a0:	20000620 	.word	0x20000620
 80018a4:	411cf5c3 	.word	0x411cf5c3
 80018a8:	20000624 	.word	0x20000624
 80018ac:	20000628 	.word	0x20000628
 80018b0:	20000664 	.word	0x20000664
 80018b4:	20000660 	.word	0x20000660
 80018b8:	2000065c 	.word	0x2000065c
 80018bc:	42a00000 	.word	0x42a00000
 80018c0:	42b40000 	.word	0x42b40000
 80018c4:	c2a00000 	.word	0xc2a00000
 80018c8:	c2b40000 	.word	0xc2b40000
 80018cc:	08012d2c 	.word	0x08012d2c
 80018d0:	20000558 	.word	0x20000558

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	@ 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00d fcfc 	bl	800f2e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <SystemClock_Config+0xcc>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <SystemClock_Config+0xcc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <SystemClock_Config+0xd0>)
 800191e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <SystemClock_Config+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001930:	2301      	movs	r3, #1
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193a:	2302      	movs	r3, #2
 800193c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001944:	2304      	movs	r3, #4
 8001946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001948:	23a8      	movs	r3, #168	@ 0xa8
 800194a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800194c:	2302      	movs	r3, #2
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001950:	2307      	movs	r3, #7
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4618      	mov	r0, r3
 800195a:	f003 f96f 	bl	8004c3c <HAL_RCC_OscConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001964:	f000 f94a 	bl	8001bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001968:	230f      	movs	r3, #15
 800196a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196c:	2302      	movs	r3, #2
 800196e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001974:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800197a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2105      	movs	r1, #5
 8001986:	4618      	mov	r0, r3
 8001988:	f003 fbd0 	bl	800512c <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001992:	f000 f933 	bl	8001bfc <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	@ 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_I2C1_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_I2C1_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_I2C1_Init+0x50>)
 80019e6:	f000 feb3 	bl	8002750 <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 f904 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200002ec 	.word	0x200002ec
 80019fc:	40005400 	.word	0x40005400
 8001a00:	000186a0 	.word	0x000186a0

08001a04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a4e:	4819      	ldr	r0, [pc, #100]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a50:	f003 fe67 	bl	8005722 <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001a5a:	f000 f8cf 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a66:	f107 0320 	add.w	r3, r7, #32
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a6e:	f004 fadd 	bl	800602c <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001a78:	f000 f8c0 	bl	8001bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7c:	2360      	movs	r3, #96	@ 0x60
 8001a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001a80:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001a84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2204      	movs	r2, #4
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001a96:	f003 ff83 	bl	80059a0 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001aa0:	f000 f8ac 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001aa4:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <MX_TIM2_Init+0xb0>)
 8001aa6:	f000 f977 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	@ 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000340 	.word	0x20000340

08001ab8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <MX_TIM6_Init+0x64>)
 8001aca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ada:	22a7      	movs	r2, #167	@ 0xa7
 8001adc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ae4:	480c      	ldr	r0, [pc, #48]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001ae6:	f003 fd2d 	bl	8005544 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001af0:	f000 f884 	bl	8001bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001afc:	463b      	mov	r3, r7
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <MX_TIM6_Init+0x60>)
 8001b02:	f004 fa93 	bl	800602c <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001b0c:	f000 f876 	bl	8001bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000388 	.word	0x20000388
 8001b1c:	40001000 	.word	0x40001000

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a25      	ldr	r2, [pc, #148]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b18      	ldr	r3, [pc, #96]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a17      	ldr	r2, [pc, #92]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <MX_GPIO_Init+0xd0>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <MX_GPIO_Init+0xd4>)
 8001bae:	f000 fdb5 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <MX_GPIO_Init+0xd8>)
 8001bc6:	f000 fc0d 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001bca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4804      	ldr	r0, [pc, #16]	@ (8001bf4 <MX_GPIO_Init+0xd4>)
 8001be4:	f000 fbfe 	bl	80023e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40020000 	.word	0x40020000

08001bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1U);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c06:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <Error_Handler+0x18>)
 8001c08:	f000 fd88 	bl	800271c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
  __disable_irq();
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <Error_Handler+0x14>
 8001c14:	40020c00 	.word	0x40020c00

08001c18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a0c      	ldr	r2, [pc, #48]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <HAL_MspInit+0x5c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c56:	2007      	movs	r0, #7
 8001c58:	f000 fb82 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2005      	movs	r0, #5
 8001c62:	f000 fb88 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c66:	2005      	movs	r0, #5
 8001c68:	f000 fba1 	bl	80023ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a19      	ldr	r2, [pc, #100]	@ (8001cfc <HAL_I2C_MspInit+0x84>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12c      	bne.n	8001cf4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <HAL_I2C_MspInit+0x8c>)
 8001cd4:	f000 fb86 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ce6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_I2C_MspInit+0x88>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	@ 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020400 	.word	0x40020400

08001d08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d18:	d10d      	bne.n	8001d36 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a08      	ldr	r2, [pc, #32]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d36:	bf00      	nop
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0e      	ldr	r2, [pc, #56]	@ (8001d90 <HAL_TIM_Base_MspInit+0x48>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d115      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_TIM_Base_MspInit+0x4c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <HAL_TIM_Base_MspInit+0x4c>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_TIM_Base_MspInit+0x4c>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2036      	movs	r0, #54	@ 0x36
 8001d7c:	f000 fafb 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d80:	2036      	movs	r0, #54	@ 0x36
 8001d82:	f000 fb14 	bl	80023ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40001000 	.word	0x40001000
 8001d94:	40023800 	.word	0x40023800

08001d98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 030c 	add.w	r3, r7, #12
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db8:	d11d      	bne.n	8001df6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <HAL_TIM_MspPostInit+0x68>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <HAL_TIM_MspPostInit+0x68>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_TIM_MspPostInit+0x68>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de6:	2301      	movs	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	4619      	mov	r1, r3
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <HAL_TIM_MspPostInit+0x6c>)
 8001df2:	f000 faf7 	bl	80023e4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001df6:	bf00      	nop
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020000 	.word	0x40020000

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e0c:	bf00      	nop
 8001e0e:	e7fd      	b.n	8001e0c <NMI_Handler+0x4>

08001e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <MemManage_Handler+0x4>

08001e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <BusFault_Handler+0x4>

08001e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <UsageFault_Handler+0x4>

08001e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f979 	bl	8002138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <TIM6_DAC_IRQHandler+0x10>)
 8001e5e:	f003 fcaf 	bl	80057c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000388 	.word	0x20000388

08001e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e70:	4802      	ldr	r0, [pc, #8]	@ (8001e7c <OTG_FS_IRQHandler+0x10>)
 8001e72:	f001 fdd5 	bl	8003a20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20001bcc 	.word	0x20001bcc

08001e80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return 1;
 8001e84:	2301      	movs	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_kill>:

int _kill(int pid, int sig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e9a:	f00d fa73 	bl	800f384 <__errno>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2216      	movs	r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_exit>:

void _exit (int status)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ffe7 	bl	8001e90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec2:	bf00      	nop
 8001ec4:	e7fd      	b.n	8001ec2 <_exit+0x12>

08001ec6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e00a      	b.n	8001eee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ed8:	f3af 8000 	nop.w
 8001edc:	4601      	mov	r1, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	60ba      	str	r2, [r7, #8]
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	3301      	adds	r3, #1
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	dbf0      	blt.n	8001ed8 <_read+0x12>
  }

  return len;
 8001ef6:	687b      	ldr	r3, [r7, #4]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e009      	b.n	8001f26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	60ba      	str	r2, [r7, #8]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dbf1      	blt.n	8001f12 <_write+0x12>
  }
  return len;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <_close>:

int _close(int file)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f60:	605a      	str	r2, [r3, #4]
  return 0;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <_isatty>:

int _isatty(int file)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa4:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <SystemInit+0x20>)
 8001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001faa:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <SystemInit+0x20>)
 8001fac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fc8:	f7ff ffea 	bl	8001fa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f00d f9cd 	bl	800f390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7ff f9bf 	bl	8001378 <main>
  bx  lr    
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ffc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002004:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002008:	0801354c 	.word	0x0801354c
  ldr r2, =_sbss
 800200c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8002010:	20002420 	.word	0x20002420

08002014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC_IRQHandler>
	...

08002018 <RCFilter_Init>:
#include "RCFilter.h"

void RCFilter_Init(RCFilter *filt, float cutoffFreqHz, float sampleTimeS) {
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	ed87 0a02 	vstr	s0, [r7, #8]
 8002024:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Compute equivalent 'RC' constant from cut-off frequency */
	float RC = 1.0f / (6.28318530718f * cutoffFreqHz);
 8002028:	edd7 7a02 	vldr	s15, [r7, #8]
 800202c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002090 <RCFilter_Init+0x78>
 8002030:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002034:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800203c:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Pre-compute filter coefficients for first-order low-pass filter */
	filt->coeff[0] = sampleTimeS / (sampleTimeS + RC);
 8002040:	ed97 7a01 	vldr	s14, [r7, #4]
 8002044:	edd7 7a05 	vldr	s15, [r7, #20]
 8002048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800204c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	edc3 7a00 	vstr	s15, [r3]
	filt->coeff[1] = RC / (sampleTimeS + RC);
 800205a:	ed97 7a01 	vldr	s14, [r7, #4]
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	edd7 6a05 	vldr	s13, [r7, #20]
 800206a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Clear output buffer */
	filt->out[0] = 0.0f;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
	filt->out[1] = 0.0f;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	60da      	str	r2, [r3, #12]

}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	40c90fdb 	.word	0x40c90fdb

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f94f 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f000 f808 	bl	80020d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fda6 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_InitTick+0x54>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_InitTick+0x58>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f967 	bl	80023ca <HAL_SYSTICK_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e00e      	b.n	8002124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b0f      	cmp	r3, #15
 800210a:	d80a      	bhi.n	8002122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800210c:	2200      	movs	r2, #0
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f000 f92f 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002118:	4a06      	ldr	r2, [pc, #24]	@ (8002134 <HAL_InitTick+0x5c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000000c 	.word	0x2000000c
 8002130:	20000014 	.word	0x20000014
 8002134:	20000010 	.word	0x20000010

08002138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_IncTick+0x20>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	461a      	mov	r2, r3
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_IncTick+0x24>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4413      	add	r3, r2
 8002148:	4a04      	ldr	r2, [pc, #16]	@ (800215c <HAL_IncTick+0x24>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000014 	.word	0x20000014
 800215c:	200006d8 	.word	0x200006d8

08002160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return uwTick;
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_GetTick+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	200006d8 	.word	0x200006d8

08002178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff ffee 	bl	8002160 <HAL_GetTick>
 8002184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d005      	beq.n	800219e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_Delay+0x44>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800219e:	bf00      	nop
 80021a0:	f7ff ffde 	bl	8002160 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d8f7      	bhi.n	80021a0 <HAL_Delay+0x28>
  {
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000014 	.word	0x20000014

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	@ (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	@ (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	@ (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	@ 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	@ (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e16b      	b.n	80026d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 815a 	bne.w	80026d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80b4 	beq.w	80026d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b60      	ldr	r3, [pc, #384]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	4a5f      	ldr	r2, [pc, #380]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002578:	6453      	str	r3, [r2, #68]	@ 0x44
 800257a:	4b5d      	ldr	r3, [pc, #372]	@ (80026f0 <HAL_GPIO_Init+0x30c>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a5b      	ldr	r2, [pc, #364]	@ (80026f4 <HAL_GPIO_Init+0x310>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a52      	ldr	r2, [pc, #328]	@ (80026f8 <HAL_GPIO_Init+0x314>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a51      	ldr	r2, [pc, #324]	@ (80026fc <HAL_GPIO_Init+0x318>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a50      	ldr	r2, [pc, #320]	@ (8002700 <HAL_GPIO_Init+0x31c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002704 <HAL_GPIO_Init+0x320>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x21a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002708 <HAL_GPIO_Init+0x324>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x216>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a4d      	ldr	r2, [pc, #308]	@ (800270c <HAL_GPIO_Init+0x328>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x212>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002710 <HAL_GPIO_Init+0x32c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x20e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002714 <HAL_GPIO_Init+0x330>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x20a>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00e      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00c      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x228>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x228>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x228>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_GPIO_Init+0x310>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b3b      	ldr	r3, [pc, #236]	@ (8002718 <HAL_GPIO_Init+0x334>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a32      	ldr	r2, [pc, #200]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <HAL_GPIO_Init+0x334>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b26      	ldr	r3, [pc, #152]	@ (8002718 <HAL_GPIO_Init+0x334>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f ae90 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40021400 	.word	0x40021400
 8002710:	40021800 	.word	0x40021800
 8002714:	40021c00 	.word	0x40021c00
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e12b      	b.n	80029ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff fa7e 	bl	8001c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2224      	movs	r2, #36	@ 0x24
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b4:	f002 feb2 	bl	800551c <HAL_RCC_GetPCLK1Freq>
 80027b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a81      	ldr	r2, [pc, #516]	@ (80029c4 <HAL_I2C_Init+0x274>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d807      	bhi.n	80027d4 <HAL_I2C_Init+0x84>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4a80      	ldr	r2, [pc, #512]	@ (80029c8 <HAL_I2C_Init+0x278>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	bf94      	ite	ls
 80027cc:	2301      	movls	r3, #1
 80027ce:	2300      	movhi	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e006      	b.n	80027e2 <HAL_I2C_Init+0x92>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4a7d      	ldr	r2, [pc, #500]	@ (80029cc <HAL_I2C_Init+0x27c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	bf94      	ite	ls
 80027dc:	2301      	movls	r3, #1
 80027de:	2300      	movhi	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e0e7      	b.n	80029ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a78      	ldr	r2, [pc, #480]	@ (80029d0 <HAL_I2C_Init+0x280>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68ba      	ldr	r2, [r7, #8]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	4a6a      	ldr	r2, [pc, #424]	@ (80029c4 <HAL_I2C_Init+0x274>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d802      	bhi.n	8002824 <HAL_I2C_Init+0xd4>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	e009      	b.n	8002838 <HAL_I2C_Init+0xe8>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <HAL_I2C_Init+0x284>)
 8002830:	fba2 2303 	umull	r2, r3, r2, r3
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	3301      	adds	r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	430b      	orrs	r3, r1
 800283e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800284a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	495c      	ldr	r1, [pc, #368]	@ (80029c4 <HAL_I2C_Init+0x274>)
 8002854:	428b      	cmp	r3, r1
 8002856:	d819      	bhi.n	800288c <HAL_I2C_Init+0x13c>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1e59      	subs	r1, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fbb1 f3f3 	udiv	r3, r1, r3
 8002866:	1c59      	adds	r1, r3, #1
 8002868:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800286c:	400b      	ands	r3, r1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_I2C_Init+0x138>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e59      	subs	r1, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002886:	e051      	b.n	800292c <HAL_I2C_Init+0x1dc>
 8002888:	2304      	movs	r3, #4
 800288a:	e04f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d111      	bne.n	80028b8 <HAL_I2C_Init+0x168>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1e58      	subs	r0, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	440b      	add	r3, r1
 80028a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	bf0c      	ite	eq
 80028b0:	2301      	moveq	r3, #1
 80028b2:	2300      	movne	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	e012      	b.n	80028de <HAL_I2C_Init+0x18e>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	0099      	lsls	r1, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Init+0x196>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_I2C_Init+0x1dc>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <HAL_I2C_Init+0x1bc>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1e58      	subs	r0, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	440b      	add	r3, r1
 80028fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800290a:	e00f      	b.n	800292c <HAL_I2C_Init+0x1dc>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1e58      	subs	r0, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	0099      	lsls	r1, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	6809      	ldr	r1, [r1, #0]
 8002930:	4313      	orrs	r3, r2
 8002932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69da      	ldr	r2, [r3, #28]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800295a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6911      	ldr	r1, [r2, #16]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68d2      	ldr	r2, [r2, #12]
 8002966:	4311      	orrs	r1, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	430b      	orrs	r3, r1
 800296e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0201 	orr.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2220      	movs	r2, #32
 80029a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	000186a0 	.word	0x000186a0
 80029c8:	001e847f 	.word	0x001e847f
 80029cc:	003d08ff 	.word	0x003d08ff
 80029d0:	431bde83 	.word	0x431bde83
 80029d4:	10624dd3 	.word	0x10624dd3

080029d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f2:	f7ff fbb5 	bl	8002160 <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	f040 80d9 	bne.w	8002bb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2319      	movs	r3, #25
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	496d      	ldr	r1, [pc, #436]	@ (8002bc4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fc8b 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0cc      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_I2C_Mem_Write+0x56>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e0c5      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d007      	beq.n	8002a54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	@ 0x21
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc8 <HAL_I2C_Mem_Write+0x1f0>)
 8002a94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a96:	88f8      	ldrh	r0, [r7, #6]
 8002a98:	893a      	ldrh	r2, [r7, #8]
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fac2 	bl	8003030 <I2C_RequestMemoryWrite>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d052      	beq.n	8002b58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e081      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fd50 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	d107      	bne.n	8002ade <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002adc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e06b      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	781a      	ldrb	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d11b      	bne.n	8002b58 <HAL_I2C_Mem_Write+0x180>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	781a      	ldrb	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b38:	1c5a      	adds	r2, r3, #1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1aa      	bne.n	8002ab6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fd43 	bl	80035f0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00d      	beq.n	8002b8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e016      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	00100002 	.word	0x00100002
 8002bc8:	ffff0000 	.word	0xffff0000

08002bcc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08c      	sub	sp, #48	@ 0x30
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be6:	f7ff fabb 	bl	8002160 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	f040 8214 	bne.w	8003022 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2319      	movs	r3, #25
 8002c00:	2201      	movs	r2, #1
 8002c02:	497b      	ldr	r1, [pc, #492]	@ (8002df0 <HAL_I2C_Mem_Read+0x224>)
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fb91 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
 8002c12:	e207      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Mem_Read+0x56>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e200      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d007      	beq.n	8002c48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2222      	movs	r2, #34	@ 0x22
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2240      	movs	r2, #64	@ 0x40
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4a5b      	ldr	r2, [pc, #364]	@ (8002df4 <HAL_I2C_Mem_Read+0x228>)
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c8a:	88f8      	ldrh	r0, [r7, #6]
 8002c8c:	893a      	ldrh	r2, [r7, #8]
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4603      	mov	r3, r0
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 fa5e 	bl	800315c <I2C_RequestMemoryRead>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e1bc      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d113      	bne.n	8002cda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	623b      	str	r3, [r7, #32]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	623b      	str	r3, [r7, #32]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e190      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d11b      	bne.n	8002d1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	e170      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d11b      	bne.n	8002d5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	61bb      	str	r3, [r7, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	e150      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d70:	e144      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	f200 80f1 	bhi.w	8002f5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d123      	bne.n	8002dcc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fc79 	bl	8003680 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e145      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dca:	e117      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d14e      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dda:	2200      	movs	r2, #0
 8002ddc:	4906      	ldr	r1, [pc, #24]	@ (8002df8 <HAL_I2C_Mem_Read+0x22c>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 faa4 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e11a      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
 8002dee:	bf00      	nop
 8002df0:	00100002 	.word	0x00100002
 8002df4:	ffff0000 	.word	0xffff0000
 8002df8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e70:	e0c4      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	2200      	movs	r2, #0
 8002e7a:	496c      	ldr	r1, [pc, #432]	@ (800302c <HAL_I2C_Mem_Read+0x460>)
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa55 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0cb      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	4955      	ldr	r1, [pc, #340]	@ (800302c <HAL_I2C_Mem_Read+0x460>)
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fa27 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e09d      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ef6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f5c:	e04e      	b.n	8002ffc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fb8c 	bl	8003680 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e058      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d124      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d107      	bne.n	8002fca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f aeb6 	bne.w	8002d72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3728      	adds	r7, #40	@ 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010004 	.word	0x00010004

08003030 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	817b      	strh	r3, [r7, #10]
 8003042:	460b      	mov	r3, r1
 8003044:	813b      	strh	r3, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2200      	movs	r2, #0
 8003062:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f960 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003080:	d103      	bne.n	800308a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003088:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e05f      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800309c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	492d      	ldr	r1, [pc, #180]	@ (8003158 <I2C_RequestMemoryWrite+0x128>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f9bb 	bl	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e04c      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fa46 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e02b      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	e021      	b.n	800314c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003108:	893b      	ldrh	r3, [r7, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	b29b      	uxth	r3, r3
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fa20 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e005      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003142:	893b      	ldrh	r3, [r7, #8]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003184:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2200      	movs	r2, #0
 800319e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8c2 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031bc:	d103      	bne.n	80031c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0aa      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	4952      	ldr	r1, [pc, #328]	@ (8003328 <I2C_RequestMemoryRead+0x1cc>)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f91d 	bl	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e097      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f9a8 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800322c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e076      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	e021      	b.n	8003288 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b29b      	uxth	r3, r3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f982 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e050      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f967 	bl	8003560 <I2C_WaitOnTXEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	2b04      	cmp	r3, #4
 800329e:	d107      	bne.n	80032b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e035      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f82b 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e013      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f8:	897b      	ldrh	r3, [r7, #10]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	4906      	ldr	r1, [pc, #24]	@ (8003328 <I2C_RequestMemoryRead+0x1cc>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f886 	bl	8003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	00010002 	.word	0x00010002

0800332c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333c:	e048      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d044      	beq.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe ff0b 	bl	8002160 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d139      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d10d      	bne.n	8003382 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	43da      	mvns	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4013      	ands	r3, r2
 8003372:	b29b      	uxth	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	e00c      	b.n	800339c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	43da      	mvns	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	4013      	ands	r3, r2
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	79fb      	ldrb	r3, [r7, #7]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d116      	bne.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f043 0220 	orr.w	r2, r3, #32
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e023      	b.n	8003418 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	0c1b      	lsrs	r3, r3, #16
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d10d      	bne.n	80033f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	43da      	mvns	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	e00c      	b.n	8003410 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	43da      	mvns	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d093      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
 800342c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800342e:	e071      	b.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800343e:	d123      	bne.n	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800344e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e067      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348e:	d041      	beq.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003490:	f7fe fe66 	bl	8002160 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d302      	bcc.n	80034a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d136      	bne.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0c1b      	lsrs	r3, r3, #16
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10c      	bne.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf14      	ite	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	2300      	moveq	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	e00b      	b.n	80034e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	43da      	mvns	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf14      	ite	ne
 80034dc:	2301      	movne	r3, #1
 80034de:	2300      	moveq	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d016      	beq.n	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e021      	b.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	0c1b      	lsrs	r3, r3, #16
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10c      	bne.n	8003538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	43da      	mvns	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	4013      	ands	r3, r2
 800352a:	b29b      	uxth	r3, r3
 800352c:	2b00      	cmp	r3, #0
 800352e:	bf14      	ite	ne
 8003530:	2301      	movne	r3, #1
 8003532:	2300      	moveq	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e00b      	b.n	8003550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	43da      	mvns	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf14      	ite	ne
 800354a:	2301      	movne	r3, #1
 800354c:	2300      	moveq	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f47f af6d 	bne.w	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356c:	e034      	b.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8e3 	bl	800373a <I2C_IsAcknowledgeFailed>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d028      	beq.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fdeb 	bl	8002160 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d11d      	bne.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b80      	cmp	r3, #128	@ 0x80
 80035a8:	d016      	beq.n	80035d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e007      	b.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	2b80      	cmp	r3, #128	@ 0x80
 80035e4:	d1c3      	bne.n	800356e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	e034      	b.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f89b 	bl	800373a <I2C_IsAcknowledgeFailed>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e034      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d028      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003616:	f7fe fda3 	bl	8002160 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d11d      	bne.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b04      	cmp	r3, #4
 8003638:	d016      	beq.n	8003668 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	f043 0220 	orr.w	r2, r3, #32
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0304 	and.w	r3, r3, #4
 8003672:	2b04      	cmp	r3, #4
 8003674:	d1c3      	bne.n	80035fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800368c:	e049      	b.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b10      	cmp	r3, #16
 800369a:	d119      	bne.n	80036d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0210 	mvn.w	r2, #16
 80036a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e030      	b.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d0:	f7fe fd46 	bl	8002160 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11d      	bne.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d016      	beq.n	8003722 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2220      	movs	r2, #32
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e007      	b.n	8003732 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d1ae      	bne.n	800368e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003750:	d11b      	bne.n	800378a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800375a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f043 0204 	orr.w	r2, r3, #4
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e101      	b.n	80039ae <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f00a f9e7 	bl	800db98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2203      	movs	r2, #3
 80037ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d8:	d102      	bne.n	80037e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f002 fdc8 	bl	800637a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7c1a      	ldrb	r2, [r3, #16]
 80037f2:	f88d 2000 	strb.w	r2, [sp]
 80037f6:	3304      	adds	r3, #4
 80037f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037fa:	f002 fca7 	bl	800614c <USB_CoreInit>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0ce      	b.n	80039ae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f002 fdc0 	bl	800639c <USB_SetCurrentMode>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0bf      	b.n	80039ae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e04a      	b.n	80038ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3315      	adds	r3, #21
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3314      	adds	r3, #20
 8003858:	7bfa      	ldrb	r2, [r7, #15]
 800385a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800385c:	7bfa      	ldrb	r2, [r7, #15]
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	b298      	uxth	r0, r3
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	332e      	adds	r3, #46	@ 0x2e
 8003870:	4602      	mov	r2, r0
 8003872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003874:	7bfa      	ldrb	r2, [r7, #15]
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3318      	adds	r3, #24
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	331c      	adds	r3, #28
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800389c:	7bfa      	ldrb	r2, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3320      	adds	r3, #32
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3324      	adds	r3, #36	@ 0x24
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	3301      	adds	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	791b      	ldrb	r3, [r3, #4]
 80038ce:	7bfa      	ldrb	r2, [r7, #15]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3af      	bcc.n	8003834 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e044      	b.n	8003964 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3301      	adds	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	791b      	ldrb	r3, [r3, #4]
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3b5      	bcc.n	80038da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7c1a      	ldrb	r2, [r3, #16]
 8003976:	f88d 2000 	strb.w	r2, [sp]
 800397a:	3304      	adds	r3, #4
 800397c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800397e:	f002 fd59 	bl	8006434 <USB_DevInit>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e00c      	b.n	80039ae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fda3 	bl	80074f2 <USB_DevDisconnect>

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_PCD_Start+0x1c>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e022      	b.n	8003a18 <HAL_PCD_Start+0x62>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 fcaa 	bl	8006358 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 fd51 	bl	80074b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a20:	b590      	push	{r4, r7, lr}
 8003a22:	b08d      	sub	sp, #52	@ 0x34
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 fe0f 	bl	800765a <USB_GetMode>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 848c 	bne.w	800435c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fd73 	bl	8007534 <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8482 	beq.w	800435a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f003 fd60 	bl	8007534 <USB_ReadInterrupts>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d107      	bne.n	8003a8e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f002 0202 	and.w	r2, r2, #2
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fd4e 	bl	8007534 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 0310 	and.w	r3, r3, #16
 8003a9e:	2b10      	cmp	r3, #16
 8003aa0:	d161      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699a      	ldr	r2, [r3, #24]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0210 	bic.w	r2, r2, #16
 8003ab0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003adc:	d124      	bne.n	8003b28 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d035      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003af4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	6a38      	ldr	r0, [r7, #32]
 8003afe:	f003 fb85 	bl	800720c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0e:	441a      	add	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b20:	441a      	add	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	615a      	str	r2, [r3, #20]
 8003b26:	e016      	b.n	8003b56 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003b2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003b32:	d110      	bne.n	8003b56 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	6a38      	ldr	r0, [r7, #32]
 8003b40:	f003 fb64 	bl	800720c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b50:	441a      	add	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0210 	orr.w	r2, r2, #16
 8003b64:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f003 fce2 	bl	8007534 <USB_ReadInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003b7a:	f040 80a7 	bne.w	8003ccc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f003 fce7 	bl	800755a <USB_ReadDevAllOutEpInterrupt>
 8003b8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003b8e:	e099      	b.n	8003cc4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808e 	beq.w	8003cb8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f003 fd0b 	bl	80075c2 <USB_ReadDevOutEPInterrupt>
 8003bac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00c      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fea3 	bl	8004918 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00c      	beq.n	8003bf6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be8:	461a      	mov	r2, r3
 8003bea:	2308      	movs	r3, #8
 8003bec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003bee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 ff79 	bl	8004ae8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2310      	movs	r3, #16
 8003c10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d030      	beq.n	8003c7e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	2b80      	cmp	r3, #128	@ 0x80
 8003c26:	d109      	bne.n	8003c3c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c3a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3304      	adds	r3, #4
 8003c50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	78db      	ldrb	r3, [r3, #3]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d108      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f00a f89c 	bl	800dda4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	2320      	movs	r3, #32
 8003c98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cb6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	3301      	adds	r3, #1
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc0:	085b      	lsrs	r3, r3, #1
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f47f af62 	bne.w	8003b90 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 fc2f 	bl	8007534 <USB_ReadInterrupts>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ce0:	f040 80db 	bne.w	8003e9a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f003 fc50 	bl	800758e <USB_ReadDevAllInEpInterrupt>
 8003cee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003cf4:	e0cd      	b.n	8003e92 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80c2 	beq.w	8003e86 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f003 fc76 	bl	80075fe <USB_ReadDevInEPInterrupt>
 8003d12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d057      	beq.n	8003dce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2201      	movs	r2, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69f9      	ldr	r1, [r7, #28]
 8003d3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d3e:	4013      	ands	r3, r2
 8003d40:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2301      	movs	r3, #1
 8003d52:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	799b      	ldrb	r3, [r3, #6]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d132      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3320      	adds	r3, #32
 8003d6c:	6819      	ldr	r1, [r3, #0]
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4403      	add	r3, r0
 8003d7c:	331c      	adds	r3, #28
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4419      	add	r1, r3
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4403      	add	r3, r0
 8003d90:	3320      	adds	r3, #32
 8003d92:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d113      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x3a2>
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	3324      	adds	r3, #36	@ 0x24
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003dba:	461a      	mov	r2, r3
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	f003 fc7d 	bl	80076bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f009 ff66 	bl	800dc9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003de4:	461a      	mov	r2, r3
 8003de6:	2308      	movs	r3, #8
 8003de8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e00:	461a      	mov	r2, r3
 8003e02:	2310      	movs	r3, #16
 8003e04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2340      	movs	r3, #64	@ 0x40
 8003e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d023      	beq.n	8003e74 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e2e:	6a38      	ldr	r0, [r7, #32]
 8003e30:	f002 fc64 	bl	80066fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3310      	adds	r3, #16
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	78db      	ldrb	r3, [r3, #3]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f009 ffb3 	bl	800ddc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2302      	movs	r3, #2
 8003e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fcbd 	bl	8004800 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	3301      	adds	r3, #1
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f af2e 	bne.w	8003cf6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f003 fb48 	bl	8007534 <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003eae:	d122      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fea3 	bl	8004c24 <HAL_PCDEx_LPM_Callback>
 8003ede:	e002      	b.n	8003ee6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f009 ff51 	bl	800dd88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fb1a 	bl	8007534 <USB_ReadInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0a:	d112      	bne.n	8003f32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f009 ff0d 	bl	800dd3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003f30:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fafc 	bl	8007534 <USB_ReadInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	f040 80b7 	bne.w	80040b8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2110      	movs	r1, #16
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 fbc9 	bl	80066fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f6e:	e046      	b.n	8003ffe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fa2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003fb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	69fa      	ldr	r2, [r7, #28]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003fd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ff2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ff6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	461a      	mov	r2, r3
 8004004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004006:	4293      	cmp	r3, r2
 8004008:	d3b2      	bcc.n	8003f70 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004018:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800401c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	7bdb      	ldrb	r3, [r3, #15]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d016      	beq.n	8004054 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004036:	f043 030b 	orr.w	r3, r3, #11
 800403a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800404c:	f043 030b 	orr.w	r3, r3, #11
 8004050:	6453      	str	r3, [r2, #68]	@ 0x44
 8004052:	e015      	b.n	8004080 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004062:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004066:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800406a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800407a:	f043 030b 	orr.w	r3, r3, #11
 800407e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800408e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004092:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040a2:	461a      	mov	r2, r3
 80040a4:	f003 fb0a 	bl	80076bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695a      	ldr	r2, [r3, #20]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80040b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fa39 	bl	8007534 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040cc:	d123      	bne.n	8004116 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 facf 	bl	8007676 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f002 fb86 	bl	80067ee <USB_GetDevSpeed>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	f001 fa09 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 80040f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040f8:	461a      	mov	r2, r3
 80040fa:	4620      	mov	r0, r4
 80040fc:	f002 f88a 	bl	8006214 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f009 fdf2 	bl	800dcea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004114:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f003 fa0a 	bl	8007534 <USB_ReadInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d10a      	bne.n	8004140 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f009 fdcf 	bl	800dcce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695a      	ldr	r2, [r3, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f002 0208 	and.w	r2, r2, #8
 800413e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f003 f9f5 	bl	8007534 <USB_ReadInterrupts>
 800414a:	4603      	mov	r3, r0
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	2b80      	cmp	r3, #128	@ 0x80
 8004152:	d123      	bne.n	800419c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004160:	2301      	movs	r3, #1
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
 8004164:	e014      	b.n	8004190 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d105      	bne.n	800418a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	b2db      	uxtb	r3, r3
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fb0a 	bl	800479e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	461a      	mov	r2, r3
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	4293      	cmp	r3, r2
 800419a:	d3e4      	bcc.n	8004166 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f003 f9c7 	bl	8007534 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041b0:	d13c      	bne.n	800422c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041b2:	2301      	movs	r3, #1
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041b6:	e02b      	b.n	8004210 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	3318      	adds	r3, #24
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d115      	bne.n	800420a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80041de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da12      	bge.n	800420a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	4613      	mov	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3317      	adds	r3, #23
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 faca 	bl	800479e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	3301      	adds	r3, #1
 800420e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	461a      	mov	r2, r3
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	4293      	cmp	r3, r2
 800421a:	d3cd      	bcc.n	80041b8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800422a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f003 f97f 	bl	8007534 <USB_ReadInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800423c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004240:	d156      	bne.n	80042f0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004242:	2301      	movs	r3, #1
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
 8004246:	e045      	b.n	80042d4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d12e      	bne.n	80042ce <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004270:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004272:	2b00      	cmp	r3, #0
 8004274:	da2b      	bge.n	80042ce <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004282:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004286:	429a      	cmp	r2, r3
 8004288:	d121      	bne.n	80042ce <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042ca:	6053      	str	r3, [r2, #4]
            break;
 80042cc:	e008      	b.n	80042e0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	3301      	adds	r3, #1
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	791b      	ldrb	r3, [r3, #4]
 80042d8:	461a      	mov	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	4293      	cmp	r3, r2
 80042de:	d3b3      	bcc.n	8004248 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80042ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f003 f91d 	bl	8007534 <USB_ReadInterrupts>
 80042fa:	4603      	mov	r3, r0
 80042fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004304:	d10a      	bne.n	800431c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f009 fd70 	bl	800ddec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695a      	ldr	r2, [r3, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800431a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f003 f907 	bl	8007534 <USB_ReadInterrupts>
 8004326:	4603      	mov	r3, r0
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b04      	cmp	r3, #4
 800432e:	d115      	bne.n	800435c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f009 fd60 	bl	800de08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	e000      	b.n	800435c <HAL_PCD_IRQHandler+0x93c>
      return;
 800435a:	bf00      	nop
    }
  }
}
 800435c:	3734      	adds	r7, #52	@ 0x34
 800435e:	46bd      	mov	sp, r7
 8004360:	bd90      	pop	{r4, r7, pc}

08004362 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	460b      	mov	r3, r1
 800436c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_PCD_SetAddress+0x1a>
 8004378:	2302      	movs	r3, #2
 800437a:	e012      	b.n	80043a2 <HAL_PCD_SetAddress+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	78fa      	ldrb	r2, [r7, #3]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f003 f866 	bl	8007464 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	4608      	mov	r0, r1
 80043b4:	4611      	mov	r1, r2
 80043b6:	461a      	mov	r2, r3
 80043b8:	4603      	mov	r3, r0
 80043ba:	70fb      	strb	r3, [r7, #3]
 80043bc:	460b      	mov	r3, r1
 80043be:	803b      	strh	r3, [r7, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80043c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da0f      	bge.n	80043f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	f003 020f 	and.w	r2, r3, #15
 80043d6:	4613      	mov	r3, r2
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	3310      	adds	r3, #16
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	4413      	add	r3, r2
 80043e4:	3304      	adds	r3, #4
 80043e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2201      	movs	r2, #1
 80043ec:	705a      	strb	r2, [r3, #1]
 80043ee:	e00f      	b.n	8004410 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	f003 020f 	and.w	r2, r3, #15
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4413      	add	r3, r2
 8004406:	3304      	adds	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800441c:	883b      	ldrh	r3, [r7, #0]
 800441e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	78ba      	ldrb	r2, [r7, #2]
 800442a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800443e:	78bb      	ldrb	r3, [r7, #2]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d102      	bne.n	800444a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_PCD_EP_Open+0xae>
 8004454:	2302      	movs	r3, #2
 8004456:	e00e      	b.n	8004476 <HAL_PCD_EP_Open+0xcc>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	4618      	mov	r0, r3
 8004468:	f002 f9e6 	bl	8006838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004474:	7afb      	ldrb	r3, [r7, #11]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800448a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da0f      	bge.n	80044b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 020f 	and.w	r2, r3, #15
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	3310      	adds	r3, #16
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4413      	add	r3, r2
 80044a6:	3304      	adds	r3, #4
 80044a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	705a      	strb	r2, [r3, #1]
 80044b0:	e00f      	b.n	80044d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	4613      	mov	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	3304      	adds	r3, #4
 80044ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d2:	78fb      	ldrb	r3, [r7, #3]
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_PCD_EP_Close+0x6e>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e00e      	b.n	800450a <HAL_PCD_EP_Close+0x8c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68f9      	ldr	r1, [r7, #12]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f002 fa24 	bl	8006948 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b086      	sub	sp, #24
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
 800451e:	460b      	mov	r3, r1
 8004520:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	f003 020f 	and.w	r2, r3, #15
 8004528:	4613      	mov	r3, r2
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	3304      	adds	r3, #4
 800453a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2200      	movs	r2, #0
 800454c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2200      	movs	r2, #0
 8004552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004554:	7afb      	ldrb	r3, [r7, #11]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	b2da      	uxtb	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	799b      	ldrb	r3, [r3, #6]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	799b      	ldrb	r3, [r3, #6]
 8004576:	461a      	mov	r2, r3
 8004578:	6979      	ldr	r1, [r7, #20]
 800457a:	f002 fac1 	bl	8006b00 <USB_EPStartXfer>

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	f003 020f 	and.w	r2, r3, #15
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	460b      	mov	r3, r1
 80045c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	f003 020f 	and.w	r2, r3, #15
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3310      	adds	r3, #16
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	3304      	adds	r3, #4
 80045de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2201      	movs	r2, #1
 80045f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045f8:	7afb      	ldrb	r3, [r7, #11]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	799b      	ldrb	r3, [r3, #6]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d102      	bne.n	8004612 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	799b      	ldrb	r3, [r3, #6]
 800461a:	461a      	mov	r2, r3
 800461c:	6979      	ldr	r1, [r7, #20]
 800461e:	f002 fa6f 	bl	8006b00 <USB_EPStartXfer>

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	7912      	ldrb	r2, [r2, #4]
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e04f      	b.n	80046ea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800464a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800464e:	2b00      	cmp	r3, #0
 8004650:	da0f      	bge.n	8004672 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	f003 020f 	and.w	r2, r3, #15
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	3310      	adds	r3, #16
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	3304      	adds	r3, #4
 8004668:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	705a      	strb	r2, [r3, #1]
 8004670:	e00d      	b.n	800468e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	b2da      	uxtb	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_PCD_EP_SetStall+0x82>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e01d      	b.n	80046ea <HAL_PCD_EP_SetStall+0xbe>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fdfd 	bl	80072bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d109      	bne.n	80046e0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	7999      	ldrb	r1, [r3, #6]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046da:	461a      	mov	r2, r3
 80046dc:	f002 ffee 	bl	80076bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	7912      	ldrb	r2, [r2, #4]
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e042      	b.n	8004796 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004714:	2b00      	cmp	r3, #0
 8004716:	da0f      	bge.n	8004738 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	f003 020f 	and.w	r2, r3, #15
 800471e:	4613      	mov	r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	3310      	adds	r3, #16
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4413      	add	r3, r2
 800472c:	3304      	adds	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2201      	movs	r2, #1
 8004734:	705a      	strb	r2, [r3, #1]
 8004736:	e00f      	b.n	8004758 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	f003 020f 	and.w	r2, r3, #15
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	3304      	adds	r3, #4
 8004750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_PCD_EP_ClrStall+0x86>
 8004774:	2302      	movs	r3, #2
 8004776:	e00e      	b.n	8004796 <HAL_PCD_EP_ClrStall+0xa4>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	4618      	mov	r0, r3
 8004788:	f002 fe06 	bl	8007398 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	460b      	mov	r3, r1
 80047a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da0c      	bge.n	80047cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4413      	add	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	3310      	adds	r3, #16
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e00c      	b.n	80047e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	f003 020f 	and.w	r2, r3, #15
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4413      	add	r3, r2
 80047e2:	3304      	adds	r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68f9      	ldr	r1, [r7, #12]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 fc25 	bl	800703c <USB_EPStopXfer>
 80047f2:	4603      	mov	r3, r0
 80047f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80047f6:	7afb      	ldrb	r3, [r7, #11]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	@ 0x28
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	3310      	adds	r3, #16
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	3304      	adds	r3, #4
 8004826:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d901      	bls.n	8004838 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e06b      	b.n	8004910 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	429a      	cmp	r2, r3
 800484c:	d902      	bls.n	8004854 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	3303      	adds	r3, #3
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800485c:	e02a      	b.n	80048b4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	d902      	bls.n	800487a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	3303      	adds	r3, #3
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	4603      	mov	r3, r0
 8004896:	6978      	ldr	r0, [r7, #20]
 8004898:	f002 fc7a 	bl	8007190 <USB_WritePacket>

    ep->xfer_buff  += len;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	441a      	add	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	695a      	ldr	r2, [r3, #20]
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	441a      	add	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d809      	bhi.n	80048de <PCD_WriteEmptyTxFifo+0xde>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d203      	bcs.n	80048de <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1bf      	bne.n	800485e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d811      	bhi.n	800490e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2201      	movs	r2, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	43db      	mvns	r3, r3
 8004904:	6939      	ldr	r1, [r7, #16]
 8004906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800490a:	4013      	ands	r3, r2
 800490c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3720      	adds	r7, #32
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	333c      	adds	r3, #60	@ 0x3c
 8004930:	3304      	adds	r3, #4
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	799b      	ldrb	r3, [r3, #6]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d17b      	bne.n	8004a46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b00      	cmp	r3, #0
 8004956:	d015      	beq.n	8004984 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4a61      	ldr	r2, [pc, #388]	@ (8004ae0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	f240 80b9 	bls.w	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80b3 	beq.w	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497a:	461a      	mov	r2, r3
 800497c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004980:	6093      	str	r3, [r2, #8]
 8004982:	e0a7      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	2320      	movs	r3, #32
 800499e:	6093      	str	r3, [r2, #8]
 80049a0:	e098      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f040 8093 	bne.w	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d90f      	bls.n	80049d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	461a      	mov	r2, r3
 80049ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049d2:	6093      	str	r3, [r2, #8]
 80049d4:	e07e      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	3304      	adds	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6a1a      	ldr	r2, [r3, #32]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	0159      	lsls	r1, r3, #5
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	440b      	add	r3, r1
 80049f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a02:	1ad2      	subs	r2, r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d114      	bne.n	8004a38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004a20:	461a      	mov	r2, r3
 8004a22:	2101      	movs	r1, #1
 8004a24:	f002 fe4a 	bl	80076bc <USB_EP0_OutStart>
 8004a28:	e006      	b.n	8004a38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	441a      	add	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f009 f910 	bl	800dc64 <HAL_PCD_DataOutStageCallback>
 8004a44:	e046      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	4a26      	ldr	r2, [pc, #152]	@ (8004ae4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d124      	bne.n	8004a98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00a      	beq.n	8004a6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a64:	461a      	mov	r2, r3
 8004a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a6a:	6093      	str	r3, [r2, #8]
 8004a6c:	e032      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2320      	movs	r3, #32
 8004a88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f009 f8e7 	bl	800dc64 <HAL_PCD_DataOutStageCallback>
 8004a96:	e01d      	b.n	8004ad4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d114      	bne.n	8004ac8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d108      	bne.n	8004ac8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	f002 fdfa 	bl	80076bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f009 f8c8 	bl	800dc64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	4f54300a 	.word	0x4f54300a
 8004ae4:	4f54310a 	.word	0x4f54310a

08004ae8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	333c      	adds	r3, #60	@ 0x3c
 8004b00:	3304      	adds	r3, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d90e      	bls.n	8004b3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f009 f87f 	bl	800dc40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4a0a      	ldr	r2, [pc, #40]	@ (8004b70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d90c      	bls.n	8004b64 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	799b      	ldrb	r3, [r3, #6]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d108      	bne.n	8004b64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2101      	movs	r1, #1
 8004b60:	f002 fdac 	bl	80076bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	4f54300a 	.word	0x4f54300a

08004b74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
 8004b80:	4613      	mov	r3, r2
 8004b82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b92:	883b      	ldrh	r3, [r7, #0]
 8004b94:	0419      	lsls	r1, r3, #16
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ba0:	e028      	b.n	8004bf4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e00d      	b.n	8004bd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	3340      	adds	r3, #64	@ 0x40
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
 8004bd2:	7bfa      	ldrb	r2, [r7, #15]
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d3ec      	bcc.n	8004bb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004bdc:	883b      	ldrh	r3, [r7, #0]
 8004bde:	0418      	lsls	r0, r3, #16
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	4302      	orrs	r2, r0
 8004bec:	3340      	adds	r3, #64	@ 0x40
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	887a      	ldrh	r2, [r7, #2]
 8004c14:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e267      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d075      	beq.n	8004d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c5a:	4b88      	ldr	r3, [pc, #544]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d00c      	beq.n	8004c80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c66:	4b85      	ldr	r3, [pc, #532]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d112      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c72:	4b82      	ldr	r3, [pc, #520]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c7e:	d10b      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c80:	4b7e      	ldr	r3, [pc, #504]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d05b      	beq.n	8004d44 <HAL_RCC_OscConfig+0x108>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d157      	bne.n	8004d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e242      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x74>
 8004ca2:	4b76      	ldr	r3, [pc, #472]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a75      	ldr	r2, [pc, #468]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b70      	ldr	r3, [pc, #448]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6f      	ldr	r2, [pc, #444]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a6c      	ldr	r2, [pc, #432]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xb0>
 8004cd4:	4b69      	ldr	r3, [pc, #420]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b66      	ldr	r3, [pc, #408]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a65      	ldr	r2, [pc, #404]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fa34 	bl	8002160 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fa30 	bl	8002160 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	@ 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e207      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b5b      	ldr	r3, [pc, #364]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xc0>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fd fa20 	bl	8002160 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fd fa1c 	bl	8002160 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1f3      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b51      	ldr	r3, [pc, #324]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0xe8>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d063      	beq.n	8004e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d52:	4b4a      	ldr	r3, [pc, #296]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b47      	ldr	r3, [pc, #284]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d11c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d6a:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	4b41      	ldr	r3, [pc, #260]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1c7      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4937      	ldr	r1, [pc, #220]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	e03a      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d020      	beq.n	8004dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <HAL_RCC_OscConfig+0x244>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db2:	f7fd f9d5 	bl	8002160 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dba:	f7fd f9d1 	bl	8002160 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e1a8      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd8:	4b28      	ldr	r3, [pc, #160]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4925      	ldr	r1, [pc, #148]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	600b      	str	r3, [r1, #0]
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	4b24      	ldr	r3, [pc, #144]	@ (8004e80 <HAL_RCC_OscConfig+0x244>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd f9b4 	bl	8002160 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfc:	f7fd f9b0 	bl	8002160 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e187      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d036      	beq.n	8004e94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d016      	beq.n	8004e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e2e:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <HAL_RCC_OscConfig+0x248>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd f994 	bl	8002160 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fd f990 	bl	8002160 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e167      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_RCC_OscConfig+0x240>)
 8004e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0x200>
 8004e5a:	e01b      	b.n	8004e94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e5c:	4b09      	ldr	r3, [pc, #36]	@ (8004e84 <HAL_RCC_OscConfig+0x248>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e62:	f7fd f97d 	bl	8002160 <HAL_GetTick>
 8004e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	e00e      	b.n	8004e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e6a:	f7fd f979 	bl	8002160 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d907      	bls.n	8004e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e150      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	42470000 	.word	0x42470000
 8004e84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e88:	4b88      	ldr	r3, [pc, #544]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ea      	bne.n	8004e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8097 	beq.w	8004fd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea6:	4b81      	ldr	r3, [pc, #516]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10f      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	4a7c      	ldr	r2, [pc, #496]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ebc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed2:	4b77      	ldr	r3, [pc, #476]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d118      	bne.n	8004f10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ede:	4b74      	ldr	r3, [pc, #464]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a73      	ldr	r2, [pc, #460]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eea:	f7fd f939 	bl	8002160 <HAL_GetTick>
 8004eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	e008      	b.n	8004f04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef2:	f7fd f935 	bl	8002160 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e10c      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f04:	4b6a      	ldr	r3, [pc, #424]	@ (80050b0 <HAL_RCC_OscConfig+0x474>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0f0      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d106      	bne.n	8004f26 <HAL_RCC_OscConfig+0x2ea>
 8004f18:	4b64      	ldr	r3, [pc, #400]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1c:	4a63      	ldr	r2, [pc, #396]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f24:	e01c      	b.n	8004f60 <HAL_RCC_OscConfig+0x324>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d10c      	bne.n	8004f48 <HAL_RCC_OscConfig+0x30c>
 8004f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	4a5e      	ldr	r2, [pc, #376]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f40:	f043 0301 	orr.w	r3, r3, #1
 8004f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f46:	e00b      	b.n	8004f60 <HAL_RCC_OscConfig+0x324>
 8004f48:	4b58      	ldr	r3, [pc, #352]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f4c:	4a57      	ldr	r2, [pc, #348]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f4e:	f023 0301 	bic.w	r3, r3, #1
 8004f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f54:	4b55      	ldr	r3, [pc, #340]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f58:	4a54      	ldr	r2, [pc, #336]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f5a:	f023 0304 	bic.w	r3, r3, #4
 8004f5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d015      	beq.n	8004f94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fd f8fa 	bl	8002160 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6e:	e00a      	b.n	8004f86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f70:	f7fd f8f6 	bl	8002160 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e0cb      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f86:	4b49      	ldr	r3, [pc, #292]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ee      	beq.n	8004f70 <HAL_RCC_OscConfig+0x334>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f94:	f7fd f8e4 	bl	8002160 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f9a:	e00a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd f8e0 	bl	8002160 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0b5      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb2:	4b3e      	ldr	r3, [pc, #248]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d105      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc4:	4b39      	ldr	r3, [pc, #228]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc8:	4a38      	ldr	r2, [pc, #224]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 80a1 	beq.w	800511c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fda:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d05c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d141      	bne.n	8005072 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4b31      	ldr	r3, [pc, #196]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd f8b4 	bl	8002160 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffc:	f7fd f8b0 	bl	8002160 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e087      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	4b27      	ldr	r3, [pc, #156]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	3b01      	subs	r3, #1
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	491b      	ldr	r1, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005040:	4313      	orrs	r3, r2
 8005042:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005044:	4b1b      	ldr	r3, [pc, #108]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fd f889 	bl	8002160 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd f885 	bl	8002160 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e05c      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005064:	4b11      	ldr	r3, [pc, #68]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x416>
 8005070:	e054      	b.n	800511c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCC_OscConfig+0x478>)
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7fd f872 	bl	8002160 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005080:	f7fd f86e 	bl	8002160 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e045      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_RCC_OscConfig+0x470>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f0      	bne.n	8005080 <HAL_RCC_OscConfig+0x444>
 800509e:	e03d      	b.n	800511c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d107      	bne.n	80050b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e038      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
 80050ac:	40023800 	.word	0x40023800
 80050b0:	40007000 	.word	0x40007000
 80050b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <HAL_RCC_OscConfig+0x4ec>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d028      	beq.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d121      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d11a      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80050ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0cc      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b68      	ldr	r3, [pc, #416]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90c      	bls.n	8005168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b65      	ldr	r3, [pc, #404]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b63      	ldr	r3, [pc, #396]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0b8      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005180:	4b59      	ldr	r3, [pc, #356]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a58      	ldr	r2, [pc, #352]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800518a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005198:	4b53      	ldr	r3, [pc, #332]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a52      	ldr	r2, [pc, #328]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b50      	ldr	r3, [pc, #320]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	494d      	ldr	r1, [pc, #308]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b47      	ldr	r3, [pc, #284]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b3f      	ldr	r3, [pc, #252]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3b      	ldr	r3, [pc, #236]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e067      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b37      	ldr	r3, [pc, #220]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4934      	ldr	r1, [pc, #208]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fc ffa0 	bl	8002160 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fc ff9c 	bl	8002160 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e04f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2b      	ldr	r3, [pc, #172]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b25      	ldr	r3, [pc, #148]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20c      	bcs.n	8005274 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b22      	ldr	r3, [pc, #136]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b20      	ldr	r3, [pc, #128]	@ (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e032      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4b19      	ldr	r3, [pc, #100]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4916      	ldr	r1, [pc, #88]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529e:	4b12      	ldr	r3, [pc, #72]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	490e      	ldr	r1, [pc, #56]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052b2:	f000 f821 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052b6:	4602      	mov	r2, r0
 80052b8:	4b0b      	ldr	r3, [pc, #44]	@ (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	490a      	ldr	r1, [pc, #40]	@ (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	5ccb      	ldrb	r3, [r1, r3]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	4a09      	ldr	r2, [pc, #36]	@ (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80052ce:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fc ff00 	bl	80020d8 <HAL_InitTick>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00
 80052e8:	40023800 	.word	0x40023800
 80052ec:	080130c0 	.word	0x080130c0
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	20000010 	.word	0x20000010

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052fc:	b094      	sub	sp, #80	@ 0x50
 80052fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005310:	4b79      	ldr	r3, [pc, #484]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f003 030c 	and.w	r3, r3, #12
 8005318:	2b08      	cmp	r3, #8
 800531a:	d00d      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x40>
 800531c:	2b08      	cmp	r3, #8
 800531e:	f200 80e1 	bhi.w	80054e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x34>
 8005326:	2b04      	cmp	r3, #4
 8005328:	d003      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0x3a>
 800532a:	e0db      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b73      	ldr	r3, [pc, #460]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x204>)
 800532e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005330:	e0db      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005332:	4b73      	ldr	r3, [pc, #460]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x208>)
 8005334:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005336:	e0d8      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005340:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005342:	4b6d      	ldr	r3, [pc, #436]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d063      	beq.n	8005416 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800534e:	4b6a      	ldr	r3, [pc, #424]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	099b      	lsrs	r3, r3, #6
 8005354:	2200      	movs	r2, #0
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005358:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005360:	633b      	str	r3, [r7, #48]	@ 0x30
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
 8005366:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800536a:	4622      	mov	r2, r4
 800536c:	462b      	mov	r3, r5
 800536e:	f04f 0000 	mov.w	r0, #0
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	0159      	lsls	r1, r3, #5
 8005378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800537c:	0150      	lsls	r0, r2, #5
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4621      	mov	r1, r4
 8005384:	1a51      	subs	r1, r2, r1
 8005386:	6139      	str	r1, [r7, #16]
 8005388:	4629      	mov	r1, r5
 800538a:	eb63 0301 	sbc.w	r3, r3, r1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800539c:	4659      	mov	r1, fp
 800539e:	018b      	lsls	r3, r1, #6
 80053a0:	4651      	mov	r1, sl
 80053a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053a6:	4651      	mov	r1, sl
 80053a8:	018a      	lsls	r2, r1, #6
 80053aa:	4651      	mov	r1, sl
 80053ac:	ebb2 0801 	subs.w	r8, r2, r1
 80053b0:	4659      	mov	r1, fp
 80053b2:	eb63 0901 	sbc.w	r9, r3, r1
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053ca:	4690      	mov	r8, r2
 80053cc:	4699      	mov	r9, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	eb18 0303 	adds.w	r3, r8, r3
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	462b      	mov	r3, r5
 80053d8:	eb49 0303 	adc.w	r3, r9, r3
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80053ea:	4629      	mov	r1, r5
 80053ec:	024b      	lsls	r3, r1, #9
 80053ee:	4621      	mov	r1, r4
 80053f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053f4:	4621      	mov	r1, r4
 80053f6:	024a      	lsls	r2, r1, #9
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fe:	2200      	movs	r2, #0
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005402:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005404:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005408:	f7fb fc3e 	bl	8000c88 <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4613      	mov	r3, r2
 8005412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005414:	e058      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005416:	4b38      	ldr	r3, [pc, #224]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	2200      	movs	r2, #0
 800541e:	4618      	mov	r0, r3
 8005420:	4611      	mov	r1, r2
 8005422:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
 800542c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005430:	4642      	mov	r2, r8
 8005432:	464b      	mov	r3, r9
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	0159      	lsls	r1, r3, #5
 800543e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005442:	0150      	lsls	r0, r2, #5
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4641      	mov	r1, r8
 800544a:	ebb2 0a01 	subs.w	sl, r2, r1
 800544e:	4649      	mov	r1, r9
 8005450:	eb63 0b01 	sbc.w	fp, r3, r1
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005460:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005464:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005468:	ebb2 040a 	subs.w	r4, r2, sl
 800546c:	eb63 050b 	sbc.w	r5, r3, fp
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	00eb      	lsls	r3, r5, #3
 800547a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547e:	00e2      	lsls	r2, r4, #3
 8005480:	4614      	mov	r4, r2
 8005482:	461d      	mov	r5, r3
 8005484:	4643      	mov	r3, r8
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	464b      	mov	r3, r9
 800548c:	eb45 0303 	adc.w	r3, r5, r3
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800549e:	4629      	mov	r1, r5
 80054a0:	028b      	lsls	r3, r1, #10
 80054a2:	4621      	mov	r1, r4
 80054a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054a8:	4621      	mov	r1, r4
 80054aa:	028a      	lsls	r2, r1, #10
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b2:	2200      	movs	r2, #0
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	61fa      	str	r2, [r7, #28]
 80054b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054bc:	f7fb fbe4 	bl	8000c88 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4613      	mov	r3, r2
 80054c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80054c8:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	3301      	adds	r3, #1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80054d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e2:	e002      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x204>)
 80054e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3750      	adds	r7, #80	@ 0x50
 80054f0:	46bd      	mov	sp, r7
 80054f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	00f42400 	.word	0x00f42400
 8005500:	007a1200 	.word	0x007a1200

08005504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005508:	4b03      	ldr	r3, [pc, #12]	@ (8005518 <HAL_RCC_GetHCLKFreq+0x14>)
 800550a:	681b      	ldr	r3, [r3, #0]
}
 800550c:	4618      	mov	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	2000000c 	.word	0x2000000c

0800551c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005520:	f7ff fff0 	bl	8005504 <HAL_RCC_GetHCLKFreq>
 8005524:	4602      	mov	r2, r0
 8005526:	4b05      	ldr	r3, [pc, #20]	@ (800553c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	0a9b      	lsrs	r3, r3, #10
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005532:	5ccb      	ldrb	r3, [r1, r3]
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40023800 	.word	0x40023800
 8005540:	080130d0 	.word	0x080130d0

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e041      	b.n	80055da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fc fbec 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 faf6 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e04e      	b.n	800569a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a23      	ldr	r2, [pc, #140]	@ (80056a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d022      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005626:	d01d      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <HAL_TIM_Base_Start_IT+0xc8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d018      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00e      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a1b      	ldr	r2, [pc, #108]	@ (80056b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d009      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a19      	ldr	r2, [pc, #100]	@ (80056bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x80>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d111      	bne.n	8005688 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 0307 	and.w	r3, r3, #7
 800566e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b06      	cmp	r3, #6
 8005674:	d010      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005686:	e007      	b.n	8005698 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40001800 	.word	0x40001800

080056c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80056e6:	4013      	ands	r3, r2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10f      	bne.n	800570c <HAL_TIM_Base_Stop_IT+0x48>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a1a      	ldr	r2, [r3, #32]
 80056f2:	f240 4344 	movw	r3, #1092	@ 0x444
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_TIM_Base_Stop_IT+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e041      	b.n	80057b8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fc fadd 	bl	8001d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fa07 	bl	8005b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2201      	movs	r2, #1
 800576a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d020      	beq.n	8005824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01b      	beq.n	8005824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0202 	mvn.w	r2, #2
 80057f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f994 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f986 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f997 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0304 	and.w	r3, r3, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d020      	beq.n	8005870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0204 	mvn.w	r2, #4
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f96e 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f960 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f971 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d020      	beq.n	80058bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01b      	beq.n	80058bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0208 	mvn.w	r2, #8
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2204      	movs	r2, #4
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f948 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f93a 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f94b 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d020      	beq.n	8005908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01b      	beq.n	8005908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0210 	mvn.w	r2, #16
 80058d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2208      	movs	r2, #8
 80058de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f922 	bl	8005b38 <HAL_TIM_IC_CaptureCallback>
 80058f4:	e005      	b.n	8005902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f914 	bl	8005b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f925 	bl	8005b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00c      	beq.n	800592c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f06f 0201 	mvn.w	r2, #1
 8005924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f007 fba6 	bl	800d078 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fbf4 	bl	8006138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800596c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f8f6 	bl	8005b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0320 	and.w	r3, r3, #32
 8005984:	2b00      	cmp	r3, #0
 8005986:	d007      	beq.n	8005998 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0220 	mvn.w	r2, #32
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fbc6 	bl	8006124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0ae      	b.n	8005b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	f200 809f 	bhi.w	8005b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005b0d 	.word	0x08005b0d
 80059dc:	08005b0d 	.word	0x08005b0d
 80059e0:	08005b0d 	.word	0x08005b0d
 80059e4:	08005a49 	.word	0x08005a49
 80059e8:	08005b0d 	.word	0x08005b0d
 80059ec:	08005b0d 	.word	0x08005b0d
 80059f0:	08005b0d 	.word	0x08005b0d
 80059f4:	08005a8b 	.word	0x08005a8b
 80059f8:	08005b0d 	.word	0x08005b0d
 80059fc:	08005b0d 	.word	0x08005b0d
 8005a00:	08005b0d 	.word	0x08005b0d
 8005a04:	08005acb 	.word	0x08005acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f95c 	bl	8005ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	619a      	str	r2, [r3, #24]
      break;
 8005a46:	e064      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f9ac 	bl	8005dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]
      break;
 8005a88:	e043      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fa01 	bl	8005e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
      break;
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fa55 	bl	8005f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	61da      	str	r2, [r3, #28]
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a46      	ldr	r2, [pc, #280]	@ (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b92:	d00f      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a43      	ldr	r2, [pc, #268]	@ (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00b      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a42      	ldr	r2, [pc, #264]	@ (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d007      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a41      	ldr	r2, [pc, #260]	@ (8005cac <TIM_Base_SetConfig+0x138>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a40      	ldr	r2, [pc, #256]	@ (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d108      	bne.n	8005bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a35      	ldr	r2, [pc, #212]	@ (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d02b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bd4:	d027      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a32      	ldr	r2, [pc, #200]	@ (8005ca4 <TIM_Base_SetConfig+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d023      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a31      	ldr	r2, [pc, #196]	@ (8005ca8 <TIM_Base_SetConfig+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a30      	ldr	r2, [pc, #192]	@ (8005cac <TIM_Base_SetConfig+0x138>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb4 <TIM_Base_SetConfig+0x140>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <TIM_Base_SetConfig+0x144>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a2c      	ldr	r2, [pc, #176]	@ (8005cbc <TIM_Base_SetConfig+0x148>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc0 <TIM_Base_SetConfig+0x14c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2a      	ldr	r2, [pc, #168]	@ (8005cc4 <TIM_Base_SetConfig+0x150>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0xb2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a29      	ldr	r2, [pc, #164]	@ (8005cc8 <TIM_Base_SetConfig+0x154>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	@ (8005ca0 <TIM_Base_SetConfig+0x12c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a12      	ldr	r2, [pc, #72]	@ (8005cb0 <TIM_Base_SetConfig+0x13c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d105      	bne.n	8005c92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	611a      	str	r2, [r3, #16]
  }
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40010400 	.word	0x40010400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800
 8005cc0:	40001800 	.word	0x40001800
 8005cc4:	40001c00 	.word	0x40001c00
 8005cc8:	40002000 	.word	0x40002000

08005ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f023 0201 	bic.w	r2, r3, #1
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f023 0302 	bic.w	r3, r3, #2
 8005d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a20      	ldr	r2, [pc, #128]	@ (8005da4 <TIM_OC1_SetConfig+0xd8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_OC1_SetConfig+0x64>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <TIM_OC1_SetConfig+0xdc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d10c      	bne.n	8005d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0308 	bic.w	r3, r3, #8
 8005d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f023 0304 	bic.w	r3, r3, #4
 8005d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <TIM_OC1_SetConfig+0xd8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC1_SetConfig+0x8e>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a14      	ldr	r2, [pc, #80]	@ (8005da8 <TIM_OC1_SetConfig+0xdc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d111      	bne.n	8005d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	621a      	str	r2, [r3, #32]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40010400 	.word	0x40010400

08005dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	f023 0210 	bic.w	r2, r3, #16
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0320 	bic.w	r3, r3, #32
 8005df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a22      	ldr	r2, [pc, #136]	@ (8005e90 <TIM_OC2_SetConfig+0xe4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC2_SetConfig+0x68>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a21      	ldr	r2, [pc, #132]	@ (8005e94 <TIM_OC2_SetConfig+0xe8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d10d      	bne.n	8005e30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a17      	ldr	r2, [pc, #92]	@ (8005e90 <TIM_OC2_SetConfig+0xe4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC2_SetConfig+0x94>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	@ (8005e94 <TIM_OC2_SetConfig+0xe8>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d113      	bne.n	8005e68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40010400 	.word	0x40010400

08005e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0303 	bic.w	r3, r3, #3
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a21      	ldr	r2, [pc, #132]	@ (8005f78 <TIM_OC3_SetConfig+0xe0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC3_SetConfig+0x66>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a20      	ldr	r2, [pc, #128]	@ (8005f7c <TIM_OC3_SetConfig+0xe4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10d      	bne.n	8005f1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	@ (8005f78 <TIM_OC3_SetConfig+0xe0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d003      	beq.n	8005f2a <TIM_OC3_SetConfig+0x92>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a15      	ldr	r2, [pc, #84]	@ (8005f7c <TIM_OC3_SetConfig+0xe4>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d113      	bne.n	8005f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40010400 	.word	0x40010400

08005f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	031b      	lsls	r3, r3, #12
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a12      	ldr	r2, [pc, #72]	@ (8006024 <TIM_OC4_SetConfig+0xa4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_OC4_SetConfig+0x68>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <TIM_OC4_SetConfig+0xa8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d109      	bne.n	8005ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	697a      	ldr	r2, [r7, #20]
 8006000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	621a      	str	r2, [r3, #32]
}
 8006016:	bf00      	nop
 8006018:	371c      	adds	r7, #28
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006040:	2302      	movs	r3, #2
 8006042:	e05a      	b.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800606a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a21      	ldr	r2, [pc, #132]	@ (8006108 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006090:	d01d      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1d      	ldr	r2, [pc, #116]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a18      	ldr	r2, [pc, #96]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a17      	ldr	r2, [pc, #92]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a15      	ldr	r2, [pc, #84]	@ (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d10c      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40010000 	.word	0x40010000
 800610c:	40000400 	.word	0x40000400
 8006110:	40000800 	.word	0x40000800
 8006114:	40000c00 	.word	0x40000c00
 8006118:	40010400 	.word	0x40010400
 800611c:	40014000 	.word	0x40014000
 8006120:	40001800 	.word	0x40001800

08006124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800614c:	b084      	sub	sp, #16
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	f107 001c 	add.w	r0, r7, #28
 800615a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800615e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006162:	2b01      	cmp	r3, #1
 8006164:	d123      	bne.n	80061ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800617a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800618e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006192:	2b01      	cmp	r3, #1
 8006194:	d105      	bne.n	80061a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 fae8 	bl	8007778 <USB_CoreReset>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	e01b      	b.n	80061e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fadc 	bl	8007778 <USB_CoreReset>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80061d8:	e005      	b.n	80061e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061e6:	7fbb      	ldrb	r3, [r7, #30]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d10b      	bne.n	8006204 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f043 0206 	orr.w	r2, r3, #6
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006210:	b004      	add	sp, #16
 8006212:	4770      	bx	lr

08006214 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d165      	bne.n	80062f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a41      	ldr	r2, [pc, #260]	@ (8006330 <USB_SetTurnaroundTime+0x11c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d906      	bls.n	800623e <USB_SetTurnaroundTime+0x2a>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4a40      	ldr	r2, [pc, #256]	@ (8006334 <USB_SetTurnaroundTime+0x120>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d202      	bcs.n	800623e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006238:	230f      	movs	r3, #15
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e062      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a3c      	ldr	r2, [pc, #240]	@ (8006334 <USB_SetTurnaroundTime+0x120>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d306      	bcc.n	8006254 <USB_SetTurnaroundTime+0x40>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a3b      	ldr	r2, [pc, #236]	@ (8006338 <USB_SetTurnaroundTime+0x124>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d202      	bcs.n	8006254 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800624e:	230e      	movs	r3, #14
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e057      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a38      	ldr	r2, [pc, #224]	@ (8006338 <USB_SetTurnaroundTime+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d306      	bcc.n	800626a <USB_SetTurnaroundTime+0x56>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a37      	ldr	r2, [pc, #220]	@ (800633c <USB_SetTurnaroundTime+0x128>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d202      	bcs.n	800626a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006264:	230d      	movs	r3, #13
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e04c      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a33      	ldr	r2, [pc, #204]	@ (800633c <USB_SetTurnaroundTime+0x128>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d306      	bcc.n	8006280 <USB_SetTurnaroundTime+0x6c>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a32      	ldr	r2, [pc, #200]	@ (8006340 <USB_SetTurnaroundTime+0x12c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d802      	bhi.n	8006280 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800627a:	230c      	movs	r3, #12
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e041      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a2f      	ldr	r2, [pc, #188]	@ (8006340 <USB_SetTurnaroundTime+0x12c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d906      	bls.n	8006296 <USB_SetTurnaroundTime+0x82>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a2e      	ldr	r2, [pc, #184]	@ (8006344 <USB_SetTurnaroundTime+0x130>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d802      	bhi.n	8006296 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006290:	230b      	movs	r3, #11
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e036      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a2a      	ldr	r2, [pc, #168]	@ (8006344 <USB_SetTurnaroundTime+0x130>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d906      	bls.n	80062ac <USB_SetTurnaroundTime+0x98>
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4a29      	ldr	r2, [pc, #164]	@ (8006348 <USB_SetTurnaroundTime+0x134>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d802      	bhi.n	80062ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062a6:	230a      	movs	r3, #10
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	e02b      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a26      	ldr	r2, [pc, #152]	@ (8006348 <USB_SetTurnaroundTime+0x134>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d906      	bls.n	80062c2 <USB_SetTurnaroundTime+0xae>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	4a25      	ldr	r2, [pc, #148]	@ (800634c <USB_SetTurnaroundTime+0x138>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d202      	bcs.n	80062c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062bc:	2309      	movs	r3, #9
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e020      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a21      	ldr	r2, [pc, #132]	@ (800634c <USB_SetTurnaroundTime+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d306      	bcc.n	80062d8 <USB_SetTurnaroundTime+0xc4>
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4a20      	ldr	r2, [pc, #128]	@ (8006350 <USB_SetTurnaroundTime+0x13c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d802      	bhi.n	80062d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062d2:	2308      	movs	r3, #8
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e015      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a1d      	ldr	r2, [pc, #116]	@ (8006350 <USB_SetTurnaroundTime+0x13c>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d906      	bls.n	80062ee <USB_SetTurnaroundTime+0xda>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006354 <USB_SetTurnaroundTime+0x140>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d202      	bcs.n	80062ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062e8:	2307      	movs	r3, #7
 80062ea:	617b      	str	r3, [r7, #20]
 80062ec:	e00a      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062ee:	2306      	movs	r3, #6
 80062f0:	617b      	str	r3, [r7, #20]
 80062f2:	e007      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062fa:	2309      	movs	r3, #9
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	e001      	b.n	8006304 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006300:	2309      	movs	r3, #9
 8006302:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	029b      	lsls	r3, r3, #10
 8006318:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	00d8acbf 	.word	0x00d8acbf
 8006334:	00e4e1c0 	.word	0x00e4e1c0
 8006338:	00f42400 	.word	0x00f42400
 800633c:	01067380 	.word	0x01067380
 8006340:	011a499f 	.word	0x011a499f
 8006344:	01312cff 	.word	0x01312cff
 8006348:	014ca43f 	.word	0x014ca43f
 800634c:	016e3600 	.word	0x016e3600
 8006350:	01a6ab1f 	.word	0x01a6ab1f
 8006354:	01e84800 	.word	0x01e84800

08006358 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f043 0201 	orr.w	r2, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f023 0201 	bic.w	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d115      	bne.n	80063ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063ca:	200a      	movs	r0, #10
 80063cc:	f7fb fed4 	bl	8002178 <HAL_Delay>
      ms += 10U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	330a      	adds	r3, #10
 80063d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 f93f 	bl	800765a <USB_GetMode>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d01e      	beq.n	8006420 <USB_SetCurrentMode+0x84>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80063e6:	d9f0      	bls.n	80063ca <USB_SetCurrentMode+0x2e>
 80063e8:	e01a      	b.n	8006420 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d115      	bne.n	800641c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063fc:	200a      	movs	r0, #10
 80063fe:	f7fb febb 	bl	8002178 <HAL_Delay>
      ms += 10U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	330a      	adds	r3, #10
 8006406:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f001 f926 	bl	800765a <USB_GetMode>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <USB_SetCurrentMode+0x84>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2bc7      	cmp	r3, #199	@ 0xc7
 8006418:	d9f0      	bls.n	80063fc <USB_SetCurrentMode+0x60>
 800641a:	e001      	b.n	8006420 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e005      	b.n	800642c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2bc8      	cmp	r3, #200	@ 0xc8
 8006424:	d101      	bne.n	800642a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006434:	b084      	sub	sp, #16
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	e009      	b.n	8006468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3340      	adds	r3, #64	@ 0x40
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3301      	adds	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b0e      	cmp	r3, #14
 800646c:	d9f2      	bls.n	8006454 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800646e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11c      	bne.n	80064b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006484:	f043 0302 	orr.w	r3, r3, #2
 8006488:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800649a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80064ae:	e00b      	b.n	80064c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064ce:	461a      	mov	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d10d      	bne.n	80064f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064e4:	2100      	movs	r1, #0
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f968 	bl	80067bc <USB_SetDevSpeed>
 80064ec:	e008      	b.n	8006500 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064ee:	2101      	movs	r1, #1
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f963 	bl	80067bc <USB_SetDevSpeed>
 80064f6:	e003      	b.n	8006500 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064f8:	2103      	movs	r1, #3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f95e 	bl	80067bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006500:	2110      	movs	r1, #16
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8fa 	bl	80066fc <USB_FlushTxFifo>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f924 	bl	8006760 <USB_FlushRxFifo>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006528:	461a      	mov	r2, r3
 800652a:	2300      	movs	r3, #0
 800652c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	461a      	mov	r2, r3
 8006536:	2300      	movs	r3, #0
 8006538:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	e043      	b.n	80065d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800655e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006562:	d118      	bne.n	8006596 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006576:	461a      	mov	r2, r3
 8006578:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	e013      	b.n	80065a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658c:	461a      	mov	r2, r3
 800658e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	e008      	b.n	80065a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a2:	461a      	mov	r2, r3
 80065a4:	2300      	movs	r3, #0
 80065a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b4:	461a      	mov	r2, r3
 80065b6:	2300      	movs	r3, #0
 80065b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	015a      	lsls	r2, r3, #5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4413      	add	r3, r2
 80065c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c6:	461a      	mov	r2, r3
 80065c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3301      	adds	r3, #1
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065d8:	461a      	mov	r2, r3
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d3b5      	bcc.n	800654c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	e043      	b.n	800666e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065fc:	d118      	bne.n	8006630 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006610:	461a      	mov	r2, r3
 8006612:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e013      	b.n	8006642 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e008      	b.n	8006642 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663c:	461a      	mov	r2, r3
 800663e:	2300      	movs	r3, #0
 8006640:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664e:	461a      	mov	r2, r3
 8006650:	2300      	movs	r3, #0
 8006652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006660:	461a      	mov	r2, r3
 8006662:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006666:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3301      	adds	r3, #1
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006672:	461a      	mov	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4293      	cmp	r3, r2
 8006678:	d3b5      	bcc.n	80065e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800668c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800669a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800669c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d105      	bne.n	80066b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 0210 	orr.w	r2, r3, #16
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <USB_DevInit+0x2c4>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f043 0208 	orr.w	r2, r3, #8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066e0:	f043 0304 	orr.w	r3, r3, #4
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f4:	b004      	add	sp, #16
 80066f6:	4770      	bx	lr
 80066f8:	803c3800 	.word	0x803c3800

080066fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3301      	adds	r3, #1
 800670e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006716:	d901      	bls.n	800671c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e01b      	b.n	8006754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	daf2      	bge.n	800670a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	019b      	lsls	r3, r3, #6
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3301      	adds	r3, #1
 8006738:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006740:	d901      	bls.n	8006746 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e006      	b.n	8006754 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b20      	cmp	r3, #32
 8006750:	d0f0      	beq.n	8006734 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006778:	d901      	bls.n	800677e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e018      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	daf2      	bge.n	800676c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2210      	movs	r2, #16
 800678e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	3301      	adds	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800679c:	d901      	bls.n	80067a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e006      	b.n	80067b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0310 	and.w	r3, r3, #16
 80067aa:	2b10      	cmp	r3, #16
 80067ac:	d0f0      	beq.n	8006790 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3714      	adds	r7, #20
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 0306 	and.w	r3, r3, #6
 8006806:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
 8006812:	e00a      	b.n	800682a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d002      	beq.n	8006820 <USB_GetDevSpeed+0x32>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b06      	cmp	r3, #6
 800681e:	d102      	bne.n	8006826 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006820:	2302      	movs	r3, #2
 8006822:	75fb      	strb	r3, [r7, #23]
 8006824:	e001      	b.n	800682a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006826:	230f      	movs	r3, #15
 8006828:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800682a:	7dfb      	ldrb	r3, [r7, #23]
}
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d13a      	bne.n	80068ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	2101      	movs	r1, #1
 8006866:	fa01 f303 	lsl.w	r3, r1, r3
 800686a:	b29b      	uxth	r3, r3
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006872:	4313      	orrs	r3, r2
 8006874:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d155      	bne.n	8006938 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	791b      	ldrb	r3, [r3, #4]
 80068a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	059b      	lsls	r3, r3, #22
 80068ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068b0:	4313      	orrs	r3, r2
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068c6:	6013      	str	r3, [r2, #0]
 80068c8:	e036      	b.n	8006938 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068d0:	69da      	ldr	r2, [r3, #28]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	2101      	movs	r1, #1
 80068dc:	fa01 f303 	lsl.w	r3, r1, r3
 80068e0:	041b      	lsls	r3, r3, #16
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068e8:	4313      	orrs	r3, r2
 80068ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d11a      	bne.n	8006938 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	791b      	ldrb	r3, [r3, #4]
 800691c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800691e:	430b      	orrs	r3, r1
 8006920:	4313      	orrs	r3, r2
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	440a      	add	r2, r1
 800692a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800692e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006936:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
	...

08006948 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d161      	bne.n	8006a28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800697a:	d11f      	bne.n	80069bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	440a      	add	r2, r1
 8006992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006996:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800699a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	2101      	movs	r1, #1
 80069ce:	fa01 f303 	lsl.w	r3, r1, r3
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	43db      	mvns	r3, r3
 80069d6:	68f9      	ldr	r1, [r7, #12]
 80069d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069dc:	4013      	ands	r3, r2
 80069de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f303 	lsl.w	r3, r1, r3
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	43db      	mvns	r3, r3
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a00:	4013      	ands	r3, r2
 8006a02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	0159      	lsls	r1, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	440b      	add	r3, r1
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4b35      	ldr	r3, [pc, #212]	@ (8006af8 <USB_DeactivateEndpoint+0x1b0>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]
 8006a26:	e060      	b.n	8006aea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a3e:	d11f      	bne.n	8006a80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	43db      	mvns	r3, r3
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	0159      	lsls	r1, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <USB_DeactivateEndpoint+0x1b4>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	ec337800 	.word	0xec337800
 8006afc:	eff37800 	.word	0xeff37800

08006b00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	f040 817f 	bne.w	8006e20 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d132      	bne.n	8006b90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	0151      	lsls	r1, r2, #5
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	440a      	add	r2, r1
 8006b84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b88:	0cdb      	lsrs	r3, r3, #19
 8006b8a:	04db      	lsls	r3, r3, #19
 8006b8c:	6113      	str	r3, [r2, #16]
 8006b8e:	e097      	b.n	8006cc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	015a      	lsls	r2, r3, #5
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	4413      	add	r3, r2
 8006b98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	69fa      	ldr	r2, [r7, #28]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006baa:	0cdb      	lsrs	r3, r3, #19
 8006bac:	04db      	lsls	r3, r3, #19
 8006bae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	69fa      	ldr	r2, [r7, #28]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bd2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d11a      	bne.n	8006c10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691a      	ldr	r2, [r3, #16]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d903      	bls.n	8006bee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c0c:	6113      	str	r3, [r2, #16]
 8006c0e:	e044      	b.n	8006c9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4413      	add	r3, r2
 8006c1a:	1e5a      	subs	r2, r3, #1
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	8afb      	ldrh	r3, [r7, #22]
 8006c36:	04d9      	lsls	r1, r3, #19
 8006c38:	4ba4      	ldr	r3, [pc, #656]	@ (8006ecc <USB_EPStartXfer+0x3cc>)
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	69b9      	ldr	r1, [r7, #24]
 8006c3e:	0148      	lsls	r0, r1, #5
 8006c40:	69f9      	ldr	r1, [r7, #28]
 8006c42:	4401      	add	r1, r0
 8006c44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d122      	bne.n	8006c9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	0151      	lsls	r1, r2, #5
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	440a      	add	r2, r1
 8006c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	691a      	ldr	r2, [r3, #16]
 8006c82:	8afb      	ldrh	r3, [r7, #22]
 8006c84:	075b      	lsls	r3, r3, #29
 8006c86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006c8a:	69b9      	ldr	r1, [r7, #24]
 8006c8c:	0148      	lsls	r0, r1, #5
 8006c8e:	69f9      	ldr	r1, [r7, #28]
 8006c90:	4401      	add	r1, r0
 8006c92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c96:	4313      	orrs	r3, r2
 8006c98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb0:	69b9      	ldr	r1, [r7, #24]
 8006cb2:	0148      	lsls	r0, r1, #5
 8006cb4:	69f9      	ldr	r1, [r7, #28]
 8006cb6:	4401      	add	r1, r0
 8006cb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d14b      	bne.n	8006d5e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	791b      	ldrb	r3, [r3, #4]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d128      	bne.n	8006d3c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d110      	bne.n	8006d1c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	015a      	lsls	r2, r3, #5
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	4413      	add	r3, r2
 8006d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d18:	6013      	str	r3, [r2, #0]
 8006d1a:	e00f      	b.n	8006d3c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d3a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d56:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	e166      	b.n	800702c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	015a      	lsls	r2, r3, #5
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	4413      	add	r3, r2
 8006d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	0151      	lsls	r1, r2, #5
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	440a      	add	r2, r1
 8006d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d7c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	791b      	ldrb	r3, [r3, #4]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d015      	beq.n	8006db2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 814e 	beq.w	800702c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f303 	lsl.w	r3, r1, r3
 8006da6:	69f9      	ldr	r1, [r7, #28]
 8006da8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dac:	4313      	orrs	r3, r2
 8006dae:	634b      	str	r3, [r1, #52]	@ 0x34
 8006db0:	e13c      	b.n	800702c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d110      	bne.n	8006de4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69ba      	ldr	r2, [r7, #24]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ddc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	e00f      	b.n	8006e04 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	68d9      	ldr	r1, [r3, #12]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	781a      	ldrb	r2, [r3, #0]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	b298      	uxth	r0, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4603      	mov	r3, r0
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f9b9 	bl	8007190 <USB_WritePacket>
 8006e1e:	e105      	b.n	800702c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3a:	0cdb      	lsrs	r3, r3, #19
 8006e3c:	04db      	lsls	r3, r3, #19
 8006e3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e62:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d132      	bne.n	8006ed0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ec6:	6113      	str	r3, [r2, #16]
 8006ec8:	e062      	b.n	8006f90 <USB_EPStartXfer+0x490>
 8006eca:	bf00      	nop
 8006ecc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d123      	bne.n	8006f20 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee4:	691a      	ldr	r2, [r3, #16]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eee:	69b9      	ldr	r1, [r7, #24]
 8006ef0:	0148      	lsls	r0, r1, #5
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	4401      	add	r1, r0
 8006ef6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006efa:	4313      	orrs	r3, r2
 8006efc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	0151      	lsls	r1, r2, #5
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	440a      	add	r2, r1
 8006f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f1c:	6113      	str	r3, [r2, #16]
 8006f1e:	e037      	b.n	8006f90 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	4413      	add	r3, r2
 8006f2a:	1e5a      	subs	r2, r3, #1
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	8afa      	ldrh	r2, [r7, #22]
 8006f3c:	fb03 f202 	mul.w	r2, r3, r2
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	8afb      	ldrh	r3, [r7, #22]
 8006f54:	04d9      	lsls	r1, r3, #19
 8006f56:	4b38      	ldr	r3, [pc, #224]	@ (8007038 <USB_EPStartXfer+0x538>)
 8006f58:	400b      	ands	r3, r1
 8006f5a:	69b9      	ldr	r1, [r7, #24]
 8006f5c:	0148      	lsls	r0, r1, #5
 8006f5e:	69f9      	ldr	r1, [r7, #28]
 8006f60:	4401      	add	r1, r0
 8006f62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f66:	4313      	orrs	r3, r2
 8006f68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f76:	691a      	ldr	r2, [r3, #16]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f80:	69b9      	ldr	r1, [r7, #24]
 8006f82:	0148      	lsls	r0, r1, #5
 8006f84:	69f9      	ldr	r1, [r7, #28]
 8006f86:	4401      	add	r1, r0
 8006f88:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10d      	bne.n	8006fb2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	68d9      	ldr	r1, [r3, #12]
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fae:	460a      	mov	r2, r1
 8006fb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	791b      	ldrb	r3, [r3, #4]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d128      	bne.n	800700c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d110      	bne.n	8006fec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fe4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e00f      	b.n	800700c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800700a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007026:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800702a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	1ff80000 	.word	0x1ff80000

0800703c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	785b      	ldrb	r3, [r3, #1]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d14a      	bne.n	80070f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800706e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007072:	f040 8086 	bne.w	8007182 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	7812      	ldrb	r2, [r2, #0]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007094:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007098:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d902      	bls.n	80070d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
          break;
 80070d2:	e056      	b.n	8007182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070ec:	d0e7      	beq.n	80070be <USB_EPStopXfer+0x82>
 80070ee:	e048      	b.n	8007182 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007108:	d13b      	bne.n	8007182 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	440a      	add	r2, r1
 8007124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007128:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800712c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800714c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3301      	adds	r3, #1
 8007156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800715e:	4293      	cmp	r3, r2
 8007160:	d902      	bls.n	8007168 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	75fb      	strb	r3, [r7, #23]
          break;
 8007166:	e00c      	b.n	8007182 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800717c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007180:	d0e7      	beq.n	8007152 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
}
 8007184:	4618      	mov	r0, r3
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007190:	b480      	push	{r7}
 8007192:	b089      	sub	sp, #36	@ 0x24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	460b      	mov	r3, r1
 80071a0:	71fb      	strb	r3, [r7, #7]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d123      	bne.n	80071fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071b6:	88bb      	ldrh	r3, [r7, #4]
 80071b8:	3303      	adds	r3, #3
 80071ba:	089b      	lsrs	r3, r3, #2
 80071bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
 80071c2:	e018      	b.n	80071f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	031a      	lsls	r2, r3, #12
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071d0:	461a      	mov	r2, r3
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3301      	adds	r3, #1
 80071dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	3301      	adds	r3, #1
 80071e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	3301      	adds	r3, #1
 80071ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	3301      	adds	r3, #1
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d3e2      	bcc.n	80071c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3724      	adds	r7, #36	@ 0x24
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800720c:	b480      	push	{r7}
 800720e:	b08b      	sub	sp, #44	@ 0x2c
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	089b      	lsrs	r3, r3, #2
 8007226:	b29b      	uxth	r3, r3
 8007228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	e014      	b.n	8007262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007242:	601a      	str	r2, [r3, #0]
    pDest++;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	3301      	adds	r3, #1
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	3301      	adds	r3, #1
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	3301      	adds	r3, #1
 8007254:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	3301      	adds	r3, #1
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800725c:	6a3b      	ldr	r3, [r7, #32]
 800725e:	3301      	adds	r3, #1
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	6a3a      	ldr	r2, [r7, #32]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	429a      	cmp	r2, r3
 8007268:	d3e6      	bcc.n	8007238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800726a:	8bfb      	ldrh	r3, [r7, #30]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800727a:	461a      	mov	r2, r3
 800727c:	f107 0310 	add.w	r3, r7, #16
 8007280:	6812      	ldr	r2, [r2, #0]
 8007282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	fa22 f303 	lsr.w	r3, r2, r3
 8007290:	b2da      	uxtb	r2, r3
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	701a      	strb	r2, [r3, #0]
      i++;
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	3301      	adds	r3, #1
 800729a:	623b      	str	r3, [r7, #32]
      pDest++;
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	3301      	adds	r3, #1
 80072a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072a2:	8bfb      	ldrh	r3, [r7, #30]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072a8:	8bfb      	ldrh	r3, [r7, #30]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1ea      	bne.n	8007284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	372c      	adds	r7, #44	@ 0x2c
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d12c      	bne.n	8007332 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	db12      	blt.n	8007310 <USB_EPSetStall+0x54>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00f      	beq.n	8007310 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800730a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800730e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	0151      	lsls	r1, r2, #5
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	440a      	add	r2, r1
 8007326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e02b      	b.n	800738a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	db12      	blt.n	800736a <USB_EPSetStall+0xae>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00f      	beq.n	800736a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007364:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007368:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007388:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	785b      	ldrb	r3, [r3, #1]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d128      	bne.n	8007406 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	791b      	ldrb	r3, [r3, #4]
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d003      	beq.n	80073e4 <USB_EPClearStall+0x4c>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d138      	bne.n	8007456 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e027      	b.n	8007456 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007420:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007424:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d003      	beq.n	8007436 <USB_EPClearStall+0x9e>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d10f      	bne.n	8007456 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007454:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	460b      	mov	r3, r1
 800746e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007482:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007486:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800749e:	4313      	orrs	r3, r2
 80074a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074de:	f023 0302 	bic.w	r3, r3, #2
 80074e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800750c:	f023 0303 	bic.w	r3, r3, #3
 8007510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007520:	f043 0302 	orr.w	r3, r3, #2
 8007524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4013      	ands	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800754c:	68fb      	ldr	r3, [r7, #12]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007576:	69db      	ldr	r3, [r3, #28]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	4013      	ands	r3, r2
 800757c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	0c1b      	lsrs	r3, r3, #16
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800758e:	b480      	push	{r7}
 8007590:	b085      	sub	sp, #20
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4013      	ands	r3, r2
 80075b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	b29b      	uxth	r3, r3
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4013      	ands	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075f0:	68bb      	ldr	r3, [r7, #8]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075fe:	b480      	push	{r7}
 8007600:	b087      	sub	sp, #28
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007620:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007622:	78fb      	ldrb	r3, [r7, #3]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	fa22 f303 	lsr.w	r3, r2, r3
 800762e:	01db      	lsls	r3, r3, #7
 8007630:	b2db      	uxtb	r3, r3
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4013      	ands	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800764c:	68bb      	ldr	r3, [r7, #8]
}
 800764e:	4618      	mov	r0, r3
 8007650:	371c      	adds	r7, #28
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	f003 0301 	and.w	r3, r3, #1
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr

08007676 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007676:	b480      	push	{r7}
 8007678:	b085      	sub	sp, #20
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68fa      	ldr	r2, [r7, #12]
 800768c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007690:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007694:	f023 0307 	bic.w	r3, r3, #7
 8007698:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	460b      	mov	r3, r1
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	333c      	adds	r3, #60	@ 0x3c
 80076d2:	3304      	adds	r3, #4
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4a26      	ldr	r2, [pc, #152]	@ (8007774 <USB_EP0_OutStart+0xb8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d90a      	bls.n	80076f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f0:	d101      	bne.n	80076f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e037      	b.n	8007766 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fc:	461a      	mov	r2, r3
 80076fe:	2300      	movs	r3, #0
 8007700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007710:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007724:	f043 0318 	orr.w	r3, r3, #24
 8007728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007738:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800773c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800773e:	7afb      	ldrb	r3, [r7, #11]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d10f      	bne.n	8007764 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800775e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	4f54300a 	.word	0x4f54300a

08007778 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007790:	d901      	bls.n	8007796 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e01b      	b.n	80077ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	daf2      	bge.n	8007784 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f043 0201 	orr.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3301      	adds	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ba:	d901      	bls.n	80077c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e006      	b.n	80077ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d0f0      	beq.n	80077ae <USB_CoreReset+0x36>

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80077e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80077ec:	f006 fca4 	bl	800e138 <USBD_static_malloc>
 80077f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d109      	bne.n	800780c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	@ 0xb0
 8007802:	2100      	movs	r1, #0
 8007804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007808:	2302      	movs	r3, #2
 800780a:	e0d4      	b.n	80079b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800780c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007810:	2100      	movs	r1, #0
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f007 fd64 	bl	800f2e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32b0      	adds	r2, #176	@ 0xb0
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32b0      	adds	r2, #176	@ 0xb0
 8007832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7c1b      	ldrb	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d138      	bne.n	80078b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007844:	4b5e      	ldr	r3, [pc, #376]	@ (80079c0 <USBD_CDC_Init+0x1e4>)
 8007846:	7819      	ldrb	r1, [r3, #0]
 8007848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800784c:	2202      	movs	r2, #2
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f006 fb4f 	bl	800def2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007854:	4b5a      	ldr	r3, [pc, #360]	@ (80079c0 <USBD_CDC_Init+0x1e4>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f003 020f 	and.w	r2, r3, #15
 800785c:	6879      	ldr	r1, [r7, #4]
 800785e:	4613      	mov	r3, r2
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	440b      	add	r3, r1
 8007868:	3324      	adds	r3, #36	@ 0x24
 800786a:	2201      	movs	r2, #1
 800786c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800786e:	4b55      	ldr	r3, [pc, #340]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 8007870:	7819      	ldrb	r1, [r3, #0]
 8007872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007876:	2202      	movs	r2, #2
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f006 fb3a 	bl	800def2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800787e:	4b51      	ldr	r3, [pc, #324]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 020f 	and.w	r2, r3, #15
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	440b      	add	r3, r1
 8007892:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007896:	2201      	movs	r2, #1
 8007898:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800789a:	4b4b      	ldr	r3, [pc, #300]	@ (80079c8 <USBD_CDC_Init+0x1ec>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 020f 	and.w	r2, r3, #15
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	4613      	mov	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4413      	add	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	440b      	add	r3, r1
 80078ae:	3326      	adds	r3, #38	@ 0x26
 80078b0:	2210      	movs	r2, #16
 80078b2:	801a      	strh	r2, [r3, #0]
 80078b4:	e035      	b.n	8007922 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078b6:	4b42      	ldr	r3, [pc, #264]	@ (80079c0 <USBD_CDC_Init+0x1e4>)
 80078b8:	7819      	ldrb	r1, [r3, #0]
 80078ba:	2340      	movs	r3, #64	@ 0x40
 80078bc:	2202      	movs	r2, #2
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f006 fb17 	bl	800def2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078c4:	4b3e      	ldr	r3, [pc, #248]	@ (80079c0 <USBD_CDC_Init+0x1e4>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 020f 	and.w	r2, r3, #15
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	3324      	adds	r3, #36	@ 0x24
 80078da:	2201      	movs	r2, #1
 80078dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078de:	4b39      	ldr	r3, [pc, #228]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 80078e0:	7819      	ldrb	r1, [r3, #0]
 80078e2:	2340      	movs	r3, #64	@ 0x40
 80078e4:	2202      	movs	r2, #2
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f006 fb03 	bl	800def2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078ec:	4b35      	ldr	r3, [pc, #212]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	f003 020f 	and.w	r2, r3, #15
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007904:	2201      	movs	r2, #1
 8007906:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007908:	4b2f      	ldr	r3, [pc, #188]	@ (80079c8 <USBD_CDC_Init+0x1ec>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	f003 020f 	and.w	r2, r3, #15
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	3326      	adds	r3, #38	@ 0x26
 800791e:	2210      	movs	r2, #16
 8007920:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007922:	4b29      	ldr	r3, [pc, #164]	@ (80079c8 <USBD_CDC_Init+0x1ec>)
 8007924:	7819      	ldrb	r1, [r3, #0]
 8007926:	2308      	movs	r3, #8
 8007928:	2203      	movs	r2, #3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f006 fae1 	bl	800def2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007930:	4b25      	ldr	r3, [pc, #148]	@ (80079c8 <USBD_CDC_Init+0x1ec>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	3324      	adds	r3, #36	@ 0x24
 8007946:	2201      	movs	r2, #1
 8007948:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	33b0      	adds	r3, #176	@ 0xb0
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007980:	2302      	movs	r3, #2
 8007982:	e018      	b.n	80079b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7c1b      	ldrb	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10a      	bne.n	80079a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800798c:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 800798e:	7819      	ldrb	r1, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007996:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f006 fb98 	bl	800e0d0 <USBD_LL_PrepareReceive>
 80079a0:	e008      	b.n	80079b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079a2:	4b08      	ldr	r3, [pc, #32]	@ (80079c4 <USBD_CDC_Init+0x1e8>)
 80079a4:	7819      	ldrb	r1, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079ac:	2340      	movs	r3, #64	@ 0x40
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f006 fb8e 	bl	800e0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	2000009f 	.word	0x2000009f
 80079c4:	200000a0 	.word	0x200000a0
 80079c8:	200000a1 	.word	0x200000a1

080079cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80079d8:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac4 <USBD_CDC_DeInit+0xf8>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	4619      	mov	r1, r3
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f006 faad 	bl	800df3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80079e4:	4b37      	ldr	r3, [pc, #220]	@ (8007ac4 <USBD_CDC_DeInit+0xf8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3324      	adds	r3, #36	@ 0x24
 80079fa:	2200      	movs	r2, #0
 80079fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079fe:	4b32      	ldr	r3, [pc, #200]	@ (8007ac8 <USBD_CDC_DeInit+0xfc>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f006 fa9a 	bl	800df3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ac8 <USBD_CDC_DeInit+0xfc>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	f003 020f 	and.w	r2, r3, #15
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a22:	2200      	movs	r2, #0
 8007a24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a26:	4b29      	ldr	r3, [pc, #164]	@ (8007acc <USBD_CDC_DeInit+0x100>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f006 fa86 	bl	800df3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a32:	4b26      	ldr	r3, [pc, #152]	@ (8007acc <USBD_CDC_DeInit+0x100>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	f003 020f 	and.w	r2, r3, #15
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3324      	adds	r3, #36	@ 0x24
 8007a48:	2200      	movs	r2, #0
 8007a4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8007acc <USBD_CDC_DeInit+0x100>)
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	f003 020f 	and.w	r2, r3, #15
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	3326      	adds	r3, #38	@ 0x26
 8007a62:	2200      	movs	r2, #0
 8007a64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	32b0      	adds	r2, #176	@ 0xb0
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d01f      	beq.n	8007ab8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	@ 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	32b0      	adds	r2, #176	@ 0xb0
 8007a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f006 fb5a 	bl	800e154 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	32b0      	adds	r2, #176	@ 0xb0
 8007aaa:	2100      	movs	r1, #0
 8007aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000009f 	.word	0x2000009f
 8007ac8:	200000a0 	.word	0x200000a0
 8007acc:	200000a1 	.word	0x200000a1

08007ad0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	32b0      	adds	r2, #176	@ 0xb0
 8007ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e0bf      	b.n	8007c80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d050      	beq.n	8007bae <USBD_CDC_Setup+0xde>
 8007b0c:	2b20      	cmp	r3, #32
 8007b0e:	f040 80af 	bne.w	8007c70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	88db      	ldrh	r3, [r3, #6]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d03a      	beq.n	8007b90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	b25b      	sxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da1b      	bge.n	8007b5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	33b0      	adds	r3, #176	@ 0xb0
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	88d2      	ldrh	r2, [r2, #6]
 8007b40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	88db      	ldrh	r3, [r3, #6]
 8007b46:	2b07      	cmp	r3, #7
 8007b48:	bf28      	it	cs
 8007b4a:	2307      	movcs	r3, #7
 8007b4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	89fa      	ldrh	r2, [r7, #14]
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fd93 	bl	8009680 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b5a:	e090      	b.n	8007c7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785a      	ldrb	r2, [r3, #1]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b6c:	d803      	bhi.n	8007b76 <USBD_CDC_Setup+0xa6>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	e000      	b.n	8007b78 <USBD_CDC_Setup+0xa8>
 8007b76:	2240      	movs	r2, #64	@ 0x40
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b7e:	6939      	ldr	r1, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b86:	461a      	mov	r2, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fda5 	bl	80096d8 <USBD_CtlPrepareRx>
      break;
 8007b8e:	e076      	b.n	8007c7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	33b0      	adds	r3, #176	@ 0xb0
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	7850      	ldrb	r0, [r2, #1]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	4798      	blx	r3
      break;
 8007bac:	e067      	b.n	8007c7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	785b      	ldrb	r3, [r3, #1]
 8007bb2:	2b0b      	cmp	r3, #11
 8007bb4:	d851      	bhi.n	8007c5a <USBD_CDC_Setup+0x18a>
 8007bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <USBD_CDC_Setup+0xec>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bed 	.word	0x08007bed
 8007bc0:	08007c69 	.word	0x08007c69
 8007bc4:	08007c5b 	.word	0x08007c5b
 8007bc8:	08007c5b 	.word	0x08007c5b
 8007bcc:	08007c5b 	.word	0x08007c5b
 8007bd0:	08007c5b 	.word	0x08007c5b
 8007bd4:	08007c5b 	.word	0x08007c5b
 8007bd8:	08007c5b 	.word	0x08007c5b
 8007bdc:	08007c5b 	.word	0x08007c5b
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c17 	.word	0x08007c17
 8007be8:	08007c41 	.word	0x08007c41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d107      	bne.n	8007c08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007bf8:	f107 030a 	add.w	r3, r7, #10
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f001 fd3d 	bl	8009680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c06:	e032      	b.n	8007c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 fcbb 	bl	8009586 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c10:	2303      	movs	r3, #3
 8007c12:	75fb      	strb	r3, [r7, #23]
          break;
 8007c14:	e02b      	b.n	8007c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d107      	bne.n	8007c32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c22:	f107 030d 	add.w	r3, r7, #13
 8007c26:	2201      	movs	r2, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fd28 	bl	8009680 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c30:	e01d      	b.n	8007c6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fca6 	bl	8009586 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c3e:	e016      	b.n	8007c6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d00f      	beq.n	8007c6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fc99 	bl	8009586 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c58:	e008      	b.n	8007c6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fc92 	bl	8009586 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c62:	2303      	movs	r3, #3
 8007c64:	75fb      	strb	r3, [r7, #23]
          break;
 8007c66:	e002      	b.n	8007c6e <USBD_CDC_Setup+0x19e>
          break;
 8007c68:	bf00      	nop
 8007c6a:	e008      	b.n	8007c7e <USBD_CDC_Setup+0x1ae>
          break;
 8007c6c:	bf00      	nop
      }
      break;
 8007c6e:	e006      	b.n	8007c7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f001 fc87 	bl	8009586 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	32b0      	adds	r2, #176	@ 0xb0
 8007ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e065      	b.n	8007d7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32b0      	adds	r2, #176	@ 0xb0
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	f003 020f 	and.w	r2, r3, #15
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	440b      	add	r3, r1
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d02f      	beq.n	8007d3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	f003 020f 	and.w	r2, r3, #15
 8007ce2:	6879      	ldr	r1, [r7, #4]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	3318      	adds	r3, #24
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	f003 010f 	and.w	r1, r3, #15
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	440b      	add	r3, r1
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4403      	add	r3, r0
 8007d04:	331c      	adds	r3, #28
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d112      	bne.n	8007d3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d16:	78fb      	ldrb	r3, [r7, #3]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	440b      	add	r3, r1
 8007d28:	3318      	adds	r3, #24
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d2e:	78f9      	ldrb	r1, [r7, #3]
 8007d30:	2300      	movs	r3, #0
 8007d32:	2200      	movs	r2, #0
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f006 f9aa 	bl	800e08e <USBD_LL_Transmit>
 8007d3a:	e01f      	b.n	8007d7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	33b0      	adds	r3, #176	@ 0xb0
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d010      	beq.n	8007d7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	33b0      	adds	r3, #176	@ 0xb0
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32b0      	adds	r2, #176	@ 0xb0
 8007d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	32b0      	adds	r2, #176	@ 0xb0
 8007dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e01a      	b.n	8007dee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f006 f9a8 	bl	800e112 <USBD_LL_GetRxDataSize>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	33b0      	adds	r3, #176	@ 0xb0
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007de8:	4611      	mov	r1, r2
 8007dea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32b0      	adds	r2, #176	@ 0xb0
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e024      	b.n	8007e62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	33b0      	adds	r3, #176	@ 0xb0
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d019      	beq.n	8007e60 <USBD_CDC_EP0_RxReady+0x6a>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e32:	2bff      	cmp	r3, #255	@ 0xff
 8007e34:	d014      	beq.n	8007e60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	33b0      	adds	r3, #176	@ 0xb0
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	22ff      	movs	r2, #255	@ 0xff
 8007e5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e74:	2182      	movs	r1, #130	@ 0x82
 8007e76:	4818      	ldr	r0, [pc, #96]	@ (8007ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e78:	f000 fd4f 	bl	800891a <USBD_GetEpDesc>
 8007e7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e7e:	2101      	movs	r1, #1
 8007e80:	4815      	ldr	r0, [pc, #84]	@ (8007ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e82:	f000 fd4a 	bl	800891a <USBD_GetEpDesc>
 8007e86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e88:	2181      	movs	r1, #129	@ 0x81
 8007e8a:	4813      	ldr	r0, [pc, #76]	@ (8007ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e8c:	f000 fd45 	bl	800891a <USBD_GetEpDesc>
 8007e90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2210      	movs	r2, #16
 8007e9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d006      	beq.n	8007eb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007eac:	711a      	strb	r2, [r3, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ec0:	711a      	strb	r2, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2243      	movs	r2, #67	@ 0x43
 8007eca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	@ (8007ed8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3718      	adds	r7, #24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	2000005c 	.word	0x2000005c

08007edc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ee4:	2182      	movs	r1, #130	@ 0x82
 8007ee6:	4818      	ldr	r0, [pc, #96]	@ (8007f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ee8:	f000 fd17 	bl	800891a <USBD_GetEpDesc>
 8007eec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eee:	2101      	movs	r1, #1
 8007ef0:	4815      	ldr	r0, [pc, #84]	@ (8007f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ef2:	f000 fd12 	bl	800891a <USBD_GetEpDesc>
 8007ef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ef8:	2181      	movs	r1, #129	@ 0x81
 8007efa:	4813      	ldr	r0, [pc, #76]	@ (8007f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007efc:	f000 fd0d 	bl	800891a <USBD_GetEpDesc>
 8007f00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	2210      	movs	r2, #16
 8007f0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d006      	beq.n	8007f22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2200      	movs	r2, #0
 8007f18:	711a      	strb	r2, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f042 0202 	orr.w	r2, r2, #2
 8007f20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	711a      	strb	r2, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f042 0202 	orr.w	r2, r2, #2
 8007f34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2243      	movs	r2, #67	@ 0x43
 8007f3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f3c:	4b02      	ldr	r3, [pc, #8]	@ (8007f48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	2000005c 	.word	0x2000005c

08007f4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f54:	2182      	movs	r1, #130	@ 0x82
 8007f56:	4818      	ldr	r0, [pc, #96]	@ (8007fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f58:	f000 fcdf 	bl	800891a <USBD_GetEpDesc>
 8007f5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f5e:	2101      	movs	r1, #1
 8007f60:	4815      	ldr	r0, [pc, #84]	@ (8007fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f62:	f000 fcda 	bl	800891a <USBD_GetEpDesc>
 8007f66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f68:	2181      	movs	r1, #129	@ 0x81
 8007f6a:	4813      	ldr	r0, [pc, #76]	@ (8007fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f6c:	f000 fcd5 	bl	800891a <USBD_GetEpDesc>
 8007f70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f8c:	711a      	strb	r2, [r3, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d006      	beq.n	8007fa6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa0:	711a      	strb	r2, [r3, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2243      	movs	r2, #67	@ 0x43
 8007faa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fac:	4b02      	ldr	r3, [pc, #8]	@ (8007fb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000005c 	.word	0x2000005c

08007fbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	220a      	movs	r2, #10
 8007fc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007fca:	4b03      	ldr	r3, [pc, #12]	@ (8007fd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000018 	.word	0x20000018

08007fdc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e009      	b.n	8008004 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	33b0      	adds	r3, #176	@ 0xb0
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	32b0      	adds	r2, #176	@ 0xb0
 8008026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008032:	2303      	movs	r3, #3
 8008034:	e008      	b.n	8008048 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	371c      	adds	r7, #28
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	32b0      	adds	r2, #176	@ 0xb0
 8008068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	e004      	b.n	8008082 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
	...

08008090 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	32b0      	adds	r2, #176	@ 0xb0
 80080a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e025      	b.n	8008102 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d11f      	bne.n	8008100 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080c8:	4b10      	ldr	r3, [pc, #64]	@ (800810c <USBD_CDC_TransmitPacket+0x7c>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	f003 020f 	and.w	r2, r3, #15
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4403      	add	r3, r0
 80080e2:	3318      	adds	r3, #24
 80080e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80080e6:	4b09      	ldr	r3, [pc, #36]	@ (800810c <USBD_CDC_TransmitPacket+0x7c>)
 80080e8:	7819      	ldrb	r1, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f005 ffc9 	bl	800e08e <USBD_LL_Transmit>

    ret = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	2000009f 	.word	0x2000009f

08008110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32b0      	adds	r2, #176	@ 0xb0
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32b0      	adds	r2, #176	@ 0xb0
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e018      	b.n	8008170 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	7c1b      	ldrb	r3, [r3, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d10a      	bne.n	800815c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008146:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <USBD_CDC_ReceivePacket+0x68>)
 8008148:	7819      	ldrb	r1, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008150:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f005 ffbb 	bl	800e0d0 <USBD_LL_PrepareReceive>
 800815a:	e008      	b.n	800816e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800815c:	4b06      	ldr	r3, [pc, #24]	@ (8008178 <USBD_CDC_ReceivePacket+0x68>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008166:	2340      	movs	r3, #64	@ 0x40
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f005 ffb1 	bl	800e0d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	200000a0 	.word	0x200000a0

0800817c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	e01f      	b.n	80081d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f005 fe2b 	bl	800de24 <USBD_LL_Init>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80081d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e025      	b.n	8008240 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	32ae      	adds	r2, #174	@ 0xae
 8008206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00f      	beq.n	8008230 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	32ae      	adds	r2, #174	@ 0xae
 800821a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008220:	f107 020e 	add.w	r2, r7, #14
 8008224:	4610      	mov	r0, r2
 8008226:	4798      	blx	r3
 8008228:	4602      	mov	r2, r0
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008236:	1c5a      	adds	r2, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f005 fe33 	bl	800debc <USBD_LL_Start>
 8008256:	4603      	mov	r3, r0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b084      	sub	sp, #16
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	78fa      	ldrb	r2, [r7, #3]
 800829a:	4611      	mov	r1, r2
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
 80082a0:	4603      	mov	r3, r0
 80082a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 f90c 	bl	8009512 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008316:	f003 031f 	and.w	r3, r3, #31
 800831a:	2b02      	cmp	r3, #2
 800831c:	d01a      	beq.n	8008354 <USBD_LL_SetupStage+0x72>
 800831e:	2b02      	cmp	r3, #2
 8008320:	d822      	bhi.n	8008368 <USBD_LL_SetupStage+0x86>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d002      	beq.n	800832c <USBD_LL_SetupStage+0x4a>
 8008326:	2b01      	cmp	r3, #1
 8008328:	d00a      	beq.n	8008340 <USBD_LL_SetupStage+0x5e>
 800832a:	e01d      	b.n	8008368 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fb63 	bl	8008a00 <USBD_StdDevReq>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
      break;
 800833e:	e020      	b.n	8008382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 fbcb 	bl	8008ae4 <USBD_StdItfReq>
 800834e:	4603      	mov	r3, r0
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	e016      	b.n	8008382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc2d 	bl	8008bbc <USBD_StdEPReq>
 8008362:	4603      	mov	r3, r0
 8008364:	73fb      	strb	r3, [r7, #15]
      break;
 8008366:	e00c      	b.n	8008382 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800836e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008372:	b2db      	uxtb	r3, r3
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f005 fe00 	bl	800df7c <USBD_LL_StallEP>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
      break;
 8008380:	bf00      	nop
  }

  return ret;
 8008382:	7bfb      	ldrb	r3, [r7, #15]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	460b      	mov	r3, r1
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800839e:	7afb      	ldrb	r3, [r7, #11]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d16e      	bne.n	8008482 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	f040 8098 	bne.w	80084e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d913      	bls.n	80083ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	1ad2      	subs	r2, r2, r3
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	4293      	cmp	r3, r2
 80083dc:	bf28      	it	cs
 80083de:	4613      	movcs	r3, r2
 80083e0:	461a      	mov	r2, r3
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f001 f994 	bl	8009712 <USBD_CtlContinueRx>
 80083ea:	e07d      	b.n	80084e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d014      	beq.n	8008424 <USBD_LL_DataOutStage+0x98>
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d81d      	bhi.n	800843a <USBD_LL_DataOutStage+0xae>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USBD_LL_DataOutStage+0x7c>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d003      	beq.n	800840e <USBD_LL_DataOutStage+0x82>
 8008406:	e018      	b.n	800843a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	75bb      	strb	r3, [r7, #22]
            break;
 800840c:	e018      	b.n	8008440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008414:	b2db      	uxtb	r3, r3
 8008416:	4619      	mov	r1, r3
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fa64 	bl	80088e6 <USBD_CoreFindIF>
 800841e:	4603      	mov	r3, r0
 8008420:	75bb      	strb	r3, [r7, #22]
            break;
 8008422:	e00d      	b.n	8008440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800842a:	b2db      	uxtb	r3, r3
 800842c:	4619      	mov	r1, r3
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fa66 	bl	8008900 <USBD_CoreFindEP>
 8008434:	4603      	mov	r3, r0
 8008436:	75bb      	strb	r3, [r7, #22]
            break;
 8008438:	e002      	b.n	8008440 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	75bb      	strb	r3, [r7, #22]
            break;
 800843e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008440:	7dbb      	ldrb	r3, [r7, #22]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d119      	bne.n	800847a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b03      	cmp	r3, #3
 8008450:	d113      	bne.n	800847a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008452:	7dba      	ldrb	r2, [r7, #22]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	32ae      	adds	r2, #174	@ 0xae
 8008458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00b      	beq.n	800847a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008462:	7dba      	ldrb	r2, [r7, #22]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800846a:	7dba      	ldrb	r2, [r7, #22]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	32ae      	adds	r2, #174	@ 0xae
 8008470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f001 f95a 	bl	8009734 <USBD_CtlSendStatus>
 8008480:	e032      	b.n	80084e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008488:	b2db      	uxtb	r3, r3
 800848a:	4619      	mov	r1, r3
 800848c:	68f8      	ldr	r0, [r7, #12]
 800848e:	f000 fa37 	bl	8008900 <USBD_CoreFindEP>
 8008492:	4603      	mov	r3, r0
 8008494:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008496:	7dbb      	ldrb	r3, [r7, #22]
 8008498:	2bff      	cmp	r3, #255	@ 0xff
 800849a:	d025      	beq.n	80084e8 <USBD_LL_DataOutStage+0x15c>
 800849c:	7dbb      	ldrb	r3, [r7, #22]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d122      	bne.n	80084e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d117      	bne.n	80084de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084ae:	7dba      	ldrb	r2, [r7, #22]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	32ae      	adds	r2, #174	@ 0xae
 80084b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00f      	beq.n	80084de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80084be:	7dba      	ldrb	r2, [r7, #22]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80084c6:	7dba      	ldrb	r2, [r7, #22]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	32ae      	adds	r2, #174	@ 0xae
 80084cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	7afa      	ldrb	r2, [r7, #11]
 80084d4:	4611      	mov	r1, r2
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	4798      	blx	r3
 80084da:	4603      	mov	r3, r0
 80084dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	e000      	b.n	80084ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b086      	sub	sp, #24
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	460b      	mov	r3, r1
 80084fc:	607a      	str	r2, [r7, #4]
 80084fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008500:	7afb      	ldrb	r3, [r7, #11]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d16f      	bne.n	80085e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3314      	adds	r3, #20
 800850a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008512:	2b02      	cmp	r3, #2
 8008514:	d15a      	bne.n	80085cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	429a      	cmp	r2, r3
 8008520:	d914      	bls.n	800854c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	461a      	mov	r2, r3
 8008536:	6879      	ldr	r1, [r7, #4]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f001 f8bc 	bl	80096b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800853e:	2300      	movs	r3, #0
 8008540:	2200      	movs	r2, #0
 8008542:	2100      	movs	r1, #0
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f005 fdc3 	bl	800e0d0 <USBD_LL_PrepareReceive>
 800854a:	e03f      	b.n	80085cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	68da      	ldr	r2, [r3, #12]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	429a      	cmp	r2, r3
 8008556:	d11c      	bne.n	8008592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008560:	429a      	cmp	r2, r3
 8008562:	d316      	bcc.n	8008592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800856e:	429a      	cmp	r2, r3
 8008570:	d20f      	bcs.n	8008592 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008572:	2200      	movs	r2, #0
 8008574:	2100      	movs	r1, #0
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f001 f89d 	bl	80096b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008584:	2300      	movs	r3, #0
 8008586:	2200      	movs	r2, #0
 8008588:	2100      	movs	r1, #0
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f005 fda0 	bl	800e0d0 <USBD_LL_PrepareReceive>
 8008590:	e01c      	b.n	80085cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b03      	cmp	r3, #3
 800859c:	d10f      	bne.n	80085be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085be:	2180      	movs	r1, #128	@ 0x80
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f005 fcdb 	bl	800df7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f001 f8c7 	bl	800975a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d03a      	beq.n	800864c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80085d6:	68f8      	ldr	r0, [r7, #12]
 80085d8:	f7ff fe42 	bl	8008260 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80085e4:	e032      	b.n	800864c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80085e6:	7afb      	ldrb	r3, [r7, #11]
 80085e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4619      	mov	r1, r3
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 f985 	bl	8008900 <USBD_CoreFindEP>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085fa:	7dfb      	ldrb	r3, [r7, #23]
 80085fc:	2bff      	cmp	r3, #255	@ 0xff
 80085fe:	d025      	beq.n	800864c <USBD_LL_DataInStage+0x15a>
 8008600:	7dfb      	ldrb	r3, [r7, #23]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d122      	bne.n	800864c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d11c      	bne.n	800864c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008612:	7dfa      	ldrb	r2, [r7, #23]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	32ae      	adds	r2, #174	@ 0xae
 8008618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d014      	beq.n	800864c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008622:	7dfa      	ldrb	r2, [r7, #23]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800862a:	7dfa      	ldrb	r2, [r7, #23]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	32ae      	adds	r2, #174	@ 0xae
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	7afa      	ldrb	r2, [r7, #11]
 8008638:	4611      	mov	r1, r2
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	4798      	blx	r3
 800863e:	4603      	mov	r3, r0
 8008640:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008642:	7dbb      	ldrb	r3, [r7, #22]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008648:	7dbb      	ldrb	r3, [r7, #22]
 800864a:	e000      	b.n	800864e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d014      	beq.n	80086bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	6852      	ldr	r2, [r2, #4]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	4611      	mov	r1, r2
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086bc:	2340      	movs	r3, #64	@ 0x40
 80086be:	2200      	movs	r2, #0
 80086c0:	2100      	movs	r1, #0
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f005 fc15 	bl	800def2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2240      	movs	r2, #64	@ 0x40
 80086d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086d8:	2340      	movs	r3, #64	@ 0x40
 80086da:	2200      	movs	r2, #0
 80086dc:	2180      	movs	r1, #128	@ 0x80
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f005 fc07 	bl	800def2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2240      	movs	r2, #64	@ 0x40
 80086ee:	621a      	str	r2, [r3, #32]

  return ret;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b04      	cmp	r3, #4
 800872c:	d006      	beq.n	800873c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2204      	movs	r2, #4
 8008740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	370c      	adds	r7, #12
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr

08008752 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b04      	cmp	r3, #4
 8008764:	d106      	bne.n	8008774 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800876c:	b2da      	uxtb	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008790:	b2db      	uxtb	r3, r3
 8008792:	2b03      	cmp	r3, #3
 8008794:	d110      	bne.n	80087b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	32ae      	adds	r2, #174	@ 0xae
 80087d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e01c      	b.n	800881e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d115      	bne.n	800881c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	32ae      	adds	r2, #174	@ 0xae
 80087fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	32ae      	adds	r2, #174	@ 0xae
 800880e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	78fa      	ldrb	r2, [r7, #3]
 8008816:	4611      	mov	r1, r2
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	32ae      	adds	r2, #174	@ 0xae
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e01c      	b.n	8008882 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b03      	cmp	r3, #3
 8008852:	d115      	bne.n	8008880 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	32ae      	adds	r2, #174	@ 0xae
 800885e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00b      	beq.n	8008880 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32ae      	adds	r2, #174	@ 0xae
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	4611      	mov	r1, r2
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00e      	beq.n	80088dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6852      	ldr	r2, [r2, #4]
 80088ca:	b2d2      	uxtb	r2, r2
 80088cc:	4611      	mov	r1, r2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800890c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	460b      	mov	r3, r1
 8008924:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	885b      	ldrh	r3, [r3, #2]
 8008936:	b29b      	uxth	r3, r3
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	7812      	ldrb	r2, [r2, #0]
 800893c:	4293      	cmp	r3, r2
 800893e:	d91f      	bls.n	8008980 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008946:	e013      	b.n	8008970 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008948:	f107 030a 	add.w	r3, r7, #10
 800894c:	4619      	mov	r1, r3
 800894e:	6978      	ldr	r0, [r7, #20]
 8008950:	f000 f81b 	bl	800898a <USBD_GetNextDesc>
 8008954:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b05      	cmp	r3, #5
 800895c:	d108      	bne.n	8008970 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	789b      	ldrb	r3, [r3, #2]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	429a      	cmp	r2, r3
 800896a:	d008      	beq.n	800897e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	885b      	ldrh	r3, [r3, #2]
 8008974:	b29a      	uxth	r2, r3
 8008976:	897b      	ldrh	r3, [r7, #10]
 8008978:	429a      	cmp	r2, r3
 800897a:	d8e5      	bhi.n	8008948 <USBD_GetEpDesc+0x2e>
 800897c:	e000      	b.n	8008980 <USBD_GetEpDesc+0x66>
          break;
 800897e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008980:	693b      	ldr	r3, [r7, #16]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800898a:	b480      	push	{r7}
 800898c:	b085      	sub	sp, #20
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	7812      	ldrb	r2, [r2, #0]
 80089a0:	4413      	add	r3, r2
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4413      	add	r3, r2
 80089b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80089b4:	68fb      	ldr	r3, [r7, #12]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr

080089c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b087      	sub	sp, #28
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3301      	adds	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80089e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80089e4:	021b      	lsls	r3, r3, #8
 80089e6:	b21a      	sxth	r2, r3
 80089e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	b21b      	sxth	r3, r3
 80089f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80089f2:	89fb      	ldrh	r3, [r7, #14]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	371c      	adds	r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a16:	2b40      	cmp	r3, #64	@ 0x40
 8008a18:	d005      	beq.n	8008a26 <USBD_StdDevReq+0x26>
 8008a1a:	2b40      	cmp	r3, #64	@ 0x40
 8008a1c:	d857      	bhi.n	8008ace <USBD_StdDevReq+0xce>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00f      	beq.n	8008a42 <USBD_StdDevReq+0x42>
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d153      	bne.n	8008ace <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	32ae      	adds	r2, #174	@ 0xae
 8008a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	4798      	blx	r3
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a40:	e04a      	b.n	8008ad8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	785b      	ldrb	r3, [r3, #1]
 8008a46:	2b09      	cmp	r3, #9
 8008a48:	d83b      	bhi.n	8008ac2 <USBD_StdDevReq+0xc2>
 8008a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <USBD_StdDevReq+0x50>)
 8008a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a50:	08008aa5 	.word	0x08008aa5
 8008a54:	08008ab9 	.word	0x08008ab9
 8008a58:	08008ac3 	.word	0x08008ac3
 8008a5c:	08008aaf 	.word	0x08008aaf
 8008a60:	08008ac3 	.word	0x08008ac3
 8008a64:	08008a83 	.word	0x08008a83
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008ac3 	.word	0x08008ac3
 8008a70:	08008a9b 	.word	0x08008a9b
 8008a74:	08008a8d 	.word	0x08008a8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fa3c 	bl	8008ef8 <USBD_GetDescriptor>
          break;
 8008a80:	e024      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fba1 	bl	80091cc <USBD_SetAddress>
          break;
 8008a8a:	e01f      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fbe0 	bl	8009254 <USBD_SetConfig>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73fb      	strb	r3, [r7, #15]
          break;
 8008a98:	e018      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a9a:	6839      	ldr	r1, [r7, #0]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 fc83 	bl	80093a8 <USBD_GetConfig>
          break;
 8008aa2:	e013      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fcb4 	bl	8009414 <USBD_GetStatus>
          break;
 8008aac:	e00e      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008aae:	6839      	ldr	r1, [r7, #0]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fce3 	bl	800947c <USBD_SetFeature>
          break;
 8008ab6:	e009      	b.n	8008acc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fd07 	bl	80094ce <USBD_ClrFeature>
          break;
 8008ac0:	e004      	b.n	8008acc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fd5e 	bl	8009586 <USBD_CtlError>
          break;
 8008aca:	bf00      	nop
      }
      break;
 8008acc:	e004      	b.n	8008ad8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fd58 	bl	8009586 <USBD_CtlError>
      break;
 8008ad6:	bf00      	nop
  }

  return ret;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop

08008ae4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008afa:	2b40      	cmp	r3, #64	@ 0x40
 8008afc:	d005      	beq.n	8008b0a <USBD_StdItfReq+0x26>
 8008afe:	2b40      	cmp	r3, #64	@ 0x40
 8008b00:	d852      	bhi.n	8008ba8 <USBD_StdItfReq+0xc4>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d001      	beq.n	8008b0a <USBD_StdItfReq+0x26>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d14e      	bne.n	8008ba8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	3b01      	subs	r3, #1
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d840      	bhi.n	8008b9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	889b      	ldrh	r3, [r3, #4]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d836      	bhi.n	8008b90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	889b      	ldrh	r3, [r3, #4]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff fedb 	bl	80088e6 <USBD_CoreFindIF>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b34:	7bbb      	ldrb	r3, [r7, #14]
 8008b36:	2bff      	cmp	r3, #255	@ 0xff
 8008b38:	d01d      	beq.n	8008b76 <USBD_StdItfReq+0x92>
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d11a      	bne.n	8008b76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b40:	7bba      	ldrb	r2, [r7, #14]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	32ae      	adds	r2, #174	@ 0xae
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00f      	beq.n	8008b70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008b50:	7bba      	ldrb	r2, [r7, #14]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b58:	7bba      	ldrb	r2, [r7, #14]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	32ae      	adds	r2, #174	@ 0xae
 8008b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b6e:	e004      	b.n	8008b7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b70:	2303      	movs	r3, #3
 8008b72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b74:	e001      	b.n	8008b7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b76:	2303      	movs	r3, #3
 8008b78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	88db      	ldrh	r3, [r3, #6]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d110      	bne.n	8008ba4 <USBD_StdItfReq+0xc0>
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fdd3 	bl	8009734 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b8e:	e009      	b.n	8008ba4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fcf7 	bl	8009586 <USBD_CtlError>
          break;
 8008b98:	e004      	b.n	8008ba4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fcf2 	bl	8009586 <USBD_CtlError>
          break;
 8008ba2:	e000      	b.n	8008ba6 <USBD_StdItfReq+0xc2>
          break;
 8008ba4:	bf00      	nop
      }
      break;
 8008ba6:	e004      	b.n	8008bb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fceb 	bl	8009586 <USBD_CtlError>
      break;
 8008bb0:	bf00      	nop
  }

  return ret;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	889b      	ldrh	r3, [r3, #4]
 8008bce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bd8:	2b40      	cmp	r3, #64	@ 0x40
 8008bda:	d007      	beq.n	8008bec <USBD_StdEPReq+0x30>
 8008bdc:	2b40      	cmp	r3, #64	@ 0x40
 8008bde:	f200 817f 	bhi.w	8008ee0 <USBD_StdEPReq+0x324>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d02a      	beq.n	8008c3c <USBD_StdEPReq+0x80>
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	f040 817a 	bne.w	8008ee0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff fe85 	bl	8008900 <USBD_CoreFindEP>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008bfa:	7b7b      	ldrb	r3, [r7, #13]
 8008bfc:	2bff      	cmp	r3, #255	@ 0xff
 8008bfe:	f000 8174 	beq.w	8008eea <USBD_StdEPReq+0x32e>
 8008c02:	7b7b      	ldrb	r3, [r7, #13]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8170 	bne.w	8008eea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c0a:	7b7a      	ldrb	r2, [r7, #13]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c12:	7b7a      	ldrb	r2, [r7, #13]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	32ae      	adds	r2, #174	@ 0xae
 8008c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8163 	beq.w	8008eea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c24:	7b7a      	ldrb	r2, [r7, #13]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32ae      	adds	r2, #174	@ 0xae
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c3a:	e156      	b.n	8008eea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	785b      	ldrb	r3, [r3, #1]
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d008      	beq.n	8008c56 <USBD_StdEPReq+0x9a>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	f300 8145 	bgt.w	8008ed4 <USBD_StdEPReq+0x318>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 809b 	beq.w	8008d86 <USBD_StdEPReq+0x1ca>
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d03c      	beq.n	8008cce <USBD_StdEPReq+0x112>
 8008c54:	e13e      	b.n	8008ed4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d002      	beq.n	8008c68 <USBD_StdEPReq+0xac>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d016      	beq.n	8008c94 <USBD_StdEPReq+0xd8>
 8008c66:	e02c      	b.n	8008cc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00d      	beq.n	8008c8a <USBD_StdEPReq+0xce>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	@ 0x80
 8008c72:	d00a      	beq.n	8008c8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f005 f97f 	bl	800df7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f005 f97b 	bl	800df7c <USBD_LL_StallEP>
 8008c86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c88:	e020      	b.n	8008ccc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc7a 	bl	8009586 <USBD_CtlError>
              break;
 8008c92:	e01b      	b.n	8008ccc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	885b      	ldrh	r3, [r3, #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10e      	bne.n	8008cba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00b      	beq.n	8008cba <USBD_StdEPReq+0xfe>
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b80      	cmp	r3, #128	@ 0x80
 8008ca6:	d008      	beq.n	8008cba <USBD_StdEPReq+0xfe>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	88db      	ldrh	r3, [r3, #6]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d104      	bne.n	8008cba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f005 f961 	bl	800df7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fd3a 	bl	8009734 <USBD_CtlSendStatus>

              break;
 8008cc0:	e004      	b.n	8008ccc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fc5e 	bl	8009586 <USBD_CtlError>
              break;
 8008cca:	bf00      	nop
          }
          break;
 8008ccc:	e107      	b.n	8008ede <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d002      	beq.n	8008ce0 <USBD_StdEPReq+0x124>
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d016      	beq.n	8008d0c <USBD_StdEPReq+0x150>
 8008cde:	e04b      	b.n	8008d78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <USBD_StdEPReq+0x146>
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b80      	cmp	r3, #128	@ 0x80
 8008cea:	d00a      	beq.n	8008d02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f005 f943 	bl	800df7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cf6:	2180      	movs	r1, #128	@ 0x80
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f005 f93f 	bl	800df7c <USBD_LL_StallEP>
 8008cfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d00:	e040      	b.n	8008d84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc3e 	bl	8009586 <USBD_CtlError>
              break;
 8008d0a:	e03b      	b.n	8008d84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d136      	bne.n	8008d82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d004      	beq.n	8008d28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f005 f949 	bl	800dfba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fd03 	bl	8009734 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d2e:	7bbb      	ldrb	r3, [r7, #14]
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fde4 	bl	8008900 <USBD_CoreFindEP>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d3c:	7b7b      	ldrb	r3, [r7, #13]
 8008d3e:	2bff      	cmp	r3, #255	@ 0xff
 8008d40:	d01f      	beq.n	8008d82 <USBD_StdEPReq+0x1c6>
 8008d42:	7b7b      	ldrb	r3, [r7, #13]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11c      	bne.n	8008d82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008d48:	7b7a      	ldrb	r2, [r7, #13]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008d50:	7b7a      	ldrb	r2, [r7, #13]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	32ae      	adds	r2, #174	@ 0xae
 8008d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d010      	beq.n	8008d82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d60:	7b7a      	ldrb	r2, [r7, #13]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	32ae      	adds	r2, #174	@ 0xae
 8008d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	6839      	ldr	r1, [r7, #0]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4798      	blx	r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d76:	e004      	b.n	8008d82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fc03 	bl	8009586 <USBD_CtlError>
              break;
 8008d80:	e000      	b.n	8008d84 <USBD_StdEPReq+0x1c8>
              break;
 8008d82:	bf00      	nop
          }
          break;
 8008d84:	e0ab      	b.n	8008ede <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d002      	beq.n	8008d98 <USBD_StdEPReq+0x1dc>
 8008d92:	2b03      	cmp	r3, #3
 8008d94:	d032      	beq.n	8008dfc <USBD_StdEPReq+0x240>
 8008d96:	e097      	b.n	8008ec8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <USBD_StdEPReq+0x1f2>
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b80      	cmp	r3, #128	@ 0x80
 8008da2:	d004      	beq.n	8008dae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fbed 	bl	8009586 <USBD_CtlError>
                break;
 8008dac:	e091      	b.n	8008ed2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da0b      	bge.n	8008dce <USBD_StdEPReq+0x212>
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	3310      	adds	r3, #16
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	3304      	adds	r3, #4
 8008dcc:	e00b      	b.n	8008de6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4413      	add	r3, r2
 8008de4:	3304      	adds	r3, #4
 8008de6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2200      	movs	r2, #0
 8008dec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2202      	movs	r2, #2
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fc43 	bl	8009680 <USBD_CtlSendData>
              break;
 8008dfa:	e06a      	b.n	8008ed2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008dfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da11      	bge.n	8008e28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	f003 020f 	and.w	r2, r3, #15
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	440b      	add	r3, r1
 8008e16:	3324      	adds	r3, #36	@ 0x24
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d117      	bne.n	8008e4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fbb0 	bl	8009586 <USBD_CtlError>
                  break;
 8008e26:	e054      	b.n	8008ed2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	f003 020f 	and.w	r2, r3, #15
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb9d 	bl	8009586 <USBD_CtlError>
                  break;
 8008e4c:	e041      	b.n	8008ed2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	da0b      	bge.n	8008e6e <USBD_StdEPReq+0x2b2>
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	3310      	adds	r3, #16
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	4413      	add	r3, r2
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	e00b      	b.n	8008e86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	3304      	adds	r3, #4
 8008e86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d002      	beq.n	8008e94 <USBD_StdEPReq+0x2d8>
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b80      	cmp	r3, #128	@ 0x80
 8008e92:	d103      	bne.n	8008e9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
 8008e9a:	e00e      	b.n	8008eba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f005 f8a9 	bl	800dff8 <USBD_LL_IsStallEP>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e002      	b.n	8008eba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fbdd 	bl	8009680 <USBD_CtlSendData>
              break;
 8008ec6:	e004      	b.n	8008ed2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fb5b 	bl	8009586 <USBD_CtlError>
              break;
 8008ed0:	bf00      	nop
          }
          break;
 8008ed2:	e004      	b.n	8008ede <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fb55 	bl	8009586 <USBD_CtlError>
          break;
 8008edc:	bf00      	nop
      }
      break;
 8008ede:	e005      	b.n	8008eec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fb4f 	bl	8009586 <USBD_CtlError>
      break;
 8008ee8:	e000      	b.n	8008eec <USBD_StdEPReq+0x330>
      break;
 8008eea:	bf00      	nop
  }

  return ret;
 8008eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	885b      	ldrh	r3, [r3, #2]
 8008f12:	0a1b      	lsrs	r3, r3, #8
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	2b06      	cmp	r3, #6
 8008f1a:	f200 8128 	bhi.w	800916e <USBD_GetDescriptor+0x276>
 8008f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f24 <USBD_GetDescriptor+0x2c>)
 8008f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f24:	08008f41 	.word	0x08008f41
 8008f28:	08008f59 	.word	0x08008f59
 8008f2c:	08008f99 	.word	0x08008f99
 8008f30:	0800916f 	.word	0x0800916f
 8008f34:	0800916f 	.word	0x0800916f
 8008f38:	0800910f 	.word	0x0800910f
 8008f3c:	0800913b 	.word	0x0800913b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	7c12      	ldrb	r2, [r2, #16]
 8008f4c:	f107 0108 	add.w	r1, r7, #8
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
 8008f54:	60f8      	str	r0, [r7, #12]
      break;
 8008f56:	e112      	b.n	800917e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	7c1b      	ldrb	r3, [r3, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10d      	bne.n	8008f7c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f68:	f107 0208 	add.w	r2, r7, #8
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	2202      	movs	r2, #2
 8008f78:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f7a:	e100      	b.n	800917e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f84:	f107 0208 	add.w	r2, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	2202      	movs	r2, #2
 8008f94:	701a      	strb	r2, [r3, #0]
      break;
 8008f96:	e0f2      	b.n	800917e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	885b      	ldrh	r3, [r3, #2]
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b05      	cmp	r3, #5
 8008fa0:	f200 80ac 	bhi.w	80090fc <USBD_GetDescriptor+0x204>
 8008fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fac <USBD_GetDescriptor+0xb4>)
 8008fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008faa:	bf00      	nop
 8008fac:	08008fc5 	.word	0x08008fc5
 8008fb0:	08008ff9 	.word	0x08008ff9
 8008fb4:	0800902d 	.word	0x0800902d
 8008fb8:	08009061 	.word	0x08009061
 8008fbc:	08009095 	.word	0x08009095
 8008fc0:	080090c9 	.word	0x080090c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e091      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 facb 	bl	8009586 <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e089      	b.n	800910c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e077      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fab1 	bl	8009586 <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e06f      	b.n	800910c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e05d      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa97 	bl	8009586 <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e055      	b.n	800910c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	7c12      	ldrb	r2, [r2, #16]
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009082:	e043      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa7d 	bl	8009586 <USBD_CtlError>
            err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
          break;
 8009092:	e03b      	b.n	800910c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800909a:	695b      	ldr	r3, [r3, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	7c12      	ldrb	r2, [r2, #16]
 80090ac:	f107 0108 	add.w	r1, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090b6:	e029      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fa63 	bl	8009586 <USBD_CtlError>
            err++;
 80090c0:	7afb      	ldrb	r3, [r7, #11]
 80090c2:	3301      	adds	r3, #1
 80090c4:	72fb      	strb	r3, [r7, #11]
          break;
 80090c6:	e021      	b.n	800910c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00b      	beq.n	80090ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	7c12      	ldrb	r2, [r2, #16]
 80090e0:	f107 0108 	add.w	r1, r7, #8
 80090e4:	4610      	mov	r0, r2
 80090e6:	4798      	blx	r3
 80090e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ea:	e00f      	b.n	800910c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa49 	bl	8009586 <USBD_CtlError>
            err++;
 80090f4:	7afb      	ldrb	r3, [r7, #11]
 80090f6:	3301      	adds	r3, #1
 80090f8:	72fb      	strb	r3, [r7, #11]
          break;
 80090fa:	e007      	b.n	800910c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa41 	bl	8009586 <USBD_CtlError>
          err++;
 8009104:	7afb      	ldrb	r3, [r7, #11]
 8009106:	3301      	adds	r3, #1
 8009108:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800910a:	bf00      	nop
      }
      break;
 800910c:	e037      	b.n	800917e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7c1b      	ldrb	r3, [r3, #16]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d109      	bne.n	800912a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800911e:	f107 0208 	add.w	r2, r7, #8
 8009122:	4610      	mov	r0, r2
 8009124:	4798      	blx	r3
 8009126:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009128:	e029      	b.n	800917e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fa2a 	bl	8009586 <USBD_CtlError>
        err++;
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	3301      	adds	r3, #1
 8009136:	72fb      	strb	r3, [r7, #11]
      break;
 8009138:	e021      	b.n	800917e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7c1b      	ldrb	r3, [r3, #16]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10d      	bne.n	800915e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914a:	f107 0208 	add.w	r2, r7, #8
 800914e:	4610      	mov	r0, r2
 8009150:	4798      	blx	r3
 8009152:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	2207      	movs	r2, #7
 800915a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800915c:	e00f      	b.n	800917e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 fa10 	bl	8009586 <USBD_CtlError>
        err++;
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	3301      	adds	r3, #1
 800916a:	72fb      	strb	r3, [r7, #11]
      break;
 800916c:	e007      	b.n	800917e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fa08 	bl	8009586 <USBD_CtlError>
      err++;
 8009176:	7afb      	ldrb	r3, [r7, #11]
 8009178:	3301      	adds	r3, #1
 800917a:	72fb      	strb	r3, [r7, #11]
      break;
 800917c:	bf00      	nop
  }

  if (err != 0U)
 800917e:	7afb      	ldrb	r3, [r7, #11]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d11e      	bne.n	80091c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	88db      	ldrh	r3, [r3, #6]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d016      	beq.n	80091ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800918c:	893b      	ldrh	r3, [r7, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	88da      	ldrh	r2, [r3, #6]
 8009196:	893b      	ldrh	r3, [r7, #8]
 8009198:	4293      	cmp	r3, r2
 800919a:	bf28      	it	cs
 800919c:	4613      	movcs	r3, r2
 800919e:	b29b      	uxth	r3, r3
 80091a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091a2:	893b      	ldrh	r3, [r7, #8]
 80091a4:	461a      	mov	r2, r3
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fa69 	bl	8009680 <USBD_CtlSendData>
 80091ae:	e009      	b.n	80091c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9e7 	bl	8009586 <USBD_CtlError>
 80091b8:	e004      	b.n	80091c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 faba 	bl	8009734 <USBD_CtlSendStatus>
 80091c0:	e000      	b.n	80091c4 <USBD_GetDescriptor+0x2cc>
    return;
 80091c2:	bf00      	nop
  }
}
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop

080091cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	889b      	ldrh	r3, [r3, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d131      	bne.n	8009242 <USBD_SetAddress+0x76>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d12d      	bne.n	8009242 <USBD_SetAddress+0x76>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80091ec:	d829      	bhi.n	8009242 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b03      	cmp	r3, #3
 8009204:	d104      	bne.n	8009210 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f9bc 	bl	8009586 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920e:	e01d      	b.n	800924c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	7bfa      	ldrb	r2, [r7, #15]
 8009214:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009218:	7bfb      	ldrb	r3, [r7, #15]
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f004 ff17 	bl	800e050 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa86 	bl	8009734 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2202      	movs	r2, #2
 8009232:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009236:	e009      	b.n	800924c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009240:	e004      	b.n	800924c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f99e 	bl	8009586 <USBD_CtlError>
  }
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	885b      	ldrh	r3, [r3, #2]
 8009266:	b2da      	uxtb	r2, r3
 8009268:	4b4e      	ldr	r3, [pc, #312]	@ (80093a4 <USBD_SetConfig+0x150>)
 800926a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800926c:	4b4d      	ldr	r3, [pc, #308]	@ (80093a4 <USBD_SetConfig+0x150>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d905      	bls.n	8009280 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f985 	bl	8009586 <USBD_CtlError>
    return USBD_FAIL;
 800927c:	2303      	movs	r3, #3
 800927e:	e08c      	b.n	800939a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d002      	beq.n	8009292 <USBD_SetConfig+0x3e>
 800928c:	2b03      	cmp	r3, #3
 800928e:	d029      	beq.n	80092e4 <USBD_SetConfig+0x90>
 8009290:	e075      	b.n	800937e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009292:	4b44      	ldr	r3, [pc, #272]	@ (80093a4 <USBD_SetConfig+0x150>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d020      	beq.n	80092dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800929a:	4b42      	ldr	r3, [pc, #264]	@ (80093a4 <USBD_SetConfig+0x150>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092a4:	4b3f      	ldr	r3, [pc, #252]	@ (80093a4 <USBD_SetConfig+0x150>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fe ffe3 	bl	8008276 <USBD_SetClassConfig>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d008      	beq.n	80092cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f962 	bl	8009586 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092ca:	e065      	b.n	8009398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 fa31 	bl	8009734 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2203      	movs	r2, #3
 80092d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092da:	e05d      	b.n	8009398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa29 	bl	8009734 <USBD_CtlSendStatus>
      break;
 80092e2:	e059      	b.n	8009398 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092e4:	4b2f      	ldr	r3, [pc, #188]	@ (80093a4 <USBD_SetConfig+0x150>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d112      	bne.n	8009312 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80092f4:	4b2b      	ldr	r3, [pc, #172]	@ (80093a4 <USBD_SetConfig+0x150>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092fe:	4b29      	ldr	r3, [pc, #164]	@ (80093a4 <USBD_SetConfig+0x150>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7fe ffd2 	bl	80082ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fa12 	bl	8009734 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009310:	e042      	b.n	8009398 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009312:	4b24      	ldr	r3, [pc, #144]	@ (80093a4 <USBD_SetConfig+0x150>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d02a      	beq.n	8009376 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	4619      	mov	r1, r3
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7fe ffc0 	bl	80082ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800932e:	4b1d      	ldr	r3, [pc, #116]	@ (80093a4 <USBD_SetConfig+0x150>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009338:	4b1a      	ldr	r3, [pc, #104]	@ (80093a4 <USBD_SetConfig+0x150>)
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7fe ff99 	bl	8008276 <USBD_SetClassConfig>
 8009344:	4603      	mov	r3, r0
 8009346:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00f      	beq.n	800936e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f918 	bl	8009586 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fe ffa5 	bl	80082ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800936c:	e014      	b.n	8009398 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f9e0 	bl	8009734 <USBD_CtlSendStatus>
      break;
 8009374:	e010      	b.n	8009398 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f9dc 	bl	8009734 <USBD_CtlSendStatus>
      break;
 800937c:	e00c      	b.n	8009398 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800937e:	6839      	ldr	r1, [r7, #0]
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f900 	bl	8009586 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009386:	4b07      	ldr	r3, [pc, #28]	@ (80093a4 <USBD_SetConfig+0x150>)
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7fe ff8e 	bl	80082ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	73fb      	strb	r3, [r7, #15]
      break;
 8009396:	bf00      	nop
  }

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	200006dc 	.word	0x200006dc

080093a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d004      	beq.n	80093c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f8e2 	bl	8009586 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093c2:	e023      	b.n	800940c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	dc02      	bgt.n	80093d6 <USBD_GetConfig+0x2e>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dc03      	bgt.n	80093dc <USBD_GetConfig+0x34>
 80093d4:	e015      	b.n	8009402 <USBD_GetConfig+0x5a>
 80093d6:	2b03      	cmp	r3, #3
 80093d8:	d00b      	beq.n	80093f2 <USBD_GetConfig+0x4a>
 80093da:	e012      	b.n	8009402 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3308      	adds	r3, #8
 80093e6:	2201      	movs	r2, #1
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f948 	bl	8009680 <USBD_CtlSendData>
        break;
 80093f0:	e00c      	b.n	800940c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	3304      	adds	r3, #4
 80093f6:	2201      	movs	r2, #1
 80093f8:	4619      	mov	r1, r3
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f940 	bl	8009680 <USBD_CtlSendData>
        break;
 8009400:	e004      	b.n	800940c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f8be 	bl	8009586 <USBD_CtlError>
        break;
 800940a:	bf00      	nop
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	2b02      	cmp	r3, #2
 800942a:	d81e      	bhi.n	800946a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	88db      	ldrh	r3, [r3, #6]
 8009430:	2b02      	cmp	r3, #2
 8009432:	d004      	beq.n	800943e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f8a5 	bl	8009586 <USBD_CtlError>
        break;
 800943c:	e01a      	b.n	8009474 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f043 0202 	orr.w	r2, r3, #2
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	330c      	adds	r3, #12
 800945e:	2202      	movs	r2, #2
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f90c 	bl	8009680 <USBD_CtlSendData>
      break;
 8009468:	e004      	b.n	8009474 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f88a 	bl	8009586 <USBD_CtlError>
      break;
 8009472:	bf00      	nop
  }
}
 8009474:	bf00      	nop
 8009476:	3708      	adds	r7, #8
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	885b      	ldrh	r3, [r3, #2]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d107      	bne.n	800949e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f94c 	bl	8009734 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800949c:	e013      	b.n	80094c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	885b      	ldrh	r3, [r3, #2]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d10b      	bne.n	80094be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	889b      	ldrh	r3, [r3, #4]
 80094aa:	0a1b      	lsrs	r3, r3, #8
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f93c 	bl	8009734 <USBD_CtlSendStatus>
}
 80094bc:	e003      	b.n	80094c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f860 	bl	8009586 <USBD_CtlError>
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b082      	sub	sp, #8
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	3b01      	subs	r3, #1
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d80b      	bhi.n	80094fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10c      	bne.n	8009508 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 f91c 	bl	8009734 <USBD_CtlSendStatus>
      }
      break;
 80094fc:	e004      	b.n	8009508 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f840 	bl	8009586 <USBD_CtlError>
      break;
 8009506:	e000      	b.n	800950a <USBD_ClrFeature+0x3c>
      break;
 8009508:	bf00      	nop
  }
}
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b084      	sub	sp, #16
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	781a      	ldrb	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	781a      	ldrb	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fa40 	bl	80089c2 <SWAPBYTE>
 8009542:	4603      	mov	r3, r0
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3301      	adds	r3, #1
 800954e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	3301      	adds	r3, #1
 8009554:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f7ff fa33 	bl	80089c2 <SWAPBYTE>
 800955c:	4603      	mov	r3, r0
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	3301      	adds	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fa26 	bl	80089c2 <SWAPBYTE>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	80da      	strh	r2, [r3, #6]
}
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009590:	2180      	movs	r1, #128	@ 0x80
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f004 fcf2 	bl	800df7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009598:	2100      	movs	r1, #0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f004 fcee 	bl	800df7c <USBD_LL_StallEP>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d042      	beq.n	8009644 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80095c2:	6938      	ldr	r0, [r7, #16]
 80095c4:	f000 f842 	bl	800964c <USBD_GetLen>
 80095c8:	4603      	mov	r3, r0
 80095ca:	3301      	adds	r3, #1
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d2:	d808      	bhi.n	80095e6 <USBD_GetString+0x3e>
 80095d4:	6938      	ldr	r0, [r7, #16]
 80095d6:	f000 f839 	bl	800964c <USBD_GetLen>
 80095da:	4603      	mov	r3, r0
 80095dc:	3301      	adds	r3, #1
 80095de:	b29b      	uxth	r3, r3
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	b29a      	uxth	r2, r3
 80095e4:	e001      	b.n	80095ea <USBD_GetString+0x42>
 80095e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095ee:	7dfb      	ldrb	r3, [r7, #23]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4413      	add	r3, r2
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	7812      	ldrb	r2, [r2, #0]
 80095f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	3301      	adds	r3, #1
 80095fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4413      	add	r3, r2
 8009606:	2203      	movs	r2, #3
 8009608:	701a      	strb	r2, [r3, #0]
  idx++;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	3301      	adds	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009610:	e013      	b.n	800963a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009612:	7dfb      	ldrb	r3, [r7, #23]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	4413      	add	r3, r2
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	7812      	ldrb	r2, [r2, #0]
 800961c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]
    idx++;
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	3301      	adds	r3, #1
 8009628:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	4413      	add	r3, r2
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
    idx++;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	3301      	adds	r3, #1
 8009638:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1e7      	bne.n	8009612 <USBD_GetString+0x6a>
 8009642:	e000      	b.n	8009646 <USBD_GetString+0x9e>
    return;
 8009644:	bf00      	nop
  }
}
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800965c:	e005      	b.n	800966a <USBD_GetLen+0x1e>
  {
    len++;
 800965e:	7bfb      	ldrb	r3, [r7, #15]
 8009660:	3301      	adds	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	3301      	adds	r3, #1
 8009668:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f5      	bne.n	800965e <USBD_GetLen+0x12>
  }

  return len;
 8009672:	7bfb      	ldrb	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2202      	movs	r2, #2
 8009690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	2100      	movs	r1, #0
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f004 fcf1 	bl	800e08e <USBD_LL_Transmit>

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68ba      	ldr	r2, [r7, #8]
 80096c6:	2100      	movs	r1, #0
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f004 fce0 	bl	800e08e <USBD_LL_Transmit>

  return USBD_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2203      	movs	r2, #3
 80096e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	2100      	movs	r1, #0
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f004 fce4 	bl	800e0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009708:	2300      	movs	r3, #0
}
 800970a:	4618      	mov	r0, r3
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	2100      	movs	r1, #0
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f004 fcd3 	bl	800e0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2204      	movs	r2, #4
 8009740:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f004 fc9f 	bl	800e08e <USBD_LL_Transmit>

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2205      	movs	r2, #5
 8009766:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800976a:	2300      	movs	r3, #0
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f004 fcad 	bl	800e0d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8009780:	b590      	push	{r4, r7, lr}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60b9      	str	r1, [r7, #8]
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	4603      	mov	r3, r0
 800978c:	73fb      	strb	r3, [r7, #15]
 800978e:	4613      	mov	r3, r2
 8009790:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d004      	beq.n	80097a6 <bmi160_get_regs+0x26>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d102      	bne.n	80097ac <bmi160_get_regs+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 80097a6:	23ff      	movs	r3, #255	@ 0xff
 80097a8:	75fb      	strb	r3, [r7, #23]
 80097aa:	e01a      	b.n	80097e2 <bmi160_get_regs+0x62>
    }
    else if (len == 0)
 80097ac:	89bb      	ldrh	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <bmi160_get_regs+0x38>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80097b2:	23f4      	movs	r3, #244	@ 0xf4
 80097b4:	75fb      	strb	r3, [r7, #23]
 80097b6:	e014      	b.n	80097e2 <bmi160_get_regs+0x62>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d103      	bne.n	80097ca <bmi160_get_regs+0x4a>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80097c8:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 0081 	ldrb.w	r0, [r3, #129]	@ 0x81
 80097d6:	89bb      	ldrh	r3, [r7, #12]
 80097d8:	7bf9      	ldrb	r1, [r7, #15]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	47a0      	blx	r4
 80097de:	4603      	mov	r3, r0
 80097e0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80097e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd90      	pop	{r4, r7, pc}

080097ee <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80097ee:	b590      	push	{r4, r7, lr}
 80097f0:	b087      	sub	sp, #28
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607b      	str	r3, [r7, #4]
 80097f8:	4603      	mov	r3, r0
 80097fa:	73fb      	strb	r3, [r7, #15]
 80097fc:	4613      	mov	r3, r2
 80097fe:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d004      	beq.n	8009818 <bmi160_set_regs+0x2a>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <bmi160_set_regs+0x30>
    {
        rslt = BMI160_E_NULL_PTR;
 8009818:	23ff      	movs	r3, #255	@ 0xff
 800981a:	75fb      	strb	r3, [r7, #23]
 800981c:	e04e      	b.n	80098bc <bmi160_set_regs+0xce>
    }
    else if (len == 0)
 800981e:	89bb      	ldrh	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <bmi160_set_regs+0x3c>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8009824:	23f4      	movs	r3, #244	@ 0xf4
 8009826:	75fb      	strb	r3, [r7, #23]
 8009828:	e048      	b.n	80098bc <bmi160_set_regs+0xce>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8009830:	2b01      	cmp	r3, #1
 8009832:	d103      	bne.n	800983c <bmi160_set_regs+0x4e>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800983a:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8009842:	2b11      	cmp	r3, #17
 8009844:	d004      	beq.n	8009850 <bmi160_set_regs+0x62>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 800984c:	2b15      	cmp	r3, #21
 800984e:	d12a      	bne.n	80098a6 <bmi160_set_regs+0xb8>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 0081 	ldrb.w	r0, [r3, #129]	@ 0x81
 800985c:	89bb      	ldrh	r3, [r7, #12]
 800985e:	7bf9      	ldrb	r1, [r7, #15]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	47a0      	blx	r4
 8009864:	4603      	mov	r3, r0
 8009866:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800986e:	2001      	movs	r0, #1
 8009870:	4798      	blx	r3
 8009872:	e01d      	b.n	80098b0 <bmi160_set_regs+0xc2>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 40a0 	ldr.w	r4, [r3, #160]	@ 0xa0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 0081 	ldrb.w	r0, [r3, #129]	@ 0x81
 8009880:	7dbb      	ldrb	r3, [r7, #22]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	441a      	add	r2, r3
 8009886:	7bf9      	ldrb	r1, [r7, #15]
 8009888:	2301      	movs	r3, #1
 800988a:	47a0      	blx	r4
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	3301      	adds	r3, #1
 8009894:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800989c:	2001      	movs	r0, #1
 800989e:	4798      	blx	r3
            for (; count < len; count++)
 80098a0:	7dbb      	ldrb	r3, [r7, #22]
 80098a2:	3301      	adds	r3, #1
 80098a4:	75bb      	strb	r3, [r7, #22]
 80098a6:	7dbb      	ldrb	r3, [r7, #22]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	89ba      	ldrh	r2, [r7, #12]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d8e1      	bhi.n	8009874 <bmi160_set_regs+0x86>

            }
        }

        if (rslt != BMI160_OK)
 80098b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <bmi160_set_regs+0xce>
        {
            rslt = BMI160_E_COM_FAIL;
 80098b8:	23fe      	movs	r3, #254	@ 0xfe
 80098ba:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80098bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd90      	pop	{r4, r7, pc}

080098c8 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 80098d0:	2303      	movs	r3, #3
 80098d2:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 faa5 	bl	8009e24 <null_ptr_check>
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80098de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10d      	bne.n	8009902 <bmi160_init+0x3a>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d108      	bne.n	8009902 <bmi160_init+0x3a>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80098f0:	f107 010d 	add.w	r1, r7, #13
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2201      	movs	r2, #1
 80098f8:	207f      	movs	r0, #127	@ 0x7f
 80098fa:	f7ff ff41 	bl	8009780 <bmi160_get_regs>
 80098fe:	4603      	mov	r3, r0
 8009900:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8009902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d12d      	bne.n	8009966 <bmi160_init+0x9e>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8009912:	e009      	b.n	8009928 <bmi160_init+0x60>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	2000      	movs	r0, #0
 8009920:	f7ff ff2e 	bl	8009780 <bmi160_get_regs>
 8009924:	4603      	mov	r3, r0
 8009926:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	1e5a      	subs	r2, r3, #1
 800992c:	73ba      	strb	r2, [r7, #14]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d004      	beq.n	800993c <bmi160_init+0x74>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009938:	2bd1      	cmp	r3, #209	@ 0xd1
 800993a:	d1eb      	bne.n	8009914 <bmi160_init+0x4c>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 800993c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10e      	bne.n	8009962 <bmi160_init+0x9a>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800994a:	2bd1      	cmp	r3, #209	@ 0xd1
 800994c:	d109      	bne.n	8009962 <bmi160_init+0x9a>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	22ff      	movs	r2, #255	@ 0xff
 8009952:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f80b 	bl	8009972 <bmi160_soft_reset>
 800995c:	4603      	mov	r3, r0
 800995e:	73fb      	strb	r3, [r7, #15]
 8009960:	e001      	b.n	8009966 <bmi160_init+0x9e>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8009962:	23fd      	movs	r3, #253	@ 0xfd
 8009964:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 800997a:	23b6      	movs	r3, #182	@ 0xb6
 800997c:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <bmi160_soft_reset+0x1c>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800998a:	2b00      	cmp	r3, #0
 800998c:	d102      	bne.n	8009994 <bmi160_soft_reset+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800998e:	23ff      	movs	r3, #255	@ 0xff
 8009990:	73fb      	strb	r3, [r7, #15]
 8009992:	e026      	b.n	80099e2 <bmi160_soft_reset+0x70>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8009994:	f107 010e 	add.w	r1, r7, #14
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	207e      	movs	r0, #126	@ 0x7e
 800999e:	f7ff ff26 	bl	80097ee <bmi160_set_regs>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099ac:	2001      	movs	r0, #1
 80099ae:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80099b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10d      	bne.n	80099d4 <bmi160_soft_reset+0x62>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d108      	bne.n	80099d4 <bmi160_soft_reset+0x62>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80099c2:	f107 010e 	add.w	r1, r7, #14
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	207f      	movs	r0, #127	@ 0x7f
 80099cc:	f7ff fed8 	bl	8009780 <bmi160_get_regs>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 80099d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <bmi160_soft_reset+0x70>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fa44 	bl	8009e6a <default_param_settg>
        }
    }

    return rslt;
 80099e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d004      	beq.n	8009a0a <bmi160_set_sens_conf+0x1c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <bmi160_set_sens_conf+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8009a0a:	23ff      	movs	r3, #255	@ 0xff
 8009a0c:	73fb      	strb	r3, [r7, #15]
 8009a0e:	e01f      	b.n	8009a50 <bmi160_set_sens_conf+0x62>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 fa60 	bl	8009ed6 <set_accel_conf>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d116      	bne.n	8009a50 <bmi160_set_sens_conf+0x62>
        {
            rslt = set_gyro_conf(dev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fbae 	bl	800a184 <set_gyro_conf>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8009a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d10d      	bne.n	8009a50 <bmi160_set_sens_conf+0x62>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f811 	bl	8009a5c <bmi160_set_power_mode>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8009a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <bmi160_set_sens_conf+0x62>
                {
                    rslt = check_invalid_settg(dev);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb67 	bl	800a11a <check_invalid_settg>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8009a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <bmi160_set_power_mode+0x1c>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <bmi160_set_power_mode+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8009a78:	23ff      	movs	r3, #255	@ 0xff
 8009a7a:	73fb      	strb	r3, [r7, #15]
 8009a7c:	e00d      	b.n	8009a9a <bmi160_set_power_mode+0x3e>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fc9a 	bl	800a3b8 <set_accel_pwr>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d104      	bne.n	8009a9a <bmi160_set_power_mode+0x3e>
        {
            rslt = set_gyro_pwr(dev);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fd32 	bl	800a4fa <set_gyro_pwr>
 8009a96:	4603      	mov	r3, r0
 8009a98:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b086      	sub	sp, #24
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8009ac6:	7d7b      	ldrb	r3, [r7, #21]
 8009ac8:	109b      	asrs	r3, r3, #2
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8009ad2:	7d7b      	ldrb	r3, [r7, #21]
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8009ada:	7d3b      	ldrb	r3, [r7, #20]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d03c      	beq.n	8009b64 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8009aea:	7d7b      	ldrb	r3, [r7, #21]
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d024      	beq.n	8009b3a <bmi160_get_sensor_data+0x94>
 8009af0:	2b03      	cmp	r3, #3
 8009af2:	dc34      	bgt.n	8009b5e <bmi160_get_sensor_data+0xb8>
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d002      	beq.n	8009afe <bmi160_get_sensor_data+0x58>
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d00f      	beq.n	8009b1c <bmi160_get_sensor_data+0x76>
 8009afc:	e02f      	b.n	8009b5e <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009b04:	23ff      	movs	r3, #255	@ 0xff
 8009b06:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8009b08:	e02e      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8009b0a:	7dbb      	ldrb	r3, [r7, #22]
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fd42 	bl	800a59a <get_accel_data>
 8009b16:	4603      	mov	r3, r0
 8009b18:	75fb      	strb	r3, [r7, #23]
                break;
 8009b1a:	e025      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009b22:	23ff      	movs	r3, #255	@ 0xff
 8009b24:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8009b26:	e01f      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8009b28:	7dbb      	ldrb	r3, [r7, #22]
 8009b2a:	683a      	ldr	r2, [r7, #0]
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fdff 	bl	800a732 <get_gyro_data>
 8009b34:	4603      	mov	r3, r0
 8009b36:	75fb      	strb	r3, [r7, #23]
                break;
 8009b38:	e016      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d002      	beq.n	8009b46 <bmi160_get_sensor_data+0xa0>
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d102      	bne.n	8009b4c <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009b46:	23ff      	movs	r3, #255	@ 0xff
 8009b48:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8009b4a:	e00d      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8009b4c:	7db8      	ldrb	r0, [r7, #22]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	f000 ff3b 	bl	800a9ce <get_accel_gyro_data>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]
                break;
 8009b5c:	e004      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8009b5e:	23fb      	movs	r3, #251	@ 0xfb
 8009b60:	75fb      	strb	r3, [r7, #23]
                break;
 8009b62:	e001      	b.n	8009b68 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8009b64:	23ff      	movs	r3, #255	@ 0xff
 8009b66:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3718      	adds	r7, #24
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    int8_t self_test_rslt = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009b84:	6838      	ldr	r0, [r7, #0]
 8009b86:	f000 f94d 	bl	8009e24 <null_ptr_check>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8009b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <bmi160_perform_self_test+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8009b96:	23ff      	movs	r3, #255	@ 0xff
 8009b98:	73fb      	strb	r3, [r7, #15]
 8009b9a:	e033      	b.n	8009c04 <bmi160_perform_self_test+0x90>
    }
    else
    {

        /* Proceed if null check is fine */
        switch (select_sensor)
 8009b9c:	79fb      	ldrb	r3, [r7, #7]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d002      	beq.n	8009ba8 <bmi160_perform_self_test+0x34>
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d006      	beq.n	8009bb4 <bmi160_perform_self_test+0x40>
 8009ba6:	e018      	b.n	8009bda <bmi160_perform_self_test+0x66>
        {
            case BMI160_ACCEL_ONLY:
                rslt = perform_accel_self_test(dev);
 8009ba8:	6838      	ldr	r0, [r7, #0]
 8009baa:	f001 f853 	bl	800ac54 <perform_accel_self_test>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
                break;
 8009bb2:	e016      	b.n	8009be2 <bmi160_perform_self_test+0x6e>
            case BMI160_GYRO_ONLY:

                /* Set the power mode as normal mode */
                dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2215      	movs	r2, #21
 8009bb8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
                rslt = bmi160_set_power_mode(dev);
 8009bbc:	6838      	ldr	r0, [r7, #0]
 8009bbe:	f7ff ff4d 	bl	8009a5c <bmi160_set_power_mode>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]

                /* Perform gyro self test */
                if (rslt == BMI160_OK)
 8009bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d108      	bne.n	8009be0 <bmi160_perform_self_test+0x6c>
                {
                    /* Perform gyro self test */
                    rslt = perform_gyro_self_test(dev);
 8009bce:	6838      	ldr	r0, [r7, #0]
 8009bd0:	f001 f920 	bl	800ae14 <perform_gyro_self_test>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8009bd8:	e002      	b.n	8009be0 <bmi160_perform_self_test+0x6c>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8009bda:	23fb      	movs	r3, #251	@ 0xfb
 8009bdc:	73fb      	strb	r3, [r7, #15]
                break;
 8009bde:	e000      	b.n	8009be2 <bmi160_perform_self_test+0x6e>
                break;
 8009be0:	bf00      	nop
        }

        /* Check to ensure bus error does not occur */
        if (rslt >= BMI160_OK)
 8009be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	db06      	blt.n	8009bf8 <bmi160_perform_self_test+0x84>
        {
            /* Store the status of self test result */
            self_test_rslt = rslt;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	73bb      	strb	r3, [r7, #14]

            /* Perform soft reset */
            rslt = bmi160_soft_reset(dev);
 8009bee:	6838      	ldr	r0, [r7, #0]
 8009bf0:	f7ff febf 	bl	8009972 <bmi160_soft_reset>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	73fb      	strb	r3, [r7, #15]

        }

        /* Check to ensure bus operations are success */
        if (rslt == BMI160_OK)
 8009bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <bmi160_perform_self_test+0x90>
        {
            /* Restore self_test_rslt as return value */
            rslt = self_test_rslt;
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009c1a:	6838      	ldr	r0, [r7, #0]
 8009c1c:	f000 f902 	bl	8009e24 <null_ptr_check>
 8009c20:	4603      	mov	r3, r0
 8009c22:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8009c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8009c2c:	23ff      	movs	r3, #255	@ 0xff
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e069      	b.n	8009d06 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8009c32:	f107 010c 	add.w	r1, r7, #12
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2207      	movs	r2, #7
 8009c3a:	2071      	movs	r0, #113	@ 0x71
 8009c3c:	f7ff fda0 	bl	8009780 <bmi160_get_regs>
 8009c40:	4603      	mov	r3, r0
 8009c42:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8009c44:	7b3b      	ldrb	r3, [r7, #12]
 8009c46:	b25a      	sxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8009c4c:	7b7b      	ldrb	r3, [r7, #13]
 8009c4e:	b25a      	sxtb	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	b25a      	sxtb	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8009c60:	7cbb      	ldrb	r3, [r7, #18]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009c68:	7f7b      	ldrb	r3, [r7, #29]
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	039b      	lsls	r3, r3, #14
 8009c6e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009c70:	7fbb      	ldrb	r3, [r7, #30]
 8009c72:	b21b      	sxth	r3, r3
 8009c74:	019b      	lsls	r3, r3, #6
 8009c76:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009c78:	8b7a      	ldrh	r2, [r7, #26]
 8009c7a:	8b3b      	ldrh	r3, [r7, #24]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8009c80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da00      	bge.n	8009c8a <bmi160_get_offsets+0x7a>
 8009c88:	333f      	adds	r3, #63	@ 0x3f
 8009c8a:	119b      	asrs	r3, r3, #6
 8009c8c:	b21a      	sxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8009c92:	7c3b      	ldrb	r3, [r7, #16]
 8009c94:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8009c96:	7cbb      	ldrb	r3, [r7, #18]
 8009c98:	109b      	asrs	r3, r3, #2
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009ca2:	7f7b      	ldrb	r3, [r7, #29]
 8009ca4:	b21b      	sxth	r3, r3
 8009ca6:	039b      	lsls	r3, r3, #14
 8009ca8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009caa:	7fbb      	ldrb	r3, [r7, #30]
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	019b      	lsls	r3, r3, #6
 8009cb0:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009cb2:	8b7a      	ldrh	r2, [r7, #26]
 8009cb4:	8b3b      	ldrh	r3, [r7, #24]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8009cba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da00      	bge.n	8009cc4 <bmi160_get_offsets+0xb4>
 8009cc2:	333f      	adds	r3, #63	@ 0x3f
 8009cc4:	119b      	asrs	r3, r3, #6
 8009cc6:	b21a      	sxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8009ccc:	7c7b      	ldrb	r3, [r7, #17]
 8009cce:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8009cd0:	7cbb      	ldrb	r3, [r7, #18]
 8009cd2:	111b      	asrs	r3, r3, #4
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009cdc:	7f7b      	ldrb	r3, [r7, #29]
 8009cde:	b21b      	sxth	r3, r3
 8009ce0:	039b      	lsls	r3, r3, #14
 8009ce2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009ce4:	7fbb      	ldrb	r3, [r7, #30]
 8009ce6:	b21b      	sxth	r3, r3
 8009ce8:	019b      	lsls	r3, r3, #6
 8009cea:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009cec:	8b7a      	ldrh	r2, [r7, #26]
 8009cee:	8b3b      	ldrh	r3, [r7, #24]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8009cf4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	da00      	bge.n	8009cfe <bmi160_get_offsets+0xee>
 8009cfc:	333f      	adds	r3, #63	@ 0x3f
 8009cfe:	119b      	asrs	r3, r3, #6
 8009d00:	b21a      	sxth	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8009d06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <bmi160_set_offsets>:
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,
                          const struct bmi160_offsets *offset,
                          struct bmi160_dev const *dev)
{
 8009d12:	b580      	push	{r7, lr}
 8009d14:	b088      	sub	sp, #32
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	60f8      	str	r0, [r7, #12]
 8009d1a:	60b9      	str	r1, [r7, #8]
 8009d1c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data[7];
    uint8_t x_msb, y_msb, z_msb;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f880 	bl	8009e24 <null_ptr_check>
 8009d24:	4603      	mov	r3, r0
 8009d26:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8009d28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <bmi160_set_offsets+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8009d30:	23ff      	movs	r3, #255	@ 0xff
 8009d32:	77fb      	strb	r3, [r7, #31]
 8009d34:	e070      	b.n	8009e18 <bmi160_set_offsets+0x106>
    }
    else
    {
        /* Update the accel offset */
        data[0] = (uint8_t)offset->off_acc_x;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f993 3000 	ldrsb.w	r3, [r3]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	753b      	strb	r3, [r7, #20]
        data[1] = (uint8_t)offset->off_acc_y;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	757b      	strb	r3, [r7, #21]
        data[2] = (uint8_t)offset->off_acc_z;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	75bb      	strb	r3, [r7, #22]

        /* Update the LSB of gyro offset */
        data[3] = BMI160_GET_LSB(offset->off_gyro_x);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	75fb      	strb	r3, [r7, #23]
        data[4] = BMI160_GET_LSB(offset->off_gyro_y);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	763b      	strb	r3, [r7, #24]
        data[5] = BMI160_GET_LSB(offset->off_gyro_z);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	767b      	strb	r3, [r7, #25]

        /* Update the MSB of gyro offset */
        x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	121b      	asrs	r3, r3, #8
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	77bb      	strb	r3, [r7, #30]
        y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	121b      	asrs	r3, r3, #8
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 0303 	and.w	r3, r3, #3
 8009d94:	777b      	strb	r3, [r7, #29]
        z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	121b      	asrs	r3, r3, #8
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	773b      	strb	r3, [r7, #28]
        data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
 8009da8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	b25a      	sxtb	r2, r3
 8009db0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	b25b      	sxtb	r3, r3
 8009db8:	4313      	orrs	r3, r2
 8009dba:	b25a      	sxtb	r2, r3
 8009dbc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	76bb      	strb	r3, [r7, #26]

        /* Set the offset enable/disable for gyro and accel */
        data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8009dc8:	7ebb      	ldrb	r3, [r7, #26]
 8009dca:	b25b      	sxtb	r3, r3
 8009dcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dd0:	b25a      	sxtb	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	b25b      	sxtb	r3, r3
 8009dd8:	01db      	lsls	r3, r3, #7
 8009dda:	b25b      	sxtb	r3, r3
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	b25b      	sxtb	r3, r3
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	76bb      	strb	r3, [r7, #26]
        data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8009de4:	7ebb      	ldrb	r3, [r7, #26]
 8009de6:	b25b      	sxtb	r3, r3
 8009de8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dec:	b25a      	sxtb	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	791b      	ldrb	r3, [r3, #4]
 8009df2:	b25b      	sxtb	r3, r3
 8009df4:	019b      	lsls	r3, r3, #6
 8009df6:	b25b      	sxtb	r3, r3
 8009df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dfc:	b25b      	sxtb	r3, r3
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	b25b      	sxtb	r3, r3
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	76bb      	strb	r3, [r7, #26]

        /* Set the offset config and values in the sensor */
        rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8009e06:	f107 0114 	add.w	r1, r7, #20
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2207      	movs	r2, #7
 8009e0e:	2071      	movs	r0, #113	@ 0x71
 8009e10:	f7ff fced 	bl	80097ee <bmi160_set_regs>
 8009e14:	4603      	mov	r3, r0
 8009e16:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8009e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <null_ptr_check+0x2c>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <null_ptr_check+0x2c>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d004      	beq.n	8009e50 <null_ptr_check+0x2c>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <null_ptr_check+0x32>
    {
        rslt = BMI160_E_NULL_PTR;
 8009e50:	23ff      	movs	r3, #255	@ 0xff
 8009e52:	73fb      	strb	r3, [r7, #15]
 8009e54:	e001      	b.n	8009e5a <null_ptr_check+0x36>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2208      	movs	r2, #8
 8009e7e:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2210      	movs	r2, #16
 8009e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2203      	movs	r2, #3
 8009e8e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2202      	movs	r2, #2
 8009e96:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2214      	movs	r2, #20
 8009ea6:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8009eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8009ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 8009eca:	bf00      	nop
 8009ecc:	370c      	adds	r7, #12
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr

08009ed6 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8009ede:	2300      	movs	r3, #0
 8009ee0:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8009ee2:	f107 030c 	add.w	r3, r7, #12
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f000 f839 	bl	8009f60 <check_accel_config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8009ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d12c      	bne.n	8009f54 <set_accel_conf+0x7e>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8009efa:	f107 010c 	add.w	r1, r7, #12
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	2040      	movs	r0, #64	@ 0x40
 8009f04:	f7ff fc73 	bl	80097ee <bmi160_set_regs>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d11f      	bne.n	8009f54 <set_accel_conf+0x7e>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f893 2085 	ldrb.w	r2, [r3, #133]	@ 0x85
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 2087 	ldrb.w	r2, [r3, #135]	@ 0x87
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8009f2c:	f107 030c 	add.w	r3, r7, #12
 8009f30:	1c59      	adds	r1, r3, #1
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	2041      	movs	r0, #65	@ 0x41
 8009f38:	f7ff fc59 	bl	80097ee <bmi160_set_regs>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8009f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d105      	bne.n	8009f54 <set_accel_conf+0x7e>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
            }
        }
    }

    return rslt;
 8009f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	2040      	movs	r0, #64	@ 0x40
 8009f72:	f7ff fc05 	bl	8009780 <bmi160_get_regs>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8009f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d11b      	bne.n	8009fba <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f81e 	bl	8009fc6 <process_accel_odr>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d111      	bne.n	8009fba <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f84c 	bl	800a036 <process_accel_bw>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8009fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d107      	bne.n	8009fba <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3301      	adds	r3, #1
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 f87a 	bl	800a0aa <process_accel_range>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8009fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3710      	adds	r7, #16
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8009fe2:	2b0c      	cmp	r3, #12
 8009fe4:	d81d      	bhi.n	800a022 <process_accel_odr+0x5c>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	f893 2085 	ldrb.w	r2, [r3, #133]	@ 0x85
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d017      	beq.n	800a026 <process_accel_odr+0x60>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 8009ffc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	f023 030f 	bic.w	r3, r3, #15
 800a006:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 800a008:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a00c:	f003 030f 	and.w	r3, r3, #15
 800a010:	b25a      	sxtb	r2, r3
 800a012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a016:	4313      	orrs	r3, r2
 800a018:	b25b      	sxtb	r3, r3
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	e001      	b.n	800a026 <process_accel_odr+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a022:	23fc      	movs	r3, #252	@ 0xfc
 800a024:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 800a036:	b480      	push	{r7}
 800a038:	b085      	sub	sp, #20
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800a048:	2300      	movs	r3, #0
 800a04a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800a052:	2b07      	cmp	r3, #7
 800a054:	d81f      	bhi.n	800a096 <process_accel_bw+0x60>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	f893 2087 	ldrb.w	r2, [r3, #135]	@ 0x87
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 800a062:	429a      	cmp	r2, r3
 800a064:	d019      	beq.n	800a09a <process_accel_bw+0x64>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 800a06c:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a076:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 800a078:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a07c:	011b      	lsls	r3, r3, #4
 800a07e:	b25b      	sxtb	r3, r3
 800a080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a084:	b25a      	sxtb	r2, r3
 800a086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	b25b      	sxtb	r3, r3
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	e001      	b.n	800a09a <process_accel_bw+0x64>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a096:	23fc      	movs	r3, #252	@ 0xfc
 800a098:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3714      	adds	r7, #20
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b085      	sub	sp, #20
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a0c6:	2b0c      	cmp	r3, #12
 800a0c8:	d81d      	bhi.n	800a106 <process_accel_range+0x5c>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	f893 308a 	ldrb.w	r3, [r3, #138]	@ 0x8a
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d017      	beq.n	800a10a <process_accel_range+0x60>
        {
            range = (uint8_t)dev->accel_cfg.range;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800a0e0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	f023 030f 	bic.w	r3, r3, #15
 800a0ea:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 800a0ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a0f0:	f003 030f 	and.w	r3, r3, #15
 800a0f4:	b25a      	sxtb	r2, r3
 800a0f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	701a      	strb	r2, [r3, #0]
 800a104:	e001      	b.n	800a10a <process_accel_range+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a106:	23fc      	movs	r3, #252	@ 0xfc
 800a108:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a10a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800a126:	f107 010e 	add.w	r1, r7, #14
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	2002      	movs	r0, #2
 800a130:	f7ff fb26 	bl	8009780 <bmi160_get_regs>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 800a138:	7bbb      	ldrb	r3, [r7, #14]
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	b2db      	uxtb	r3, r3
 800a148:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 800a14a:	7bbb      	ldrb	r3, [r7, #14]
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d102      	bne.n	800a156 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 800a150:	23fa      	movs	r3, #250	@ 0xfa
 800a152:	73fb      	strb	r3, [r7, #15]
 800a154:	e010      	b.n	800a178 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 800a156:	7bbb      	ldrb	r3, [r7, #14]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d102      	bne.n	800a162 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800a15c:	23f9      	movs	r3, #249	@ 0xf9
 800a15e:	73fb      	strb	r3, [r7, #15]
 800a160:	e00a      	b.n	800a178 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 800a162:	7bbb      	ldrb	r3, [r7, #14]
 800a164:	2b03      	cmp	r3, #3
 800a166:	d102      	bne.n	800a16e <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 800a168:	23f8      	movs	r3, #248	@ 0xf8
 800a16a:	73fb      	strb	r3, [r7, #15]
 800a16c:	e004      	b.n	800a178 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800a16e:	7bbb      	ldrb	r3, [r7, #14]
 800a170:	2b07      	cmp	r3, #7
 800a172:	d101      	bne.n	800a178 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 800a174:	23f7      	movs	r3, #247	@ 0xf7
 800a176:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800a18c:	2300      	movs	r3, #0
 800a18e:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 f839 	bl	800a20e <check_gyro_config>
 800a19c:	4603      	mov	r3, r0
 800a19e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a1a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d12c      	bne.n	800a202 <set_gyro_conf+0x7e>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 800a1a8:	f107 010c 	add.w	r1, r7, #12
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	2042      	movs	r0, #66	@ 0x42
 800a1b2:	f7ff fb1c 	bl	80097ee <bmi160_set_regs>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d11f      	bne.n	800a202 <set_gyro_conf+0x7e>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 208f 	ldrb.w	r2, [r3, #143]	@ 0x8f
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	1c59      	adds	r1, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	2043      	movs	r0, #67	@ 0x43
 800a1e6:	f7ff fb02 	bl	80097ee <bmi160_set_regs>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a1ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d105      	bne.n	800a202 <set_gyro_conf+0x7e>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 208e 	ldrb.w	r2, [r3, #142]	@ 0x8e
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
            }
        }
    }

    return rslt;
 800a202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2202      	movs	r2, #2
 800a21c:	6879      	ldr	r1, [r7, #4]
 800a21e:	2042      	movs	r0, #66	@ 0x42
 800a220:	f7ff faae 	bl	8009780 <bmi160_get_regs>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d11b      	bne.n	800a268 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f81e 	bl	800a274 <process_gyro_odr>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d111      	bne.n	800a268 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f84c 	bl	800a2e4 <process_gyro_bw>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d107      	bne.n	800a268 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	3301      	adds	r3, #1
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 f872 	bl	800a348 <process_gyro_range>
 800a264:	4603      	mov	r3, r0
 800a266:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800a268:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800a290:	2b0d      	cmp	r3, #13
 800a292:	d81d      	bhi.n	800a2d0 <process_gyro_odr+0x5c>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	f893 208d 	ldrb.w	r2, [r3, #141]	@ 0x8d
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d017      	beq.n	800a2d4 <process_gyro_odr+0x60>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800a2aa:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f023 030f 	bic.w	r3, r3, #15
 800a2b4:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800a2b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	b25a      	sxtb	r2, r3
 800a2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	e001      	b.n	800a2d4 <process_gyro_odr+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a2d0:	23fc      	movs	r3, #252	@ 0xfc
 800a2d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a2d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800a300:	2b02      	cmp	r3, #2
 800a302:	d817      	bhi.n	800a334 <process_gyro_bw+0x50>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800a30a:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a314:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800a316:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a322:	b25a      	sxtb	r2, r3
 800a324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a328:	4313      	orrs	r3, r2
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	b2da      	uxtb	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	701a      	strb	r2, [r3, #0]
 800a332:	e001      	b.n	800a338 <process_gyro_bw+0x54>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a334:	23fc      	movs	r3, #252	@ 0xfc
 800a336:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a338:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800a364:	2b04      	cmp	r3, #4
 800a366:	d81d      	bhi.n	800a3a4 <process_gyro_range+0x5c>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	f893 208e 	ldrb.w	r2, [r3, #142]	@ 0x8e
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 800a374:	429a      	cmp	r2, r3
 800a376:	d017      	beq.n	800a3a8 <process_gyro_range+0x60>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800a37e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f023 0307 	bic.w	r3, r3, #7
 800a388:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 800a38a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a38e:	f003 0307 	and.w	r3, r3, #7
 800a392:	b25a      	sxtb	r2, r3
 800a394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a398:	4313      	orrs	r3, r2
 800a39a:	b25b      	sxtb	r3, r3
 800a39c:	b2da      	uxtb	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	701a      	strb	r2, [r3, #0]
 800a3a2:	e001      	b.n	800a3a8 <process_gyro_range+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a3a4:	23fc      	movs	r3, #252	@ 0xfc
 800a3a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ce:	2b0f      	cmp	r3, #15
 800a3d0:	d933      	bls.n	800a43a <set_accel_pwr+0x82>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3d8:	2b12      	cmp	r3, #18
 800a3da:	d82e      	bhi.n	800a43a <set_accel_pwr+0x82>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d029      	beq.n	800a440 <set_accel_pwr+0x88>
        {
            rslt = process_under_sampling(&data, dev);
 800a3ec:	f107 030e 	add.w	r3, r7, #14
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 f82b 	bl	800a44e <process_under_sampling>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d11d      	bne.n	800a440 <set_accel_pwr+0x88>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f103 0184 	add.w	r1, r3, #132	@ 0x84
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	207e      	movs	r0, #126	@ 0x7e
 800a410:	f7ff f9ed 	bl	80097ee <bmi160_set_regs>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d104      	bne.n	800a42c <set_accel_pwr+0x74>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a428:	2005      	movs	r0, #5
 800a42a:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a438:	e002      	b.n	800a440 <set_accel_pwr+0x88>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800a43a:	23f3      	movs	r3, #243	@ 0xf3
 800a43c:	73fb      	strb	r3, [r7, #15]
 800a43e:	e000      	b.n	800a442 <set_accel_pwr+0x8a>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a440:	bf00      	nop
    }

    return rslt;
 800a442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 800a45c:	2300      	movs	r3, #0
 800a45e:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2201      	movs	r2, #1
 800a464:	6879      	ldr	r1, [r7, #4]
 800a466:	2040      	movs	r0, #64	@ 0x40
 800a468:	f7ff f98a 	bl	8009780 <bmi160_get_regs>
 800a46c:	4603      	mov	r3, r0
 800a46e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d13a      	bne.n	800a4ee <process_under_sampling+0xa0>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a47e:	2b12      	cmp	r3, #18
 800a480:	d120      	bne.n	800a4c4 <process_under_sampling+0x76>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a48a:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a492:	b2da      	uxtb	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	2201      	movs	r2, #1
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	2040      	movs	r0, #64	@ 0x40
 800a4a0:	f7ff f9a5 	bl	80097ee <bmi160_set_regs>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 800a4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d11e      	bne.n	800a4ee <process_under_sampling+0xa0>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800a4b0:	f107 010c 	add.w	r1, r7, #12
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2202      	movs	r2, #2
 800a4b8:	2058      	movs	r0, #88	@ 0x58
 800a4ba:	f7ff f998 	bl	80097ee <bmi160_set_regs>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	73fb      	strb	r3, [r7, #15]
 800a4c2:	e014      	b.n	800a4ee <process_under_sampling+0xa0>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b25b      	sxtb	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	da0f      	bge.n	800a4ee <process_under_sampling+0xa0>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4d6:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	7bba      	ldrb	r2, [r7, #14]
 800a4dc:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	6879      	ldr	r1, [r7, #4]
 800a4e4:	2040      	movs	r0, #64	@ 0x40
 800a4e6:	f7ff f982 	bl	80097ee <bmi160_set_regs>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b084      	sub	sp, #16
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a502:	2300      	movs	r3, #0
 800a504:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800a50c:	2b14      	cmp	r3, #20
 800a50e:	d009      	beq.n	800a524 <set_gyro_pwr+0x2a>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800a516:	2b15      	cmp	r3, #21
 800a518:	d004      	beq.n	800a524 <set_gyro_pwr+0x2a>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800a520:	2b17      	cmp	r3, #23
 800a522:	d132      	bne.n	800a58a <set_gyro_pwr+0x90>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a530:	429a      	cmp	r2, r3
 800a532:	d02c      	beq.n	800a58e <set_gyro_pwr+0x94>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f103 018c 	add.w	r1, r3, #140	@ 0x8c
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2201      	movs	r2, #1
 800a53e:	207e      	movs	r0, #126	@ 0x7e
 800a540:	f7ff f955 	bl	80097ee <bmi160_set_regs>
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a54e:	2b14      	cmp	r3, #20
 800a550:	d105      	bne.n	800a55e <set_gyro_pwr+0x64>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a558:	2050      	movs	r0, #80	@ 0x50
 800a55a:	4798      	blx	r3
 800a55c:	e00e      	b.n	800a57c <set_gyro_pwr+0x82>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800a564:	2b17      	cmp	r3, #23
 800a566:	d109      	bne.n	800a57c <set_gyro_pwr+0x82>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800a56e:	2b15      	cmp	r3, #21
 800a570:	d104      	bne.n	800a57c <set_gyro_pwr+0x82>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a578:	200a      	movs	r0, #10
 800a57a:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800a588:	e001      	b.n	800a58e <set_gyro_pwr+0x94>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800a58a:	23f3      	movs	r3, #243	@ 0xf3
 800a58c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b08c      	sub	sp, #48	@ 0x30
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	60b9      	str	r1, [r7, #8]
 800a5a4:	607a      	str	r2, [r7, #4]
 800a5a6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 800a5ae:	f107 0314 	add.w	r3, r7, #20
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	605a      	str	r2, [r3, #4]
 800a5b8:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	3306      	adds	r3, #6
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	f107 0114 	add.w	r1, r7, #20
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2012      	movs	r0, #18
 800a5d8:	f7ff f8d2 	bl	8009780 <bmi160_get_regs>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800a5e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f040 809a 	bne.w	800a720 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 800a5ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a5f6:	3330      	adds	r3, #48	@ 0x30
 800a5f8:	443b      	add	r3, r7
 800a5fa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a5fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a602:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a60c:	3330      	adds	r3, #48	@ 0x30
 800a60e:	443b      	add	r3, r7
 800a610:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a618:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a61c:	b21b      	sxth	r3, r3
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	b21a      	sxth	r2, r3
 800a622:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a626:	b21b      	sxth	r3, r3
 800a628:	4313      	orrs	r3, r2
 800a62a:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	8c3a      	ldrh	r2, [r7, #32]
 800a630:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800a632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a63c:	3330      	adds	r3, #48	@ 0x30
 800a63e:	443b      	add	r3, r7
 800a640:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a644:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a648:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a652:	3330      	adds	r3, #48	@ 0x30
 800a654:	443b      	add	r3, r7
 800a656:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a65a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a65e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a662:	b21b      	sxth	r3, r3
 800a664:	021b      	lsls	r3, r3, #8
 800a666:	b21a      	sxth	r2, r3
 800a668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a66c:	b21b      	sxth	r3, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	8c3a      	ldrh	r2, [r7, #32]
 800a676:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800a678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a682:	3330      	adds	r3, #48	@ 0x30
 800a684:	443b      	add	r3, r7
 800a686:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a68a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a68e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a698:	3330      	adds	r3, #48	@ 0x30
 800a69a:	443b      	add	r3, r7
 800a69c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a6a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a6a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	021b      	lsls	r3, r3, #8
 800a6ac:	b21a      	sxth	r2, r3
 800a6ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a6b2:	b21b      	sxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	8c3a      	ldrh	r2, [r7, #32]
 800a6bc:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d129      	bne.n	800a718 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 800a6c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a6ce:	3330      	adds	r3, #48	@ 0x30
 800a6d0:	443b      	add	r3, r7
 800a6d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a6d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800a6da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a6e4:	3330      	adds	r3, #48	@ 0x30
 800a6e6:	443b      	add	r3, r7
 800a6e8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a6ec:	021b      	lsls	r3, r3, #8
 800a6ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800a6f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a6fa:	3330      	adds	r3, #48	@ 0x30
 800a6fc:	443b      	add	r3, r7
 800a6fe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a702:	041b      	lsls	r3, r3, #16
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800a706:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	431a      	orrs	r2, r3
 800a70c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a710:	431a      	orrs	r2, r3
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	639a      	str	r2, [r3, #56]	@ 0x38
 800a716:	e006      	b.n	800a726 <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2200      	movs	r2, #0
 800a71c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a71e:	e002      	b.n	800a726 <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800a720:	23fe      	movs	r3, #254	@ 0xfe
 800a722:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800a726:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3730      	adds	r7, #48	@ 0x30
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b08c      	sub	sp, #48	@ 0x30
 800a736:	af00      	add	r7, sp, #0
 800a738:	4603      	mov	r3, r0
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
 800a73e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	605a      	str	r2, [r3, #4]
 800a750:	609a      	str	r2, [r3, #8]
 800a752:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800a764:	7bfb      	ldrb	r3, [r7, #15]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d17e      	bne.n	800a868 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 800a76a:	f107 0110 	add.w	r1, r7, #16
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2206      	movs	r2, #6
 800a772:	200c      	movs	r0, #12
 800a774:	f7ff f804 	bl	8009780 <bmi160_get_regs>
 800a778:	4603      	mov	r3, r0
 800a77a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800a77e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a782:	2b00      	cmp	r3, #0
 800a784:	d16c      	bne.n	800a860 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800a786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a790:	3330      	adds	r3, #48	@ 0x30
 800a792:	443b      	add	r3, r7
 800a794:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a798:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a79c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7a0:	1c5a      	adds	r2, r3, #1
 800a7a2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a7a6:	3330      	adds	r3, #48	@ 0x30
 800a7a8:	443b      	add	r3, r7
 800a7aa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a7ae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a7b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a7b6:	b21b      	sxth	r3, r3
 800a7b8:	021b      	lsls	r3, r3, #8
 800a7ba:	b21a      	sxth	r2, r3
 800a7bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a7c0:	b21b      	sxth	r3, r3
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	8c3a      	ldrh	r2, [r7, #32]
 800a7ca:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800a7cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7d0:	1c5a      	adds	r2, r3, #1
 800a7d2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a7d6:	3330      	adds	r3, #48	@ 0x30
 800a7d8:	443b      	add	r3, r7
 800a7da:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a7de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a7e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7e6:	1c5a      	adds	r2, r3, #1
 800a7e8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a7ec:	3330      	adds	r3, #48	@ 0x30
 800a7ee:	443b      	add	r3, r7
 800a7f0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a7f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a7f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a7fc:	b21b      	sxth	r3, r3
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	b21a      	sxth	r2, r3
 800a802:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a806:	b21b      	sxth	r3, r3
 800a808:	4313      	orrs	r3, r2
 800a80a:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	8c3a      	ldrh	r2, [r7, #32]
 800a810:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800a812:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a81c:	3330      	adds	r3, #48	@ 0x30
 800a81e:	443b      	add	r3, r7
 800a820:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a828:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a82c:	1c5a      	adds	r2, r3, #1
 800a82e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a832:	3330      	adds	r3, #48	@ 0x30
 800a834:	443b      	add	r3, r7
 800a836:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a83a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a83e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a842:	b21b      	sxth	r3, r3
 800a844:	021b      	lsls	r3, r3, #8
 800a846:	b21a      	sxth	r2, r3
 800a848:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a84c:	b21b      	sxth	r3, r3
 800a84e:	4313      	orrs	r3, r2
 800a850:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	8c3a      	ldrh	r2, [r7, #32]
 800a856:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	2200      	movs	r2, #0
 800a85c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a85e:	e0b0      	b.n	800a9c2 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800a860:	23fe      	movs	r3, #254	@ 0xfe
 800a862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a866:	e0ac      	b.n	800a9c2 <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800a868:	7bfb      	ldrb	r3, [r7, #15]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	330c      	adds	r3, #12
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f107 0110 	add.w	r1, r7, #16
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	200c      	movs	r0, #12
 800a878:	f7fe ff82 	bl	8009780 <bmi160_get_regs>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800a882:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 8098 	bne.w	800a9bc <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800a88c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a896:	3330      	adds	r3, #48	@ 0x30
 800a898:	443b      	add	r3, r7
 800a89a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a89e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a8a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8ac:	3330      	adds	r3, #48	@ 0x30
 800a8ae:	443b      	add	r3, r7
 800a8b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a8b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a8b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8bc:	b21b      	sxth	r3, r3
 800a8be:	021b      	lsls	r3, r3, #8
 800a8c0:	b21a      	sxth	r2, r3
 800a8c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8c6:	b21b      	sxth	r3, r3
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	8c3a      	ldrh	r2, [r7, #32]
 800a8d0:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800a8d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8dc:	3330      	adds	r3, #48	@ 0x30
 800a8de:	443b      	add	r3, r7
 800a8e0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a8e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a8e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8f2:	3330      	adds	r3, #48	@ 0x30
 800a8f4:	443b      	add	r3, r7
 800a8f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a8fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a8fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a902:	b21b      	sxth	r3, r3
 800a904:	021b      	lsls	r3, r3, #8
 800a906:	b21a      	sxth	r2, r3
 800a908:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a90c:	b21b      	sxth	r3, r3
 800a90e:	4313      	orrs	r3, r2
 800a910:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	8c3a      	ldrh	r2, [r7, #32]
 800a916:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800a918:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a922:	3330      	adds	r3, #48	@ 0x30
 800a924:	443b      	add	r3, r7
 800a926:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a92a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a92e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a938:	3330      	adds	r3, #48	@ 0x30
 800a93a:	443b      	add	r3, r7
 800a93c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a944:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a948:	b21b      	sxth	r3, r3
 800a94a:	021b      	lsls	r3, r3, #8
 800a94c:	b21a      	sxth	r2, r3
 800a94e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a952:	b21b      	sxth	r3, r3
 800a954:	4313      	orrs	r3, r2
 800a956:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	8c3a      	ldrh	r2, [r7, #32]
 800a95c:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 800a95e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a962:	3306      	adds	r3, #6
 800a964:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 800a968:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a972:	3330      	adds	r3, #48	@ 0x30
 800a974:	443b      	add	r3, r7
 800a976:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a97a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800a97e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a982:	1c5a      	adds	r2, r3, #1
 800a984:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a988:	3330      	adds	r3, #48	@ 0x30
 800a98a:	443b      	add	r3, r7
 800a98c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a990:	021b      	lsls	r3, r3, #8
 800a992:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800a994:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a99e:	3330      	adds	r3, #48	@ 0x30
 800a9a0:	443b      	add	r3, r7
 800a9a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a9a6:	041b      	lsls	r3, r3, #16
 800a9a8:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800a9aa:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a9ba:	e002      	b.n	800a9c2 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800a9bc:	23fe      	movs	r3, #254	@ 0xfe
 800a9be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800a9c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3730      	adds	r7, #48	@ 0x30
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b08c      	sub	sp, #48	@ 0x30
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800a9e4:	f107 0310 	add.w	r3, r7, #16
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	605a      	str	r2, [r3, #4]
 800a9ee:	609a      	str	r2, [r3, #8]
 800a9f0:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800aa02:	7bfb      	ldrb	r3, [r7, #15]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	330c      	adds	r3, #12
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	f107 0110 	add.w	r1, r7, #16
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	200c      	movs	r0, #12
 800aa12:	f7fe feb5 	bl	8009780 <bmi160_get_regs>
 800aa16:	4603      	mov	r3, r0
 800aa18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800aa1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f040 810e 	bne.w	800ac42 <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800aa26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa30:	3330      	adds	r3, #48	@ 0x30
 800aa32:	443b      	add	r3, r7
 800aa34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aa3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa46:	3330      	adds	r3, #48	@ 0x30
 800aa48:	443b      	add	r3, r7
 800aa4a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aa52:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa56:	b21b      	sxth	r3, r3
 800aa58:	021b      	lsls	r3, r3, #8
 800aa5a:	b21a      	sxth	r2, r3
 800aa5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa60:	b21b      	sxth	r3, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8c3a      	ldrh	r2, [r7, #32]
 800aa6a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800aa6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa76:	3330      	adds	r3, #48	@ 0x30
 800aa78:	443b      	add	r3, r7
 800aa7a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aa82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa8c:	3330      	adds	r3, #48	@ 0x30
 800aa8e:	443b      	add	r3, r7
 800aa90:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aa98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa9c:	b21b      	sxth	r3, r3
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	b21a      	sxth	r2, r3
 800aaa2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aaa6:	b21b      	sxth	r3, r3
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	8c3a      	ldrh	r2, [r7, #32]
 800aab0:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800aab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aabc:	3330      	adds	r3, #48	@ 0x30
 800aabe:	443b      	add	r3, r7
 800aac0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aac4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aac8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aad2:	3330      	adds	r3, #48	@ 0x30
 800aad4:	443b      	add	r3, r7
 800aad6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aada:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aade:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aae2:	b21b      	sxth	r3, r3
 800aae4:	021b      	lsls	r3, r3, #8
 800aae6:	b21a      	sxth	r2, r3
 800aae8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aaec:	b21b      	sxth	r3, r3
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	8c3a      	ldrh	r2, [r7, #32]
 800aaf6:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800aaf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab02:	3330      	adds	r3, #48	@ 0x30
 800ab04:	443b      	add	r3, r7
 800ab06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800ab0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab18:	3330      	adds	r3, #48	@ 0x30
 800ab1a:	443b      	add	r3, r7
 800ab1c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800ab24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ab28:	b21b      	sxth	r3, r3
 800ab2a:	021b      	lsls	r3, r3, #8
 800ab2c:	b21a      	sxth	r2, r3
 800ab2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab32:	b21b      	sxth	r3, r3
 800ab34:	4313      	orrs	r3, r2
 800ab36:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	8c3a      	ldrh	r2, [r7, #32]
 800ab3c:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800ab3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab48:	3330      	adds	r3, #48	@ 0x30
 800ab4a:	443b      	add	r3, r7
 800ab4c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800ab54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab5e:	3330      	adds	r3, #48	@ 0x30
 800ab60:	443b      	add	r3, r7
 800ab62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab66:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800ab6a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ab6e:	b21b      	sxth	r3, r3
 800ab70:	021b      	lsls	r3, r3, #8
 800ab72:	b21a      	sxth	r2, r3
 800ab74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab78:	b21b      	sxth	r3, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	8c3a      	ldrh	r2, [r7, #32]
 800ab82:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800ab84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab8e:	3330      	adds	r3, #48	@ 0x30
 800ab90:	443b      	add	r3, r7
 800ab92:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800ab9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aba4:	3330      	adds	r3, #48	@ 0x30
 800aba6:	443b      	add	r3, r7
 800aba8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800abac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800abb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800abb4:	b21b      	sxth	r3, r3
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	b21a      	sxth	r2, r3
 800abba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abbe:	b21b      	sxth	r3, r3
 800abc0:	4313      	orrs	r3, r2
 800abc2:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	8c3a      	ldrh	r2, [r7, #32]
 800abc8:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d131      	bne.n	800ac34 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 800abd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abd4:	1c5a      	adds	r2, r3, #1
 800abd6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800abda:	3330      	adds	r3, #48	@ 0x30
 800abdc:	443b      	add	r3, r7
 800abde:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800abe2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800abe6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800abf0:	3330      	adds	r3, #48	@ 0x30
 800abf2:	443b      	add	r3, r7
 800abf4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800abf8:	021b      	lsls	r3, r3, #8
 800abfa:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800abfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac00:	1c5a      	adds	r2, r3, #1
 800ac02:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac06:	3330      	adds	r3, #48	@ 0x30
 800ac08:	443b      	add	r3, r7
 800ac0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ac0e:	041b      	lsls	r3, r3, #16
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800ac12:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	431a      	orrs	r2, r3
 800ac18:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	639a      	str	r2, [r3, #56]	@ 0x38
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800ac22:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	431a      	orrs	r2, r3
 800ac28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac32:	e009      	b.n	800ac48 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2200      	movs	r2, #0
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38
            gyro->sensortime = 0;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac40:	e002      	b.n	800ac48 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800ac42:	23fe      	movs	r3, #254	@ 0xfe
 800ac44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800ac48:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3730      	adds	r7, #48	@ 0x30
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <perform_accel_self_test>:

/*!
 * @brief This API performs the self test for accelerometer of BMI160
 */
static int8_t perform_accel_self_test(struct bmi160_dev *dev)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b0a4      	sub	sp, #144	@ 0x90
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    struct bmi160_sensor_data accel_pos, accel_neg;

    /* Enable Gyro self test bit */
    rslt = enable_accel_self_test(dev);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f832 	bl	800acc6 <enable_accel_self_test>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    if (rslt == BMI160_OK)
 800ac68:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d124      	bne.n	800acba <perform_accel_self_test+0x66>
    {
        /* Perform accel self test with positive excitation */
        rslt = accel_self_test_positive_excitation(&accel_pos, dev);
 800ac70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 f84b 	bl	800ad12 <accel_self_test_positive_excitation>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
        if (rslt == BMI160_OK)
 800ac82:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d117      	bne.n	800acba <perform_accel_self_test+0x66>
        {
            /* Perform accel self test with negative excitation */
            rslt = accel_self_test_negative_excitation(&accel_neg, dev);
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	6879      	ldr	r1, [r7, #4]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f865 	bl	800ad60 <accel_self_test_negative_excitation>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            if (rslt == BMI160_OK)
 800ac9c:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <perform_accel_self_test+0x66>
            {
                /* Validate the self test result */
                rslt = validate_accel_self_test(&accel_pos, &accel_neg);
 800aca4:	f107 0208 	add.w	r2, r7, #8
 800aca8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800acac:	4611      	mov	r1, r2
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 f87d 	bl	800adae <validate_accel_self_test>
 800acb4:	4603      	mov	r3, r0
 800acb6:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            }
        }
    }

    return rslt;
 800acba:	f997 308f 	ldrsb.w	r3, [r7, #143]	@ 0x8f
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3790      	adds	r7, #144	@ 0x90
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <enable_accel_self_test>:
/*!
 * @brief This API enables to perform the accel self test by setting proper
 * configurations to facilitate accel self test
 */
static int8_t enable_accel_self_test(struct bmi160_dev *dev)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Set the Accel power mode as normal mode */
    dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2211      	movs	r2, #17
 800acd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Set the sensor range configuration as 8G */
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2208      	movs	r2, #8
 800acda:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
    rslt = bmi160_set_sens_conf(dev);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7fe fe85 	bl	80099ee <bmi160_set_sens_conf>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ace8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d10a      	bne.n	800ad06 <enable_accel_self_test+0x40>
    {
        /* Accel configurations are set to facilitate self test
         * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
        reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
 800acf0:	232c      	movs	r3, #44	@ 0x2c
 800acf2:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
 800acf4:	f107 010e 	add.w	r1, r7, #14
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	2040      	movs	r0, #64	@ 0x40
 800acfe:	f7fe fd76 	bl	80097ee <bmi160_set_regs>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ad06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <accel_self_test_positive_excitation>:

/*!
 * @brief This API performs accel self test with positive excitation
 */
static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const struct bmi160_dev *dev)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with positive self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
 800ad1c:	230d      	movs	r3, #13
 800ad1e:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800ad20:	f107 010e 	add.w	r1, r7, #14
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2201      	movs	r2, #1
 800ad28:	206d      	movs	r0, #109	@ 0x6d
 800ad2a:	f7fe fd60 	bl	80097ee <bmi160_set_regs>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ad32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10c      	bne.n	800ad54 <accel_self_test_positive_excitation+0x42>
    {
        /* Read the data after a delay of 50ms - refer datasheet  2.8.1 accel self test*/
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad40:	2032      	movs	r0, #50	@ 0x32
 800ad42:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2200      	movs	r2, #0
 800ad48:	6879      	ldr	r1, [r7, #4]
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	f7fe feab 	bl	8009aa6 <bmi160_get_sensor_data>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ad54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <accel_self_test_negative_excitation>:

/*!
 * @brief This API performs accel self test with negative excitation
 */
static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const struct bmi160_dev *dev)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with negative self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
 800ad6a:	2309      	movs	r3, #9
 800ad6c:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800ad6e:	f107 010e 	add.w	r1, r7, #14
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	206d      	movs	r0, #109	@ 0x6d
 800ad78:	f7fe fd39 	bl	80097ee <bmi160_set_regs>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ad80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10c      	bne.n	800ada2 <accel_self_test_negative_excitation+0x42>
    {
        /* Read the data after a delay of 50ms */
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ad8e:	2032      	movs	r0, #50	@ 0x32
 800ad90:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	2200      	movs	r2, #0
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	2001      	movs	r0, #1
 800ad9a:	f7fe fe84 	bl	8009aa6 <bmi160_get_sensor_data>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ada2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <validate_accel_self_test>:
/*!
 * @brief This API validates the accel self test results
 */
static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,
                                       const struct bmi160_sensor_data *accel_neg)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Validate the results of self test */
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adbe:	461a      	mov	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adcc:	dd18      	ble.n	800ae00 <validate_accel_self_test+0x52>
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800add4:	461a      	mov	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800addc:	1ad3      	subs	r3, r2, r3
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800adde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade2:	dd0d      	ble.n	800ae00 <validate_accel_self_test+0x52>
        ((accel_neg->z - accel_pos->z) > BMI160_ACCEL_SELF_TEST_LIMIT))
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800adea:	461a      	mov	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800adf2:	1ad3      	subs	r3, r2, r3
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800adf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adf8:	dd02      	ble.n	800ae00 <validate_accel_self_test+0x52>
    {
        /* Self test pass condition */
        rslt = BMI160_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
 800adfe:	e001      	b.n	800ae04 <validate_accel_self_test+0x56>
    }
    else
    {
        rslt = BMI160_W_ACCEl_SELF_TEST_FAIL;
 800ae00:	2302      	movs	r3, #2
 800ae02:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ae04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <perform_gyro_self_test>:

/*!
 * @brief This API performs the self test for gyroscope of BMI160
 */
static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Enable Gyro self test bit */
    rslt = enable_gyro_self_test(dev);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 f816 	bl	800ae4e <enable_gyro_self_test>
 800ae22:	4603      	mov	r3, r0
 800ae24:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ae26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <perform_gyro_self_test+0x2e>
    {
        /* Validate the gyro self test a delay of 50ms */
        dev->delay_ms(50);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae34:	2032      	movs	r0, #50	@ 0x32
 800ae36:	4798      	blx	r3

        /* Validate the gyro self test results */
        rslt = validate_gyro_self_test(dev);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f836 	bl	800aeaa <validate_gyro_self_test>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ae42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <enable_gyro_self_test>:

/*!
 * @brief This API enables the self test bit to trigger self test for Gyro
 */
static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)
{
 800ae4e:	b580      	push	{r7, lr}
 800ae50:	b084      	sub	sp, #16
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable the Gyro self test bit to trigger the self test */
    rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800ae56:	f107 010e 	add.w	r1, r7, #14
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	206d      	movs	r0, #109	@ 0x6d
 800ae60:	f7fe fc8e 	bl	8009780 <bmi160_get_regs>
 800ae64:	4603      	mov	r3, r0
 800ae66:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ae68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d116      	bne.n	800ae9e <enable_gyro_self_test+0x50>
    {
        reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
 800ae72:	f043 0310 	orr.w	r3, r3, #16
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800ae7a:	f107 010e 	add.w	r1, r7, #14
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2201      	movs	r2, #1
 800ae82:	206d      	movs	r0, #109	@ 0x6d
 800ae84:	f7fe fcb3 	bl	80097ee <bmi160_set_regs>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800ae8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d104      	bne.n	800ae9e <enable_gyro_self_test+0x50>
        {
            /* Delay to enable gyro self test */
            dev->delay_ms(15);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ae9a:	200f      	movs	r0, #15
 800ae9c:	4798      	blx	r3
        }
    }

    return rslt;
 800ae9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <validate_gyro_self_test>:

/*!
 * @brief This API validates the self test results of Gyro
 */
static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)
{
 800aeaa:	b580      	push	{r7, lr}
 800aeac:	b084      	sub	sp, #16
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Validate the Gyro self test result */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
 800aeb2:	f107 010e 	add.w	r1, r7, #14
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	201b      	movs	r0, #27
 800aebc:	f7fe fc60 	bl	8009780 <bmi160_get_regs>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800aec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10e      	bne.n	800aeea <validate_gyro_self_test+0x40>
    {

        reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
 800aecc:	7bbb      	ldrb	r3, [r7, #14]
 800aece:	105b      	asrs	r3, r3, #1
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	f003 0301 	and.w	r3, r3, #1
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	73bb      	strb	r3, [r7, #14]
        if (reg_data == BMI160_ENABLE)
 800aeda:	7bbb      	ldrb	r3, [r7, #14]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d102      	bne.n	800aee6 <validate_gyro_self_test+0x3c>
        {
            /* Gyro self test success case */
            rslt = BMI160_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
 800aee4:	e001      	b.n	800aeea <validate_gyro_self_test+0x40>
        }
        else
        {
            rslt = BMI160_W_GYRO_SELF_TEST_FAIL;
 800aee6:	2301      	movs	r3, #1
 800aee8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800aeea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <bmi160_i2c_write>:
		  Error_Handler();
	  }
}

int8_t bmi160_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af04      	add	r7, sp, #16
 800aefe:	603a      	str	r2, [r7, #0]
 800af00:	461a      	mov	r2, r3
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
 800af06:	460b      	mov	r3, r1
 800af08:	71bb      	strb	r3, [r7, #6]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 800af0e:	79fb      	ldrb	r3, [r7, #7]
 800af10:	005b      	lsls	r3, r3, #1
 800af12:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(BMI160_I2Cx, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	b299      	uxth	r1, r3
 800af18:	79bb      	ldrb	r3, [r7, #6]
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	f04f 33ff 	mov.w	r3, #4294967295
 800af20:	9302      	str	r3, [sp, #8]
 800af22:	88bb      	ldrh	r3, [r7, #4]
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	2301      	movs	r3, #1
 800af2c:	4803      	ldr	r0, [pc, #12]	@ (800af3c <bmi160_i2c_write+0x44>)
 800af2e:	f7f7 fd53 	bl	80029d8 <HAL_I2C_Mem_Write>
	return ( BMI160_OK );
 800af32:	2300      	movs	r3, #0
}
 800af34:	4618      	mov	r0, r3
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	200002ec 	.word	0x200002ec

0800af40 <bmi160_i2c_read>:
int8_t bmi160_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af04      	add	r7, sp, #16
 800af46:	603a      	str	r2, [r7, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
 800af4e:	460b      	mov	r3, r1
 800af50:	71bb      	strb	r3, [r7, #6]
 800af52:	4613      	mov	r3, r2
 800af54:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	f043 0301 	orr.w	r3, r3, #1
 800af60:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(BMI160_I2Cx, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	b299      	uxth	r1, r3
 800af66:	79bb      	ldrb	r3, [r7, #6]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	f04f 33ff 	mov.w	r3, #4294967295
 800af6e:	9302      	str	r3, [sp, #8]
 800af70:	88bb      	ldrh	r3, [r7, #4]
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	9300      	str	r3, [sp, #0]
 800af78:	2301      	movs	r3, #1
 800af7a:	4804      	ldr	r0, [pc, #16]	@ (800af8c <bmi160_i2c_read+0x4c>)
 800af7c:	f7f7 fe26 	bl	8002bcc <HAL_I2C_Mem_Read>
	return ( BMI160_OK );
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	200002ec 	.word	0x200002ec

0800af90 <delay_ms>:
void delay_ms(uint32_t period)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);		//Systick yerine TIM6 olacak
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f7f7 f8ed 	bl	8002178 <HAL_Delay>
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <bmi160_interface_init>:

int8_t bmi160_interface_init(struct bmi160_dev *bmi160)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <bmi160_interface_init+0x12>
	{
	  Error_Handler();
 800afb6:	f7f6 fe21 	bl	8001bfc <Error_Handler>
	}

#if ( ( BMI160_I2C_INTERFACE) && ( !BMI160_SPI_INTERFACE ) )

	int8_t rslt = 0U;
 800afba:	2300      	movs	r3, #0
 800afbc:	77fb      	strb	r3, [r7, #31]

	bmi160_soft_reset(bmi160);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f7fe fcd7 	bl	8009972 <bmi160_soft_reset>

	bmi160->id = BMI160_DEV_ADDR;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2268      	movs	r2, #104	@ 0x68
 800afc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	bmi160->intf = BMI160_I2C_INTF;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	bmi160->read = bmi160_i2c_read;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a62      	ldr	r2, [pc, #392]	@ (800b160 <bmi160_interface_init+0x1b8>)
 800afd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	bmi160->write = bmi160_i2c_write;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a61      	ldr	r2, [pc, #388]	@ (800b164 <bmi160_interface_init+0x1bc>)
 800afe0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	bmi160->delay_ms = delay_ms;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a60      	ldr	r2, [pc, #384]	@ (800b168 <bmi160_interface_init+0x1c0>)
 800afe8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

	/* After sensor init introduce 200 msec sleep */
	bmi160->delay_ms(200);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aff2:	20c8      	movs	r0, #200	@ 0xc8
 800aff4:	4798      	blx	r3

	rslt = bmi160_init(bmi160);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f7fe fc66 	bl	80098c8 <bmi160_init>
 800affc:	4603      	mov	r3, r0
 800affe:	77fb      	strb	r3, [r7, #31]

	if ( rslt != BMI160_OK )
 800b000:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d004      	beq.n	800b012 <bmi160_interface_init+0x6a>
	{
		printf("BMI160 initialization failure !\n");
 800b008:	4858      	ldr	r0, [pc, #352]	@ (800b16c <bmi160_interface_init+0x1c4>)
 800b00a:	f004 f867 	bl	800f0dc <puts>
		Error_Handler();
 800b00e:	f7f6 fdf5 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 initialization success !\n");
 800b012:	4857      	ldr	r0, [pc, #348]	@ (800b170 <bmi160_interface_init+0x1c8>)
 800b014:	f004 f862 	bl	800f0dc <puts>
	printf("Chip ID 0x%X\n" , bmi160->chip_id);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800b01e:	4619      	mov	r1, r3
 800b020:	4854      	ldr	r0, [pc, #336]	@ (800b174 <bmi160_interface_init+0x1cc>)
 800b022:	f003 fff3 	bl	800f00c <iprintf>

	//acceleration self-test configuration
	rslt = bmi160_perform_self_test(BMI160_ACCEL_ONLY,bmi160);
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	2001      	movs	r0, #1
 800b02a:	f7fe fda3 	bl	8009b74 <bmi160_perform_self_test>
 800b02e:	4603      	mov	r3, r0
 800b030:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b032:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <bmi160_interface_init+0x9c>
	{
		printf("BMI160 acceleration self-test failure !\n");
 800b03a:	484f      	ldr	r0, [pc, #316]	@ (800b178 <bmi160_interface_init+0x1d0>)
 800b03c:	f004 f84e 	bl	800f0dc <puts>
		Error_Handler();
 800b040:	f7f6 fddc 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 acceleration self-test success !\n");
 800b044:	484d      	ldr	r0, [pc, #308]	@ (800b17c <bmi160_interface_init+0x1d4>)
 800b046:	f004 f849 	bl	800f0dc <puts>

	//gyroscope self-test configuration
	rslt = bmi160_perform_self_test(BMI160_GYRO_ONLY,bmi160);
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	2002      	movs	r0, #2
 800b04e:	f7fe fd91 	bl	8009b74 <bmi160_perform_self_test>
 800b052:	4603      	mov	r3, r0
 800b054:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b056:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <bmi160_interface_init+0xc0>
	{
		printf("BMI160 gyroscope self-test failure !\n");
 800b05e:	4848      	ldr	r0, [pc, #288]	@ (800b180 <bmi160_interface_init+0x1d8>)
 800b060:	f004 f83c 	bl	800f0dc <puts>
		Error_Handler();
 800b064:	f7f6 fdca 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 gyroscope self-test success !\n");
 800b068:	4846      	ldr	r0, [pc, #280]	@ (800b184 <bmi160_interface_init+0x1dc>)
 800b06a:	f004 f837 	bl	800f0dc <puts>

	/* Select the Output data rate, range of accelerometer sensor */
	bmi160->accel_cfg.odr = BMI160_GYRO_ODR_50HZ;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2207      	movs	r2, #7
 800b072:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	bmi160->accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	220c      	movs	r2, #12
 800b07a:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	bmi160->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87

	/* Select the power mode of accelerometer sensor */
	bmi160->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2211      	movs	r2, #17
 800b08a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

	/* Select the Output data rate, range of Gyroscope sensor */
	bmi160->gyro_cfg.odr = BMI160_GYRO_ODR_50HZ;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2207      	movs	r2, #7
 800b092:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d
	bmi160->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
	bmi160->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f

	/* Select the power mode of Gyroscope sensor */
	bmi160->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2215      	movs	r2, #21
 800b0aa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

	/* Set the sensor configuration */
	rslt = bmi160_set_power_mode(bmi160);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7fe fcd4 	bl	8009a5c <bmi160_set_power_mode>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b0b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <bmi160_interface_init+0x122>
	{
		printf("BMI160 sensor configuration failure !\n");
 800b0c0:	4831      	ldr	r0, [pc, #196]	@ (800b188 <bmi160_interface_init+0x1e0>)
 800b0c2:	f004 f80b 	bl	800f0dc <puts>
		Error_Handler();
 800b0c6:	f7f6 fd99 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 sensor configuration success !\n");
 800b0ca:	4830      	ldr	r0, [pc, #192]	@ (800b18c <bmi160_interface_init+0x1e4>)
 800b0cc:	f004 f806 	bl	800f0dc <puts>

	struct bmi160_offsets bmi160_offset = {0};
 800b0d0:	f107 0314 	add.w	r3, r7, #20
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	811a      	strh	r2, [r3, #8]
	struct bmi160_foc_conf bmi160_foc = {0};
 800b0dc:	f107 030c 	add.w	r3, r7, #12
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	809a      	strh	r2, [r3, #4]

	rslt = bmi160_get_offsets(&bmi160_offset,bmi160);
 800b0e6:	f107 0314 	add.w	r3, r7, #20
 800b0ea:	6879      	ldr	r1, [r7, #4]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7fe fd8f 	bl	8009c10 <bmi160_get_offsets>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b0f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <bmi160_interface_init+0x160>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b0fe:	4824      	ldr	r0, [pc, #144]	@ (800b190 <bmi160_interface_init+0x1e8>)
 800b100:	f003 ffec 	bl	800f0dc <puts>
		Error_Handler();
 800b104:	f7f6 fd7a 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b108:	4822      	ldr	r0, [pc, #136]	@ (800b194 <bmi160_interface_init+0x1ec>)
 800b10a:	f003 ffe7 	bl	800f0dc <puts>

	bmi160_foc.acc_off_en = BMI160_ENABLE;
 800b10e:	2301      	movs	r3, #1
 800b110:	743b      	strb	r3, [r7, #16]
	bmi160_foc.gyro_off_en = BMI160_ENABLE;
 800b112:	2301      	movs	r3, #1
 800b114:	747b      	strb	r3, [r7, #17]
	bmi160_foc.foc_gyr_en = BMI160_ENABLE;
 800b116:	2301      	movs	r3, #1
 800b118:	733b      	strb	r3, [r7, #12]
	bmi160_foc.foc_acc_x = BMI160_FOC_ACCEL_POSITIVE_G;
 800b11a:	2301      	movs	r3, #1
 800b11c:	737b      	strb	r3, [r7, #13]
	bmi160_foc.foc_acc_y = BMI160_FOC_ACCEL_POSITIVE_G;
 800b11e:	2301      	movs	r3, #1
 800b120:	73bb      	strb	r3, [r7, #14]
	bmi160_foc.foc_acc_z = BMI160_FOC_ACCEL_POSITIVE_G;
 800b122:	2301      	movs	r3, #1
 800b124:	73fb      	strb	r3, [r7, #15]

	bmi160_set_offsets(&bmi160_foc, &bmi160_offset, bmi160);
 800b126:	f107 0114 	add.w	r1, r7, #20
 800b12a:	f107 030c 	add.w	r3, r7, #12
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe fdee 	bl	8009d12 <bmi160_set_offsets>

	if( rslt != BMI160_OK )
 800b136:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d004      	beq.n	800b148 <bmi160_interface_init+0x1a0>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b13e:	4814      	ldr	r0, [pc, #80]	@ (800b190 <bmi160_interface_init+0x1e8>)
 800b140:	f003 ffcc 	bl	800f0dc <puts>
		Error_Handler();
 800b144:	f7f6 fd5a 	bl	8001bfc <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b148:	4812      	ldr	r0, [pc, #72]	@ (800b194 <bmi160_interface_init+0x1ec>)
 800b14a:	f003 ffc7 	bl	800f0dc <puts>

	/* After sensor init introduce 200 msec sleep */
	HAL_Delay(200);
 800b14e:	20c8      	movs	r0, #200	@ 0xc8
 800b150:	f7f7 f812 	bl	8002178 <HAL_Delay>

	return ( BMI160_OK );
 800b154:	2300      	movs	r3, #0

	#else
		Error_Handler();
	#endif
	return ( BMI160_E_INVALID_CONFIG );
}
 800b156:	4618      	mov	r0, r3
 800b158:	3720      	adds	r7, #32
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	0800af41 	.word	0x0800af41
 800b164:	0800aef9 	.word	0x0800aef9
 800b168:	0800af91 	.word	0x0800af91
 800b16c:	08012d34 	.word	0x08012d34
 800b170:	08012d54 	.word	0x08012d54
 800b174:	08012d74 	.word	0x08012d74
 800b178:	08012d84 	.word	0x08012d84
 800b17c:	08012dac 	.word	0x08012dac
 800b180:	08012dd4 	.word	0x08012dd4
 800b184:	08012dfc 	.word	0x08012dfc
 800b188:	08012e24 	.word	0x08012e24
 800b18c:	08012e4c 	.word	0x08012e4c
 800b190:	08012e74 	.word	0x08012e74
 800b194:	08012e9c 	.word	0x08012e9c

0800b198 <bmi160_calibration>:

int8_t bmi160_calibration(struct bmi160_dev *bmi160,uint32_t IterTimeMS)
{
 800b198:	b5b0      	push	{r4, r5, r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <bmi160_calibration+0x14>
	{
	   Error_Handler();
 800b1a8:	f7f6 fd28 	bl	8001bfc <Error_Handler>
	}

	/*<! Check iteration time  <!*/
	if ( IterTimeMS <= 0)
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <bmi160_calibration+0x1e>
	{
	   Error_Handler();
 800b1b2:	f7f6 fd23 	bl	8001bfc <Error_Handler>
	}

	/*<! Reset accel data offset value  <!*/
	bmi160->accel_data.x_offset = 0.0f;
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	f04f 0200 	mov.w	r2, #0
 800b1bc:	f04f 0300 	mov.w	r3, #0
 800b1c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bmi160->accel_data.y_offset = 0.0f;
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	f04f 0200 	mov.w	r2, #0
 800b1ca:	f04f 0300 	mov.w	r3, #0
 800b1ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bmi160->accel_data.z_offset = 0.0f;
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	f04f 0200 	mov.w	r2, #0
 800b1d8:	f04f 0300 	mov.w	r3, #0
 800b1dc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	/*<! Reset gyro data offset value  <!*/
	bmi160->gyro_data.x_offset = 0.0f;
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bmi160->gyro_data.y_offset = 0.0f;
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bmi160->gyro_data.z_offset = 0.0f;
 800b1fc:	6879      	ldr	r1, [r7, #4]
 800b1fe:	f04f 0200 	mov.w	r2, #0
 800b202:	f04f 0300 	mov.w	r3, #0
 800b206:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

	uint32_t sample_num = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60fb      	str	r3, [r7, #12]
	uint32_t current_tick = HAL_GetTick();
 800b20e:	f7f6 ffa7 	bl	8002160 <HAL_GetTick>
 800b212:	60b8      	str	r0, [r7, #8]

	/*<! Get data for the duration of the IterTimeMS
	 * During this process, the sensor must be stationary and in a flat plane <!*/
	while( ( HAL_GetTick() - current_tick ) < IterTimeMS )
 800b214:	e08a      	b.n	800b32c <bmi160_calibration+0x194>
	{
	  if( bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),&bmi160->accel_data,&bmi160->gyro_data,bmi160) != BMI160_OK)
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2003      	movs	r0, #3
 800b222:	f7fe fc40 	bl	8009aa6 <bmi160_get_sensor_data>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <bmi160_calibration+0x9e>
	  {
		  printf("BMI160 sensor data failed !\n");
 800b22c:	489e      	ldr	r0, [pc, #632]	@ (800b4a8 <bmi160_calibration+0x310>)
 800b22e:	f003 ff55 	bl	800f0dc <puts>
		  Error_Handler();
 800b232:	f7f6 fce3 	bl	8001bfc <Error_Handler>
	  }

	  bmi160->accel_data.x_offset += (double)bmi160->accel_data.x;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b242:	4618      	mov	r0, r3
 800b244:	f7f5 f96e 	bl	8000524 <__aeabi_i2d>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f5 f81c 	bl	800028c <__adddf3>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  bmi160->accel_data.y_offset += (double)bmi160->accel_data.y;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f5 f95a 	bl	8000524 <__aeabi_i2d>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 f808 	bl	800028c <__adddf3>
 800b27c:	4602      	mov	r2, r0
 800b27e:	460b      	mov	r3, r1
 800b280:	6879      	ldr	r1, [r7, #4]
 800b282:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	  bmi160->accel_data.z_offset += (double)bmi160->accel_data.z;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b292:	4618      	mov	r0, r3
 800b294:	f7f5 f946 	bl	8000524 <__aeabi_i2d>
 800b298:	4602      	mov	r2, r0
 800b29a:	460b      	mov	r3, r1
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f4 fff4 	bl	800028c <__adddf3>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	6879      	ldr	r1, [r7, #4]
 800b2aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	  bmi160->gyro_data.x_offset  += (double)bmi160->gyro_data.x;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7f5 f932 	bl	8000524 <__aeabi_i2d>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f4 ffe0 	bl	800028c <__adddf3>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	  bmi160->gyro_data.y_offset  += (double)bmi160->gyro_data.y;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f5 f91e 	bl	8000524 <__aeabi_i2d>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	4629      	mov	r1, r5
 800b2f0:	f7f4 ffcc 	bl	800028c <__adddf3>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	  bmi160->gyro_data.z_offset  += (double)bmi160->gyro_data.z;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	@ 0x70
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7f5 f90a 	bl	8000524 <__aeabi_i2d>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f7f4 ffb8 	bl	800028c <__adddf3>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	6879      	ldr	r1, [r7, #4]
 800b322:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

	  ++sample_num;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3301      	adds	r3, #1
 800b32a:	60fb      	str	r3, [r7, #12]
	while( ( HAL_GetTick() - current_tick ) < IterTimeMS )
 800b32c:	f7f6 ff18 	bl	8002160 <HAL_GetTick>
 800b330:	4602      	mov	r2, r0
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	1ad3      	subs	r3, r2, r3
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	f63f af6c 	bhi.w	800b216 <bmi160_calibration+0x7e>
	}

	/*<! 3-axis accelerometer calibration result offset value  <!*/
	bmi160->accel_data.x_offset = (((bmi160->accel_data.x_offset / (double)sample_num))/ACCEL_SENSITIVITY);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7f5 f8dd 	bl	8000504 <__aeabi_ui2d>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4620      	mov	r0, r4
 800b350:	4629      	mov	r1, r5
 800b352:	f7f5 fa7b 	bl	800084c <__aeabi_ddiv>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4610      	mov	r0, r2
 800b35c:	4619      	mov	r1, r3
 800b35e:	f04f 0200 	mov.w	r2, #0
 800b362:	4b52      	ldr	r3, [pc, #328]	@ (800b4ac <bmi160_calibration+0x314>)
 800b364:	f7f5 fa72 	bl	800084c <__aeabi_ddiv>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	6879      	ldr	r1, [r7, #4]
 800b36e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	bmi160->accel_data.y_offset = (((bmi160->accel_data.y_offset / (double)sample_num))/ACCEL_SENSITIVITY);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7f5 f8c3 	bl	8000504 <__aeabi_ui2d>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4620      	mov	r0, r4
 800b384:	4629      	mov	r1, r5
 800b386:	f7f5 fa61 	bl	800084c <__aeabi_ddiv>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4610      	mov	r0, r2
 800b390:	4619      	mov	r1, r3
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	4b45      	ldr	r3, [pc, #276]	@ (800b4ac <bmi160_calibration+0x314>)
 800b398:	f7f5 fa58 	bl	800084c <__aeabi_ddiv>
 800b39c:	4602      	mov	r2, r0
 800b39e:	460b      	mov	r3, r1
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	bmi160->accel_data.z_offset = (((bmi160->accel_data.z_offset / (double)sample_num))/ACCEL_SENSITIVITY - 9.81f);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800b3ac:	68f8      	ldr	r0, [r7, #12]
 800b3ae:	f7f5 f8a9 	bl	8000504 <__aeabi_ui2d>
 800b3b2:	4602      	mov	r2, r0
 800b3b4:	460b      	mov	r3, r1
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	4629      	mov	r1, r5
 800b3ba:	f7f5 fa47 	bl	800084c <__aeabi_ddiv>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	4610      	mov	r0, r2
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	f04f 0200 	mov.w	r2, #0
 800b3ca:	4b38      	ldr	r3, [pc, #224]	@ (800b4ac <bmi160_calibration+0x314>)
 800b3cc:	f7f5 fa3e 	bl	800084c <__aeabi_ddiv>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	a32f      	add	r3, pc, #188	@ (adr r3, 800b498 <bmi160_calibration+0x300>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff53 	bl	8000288 <__aeabi_dsub>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	/*<! 3-axis gyroscope calibration result offset value  <!*/
	bmi160->gyro_data.x_offset = ((bmi160->gyro_data.x_offset / (double)sample_num))/GYRO_SENSITIVITY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	@ 0x60
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7f5 f886 	bl	8000504 <__aeabi_ui2d>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	4629      	mov	r1, r5
 800b400:	f7f5 fa24 	bl	800084c <__aeabi_ddiv>
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4610      	mov	r0, r2
 800b40a:	4619      	mov	r1, r3
 800b40c:	a324      	add	r3, pc, #144	@ (adr r3, 800b4a0 <bmi160_calibration+0x308>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f5 fa1b 	bl	800084c <__aeabi_ddiv>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	bmi160->gyro_data.y_offset = ((bmi160->gyro_data.y_offset / (double)sample_num))/GYRO_SENSITIVITY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	@ 0x68
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7f5 f86c 	bl	8000504 <__aeabi_ui2d>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4620      	mov	r0, r4
 800b432:	4629      	mov	r1, r5
 800b434:	f7f5 fa0a 	bl	800084c <__aeabi_ddiv>
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	4610      	mov	r0, r2
 800b43e:	4619      	mov	r1, r3
 800b440:	a317      	add	r3, pc, #92	@ (adr r3, 800b4a0 <bmi160_calibration+0x308>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f5 fa01 	bl	800084c <__aeabi_ddiv>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	bmi160->gyro_data.z_offset = ((bmi160->gyro_data.z_offset / (double)sample_num))/GYRO_SENSITIVITY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	@ 0x70
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7f5 f852 	bl	8000504 <__aeabi_ui2d>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 f9f0 	bl	800084c <__aeabi_ddiv>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4610      	mov	r0, r2
 800b472:	4619      	mov	r1, r3
 800b474:	a30a      	add	r3, pc, #40	@ (adr r3, 800b4a0 <bmi160_calibration+0x308>)
 800b476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47a:	f7f5 f9e7 	bl	800084c <__aeabi_ddiv>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	6879      	ldr	r1, [r7, #4]
 800b484:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

	return ( BMI160_OK );
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bdb0      	pop	{r4, r5, r7, pc}
 800b492:	bf00      	nop
 800b494:	f3af 8000 	nop.w
 800b498:	60000000 	.word	0x60000000
 800b49c:	40239eb8 	.word	0x40239eb8
 800b4a0:	60000000 	.word	0x60000000
 800b4a4:	40306666 	.word	0x40306666
 800b4a8:	08012ec4 	.word	0x08012ec4
 800b4ac:	40a00000 	.word	0x40a00000

0800b4b0 <bmi160_get_acc_gyro>:

int8_t bmi160_get_acc_gyro(struct bmi160_dev *bmi160)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
	if ( bmi160 == NULL )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <bmi160_get_acc_gyro+0x12>
	{
		Error_Handler();
 800b4be:	f7f6 fb9d 	bl	8001bfc <Error_Handler>
	}

    if( bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),&bmi160->accel_data,&bmi160->gyro_data,bmi160) != BMI160_OK)
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2003      	movs	r0, #3
 800b4ce:	f7fe faea 	bl	8009aa6 <bmi160_get_sensor_data>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d004      	beq.n	800b4e2 <bmi160_get_acc_gyro+0x32>
    {
	    printf("BMI160 sensor data failed !\n");
 800b4d8:	4851      	ldr	r0, [pc, #324]	@ (800b620 <bmi160_get_acc_gyro+0x170>)
 800b4da:	f003 fdff 	bl	800f0dc <puts>
	    Error_Handler();
 800b4de:	f7f6 fb8d 	bl	8001bfc <Error_Handler>
    }

    bmi160->accel_data.xd = (((double)bmi160->accel_data.x)/ACCEL_SENSITIVITY - bmi160->accel_data.x_offset);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7f5 f81b 	bl	8000524 <__aeabi_i2d>
 800b4ee:	f04f 0200 	mov.w	r2, #0
 800b4f2:	4b4c      	ldr	r3, [pc, #304]	@ (800b624 <bmi160_get_acc_gyro+0x174>)
 800b4f4:	f7f5 f9aa 	bl	800084c <__aeabi_ddiv>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4619      	mov	r1, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b506:	f7f4 febf 	bl	8000288 <__aeabi_dsub>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	e9c1 2302 	strd	r2, r3, [r1, #8]
    bmi160->accel_data.yd = (((double)bmi160->accel_data.y)/ACCEL_SENSITIVITY - bmi160->accel_data.y_offset);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7f5 f802 	bl	8000524 <__aeabi_i2d>
 800b520:	f04f 0200 	mov.w	r2, #0
 800b524:	4b3f      	ldr	r3, [pc, #252]	@ (800b624 <bmi160_get_acc_gyro+0x174>)
 800b526:	f7f5 f991 	bl	800084c <__aeabi_ddiv>
 800b52a:	4602      	mov	r2, r0
 800b52c:	460b      	mov	r3, r1
 800b52e:	4610      	mov	r0, r2
 800b530:	4619      	mov	r1, r3
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800b538:	f7f4 fea6 	bl	8000288 <__aeabi_dsub>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	6879      	ldr	r1, [r7, #4]
 800b542:	e9c1 2304 	strd	r2, r3, [r1, #16]
    bmi160->accel_data.zd = (((double)bmi160->accel_data.z)/ACCEL_SENSITIVITY - bmi160->accel_data.z_offset);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7f4 ffe9 	bl	8000524 <__aeabi_i2d>
 800b552:	f04f 0200 	mov.w	r2, #0
 800b556:	4b33      	ldr	r3, [pc, #204]	@ (800b624 <bmi160_get_acc_gyro+0x174>)
 800b558:	f7f5 f978 	bl	800084c <__aeabi_ddiv>
 800b55c:	4602      	mov	r2, r0
 800b55e:	460b      	mov	r3, r1
 800b560:	4610      	mov	r0, r2
 800b562:	4619      	mov	r1, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b56a:	f7f4 fe8d 	bl	8000288 <__aeabi_dsub>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	6879      	ldr	r1, [r7, #4]
 800b574:	e9c1 2306 	strd	r2, r3, [r1, #24]

    bmi160->gyro_data.xd = (((double)bmi160->gyro_data.x)/GYRO_SENSITIVITY - bmi160->gyro_data.x_offset);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f4 ffd0 	bl	8000524 <__aeabi_i2d>
 800b584:	a324      	add	r3, pc, #144	@ (adr r3, 800b618 <bmi160_get_acc_gyro+0x168>)
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	f7f5 f95f 	bl	800084c <__aeabi_ddiv>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4610      	mov	r0, r2
 800b594:	4619      	mov	r1, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800b59c:	f7f4 fe74 	bl	8000288 <__aeabi_dsub>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    bmi160->gyro_data.yd = (((double)bmi160->gyro_data.y)/GYRO_SENSITIVITY - bmi160->gyro_data.y_offset);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	@ 0x42
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7f4 ffb7 	bl	8000524 <__aeabi_i2d>
 800b5b6:	a318      	add	r3, pc, #96	@ (adr r3, 800b618 <bmi160_get_acc_gyro+0x168>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f5 f946 	bl	800084c <__aeabi_ddiv>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800b5ce:	f7f4 fe5b 	bl	8000288 <__aeabi_dsub>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	6879      	ldr	r1, [r7, #4]
 800b5d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    bmi160->gyro_data.zd = (((double)bmi160->gyro_data.z)/GYRO_SENSITIVITY - bmi160->gyro_data.z_offset);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	@ 0x44
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f4 ff9e 	bl	8000524 <__aeabi_i2d>
 800b5e8:	a30b      	add	r3, pc, #44	@ (adr r3, 800b618 <bmi160_get_acc_gyro+0x168>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f5 f92d 	bl	800084c <__aeabi_ddiv>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4610      	mov	r0, r2
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800b600:	f7f4 fe42 	bl	8000288 <__aeabi_dsub>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	6879      	ldr	r1, [r7, #4]
 800b60a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	return ( BMI160_OK );
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3708      	adds	r7, #8
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	60000000 	.word	0x60000000
 800b61c:	40306666 	.word	0x40306666
 800b620:	08012ec4 	.word	0x08012ec4
 800b624:	40a00000 	.word	0x40a00000

0800b628 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fbf4 	bl	800ce22 <null_ptr_check>
 800b63a:	4603      	mov	r3, r0
 800b63c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 800b63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d135      	bne.n	800b6b2 <bmp3_init+0x8a>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d004      	beq.n	800b65a <bmp3_init+0x32>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800b658:	e003      	b.n	800b662 <bmp3_init+0x3a>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 800b662:	f107 010e 	add.w	r1, r7, #14
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	2000      	movs	r0, #0
 800b66c:	f000 f827 	bl	800b6be <bmp3_get_regs>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800b674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d11a      	bne.n	800b6b2 <bmp3_init+0x8a>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	2b50      	cmp	r3, #80	@ 0x50
 800b680:	d002      	beq.n	800b688 <bmp3_init+0x60>
 800b682:	7bbb      	ldrb	r3, [r7, #14]
 800b684:	2b60      	cmp	r3, #96	@ 0x60
 800b686:	d112      	bne.n	800b6ae <bmp3_init+0x86>
            {
                dev->chip_id = chip_id;
 800b688:	7bba      	ldrb	r2, [r7, #14]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f9ba 	bl	800ba0a <bmp3_soft_reset>
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800b69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d107      	bne.n	800b6b2 <bmp3_init+0x8a>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fb5c 	bl	800bd60 <get_calib_data>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800b6ac:	e001      	b.n	800b6b2 <bmp3_init+0x8a>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 800b6ae:	23f9      	movs	r3, #249	@ 0xf9
 800b6b0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800b6b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800b6be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6c2:	b08b      	sub	sp, #44	@ 0x2c
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60b9      	str	r1, [r7, #8]
 800b6c8:	607a      	str	r2, [r7, #4]
 800b6ca:	603b      	str	r3, [r7, #0]
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b6d0:	6838      	ldr	r0, [r7, #0]
 800b6d2:	f001 fba6 	bl	800ce22 <null_ptr_check>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 800b6dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d178      	bne.n	800b7d6 <bmp3_get_regs+0x118>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d075      	beq.n	800b7d6 <bmp3_get_regs+0x118>
    {
 800b6ea:	466b      	mov	r3, sp
 800b6ec:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b702:	461a      	mov	r2, r3
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	18d1      	adds	r1, r2, r3
 800b708:	460b      	mov	r3, r1
 800b70a:	3b01      	subs	r3, #1
 800b70c:	61bb      	str	r3, [r7, #24]
 800b70e:	2300      	movs	r3, #0
 800b710:	4688      	mov	r8, r1
 800b712:	4699      	mov	r9, r3
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b720:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b724:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b728:	2300      	movs	r3, #0
 800b72a:	460c      	mov	r4, r1
 800b72c:	461d      	mov	r5, r3
 800b72e:	f04f 0200 	mov.w	r2, #0
 800b732:	f04f 0300 	mov.w	r3, #0
 800b736:	00eb      	lsls	r3, r5, #3
 800b738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b73c:	00e2      	lsls	r2, r4, #3
 800b73e:	1dcb      	adds	r3, r1, #7
 800b740:	08db      	lsrs	r3, r3, #3
 800b742:	00db      	lsls	r3, r3, #3
 800b744:	ebad 0d03 	sub.w	sp, sp, r3
 800b748:	466b      	mov	r3, sp
 800b74a:	3300      	adds	r3, #0
 800b74c:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b754:	2b01      	cmp	r3, #1
 800b756:	d027      	beq.n	800b7a8 <bmp3_get_regs+0xea>
        {
            reg_addr = reg_addr | 0x80;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b75e:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b768:	7bf8      	ldrb	r0, [r7, #15]
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	47a0      	blx	r4
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            for (idx = 0; idx < len; idx++)
 800b77a:	2300      	movs	r3, #0
 800b77c:	623b      	str	r3, [r7, #32]
 800b77e:	e00e      	b.n	800b79e <bmp3_get_regs+0xe0>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b786:	461a      	mov	r2, r3
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	441a      	add	r2, r3
 800b78c:	68b9      	ldr	r1, [r7, #8]
 800b78e:	6a3b      	ldr	r3, [r7, #32]
 800b790:	440b      	add	r3, r1
 800b792:	6979      	ldr	r1, [r7, #20]
 800b794:	5c8a      	ldrb	r2, [r1, r2]
 800b796:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	3301      	adds	r3, #1
 800b79c:	623b      	str	r3, [r7, #32]
 800b79e:	6a3a      	ldr	r2, [r7, #32]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d3ec      	bcc.n	800b780 <bmp3_get_regs+0xc2>
 800b7a6:	e00c      	b.n	800b7c2 <bmp3_get_regs+0x104>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b0:	7bf8      	ldrb	r0, [r7, #15]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	68b9      	ldr	r1, [r7, #8]
 800b7b6:	47a0      	blx	r4
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <bmp3_get_regs+0x114>
        {
            rslt = BMP3_E_COMM_FAIL;
 800b7cc:	23fe      	movs	r3, #254	@ 0xfe
 800b7ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b7d2:	46b5      	mov	sp, r6
    {
 800b7d4:	e002      	b.n	800b7dc <bmp3_get_regs+0x11e>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b7d6:	23ff      	movs	r3, #255	@ 0xff
 800b7d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800b7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	372c      	adds	r7, #44	@ 0x2c
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b7ea <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800b7ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b7ee:	b08b      	sub	sp, #44	@ 0x2c
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	603b      	str	r3, [r7, #0]
 800b7fa:	466b      	mov	r3, sp
 800b7fc:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	0059      	lsls	r1, r3, #1
 800b802:	460b      	mov	r3, r1
 800b804:	3b01      	subs	r3, #1
 800b806:	61bb      	str	r3, [r7, #24]
 800b808:	2300      	movs	r3, #0
 800b80a:	4688      	mov	r8, r1
 800b80c:	4699      	mov	r9, r3
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	f04f 0300 	mov.w	r3, #0
 800b816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b81a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b81e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b822:	2300      	movs	r3, #0
 800b824:	460c      	mov	r4, r1
 800b826:	461d      	mov	r5, r3
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	f04f 0300 	mov.w	r3, #0
 800b830:	00eb      	lsls	r3, r5, #3
 800b832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b836:	00e2      	lsls	r2, r4, #3
 800b838:	1dcb      	adds	r3, r1, #7
 800b83a:	08db      	lsrs	r3, r3, #3
 800b83c:	00db      	lsls	r3, r3, #3
 800b83e:	ebad 0d03 	sub.w	sp, sp, r3
 800b842:	466b      	mov	r3, sp
 800b844:	3300      	adds	r3, #0
 800b846:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b848:	6838      	ldr	r0, [r7, #0]
 800b84a:	f001 faea 	bl	800ce22 <null_ptr_check>
 800b84e:	4603      	mov	r3, r0
 800b850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800b854:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d150      	bne.n	800b8fe <bmp3_set_regs+0x114>
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04d      	beq.n	800b8fe <bmp3_set_regs+0x114>
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d04a      	beq.n	800b8fe <bmp3_set_regs+0x114>
    {
        if (len != 0)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d043      	beq.n	800b8f6 <bmp3_set_regs+0x10c>
        {
            temp_buff[0] = reg_data[0];
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	781a      	ldrb	r2, [r3, #0]
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d114      	bne.n	800b8aa <bmp3_set_regs+0xc0>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800b880:	2300      	movs	r3, #0
 800b882:	77fb      	strb	r3, [r7, #31]
 800b884:	e00d      	b.n	800b8a2 <bmp3_set_regs+0xb8>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800b886:	7ffb      	ldrb	r3, [r7, #31]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	781a      	ldrb	r2, [r3, #0]
 800b88e:	7ffb      	ldrb	r3, [r7, #31]
 800b890:	68f9      	ldr	r1, [r7, #12]
 800b892:	440b      	add	r3, r1
 800b894:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b898:	b2d2      	uxtb	r2, r2
 800b89a:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800b89c:	7ffb      	ldrb	r3, [r7, #31]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	77fb      	strb	r3, [r7, #31]
 800b8a2:	7ffb      	ldrb	r3, [r7, #31]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d8ed      	bhi.n	800b886 <bmp3_set_regs+0x9c>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d909      	bls.n	800b8c4 <bmp3_set_regs+0xda>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	6979      	ldr	r1, [r7, #20]
 800b8b6:	68f8      	ldr	r0, [r7, #12]
 800b8b8:	f000 fa76 	bl	800bda8 <interleave_reg_addr>
                temp_len = len * 2;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	005b      	lsls	r3, r3, #1
 800b8c0:	623b      	str	r3, [r7, #32]
 800b8c2:	e001      	b.n	800b8c8 <bmp3_set_regs+0xde>
            }
            else
            {
                temp_len = len;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7818      	ldrb	r0, [r3, #0]
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d4:	6a3a      	ldr	r2, [r7, #32]
 800b8d6:	6979      	ldr	r1, [r7, #20]
 800b8d8:	47a0      	blx	r4
 800b8da:	4603      	mov	r3, r0
 800b8dc:	461a      	mov	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00b      	beq.n	800b906 <bmp3_set_regs+0x11c>
            {
                rslt = BMP3_E_COMM_FAIL;
 800b8ee:	23fe      	movs	r3, #254	@ 0xfe
 800b8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 800b8f4:	e007      	b.n	800b906 <bmp3_set_regs+0x11c>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800b8f6:	23fa      	movs	r3, #250	@ 0xfa
 800b8f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 800b8fc:	e003      	b.n	800b906 <bmp3_set_regs+0x11c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b8fe:	23ff      	movs	r3, #255	@ 0xff
 800b900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b904:	e000      	b.n	800b908 <bmp3_set_regs+0x11e>
        if (len != 0)
 800b906:	bf00      	nop
    }

    return rslt;
 800b908:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b90c:	46b5      	mov	sp, r6
}
 800b90e:	4618      	mov	r0, r3
 800b910:	372c      	adds	r7, #44	@ 0x2c
 800b912:	46bd      	mov	sp, r7
 800b914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b918 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d03a      	beq.n	800b9a4 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800b92e:	68f9      	ldr	r1, [r7, #12]
 800b930:	2006      	movs	r0, #6
 800b932:	f001 fa5e 	bl	800cdf2 <are_settings_changed>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d006      	beq.n	800b94a <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 fa97 	bl	800be74 <set_pwr_ctrl_settings>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800b94a:	68f9      	ldr	r1, [r7, #12]
 800b94c:	20f0      	movs	r0, #240	@ 0xf0
 800b94e:	f001 fa50 	bl	800cdf2 <are_settings_changed>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	68b9      	ldr	r1, [r7, #8]
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fad8 	bl	800bf12 <set_odr_filter_settings>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800b96c:	f001 fa41 	bl	800cdf2 <are_settings_changed>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d006      	beq.n	800b984 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fb36 	bl	800bfec <set_int_ctrl_settings>
 800b980:	4603      	mov	r3, r0
 800b982:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 800b984:	68f9      	ldr	r1, [r7, #12]
 800b986:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800b98a:	f001 fa32 	bl	800cdf2 <are_settings_changed>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	68b9      	ldr	r1, [r7, #8]
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 fba4 	bl	800c0e6 <set_advance_settings>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	75fb      	strb	r3, [r7, #23]
 800b9a2:	e001      	b.n	800b9a8 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b9a4:	23ff      	movs	r3, #255	@ 0xff
 800b9a6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800b9a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d01a      	beq.n	800b9fa <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fa4f 	bl	800ce6a <get_sensor_status>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 800b9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d112      	bne.n	800b9fe <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800b9d8:	6839      	ldr	r1, [r7, #0]
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f001 fa88 	bl	800cef0 <get_int_status>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 800b9e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d108      	bne.n	800b9fe <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 800b9ec:	6839      	ldr	r1, [r7, #0]
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f001 faac 	bl	800cf4c <get_err_status>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
 800b9f8:	e001      	b.n	800b9fe <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b9fa:	23ff      	movs	r3, #255	@ 0xff
 800b9fc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b9fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}

0800ba0a <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 800ba12:	237e      	movs	r3, #126	@ 0x7e
 800ba14:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800ba16:	23b6      	movs	r3, #182	@ 0xb6
 800ba18:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800ba1a:	f107 010c 	add.w	r1, r7, #12
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	2003      	movs	r0, #3
 800ba24:	f7ff fe4b 	bl	800b6be <bmp3_get_regs>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800ba2c:	7b3b      	ldrb	r3, [r7, #12]
 800ba2e:	f003 0310 	and.w	r3, r3, #16
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d02d      	beq.n	800ba92 <bmp3_soft_reset+0x88>
 800ba36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d129      	bne.n	800ba92 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800ba3e:	f107 010d 	add.w	r1, r7, #13
 800ba42:	f107 000e 	add.w	r0, r7, #14
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f7ff fece 	bl	800b7ea <bmp3_set_regs>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800ba52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d11b      	bne.n	800ba92 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ba62:	4611      	mov	r1, r2
 800ba64:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800ba68:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800ba6a:	f107 010b 	add.w	r1, r7, #11
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2201      	movs	r2, #1
 800ba72:	2002      	movs	r0, #2
 800ba74:	f7ff fe23 	bl	800b6be <bmp3_get_regs>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800ba7c:	7afb      	ldrb	r3, [r7, #11]
 800ba7e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <bmp3_soft_reset+0x84>
 800ba86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d001      	beq.n	800ba92 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 800ba8e:	23fc      	movs	r3, #252	@ 0xfc
 800ba90:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800ba92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800baa8:	6838      	ldr	r0, [r7, #0]
 800baaa:	f001 f9ba 	bl	800ce22 <null_ptr_check>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 800bab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d139      	bne.n	800bb2e <bmp3_set_op_mode+0x90>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d036      	beq.n	800bb2e <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800bac6:	f107 030d 	add.w	r3, r7, #13
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 f838 	bl	800bb42 <bmp3_get_op_mode>
 800bad2:	4603      	mov	r3, r0
 800bad4:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800bad6:	7b7b      	ldrb	r3, [r7, #13]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d010      	beq.n	800bafe <bmp3_set_op_mode+0x60>
 800badc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10c      	bne.n	800bafe <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 800bae4:	6838      	ldr	r0, [r7, #0]
 800bae6:	f000 f8f9 	bl	800bcdc <put_device_to_sleep>
 800baea:	4603      	mov	r3, r0
 800baec:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800baf6:	4611      	mov	r1, r2
 800baf8:	f241 3088 	movw	r0, #5000	@ 0x1388
 800bafc:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800bafe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d116      	bne.n	800bb34 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	d106      	bne.n	800bb1a <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800bb0c:	6839      	ldr	r1, [r7, #0]
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f87a 	bl	800bc08 <set_normal_mode>
 800bb14:	4603      	mov	r3, r0
 800bb16:	73fb      	strb	r3, [r7, #15]
    {
 800bb18:	e00c      	b.n	800bb34 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d109      	bne.n	800bb34 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f8a3 	bl	800bc6e <write_power_mode>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	73fb      	strb	r3, [r7, #15]
    {
 800bb2c:	e002      	b.n	800bb34 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800bb2e:	23ff      	movs	r3, #255	@ 0xff
 800bb30:	73fb      	strb	r3, [r7, #15]
 800bb32:	e000      	b.n	800bb36 <bmp3_set_op_mode+0x98>
    {
 800bb34:	bf00      	nop
    }

    return rslt;
 800bb36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
 800bb4a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d011      	beq.n	800bb76 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2201      	movs	r2, #1
 800bb56:	6879      	ldr	r1, [r7, #4]
 800bb58:	201b      	movs	r0, #27
 800bb5a:	f7ff fdb0 	bl	800b6be <bmp3_get_regs>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	111b      	asrs	r3, r3, #4
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f003 0303 	and.w	r3, r3, #3
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	e001      	b.n	800bb7a <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800bb76:	23ff      	movs	r3, #255	@ 0xff
 800bb78:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3710      	adds	r7, #16
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b08a      	sub	sp, #40	@ 0x28
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	60b9      	str	r1, [r7, #8]
 800bb90:	607a      	str	r2, [r7, #4]
 800bb92:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 800bb94:	f107 0320 	add.w	r3, r7, #32
 800bb98:	2200      	movs	r2, #0
 800bb9a:	601a      	str	r2, [r3, #0]
 800bb9c:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800bb9e:	f107 0310 	add.w	r3, r7, #16
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]
 800bba6:	605a      	str	r2, [r3, #4]
 800bba8:	609a      	str	r2, [r3, #8]
 800bbaa:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d021      	beq.n	800bbf6 <bmp3_get_sensor_data+0x70>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 800bbb2:	f107 0120 	add.w	r1, r7, #32
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2206      	movs	r2, #6
 800bbba:	2004      	movs	r0, #4
 800bbbc:	f7ff fd7f 	bl	800b6be <bmp3_get_regs>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMP3_OK)
 800bbc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d116      	bne.n	800bbfc <bmp3_get_sensor_data+0x76>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 800bbce:	f107 0210 	add.w	r2, r7, #16
 800bbd2:	f107 0320 	add.w	r3, r7, #32
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 fc75 	bl	800c4c8 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3340      	adds	r3, #64	@ 0x40
 800bbe2:	f107 0110 	add.w	r1, r7, #16
 800bbe6:	7bf8      	ldrb	r0, [r7, #15]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	f000 fca8 	bl	800c53e <compensate_data>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbf4:	e002      	b.n	800bbfc <bmp3_get_sensor_data+0x76>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800bbf6:	23ff      	movs	r3, #255	@ 0xff
 800bbf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800bbfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3728      	adds	r7, #40	@ 0x28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 800bc12:	6839      	ldr	r1, [r7, #0]
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f889 	bl	800bd2c <validate_normal_mode_settings>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 800bc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d11d      	bne.n	800bc62 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 800bc26:	6839      	ldr	r1, [r7, #0]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f000 f820 	bl	800bc6e <write_power_mode>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 800bc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d113      	bne.n	800bc62 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800bc3a:	f107 010e 	add.w	r1, r7, #14
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2201      	movs	r2, #1
 800bc42:	2002      	movs	r0, #2
 800bc44:	f7ff fd3b 	bl	800b6be <bmp3_get_regs>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800bc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d106      	bne.n	800bc62 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	f003 0304 	and.w	r3, r3, #4
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800bc5e:	23fb      	movs	r3, #251	@ 0xfb
 800bc60:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800bc62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}

0800bc6e <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800bc6e:	b580      	push	{r7, lr}
 800bc70:	b084      	sub	sp, #16
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
 800bc76:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800bc78:	231b      	movs	r3, #27
 800bc7a:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800bc82:	7b78      	ldrb	r0, [r7, #13]
 800bc84:	f107 010c 	add.w	r1, r7, #12
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f7ff fd17 	bl	800b6be <bmp3_get_regs>
 800bc90:	4603      	mov	r3, r0
 800bc92:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 800bc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d119      	bne.n	800bcd0 <write_power_mode+0x62>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800bc9c:	7b3b      	ldrb	r3, [r7, #12]
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bca4:	b25a      	sxtb	r2, r3
 800bca6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	b25b      	sxtb	r3, r3
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800bcbc:	f107 010c 	add.w	r1, r7, #12
 800bcc0:	f107 000d 	add.w	r0, r7, #13
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f7ff fd8f 	bl	800b7ea <bmp3_set_regs>
 800bccc:	4603      	mov	r3, r0
 800bcce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3710      	adds	r7, #16
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800bce4:	231b      	movs	r3, #27
 800bce6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800bce8:	f107 010d 	add.w	r1, r7, #13
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	201b      	movs	r0, #27
 800bcf2:	f7ff fce4 	bl	800b6be <bmp3_get_regs>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800bcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10e      	bne.n	800bd20 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 800bd02:	7b7b      	ldrb	r3, [r7, #13]
 800bd04:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800bd0c:	f107 010d 	add.w	r1, r7, #13
 800bd10:	f107 000e 	add.w	r0, r7, #14
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f7ff fd67 	bl	800b7ea <bmp3_set_regs>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bd20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 fa29 	bl	800c190 <get_odr_filter_settings>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800bd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d104      	bne.n	800bd54 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa3c 	bl	800c1c8 <validate_osr_and_odr_settings>
 800bd50:	4603      	mov	r3, r0
 800bd52:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bd54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 800bd68:	2331      	movs	r3, #49	@ 0x31
 800bd6a:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800bd6c:	f107 0308 	add.w	r3, r7, #8
 800bd70:	2200      	movs	r2, #0
 800bd72:	601a      	str	r2, [r3, #0]
 800bd74:	605a      	str	r2, [r3, #4]
 800bd76:	609a      	str	r2, [r3, #8]
 800bd78:	60da      	str	r2, [r3, #12]
 800bd7a:	611a      	str	r2, [r3, #16]
 800bd7c:	751a      	strb	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800bd7e:	f107 0108 	add.w	r1, r7, #8
 800bd82:	7ff8      	ldrb	r0, [r7, #31]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2215      	movs	r2, #21
 800bd88:	f7ff fc99 	bl	800b6be <bmp3_get_regs>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800bd90:	f107 0308 	add.w	r3, r7, #8
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fc44 	bl	800c624 <parse_calib_data>

    return rslt;
 800bd9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
 800bdb4:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	e015      	b.n	800bde8 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	441a      	add	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	3b01      	subs	r3, #1
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	440b      	add	r3, r1
 800bdcc:	7812      	ldrb	r2, [r2, #0]
 800bdce:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	441a      	add	r2, r3
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	440b      	add	r3, r1
 800bdde:	7812      	ldrb	r2, [r2, #0]
 800bde0:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	3301      	adds	r3, #1
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d3e5      	bcc.n	800bdbc <interleave_reg_addr+0x14>
    }
}
 800bdf0:	bf00      	nop
 800bdf2:	bf00      	nop
 800bdf4:	371c      	adds	r7, #28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr

0800bdfe <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b085      	sub	sp, #20
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	4413      	add	r3, r2
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	f003 0307 	and.w	r3, r3, #7
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 800be1e:	7bfb      	ldrb	r3, [r7, #15]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	4413      	add	r3, r2
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	10db      	asrs	r3, r3, #3
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	f003 0307 	and.w	r3, r3, #7
 800be2e:	b2da      	uxtb	r2, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 800be34:	7bfb      	ldrb	r3, [r7, #15]
 800be36:	3301      	adds	r3, #1
 800be38:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	f003 031f 	and.w	r3, r3, #31
 800be46:	b2da      	uxtb	r2, r3
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	3302      	adds	r3, #2
 800be50:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	4413      	add	r3, r2
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	105b      	asrs	r3, r3, #1
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	f003 0307 	and.w	r3, r3, #7
 800be62:	b2da      	uxtb	r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	709a      	strb	r2, [r3, #2]
}
 800be68:	bf00      	nop
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800be80:	231b      	movs	r3, #27
 800be82:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800be84:	7db8      	ldrb	r0, [r7, #22]
 800be86:	f107 0115 	add.w	r1, r7, #21
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2201      	movs	r2, #1
 800be8e:	f7ff fc16 	bl	800b6be <bmp3_get_regs>
 800be92:	4603      	mov	r3, r0
 800be94:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800be96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d133      	bne.n	800bf06 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00e      	beq.n	800bec6 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 800bea8:	7d7b      	ldrb	r3, [r7, #21]
 800beaa:	b25b      	sxtb	r3, r3
 800beac:	f023 0301 	bic.w	r3, r3, #1
 800beb0:	b25a      	sxtb	r2, r3
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	785b      	ldrb	r3, [r3, #1]
 800beb6:	b25b      	sxtb	r3, r3
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	b25b      	sxtb	r3, r3
 800bebe:	4313      	orrs	r3, r2
 800bec0:	b25b      	sxtb	r3, r3
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	2b00      	cmp	r3, #0
 800bece:	d010      	beq.n	800bef2 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 800bed0:	7d7b      	ldrb	r3, [r7, #21]
 800bed2:	b25b      	sxtb	r3, r3
 800bed4:	f023 0302 	bic.w	r3, r3, #2
 800bed8:	b25a      	sxtb	r2, r3
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	789b      	ldrb	r3, [r3, #2]
 800bede:	b25b      	sxtb	r3, r3
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	b25b      	sxtb	r3, r3
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	b25b      	sxtb	r3, r3
 800beea:	4313      	orrs	r3, r2
 800beec:	b25b      	sxtb	r3, r3
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800bef2:	f107 0115 	add.w	r1, r7, #21
 800bef6:	f107 0016 	add.w	r0, r7, #22
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f7ff fc74 	bl	800b7ea <bmp3_set_regs>
 800bf02:	4603      	mov	r3, r0
 800bf04:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800bf06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b08a      	sub	sp, #40	@ 0x28
 800bf16:	af02      	add	r7, sp, #8
 800bf18:	60f8      	str	r0, [r7, #12]
 800bf1a:	60b9      	str	r1, [r7, #8]
 800bf1c:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 800bf1e:	f107 031c 	add.w	r3, r7, #28
 800bf22:	2100      	movs	r1, #0
 800bf24:	460a      	mov	r2, r1
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	460a      	mov	r2, r1
 800bf2a:	709a      	strb	r2, [r3, #2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800bf30:	f107 0118 	add.w	r1, r7, #24
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2204      	movs	r2, #4
 800bf38:	201c      	movs	r0, #28
 800bf3a:	f7ff fbc0 	bl	800b6be <bmp3_get_regs>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 800bf42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d14a      	bne.n	800bfe0 <set_odr_filter_settings+0xce>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	2030      	movs	r0, #48	@ 0x30
 800bf4e:	f000 ff50 	bl	800cdf2 <are_settings_changed>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <set_odr_filter_settings+0x5e>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800bf58:	f107 0017 	add.w	r0, r7, #23
 800bf5c:	f107 0218 	add.w	r2, r7, #24
 800bf60:	f107 011c 	add.w	r1, r7, #28
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	4603      	mov	r3, r0
 800bf6a:	68f8      	ldr	r0, [r7, #12]
 800bf6c:	f000 f9e2 	bl	800c334 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800bf70:	68f9      	ldr	r1, [r7, #12]
 800bf72:	2080      	movs	r0, #128	@ 0x80
 800bf74:	f000 ff3d 	bl	800cdf2 <are_settings_changed>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <set_odr_filter_settings+0x7e>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 800bf7e:	f107 0217 	add.w	r2, r7, #23
 800bf82:	f107 0118 	add.w	r1, r7, #24
 800bf86:	f107 001c 	add.w	r0, r7, #28
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f000 fa2b 	bl	800c3e6 <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 800bf90:	68f9      	ldr	r1, [r7, #12]
 800bf92:	2040      	movs	r0, #64	@ 0x40
 800bf94:	f000 ff2d 	bl	800cdf2 <are_settings_changed>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d008      	beq.n	800bfb0 <set_odr_filter_settings+0x9e>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 800bf9e:	f107 0217 	add.w	r2, r7, #23
 800bfa2:	f107 0118 	add.w	r1, r7, #24
 800bfa6:	f107 001c 	add.w	r0, r7, #28
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f000 fa55 	bl	800c45a <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d104      	bne.n	800bfc2 <set_odr_filter_settings+0xb0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 800bfb8:	68b8      	ldr	r0, [r7, #8]
 800bfba:	f000 f905 	bl	800c1c8 <validate_osr_and_odr_settings>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 800bfc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10a      	bne.n	800bfe0 <set_odr_filter_settings+0xce>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 800bfca:	7dfb      	ldrb	r3, [r7, #23]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	f107 0118 	add.w	r1, r7, #24
 800bfd2:	f107 001c 	add.w	r0, r7, #28
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f7ff fc07 	bl	800b7ea <bmp3_set_regs>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800bfe0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3720      	adds	r7, #32
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800bff8:	2319      	movs	r3, #25
 800bffa:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800bffc:	7d78      	ldrb	r0, [r7, #21]
 800bffe:	f107 0116 	add.w	r1, r7, #22
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f7ff fb5a 	bl	800b6be <bmp3_get_regs>
 800c00a:	4603      	mov	r3, r0
 800c00c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800c00e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d161      	bne.n	800c0da <set_int_ctrl_settings+0xee>
    {
        int_settings = settings->int_settings;
 800c016:	68ba      	ldr	r2, [r7, #8]
 800c018:	f107 0310 	add.w	r3, r7, #16
 800c01c:	3207      	adds	r2, #7
 800c01e:	6810      	ldr	r0, [r2, #0]
 800c020:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00d      	beq.n	800c048 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 800c02c:	7dbb      	ldrb	r3, [r7, #22]
 800c02e:	b25b      	sxtb	r3, r3
 800c030:	f023 0301 	bic.w	r3, r3, #1
 800c034:	b25a      	sxtb	r2, r3
 800c036:	7c3b      	ldrb	r3, [r7, #16]
 800c038:	b25b      	sxtb	r3, r3
 800c03a:	f003 0301 	and.w	r3, r3, #1
 800c03e:	b25b      	sxtb	r3, r3
 800c040:	4313      	orrs	r3, r2
 800c042:	b25b      	sxtb	r3, r3
 800c044:	b2db      	uxtb	r3, r3
 800c046:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00f      	beq.n	800c072 <set_int_ctrl_settings+0x86>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800c052:	7dbb      	ldrb	r3, [r7, #22]
 800c054:	b25b      	sxtb	r3, r3
 800c056:	f023 0302 	bic.w	r3, r3, #2
 800c05a:	b25a      	sxtb	r2, r3
 800c05c:	7c7b      	ldrb	r3, [r7, #17]
 800c05e:	b25b      	sxtb	r3, r3
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	b25b      	sxtb	r3, r3
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	4313      	orrs	r3, r2
 800c06c:	b25b      	sxtb	r3, r3
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00f      	beq.n	800c09c <set_int_ctrl_settings+0xb0>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 800c07c:	7dbb      	ldrb	r3, [r7, #22]
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	f023 0304 	bic.w	r3, r3, #4
 800c084:	b25a      	sxtb	r2, r3
 800c086:	7cbb      	ldrb	r3, [r7, #18]
 800c088:	b25b      	sxtb	r3, r3
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	f003 0304 	and.w	r3, r3, #4
 800c092:	b25b      	sxtb	r3, r3
 800c094:	4313      	orrs	r3, r2
 800c096:	b25b      	sxtb	r3, r3
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f003 0308 	and.w	r3, r3, #8
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00f      	beq.n	800c0c6 <set_int_ctrl_settings+0xda>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800c0a6:	7dbb      	ldrb	r3, [r7, #22]
 800c0a8:	b25b      	sxtb	r3, r3
 800c0aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0ae:	b25a      	sxtb	r2, r3
 800c0b0:	7cfb      	ldrb	r3, [r7, #19]
 800c0b2:	b25b      	sxtb	r3, r3
 800c0b4:	019b      	lsls	r3, r3, #6
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	b25b      	sxtb	r3, r3
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800c0c6:	f107 0116 	add.w	r1, r7, #22
 800c0ca:	f107 0015 	add.w	r0, r7, #21
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f7ff fb8a 	bl	800b7ea <bmp3_set_regs>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800c0da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3718      	adds	r7, #24
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b086      	sub	sp, #24
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	60f8      	str	r0, [r7, #12]
 800c0ee:	60b9      	str	r1, [r7, #8]
 800c0f0:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	f107 0310 	add.w	r3, r7, #16
 800c0f8:	320b      	adds	r2, #11
 800c0fa:	8812      	ldrh	r2, [r2, #0]
 800c0fc:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 800c0fe:	231a      	movs	r3, #26
 800c100:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800c102:	7db8      	ldrb	r0, [r7, #22]
 800c104:	f107 0115 	add.w	r1, r7, #21
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f7ff fad7 	bl	800b6be <bmp3_get_regs>
 800c110:	4603      	mov	r3, r0
 800c112:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800c114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d133      	bne.n	800c184 <set_advance_settings+0x9e>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00f      	beq.n	800c146 <set_advance_settings+0x60>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 800c126:	7d7b      	ldrb	r3, [r7, #21]
 800c128:	b25b      	sxtb	r3, r3
 800c12a:	f023 0302 	bic.w	r3, r3, #2
 800c12e:	b25a      	sxtb	r2, r3
 800c130:	7c3b      	ldrb	r3, [r7, #16]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	b25b      	sxtb	r3, r3
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	b25b      	sxtb	r3, r3
 800c13e:	4313      	orrs	r3, r2
 800c140:	b25b      	sxtb	r3, r3
 800c142:	b2db      	uxtb	r3, r3
 800c144:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00f      	beq.n	800c170 <set_advance_settings+0x8a>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 800c150:	7d7b      	ldrb	r3, [r7, #21]
 800c152:	b25b      	sxtb	r3, r3
 800c154:	f023 0304 	bic.w	r3, r3, #4
 800c158:	b25a      	sxtb	r2, r3
 800c15a:	7c7b      	ldrb	r3, [r7, #17]
 800c15c:	b25b      	sxtb	r3, r3
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	b25b      	sxtb	r3, r3
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	b25b      	sxtb	r3, r3
 800c168:	4313      	orrs	r3, r2
 800c16a:	b25b      	sxtb	r3, r3
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800c170:	f107 0115 	add.w	r1, r7, #21
 800c174:	f107 0016 	add.w	r0, r7, #22
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f7ff fb35 	bl	800b7ea <bmp3_set_regs>
 800c180:	4603      	mov	r3, r0
 800c182:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800c184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3718      	adds	r7, #24
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b084      	sub	sp, #16
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800c19a:	f107 0108 	add.w	r1, r7, #8
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	201c      	movs	r0, #28
 800c1a4:	f7ff fa8b 	bl	800b6be <bmp3_get_regs>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	1cda      	adds	r2, r3, #3
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fe21 	bl	800bdfe <parse_odr_filter_settings>

    return rslt;
 800c1bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b098      	sub	sp, #96	@ 0x60
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 800c1d0:	23ea      	movs	r3, #234	@ 0xea
 800c1d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t meas_t_p = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 800c1d8:	4a1a      	ldr	r2, [pc, #104]	@ (800c244 <validate_osr_and_odr_settings+0x7c>)
 800c1da:	f107 030c 	add.w	r3, r7, #12
 800c1de:	4611      	mov	r1, r2
 800c1e0:	2248      	movs	r2, #72	@ 0x48
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f003 f8fb 	bl	800f3de <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	785b      	ldrb	r3, [r3, #1]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d006      	beq.n	800c1fe <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f83f 	bl	800c274 <calculate_press_meas_time>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1fa:	4413      	add	r3, r2
 800c1fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    if (settings->temp_en)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	789b      	ldrb	r3, [r3, #2]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d006      	beq.n	800c214 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f864 	bl	800c2d4 <calculate_temp_meas_time>
 800c20c:	4602      	mov	r2, r0
 800c20e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c210:	4413      	add	r3, r2
 800c212:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 800c214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c216:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c218:	4413      	add	r3, r2
 800c21a:	65bb      	str	r3, [r7, #88]	@ 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	799b      	ldrb	r3, [r3, #6]
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	3360      	adds	r3, #96	@ 0x60
 800c224:	443b      	add	r3, r7
 800c226:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c22e:	f000 f80b 	bl	800c248 <verify_meas_time_and_odr_duration>
 800c232:	4603      	mov	r3, r0
 800c234:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    return rslt;
 800c238:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3760      	adds	r7, #96	@ 0x60
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	08012ee0 	.word	0x08012ee0

0800c248 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	429a      	cmp	r2, r3
 800c258:	d202      	bcs.n	800c260 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]
 800c25e:	e001      	b.n	800c264 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 800c260:	23fd      	movs	r3, #253	@ 0xfd
 800c262:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800c264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b088      	sub	sp, #32
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	f107 030c 	add.w	r3, r7, #12
 800c282:	3203      	adds	r2, #3
 800c284:	6810      	ldr	r0, [r2, #0]
 800c286:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c290:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 800c294:	7b3b      	ldrb	r3, [r7, #12]
 800c296:	4618      	mov	r0, r3
 800c298:	ed97 0b06 	vldr	d0, [r7, #24]
 800c29c:	f000 fd84 	bl	800cda8 <pow_bmp3>
 800c2a0:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 800c2a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2a8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c2cc <calculate_press_meas_time+0x58>
 800c2ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c2b0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c2d0 <calculate_press_meas_time+0x5c>
 800c2b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2bc:	ee17 3a90 	vmov	r3, s15
 800c2c0:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 800c2c2:	693b      	ldr	r3, [r7, #16]
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3720      	adds	r7, #32
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	44fa0000 	.word	0x44fa0000
 800c2d0:	43c40000 	.word	0x43c40000

0800c2d4 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	f107 030c 	add.w	r3, r7, #12
 800c2e2:	3203      	adds	r2, #3
 800c2e4:	6810      	ldr	r0, [r2, #0]
 800c2e6:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 800c2e8:	f04f 0200 	mov.w	r2, #0
 800c2ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c2f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 800c2f4:	7b7b      	ldrb	r3, [r7, #13]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	ed97 0b06 	vldr	d0, [r7, #24]
 800c2fc:	f000 fd54 	bl	800cda8 <pow_bmp3>
 800c300:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 800c304:	edd7 7a05 	vldr	s15, [r7, #20]
 800c308:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800c32c <calculate_temp_meas_time+0x58>
 800c30c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c310:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800c330 <calculate_temp_meas_time+0x5c>
 800c314:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c31c:	ee17 3a90 	vmov	r3, s15
 800c320:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 800c322:	693b      	ldr	r3, [r7, #16]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3720      	adds	r7, #32
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	44fa0000 	.word	0x44fa0000
 800c330:	439c8000 	.word	0x439c8000

0800c334 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800c342:	6a3a      	ldr	r2, [r7, #32]
 800c344:	f107 0314 	add.w	r3, r7, #20
 800c348:	3203      	adds	r2, #3
 800c34a:	6810      	ldr	r0, [r2, #0]
 800c34c:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c354:	2b00      	cmp	r3, #0
 800c356:	d040      	beq.n	800c3da <fill_osr_data+0xa6>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f003 0310 	and.w	r3, r3, #16
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d013      	beq.n	800c38a <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b25b      	sxtb	r3, r3
 800c368:	f023 0307 	bic.w	r3, r3, #7
 800c36c:	b25a      	sxtb	r2, r3
 800c36e:	7d3b      	ldrb	r3, [r7, #20]
 800c370:	b25b      	sxtb	r3, r3
 800c372:	f003 0307 	and.w	r3, r3, #7
 800c376:	b25b      	sxtb	r3, r3
 800c378:	4313      	orrs	r3, r2
 800c37a:	b25a      	sxtb	r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	4619      	mov	r1, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	440b      	add	r3, r1
 800c386:	b2d2      	uxtb	r2, r2
 800c388:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f003 0320 	and.w	r3, r3, #32
 800c390:	2b00      	cmp	r3, #0
 800c392:	d015      	beq.n	800c3c0 <fill_osr_data+0x8c>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	b25b      	sxtb	r3, r3
 800c39a:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800c39e:	b25a      	sxtb	r2, r3
 800c3a0:	7d7b      	ldrb	r3, [r7, #21]
 800c3a2:	b25b      	sxtb	r3, r3
 800c3a4:	00db      	lsls	r3, r3, #3
 800c3a6:	b25b      	sxtb	r3, r3
 800c3a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c3ac:	b25b      	sxtb	r3, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	b25a      	sxtb	r2, r3
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	440b      	add	r3, r1
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	461a      	mov	r2, r3
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	221c      	movs	r2, #28
 800c3cc:	701a      	strb	r2, [r3, #0]
        (*len)++;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	701a      	strb	r2, [r3, #0]
    }
}
 800c3da:	bf00      	nop
 800c3dc:	371c      	adds	r7, #28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b087      	sub	sp, #28
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	60b9      	str	r1, [r7, #8]
 800c3f0:	607a      	str	r2, [r7, #4]
 800c3f2:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	3303      	adds	r3, #3
 800c3f8:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	78db      	ldrb	r3, [r3, #3]
 800c3fe:	2b11      	cmp	r3, #17
 800c400:	d902      	bls.n	800c408 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	2211      	movs	r2, #17
 800c406:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	3301      	adds	r3, #1
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	b25b      	sxtb	r3, r3
 800c410:	f023 031f 	bic.w	r3, r3, #31
 800c414:	b25a      	sxtb	r2, r3
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	78db      	ldrb	r3, [r3, #3]
 800c41a:	b25b      	sxtb	r3, r3
 800c41c:	f003 031f 	and.w	r3, r3, #31
 800c420:	b25b      	sxtb	r3, r3
 800c422:	4313      	orrs	r3, r2
 800c424:	b25a      	sxtb	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	4619      	mov	r1, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	440b      	add	r3, r1
 800c430:	b2d2      	uxtb	r2, r2
 800c432:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	461a      	mov	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4413      	add	r3, r2
 800c43e:	221d      	movs	r2, #29
 800c440:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	3301      	adds	r3, #1
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	701a      	strb	r2, [r3, #0]
}
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b087      	sub	sp, #28
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	607a      	str	r2, [r7, #4]
 800c466:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	f107 0314 	add.w	r3, r7, #20
 800c46e:	3203      	adds	r2, #3
 800c470:	6810      	ldr	r0, [r2, #0]
 800c472:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3303      	adds	r3, #3
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	b25b      	sxtb	r3, r3
 800c47c:	f023 030e 	bic.w	r3, r3, #14
 800c480:	b25a      	sxtb	r2, r3
 800c482:	7dbb      	ldrb	r3, [r7, #22]
 800c484:	b25b      	sxtb	r3, r3
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	b25b      	sxtb	r3, r3
 800c48a:	f003 030e 	and.w	r3, r3, #14
 800c48e:	b25b      	sxtb	r3, r3
 800c490:	4313      	orrs	r3, r2
 800c492:	b25a      	sxtb	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4619      	mov	r1, r3
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	440b      	add	r3, r1
 800c49e:	b2d2      	uxtb	r2, r2
 800c4a0:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	221f      	movs	r2, #31
 800c4ae:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	701a      	strb	r2, [r3, #0]
}
 800c4bc:	bf00      	nop
 800c4be:	371c      	adds	r7, #28
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 800c4c8:	b4b0      	push	{r4, r5, r7}
 800c4ca:	b087      	sub	sp, #28
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 800c4d2:	6879      	ldr	r1, [r7, #4]
 800c4d4:	7809      	ldrb	r1, [r1, #0]
 800c4d6:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	3101      	adds	r1, #1
 800c4dc:	7809      	ldrb	r1, [r1, #0]
 800c4de:	0209      	lsls	r1, r1, #8
 800c4e0:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	3102      	adds	r1, #2
 800c4e6:	7809      	ldrb	r1, [r1, #0]
 800c4e8:	0409      	lsls	r1, r1, #16
 800c4ea:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	6939      	ldr	r1, [r7, #16]
 800c4f0:	4308      	orrs	r0, r1
 800c4f2:	6979      	ldr	r1, [r7, #20]
 800c4f4:	4301      	orrs	r1, r0
 800c4f6:	2000      	movs	r0, #0
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	4605      	mov	r5, r0
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 800c502:	6879      	ldr	r1, [r7, #4]
 800c504:	3103      	adds	r1, #3
 800c506:	7809      	ldrb	r1, [r1, #0]
 800c508:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800c50a:	6879      	ldr	r1, [r7, #4]
 800c50c:	3104      	adds	r1, #4
 800c50e:	7809      	ldrb	r1, [r1, #0]
 800c510:	0209      	lsls	r1, r1, #8
 800c512:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	3105      	adds	r1, #5
 800c518:	7809      	ldrb	r1, [r1, #0]
 800c51a:	0409      	lsls	r1, r1, #16
 800c51c:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	6939      	ldr	r1, [r7, #16]
 800c522:	4308      	orrs	r0, r1
 800c524:	6979      	ldr	r1, [r7, #20]
 800c526:	4301      	orrs	r1, r0
 800c528:	2000      	movs	r0, #0
 800c52a:	460a      	mov	r2, r1
 800c52c:	4603      	mov	r3, r0
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800c534:	bf00      	nop
 800c536:	371c      	adds	r7, #28
 800c538:	46bd      	mov	sp, r7
 800c53a:	bcb0      	pop	{r4, r5, r7}
 800c53c:	4770      	bx	lr

0800c53e <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
 800c54a:	4603      	mov	r3, r0
 800c54c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 800c54e:	2300      	movs	r3, #0
 800c550:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d05a      	beq.n	800c60e <compensate_data+0xd0>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d057      	beq.n	800c60e <compensate_data+0xd0>
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d054      	beq.n	800c60e <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b03      	cmp	r3, #3
 800c568:	d115      	bne.n	800c596 <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 fa27 	bl	800c9c4 <compensate_temperature>
 800c576:	4603      	mov	r3, r0
 800c578:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800c57a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d148      	bne.n	800c614 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3308      	adds	r3, #8
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	68b9      	ldr	r1, [r7, #8]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fa94 	bl	800cab8 <compensate_pressure>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c594:	e03e      	b.n	800c614 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d116      	bne.n	800c5ca <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fa0e 	bl	800c9c4 <compensate_temperature>
            comp_data->temperature = 0;
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	f04f 0200 	mov.w	r2, #0
 800c5ae:	f04f 0300 	mov.w	r3, #0
 800c5b2:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	683a      	ldr	r2, [r7, #0]
 800c5bc:	68b9      	ldr	r1, [r7, #8]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fa7a 	bl	800cab8 <compensate_pressure>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c5c8:	e024      	b.n	800c614 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 800c5ca:	7bfb      	ldrb	r3, [r7, #15]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d10f      	bne.n	800c5f0 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f9f4 	bl	800c9c4 <compensate_temperature>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 800c5e0:	6879      	ldr	r1, [r7, #4]
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	f04f 0300 	mov.w	r3, #0
 800c5ea:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c5ee:	e011      	b.n	800c614 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 800c5f0:	6879      	ldr	r1, [r7, #4]
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	f04f 0300 	mov.w	r3, #0
 800c5fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 800c5fe:	6879      	ldr	r1, [r7, #4]
 800c600:	f04f 0200 	mov.w	r2, #0
 800c604:	f04f 0300 	mov.w	r3, #0
 800c608:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c60c:	e002      	b.n	800c614 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800c60e:	23ff      	movs	r3, #255	@ 0xff
 800c610:	75fb      	strb	r3, [r7, #23]
 800c612:	e000      	b.n	800c616 <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c614:	bf00      	nop
    }

    return rslt;
 800c616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	33b8      	adds	r3, #184	@ 0xb8
 800c632:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	3340      	adds	r3, #64	@ 0x40
 800c638:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800c63a:	f04f 0200 	mov.w	r2, #0
 800c63e:	4ba4      	ldr	r3, [pc, #656]	@ (800c8d0 <parse_calib_data+0x2ac>)
 800c640:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3301      	adds	r3, #1
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	b21b      	sxth	r3, r3
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	b21a      	sxth	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b21b      	sxth	r3, r3
 800c656:	4313      	orrs	r3, r2
 800c658:	b21b      	sxth	r3, r3
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	881b      	ldrh	r3, [r3, #0]
 800c664:	4618      	mov	r0, r3
 800c666:	f7f3 ff4d 	bl	8000504 <__aeabi_ui2d>
 800c66a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c66e:	f7f4 f8ed 	bl	800084c <__aeabi_ddiv>
 800c672:	4602      	mov	r2, r0
 800c674:	460b      	mov	r3, r1
 800c676:	6939      	ldr	r1, [r7, #16]
 800c678:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	3303      	adds	r3, #3
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	b21b      	sxth	r3, r3
 800c684:	021b      	lsls	r3, r3, #8
 800c686:	b21a      	sxth	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3302      	adds	r3, #2
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	b21b      	sxth	r3, r3
 800c690:	4313      	orrs	r3, r2
 800c692:	b21b      	sxth	r3, r3
 800c694:	b29a      	uxth	r2, r3
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 800c69a:	f04f 0200 	mov.w	r2, #0
 800c69e:	4b8d      	ldr	r3, [pc, #564]	@ (800c8d4 <parse_calib_data+0x2b0>)
 800c6a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	885b      	ldrh	r3, [r3, #2]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7f3 ff2b 	bl	8000504 <__aeabi_ui2d>
 800c6ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6b2:	f7f4 f8cb 	bl	800084c <__aeabi_ddiv>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	6939      	ldr	r1, [r7, #16]
 800c6bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	b25a      	sxtb	r2, r3
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 800c6cc:	f04f 0200 	mov.w	r2, #0
 800c6d0:	4b81      	ldr	r3, [pc, #516]	@ (800c8d8 <parse_calib_data+0x2b4>)
 800c6d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7f3 ff21 	bl	8000524 <__aeabi_i2d>
 800c6e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c6e6:	f7f4 f8b1 	bl	800084c <__aeabi_ddiv>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	6939      	ldr	r1, [r7, #16]
 800c6f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3306      	adds	r3, #6
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b21b      	sxth	r3, r3
 800c6fc:	021b      	lsls	r3, r3, #8
 800c6fe:	b21a      	sxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3305      	adds	r3, #5
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	b21b      	sxth	r3, r3
 800c708:	4313      	orrs	r3, r2
 800c70a:	b21a      	sxth	r2, r3
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	4b71      	ldr	r3, [pc, #452]	@ (800c8dc <parse_calib_data+0x2b8>)
 800c716:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c720:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c724:	4618      	mov	r0, r3
 800c726:	f7f3 fefd 	bl	8000524 <__aeabi_i2d>
 800c72a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c72e:	f7f4 f88d 	bl	800084c <__aeabi_ddiv>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	6939      	ldr	r1, [r7, #16]
 800c738:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3308      	adds	r3, #8
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	b21b      	sxth	r3, r3
 800c744:	021b      	lsls	r3, r3, #8
 800c746:	b21a      	sxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	3307      	adds	r3, #7
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	b21b      	sxth	r3, r3
 800c750:	4313      	orrs	r3, r2
 800c752:	b21a      	sxth	r2, r3
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800c758:	f04f 0200 	mov.w	r2, #0
 800c75c:	4b60      	ldr	r3, [pc, #384]	@ (800c8e0 <parse_calib_data+0x2bc>)
 800c75e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c768:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7f3 fed9 	bl	8000524 <__aeabi_i2d>
 800c772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c776:	f7f4 f869 	bl	800084c <__aeabi_ddiv>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	6939      	ldr	r1, [r7, #16]
 800c780:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3309      	adds	r3, #9
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	b25a      	sxtb	r2, r3
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 800c790:	f04f 0200 	mov.w	r2, #0
 800c794:	4b53      	ldr	r3, [pc, #332]	@ (800c8e4 <parse_calib_data+0x2c0>)
 800c796:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f7f3 febf 	bl	8000524 <__aeabi_i2d>
 800c7a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7aa:	f7f4 f84f 	bl	800084c <__aeabi_ddiv>
 800c7ae:	4602      	mov	r2, r0
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	6939      	ldr	r1, [r7, #16]
 800c7b4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	330a      	adds	r3, #10
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	b25a      	sxtb	r2, r3
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800c7c4:	f04f 0200 	mov.w	r2, #0
 800c7c8:	4b47      	ldr	r3, [pc, #284]	@ (800c8e8 <parse_calib_data+0x2c4>)
 800c7ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7f3 fea5 	bl	8000524 <__aeabi_i2d>
 800c7da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c7de:	f7f4 f835 	bl	800084c <__aeabi_ddiv>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	6939      	ldr	r1, [r7, #16]
 800c7e8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	330c      	adds	r3, #12
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	b21b      	sxth	r3, r3
 800c7f4:	021b      	lsls	r3, r3, #8
 800c7f6:	b21a      	sxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	330b      	adds	r3, #11
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	b21b      	sxth	r3, r3
 800c800:	4313      	orrs	r3, r2
 800c802:	b21b      	sxth	r3, r3
 800c804:	b29a      	uxth	r2, r3
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800c80a:	f04f 0200 	mov.w	r2, #0
 800c80e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c812:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	899b      	ldrh	r3, [r3, #12]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7f3 fe72 	bl	8000504 <__aeabi_ui2d>
 800c820:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c824:	f7f4 f812 	bl	800084c <__aeabi_ddiv>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	6939      	ldr	r1, [r7, #16]
 800c82e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	330e      	adds	r3, #14
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	b21b      	sxth	r3, r3
 800c83a:	021b      	lsls	r3, r3, #8
 800c83c:	b21a      	sxth	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	330d      	adds	r3, #13
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b21b      	sxth	r3, r3
 800c846:	4313      	orrs	r3, r2
 800c848:	b21b      	sxth	r3, r3
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800c850:	f04f 0200 	mov.w	r2, #0
 800c854:	4b25      	ldr	r3, [pc, #148]	@ (800c8ec <parse_calib_data+0x2c8>)
 800c856:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	89db      	ldrh	r3, [r3, #14]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7f3 fe50 	bl	8000504 <__aeabi_ui2d>
 800c864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c868:	f7f3 fff0 	bl	800084c <__aeabi_ddiv>
 800c86c:	4602      	mov	r2, r0
 800c86e:	460b      	mov	r3, r1
 800c870:	6939      	ldr	r1, [r7, #16]
 800c872:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	330f      	adds	r3, #15
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	b25a      	sxtb	r2, r3
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800c882:	f04f 0200 	mov.w	r2, #0
 800c886:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f0 <parse_calib_data+0x2cc>)
 800c888:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800c892:	4618      	mov	r0, r3
 800c894:	f7f3 fe46 	bl	8000524 <__aeabi_i2d>
 800c898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c89c:	f7f3 ffd6 	bl	800084c <__aeabi_ddiv>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	460b      	mov	r3, r1
 800c8a4:	6939      	ldr	r1, [r7, #16]
 800c8a6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3310      	adds	r3, #16
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	b25a      	sxtb	r2, r3
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f4 <parse_calib_data+0x2d0>)
 800c8bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7f3 fe2c 	bl	8000524 <__aeabi_i2d>
 800c8cc:	e014      	b.n	800c8f8 <parse_calib_data+0x2d4>
 800c8ce:	bf00      	nop
 800c8d0:	3f700000 	.word	0x3f700000
 800c8d4:	41d00000 	.word	0x41d00000
 800c8d8:	42f00000 	.word	0x42f00000
 800c8dc:	41300000 	.word	0x41300000
 800c8e0:	41c00000 	.word	0x41c00000
 800c8e4:	41f00000 	.word	0x41f00000
 800c8e8:	42400000 	.word	0x42400000
 800c8ec:	40500000 	.word	0x40500000
 800c8f0:	40700000 	.word	0x40700000
 800c8f4:	40e00000 	.word	0x40e00000
 800c8f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c8fc:	f7f3 ffa6 	bl	800084c <__aeabi_ddiv>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	6939      	ldr	r1, [r7, #16]
 800c906:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3312      	adds	r3, #18
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	b21b      	sxth	r3, r3
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	b21a      	sxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	3311      	adds	r3, #17
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b21b      	sxth	r3, r3
 800c91e:	4313      	orrs	r3, r2
 800c920:	b21a      	sxth	r2, r3
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800c926:	f04f 0200 	mov.w	r2, #0
 800c92a:	4b25      	ldr	r3, [pc, #148]	@ (800c9c0 <parse_calib_data+0x39c>)
 800c92c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c936:	4618      	mov	r0, r3
 800c938:	f7f3 fdf4 	bl	8000524 <__aeabi_i2d>
 800c93c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c940:	f7f3 ff84 	bl	800084c <__aeabi_ddiv>
 800c944:	4602      	mov	r2, r0
 800c946:	460b      	mov	r3, r1
 800c948:	6939      	ldr	r1, [r7, #16]
 800c94a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	3313      	adds	r3, #19
 800c952:	781b      	ldrb	r3, [r3, #0]
 800c954:	b25a      	sxtb	r2, r3
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800c95a:	f04f 0200 	mov.w	r2, #0
 800c95e:	4b18      	ldr	r3, [pc, #96]	@ (800c9c0 <parse_calib_data+0x39c>)
 800c960:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7f3 fdda 	bl	8000524 <__aeabi_i2d>
 800c970:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c974:	f7f3 ff6a 	bl	800084c <__aeabi_ddiv>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	6939      	ldr	r1, [r7, #16]
 800c97e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	3314      	adds	r3, #20
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	b25a      	sxtb	r2, r3
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800c98e:	f04f 0200 	mov.w	r2, #0
 800c992:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 800c996:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7f3 fdbf 	bl	8000524 <__aeabi_i2d>
 800c9a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9aa:	f7f3 ff4f 	bl	800084c <__aeabi_ddiv>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	6939      	ldr	r1, [r7, #16]
 800c9b4:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 800c9b8:	bf00      	nop
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	42f00000 	.word	0x42f00000

0800c9c4 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08c      	sub	sp, #48	@ 0x30
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	60b9      	str	r1, [r7, #8]
 800c9ce:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c9dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800c9e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c9e4:	f7f3 fdda 	bl	800059c <__aeabi_l2d>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ee:	f7f3 fc4b 	bl	8000288 <__aeabi_dsub>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ca00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca04:	f7f3 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800ca10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca14:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	4610      	mov	r0, r2
 800ca22:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800ca2a:	f7f3 fde5 	bl	80005f8 <__aeabi_dmul>
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	4610      	mov	r0, r2
 800ca34:	4619      	mov	r1, r3
 800ca36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ca3a:	f7f3 fc27 	bl	800028c <__adddf3>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	460b      	mov	r3, r1
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800ca4e:	f04f 0200 	mov.w	r2, #0
 800ca52:	4b17      	ldr	r3, [pc, #92]	@ (800cab0 <compensate_temperature+0xec>)
 800ca54:	f7f4 f842 	bl	8000adc <__aeabi_dcmplt>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d008      	beq.n	800ca70 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 800ca5e:	6879      	ldr	r1, [r7, #4]
 800ca60:	f04f 0200 	mov.w	r2, #0
 800ca64:	4b12      	ldr	r3, [pc, #72]	@ (800cab0 <compensate_temperature+0xec>)
 800ca66:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MIN_TEMP;
 800ca6a:	2303      	movs	r3, #3
 800ca6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800ca76:	f04f 0200 	mov.w	r2, #0
 800ca7a:	4b0e      	ldr	r3, [pc, #56]	@ (800cab4 <compensate_temperature+0xf0>)
 800ca7c:	f7f4 f84c 	bl	8000b18 <__aeabi_dcmpgt>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d008      	beq.n	800ca98 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	f04f 0200 	mov.w	r2, #0
 800ca8c:	4b09      	ldr	r3, [pc, #36]	@ (800cab4 <compensate_temperature+0xf0>)
 800ca8e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MAX_TEMP;
 800ca92:	2304      	movs	r3, #4
 800ca94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800ca9e:	68f9      	ldr	r1, [r7, #12]
 800caa0:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800caa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3730      	adds	r7, #48	@ 0x30
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}
 800cab0:	c0440000 	.word	0xc0440000
 800cab4:	40554000 	.word	0x40554000

0800cab8 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 800cab8:	b5b0      	push	{r4, r5, r7, lr}
 800caba:	b096      	sub	sp, #88	@ 0x58
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	647b      	str	r3, [r7, #68]	@ 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 800cace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cad0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cad4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cad6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800cada:	f7f3 fd8d 	bl	80005f8 <__aeabi_dmul>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800cae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cae8:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 800caec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caee:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800caf2:	2002      	movs	r0, #2
 800caf4:	eeb0 0a47 	vmov.f32	s0, s14
 800caf8:	eef0 0a67 	vmov.f32	s1, s15
 800cafc:	f000 f954 	bl	800cda8 <pow_bmp3>
 800cb00:	ee10 3a10 	vmov	r3, s0
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7f3 fd1f 	bl	8000548 <__aeabi_f2d>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4620      	mov	r0, r4
 800cb10:	4629      	mov	r1, r5
 800cb12:	f7f3 fd71 	bl	80005f8 <__aeabi_dmul>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800cb1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb20:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800cb24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb26:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800cb2a:	2003      	movs	r0, #3
 800cb2c:	eeb0 0a47 	vmov.f32	s0, s14
 800cb30:	eef0 0a67 	vmov.f32	s1, s15
 800cb34:	f000 f938 	bl	800cda8 <pow_bmp3>
 800cb38:	ee10 3a10 	vmov	r3, s0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7f3 fd03 	bl	8000548 <__aeabi_f2d>
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4620      	mov	r0, r4
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	460b      	mov	r3, r1
 800cb52:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800cb56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb58:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800cb5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cb60:	f7f3 fb94 	bl	800028c <__adddf3>
 800cb64:	4602      	mov	r2, r0
 800cb66:	460b      	mov	r3, r1
 800cb68:	4610      	mov	r0, r2
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cb70:	f7f3 fb8c 	bl	800028c <__adddf3>
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cb7c:	f7f3 fb86 	bl	800028c <__adddf3>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 800cb88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb8a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cb8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb90:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800cb94:	f7f3 fd30 	bl	80005f8 <__aeabi_dmul>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800cba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba2:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800cba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800cbac:	2002      	movs	r0, #2
 800cbae:	eeb0 0a47 	vmov.f32	s0, s14
 800cbb2:	eef0 0a67 	vmov.f32	s1, s15
 800cbb6:	f000 f8f7 	bl	800cda8 <pow_bmp3>
 800cbba:	ee10 3a10 	vmov	r3, s0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f3 fcc2 	bl	8000548 <__aeabi_f2d>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4620      	mov	r0, r4
 800cbca:	4629      	mov	r1, r5
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800cbd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbda:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800cbde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbe0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800cbe4:	2003      	movs	r0, #3
 800cbe6:	eeb0 0a47 	vmov.f32	s0, s14
 800cbea:	eef0 0a67 	vmov.f32	s1, s15
 800cbee:	f000 f8db 	bl	800cda8 <pow_bmp3>
 800cbf2:	ee10 3a10 	vmov	r3, s0
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7f3 fca6 	bl	8000548 <__aeabi_f2d>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4620      	mov	r0, r4
 800cc02:	4629      	mov	r1, r5
 800cc04:	f7f3 fcf8 	bl	80005f8 <__aeabi_dmul>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out2 = uncomp_data->pressure *
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc16:	4610      	mov	r0, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f7f3 fcb7 	bl	800058c <__aeabi_ul2d>
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800cc22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc24:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cc28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cc2c:	f7f3 fb2e 	bl	800028c <__adddf3>
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	4610      	mov	r0, r2
 800cc36:	4619      	mov	r1, r3
 800cc38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800cc3c:	f7f3 fb26 	bl	800028c <__adddf3>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4610      	mov	r0, r2
 800cc46:	4619      	mov	r1, r3
 800cc48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800cc4c:	f7f3 fb1e 	bl	800028c <__adddf3>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800cc54:	4620      	mov	r0, r4
 800cc56:	4629      	mov	r1, r5
 800cc58:	f7f3 fcce 	bl	80005f8 <__aeabi_dmul>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	460b      	mov	r3, r1
 800cc60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	4610      	mov	r0, r2
 800cc6c:	4619      	mov	r1, r3
 800cc6e:	f7f3 fc8d 	bl	800058c <__aeabi_ul2d>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	2002      	movs	r0, #2
 800cc78:	ec43 2b10 	vmov	d0, r2, r3
 800cc7c:	f000 f894 	bl	800cda8 <pow_bmp3>
 800cc80:	ee10 3a10 	vmov	r3, s0
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f3 fc5f 	bl	8000548 <__aeabi_f2d>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800cc92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc94:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800cc98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc9a:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800cc9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cca0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800cca4:	f7f3 fca8 	bl	80005f8 <__aeabi_dmul>
 800cca8:	4602      	mov	r2, r0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4620      	mov	r0, r4
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f7f3 faec 	bl	800028c <__adddf3>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = partial_data1 * partial_data2;
 800ccbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800ccc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800ccc4:	f7f3 fc98 	bl	80005f8 <__aeabi_dmul>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	460b      	mov	r3, r1
 800cccc:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	4610      	mov	r0, r2
 800ccd8:	4619      	mov	r1, r3
 800ccda:	f7f3 fc57 	bl	800058c <__aeabi_ul2d>
 800ccde:	4602      	mov	r2, r0
 800cce0:	460b      	mov	r3, r1
 800cce2:	2003      	movs	r0, #3
 800cce4:	ec43 2b10 	vmov	d0, r2, r3
 800cce8:	f000 f85e 	bl	800cda8 <pow_bmp3>
 800ccec:	ee10 3a10 	vmov	r3, s0
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7f3 fc29 	bl	8000548 <__aeabi_f2d>
 800ccf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccf8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800ccfc:	f7f3 fc7c 	bl	80005f8 <__aeabi_dmul>
 800cd00:	4602      	mov	r2, r0
 800cd02:	460b      	mov	r3, r1
 800cd04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800cd08:	f7f3 fac0 	bl	800028c <__adddf3>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800cd14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cd1c:	f7f3 fab6 	bl	800028c <__adddf3>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd28:	f7f3 fab0 	bl	800028c <__adddf3>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800cd34:	a318      	add	r3, pc, #96	@ (adr r3, 800cd98 <compensate_pressure+0x2e0>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800cd3e:	f7f3 fecd 	bl	8000adc <__aeabi_dcmplt>
 800cd42:	4603      	mov	r3, r0
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 800cd48:	a313      	add	r3, pc, #76	@ (adr r3, 800cd98 <compensate_pressure+0x2e0>)
 800cd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MIN_PRES;
 800cd52:	2305      	movs	r3, #5
 800cd54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 800cd58:	a311      	add	r3, pc, #68	@ (adr r3, 800cda0 <compensate_pressure+0x2e8>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800cd62:	f7f3 fed9 	bl	8000b18 <__aeabi_dcmpgt>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d007      	beq.n	800cd7c <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 800cd6c:	a30c      	add	r3, pc, #48	@ (adr r3, 800cda0 <compensate_pressure+0x2e8>)
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MAX_PRES;
 800cd76:	2306      	movs	r3, #6
 800cd78:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    (*pressure) = comp_press;
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cd82:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800cd86:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3758      	adds	r7, #88	@ 0x58
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	bdb0      	pop	{r4, r5, r7, pc}
 800cd92:	bf00      	nop
 800cd94:	f3af 8000 	nop.w
 800cd98:	00000000 	.word	0x00000000
 800cd9c:	40dd4c00 	.word	0x40dd4c00
 800cda0:	00000000 	.word	0x00000000
 800cda4:	40fe8480 	.word	0x40fe8480

0800cda8 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	ed87 0b02 	vstr	d0, [r7, #8]
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800cdb6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800cdba:	617b      	str	r3, [r7, #20]

    while (power != 0)
 800cdbc:	e00e      	b.n	800cddc <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 800cdbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdc2:	f7f3 ff11 	bl	8000be8 <__aeabi_d2f>
 800cdc6:	ee07 0a10 	vmov	s14, r0
 800cdca:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cdd2:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d1ed      	bne.n	800cdbe <pow_bmp3+0x16>
    }

    return pow_output;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	ee07 3a90 	vmov	s15, r3
}
 800cde8:	eeb0 0a67 	vmov.f32	s0, s15
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	4013      	ands	r3, r2
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	73fb      	strb	r3, [r7, #15]
 800ce0e:	e001      	b.n	800ce14 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3714      	adds	r7, #20
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr

0800ce22 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800ce22:	b480      	push	{r7}
 800ce24:	b085      	sub	sp, #20
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d00f      	beq.n	800ce50 <null_ptr_check+0x2e>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <null_ptr_check+0x2e>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <null_ptr_check+0x2e>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d003      	beq.n	800ce50 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800ce50:	23ff      	movs	r3, #255	@ 0xff
 800ce52:	73fb      	strb	r3, [r7, #15]
 800ce54:	e001      	b.n	800ce5a <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ce5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800ce74:	2303      	movs	r3, #3
 800ce76:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800ce78:	f107 010d 	add.w	r1, r7, #13
 800ce7c:	7bb8      	ldrb	r0, [r7, #14]
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f7fe fc1c 	bl	800b6be <bmp3_get_regs>
 800ce86:	4603      	mov	r3, r0
 800ce88:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800ce8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d128      	bne.n	800cee4 <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 800ce92:	7b7b      	ldrb	r3, [r7, #13]
 800ce94:	111b      	asrs	r3, r3, #4
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 800cea2:	7b7b      	ldrb	r3, [r7, #13]
 800cea4:	115b      	asrs	r3, r3, #5
 800cea6:	b2db      	uxtb	r3, r3
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 800ceb2:	7b7b      	ldrb	r3, [r7, #13]
 800ceb4:	119b      	asrs	r3, r3, #6
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 800cec2:	2310      	movs	r3, #16
 800cec4:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800cec6:	f107 010d 	add.w	r1, r7, #13
 800ceca:	7bb8      	ldrb	r0, [r7, #14]
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2201      	movs	r2, #1
 800ced0:	f7fe fbf5 	bl	800b6be <bmp3_get_regs>
 800ced4:	4603      	mov	r3, r0
 800ced6:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 800ced8:	7b7b      	ldrb	r3, [r7, #13]
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 800cee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 800cefa:	f107 010e 	add.w	r1, r7, #14
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	2201      	movs	r2, #1
 800cf02:	2011      	movs	r0, #17
 800cf04:	f7fe fbdb 	bl	800b6be <bmp3_get_regs>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800cf0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d115      	bne.n	800cf40 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800cf14:	7bbb      	ldrb	r3, [r7, #14]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	b2da      	uxtb	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 800cf20:	7bbb      	ldrb	r3, [r7, #14]
 800cf22:	105b      	asrs	r3, r3, #1
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 800cf30:	7bbb      	ldrb	r3, [r7, #14]
 800cf32:	10db      	asrs	r3, r3, #3
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	f003 0301 	and.w	r3, r3, #1
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 800cf40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800cf56:	f107 010e 	add.w	r1, r7, #14
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	2002      	movs	r0, #2
 800cf60:	f7fe fbad 	bl	800b6be <bmp3_get_regs>
 800cf64:	4603      	mov	r3, r0
 800cf66:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800cf68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d115      	bne.n	800cf9c <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	f003 0301 	and.w	r3, r3, #1
 800cf76:	b2da      	uxtb	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	105b      	asrs	r3, r3, #1
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	109b      	asrs	r3, r3, #2
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 800cf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <bmp388_read>:
static BMP3_INTF_RET_TYPE get_bmp388_sensor_data(struct bmp3_dev*);

static volatile uint32_t counter = 0U;

BMP3_INTF_RET_TYPE bmp388_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b08b      	sub	sp, #44	@ 0x2c
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	607a      	str	r2, [r7, #4]
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(intf->hi2c, (intf->dev_addr << 1U), reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	6858      	ldr	r0, [r3, #4]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	7a1b      	ldrb	r3, [r3, #8]
 800cfc4:	005b      	lsls	r3, r3, #1
 800cfc6:	b299      	uxth	r1, r3
 800cfc8:	7bfb      	ldrb	r3, [r7, #15]
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f04f 34ff 	mov.w	r4, #4294967295
 800cfd4:	9402      	str	r4, [sp, #8]
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f7f5 fdf5 	bl	8002bcc <HAL_I2C_Mem_Read>
	return ( BMP3_INTF_RET_SUCCESS );
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd90      	pop	{r4, r7, pc}

0800cfec <bmp388_write>:

BMP3_INTF_RET_TYPE bmp388_write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len,void *intf_ptr)
{
 800cfec:	b590      	push	{r4, r7, lr}
 800cfee:	b08b      	sub	sp, #44	@ 0x2c
 800cff0:	af04      	add	r7, sp, #16
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	607a      	str	r2, [r7, #4]
 800cff6:	603b      	str	r3, [r7, #0]
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Write(intf->hi2c, ((intf->dev_addr << 1U) | 0x1U), reg_addr, 1U, (uint8_t*)read_data, len, HAL_MAX_DELAY);
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	6858      	ldr	r0, [r3, #4]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	7a1b      	ldrb	r3, [r3, #8]
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	f043 0301 	orr.w	r3, r3, #1
 800d010:	b299      	uxth	r1, r3
 800d012:	7bfb      	ldrb	r3, [r7, #15]
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f04f 34ff 	mov.w	r4, #4294967295
 800d01e:	9402      	str	r4, [sp, #8]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	2301      	movs	r3, #1
 800d028:	f7f5 fcd6 	bl	80029d8 <HAL_I2C_Mem_Write>
	return ( BMP3_INTF_RET_SUCCESS );
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	bd90      	pop	{r4, r7, pc}
	...

0800d038 <delay_us>:

void delay_us(uint32_t period, void *intf_ptr)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	60fb      	str	r3, [r7, #12]

	intf_ptr = (struct bmp388_interface *)intf_ptr;

	HAL_TIM_Base_Start_IT(intf->htim);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7f8 faca 	bl	80055e4 <HAL_TIM_Base_Start_IT>

	while(counter != period);
 800d050:	bf00      	nop
 800d052:	4b08      	ldr	r3, [pc, #32]	@ (800d074 <delay_us+0x3c>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d1fa      	bne.n	800d052 <delay_us+0x1a>

	HAL_TIM_Base_Stop_IT(intf->htim);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4618      	mov	r0, r3
 800d062:	f7f8 fb2f 	bl	80056c4 <HAL_TIM_Base_Stop_IT>

	counter = 0U;
 800d066:	4b03      	ldr	r3, [pc, #12]	@ (800d074 <delay_us+0x3c>)
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
}
 800d06c:	bf00      	nop
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	200006e0 	.word	0x200006e0

0800d078 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 800d086:	f7f4 fdb9 	bl	8001bfc <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b07      	ldr	r3, [pc, #28]	@ (800d0ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	429a      	cmp	r2, r3
 800d096:	d104      	bne.n	800d0a2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 800d098:	4b05      	ldr	r3, [pc, #20]	@ (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	4a04      	ldr	r2, [pc, #16]	@ (800d0b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800d0a0:	6013      	str	r3, [r2, #0]
	}

}
 800d0a2:	bf00      	nop
 800d0a4:	3708      	adds	r7, #8
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20000000 	.word	0x20000000
 800d0b0:	200006e0 	.word	0x200006e0

0800d0b4 <bmp388_interface_init>:

BMP3_INTF_RET_TYPE bmp388_interface_init(struct bmp3_dev *bmp388,struct bmp388_interface *bmp388_intf)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b088      	sub	sp, #32
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( bmp388_intf == NULL ) )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <bmp388_interface_init+0x16>
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <bmp388_interface_init+0x1a>
	{
		Error_Handler();
 800d0ca:	f7f4 fd97 	bl	8001bfc <Error_Handler>
	}

	struct bmp3_settings settings = { 0 };
 800d0ce:	f107 030c 	add.w	r3, r7, #12
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	605a      	str	r2, [r3, #4]
 800d0d8:	609a      	str	r2, [r3, #8]
 800d0da:	731a      	strb	r2, [r3, #12]
	int8_t rslt = 0U;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	77fb      	strb	r3, [r7, #31]
	uint16_t settings_sel = 0U;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	83bb      	strh	r3, [r7, #28]

	bmp388->intf = BMP3_I2C_INTF;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	bmp388->read = bmp388_read;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a39      	ldr	r2, [pc, #228]	@ (800d1d4 <bmp388_interface_init+0x120>)
 800d0f0:	635a      	str	r2, [r3, #52]	@ 0x34
	bmp388->write = bmp388_write;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a38      	ldr	r2, [pc, #224]	@ (800d1d8 <bmp388_interface_init+0x124>)
 800d0f6:	639a      	str	r2, [r3, #56]	@ 0x38
	bmp388->delay_us = delay_us;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	4a38      	ldr	r2, [pc, #224]	@ (800d1dc <bmp388_interface_init+0x128>)
 800d0fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	bmp388->intf_ptr = bmp388_intf;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	62da      	str	r2, [r3, #44]	@ 0x2c

	rslt = bmp3_selftest_check(bmp388);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f9d7 	bl	800d4b8 <bmp3_selftest_check>
 800d10a:	4603      	mov	r3, r0
 800d10c:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800d10e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d004      	beq.n	800d120 <bmp388_interface_init+0x6c>
	{
		printf("BMP388 self-test failure !\n");
 800d116:	4832      	ldr	r0, [pc, #200]	@ (800d1e0 <bmp388_interface_init+0x12c>)
 800d118:	f001 ffe0 	bl	800f0dc <puts>
		Error_Handler();
 800d11c:	f7f4 fd6e 	bl	8001bfc <Error_Handler>
	}

	printf("BMP388 self-test success !\n");
 800d120:	4830      	ldr	r0, [pc, #192]	@ (800d1e4 <bmp388_interface_init+0x130>)
 800d122:	f001 ffdb 	bl	800f0dc <puts>

	rslt = bmp3_init(bmp388);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe fa7e 	bl	800b628 <bmp3_init>
 800d12c:	4603      	mov	r3, r0
 800d12e:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800d130:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <bmp388_interface_init+0x8e>
	{
		printf("BMP388 initialization failure !\n");
 800d138:	482b      	ldr	r0, [pc, #172]	@ (800d1e8 <bmp388_interface_init+0x134>)
 800d13a:	f001 ffcf 	bl	800f0dc <puts>
		Error_Handler();
 800d13e:	f7f4 fd5d 	bl	8001bfc <Error_Handler>
	}

	printf("BMP388 initialization success !\n");
 800d142:	482a      	ldr	r0, [pc, #168]	@ (800d1ec <bmp388_interface_init+0x138>)
 800d144:	f001 ffca 	bl	800f0dc <puts>
	printf("Chip ID 0x%X\n" , bmp388->chip_id);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d14e:	4619      	mov	r1, r3
 800d150:	4827      	ldr	r0, [pc, #156]	@ (800d1f0 <bmp388_interface_init+0x13c>)
 800d152:	f001 ff5b 	bl	800f00c <iprintf>

	settings.press_en = BMP3_ENABLE;
 800d156:	2301      	movs	r3, #1
 800d158:	737b      	strb	r3, [r7, #13]
	settings.temp_en = BMP3_ENABLE;
 800d15a:	2301      	movs	r3, #1
 800d15c:	73bb      	strb	r3, [r7, #14]
	 *		- IIR FILTER COEFFICIENT 3					- 2			- BMP3_IIR_FILTER_COEFF_3
	 *		- ODR 										- 50Hz		- BMP3_ODR_50_HZ
	 *		- RMS NOISE[cm]								- 11
	 */

	settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_3;
 800d15e:	2302      	movs	r3, #2
 800d160:	747b      	strb	r3, [r7, #17]
	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 800d162:	2303      	movs	r3, #3
 800d164:	73fb      	strb	r3, [r7, #15]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800d166:	2300      	movs	r3, #0
 800d168:	743b      	strb	r3, [r7, #16]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 800d16a:	2302      	movs	r3, #2
 800d16c:	74bb      	strb	r3, [r7, #18]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 800d16e:	23fe      	movs	r3, #254	@ 0xfe
 800d170:	83bb      	strh	r3, [r7, #28]
				 BMP3_SEL_DRDY_EN | BMP3_SEL_IIR_FILTER;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, bmp388);
 800d172:	8bbb      	ldrh	r3, [r7, #28]
 800d174:	f107 010c 	add.w	r1, r7, #12
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fbcc 	bl	800b918 <bmp3_set_sensor_settings>
 800d180:	4603      	mov	r3, r0
 800d182:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800d184:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d004      	beq.n	800d196 <bmp388_interface_init+0xe2>
	{
		printf("BMP388 set sensor settings failure !\n");
 800d18c:	4819      	ldr	r0, [pc, #100]	@ (800d1f4 <bmp388_interface_init+0x140>)
 800d18e:	f001 ffa5 	bl	800f0dc <puts>
		Error_Handler();
 800d192:	f7f4 fd33 	bl	8001bfc <Error_Handler>
	}

	printf("BMP388 set sensor settings success !\n");
 800d196:	4818      	ldr	r0, [pc, #96]	@ (800d1f8 <bmp388_interface_init+0x144>)
 800d198:	f001 ffa0 	bl	800f0dc <puts>

	settings.op_mode = BMP3_MODE_NORMAL;
 800d19c:	2303      	movs	r3, #3
 800d19e:	733b      	strb	r3, [r7, #12]
	rslt = bmp3_set_op_mode(&settings, bmp388);
 800d1a0:	f107 030c 	add.w	r3, r7, #12
 800d1a4:	6879      	ldr	r1, [r7, #4]
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fc79 	bl	800ba9e <bmp3_set_op_mode>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800d1b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <bmp388_interface_init+0x10e>
	{
		printf("BMP388 sensor op mode failure !\n");
 800d1b8:	4810      	ldr	r0, [pc, #64]	@ (800d1fc <bmp388_interface_init+0x148>)
 800d1ba:	f001 ff8f 	bl	800f0dc <puts>
		Error_Handler();
 800d1be:	f7f4 fd1d 	bl	8001bfc <Error_Handler>
	}

	printf("BMP388 sensor op mode success !\n");
 800d1c2:	480f      	ldr	r0, [pc, #60]	@ (800d200 <bmp388_interface_init+0x14c>)
 800d1c4:	f001 ff8a 	bl	800f0dc <puts>

	return ( BMP3_INTF_RET_SUCCESS );
 800d1c8:	2300      	movs	r3, #0

}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3720      	adds	r7, #32
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	0800cfa9 	.word	0x0800cfa9
 800d1d8:	0800cfed 	.word	0x0800cfed
 800d1dc:	0800d039 	.word	0x0800d039
 800d1e0:	08012f28 	.word	0x08012f28
 800d1e4:	08012f44 	.word	0x08012f44
 800d1e8:	08012f60 	.word	0x08012f60
 800d1ec:	08012f80 	.word	0x08012f80
 800d1f0:	08012fa0 	.word	0x08012fa0
 800d1f4:	08012fb0 	.word	0x08012fb0
 800d1f8:	08012fd8 	.word	0x08012fd8
 800d1fc:	08013000 	.word	0x08013000
 800d200:	08013020 	.word	0x08013020

0800d204 <get_bmp388_sensor_data>:

static BMP3_INTF_RET_TYPE get_bmp388_sensor_data(struct bmp3_dev *bmp388)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	if( ( bmp388 == NULL ) )
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <get_bmp388_sensor_data+0x12>
	{
		Error_Handler();
 800d212:	f7f4 fcf3 	bl	8001bfc <Error_Handler>
	}

	struct bmp3_status status = { { 0 } };
 800d216:	f107 030c 	add.w	r3, r7, #12
 800d21a:	2200      	movs	r2, #0
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	605a      	str	r2, [r3, #4]
 800d220:	811a      	strh	r2, [r3, #8]
	int8_t rslt = 0U;
 800d222:	2300      	movs	r3, #0
 800d224:	75fb      	strb	r3, [r7, #23]

	rslt = bmp3_get_status(&status, bmp388);
 800d226:	f107 030c 	add.w	r3, r7, #12
 800d22a:	6879      	ldr	r1, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fe fbc1 	bl	800b9b4 <bmp3_get_status>
 800d232:	4603      	mov	r3, r0
 800d234:	75fb      	strb	r3, [r7, #23]

	if ( rslt !=  BMP3_OK )
 800d236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d004      	beq.n	800d248 <get_bmp388_sensor_data+0x44>
	{
		  printf("BMP388 sensor get status failure !\n");
 800d23e:	4819      	ldr	r0, [pc, #100]	@ (800d2a4 <get_bmp388_sensor_data+0xa0>)
 800d240:	f001 ff4c 	bl	800f0dc <puts>
		  Error_Handler();
 800d244:	f7f4 fcda 	bl	8001bfc <Error_Handler>
	}

	/* Read temperature and pressure data iteratively based on data ready interrupt */
	if ( (rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE) )
 800d248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d124      	bne.n	800d29a <get_bmp388_sensor_data+0x96>
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d121      	bne.n	800d29a <get_bmp388_sensor_data+0x96>
		   * First parameter indicates the type of data to be read
		   * BMP3_PRESS_TEMP : To read pressure and temperature data
		   * BMP3_TEMP       : To read only temperature data
		   * BMP3_PRESS      : To read only pressure data
		   */
		  rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, &bmp388->pressure_data , bmp388);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	4619      	mov	r1, r3
 800d25c:	2003      	movs	r0, #3
 800d25e:	f7fe fc92 	bl	800bb86 <bmp3_get_sensor_data>
 800d262:	4603      	mov	r3, r0
 800d264:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800d266:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d004      	beq.n	800d278 <get_bmp388_sensor_data+0x74>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800d26e:	480d      	ldr	r0, [pc, #52]	@ (800d2a4 <get_bmp388_sensor_data+0xa0>)
 800d270:	f001 ff34 	bl	800f0dc <puts>
			  Error_Handler();
 800d274:	f7f4 fcc2 	bl	8001bfc <Error_Handler>
		  }

		  /* NOTE : Read status register again to clear data ready interrupt status */
		  rslt = bmp3_get_status(&status, bmp388);
 800d278:	f107 030c 	add.w	r3, r7, #12
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fb98 	bl	800b9b4 <bmp3_get_status>
 800d284:	4603      	mov	r3, r0
 800d286:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800d288:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d004      	beq.n	800d29a <get_bmp388_sensor_data+0x96>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800d290:	4804      	ldr	r0, [pc, #16]	@ (800d2a4 <get_bmp388_sensor_data+0xa0>)
 800d292:	f001 ff23 	bl	800f0dc <puts>
			  Error_Handler();
 800d296:	f7f4 fcb1 	bl	8001bfc <Error_Handler>
		  }
	}

	return ( BMP3_INTF_RET_SUCCESS );
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	08013040 	.word	0x08013040

0800d2a8 <bmp388_calibration>:

BMP3_INTF_RET_TYPE bmp388_calibration(struct bmp3_dev *bmp388,uint32_t sample_count)
{
 800d2a8:	b5b0      	push	{r4, r5, r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( sample_count <= 0U ) )
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d002      	beq.n	800d2be <bmp388_calibration+0x16>
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d101      	bne.n	800d2c2 <bmp388_calibration+0x1a>
	{
		Error_Handler();
 800d2be:	f7f4 fc9d 	bl	8001bfc <Error_Handler>
	}

	/*!< Pressure Calibration >!*/
	uint32_t iter = 0U;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	617b      	str	r3, [r7, #20]
	double calibration_data = 0.0f;
 800d2c6:	f04f 0200 	mov.w	r2, #0
 800d2ca:	f04f 0300 	mov.w	r3, #0
 800d2ce:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while ( iter++ < sample_count )
 800d2d2:	e015      	b.n	800d300 <bmp388_calibration+0x58>
	{
		if ( get_bmp388_sensor_data(bmp388) != BMP3_OK )
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7ff ff95 	bl	800d204 <get_bmp388_sensor_data>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d004      	beq.n	800d2ea <bmp388_calibration+0x42>
		{
			  printf("BMP388 sensor get data failure !\n");
 800d2e0:	483d      	ldr	r0, [pc, #244]	@ (800d3d8 <bmp388_calibration+0x130>)
 800d2e2:	f001 fefb 	bl	800f0dc <puts>
			  Error_Handler();
 800d2e6:	f7f4 fc89 	bl	8001bfc <Error_Handler>
		}

		calibration_data += bmp388->pressure_data.pressure;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d2f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d2f4:	f7f2 ffca 	bl	800028c <__adddf3>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while ( iter++ < sample_count )
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	1c5a      	adds	r2, r3, #1
 800d304:	617a      	str	r2, [r7, #20]
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d8e3      	bhi.n	800d2d4 <bmp388_calibration+0x2c>
	}

	calibration_data /= (double)iter;
 800d30c:	6978      	ldr	r0, [r7, #20]
 800d30e:	f7f3 f8f9 	bl	8000504 <__aeabi_ui2d>
 800d312:	4602      	mov	r2, r0
 800d314:	460b      	mov	r3, r1
 800d316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d31a:	f7f3 fa97 	bl	800084c <__aeabi_ddiv>
 800d31e:	4602      	mov	r2, r0
 800d320:	460b      	mov	r3, r1
 800d322:	e9c7 2302 	strd	r2, r3, [r7, #8]

	bmp388->pressure_data.ground_pressure = calibration_data;
 800d326:	6879      	ldr	r1, [r7, #4]
 800d328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d32c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	/*!< Relativity Altitude Offset Calculation >!*/
	bmp388->pressure_data.relative_offset = 0.0f;
 800d330:	6879      	ldr	r1, [r7, #4]
 800d332:	f04f 0200 	mov.w	r2, #0
 800d336:	f04f 0300 	mov.w	r3, #0
 800d33a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	iter = 0.0f;
 800d33e:	2300      	movs	r3, #0
 800d340:	617b      	str	r3, [r7, #20]

	while ( iter++ < sample_count )
 800d342:	e029      	b.n	800d398 <bmp388_calibration+0xf0>
	{
		if ( get_bmp388_sensor_data(bmp388) != BMP3_OK )
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff ff5d 	bl	800d204 <get_bmp388_sensor_data>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d004      	beq.n	800d35a <bmp388_calibration+0xb2>
		{
			  printf("BMP388 sensor get data failure !\n");
 800d350:	4821      	ldr	r0, [pc, #132]	@ (800d3d8 <bmp388_calibration+0x130>)
 800d352:	f001 fec3 	bl	800f0dc <puts>
			  Error_Handler();
 800d356:	f7f4 fc51 	bl	8001bfc <Error_Handler>
		}

		bmp388->pressure_data.relative_offset += -((bmp388->pressure_data.pressure-bmp388->pressure_data.ground_pressure) / (DENSITY_AIR_KG_M3 * GRAVITY_AIR_KG_MPS2));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d36c:	f7f2 ff8c 	bl	8000288 <__aeabi_dsub>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4610      	mov	r0, r2
 800d376:	4619      	mov	r1, r3
 800d378:	a315      	add	r3, pc, #84	@ (adr r3, 800d3d0 <bmp388_calibration+0x128>)
 800d37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37e:	f7f3 fa65 	bl	800084c <__aeabi_ddiv>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	4620      	mov	r0, r4
 800d388:	4629      	mov	r1, r5
 800d38a:	f7f2 ff7d 	bl	8000288 <__aeabi_dsub>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	e9c1 2306 	strd	r2, r3, [r1, #24]
	while ( iter++ < sample_count )
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	617a      	str	r2, [r7, #20]
 800d39e:	683a      	ldr	r2, [r7, #0]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d8cf      	bhi.n	800d344 <bmp388_calibration+0x9c>
	}

	bmp388->pressure_data.relative_offset /= (double)iter;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800d3aa:	6978      	ldr	r0, [r7, #20]
 800d3ac:	f7f3 f8aa 	bl	8000504 <__aeabi_ui2d>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	4629      	mov	r1, r5
 800d3b8:	f7f3 fa48 	bl	800084c <__aeabi_ddiv>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	6879      	ldr	r1, [r7, #4]
 800d3c2:	e9c1 2306 	strd	r2, r3, [r1, #24]

	return ( BMP3_INTF_RET_SUCCESS );
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3718      	adds	r7, #24
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800d3d0:	170c49c0 	.word	0x170c49c0
 800d3d4:	402808d5 	.word	0x402808d5
 800d3d8:	08013064 	.word	0x08013064
 800d3dc:	00000000 	.word	0x00000000

0800d3e0 <bmp388_get_altitude>:


BMP3_INTF_RET_TYPE bmp388_get_altitude(struct bmp3_dev *bmp388,double alpha)
{
 800d3e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d3e4:	b084      	sub	sp, #16
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	ed87 0b00 	vstr	d0, [r7]
	if ( bmp388 == NULL )
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <bmp388_get_altitude+0x18>
	{
		Error_Handler();
 800d3f4:	f7f4 fc02 	bl	8001bfc <Error_Handler>
	}
	static double LowPassFilteredData = 0.0f;

    if ( get_bmp388_sensor_data(bmp388) != BMP3_OK)
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff ff03 	bl	800d204 <get_bmp388_sensor_data>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <bmp388_get_altitude+0x28>
    {
    	Error_Handler();
 800d404:	f7f4 fbfa 	bl	8001bfc <Error_Handler>
    }

	/*!< Low-Pass Filter 'raw' pressure measurement >!*/
	LowPassFilteredData = (alpha * LowPassFilteredData) + ( (1.0f - alpha) * bmp388->pressure_data.pressure );
 800d408:	4b29      	ldr	r3, [pc, #164]	@ (800d4b0 <bmp388_get_altitude+0xd0>)
 800d40a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d40e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d412:	f7f3 f8f1 	bl	80005f8 <__aeabi_dmul>
 800d416:	4602      	mov	r2, r0
 800d418:	460b      	mov	r3, r1
 800d41a:	4690      	mov	r8, r2
 800d41c:	4699      	mov	r9, r3
 800d41e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d422:	f04f 0000 	mov.w	r0, #0
 800d426:	4923      	ldr	r1, [pc, #140]	@ (800d4b4 <bmp388_get_altitude+0xd4>)
 800d428:	f7f2 ff2e 	bl	8000288 <__aeabi_dsub>
 800d42c:	4602      	mov	r2, r0
 800d42e:	460b      	mov	r3, r1
 800d430:	4610      	mov	r0, r2
 800d432:	4619      	mov	r1, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d43a:	f7f3 f8dd 	bl	80005f8 <__aeabi_dmul>
 800d43e:	4602      	mov	r2, r0
 800d440:	460b      	mov	r3, r1
 800d442:	4640      	mov	r0, r8
 800d444:	4649      	mov	r1, r9
 800d446:	f7f2 ff21 	bl	800028c <__adddf3>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	4918      	ldr	r1, [pc, #96]	@ (800d4b0 <bmp388_get_altitude+0xd0>)
 800d450:	e9c1 2300 	strd	r2, r3, [r1]

	/*!< Compute altitude (relative to initial level) >!*/
	bmp388->pressure_data.relative_altitude = (-(LowPassFilteredData-bmp388->pressure_data.ground_pressure) /\
 800d454:	4b16      	ldr	r3, [pc, #88]	@ (800d4b0 <bmp388_get_altitude+0xd0>)
 800d456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d460:	f7f2 ff12 	bl	8000288 <__aeabi_dsub>
 800d464:	4602      	mov	r2, r0
 800d466:	460b      	mov	r3, r1
 800d468:	4614      	mov	r4, r2
 800d46a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800d46e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4a8 <bmp388_get_altitude+0xc8>)
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	4620      	mov	r0, r4
 800d476:	4629      	mov	r1, r5
 800d478:	f7f3 f9e8 	bl	800084c <__aeabi_ddiv>
 800d47c:	4602      	mov	r2, r0
 800d47e:	460b      	mov	r3, r1
 800d480:	4610      	mov	r0, r2
 800d482:	4619      	mov	r1, r3
									 (DENSITY_AIR_KG_M3 * GRAVITY_AIR_KG_MPS2) - bmp388->pressure_data.relative_offset );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800d48a:	f7f2 fefd 	bl	8000288 <__aeabi_dsub>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
	bmp388->pressure_data.relative_altitude = (-(LowPassFilteredData-bmp388->pressure_data.ground_pressure) /\
 800d492:	68f9      	ldr	r1, [r7, #12]
 800d494:	e9c1 2308 	strd	r2, r3, [r1, #32]

	return ( BMP3_INTF_RET_SUCCESS );
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d4a4:	f3af 8000 	nop.w
 800d4a8:	170c49c0 	.word	0x170c49c0
 800d4ac:	402808d5 	.word	0x402808d5
 800d4b0:	200006e8 	.word	0x200006e8
 800d4b4:	3ff00000 	.word	0x3ff00000

0800d4b8 <bmp3_selftest_check>:

/*!
 * @brief       Self-test API for the BMP38X
 */
int8_t bmp3_selftest_check(struct bmp3_dev *dev)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b092      	sub	sp, #72	@ 0x48
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]

    /* Variable used to select the sensor component */
    uint8_t sensor_comp;

    /* Variable used to store the compensated data */
    struct bmp3_data data = { 0 };
 800d4c0:	f107 0318 	add.w	r3, r7, #24
 800d4c4:	2228      	movs	r2, #40	@ 0x28
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f001 ff09 	bl	800f2e0 <memset>

    /* Used to select the settings user needs to change */
    uint16_t settings_sel;

    /* Reset the sensor */
    rslt = bmp3_soft_reset(dev);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7fe fa9b 	bl	800ba0a <bmp3_soft_reset>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (rslt == BMP3_SENSOR_OK)
 800d4da:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d17c      	bne.n	800d5dc <bmp3_selftest_check+0x124>
    {
        rslt = bmp3_init(dev);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f7fe f8a0 	bl	800b628 <bmp3_init>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        if (rslt == BMP3_E_COMM_FAIL || rslt == BMP3_E_DEV_NOT_FOUND)
 800d4ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d4f2:	f113 0f02 	cmn.w	r3, #2
 800d4f6:	d004      	beq.n	800d502 <bmp3_selftest_check+0x4a>
 800d4f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d4fc:	f113 0f07 	cmn.w	r3, #7
 800d500:	d102      	bne.n	800d508 <bmp3_selftest_check+0x50>
        {
            rslt = BMP3_COMMUNICATION_ERROR_OR_WRONG_DEVICE;
 800d502:	230a      	movs	r3, #10
 800d504:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }

        if (rslt == BMP3_SENSOR_OK)
 800d508:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d105      	bne.n	800d51c <bmp3_selftest_check+0x64>
        {
            rslt = validate_trimming_param(dev);
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f8b7 	bl	800d684 <validate_trimming_param>
 800d516:	4603      	mov	r3, r0
 800d518:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }

        if (rslt == BMP3_SENSOR_OK)
 800d51c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d520:	2b00      	cmp	r3, #0
 800d522:	d140      	bne.n	800d5a6 <bmp3_selftest_check+0xee>
        {
            /* Select the pressure and temperature sensor to be enabled */
        	dev_setting.press_en = BMP3_ENABLE;
 800d524:	2301      	movs	r3, #1
 800d526:	727b      	strb	r3, [r7, #9]
        	dev_setting.temp_en = BMP3_ENABLE;
 800d528:	2301      	movs	r3, #1
 800d52a:	72bb      	strb	r3, [r7, #10]

            /* Select the output data rate and over sampling settings for pressure and temperature */
        	dev_setting.odr_filter.press_os = BMP3_NO_OVERSAMPLING;
 800d52c:	2300      	movs	r3, #0
 800d52e:	72fb      	strb	r3, [r7, #11]
        	dev_setting.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800d530:	2300      	movs	r3, #0
 800d532:	733b      	strb	r3, [r7, #12]
        	dev_setting.odr_filter.odr = BMP3_ODR_25_HZ;
 800d534:	2303      	movs	r3, #3
 800d536:	73bb      	strb	r3, [r7, #14]

            /* Assign the settings which needs to be set in the sensor */
            settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 800d538:	23b6      	movs	r3, #182	@ 0xb6
 800d53a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            rslt = bmp3_set_sensor_settings(settings_sel, &dev_setting,dev);
 800d53e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d542:	f107 0108 	add.w	r1, r7, #8
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe f9e5 	bl	800b918 <bmp3_set_sensor_settings>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            if (rslt == BMP3_SENSOR_OK)
 800d554:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d124      	bne.n	800d5a6 <bmp3_selftest_check+0xee>
            {
            	dev_setting.op_mode = BMP3_MODE_NORMAL;
 800d55c:	2303      	movs	r3, #3
 800d55e:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800d560:	f107 0308 	add.w	r3, r7, #8
 800d564:	6879      	ldr	r1, [r7, #4]
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe fa99 	bl	800ba9e <bmp3_set_op_mode>
 800d56c:	4603      	mov	r3, r0
 800d56e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                if (rslt == BMP3_SENSOR_OK)
 800d572:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d576:	2b00      	cmp	r3, #0
 800d578:	d115      	bne.n	800d5a6 <bmp3_selftest_check+0xee>
                {
                    dev->delay_us(40000, dev->intf_ptr);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d582:	4611      	mov	r1, r2
 800d584:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800d588:	4798      	blx	r3

                    /* Sensor component selection */
                    sensor_comp = BMP3_PRESS | BMP3_TEMP;
 800d58a:	2303      	movs	r3, #3
 800d58c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

                    /* Temperature and Pressure data are read and stored in the bmp3_data instance */
                    rslt = bmp3_get_sensor_data(sensor_comp, &data, dev);
 800d590:	f107 0118 	add.w	r1, r7, #24
 800d594:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe faf3 	bl	800bb86 <bmp3_get_sensor_data>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                }
            }
        }

        if (rslt == BMP3_SENSOR_OK)
 800d5a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d116      	bne.n	800d5dc <bmp3_selftest_check+0x124>
        {
            rslt = analyze_sensor_data(&data);
 800d5ae:	f107 0318 	add.w	r3, r7, #24
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 f818 	bl	800d5e8 <analyze_sensor_data>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

            /* Set the power mode to sleep mode */
            if (rslt == BMP3_SENSOR_OK)
 800d5be:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10a      	bne.n	800d5dc <bmp3_selftest_check+0x124>
            {
            	dev_setting.op_mode = BMP3_MODE_SLEEP;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800d5ca:	f107 0308 	add.w	r3, r7, #8
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fa64 	bl	800ba9e <bmp3_set_op_mode>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }
        }
    }

    return rslt;
 800d5dc:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3748      	adds	r7, #72	@ 0x48
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <analyze_sensor_data>:

/*!
 * @brief  Function to analyze the sensor data
 */
static int8_t analyze_sensor_data(const struct bmp3_data *sens_data)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP3_SENSOR_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]

    if ((sens_data->temperature < BMP3_MIN_TEMPERATURE) || (sens_data->temperature > BMP3_MAX_TEMPERATURE))
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	f04f 0300 	mov.w	r3, #0
 800d602:	f7f3 fa6b 	bl	8000adc <__aeabi_dcmplt>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10a      	bne.n	800d622 <analyze_sensor_data+0x3a>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d612:	f04f 0200 	mov.w	r2, #0
 800d616:	4b1a      	ldr	r3, [pc, #104]	@ (800d680 <analyze_sensor_data+0x98>)
 800d618:	f7f3 fa7e 	bl	8000b18 <__aeabi_dcmpgt>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d001      	beq.n	800d626 <analyze_sensor_data+0x3e>
    {
        rslt = BMP3_IMPLAUSIBLE_TEMPERATURE;
 800d622:	2328      	movs	r3, #40	@ 0x28
 800d624:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMP3_SENSOR_OK)
 800d626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d117      	bne.n	800d65e <analyze_sensor_data+0x76>
    {
        if ((sens_data->pressure < BMP3_MIN_PRESSURE) || (sens_data->pressure > BMP3_MAX_PRESSURE))
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d634:	a30e      	add	r3, pc, #56	@ (adr r3, 800d670 <analyze_sensor_data+0x88>)
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	f7f3 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10a      	bne.n	800d65a <analyze_sensor_data+0x72>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d64a:	a30b      	add	r3, pc, #44	@ (adr r3, 800d678 <analyze_sensor_data+0x90>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	f7f3 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <analyze_sensor_data+0x76>
        {
            rslt = BMP3_IMPLAUSIBLE_PRESSURE;
 800d65a:	2329      	movs	r3, #41	@ 0x29
 800d65c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800d65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	f3af 8000 	nop.w
 800d670:	00000000 	.word	0x00000000
 800d674:	40f5f900 	.word	0x40f5f900
 800d678:	00000000 	.word	0x00000000
 800d67c:	40fadb00 	.word	0x40fadb00
 800d680:	40af4000 	.word	0x40af4000

0800d684 <validate_trimming_param>:

/*
 * @brief Function to verify the trimming parameters
 * */
static int8_t validate_trimming_param(struct bmp3_dev *dev)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	@ 0x28
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t crc = 0xFF;
 800d68c:	23ff      	movs	r3, #255	@ 0xff
 800d68e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t stored_crc;
    uint8_t trim_param[21];
    uint8_t i;

    rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 800d692:	f107 010c 	add.w	r1, r7, #12
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2215      	movs	r2, #21
 800d69a:	2031      	movs	r0, #49	@ 0x31
 800d69c:	f7fe f80f 	bl	800b6be <bmp3_get_regs>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMP3_SENSOR_OK)
 800d6a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d133      	bne.n	800d716 <validate_trimming_param+0x92>
    {
        for (i = 0; i < 21; i++)
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d6b4:	e013      	b.n	800d6de <validate_trimming_param+0x5a>
        {
            crc = (uint8_t)cal_crc(crc, trim_param[i]);
 800d6b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d6ba:	3328      	adds	r3, #40	@ 0x28
 800d6bc:	443b      	add	r3, r7
 800d6be:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800d6c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f82a 	bl	800d722 <cal_crc>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (i = 0; i < 21; i++)
 800d6d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d6d8:	3301      	adds	r3, #1
 800d6da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d6de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d6e2:	2b14      	cmp	r3, #20
 800d6e4:	d9e7      	bls.n	800d6b6 <validate_trimming_param+0x32>
        }

        crc = (crc ^ 0xFF);
 800d6e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d6ea:	43db      	mvns	r3, r3
 800d6ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 800d6f0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	2030      	movs	r0, #48	@ 0x30
 800d6fa:	f7fd ffe0 	bl	800b6be <bmp3_get_regs>
 800d6fe:	4603      	mov	r3, r0
 800d700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (stored_crc != crc)
 800d704:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d708:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d002      	beq.n	800d716 <validate_trimming_param+0x92>
        {
            rslt = BMP3_TRIMMING_DATA_OUT_OF_BOUND;
 800d710:	2314      	movs	r3, #20
 800d712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 800d716:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3728      	adds	r7, #40	@ 0x28
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <cal_crc>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data)
{
 800d722:	b480      	push	{r7}
 800d724:	b085      	sub	sp, #20
 800d726:	af00      	add	r7, sp, #0
 800d728:	4603      	mov	r3, r0
 800d72a:	460a      	mov	r2, r1
 800d72c:	71fb      	strb	r3, [r7, #7]
 800d72e:	4613      	mov	r3, r2
 800d730:	71bb      	strb	r3, [r7, #6]
    int8_t poly = 0x1D;
 800d732:	231d      	movs	r3, #29
 800d734:	737b      	strb	r3, [r7, #13]
    int8_t var2;
    uint8_t i;

    for (i = 0; i < 8; i++)
 800d736:	2300      	movs	r3, #0
 800d738:	73bb      	strb	r3, [r7, #14]
 800d73a:	e01c      	b.n	800d776 <cal_crc+0x54>
    {
        if ((seed & 0x80) ^ (data & 0x80))
 800d73c:	79fa      	ldrb	r2, [r7, #7]
 800d73e:	79bb      	ldrb	r3, [r7, #6]
 800d740:	4053      	eors	r3, r2
 800d742:	b2db      	uxtb	r3, r3
 800d744:	b25b      	sxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	da02      	bge.n	800d750 <cal_crc+0x2e>
        {
            var2 = 1;
 800d74a:	2301      	movs	r3, #1
 800d74c:	73fb      	strb	r3, [r7, #15]
 800d74e:	e001      	b.n	800d754 <cal_crc+0x32>
        }
        else
        {
            var2 = 0;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
        }

        seed = (seed & 0x7F) << 1;
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	71fb      	strb	r3, [r7, #7]
        data = (data & 0x7F) << 1;
 800d75a:	79bb      	ldrb	r3, [r7, #6]
 800d75c:	005b      	lsls	r3, r3, #1
 800d75e:	71bb      	strb	r3, [r7, #6]
        seed = seed ^ (uint8_t)(poly * var2);
 800d760:	7b7a      	ldrb	r2, [r7, #13]
 800d762:	7bfb      	ldrb	r3, [r7, #15]
 800d764:	fb12 f303 	smulbb	r3, r2, r3
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	4053      	eors	r3, r2
 800d76e:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	3301      	adds	r3, #1
 800d774:	73bb      	strb	r3, [r7, #14]
 800d776:	7bbb      	ldrb	r3, [r7, #14]
 800d778:	2b07      	cmp	r3, #7
 800d77a:	d9df      	bls.n	800d73c <cal_crc+0x1a>
    }

    return (int8_t)seed;
 800d77c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3714      	adds	r7, #20
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d790:	2200      	movs	r2, #0
 800d792:	4912      	ldr	r1, [pc, #72]	@ (800d7dc <MX_USB_DEVICE_Init+0x50>)
 800d794:	4812      	ldr	r0, [pc, #72]	@ (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d796:	f7fa fcf1 	bl	800817c <USBD_Init>
 800d79a:	4603      	mov	r3, r0
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d001      	beq.n	800d7a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d7a0:	f7f4 fa2c 	bl	8001bfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d7a4:	490f      	ldr	r1, [pc, #60]	@ (800d7e4 <MX_USB_DEVICE_Init+0x58>)
 800d7a6:	480e      	ldr	r0, [pc, #56]	@ (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7a8:	f7fa fd18 	bl	80081dc <USBD_RegisterClass>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7b2:	f7f4 fa23 	bl	8001bfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d7b6:	490c      	ldr	r1, [pc, #48]	@ (800d7e8 <MX_USB_DEVICE_Init+0x5c>)
 800d7b8:	4809      	ldr	r0, [pc, #36]	@ (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7ba:	f7fa fc0f 	bl	8007fdc <USBD_CDC_RegisterInterface>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7c4:	f7f4 fa1a 	bl	8001bfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d7c8:	4805      	ldr	r0, [pc, #20]	@ (800d7e0 <MX_USB_DEVICE_Init+0x54>)
 800d7ca:	f7fa fd3d 	bl	8008248 <USBD_Start>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d7d4:	f7f4 fa12 	bl	8001bfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	200000b8 	.word	0x200000b8
 800d7e0:	200006f0 	.word	0x200006f0
 800d7e4:	20000024 	.word	0x20000024
 800d7e8:	200000a4 	.word	0x200000a4

0800d7ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	4905      	ldr	r1, [pc, #20]	@ (800d808 <CDC_Init_FS+0x1c>)
 800d7f4:	4805      	ldr	r0, [pc, #20]	@ (800d80c <CDC_Init_FS+0x20>)
 800d7f6:	f7fa fc0b 	bl	8008010 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d7fa:	4905      	ldr	r1, [pc, #20]	@ (800d810 <CDC_Init_FS+0x24>)
 800d7fc:	4803      	ldr	r0, [pc, #12]	@ (800d80c <CDC_Init_FS+0x20>)
 800d7fe:	f7fa fc29 	bl	8008054 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d802:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d804:	4618      	mov	r0, r3
 800d806:	bd80      	pop	{r7, pc}
 800d808:	200011cc 	.word	0x200011cc
 800d80c:	200006f0 	.word	0x200006f0
 800d810:	200009cc 	.word	0x200009cc

0800d814 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d818:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	4603      	mov	r3, r0
 800d82c:	6039      	str	r1, [r7, #0]
 800d82e:	71fb      	strb	r3, [r7, #7]
 800d830:	4613      	mov	r3, r2
 800d832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	2b23      	cmp	r3, #35	@ 0x23
 800d838:	d84a      	bhi.n	800d8d0 <CDC_Control_FS+0xac>
 800d83a:	a201      	add	r2, pc, #4	@ (adr r2, 800d840 <CDC_Control_FS+0x1c>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d8d1 	.word	0x0800d8d1
 800d844:	0800d8d1 	.word	0x0800d8d1
 800d848:	0800d8d1 	.word	0x0800d8d1
 800d84c:	0800d8d1 	.word	0x0800d8d1
 800d850:	0800d8d1 	.word	0x0800d8d1
 800d854:	0800d8d1 	.word	0x0800d8d1
 800d858:	0800d8d1 	.word	0x0800d8d1
 800d85c:	0800d8d1 	.word	0x0800d8d1
 800d860:	0800d8d1 	.word	0x0800d8d1
 800d864:	0800d8d1 	.word	0x0800d8d1
 800d868:	0800d8d1 	.word	0x0800d8d1
 800d86c:	0800d8d1 	.word	0x0800d8d1
 800d870:	0800d8d1 	.word	0x0800d8d1
 800d874:	0800d8d1 	.word	0x0800d8d1
 800d878:	0800d8d1 	.word	0x0800d8d1
 800d87c:	0800d8d1 	.word	0x0800d8d1
 800d880:	0800d8d1 	.word	0x0800d8d1
 800d884:	0800d8d1 	.word	0x0800d8d1
 800d888:	0800d8d1 	.word	0x0800d8d1
 800d88c:	0800d8d1 	.word	0x0800d8d1
 800d890:	0800d8d1 	.word	0x0800d8d1
 800d894:	0800d8d1 	.word	0x0800d8d1
 800d898:	0800d8d1 	.word	0x0800d8d1
 800d89c:	0800d8d1 	.word	0x0800d8d1
 800d8a0:	0800d8d1 	.word	0x0800d8d1
 800d8a4:	0800d8d1 	.word	0x0800d8d1
 800d8a8:	0800d8d1 	.word	0x0800d8d1
 800d8ac:	0800d8d1 	.word	0x0800d8d1
 800d8b0:	0800d8d1 	.word	0x0800d8d1
 800d8b4:	0800d8d1 	.word	0x0800d8d1
 800d8b8:	0800d8d1 	.word	0x0800d8d1
 800d8bc:	0800d8d1 	.word	0x0800d8d1
 800d8c0:	0800d8d1 	.word	0x0800d8d1
 800d8c4:	0800d8d1 	.word	0x0800d8d1
 800d8c8:	0800d8d1 	.word	0x0800d8d1
 800d8cc:	0800d8d1 	.word	0x0800d8d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d8d0:	bf00      	nop
  }

  return (USBD_OK);
 800d8d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	370c      	adds	r7, #12
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8de:	4770      	bx	lr

0800d8e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4805      	ldr	r0, [pc, #20]	@ (800d904 <CDC_Receive_FS+0x24>)
 800d8ee:	f7fa fbb1 	bl	8008054 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d8f2:	4804      	ldr	r0, [pc, #16]	@ (800d904 <CDC_Receive_FS+0x24>)
 800d8f4:	f7fa fc0c 	bl	8008110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d8f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	200006f0 	.word	0x200006f0

0800d908 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d918:	4b0d      	ldr	r3, [pc, #52]	@ (800d950 <CDC_Transmit_FS+0x48>)
 800d91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d91e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d926:	2b00      	cmp	r3, #0
 800d928:	d001      	beq.n	800d92e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d92a:	2301      	movs	r3, #1
 800d92c:	e00b      	b.n	800d946 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d92e:	887b      	ldrh	r3, [r7, #2]
 800d930:	461a      	mov	r2, r3
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	4806      	ldr	r0, [pc, #24]	@ (800d950 <CDC_Transmit_FS+0x48>)
 800d936:	f7fa fb6b 	bl	8008010 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d93a:	4805      	ldr	r0, [pc, #20]	@ (800d950 <CDC_Transmit_FS+0x48>)
 800d93c:	f7fa fba8 	bl	8008090 <USBD_CDC_TransmitPacket>
 800d940:	4603      	mov	r3, r0
 800d942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d944:	7bfb      	ldrb	r3, [r7, #15]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	200006f0 	.word	0x200006f0

0800d954 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d954:	b480      	push	{r7}
 800d956:	b087      	sub	sp, #28
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	371c      	adds	r7, #28
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
	...

0800d978 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d978:	b480      	push	{r7}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	4603      	mov	r3, r0
 800d980:	6039      	str	r1, [r7, #0]
 800d982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	2212      	movs	r2, #18
 800d988:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d98a:	4b03      	ldr	r3, [pc, #12]	@ (800d998 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr
 800d998:	200000d4 	.word	0x200000d4

0800d99c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	6039      	str	r1, [r7, #0]
 800d9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2204      	movs	r2, #4
 800d9ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d9ae:	4b03      	ldr	r3, [pc, #12]	@ (800d9bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	200000e8 	.word	0x200000e8

0800d9c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d9cc:	79fb      	ldrb	r3, [r7, #7]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d105      	bne.n	800d9de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	4907      	ldr	r1, [pc, #28]	@ (800d9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d9d6:	4808      	ldr	r0, [pc, #32]	@ (800d9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d9d8:	f7fb fde6 	bl	80095a8 <USBD_GetString>
 800d9dc:	e004      	b.n	800d9e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	4904      	ldr	r1, [pc, #16]	@ (800d9f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800d9e2:	4805      	ldr	r0, [pc, #20]	@ (800d9f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800d9e4:	f7fb fde0 	bl	80095a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d9e8:	4b02      	ldr	r3, [pc, #8]	@ (800d9f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	200019cc 	.word	0x200019cc
 800d9f8:	08013088 	.word	0x08013088

0800d9fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	4603      	mov	r3, r0
 800da04:	6039      	str	r1, [r7, #0]
 800da06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da08:	683a      	ldr	r2, [r7, #0]
 800da0a:	4904      	ldr	r1, [pc, #16]	@ (800da1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800da0c:	4804      	ldr	r0, [pc, #16]	@ (800da20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800da0e:	f7fb fdcb 	bl	80095a8 <USBD_GetString>
  return USBD_StrDesc;
 800da12:	4b02      	ldr	r3, [pc, #8]	@ (800da1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800da14:	4618      	mov	r0, r3
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	200019cc 	.word	0x200019cc
 800da20:	08013090 	.word	0x08013090

0800da24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	6039      	str	r1, [r7, #0]
 800da2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	221a      	movs	r2, #26
 800da34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800da36:	f000 f843 	bl	800dac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800da3a:	4b02      	ldr	r3, [pc, #8]	@ (800da44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	200000ec 	.word	0x200000ec

0800da48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	6039      	str	r1, [r7, #0]
 800da52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d105      	bne.n	800da66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da5a:	683a      	ldr	r2, [r7, #0]
 800da5c:	4907      	ldr	r1, [pc, #28]	@ (800da7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800da5e:	4808      	ldr	r0, [pc, #32]	@ (800da80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da60:	f7fb fda2 	bl	80095a8 <USBD_GetString>
 800da64:	e004      	b.n	800da70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	4904      	ldr	r1, [pc, #16]	@ (800da7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800da6a:	4805      	ldr	r0, [pc, #20]	@ (800da80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800da6c:	f7fb fd9c 	bl	80095a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da70:	4b02      	ldr	r3, [pc, #8]	@ (800da7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800da72:	4618      	mov	r0, r3
 800da74:	3708      	adds	r7, #8
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	200019cc 	.word	0x200019cc
 800da80:	080130a4 	.word	0x080130a4

0800da84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	4603      	mov	r3, r0
 800da8c:	6039      	str	r1, [r7, #0]
 800da8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d105      	bne.n	800daa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	4907      	ldr	r1, [pc, #28]	@ (800dab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800da9a:	4808      	ldr	r0, [pc, #32]	@ (800dabc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800da9c:	f7fb fd84 	bl	80095a8 <USBD_GetString>
 800daa0:	e004      	b.n	800daac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	4904      	ldr	r1, [pc, #16]	@ (800dab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800daa6:	4805      	ldr	r0, [pc, #20]	@ (800dabc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800daa8:	f7fb fd7e 	bl	80095a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800daac:	4b02      	ldr	r3, [pc, #8]	@ (800dab8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	200019cc 	.word	0x200019cc
 800dabc:	080130b0 	.word	0x080130b0

0800dac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dac6:	4b0f      	ldr	r3, [pc, #60]	@ (800db04 <Get_SerialNum+0x44>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dacc:	4b0e      	ldr	r3, [pc, #56]	@ (800db08 <Get_SerialNum+0x48>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dad2:	4b0e      	ldr	r3, [pc, #56]	@ (800db0c <Get_SerialNum+0x4c>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4413      	add	r3, r2
 800dade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d009      	beq.n	800dafa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dae6:	2208      	movs	r2, #8
 800dae8:	4909      	ldr	r1, [pc, #36]	@ (800db10 <Get_SerialNum+0x50>)
 800daea:	68f8      	ldr	r0, [r7, #12]
 800daec:	f000 f814 	bl	800db18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800daf0:	2204      	movs	r2, #4
 800daf2:	4908      	ldr	r1, [pc, #32]	@ (800db14 <Get_SerialNum+0x54>)
 800daf4:	68b8      	ldr	r0, [r7, #8]
 800daf6:	f000 f80f 	bl	800db18 <IntToUnicode>
  }
}
 800dafa:	bf00      	nop
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	1fff7a10 	.word	0x1fff7a10
 800db08:	1fff7a14 	.word	0x1fff7a14
 800db0c:	1fff7a18 	.word	0x1fff7a18
 800db10:	200000ee 	.word	0x200000ee
 800db14:	200000fe 	.word	0x200000fe

0800db18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db18:	b480      	push	{r7}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	4613      	mov	r3, r2
 800db24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db2a:	2300      	movs	r3, #0
 800db2c:	75fb      	strb	r3, [r7, #23]
 800db2e:	e027      	b.n	800db80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	0f1b      	lsrs	r3, r3, #28
 800db34:	2b09      	cmp	r3, #9
 800db36:	d80b      	bhi.n	800db50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	0f1b      	lsrs	r3, r3, #28
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	4619      	mov	r1, r3
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	440b      	add	r3, r1
 800db48:	3230      	adds	r2, #48	@ 0x30
 800db4a:	b2d2      	uxtb	r2, r2
 800db4c:	701a      	strb	r2, [r3, #0]
 800db4e:	e00a      	b.n	800db66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	0f1b      	lsrs	r3, r3, #28
 800db54:	b2da      	uxtb	r2, r3
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	4619      	mov	r1, r3
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	440b      	add	r3, r1
 800db60:	3237      	adds	r2, #55	@ 0x37
 800db62:	b2d2      	uxtb	r2, r2
 800db64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	011b      	lsls	r3, r3, #4
 800db6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800db6c:	7dfb      	ldrb	r3, [r7, #23]
 800db6e:	005b      	lsls	r3, r3, #1
 800db70:	3301      	adds	r3, #1
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	4413      	add	r3, r2
 800db76:	2200      	movs	r2, #0
 800db78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	3301      	adds	r3, #1
 800db7e:	75fb      	strb	r3, [r7, #23]
 800db80:	7dfa      	ldrb	r2, [r7, #23]
 800db82:	79fb      	ldrb	r3, [r7, #7]
 800db84:	429a      	cmp	r2, r3
 800db86:	d3d3      	bcc.n	800db30 <IntToUnicode+0x18>
  }
}
 800db88:	bf00      	nop
 800db8a:	bf00      	nop
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
	...

0800db98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b08a      	sub	sp, #40	@ 0x28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dba0:	f107 0314 	add.w	r3, r7, #20
 800dba4:	2200      	movs	r2, #0
 800dba6:	601a      	str	r2, [r3, #0]
 800dba8:	605a      	str	r2, [r3, #4]
 800dbaa:	609a      	str	r2, [r3, #8]
 800dbac:	60da      	str	r2, [r3, #12]
 800dbae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dbb8:	d13a      	bne.n	800dc30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbba:	2300      	movs	r3, #0
 800dbbc:	613b      	str	r3, [r7, #16]
 800dbbe:	4b1e      	ldr	r3, [pc, #120]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dbc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbc2:	4a1d      	ldr	r2, [pc, #116]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dbc4:	f043 0301 	orr.w	r3, r3, #1
 800dbc8:	6313      	str	r3, [r2, #48]	@ 0x30
 800dbca:	4b1b      	ldr	r3, [pc, #108]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbce:	f003 0301 	and.w	r3, r3, #1
 800dbd2:	613b      	str	r3, [r7, #16]
 800dbd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dbd6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800dbda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbdc:	2302      	movs	r3, #2
 800dbde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dbe4:	2303      	movs	r3, #3
 800dbe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dbe8:	230a      	movs	r3, #10
 800dbea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dbec:	f107 0314 	add.w	r3, r7, #20
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	4812      	ldr	r0, [pc, #72]	@ (800dc3c <HAL_PCD_MspInit+0xa4>)
 800dbf4:	f7f4 fbf6 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dbfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbfc:	4a0e      	ldr	r2, [pc, #56]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dbfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc02:	6353      	str	r3, [r2, #52]	@ 0x34
 800dc04:	2300      	movs	r3, #0
 800dc06:	60fb      	str	r3, [r7, #12]
 800dc08:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dc0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc0c:	4a0a      	ldr	r2, [pc, #40]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dc0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dc12:	6453      	str	r3, [r2, #68]	@ 0x44
 800dc14:	4b08      	ldr	r3, [pc, #32]	@ (800dc38 <HAL_PCD_MspInit+0xa0>)
 800dc16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc1c:	60fb      	str	r3, [r7, #12]
 800dc1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc20:	2200      	movs	r2, #0
 800dc22:	2100      	movs	r1, #0
 800dc24:	2043      	movs	r0, #67	@ 0x43
 800dc26:	f7f4 fba6 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc2a:	2043      	movs	r0, #67	@ 0x43
 800dc2c:	f7f4 fbbf 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc30:	bf00      	nop
 800dc32:	3728      	adds	r7, #40	@ 0x28
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40023800 	.word	0x40023800
 800dc3c:	40020000 	.word	0x40020000

0800dc40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800dc54:	4619      	mov	r1, r3
 800dc56:	4610      	mov	r0, r2
 800dc58:	f7fa fb43 	bl	80082e2 <USBD_LL_SetupStage>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dc76:	78fa      	ldrb	r2, [r7, #3]
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	00db      	lsls	r3, r3, #3
 800dc7e:	4413      	add	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	440b      	add	r3, r1
 800dc84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	f7fa fb7d 	bl	800838c <USBD_LL_DataOutStage>
}
 800dc92:	bf00      	nop
 800dc94:	3708      	adds	r7, #8
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b082      	sub	sp, #8
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
 800dca2:	460b      	mov	r3, r1
 800dca4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800dcac:	78fa      	ldrb	r2, [r7, #3]
 800dcae:	6879      	ldr	r1, [r7, #4]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	00db      	lsls	r3, r3, #3
 800dcb4:	4413      	add	r3, r2
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	440b      	add	r3, r1
 800dcba:	3320      	adds	r3, #32
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	78fb      	ldrb	r3, [r7, #3]
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	f7fa fc16 	bl	80084f2 <USBD_LL_DataInStage>
}
 800dcc6:	bf00      	nop
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fa fd50 	bl	8008782 <USBD_LL_SOF>
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcea:	b580      	push	{r7, lr}
 800dcec:	b084      	sub	sp, #16
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	79db      	ldrb	r3, [r3, #7]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d102      	bne.n	800dd04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73fb      	strb	r3, [r7, #15]
 800dd02:	e008      	b.n	800dd16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	79db      	ldrb	r3, [r3, #7]
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d102      	bne.n	800dd12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	73fb      	strb	r3, [r7, #15]
 800dd10:	e001      	b.n	800dd16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dd12:	f7f3 ff73 	bl	8001bfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd1c:	7bfa      	ldrb	r2, [r7, #15]
 800dd1e:	4611      	mov	r1, r2
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7fa fcea 	bl	80086fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fa fc92 	bl	8008656 <USBD_LL_Reset>
}
 800dd32:	bf00      	nop
 800dd34:	3710      	adds	r7, #16
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
	...

0800dd3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fa fce5 	bl	800871a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	6812      	ldr	r2, [r2, #0]
 800dd5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd62:	f043 0301 	orr.w	r3, r3, #1
 800dd66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	7adb      	ldrb	r3, [r3, #11]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd70:	4b04      	ldr	r3, [pc, #16]	@ (800dd84 <HAL_PCD_SuspendCallback+0x48>)
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	4a03      	ldr	r2, [pc, #12]	@ (800dd84 <HAL_PCD_SuspendCallback+0x48>)
 800dd76:	f043 0306 	orr.w	r3, r3, #6
 800dd7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	e000ed00 	.word	0xe000ed00

0800dd88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fa fcdb 	bl	8008752 <USBD_LL_Resume>
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b082      	sub	sp, #8
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	460b      	mov	r3, r1
 800ddae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddb6:	78fa      	ldrb	r2, [r7, #3]
 800ddb8:	4611      	mov	r1, r2
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fa fd33 	bl	8008826 <USBD_LL_IsoOUTIncomplete>
}
 800ddc0:	bf00      	nop
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddda:	78fa      	ldrb	r2, [r7, #3]
 800dddc:	4611      	mov	r1, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fa fcef 	bl	80087c2 <USBD_LL_IsoINIncomplete>
}
 800dde4:	bf00      	nop
 800dde6:	3708      	adds	r7, #8
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7fa fd45 	bl	800888a <USBD_LL_DevConnected>
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de16:	4618      	mov	r0, r3
 800de18:	f7fa fd42 	bl	80088a0 <USBD_LL_DevDisconnected>
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d13c      	bne.n	800deae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de34:	4a20      	ldr	r2, [pc, #128]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a1e      	ldr	r2, [pc, #120]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de40:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de44:	4b1c      	ldr	r3, [pc, #112]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800de4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800de4c:	4b1a      	ldr	r3, [pc, #104]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de4e:	2204      	movs	r2, #4
 800de50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800de52:	4b19      	ldr	r3, [pc, #100]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de54:	2202      	movs	r2, #2
 800de56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800de58:	4b17      	ldr	r3, [pc, #92]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de5e:	4b16      	ldr	r3, [pc, #88]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de60:	2202      	movs	r2, #2
 800de62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de64:	4b14      	ldr	r3, [pc, #80]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de66:	2200      	movs	r2, #0
 800de68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de6a:	4b13      	ldr	r3, [pc, #76]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de6c:	2200      	movs	r2, #0
 800de6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de70:	4b11      	ldr	r3, [pc, #68]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de72:	2200      	movs	r2, #0
 800de74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de76:	4b10      	ldr	r3, [pc, #64]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de78:	2200      	movs	r2, #0
 800de7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de7c:	4b0e      	ldr	r3, [pc, #56]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de7e:	2200      	movs	r2, #0
 800de80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800de82:	480d      	ldr	r0, [pc, #52]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de84:	f7f5 fc88 	bl	8003798 <HAL_PCD_Init>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800de8e:	f7f3 feb5 	bl	8001bfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800de92:	2180      	movs	r1, #128	@ 0x80
 800de94:	4808      	ldr	r0, [pc, #32]	@ (800deb8 <USBD_LL_Init+0x94>)
 800de96:	f7f6 feb4 	bl	8004c02 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800de9a:	2240      	movs	r2, #64	@ 0x40
 800de9c:	2100      	movs	r1, #0
 800de9e:	4806      	ldr	r0, [pc, #24]	@ (800deb8 <USBD_LL_Init+0x94>)
 800dea0:	f7f6 fe68 	bl	8004b74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800dea4:	2280      	movs	r2, #128	@ 0x80
 800dea6:	2101      	movs	r1, #1
 800dea8:	4803      	ldr	r0, [pc, #12]	@ (800deb8 <USBD_LL_Init+0x94>)
 800deaa:	f7f6 fe63 	bl	8004b74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	20001bcc 	.word	0x20001bcc

0800debc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f5 fd6f 	bl	80039b6 <HAL_PCD_Start>
 800ded8:	4603      	mov	r3, r0
 800deda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
 800dede:	4618      	mov	r0, r3
 800dee0:	f000 f942 	bl	800e168 <USBD_Get_USB_Status>
 800dee4:	4603      	mov	r3, r0
 800dee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dee8:	7bbb      	ldrb	r3, [r7, #14]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	4608      	mov	r0, r1
 800defc:	4611      	mov	r1, r2
 800defe:	461a      	mov	r2, r3
 800df00:	4603      	mov	r3, r0
 800df02:	70fb      	strb	r3, [r7, #3]
 800df04:	460b      	mov	r3, r1
 800df06:	70bb      	strb	r3, [r7, #2]
 800df08:	4613      	mov	r3, r2
 800df0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df10:	2300      	movs	r3, #0
 800df12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800df1a:	78bb      	ldrb	r3, [r7, #2]
 800df1c:	883a      	ldrh	r2, [r7, #0]
 800df1e:	78f9      	ldrb	r1, [r7, #3]
 800df20:	f7f6 fa43 	bl	80043aa <HAL_PCD_EP_Open>
 800df24:	4603      	mov	r3, r0
 800df26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df28:	7bfb      	ldrb	r3, [r7, #15]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f000 f91c 	bl	800e168 <USBD_Get_USB_Status>
 800df30:	4603      	mov	r3, r0
 800df32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df34:	7bbb      	ldrb	r3, [r7, #14]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df3e:	b580      	push	{r7, lr}
 800df40:	b084      	sub	sp, #16
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	460b      	mov	r3, r1
 800df48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df58:	78fa      	ldrb	r2, [r7, #3]
 800df5a:	4611      	mov	r1, r2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f7f6 fa8e 	bl	800447e <HAL_PCD_EP_Close>
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df66:	7bfb      	ldrb	r3, [r7, #15]
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 f8fd 	bl	800e168 <USBD_Get_USB_Status>
 800df6e:	4603      	mov	r3, r0
 800df70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df72:	7bbb      	ldrb	r3, [r7, #14]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df88:	2300      	movs	r3, #0
 800df8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df96:	78fa      	ldrb	r2, [r7, #3]
 800df98:	4611      	mov	r1, r2
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f6 fb46 	bl	800462c <HAL_PCD_EP_SetStall>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 f8de 	bl	800e168 <USBD_Get_USB_Status>
 800dfac:	4603      	mov	r3, r0
 800dfae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b084      	sub	sp, #16
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dfd4:	78fa      	ldrb	r2, [r7, #3]
 800dfd6:	4611      	mov	r1, r2
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7f6 fb8a 	bl	80046f2 <HAL_PCD_EP_ClrStall>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f000 f8bf 	bl	800e168 <USBD_Get_USB_Status>
 800dfea:	4603      	mov	r3, r0
 800dfec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	460b      	mov	r3, r1
 800e002:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e00a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e00c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e010:	2b00      	cmp	r3, #0
 800e012:	da0b      	bge.n	800e02c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e01a:	68f9      	ldr	r1, [r7, #12]
 800e01c:	4613      	mov	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	4413      	add	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	3316      	adds	r3, #22
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	e00b      	b.n	800e044 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e02c:	78fb      	ldrb	r3, [r7, #3]
 800e02e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e032:	68f9      	ldr	r1, [r7, #12]
 800e034:	4613      	mov	r3, r2
 800e036:	00db      	lsls	r3, r3, #3
 800e038:	4413      	add	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	440b      	add	r3, r1
 800e03e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e042:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e044:	4618      	mov	r0, r3
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e06a:	78fa      	ldrb	r2, [r7, #3]
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f6 f977 	bl	8004362 <HAL_PCD_SetAddress>
 800e074:	4603      	mov	r3, r0
 800e076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e078:	7bfb      	ldrb	r3, [r7, #15]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f000 f874 	bl	800e168 <USBD_Get_USB_Status>
 800e080:	4603      	mov	r3, r0
 800e082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e084:	7bbb      	ldrb	r3, [r7, #14]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b086      	sub	sp, #24
 800e092:	af00      	add	r7, sp, #0
 800e094:	60f8      	str	r0, [r7, #12]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
 800e09a:	460b      	mov	r3, r1
 800e09c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0ac:	7af9      	ldrb	r1, [r7, #11]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	f7f6 fa81 	bl	80045b8 <HAL_PCD_EP_Transmit>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f853 	bl	800e168 <USBD_Get_USB_Status>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	60f8      	str	r0, [r7, #12]
 800e0d8:	607a      	str	r2, [r7, #4]
 800e0da:	603b      	str	r3, [r7, #0]
 800e0dc:	460b      	mov	r3, r1
 800e0de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0ee:	7af9      	ldrb	r1, [r7, #11]
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	f7f6 fa0d 	bl	8004512 <HAL_PCD_EP_Receive>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 f832 	bl	800e168 <USBD_Get_USB_Status>
 800e104:	4603      	mov	r3, r0
 800e106:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e108:	7dbb      	ldrb	r3, [r7, #22]
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3718      	adds	r7, #24
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e112:	b580      	push	{r7, lr}
 800e114:	b082      	sub	sp, #8
 800e116:	af00      	add	r7, sp, #0
 800e118:	6078      	str	r0, [r7, #4]
 800e11a:	460b      	mov	r3, r1
 800e11c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e124:	78fa      	ldrb	r2, [r7, #3]
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f6 fa2d 	bl	8004588 <HAL_PCD_EP_GetRxCount>
 800e12e:	4603      	mov	r3, r0
}
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e140:	4b03      	ldr	r3, [pc, #12]	@ (800e150 <USBD_static_malloc+0x18>)
}
 800e142:	4618      	mov	r0, r3
 800e144:	370c      	adds	r7, #12
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	200020b0 	.word	0x200020b0

0800e154 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]

}
 800e15c:	bf00      	nop
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4603      	mov	r3, r0
 800e170:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e176:	79fb      	ldrb	r3, [r7, #7]
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d817      	bhi.n	800e1ac <USBD_Get_USB_Status+0x44>
 800e17c:	a201      	add	r2, pc, #4	@ (adr r2, 800e184 <USBD_Get_USB_Status+0x1c>)
 800e17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e182:	bf00      	nop
 800e184:	0800e195 	.word	0x0800e195
 800e188:	0800e19b 	.word	0x0800e19b
 800e18c:	0800e1a1 	.word	0x0800e1a1
 800e190:	0800e1a7 	.word	0x0800e1a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]
    break;
 800e198:	e00b      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e19a:	2303      	movs	r3, #3
 800e19c:	73fb      	strb	r3, [r7, #15]
    break;
 800e19e:	e008      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e1a4:	e005      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e1aa:	e002      	b.n	800e1b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e1ac:	2303      	movs	r3, #3
 800e1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e1b0:	bf00      	nop
  }
  return usb_status;
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	3714      	adds	r7, #20
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <__cvt>:
 800e1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c4:	ec57 6b10 	vmov	r6, r7, d0
 800e1c8:	2f00      	cmp	r7, #0
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	bfbb      	ittet	lt
 800e1d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e1d6:	461f      	movlt	r7, r3
 800e1d8:	2300      	movge	r3, #0
 800e1da:	232d      	movlt	r3, #45	@ 0x2d
 800e1dc:	700b      	strb	r3, [r1, #0]
 800e1de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e1e4:	4691      	mov	r9, r2
 800e1e6:	f023 0820 	bic.w	r8, r3, #32
 800e1ea:	bfbc      	itt	lt
 800e1ec:	4632      	movlt	r2, r6
 800e1ee:	4616      	movlt	r6, r2
 800e1f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e1f4:	d005      	beq.n	800e202 <__cvt+0x42>
 800e1f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e1fa:	d100      	bne.n	800e1fe <__cvt+0x3e>
 800e1fc:	3401      	adds	r4, #1
 800e1fe:	2102      	movs	r1, #2
 800e200:	e000      	b.n	800e204 <__cvt+0x44>
 800e202:	2103      	movs	r1, #3
 800e204:	ab03      	add	r3, sp, #12
 800e206:	9301      	str	r3, [sp, #4]
 800e208:	ab02      	add	r3, sp, #8
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	ec47 6b10 	vmov	d0, r6, r7
 800e210:	4653      	mov	r3, sl
 800e212:	4622      	mov	r2, r4
 800e214:	f001 f980 	bl	800f518 <_dtoa_r>
 800e218:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e21c:	4605      	mov	r5, r0
 800e21e:	d119      	bne.n	800e254 <__cvt+0x94>
 800e220:	f019 0f01 	tst.w	r9, #1
 800e224:	d00e      	beq.n	800e244 <__cvt+0x84>
 800e226:	eb00 0904 	add.w	r9, r0, r4
 800e22a:	2200      	movs	r2, #0
 800e22c:	2300      	movs	r3, #0
 800e22e:	4630      	mov	r0, r6
 800e230:	4639      	mov	r1, r7
 800e232:	f7f2 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e236:	b108      	cbz	r0, 800e23c <__cvt+0x7c>
 800e238:	f8cd 900c 	str.w	r9, [sp, #12]
 800e23c:	2230      	movs	r2, #48	@ 0x30
 800e23e:	9b03      	ldr	r3, [sp, #12]
 800e240:	454b      	cmp	r3, r9
 800e242:	d31e      	bcc.n	800e282 <__cvt+0xc2>
 800e244:	9b03      	ldr	r3, [sp, #12]
 800e246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e248:	1b5b      	subs	r3, r3, r5
 800e24a:	4628      	mov	r0, r5
 800e24c:	6013      	str	r3, [r2, #0]
 800e24e:	b004      	add	sp, #16
 800e250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e254:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e258:	eb00 0904 	add.w	r9, r0, r4
 800e25c:	d1e5      	bne.n	800e22a <__cvt+0x6a>
 800e25e:	7803      	ldrb	r3, [r0, #0]
 800e260:	2b30      	cmp	r3, #48	@ 0x30
 800e262:	d10a      	bne.n	800e27a <__cvt+0xba>
 800e264:	2200      	movs	r2, #0
 800e266:	2300      	movs	r3, #0
 800e268:	4630      	mov	r0, r6
 800e26a:	4639      	mov	r1, r7
 800e26c:	f7f2 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e270:	b918      	cbnz	r0, 800e27a <__cvt+0xba>
 800e272:	f1c4 0401 	rsb	r4, r4, #1
 800e276:	f8ca 4000 	str.w	r4, [sl]
 800e27a:	f8da 3000 	ldr.w	r3, [sl]
 800e27e:	4499      	add	r9, r3
 800e280:	e7d3      	b.n	800e22a <__cvt+0x6a>
 800e282:	1c59      	adds	r1, r3, #1
 800e284:	9103      	str	r1, [sp, #12]
 800e286:	701a      	strb	r2, [r3, #0]
 800e288:	e7d9      	b.n	800e23e <__cvt+0x7e>

0800e28a <__exponent>:
 800e28a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e28c:	2900      	cmp	r1, #0
 800e28e:	bfba      	itte	lt
 800e290:	4249      	neglt	r1, r1
 800e292:	232d      	movlt	r3, #45	@ 0x2d
 800e294:	232b      	movge	r3, #43	@ 0x2b
 800e296:	2909      	cmp	r1, #9
 800e298:	7002      	strb	r2, [r0, #0]
 800e29a:	7043      	strb	r3, [r0, #1]
 800e29c:	dd29      	ble.n	800e2f2 <__exponent+0x68>
 800e29e:	f10d 0307 	add.w	r3, sp, #7
 800e2a2:	461d      	mov	r5, r3
 800e2a4:	270a      	movs	r7, #10
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e2ac:	fb07 1416 	mls	r4, r7, r6, r1
 800e2b0:	3430      	adds	r4, #48	@ 0x30
 800e2b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	2c63      	cmp	r4, #99	@ 0x63
 800e2ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2be:	4631      	mov	r1, r6
 800e2c0:	dcf1      	bgt.n	800e2a6 <__exponent+0x1c>
 800e2c2:	3130      	adds	r1, #48	@ 0x30
 800e2c4:	1e94      	subs	r4, r2, #2
 800e2c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e2ca:	1c41      	adds	r1, r0, #1
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	42ab      	cmp	r3, r5
 800e2d0:	d30a      	bcc.n	800e2e8 <__exponent+0x5e>
 800e2d2:	f10d 0309 	add.w	r3, sp, #9
 800e2d6:	1a9b      	subs	r3, r3, r2
 800e2d8:	42ac      	cmp	r4, r5
 800e2da:	bf88      	it	hi
 800e2dc:	2300      	movhi	r3, #0
 800e2de:	3302      	adds	r3, #2
 800e2e0:	4403      	add	r3, r0
 800e2e2:	1a18      	subs	r0, r3, r0
 800e2e4:	b003      	add	sp, #12
 800e2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e2ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e2f0:	e7ed      	b.n	800e2ce <__exponent+0x44>
 800e2f2:	2330      	movs	r3, #48	@ 0x30
 800e2f4:	3130      	adds	r1, #48	@ 0x30
 800e2f6:	7083      	strb	r3, [r0, #2]
 800e2f8:	70c1      	strb	r1, [r0, #3]
 800e2fa:	1d03      	adds	r3, r0, #4
 800e2fc:	e7f1      	b.n	800e2e2 <__exponent+0x58>
	...

0800e300 <_printf_float>:
 800e300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e304:	b08d      	sub	sp, #52	@ 0x34
 800e306:	460c      	mov	r4, r1
 800e308:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e30c:	4616      	mov	r6, r2
 800e30e:	461f      	mov	r7, r3
 800e310:	4605      	mov	r5, r0
 800e312:	f000 ffed 	bl	800f2f0 <_localeconv_r>
 800e316:	6803      	ldr	r3, [r0, #0]
 800e318:	9304      	str	r3, [sp, #16]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7f1 ffa8 	bl	8000270 <strlen>
 800e320:	2300      	movs	r3, #0
 800e322:	930a      	str	r3, [sp, #40]	@ 0x28
 800e324:	f8d8 3000 	ldr.w	r3, [r8]
 800e328:	9005      	str	r0, [sp, #20]
 800e32a:	3307      	adds	r3, #7
 800e32c:	f023 0307 	bic.w	r3, r3, #7
 800e330:	f103 0208 	add.w	r2, r3, #8
 800e334:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e338:	f8d4 b000 	ldr.w	fp, [r4]
 800e33c:	f8c8 2000 	str.w	r2, [r8]
 800e340:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e344:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e348:	9307      	str	r3, [sp, #28]
 800e34a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e34e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e356:	4b9c      	ldr	r3, [pc, #624]	@ (800e5c8 <_printf_float+0x2c8>)
 800e358:	f04f 32ff 	mov.w	r2, #4294967295
 800e35c:	f7f2 fbe6 	bl	8000b2c <__aeabi_dcmpun>
 800e360:	bb70      	cbnz	r0, 800e3c0 <_printf_float+0xc0>
 800e362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e366:	4b98      	ldr	r3, [pc, #608]	@ (800e5c8 <_printf_float+0x2c8>)
 800e368:	f04f 32ff 	mov.w	r2, #4294967295
 800e36c:	f7f2 fbc0 	bl	8000af0 <__aeabi_dcmple>
 800e370:	bb30      	cbnz	r0, 800e3c0 <_printf_float+0xc0>
 800e372:	2200      	movs	r2, #0
 800e374:	2300      	movs	r3, #0
 800e376:	4640      	mov	r0, r8
 800e378:	4649      	mov	r1, r9
 800e37a:	f7f2 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800e37e:	b110      	cbz	r0, 800e386 <_printf_float+0x86>
 800e380:	232d      	movs	r3, #45	@ 0x2d
 800e382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e386:	4a91      	ldr	r2, [pc, #580]	@ (800e5cc <_printf_float+0x2cc>)
 800e388:	4b91      	ldr	r3, [pc, #580]	@ (800e5d0 <_printf_float+0x2d0>)
 800e38a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e38e:	bf8c      	ite	hi
 800e390:	4690      	movhi	r8, r2
 800e392:	4698      	movls	r8, r3
 800e394:	2303      	movs	r3, #3
 800e396:	6123      	str	r3, [r4, #16]
 800e398:	f02b 0304 	bic.w	r3, fp, #4
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	f04f 0900 	mov.w	r9, #0
 800e3a2:	9700      	str	r7, [sp, #0]
 800e3a4:	4633      	mov	r3, r6
 800e3a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4628      	mov	r0, r5
 800e3ac:	f000 f9d2 	bl	800e754 <_printf_common>
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	f040 808d 	bne.w	800e4d0 <_printf_float+0x1d0>
 800e3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ba:	b00d      	add	sp, #52	@ 0x34
 800e3bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c0:	4642      	mov	r2, r8
 800e3c2:	464b      	mov	r3, r9
 800e3c4:	4640      	mov	r0, r8
 800e3c6:	4649      	mov	r1, r9
 800e3c8:	f7f2 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 800e3cc:	b140      	cbz	r0, 800e3e0 <_printf_float+0xe0>
 800e3ce:	464b      	mov	r3, r9
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	bfbc      	itt	lt
 800e3d4:	232d      	movlt	r3, #45	@ 0x2d
 800e3d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e3da:	4a7e      	ldr	r2, [pc, #504]	@ (800e5d4 <_printf_float+0x2d4>)
 800e3dc:	4b7e      	ldr	r3, [pc, #504]	@ (800e5d8 <_printf_float+0x2d8>)
 800e3de:	e7d4      	b.n	800e38a <_printf_float+0x8a>
 800e3e0:	6863      	ldr	r3, [r4, #4]
 800e3e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e3e6:	9206      	str	r2, [sp, #24]
 800e3e8:	1c5a      	adds	r2, r3, #1
 800e3ea:	d13b      	bne.n	800e464 <_printf_float+0x164>
 800e3ec:	2306      	movs	r3, #6
 800e3ee:	6063      	str	r3, [r4, #4]
 800e3f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	6022      	str	r2, [r4, #0]
 800e3f8:	9303      	str	r3, [sp, #12]
 800e3fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800e3fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e400:	ab09      	add	r3, sp, #36	@ 0x24
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	6861      	ldr	r1, [r4, #4]
 800e406:	ec49 8b10 	vmov	d0, r8, r9
 800e40a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e40e:	4628      	mov	r0, r5
 800e410:	f7ff fed6 	bl	800e1c0 <__cvt>
 800e414:	9b06      	ldr	r3, [sp, #24]
 800e416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e418:	2b47      	cmp	r3, #71	@ 0x47
 800e41a:	4680      	mov	r8, r0
 800e41c:	d129      	bne.n	800e472 <_printf_float+0x172>
 800e41e:	1cc8      	adds	r0, r1, #3
 800e420:	db02      	blt.n	800e428 <_printf_float+0x128>
 800e422:	6863      	ldr	r3, [r4, #4]
 800e424:	4299      	cmp	r1, r3
 800e426:	dd41      	ble.n	800e4ac <_printf_float+0x1ac>
 800e428:	f1aa 0a02 	sub.w	sl, sl, #2
 800e42c:	fa5f fa8a 	uxtb.w	sl, sl
 800e430:	3901      	subs	r1, #1
 800e432:	4652      	mov	r2, sl
 800e434:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e438:	9109      	str	r1, [sp, #36]	@ 0x24
 800e43a:	f7ff ff26 	bl	800e28a <__exponent>
 800e43e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e440:	1813      	adds	r3, r2, r0
 800e442:	2a01      	cmp	r2, #1
 800e444:	4681      	mov	r9, r0
 800e446:	6123      	str	r3, [r4, #16]
 800e448:	dc02      	bgt.n	800e450 <_printf_float+0x150>
 800e44a:	6822      	ldr	r2, [r4, #0]
 800e44c:	07d2      	lsls	r2, r2, #31
 800e44e:	d501      	bpl.n	800e454 <_printf_float+0x154>
 800e450:	3301      	adds	r3, #1
 800e452:	6123      	str	r3, [r4, #16]
 800e454:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d0a2      	beq.n	800e3a2 <_printf_float+0xa2>
 800e45c:	232d      	movs	r3, #45	@ 0x2d
 800e45e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e462:	e79e      	b.n	800e3a2 <_printf_float+0xa2>
 800e464:	9a06      	ldr	r2, [sp, #24]
 800e466:	2a47      	cmp	r2, #71	@ 0x47
 800e468:	d1c2      	bne.n	800e3f0 <_printf_float+0xf0>
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1c0      	bne.n	800e3f0 <_printf_float+0xf0>
 800e46e:	2301      	movs	r3, #1
 800e470:	e7bd      	b.n	800e3ee <_printf_float+0xee>
 800e472:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e476:	d9db      	bls.n	800e430 <_printf_float+0x130>
 800e478:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e47c:	d118      	bne.n	800e4b0 <_printf_float+0x1b0>
 800e47e:	2900      	cmp	r1, #0
 800e480:	6863      	ldr	r3, [r4, #4]
 800e482:	dd0b      	ble.n	800e49c <_printf_float+0x19c>
 800e484:	6121      	str	r1, [r4, #16]
 800e486:	b913      	cbnz	r3, 800e48e <_printf_float+0x18e>
 800e488:	6822      	ldr	r2, [r4, #0]
 800e48a:	07d0      	lsls	r0, r2, #31
 800e48c:	d502      	bpl.n	800e494 <_printf_float+0x194>
 800e48e:	3301      	adds	r3, #1
 800e490:	440b      	add	r3, r1
 800e492:	6123      	str	r3, [r4, #16]
 800e494:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e496:	f04f 0900 	mov.w	r9, #0
 800e49a:	e7db      	b.n	800e454 <_printf_float+0x154>
 800e49c:	b913      	cbnz	r3, 800e4a4 <_printf_float+0x1a4>
 800e49e:	6822      	ldr	r2, [r4, #0]
 800e4a0:	07d2      	lsls	r2, r2, #31
 800e4a2:	d501      	bpl.n	800e4a8 <_printf_float+0x1a8>
 800e4a4:	3302      	adds	r3, #2
 800e4a6:	e7f4      	b.n	800e492 <_printf_float+0x192>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e7f2      	b.n	800e492 <_printf_float+0x192>
 800e4ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b2:	4299      	cmp	r1, r3
 800e4b4:	db05      	blt.n	800e4c2 <_printf_float+0x1c2>
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	6121      	str	r1, [r4, #16]
 800e4ba:	07d8      	lsls	r0, r3, #31
 800e4bc:	d5ea      	bpl.n	800e494 <_printf_float+0x194>
 800e4be:	1c4b      	adds	r3, r1, #1
 800e4c0:	e7e7      	b.n	800e492 <_printf_float+0x192>
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	bfd4      	ite	le
 800e4c6:	f1c1 0202 	rsble	r2, r1, #2
 800e4ca:	2201      	movgt	r2, #1
 800e4cc:	4413      	add	r3, r2
 800e4ce:	e7e0      	b.n	800e492 <_printf_float+0x192>
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	055a      	lsls	r2, r3, #21
 800e4d4:	d407      	bmi.n	800e4e6 <_printf_float+0x1e6>
 800e4d6:	6923      	ldr	r3, [r4, #16]
 800e4d8:	4642      	mov	r2, r8
 800e4da:	4631      	mov	r1, r6
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b8      	blx	r7
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d12b      	bne.n	800e53c <_printf_float+0x23c>
 800e4e4:	e767      	b.n	800e3b6 <_printf_float+0xb6>
 800e4e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4ea:	f240 80dd 	bls.w	800e6a8 <_printf_float+0x3a8>
 800e4ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	f7f2 fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	d033      	beq.n	800e566 <_printf_float+0x266>
 800e4fe:	4a37      	ldr	r2, [pc, #220]	@ (800e5dc <_printf_float+0x2dc>)
 800e500:	2301      	movs	r3, #1
 800e502:	4631      	mov	r1, r6
 800e504:	4628      	mov	r0, r5
 800e506:	47b8      	blx	r7
 800e508:	3001      	adds	r0, #1
 800e50a:	f43f af54 	beq.w	800e3b6 <_printf_float+0xb6>
 800e50e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e512:	4543      	cmp	r3, r8
 800e514:	db02      	blt.n	800e51c <_printf_float+0x21c>
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	07d8      	lsls	r0, r3, #31
 800e51a:	d50f      	bpl.n	800e53c <_printf_float+0x23c>
 800e51c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	f43f af45 	beq.w	800e3b6 <_printf_float+0xb6>
 800e52c:	f04f 0900 	mov.w	r9, #0
 800e530:	f108 38ff 	add.w	r8, r8, #4294967295
 800e534:	f104 0a1a 	add.w	sl, r4, #26
 800e538:	45c8      	cmp	r8, r9
 800e53a:	dc09      	bgt.n	800e550 <_printf_float+0x250>
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	079b      	lsls	r3, r3, #30
 800e540:	f100 8103 	bmi.w	800e74a <_printf_float+0x44a>
 800e544:	68e0      	ldr	r0, [r4, #12]
 800e546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e548:	4298      	cmp	r0, r3
 800e54a:	bfb8      	it	lt
 800e54c:	4618      	movlt	r0, r3
 800e54e:	e734      	b.n	800e3ba <_printf_float+0xba>
 800e550:	2301      	movs	r3, #1
 800e552:	4652      	mov	r2, sl
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	47b8      	blx	r7
 800e55a:	3001      	adds	r0, #1
 800e55c:	f43f af2b 	beq.w	800e3b6 <_printf_float+0xb6>
 800e560:	f109 0901 	add.w	r9, r9, #1
 800e564:	e7e8      	b.n	800e538 <_printf_float+0x238>
 800e566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e568:	2b00      	cmp	r3, #0
 800e56a:	dc39      	bgt.n	800e5e0 <_printf_float+0x2e0>
 800e56c:	4a1b      	ldr	r2, [pc, #108]	@ (800e5dc <_printf_float+0x2dc>)
 800e56e:	2301      	movs	r3, #1
 800e570:	4631      	mov	r1, r6
 800e572:	4628      	mov	r0, r5
 800e574:	47b8      	blx	r7
 800e576:	3001      	adds	r0, #1
 800e578:	f43f af1d 	beq.w	800e3b6 <_printf_float+0xb6>
 800e57c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e580:	ea59 0303 	orrs.w	r3, r9, r3
 800e584:	d102      	bne.n	800e58c <_printf_float+0x28c>
 800e586:	6823      	ldr	r3, [r4, #0]
 800e588:	07d9      	lsls	r1, r3, #31
 800e58a:	d5d7      	bpl.n	800e53c <_printf_float+0x23c>
 800e58c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e590:	4631      	mov	r1, r6
 800e592:	4628      	mov	r0, r5
 800e594:	47b8      	blx	r7
 800e596:	3001      	adds	r0, #1
 800e598:	f43f af0d 	beq.w	800e3b6 <_printf_float+0xb6>
 800e59c:	f04f 0a00 	mov.w	sl, #0
 800e5a0:	f104 0b1a 	add.w	fp, r4, #26
 800e5a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5a6:	425b      	negs	r3, r3
 800e5a8:	4553      	cmp	r3, sl
 800e5aa:	dc01      	bgt.n	800e5b0 <_printf_float+0x2b0>
 800e5ac:	464b      	mov	r3, r9
 800e5ae:	e793      	b.n	800e4d8 <_printf_float+0x1d8>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	465a      	mov	r2, fp
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	47b8      	blx	r7
 800e5ba:	3001      	adds	r0, #1
 800e5bc:	f43f aefb 	beq.w	800e3b6 <_printf_float+0xb6>
 800e5c0:	f10a 0a01 	add.w	sl, sl, #1
 800e5c4:	e7ee      	b.n	800e5a4 <_printf_float+0x2a4>
 800e5c6:	bf00      	nop
 800e5c8:	7fefffff 	.word	0x7fefffff
 800e5cc:	080130dc 	.word	0x080130dc
 800e5d0:	080130d8 	.word	0x080130d8
 800e5d4:	080130e4 	.word	0x080130e4
 800e5d8:	080130e0 	.word	0x080130e0
 800e5dc:	080130e8 	.word	0x080130e8
 800e5e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5e6:	4553      	cmp	r3, sl
 800e5e8:	bfa8      	it	ge
 800e5ea:	4653      	movge	r3, sl
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	4699      	mov	r9, r3
 800e5f0:	dc36      	bgt.n	800e660 <_printf_float+0x360>
 800e5f2:	f04f 0b00 	mov.w	fp, #0
 800e5f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5fa:	f104 021a 	add.w	r2, r4, #26
 800e5fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e600:	9306      	str	r3, [sp, #24]
 800e602:	eba3 0309 	sub.w	r3, r3, r9
 800e606:	455b      	cmp	r3, fp
 800e608:	dc31      	bgt.n	800e66e <_printf_float+0x36e>
 800e60a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60c:	459a      	cmp	sl, r3
 800e60e:	dc3a      	bgt.n	800e686 <_printf_float+0x386>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	07da      	lsls	r2, r3, #31
 800e614:	d437      	bmi.n	800e686 <_printf_float+0x386>
 800e616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e618:	ebaa 0903 	sub.w	r9, sl, r3
 800e61c:	9b06      	ldr	r3, [sp, #24]
 800e61e:	ebaa 0303 	sub.w	r3, sl, r3
 800e622:	4599      	cmp	r9, r3
 800e624:	bfa8      	it	ge
 800e626:	4699      	movge	r9, r3
 800e628:	f1b9 0f00 	cmp.w	r9, #0
 800e62c:	dc33      	bgt.n	800e696 <_printf_float+0x396>
 800e62e:	f04f 0800 	mov.w	r8, #0
 800e632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e636:	f104 0b1a 	add.w	fp, r4, #26
 800e63a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e63c:	ebaa 0303 	sub.w	r3, sl, r3
 800e640:	eba3 0309 	sub.w	r3, r3, r9
 800e644:	4543      	cmp	r3, r8
 800e646:	f77f af79 	ble.w	800e53c <_printf_float+0x23c>
 800e64a:	2301      	movs	r3, #1
 800e64c:	465a      	mov	r2, fp
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	f43f aeae 	beq.w	800e3b6 <_printf_float+0xb6>
 800e65a:	f108 0801 	add.w	r8, r8, #1
 800e65e:	e7ec      	b.n	800e63a <_printf_float+0x33a>
 800e660:	4642      	mov	r2, r8
 800e662:	4631      	mov	r1, r6
 800e664:	4628      	mov	r0, r5
 800e666:	47b8      	blx	r7
 800e668:	3001      	adds	r0, #1
 800e66a:	d1c2      	bne.n	800e5f2 <_printf_float+0x2f2>
 800e66c:	e6a3      	b.n	800e3b6 <_printf_float+0xb6>
 800e66e:	2301      	movs	r3, #1
 800e670:	4631      	mov	r1, r6
 800e672:	4628      	mov	r0, r5
 800e674:	9206      	str	r2, [sp, #24]
 800e676:	47b8      	blx	r7
 800e678:	3001      	adds	r0, #1
 800e67a:	f43f ae9c 	beq.w	800e3b6 <_printf_float+0xb6>
 800e67e:	9a06      	ldr	r2, [sp, #24]
 800e680:	f10b 0b01 	add.w	fp, fp, #1
 800e684:	e7bb      	b.n	800e5fe <_printf_float+0x2fe>
 800e686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e68a:	4631      	mov	r1, r6
 800e68c:	4628      	mov	r0, r5
 800e68e:	47b8      	blx	r7
 800e690:	3001      	adds	r0, #1
 800e692:	d1c0      	bne.n	800e616 <_printf_float+0x316>
 800e694:	e68f      	b.n	800e3b6 <_printf_float+0xb6>
 800e696:	9a06      	ldr	r2, [sp, #24]
 800e698:	464b      	mov	r3, r9
 800e69a:	4442      	add	r2, r8
 800e69c:	4631      	mov	r1, r6
 800e69e:	4628      	mov	r0, r5
 800e6a0:	47b8      	blx	r7
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d1c3      	bne.n	800e62e <_printf_float+0x32e>
 800e6a6:	e686      	b.n	800e3b6 <_printf_float+0xb6>
 800e6a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6ac:	f1ba 0f01 	cmp.w	sl, #1
 800e6b0:	dc01      	bgt.n	800e6b6 <_printf_float+0x3b6>
 800e6b2:	07db      	lsls	r3, r3, #31
 800e6b4:	d536      	bpl.n	800e724 <_printf_float+0x424>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	4642      	mov	r2, r8
 800e6ba:	4631      	mov	r1, r6
 800e6bc:	4628      	mov	r0, r5
 800e6be:	47b8      	blx	r7
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	f43f ae78 	beq.w	800e3b6 <_printf_float+0xb6>
 800e6c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ca:	4631      	mov	r1, r6
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	47b8      	blx	r7
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	f43f ae70 	beq.w	800e3b6 <_printf_float+0xb6>
 800e6d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e6da:	2200      	movs	r2, #0
 800e6dc:	2300      	movs	r3, #0
 800e6de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6e2:	f7f2 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6e6:	b9c0      	cbnz	r0, 800e71a <_printf_float+0x41a>
 800e6e8:	4653      	mov	r3, sl
 800e6ea:	f108 0201 	add.w	r2, r8, #1
 800e6ee:	4631      	mov	r1, r6
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b8      	blx	r7
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d10c      	bne.n	800e712 <_printf_float+0x412>
 800e6f8:	e65d      	b.n	800e3b6 <_printf_float+0xb6>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	465a      	mov	r2, fp
 800e6fe:	4631      	mov	r1, r6
 800e700:	4628      	mov	r0, r5
 800e702:	47b8      	blx	r7
 800e704:	3001      	adds	r0, #1
 800e706:	f43f ae56 	beq.w	800e3b6 <_printf_float+0xb6>
 800e70a:	f108 0801 	add.w	r8, r8, #1
 800e70e:	45d0      	cmp	r8, sl
 800e710:	dbf3      	blt.n	800e6fa <_printf_float+0x3fa>
 800e712:	464b      	mov	r3, r9
 800e714:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e718:	e6df      	b.n	800e4da <_printf_float+0x1da>
 800e71a:	f04f 0800 	mov.w	r8, #0
 800e71e:	f104 0b1a 	add.w	fp, r4, #26
 800e722:	e7f4      	b.n	800e70e <_printf_float+0x40e>
 800e724:	2301      	movs	r3, #1
 800e726:	4642      	mov	r2, r8
 800e728:	e7e1      	b.n	800e6ee <_printf_float+0x3ee>
 800e72a:	2301      	movs	r3, #1
 800e72c:	464a      	mov	r2, r9
 800e72e:	4631      	mov	r1, r6
 800e730:	4628      	mov	r0, r5
 800e732:	47b8      	blx	r7
 800e734:	3001      	adds	r0, #1
 800e736:	f43f ae3e 	beq.w	800e3b6 <_printf_float+0xb6>
 800e73a:	f108 0801 	add.w	r8, r8, #1
 800e73e:	68e3      	ldr	r3, [r4, #12]
 800e740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e742:	1a5b      	subs	r3, r3, r1
 800e744:	4543      	cmp	r3, r8
 800e746:	dcf0      	bgt.n	800e72a <_printf_float+0x42a>
 800e748:	e6fc      	b.n	800e544 <_printf_float+0x244>
 800e74a:	f04f 0800 	mov.w	r8, #0
 800e74e:	f104 0919 	add.w	r9, r4, #25
 800e752:	e7f4      	b.n	800e73e <_printf_float+0x43e>

0800e754 <_printf_common>:
 800e754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e758:	4616      	mov	r6, r2
 800e75a:	4698      	mov	r8, r3
 800e75c:	688a      	ldr	r2, [r1, #8]
 800e75e:	690b      	ldr	r3, [r1, #16]
 800e760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e764:	4293      	cmp	r3, r2
 800e766:	bfb8      	it	lt
 800e768:	4613      	movlt	r3, r2
 800e76a:	6033      	str	r3, [r6, #0]
 800e76c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e770:	4607      	mov	r7, r0
 800e772:	460c      	mov	r4, r1
 800e774:	b10a      	cbz	r2, 800e77a <_printf_common+0x26>
 800e776:	3301      	adds	r3, #1
 800e778:	6033      	str	r3, [r6, #0]
 800e77a:	6823      	ldr	r3, [r4, #0]
 800e77c:	0699      	lsls	r1, r3, #26
 800e77e:	bf42      	ittt	mi
 800e780:	6833      	ldrmi	r3, [r6, #0]
 800e782:	3302      	addmi	r3, #2
 800e784:	6033      	strmi	r3, [r6, #0]
 800e786:	6825      	ldr	r5, [r4, #0]
 800e788:	f015 0506 	ands.w	r5, r5, #6
 800e78c:	d106      	bne.n	800e79c <_printf_common+0x48>
 800e78e:	f104 0a19 	add.w	sl, r4, #25
 800e792:	68e3      	ldr	r3, [r4, #12]
 800e794:	6832      	ldr	r2, [r6, #0]
 800e796:	1a9b      	subs	r3, r3, r2
 800e798:	42ab      	cmp	r3, r5
 800e79a:	dc26      	bgt.n	800e7ea <_printf_common+0x96>
 800e79c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e7a0:	6822      	ldr	r2, [r4, #0]
 800e7a2:	3b00      	subs	r3, #0
 800e7a4:	bf18      	it	ne
 800e7a6:	2301      	movne	r3, #1
 800e7a8:	0692      	lsls	r2, r2, #26
 800e7aa:	d42b      	bmi.n	800e804 <_printf_common+0xb0>
 800e7ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e7b0:	4641      	mov	r1, r8
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	47c8      	blx	r9
 800e7b6:	3001      	adds	r0, #1
 800e7b8:	d01e      	beq.n	800e7f8 <_printf_common+0xa4>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	6922      	ldr	r2, [r4, #16]
 800e7be:	f003 0306 	and.w	r3, r3, #6
 800e7c2:	2b04      	cmp	r3, #4
 800e7c4:	bf02      	ittt	eq
 800e7c6:	68e5      	ldreq	r5, [r4, #12]
 800e7c8:	6833      	ldreq	r3, [r6, #0]
 800e7ca:	1aed      	subeq	r5, r5, r3
 800e7cc:	68a3      	ldr	r3, [r4, #8]
 800e7ce:	bf0c      	ite	eq
 800e7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d4:	2500      	movne	r5, #0
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	bfc4      	itt	gt
 800e7da:	1a9b      	subgt	r3, r3, r2
 800e7dc:	18ed      	addgt	r5, r5, r3
 800e7de:	2600      	movs	r6, #0
 800e7e0:	341a      	adds	r4, #26
 800e7e2:	42b5      	cmp	r5, r6
 800e7e4:	d11a      	bne.n	800e81c <_printf_common+0xc8>
 800e7e6:	2000      	movs	r0, #0
 800e7e8:	e008      	b.n	800e7fc <_printf_common+0xa8>
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	4652      	mov	r2, sl
 800e7ee:	4641      	mov	r1, r8
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	47c8      	blx	r9
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d103      	bne.n	800e800 <_printf_common+0xac>
 800e7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e800:	3501      	adds	r5, #1
 800e802:	e7c6      	b.n	800e792 <_printf_common+0x3e>
 800e804:	18e1      	adds	r1, r4, r3
 800e806:	1c5a      	adds	r2, r3, #1
 800e808:	2030      	movs	r0, #48	@ 0x30
 800e80a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e80e:	4422      	add	r2, r4
 800e810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e818:	3302      	adds	r3, #2
 800e81a:	e7c7      	b.n	800e7ac <_printf_common+0x58>
 800e81c:	2301      	movs	r3, #1
 800e81e:	4622      	mov	r2, r4
 800e820:	4641      	mov	r1, r8
 800e822:	4638      	mov	r0, r7
 800e824:	47c8      	blx	r9
 800e826:	3001      	adds	r0, #1
 800e828:	d0e6      	beq.n	800e7f8 <_printf_common+0xa4>
 800e82a:	3601      	adds	r6, #1
 800e82c:	e7d9      	b.n	800e7e2 <_printf_common+0x8e>
	...

0800e830 <_printf_i>:
 800e830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	7e0f      	ldrb	r7, [r1, #24]
 800e836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e838:	2f78      	cmp	r7, #120	@ 0x78
 800e83a:	4691      	mov	r9, r2
 800e83c:	4680      	mov	r8, r0
 800e83e:	460c      	mov	r4, r1
 800e840:	469a      	mov	sl, r3
 800e842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e846:	d807      	bhi.n	800e858 <_printf_i+0x28>
 800e848:	2f62      	cmp	r7, #98	@ 0x62
 800e84a:	d80a      	bhi.n	800e862 <_printf_i+0x32>
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	f000 80d1 	beq.w	800e9f4 <_printf_i+0x1c4>
 800e852:	2f58      	cmp	r7, #88	@ 0x58
 800e854:	f000 80b8 	beq.w	800e9c8 <_printf_i+0x198>
 800e858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e85c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e860:	e03a      	b.n	800e8d8 <_printf_i+0xa8>
 800e862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e866:	2b15      	cmp	r3, #21
 800e868:	d8f6      	bhi.n	800e858 <_printf_i+0x28>
 800e86a:	a101      	add	r1, pc, #4	@ (adr r1, 800e870 <_printf_i+0x40>)
 800e86c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e870:	0800e8c9 	.word	0x0800e8c9
 800e874:	0800e8dd 	.word	0x0800e8dd
 800e878:	0800e859 	.word	0x0800e859
 800e87c:	0800e859 	.word	0x0800e859
 800e880:	0800e859 	.word	0x0800e859
 800e884:	0800e859 	.word	0x0800e859
 800e888:	0800e8dd 	.word	0x0800e8dd
 800e88c:	0800e859 	.word	0x0800e859
 800e890:	0800e859 	.word	0x0800e859
 800e894:	0800e859 	.word	0x0800e859
 800e898:	0800e859 	.word	0x0800e859
 800e89c:	0800e9db 	.word	0x0800e9db
 800e8a0:	0800e907 	.word	0x0800e907
 800e8a4:	0800e995 	.word	0x0800e995
 800e8a8:	0800e859 	.word	0x0800e859
 800e8ac:	0800e859 	.word	0x0800e859
 800e8b0:	0800e9fd 	.word	0x0800e9fd
 800e8b4:	0800e859 	.word	0x0800e859
 800e8b8:	0800e907 	.word	0x0800e907
 800e8bc:	0800e859 	.word	0x0800e859
 800e8c0:	0800e859 	.word	0x0800e859
 800e8c4:	0800e99d 	.word	0x0800e99d
 800e8c8:	6833      	ldr	r3, [r6, #0]
 800e8ca:	1d1a      	adds	r2, r3, #4
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6032      	str	r2, [r6, #0]
 800e8d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e8d8:	2301      	movs	r3, #1
 800e8da:	e09c      	b.n	800ea16 <_printf_i+0x1e6>
 800e8dc:	6833      	ldr	r3, [r6, #0]
 800e8de:	6820      	ldr	r0, [r4, #0]
 800e8e0:	1d19      	adds	r1, r3, #4
 800e8e2:	6031      	str	r1, [r6, #0]
 800e8e4:	0606      	lsls	r6, r0, #24
 800e8e6:	d501      	bpl.n	800e8ec <_printf_i+0xbc>
 800e8e8:	681d      	ldr	r5, [r3, #0]
 800e8ea:	e003      	b.n	800e8f4 <_printf_i+0xc4>
 800e8ec:	0645      	lsls	r5, r0, #25
 800e8ee:	d5fb      	bpl.n	800e8e8 <_printf_i+0xb8>
 800e8f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	da03      	bge.n	800e900 <_printf_i+0xd0>
 800e8f8:	232d      	movs	r3, #45	@ 0x2d
 800e8fa:	426d      	negs	r5, r5
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e900:	4858      	ldr	r0, [pc, #352]	@ (800ea64 <_printf_i+0x234>)
 800e902:	230a      	movs	r3, #10
 800e904:	e011      	b.n	800e92a <_printf_i+0xfa>
 800e906:	6821      	ldr	r1, [r4, #0]
 800e908:	6833      	ldr	r3, [r6, #0]
 800e90a:	0608      	lsls	r0, r1, #24
 800e90c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e910:	d402      	bmi.n	800e918 <_printf_i+0xe8>
 800e912:	0649      	lsls	r1, r1, #25
 800e914:	bf48      	it	mi
 800e916:	b2ad      	uxthmi	r5, r5
 800e918:	2f6f      	cmp	r7, #111	@ 0x6f
 800e91a:	4852      	ldr	r0, [pc, #328]	@ (800ea64 <_printf_i+0x234>)
 800e91c:	6033      	str	r3, [r6, #0]
 800e91e:	bf14      	ite	ne
 800e920:	230a      	movne	r3, #10
 800e922:	2308      	moveq	r3, #8
 800e924:	2100      	movs	r1, #0
 800e926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e92a:	6866      	ldr	r6, [r4, #4]
 800e92c:	60a6      	str	r6, [r4, #8]
 800e92e:	2e00      	cmp	r6, #0
 800e930:	db05      	blt.n	800e93e <_printf_i+0x10e>
 800e932:	6821      	ldr	r1, [r4, #0]
 800e934:	432e      	orrs	r6, r5
 800e936:	f021 0104 	bic.w	r1, r1, #4
 800e93a:	6021      	str	r1, [r4, #0]
 800e93c:	d04b      	beq.n	800e9d6 <_printf_i+0x1a6>
 800e93e:	4616      	mov	r6, r2
 800e940:	fbb5 f1f3 	udiv	r1, r5, r3
 800e944:	fb03 5711 	mls	r7, r3, r1, r5
 800e948:	5dc7      	ldrb	r7, [r0, r7]
 800e94a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e94e:	462f      	mov	r7, r5
 800e950:	42bb      	cmp	r3, r7
 800e952:	460d      	mov	r5, r1
 800e954:	d9f4      	bls.n	800e940 <_printf_i+0x110>
 800e956:	2b08      	cmp	r3, #8
 800e958:	d10b      	bne.n	800e972 <_printf_i+0x142>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	07df      	lsls	r7, r3, #31
 800e95e:	d508      	bpl.n	800e972 <_printf_i+0x142>
 800e960:	6923      	ldr	r3, [r4, #16]
 800e962:	6861      	ldr	r1, [r4, #4]
 800e964:	4299      	cmp	r1, r3
 800e966:	bfde      	ittt	le
 800e968:	2330      	movle	r3, #48	@ 0x30
 800e96a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e96e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e972:	1b92      	subs	r2, r2, r6
 800e974:	6122      	str	r2, [r4, #16]
 800e976:	f8cd a000 	str.w	sl, [sp]
 800e97a:	464b      	mov	r3, r9
 800e97c:	aa03      	add	r2, sp, #12
 800e97e:	4621      	mov	r1, r4
 800e980:	4640      	mov	r0, r8
 800e982:	f7ff fee7 	bl	800e754 <_printf_common>
 800e986:	3001      	adds	r0, #1
 800e988:	d14a      	bne.n	800ea20 <_printf_i+0x1f0>
 800e98a:	f04f 30ff 	mov.w	r0, #4294967295
 800e98e:	b004      	add	sp, #16
 800e990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	f043 0320 	orr.w	r3, r3, #32
 800e99a:	6023      	str	r3, [r4, #0]
 800e99c:	4832      	ldr	r0, [pc, #200]	@ (800ea68 <_printf_i+0x238>)
 800e99e:	2778      	movs	r7, #120	@ 0x78
 800e9a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e9a4:	6823      	ldr	r3, [r4, #0]
 800e9a6:	6831      	ldr	r1, [r6, #0]
 800e9a8:	061f      	lsls	r7, r3, #24
 800e9aa:	f851 5b04 	ldr.w	r5, [r1], #4
 800e9ae:	d402      	bmi.n	800e9b6 <_printf_i+0x186>
 800e9b0:	065f      	lsls	r7, r3, #25
 800e9b2:	bf48      	it	mi
 800e9b4:	b2ad      	uxthmi	r5, r5
 800e9b6:	6031      	str	r1, [r6, #0]
 800e9b8:	07d9      	lsls	r1, r3, #31
 800e9ba:	bf44      	itt	mi
 800e9bc:	f043 0320 	orrmi.w	r3, r3, #32
 800e9c0:	6023      	strmi	r3, [r4, #0]
 800e9c2:	b11d      	cbz	r5, 800e9cc <_printf_i+0x19c>
 800e9c4:	2310      	movs	r3, #16
 800e9c6:	e7ad      	b.n	800e924 <_printf_i+0xf4>
 800e9c8:	4826      	ldr	r0, [pc, #152]	@ (800ea64 <_printf_i+0x234>)
 800e9ca:	e7e9      	b.n	800e9a0 <_printf_i+0x170>
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	f023 0320 	bic.w	r3, r3, #32
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	e7f6      	b.n	800e9c4 <_printf_i+0x194>
 800e9d6:	4616      	mov	r6, r2
 800e9d8:	e7bd      	b.n	800e956 <_printf_i+0x126>
 800e9da:	6833      	ldr	r3, [r6, #0]
 800e9dc:	6825      	ldr	r5, [r4, #0]
 800e9de:	6961      	ldr	r1, [r4, #20]
 800e9e0:	1d18      	adds	r0, r3, #4
 800e9e2:	6030      	str	r0, [r6, #0]
 800e9e4:	062e      	lsls	r6, r5, #24
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	d501      	bpl.n	800e9ee <_printf_i+0x1be>
 800e9ea:	6019      	str	r1, [r3, #0]
 800e9ec:	e002      	b.n	800e9f4 <_printf_i+0x1c4>
 800e9ee:	0668      	lsls	r0, r5, #25
 800e9f0:	d5fb      	bpl.n	800e9ea <_printf_i+0x1ba>
 800e9f2:	8019      	strh	r1, [r3, #0]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	6123      	str	r3, [r4, #16]
 800e9f8:	4616      	mov	r6, r2
 800e9fa:	e7bc      	b.n	800e976 <_printf_i+0x146>
 800e9fc:	6833      	ldr	r3, [r6, #0]
 800e9fe:	1d1a      	adds	r2, r3, #4
 800ea00:	6032      	str	r2, [r6, #0]
 800ea02:	681e      	ldr	r6, [r3, #0]
 800ea04:	6862      	ldr	r2, [r4, #4]
 800ea06:	2100      	movs	r1, #0
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7f1 fbe1 	bl	80001d0 <memchr>
 800ea0e:	b108      	cbz	r0, 800ea14 <_printf_i+0x1e4>
 800ea10:	1b80      	subs	r0, r0, r6
 800ea12:	6060      	str	r0, [r4, #4]
 800ea14:	6863      	ldr	r3, [r4, #4]
 800ea16:	6123      	str	r3, [r4, #16]
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea1e:	e7aa      	b.n	800e976 <_printf_i+0x146>
 800ea20:	6923      	ldr	r3, [r4, #16]
 800ea22:	4632      	mov	r2, r6
 800ea24:	4649      	mov	r1, r9
 800ea26:	4640      	mov	r0, r8
 800ea28:	47d0      	blx	sl
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	d0ad      	beq.n	800e98a <_printf_i+0x15a>
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	079b      	lsls	r3, r3, #30
 800ea32:	d413      	bmi.n	800ea5c <_printf_i+0x22c>
 800ea34:	68e0      	ldr	r0, [r4, #12]
 800ea36:	9b03      	ldr	r3, [sp, #12]
 800ea38:	4298      	cmp	r0, r3
 800ea3a:	bfb8      	it	lt
 800ea3c:	4618      	movlt	r0, r3
 800ea3e:	e7a6      	b.n	800e98e <_printf_i+0x15e>
 800ea40:	2301      	movs	r3, #1
 800ea42:	4632      	mov	r2, r6
 800ea44:	4649      	mov	r1, r9
 800ea46:	4640      	mov	r0, r8
 800ea48:	47d0      	blx	sl
 800ea4a:	3001      	adds	r0, #1
 800ea4c:	d09d      	beq.n	800e98a <_printf_i+0x15a>
 800ea4e:	3501      	adds	r5, #1
 800ea50:	68e3      	ldr	r3, [r4, #12]
 800ea52:	9903      	ldr	r1, [sp, #12]
 800ea54:	1a5b      	subs	r3, r3, r1
 800ea56:	42ab      	cmp	r3, r5
 800ea58:	dcf2      	bgt.n	800ea40 <_printf_i+0x210>
 800ea5a:	e7eb      	b.n	800ea34 <_printf_i+0x204>
 800ea5c:	2500      	movs	r5, #0
 800ea5e:	f104 0619 	add.w	r6, r4, #25
 800ea62:	e7f5      	b.n	800ea50 <_printf_i+0x220>
 800ea64:	080130ea 	.word	0x080130ea
 800ea68:	080130fb 	.word	0x080130fb

0800ea6c <_scanf_float>:
 800ea6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea70:	b087      	sub	sp, #28
 800ea72:	4691      	mov	r9, r2
 800ea74:	9303      	str	r3, [sp, #12]
 800ea76:	688b      	ldr	r3, [r1, #8]
 800ea78:	1e5a      	subs	r2, r3, #1
 800ea7a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ea7e:	bf81      	itttt	hi
 800ea80:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ea84:	eb03 0b05 	addhi.w	fp, r3, r5
 800ea88:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ea8c:	608b      	strhi	r3, [r1, #8]
 800ea8e:	680b      	ldr	r3, [r1, #0]
 800ea90:	460a      	mov	r2, r1
 800ea92:	f04f 0500 	mov.w	r5, #0
 800ea96:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ea9a:	f842 3b1c 	str.w	r3, [r2], #28
 800ea9e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800eaa2:	4680      	mov	r8, r0
 800eaa4:	460c      	mov	r4, r1
 800eaa6:	bf98      	it	ls
 800eaa8:	f04f 0b00 	movls.w	fp, #0
 800eaac:	9201      	str	r2, [sp, #4]
 800eaae:	4616      	mov	r6, r2
 800eab0:	46aa      	mov	sl, r5
 800eab2:	462f      	mov	r7, r5
 800eab4:	9502      	str	r5, [sp, #8]
 800eab6:	68a2      	ldr	r2, [r4, #8]
 800eab8:	b15a      	cbz	r2, 800ead2 <_scanf_float+0x66>
 800eaba:	f8d9 3000 	ldr.w	r3, [r9]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b4e      	cmp	r3, #78	@ 0x4e
 800eac2:	d863      	bhi.n	800eb8c <_scanf_float+0x120>
 800eac4:	2b40      	cmp	r3, #64	@ 0x40
 800eac6:	d83b      	bhi.n	800eb40 <_scanf_float+0xd4>
 800eac8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800eacc:	b2c8      	uxtb	r0, r1
 800eace:	280e      	cmp	r0, #14
 800ead0:	d939      	bls.n	800eb46 <_scanf_float+0xda>
 800ead2:	b11f      	cbz	r7, 800eadc <_scanf_float+0x70>
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eada:	6023      	str	r3, [r4, #0]
 800eadc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eae0:	f1ba 0f01 	cmp.w	sl, #1
 800eae4:	f200 8114 	bhi.w	800ed10 <_scanf_float+0x2a4>
 800eae8:	9b01      	ldr	r3, [sp, #4]
 800eaea:	429e      	cmp	r6, r3
 800eaec:	f200 8105 	bhi.w	800ecfa <_scanf_float+0x28e>
 800eaf0:	2001      	movs	r0, #1
 800eaf2:	b007      	add	sp, #28
 800eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800eafc:	2a0d      	cmp	r2, #13
 800eafe:	d8e8      	bhi.n	800ead2 <_scanf_float+0x66>
 800eb00:	a101      	add	r1, pc, #4	@ (adr r1, 800eb08 <_scanf_float+0x9c>)
 800eb02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eb06:	bf00      	nop
 800eb08:	0800ec51 	.word	0x0800ec51
 800eb0c:	0800ead3 	.word	0x0800ead3
 800eb10:	0800ead3 	.word	0x0800ead3
 800eb14:	0800ead3 	.word	0x0800ead3
 800eb18:	0800ecad 	.word	0x0800ecad
 800eb1c:	0800ec87 	.word	0x0800ec87
 800eb20:	0800ead3 	.word	0x0800ead3
 800eb24:	0800ead3 	.word	0x0800ead3
 800eb28:	0800ec5f 	.word	0x0800ec5f
 800eb2c:	0800ead3 	.word	0x0800ead3
 800eb30:	0800ead3 	.word	0x0800ead3
 800eb34:	0800ead3 	.word	0x0800ead3
 800eb38:	0800ead3 	.word	0x0800ead3
 800eb3c:	0800ec1b 	.word	0x0800ec1b
 800eb40:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800eb44:	e7da      	b.n	800eafc <_scanf_float+0x90>
 800eb46:	290e      	cmp	r1, #14
 800eb48:	d8c3      	bhi.n	800ead2 <_scanf_float+0x66>
 800eb4a:	a001      	add	r0, pc, #4	@ (adr r0, 800eb50 <_scanf_float+0xe4>)
 800eb4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eb50:	0800ec0b 	.word	0x0800ec0b
 800eb54:	0800ead3 	.word	0x0800ead3
 800eb58:	0800ec0b 	.word	0x0800ec0b
 800eb5c:	0800ec9b 	.word	0x0800ec9b
 800eb60:	0800ead3 	.word	0x0800ead3
 800eb64:	0800ebad 	.word	0x0800ebad
 800eb68:	0800ebf1 	.word	0x0800ebf1
 800eb6c:	0800ebf1 	.word	0x0800ebf1
 800eb70:	0800ebf1 	.word	0x0800ebf1
 800eb74:	0800ebf1 	.word	0x0800ebf1
 800eb78:	0800ebf1 	.word	0x0800ebf1
 800eb7c:	0800ebf1 	.word	0x0800ebf1
 800eb80:	0800ebf1 	.word	0x0800ebf1
 800eb84:	0800ebf1 	.word	0x0800ebf1
 800eb88:	0800ebf1 	.word	0x0800ebf1
 800eb8c:	2b6e      	cmp	r3, #110	@ 0x6e
 800eb8e:	d809      	bhi.n	800eba4 <_scanf_float+0x138>
 800eb90:	2b60      	cmp	r3, #96	@ 0x60
 800eb92:	d8b1      	bhi.n	800eaf8 <_scanf_float+0x8c>
 800eb94:	2b54      	cmp	r3, #84	@ 0x54
 800eb96:	d07b      	beq.n	800ec90 <_scanf_float+0x224>
 800eb98:	2b59      	cmp	r3, #89	@ 0x59
 800eb9a:	d19a      	bne.n	800ead2 <_scanf_float+0x66>
 800eb9c:	2d07      	cmp	r5, #7
 800eb9e:	d198      	bne.n	800ead2 <_scanf_float+0x66>
 800eba0:	2508      	movs	r5, #8
 800eba2:	e02f      	b.n	800ec04 <_scanf_float+0x198>
 800eba4:	2b74      	cmp	r3, #116	@ 0x74
 800eba6:	d073      	beq.n	800ec90 <_scanf_float+0x224>
 800eba8:	2b79      	cmp	r3, #121	@ 0x79
 800ebaa:	e7f6      	b.n	800eb9a <_scanf_float+0x12e>
 800ebac:	6821      	ldr	r1, [r4, #0]
 800ebae:	05c8      	lsls	r0, r1, #23
 800ebb0:	d51e      	bpl.n	800ebf0 <_scanf_float+0x184>
 800ebb2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ebb6:	6021      	str	r1, [r4, #0]
 800ebb8:	3701      	adds	r7, #1
 800ebba:	f1bb 0f00 	cmp.w	fp, #0
 800ebbe:	d003      	beq.n	800ebc8 <_scanf_float+0x15c>
 800ebc0:	3201      	adds	r2, #1
 800ebc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ebc6:	60a2      	str	r2, [r4, #8]
 800ebc8:	68a3      	ldr	r3, [r4, #8]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	60a3      	str	r3, [r4, #8]
 800ebce:	6923      	ldr	r3, [r4, #16]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	6123      	str	r3, [r4, #16]
 800ebd4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f8c9 3004 	str.w	r3, [r9, #4]
 800ebe0:	f340 8082 	ble.w	800ece8 <_scanf_float+0x27c>
 800ebe4:	f8d9 3000 	ldr.w	r3, [r9]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	f8c9 3000 	str.w	r3, [r9]
 800ebee:	e762      	b.n	800eab6 <_scanf_float+0x4a>
 800ebf0:	eb1a 0105 	adds.w	r1, sl, r5
 800ebf4:	f47f af6d 	bne.w	800ead2 <_scanf_float+0x66>
 800ebf8:	6822      	ldr	r2, [r4, #0]
 800ebfa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ebfe:	6022      	str	r2, [r4, #0]
 800ec00:	460d      	mov	r5, r1
 800ec02:	468a      	mov	sl, r1
 800ec04:	f806 3b01 	strb.w	r3, [r6], #1
 800ec08:	e7de      	b.n	800ebc8 <_scanf_float+0x15c>
 800ec0a:	6822      	ldr	r2, [r4, #0]
 800ec0c:	0610      	lsls	r0, r2, #24
 800ec0e:	f57f af60 	bpl.w	800ead2 <_scanf_float+0x66>
 800ec12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ec16:	6022      	str	r2, [r4, #0]
 800ec18:	e7f4      	b.n	800ec04 <_scanf_float+0x198>
 800ec1a:	f1ba 0f00 	cmp.w	sl, #0
 800ec1e:	d10c      	bne.n	800ec3a <_scanf_float+0x1ce>
 800ec20:	b977      	cbnz	r7, 800ec40 <_scanf_float+0x1d4>
 800ec22:	6822      	ldr	r2, [r4, #0]
 800ec24:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ec28:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ec2c:	d108      	bne.n	800ec40 <_scanf_float+0x1d4>
 800ec2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ec32:	6022      	str	r2, [r4, #0]
 800ec34:	f04f 0a01 	mov.w	sl, #1
 800ec38:	e7e4      	b.n	800ec04 <_scanf_float+0x198>
 800ec3a:	f1ba 0f02 	cmp.w	sl, #2
 800ec3e:	d050      	beq.n	800ece2 <_scanf_float+0x276>
 800ec40:	2d01      	cmp	r5, #1
 800ec42:	d002      	beq.n	800ec4a <_scanf_float+0x1de>
 800ec44:	2d04      	cmp	r5, #4
 800ec46:	f47f af44 	bne.w	800ead2 <_scanf_float+0x66>
 800ec4a:	3501      	adds	r5, #1
 800ec4c:	b2ed      	uxtb	r5, r5
 800ec4e:	e7d9      	b.n	800ec04 <_scanf_float+0x198>
 800ec50:	f1ba 0f01 	cmp.w	sl, #1
 800ec54:	f47f af3d 	bne.w	800ead2 <_scanf_float+0x66>
 800ec58:	f04f 0a02 	mov.w	sl, #2
 800ec5c:	e7d2      	b.n	800ec04 <_scanf_float+0x198>
 800ec5e:	b975      	cbnz	r5, 800ec7e <_scanf_float+0x212>
 800ec60:	2f00      	cmp	r7, #0
 800ec62:	f47f af37 	bne.w	800ead4 <_scanf_float+0x68>
 800ec66:	6822      	ldr	r2, [r4, #0]
 800ec68:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ec6c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ec70:	f040 8103 	bne.w	800ee7a <_scanf_float+0x40e>
 800ec74:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ec78:	6022      	str	r2, [r4, #0]
 800ec7a:	2501      	movs	r5, #1
 800ec7c:	e7c2      	b.n	800ec04 <_scanf_float+0x198>
 800ec7e:	2d03      	cmp	r5, #3
 800ec80:	d0e3      	beq.n	800ec4a <_scanf_float+0x1de>
 800ec82:	2d05      	cmp	r5, #5
 800ec84:	e7df      	b.n	800ec46 <_scanf_float+0x1da>
 800ec86:	2d02      	cmp	r5, #2
 800ec88:	f47f af23 	bne.w	800ead2 <_scanf_float+0x66>
 800ec8c:	2503      	movs	r5, #3
 800ec8e:	e7b9      	b.n	800ec04 <_scanf_float+0x198>
 800ec90:	2d06      	cmp	r5, #6
 800ec92:	f47f af1e 	bne.w	800ead2 <_scanf_float+0x66>
 800ec96:	2507      	movs	r5, #7
 800ec98:	e7b4      	b.n	800ec04 <_scanf_float+0x198>
 800ec9a:	6822      	ldr	r2, [r4, #0]
 800ec9c:	0591      	lsls	r1, r2, #22
 800ec9e:	f57f af18 	bpl.w	800ead2 <_scanf_float+0x66>
 800eca2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800eca6:	6022      	str	r2, [r4, #0]
 800eca8:	9702      	str	r7, [sp, #8]
 800ecaa:	e7ab      	b.n	800ec04 <_scanf_float+0x198>
 800ecac:	6822      	ldr	r2, [r4, #0]
 800ecae:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ecb2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ecb6:	d005      	beq.n	800ecc4 <_scanf_float+0x258>
 800ecb8:	0550      	lsls	r0, r2, #21
 800ecba:	f57f af0a 	bpl.w	800ead2 <_scanf_float+0x66>
 800ecbe:	2f00      	cmp	r7, #0
 800ecc0:	f000 80db 	beq.w	800ee7a <_scanf_float+0x40e>
 800ecc4:	0591      	lsls	r1, r2, #22
 800ecc6:	bf58      	it	pl
 800ecc8:	9902      	ldrpl	r1, [sp, #8]
 800ecca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ecce:	bf58      	it	pl
 800ecd0:	1a79      	subpl	r1, r7, r1
 800ecd2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ecd6:	bf58      	it	pl
 800ecd8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ecdc:	6022      	str	r2, [r4, #0]
 800ecde:	2700      	movs	r7, #0
 800ece0:	e790      	b.n	800ec04 <_scanf_float+0x198>
 800ece2:	f04f 0a03 	mov.w	sl, #3
 800ece6:	e78d      	b.n	800ec04 <_scanf_float+0x198>
 800ece8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ecec:	4649      	mov	r1, r9
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4798      	blx	r3
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	f43f aedf 	beq.w	800eab6 <_scanf_float+0x4a>
 800ecf8:	e6eb      	b.n	800ead2 <_scanf_float+0x66>
 800ecfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ecfe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed02:	464a      	mov	r2, r9
 800ed04:	4640      	mov	r0, r8
 800ed06:	4798      	blx	r3
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	6123      	str	r3, [r4, #16]
 800ed0e:	e6eb      	b.n	800eae8 <_scanf_float+0x7c>
 800ed10:	1e6b      	subs	r3, r5, #1
 800ed12:	2b06      	cmp	r3, #6
 800ed14:	d824      	bhi.n	800ed60 <_scanf_float+0x2f4>
 800ed16:	2d02      	cmp	r5, #2
 800ed18:	d836      	bhi.n	800ed88 <_scanf_float+0x31c>
 800ed1a:	9b01      	ldr	r3, [sp, #4]
 800ed1c:	429e      	cmp	r6, r3
 800ed1e:	f67f aee7 	bls.w	800eaf0 <_scanf_float+0x84>
 800ed22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed2a:	464a      	mov	r2, r9
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	4798      	blx	r3
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	3b01      	subs	r3, #1
 800ed34:	6123      	str	r3, [r4, #16]
 800ed36:	e7f0      	b.n	800ed1a <_scanf_float+0x2ae>
 800ed38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800ed40:	464a      	mov	r2, r9
 800ed42:	4640      	mov	r0, r8
 800ed44:	4798      	blx	r3
 800ed46:	6923      	ldr	r3, [r4, #16]
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	6123      	str	r3, [r4, #16]
 800ed4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed50:	fa5f fa8a 	uxtb.w	sl, sl
 800ed54:	f1ba 0f02 	cmp.w	sl, #2
 800ed58:	d1ee      	bne.n	800ed38 <_scanf_float+0x2cc>
 800ed5a:	3d03      	subs	r5, #3
 800ed5c:	b2ed      	uxtb	r5, r5
 800ed5e:	1b76      	subs	r6, r6, r5
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	05da      	lsls	r2, r3, #23
 800ed64:	d530      	bpl.n	800edc8 <_scanf_float+0x35c>
 800ed66:	055b      	lsls	r3, r3, #21
 800ed68:	d511      	bpl.n	800ed8e <_scanf_float+0x322>
 800ed6a:	9b01      	ldr	r3, [sp, #4]
 800ed6c:	429e      	cmp	r6, r3
 800ed6e:	f67f aebf 	bls.w	800eaf0 <_scanf_float+0x84>
 800ed72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ed76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ed7a:	464a      	mov	r2, r9
 800ed7c:	4640      	mov	r0, r8
 800ed7e:	4798      	blx	r3
 800ed80:	6923      	ldr	r3, [r4, #16]
 800ed82:	3b01      	subs	r3, #1
 800ed84:	6123      	str	r3, [r4, #16]
 800ed86:	e7f0      	b.n	800ed6a <_scanf_float+0x2fe>
 800ed88:	46aa      	mov	sl, r5
 800ed8a:	46b3      	mov	fp, r6
 800ed8c:	e7de      	b.n	800ed4c <_scanf_float+0x2e0>
 800ed8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ed92:	6923      	ldr	r3, [r4, #16]
 800ed94:	2965      	cmp	r1, #101	@ 0x65
 800ed96:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed9a:	f106 35ff 	add.w	r5, r6, #4294967295
 800ed9e:	6123      	str	r3, [r4, #16]
 800eda0:	d00c      	beq.n	800edbc <_scanf_float+0x350>
 800eda2:	2945      	cmp	r1, #69	@ 0x45
 800eda4:	d00a      	beq.n	800edbc <_scanf_float+0x350>
 800eda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800edaa:	464a      	mov	r2, r9
 800edac:	4640      	mov	r0, r8
 800edae:	4798      	blx	r3
 800edb0:	6923      	ldr	r3, [r4, #16]
 800edb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800edb6:	3b01      	subs	r3, #1
 800edb8:	1eb5      	subs	r5, r6, #2
 800edba:	6123      	str	r3, [r4, #16]
 800edbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800edc0:	464a      	mov	r2, r9
 800edc2:	4640      	mov	r0, r8
 800edc4:	4798      	blx	r3
 800edc6:	462e      	mov	r6, r5
 800edc8:	6822      	ldr	r2, [r4, #0]
 800edca:	f012 0210 	ands.w	r2, r2, #16
 800edce:	d001      	beq.n	800edd4 <_scanf_float+0x368>
 800edd0:	2000      	movs	r0, #0
 800edd2:	e68e      	b.n	800eaf2 <_scanf_float+0x86>
 800edd4:	7032      	strb	r2, [r6, #0]
 800edd6:	6823      	ldr	r3, [r4, #0]
 800edd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800eddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ede0:	d125      	bne.n	800ee2e <_scanf_float+0x3c2>
 800ede2:	9b02      	ldr	r3, [sp, #8]
 800ede4:	429f      	cmp	r7, r3
 800ede6:	d00a      	beq.n	800edfe <_scanf_float+0x392>
 800ede8:	1bda      	subs	r2, r3, r7
 800edea:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800edee:	429e      	cmp	r6, r3
 800edf0:	bf28      	it	cs
 800edf2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800edf6:	4922      	ldr	r1, [pc, #136]	@ (800ee80 <_scanf_float+0x414>)
 800edf8:	4630      	mov	r0, r6
 800edfa:	f000 f977 	bl	800f0ec <siprintf>
 800edfe:	9901      	ldr	r1, [sp, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	4640      	mov	r0, r8
 800ee04:	f002 fd04 	bl	8011810 <_strtod_r>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	6821      	ldr	r1, [r4, #0]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f011 0f02 	tst.w	r1, #2
 800ee12:	ec57 6b10 	vmov	r6, r7, d0
 800ee16:	f103 0204 	add.w	r2, r3, #4
 800ee1a:	d015      	beq.n	800ee48 <_scanf_float+0x3dc>
 800ee1c:	9903      	ldr	r1, [sp, #12]
 800ee1e:	600a      	str	r2, [r1, #0]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	e9c3 6700 	strd	r6, r7, [r3]
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	60e3      	str	r3, [r4, #12]
 800ee2c:	e7d0      	b.n	800edd0 <_scanf_float+0x364>
 800ee2e:	9b04      	ldr	r3, [sp, #16]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d0e4      	beq.n	800edfe <_scanf_float+0x392>
 800ee34:	9905      	ldr	r1, [sp, #20]
 800ee36:	230a      	movs	r3, #10
 800ee38:	3101      	adds	r1, #1
 800ee3a:	4640      	mov	r0, r8
 800ee3c:	f002 fd68 	bl	8011910 <_strtol_r>
 800ee40:	9b04      	ldr	r3, [sp, #16]
 800ee42:	9e05      	ldr	r6, [sp, #20]
 800ee44:	1ac2      	subs	r2, r0, r3
 800ee46:	e7d0      	b.n	800edea <_scanf_float+0x37e>
 800ee48:	f011 0f04 	tst.w	r1, #4
 800ee4c:	9903      	ldr	r1, [sp, #12]
 800ee4e:	600a      	str	r2, [r1, #0]
 800ee50:	d1e6      	bne.n	800ee20 <_scanf_float+0x3b4>
 800ee52:	681d      	ldr	r5, [r3, #0]
 800ee54:	4632      	mov	r2, r6
 800ee56:	463b      	mov	r3, r7
 800ee58:	4630      	mov	r0, r6
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	f7f1 fe66 	bl	8000b2c <__aeabi_dcmpun>
 800ee60:	b128      	cbz	r0, 800ee6e <_scanf_float+0x402>
 800ee62:	4808      	ldr	r0, [pc, #32]	@ (800ee84 <_scanf_float+0x418>)
 800ee64:	f000 faca 	bl	800f3fc <nanf>
 800ee68:	ed85 0a00 	vstr	s0, [r5]
 800ee6c:	e7db      	b.n	800ee26 <_scanf_float+0x3ba>
 800ee6e:	4630      	mov	r0, r6
 800ee70:	4639      	mov	r1, r7
 800ee72:	f7f1 feb9 	bl	8000be8 <__aeabi_d2f>
 800ee76:	6028      	str	r0, [r5, #0]
 800ee78:	e7d5      	b.n	800ee26 <_scanf_float+0x3ba>
 800ee7a:	2700      	movs	r7, #0
 800ee7c:	e62e      	b.n	800eadc <_scanf_float+0x70>
 800ee7e:	bf00      	nop
 800ee80:	0801310c 	.word	0x0801310c
 800ee84:	0801324d 	.word	0x0801324d

0800ee88 <std>:
 800ee88:	2300      	movs	r3, #0
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee96:	6083      	str	r3, [r0, #8]
 800ee98:	8181      	strh	r1, [r0, #12]
 800ee9a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ee9c:	81c2      	strh	r2, [r0, #14]
 800ee9e:	6183      	str	r3, [r0, #24]
 800eea0:	4619      	mov	r1, r3
 800eea2:	2208      	movs	r2, #8
 800eea4:	305c      	adds	r0, #92	@ 0x5c
 800eea6:	f000 fa1b 	bl	800f2e0 <memset>
 800eeaa:	4b0d      	ldr	r3, [pc, #52]	@ (800eee0 <std+0x58>)
 800eeac:	6263      	str	r3, [r4, #36]	@ 0x24
 800eeae:	4b0d      	ldr	r3, [pc, #52]	@ (800eee4 <std+0x5c>)
 800eeb0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eeb2:	4b0d      	ldr	r3, [pc, #52]	@ (800eee8 <std+0x60>)
 800eeb4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800eeec <std+0x64>)
 800eeb8:	6323      	str	r3, [r4, #48]	@ 0x30
 800eeba:	4b0d      	ldr	r3, [pc, #52]	@ (800eef0 <std+0x68>)
 800eebc:	6224      	str	r4, [r4, #32]
 800eebe:	429c      	cmp	r4, r3
 800eec0:	d006      	beq.n	800eed0 <std+0x48>
 800eec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800eec6:	4294      	cmp	r4, r2
 800eec8:	d002      	beq.n	800eed0 <std+0x48>
 800eeca:	33d0      	adds	r3, #208	@ 0xd0
 800eecc:	429c      	cmp	r4, r3
 800eece:	d105      	bne.n	800eedc <std+0x54>
 800eed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800eed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eed8:	f000 ba7e 	b.w	800f3d8 <__retarget_lock_init_recursive>
 800eedc:	bd10      	pop	{r4, pc}
 800eede:	bf00      	nop
 800eee0:	0800f131 	.word	0x0800f131
 800eee4:	0800f153 	.word	0x0800f153
 800eee8:	0800f18b 	.word	0x0800f18b
 800eeec:	0800f1af 	.word	0x0800f1af
 800eef0:	200022d0 	.word	0x200022d0

0800eef4 <stdio_exit_handler>:
 800eef4:	4a02      	ldr	r2, [pc, #8]	@ (800ef00 <stdio_exit_handler+0xc>)
 800eef6:	4903      	ldr	r1, [pc, #12]	@ (800ef04 <stdio_exit_handler+0x10>)
 800eef8:	4803      	ldr	r0, [pc, #12]	@ (800ef08 <stdio_exit_handler+0x14>)
 800eefa:	f000 b869 	b.w	800efd0 <_fwalk_sglue>
 800eefe:	bf00      	nop
 800ef00:	20000108 	.word	0x20000108
 800ef04:	08011f51 	.word	0x08011f51
 800ef08:	20000118 	.word	0x20000118

0800ef0c <cleanup_stdio>:
 800ef0c:	6841      	ldr	r1, [r0, #4]
 800ef0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ef40 <cleanup_stdio+0x34>)
 800ef10:	4299      	cmp	r1, r3
 800ef12:	b510      	push	{r4, lr}
 800ef14:	4604      	mov	r4, r0
 800ef16:	d001      	beq.n	800ef1c <cleanup_stdio+0x10>
 800ef18:	f003 f81a 	bl	8011f50 <_fflush_r>
 800ef1c:	68a1      	ldr	r1, [r4, #8]
 800ef1e:	4b09      	ldr	r3, [pc, #36]	@ (800ef44 <cleanup_stdio+0x38>)
 800ef20:	4299      	cmp	r1, r3
 800ef22:	d002      	beq.n	800ef2a <cleanup_stdio+0x1e>
 800ef24:	4620      	mov	r0, r4
 800ef26:	f003 f813 	bl	8011f50 <_fflush_r>
 800ef2a:	68e1      	ldr	r1, [r4, #12]
 800ef2c:	4b06      	ldr	r3, [pc, #24]	@ (800ef48 <cleanup_stdio+0x3c>)
 800ef2e:	4299      	cmp	r1, r3
 800ef30:	d004      	beq.n	800ef3c <cleanup_stdio+0x30>
 800ef32:	4620      	mov	r0, r4
 800ef34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef38:	f003 b80a 	b.w	8011f50 <_fflush_r>
 800ef3c:	bd10      	pop	{r4, pc}
 800ef3e:	bf00      	nop
 800ef40:	200022d0 	.word	0x200022d0
 800ef44:	20002338 	.word	0x20002338
 800ef48:	200023a0 	.word	0x200023a0

0800ef4c <global_stdio_init.part.0>:
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	4b0b      	ldr	r3, [pc, #44]	@ (800ef7c <global_stdio_init.part.0+0x30>)
 800ef50:	4c0b      	ldr	r4, [pc, #44]	@ (800ef80 <global_stdio_init.part.0+0x34>)
 800ef52:	4a0c      	ldr	r2, [pc, #48]	@ (800ef84 <global_stdio_init.part.0+0x38>)
 800ef54:	601a      	str	r2, [r3, #0]
 800ef56:	4620      	mov	r0, r4
 800ef58:	2200      	movs	r2, #0
 800ef5a:	2104      	movs	r1, #4
 800ef5c:	f7ff ff94 	bl	800ee88 <std>
 800ef60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ef64:	2201      	movs	r2, #1
 800ef66:	2109      	movs	r1, #9
 800ef68:	f7ff ff8e 	bl	800ee88 <std>
 800ef6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ef70:	2202      	movs	r2, #2
 800ef72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef76:	2112      	movs	r1, #18
 800ef78:	f7ff bf86 	b.w	800ee88 <std>
 800ef7c:	20002408 	.word	0x20002408
 800ef80:	200022d0 	.word	0x200022d0
 800ef84:	0800eef5 	.word	0x0800eef5

0800ef88 <__sfp_lock_acquire>:
 800ef88:	4801      	ldr	r0, [pc, #4]	@ (800ef90 <__sfp_lock_acquire+0x8>)
 800ef8a:	f000 ba26 	b.w	800f3da <__retarget_lock_acquire_recursive>
 800ef8e:	bf00      	nop
 800ef90:	20002411 	.word	0x20002411

0800ef94 <__sfp_lock_release>:
 800ef94:	4801      	ldr	r0, [pc, #4]	@ (800ef9c <__sfp_lock_release+0x8>)
 800ef96:	f000 ba21 	b.w	800f3dc <__retarget_lock_release_recursive>
 800ef9a:	bf00      	nop
 800ef9c:	20002411 	.word	0x20002411

0800efa0 <__sinit>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	4604      	mov	r4, r0
 800efa4:	f7ff fff0 	bl	800ef88 <__sfp_lock_acquire>
 800efa8:	6a23      	ldr	r3, [r4, #32]
 800efaa:	b11b      	cbz	r3, 800efb4 <__sinit+0x14>
 800efac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efb0:	f7ff bff0 	b.w	800ef94 <__sfp_lock_release>
 800efb4:	4b04      	ldr	r3, [pc, #16]	@ (800efc8 <__sinit+0x28>)
 800efb6:	6223      	str	r3, [r4, #32]
 800efb8:	4b04      	ldr	r3, [pc, #16]	@ (800efcc <__sinit+0x2c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1f5      	bne.n	800efac <__sinit+0xc>
 800efc0:	f7ff ffc4 	bl	800ef4c <global_stdio_init.part.0>
 800efc4:	e7f2      	b.n	800efac <__sinit+0xc>
 800efc6:	bf00      	nop
 800efc8:	0800ef0d 	.word	0x0800ef0d
 800efcc:	20002408 	.word	0x20002408

0800efd0 <_fwalk_sglue>:
 800efd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efd4:	4607      	mov	r7, r0
 800efd6:	4688      	mov	r8, r1
 800efd8:	4614      	mov	r4, r2
 800efda:	2600      	movs	r6, #0
 800efdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efe0:	f1b9 0901 	subs.w	r9, r9, #1
 800efe4:	d505      	bpl.n	800eff2 <_fwalk_sglue+0x22>
 800efe6:	6824      	ldr	r4, [r4, #0]
 800efe8:	2c00      	cmp	r4, #0
 800efea:	d1f7      	bne.n	800efdc <_fwalk_sglue+0xc>
 800efec:	4630      	mov	r0, r6
 800efee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eff2:	89ab      	ldrh	r3, [r5, #12]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d907      	bls.n	800f008 <_fwalk_sglue+0x38>
 800eff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800effc:	3301      	adds	r3, #1
 800effe:	d003      	beq.n	800f008 <_fwalk_sglue+0x38>
 800f000:	4629      	mov	r1, r5
 800f002:	4638      	mov	r0, r7
 800f004:	47c0      	blx	r8
 800f006:	4306      	orrs	r6, r0
 800f008:	3568      	adds	r5, #104	@ 0x68
 800f00a:	e7e9      	b.n	800efe0 <_fwalk_sglue+0x10>

0800f00c <iprintf>:
 800f00c:	b40f      	push	{r0, r1, r2, r3}
 800f00e:	b507      	push	{r0, r1, r2, lr}
 800f010:	4906      	ldr	r1, [pc, #24]	@ (800f02c <iprintf+0x20>)
 800f012:	ab04      	add	r3, sp, #16
 800f014:	6808      	ldr	r0, [r1, #0]
 800f016:	f853 2b04 	ldr.w	r2, [r3], #4
 800f01a:	6881      	ldr	r1, [r0, #8]
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	f002 fdfb 	bl	8011c18 <_vfiprintf_r>
 800f022:	b003      	add	sp, #12
 800f024:	f85d eb04 	ldr.w	lr, [sp], #4
 800f028:	b004      	add	sp, #16
 800f02a:	4770      	bx	lr
 800f02c:	20000114 	.word	0x20000114

0800f030 <_puts_r>:
 800f030:	6a03      	ldr	r3, [r0, #32]
 800f032:	b570      	push	{r4, r5, r6, lr}
 800f034:	6884      	ldr	r4, [r0, #8]
 800f036:	4605      	mov	r5, r0
 800f038:	460e      	mov	r6, r1
 800f03a:	b90b      	cbnz	r3, 800f040 <_puts_r+0x10>
 800f03c:	f7ff ffb0 	bl	800efa0 <__sinit>
 800f040:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f042:	07db      	lsls	r3, r3, #31
 800f044:	d405      	bmi.n	800f052 <_puts_r+0x22>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	0598      	lsls	r0, r3, #22
 800f04a:	d402      	bmi.n	800f052 <_puts_r+0x22>
 800f04c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f04e:	f000 f9c4 	bl	800f3da <__retarget_lock_acquire_recursive>
 800f052:	89a3      	ldrh	r3, [r4, #12]
 800f054:	0719      	lsls	r1, r3, #28
 800f056:	d502      	bpl.n	800f05e <_puts_r+0x2e>
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d135      	bne.n	800f0ca <_puts_r+0x9a>
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f000 f8e7 	bl	800f234 <__swsetup_r>
 800f066:	b380      	cbz	r0, 800f0ca <_puts_r+0x9a>
 800f068:	f04f 35ff 	mov.w	r5, #4294967295
 800f06c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f06e:	07da      	lsls	r2, r3, #31
 800f070:	d405      	bmi.n	800f07e <_puts_r+0x4e>
 800f072:	89a3      	ldrh	r3, [r4, #12]
 800f074:	059b      	lsls	r3, r3, #22
 800f076:	d402      	bmi.n	800f07e <_puts_r+0x4e>
 800f078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f07a:	f000 f9af 	bl	800f3dc <__retarget_lock_release_recursive>
 800f07e:	4628      	mov	r0, r5
 800f080:	bd70      	pop	{r4, r5, r6, pc}
 800f082:	2b00      	cmp	r3, #0
 800f084:	da04      	bge.n	800f090 <_puts_r+0x60>
 800f086:	69a2      	ldr	r2, [r4, #24]
 800f088:	429a      	cmp	r2, r3
 800f08a:	dc17      	bgt.n	800f0bc <_puts_r+0x8c>
 800f08c:	290a      	cmp	r1, #10
 800f08e:	d015      	beq.n	800f0bc <_puts_r+0x8c>
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	1c5a      	adds	r2, r3, #1
 800f094:	6022      	str	r2, [r4, #0]
 800f096:	7019      	strb	r1, [r3, #0]
 800f098:	68a3      	ldr	r3, [r4, #8]
 800f09a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	60a3      	str	r3, [r4, #8]
 800f0a2:	2900      	cmp	r1, #0
 800f0a4:	d1ed      	bne.n	800f082 <_puts_r+0x52>
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	da11      	bge.n	800f0ce <_puts_r+0x9e>
 800f0aa:	4622      	mov	r2, r4
 800f0ac:	210a      	movs	r1, #10
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f000 f881 	bl	800f1b6 <__swbuf_r>
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	d0d7      	beq.n	800f068 <_puts_r+0x38>
 800f0b8:	250a      	movs	r5, #10
 800f0ba:	e7d7      	b.n	800f06c <_puts_r+0x3c>
 800f0bc:	4622      	mov	r2, r4
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f000 f879 	bl	800f1b6 <__swbuf_r>
 800f0c4:	3001      	adds	r0, #1
 800f0c6:	d1e7      	bne.n	800f098 <_puts_r+0x68>
 800f0c8:	e7ce      	b.n	800f068 <_puts_r+0x38>
 800f0ca:	3e01      	subs	r6, #1
 800f0cc:	e7e4      	b.n	800f098 <_puts_r+0x68>
 800f0ce:	6823      	ldr	r3, [r4, #0]
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	6022      	str	r2, [r4, #0]
 800f0d4:	220a      	movs	r2, #10
 800f0d6:	701a      	strb	r2, [r3, #0]
 800f0d8:	e7ee      	b.n	800f0b8 <_puts_r+0x88>
	...

0800f0dc <puts>:
 800f0dc:	4b02      	ldr	r3, [pc, #8]	@ (800f0e8 <puts+0xc>)
 800f0de:	4601      	mov	r1, r0
 800f0e0:	6818      	ldr	r0, [r3, #0]
 800f0e2:	f7ff bfa5 	b.w	800f030 <_puts_r>
 800f0e6:	bf00      	nop
 800f0e8:	20000114 	.word	0x20000114

0800f0ec <siprintf>:
 800f0ec:	b40e      	push	{r1, r2, r3}
 800f0ee:	b510      	push	{r4, lr}
 800f0f0:	b09d      	sub	sp, #116	@ 0x74
 800f0f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f0f4:	9002      	str	r0, [sp, #8]
 800f0f6:	9006      	str	r0, [sp, #24]
 800f0f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f0fc:	480a      	ldr	r0, [pc, #40]	@ (800f128 <siprintf+0x3c>)
 800f0fe:	9107      	str	r1, [sp, #28]
 800f100:	9104      	str	r1, [sp, #16]
 800f102:	490a      	ldr	r1, [pc, #40]	@ (800f12c <siprintf+0x40>)
 800f104:	f853 2b04 	ldr.w	r2, [r3], #4
 800f108:	9105      	str	r1, [sp, #20]
 800f10a:	2400      	movs	r4, #0
 800f10c:	a902      	add	r1, sp, #8
 800f10e:	6800      	ldr	r0, [r0, #0]
 800f110:	9301      	str	r3, [sp, #4]
 800f112:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f114:	f002 fc5a 	bl	80119cc <_svfiprintf_r>
 800f118:	9b02      	ldr	r3, [sp, #8]
 800f11a:	701c      	strb	r4, [r3, #0]
 800f11c:	b01d      	add	sp, #116	@ 0x74
 800f11e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f122:	b003      	add	sp, #12
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop
 800f128:	20000114 	.word	0x20000114
 800f12c:	ffff0208 	.word	0xffff0208

0800f130 <__sread>:
 800f130:	b510      	push	{r4, lr}
 800f132:	460c      	mov	r4, r1
 800f134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f138:	f000 f900 	bl	800f33c <_read_r>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	bfab      	itete	ge
 800f140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f142:	89a3      	ldrhlt	r3, [r4, #12]
 800f144:	181b      	addge	r3, r3, r0
 800f146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f14a:	bfac      	ite	ge
 800f14c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f14e:	81a3      	strhlt	r3, [r4, #12]
 800f150:	bd10      	pop	{r4, pc}

0800f152 <__swrite>:
 800f152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f156:	461f      	mov	r7, r3
 800f158:	898b      	ldrh	r3, [r1, #12]
 800f15a:	05db      	lsls	r3, r3, #23
 800f15c:	4605      	mov	r5, r0
 800f15e:	460c      	mov	r4, r1
 800f160:	4616      	mov	r6, r2
 800f162:	d505      	bpl.n	800f170 <__swrite+0x1e>
 800f164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f168:	2302      	movs	r3, #2
 800f16a:	2200      	movs	r2, #0
 800f16c:	f000 f8d4 	bl	800f318 <_lseek_r>
 800f170:	89a3      	ldrh	r3, [r4, #12]
 800f172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f17a:	81a3      	strh	r3, [r4, #12]
 800f17c:	4632      	mov	r2, r6
 800f17e:	463b      	mov	r3, r7
 800f180:	4628      	mov	r0, r5
 800f182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f186:	f000 b8eb 	b.w	800f360 <_write_r>

0800f18a <__sseek>:
 800f18a:	b510      	push	{r4, lr}
 800f18c:	460c      	mov	r4, r1
 800f18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f192:	f000 f8c1 	bl	800f318 <_lseek_r>
 800f196:	1c43      	adds	r3, r0, #1
 800f198:	89a3      	ldrh	r3, [r4, #12]
 800f19a:	bf15      	itete	ne
 800f19c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f19e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f1a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f1a6:	81a3      	strheq	r3, [r4, #12]
 800f1a8:	bf18      	it	ne
 800f1aa:	81a3      	strhne	r3, [r4, #12]
 800f1ac:	bd10      	pop	{r4, pc}

0800f1ae <__sclose>:
 800f1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b2:	f000 b8a1 	b.w	800f2f8 <_close_r>

0800f1b6 <__swbuf_r>:
 800f1b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b8:	460e      	mov	r6, r1
 800f1ba:	4614      	mov	r4, r2
 800f1bc:	4605      	mov	r5, r0
 800f1be:	b118      	cbz	r0, 800f1c8 <__swbuf_r+0x12>
 800f1c0:	6a03      	ldr	r3, [r0, #32]
 800f1c2:	b90b      	cbnz	r3, 800f1c8 <__swbuf_r+0x12>
 800f1c4:	f7ff feec 	bl	800efa0 <__sinit>
 800f1c8:	69a3      	ldr	r3, [r4, #24]
 800f1ca:	60a3      	str	r3, [r4, #8]
 800f1cc:	89a3      	ldrh	r3, [r4, #12]
 800f1ce:	071a      	lsls	r2, r3, #28
 800f1d0:	d501      	bpl.n	800f1d6 <__swbuf_r+0x20>
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	b943      	cbnz	r3, 800f1e8 <__swbuf_r+0x32>
 800f1d6:	4621      	mov	r1, r4
 800f1d8:	4628      	mov	r0, r5
 800f1da:	f000 f82b 	bl	800f234 <__swsetup_r>
 800f1de:	b118      	cbz	r0, 800f1e8 <__swbuf_r+0x32>
 800f1e0:	f04f 37ff 	mov.w	r7, #4294967295
 800f1e4:	4638      	mov	r0, r7
 800f1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	6922      	ldr	r2, [r4, #16]
 800f1ec:	1a98      	subs	r0, r3, r2
 800f1ee:	6963      	ldr	r3, [r4, #20]
 800f1f0:	b2f6      	uxtb	r6, r6
 800f1f2:	4283      	cmp	r3, r0
 800f1f4:	4637      	mov	r7, r6
 800f1f6:	dc05      	bgt.n	800f204 <__swbuf_r+0x4e>
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4628      	mov	r0, r5
 800f1fc:	f002 fea8 	bl	8011f50 <_fflush_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	d1ed      	bne.n	800f1e0 <__swbuf_r+0x2a>
 800f204:	68a3      	ldr	r3, [r4, #8]
 800f206:	3b01      	subs	r3, #1
 800f208:	60a3      	str	r3, [r4, #8]
 800f20a:	6823      	ldr	r3, [r4, #0]
 800f20c:	1c5a      	adds	r2, r3, #1
 800f20e:	6022      	str	r2, [r4, #0]
 800f210:	701e      	strb	r6, [r3, #0]
 800f212:	6962      	ldr	r2, [r4, #20]
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	429a      	cmp	r2, r3
 800f218:	d004      	beq.n	800f224 <__swbuf_r+0x6e>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	07db      	lsls	r3, r3, #31
 800f21e:	d5e1      	bpl.n	800f1e4 <__swbuf_r+0x2e>
 800f220:	2e0a      	cmp	r6, #10
 800f222:	d1df      	bne.n	800f1e4 <__swbuf_r+0x2e>
 800f224:	4621      	mov	r1, r4
 800f226:	4628      	mov	r0, r5
 800f228:	f002 fe92 	bl	8011f50 <_fflush_r>
 800f22c:	2800      	cmp	r0, #0
 800f22e:	d0d9      	beq.n	800f1e4 <__swbuf_r+0x2e>
 800f230:	e7d6      	b.n	800f1e0 <__swbuf_r+0x2a>
	...

0800f234 <__swsetup_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4b29      	ldr	r3, [pc, #164]	@ (800f2dc <__swsetup_r+0xa8>)
 800f238:	4605      	mov	r5, r0
 800f23a:	6818      	ldr	r0, [r3, #0]
 800f23c:	460c      	mov	r4, r1
 800f23e:	b118      	cbz	r0, 800f248 <__swsetup_r+0x14>
 800f240:	6a03      	ldr	r3, [r0, #32]
 800f242:	b90b      	cbnz	r3, 800f248 <__swsetup_r+0x14>
 800f244:	f7ff feac 	bl	800efa0 <__sinit>
 800f248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f24c:	0719      	lsls	r1, r3, #28
 800f24e:	d422      	bmi.n	800f296 <__swsetup_r+0x62>
 800f250:	06da      	lsls	r2, r3, #27
 800f252:	d407      	bmi.n	800f264 <__swsetup_r+0x30>
 800f254:	2209      	movs	r2, #9
 800f256:	602a      	str	r2, [r5, #0]
 800f258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f25c:	81a3      	strh	r3, [r4, #12]
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295
 800f262:	e033      	b.n	800f2cc <__swsetup_r+0x98>
 800f264:	0758      	lsls	r0, r3, #29
 800f266:	d512      	bpl.n	800f28e <__swsetup_r+0x5a>
 800f268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f26a:	b141      	cbz	r1, 800f27e <__swsetup_r+0x4a>
 800f26c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f270:	4299      	cmp	r1, r3
 800f272:	d002      	beq.n	800f27a <__swsetup_r+0x46>
 800f274:	4628      	mov	r0, r5
 800f276:	f000 ff1f 	bl	80100b8 <_free_r>
 800f27a:	2300      	movs	r3, #0
 800f27c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f284:	81a3      	strh	r3, [r4, #12]
 800f286:	2300      	movs	r3, #0
 800f288:	6063      	str	r3, [r4, #4]
 800f28a:	6923      	ldr	r3, [r4, #16]
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f043 0308 	orr.w	r3, r3, #8
 800f294:	81a3      	strh	r3, [r4, #12]
 800f296:	6923      	ldr	r3, [r4, #16]
 800f298:	b94b      	cbnz	r3, 800f2ae <__swsetup_r+0x7a>
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f2a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2a4:	d003      	beq.n	800f2ae <__swsetup_r+0x7a>
 800f2a6:	4621      	mov	r1, r4
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	f002 fe9f 	bl	8011fec <__smakebuf_r>
 800f2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2b2:	f013 0201 	ands.w	r2, r3, #1
 800f2b6:	d00a      	beq.n	800f2ce <__swsetup_r+0x9a>
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	60a2      	str	r2, [r4, #8]
 800f2bc:	6962      	ldr	r2, [r4, #20]
 800f2be:	4252      	negs	r2, r2
 800f2c0:	61a2      	str	r2, [r4, #24]
 800f2c2:	6922      	ldr	r2, [r4, #16]
 800f2c4:	b942      	cbnz	r2, 800f2d8 <__swsetup_r+0xa4>
 800f2c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f2ca:	d1c5      	bne.n	800f258 <__swsetup_r+0x24>
 800f2cc:	bd38      	pop	{r3, r4, r5, pc}
 800f2ce:	0799      	lsls	r1, r3, #30
 800f2d0:	bf58      	it	pl
 800f2d2:	6962      	ldrpl	r2, [r4, #20]
 800f2d4:	60a2      	str	r2, [r4, #8]
 800f2d6:	e7f4      	b.n	800f2c2 <__swsetup_r+0x8e>
 800f2d8:	2000      	movs	r0, #0
 800f2da:	e7f7      	b.n	800f2cc <__swsetup_r+0x98>
 800f2dc:	20000114 	.word	0x20000114

0800f2e0 <memset>:
 800f2e0:	4402      	add	r2, r0
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	4293      	cmp	r3, r2
 800f2e6:	d100      	bne.n	800f2ea <memset+0xa>
 800f2e8:	4770      	bx	lr
 800f2ea:	f803 1b01 	strb.w	r1, [r3], #1
 800f2ee:	e7f9      	b.n	800f2e4 <memset+0x4>

0800f2f0 <_localeconv_r>:
 800f2f0:	4800      	ldr	r0, [pc, #0]	@ (800f2f4 <_localeconv_r+0x4>)
 800f2f2:	4770      	bx	lr
 800f2f4:	20000254 	.word	0x20000254

0800f2f8 <_close_r>:
 800f2f8:	b538      	push	{r3, r4, r5, lr}
 800f2fa:	4d06      	ldr	r5, [pc, #24]	@ (800f314 <_close_r+0x1c>)
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	4604      	mov	r4, r0
 800f300:	4608      	mov	r0, r1
 800f302:	602b      	str	r3, [r5, #0]
 800f304:	f7f2 fe18 	bl	8001f38 <_close>
 800f308:	1c43      	adds	r3, r0, #1
 800f30a:	d102      	bne.n	800f312 <_close_r+0x1a>
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	b103      	cbz	r3, 800f312 <_close_r+0x1a>
 800f310:	6023      	str	r3, [r4, #0]
 800f312:	bd38      	pop	{r3, r4, r5, pc}
 800f314:	2000240c 	.word	0x2000240c

0800f318 <_lseek_r>:
 800f318:	b538      	push	{r3, r4, r5, lr}
 800f31a:	4d07      	ldr	r5, [pc, #28]	@ (800f338 <_lseek_r+0x20>)
 800f31c:	4604      	mov	r4, r0
 800f31e:	4608      	mov	r0, r1
 800f320:	4611      	mov	r1, r2
 800f322:	2200      	movs	r2, #0
 800f324:	602a      	str	r2, [r5, #0]
 800f326:	461a      	mov	r2, r3
 800f328:	f7f2 fe2d 	bl	8001f86 <_lseek>
 800f32c:	1c43      	adds	r3, r0, #1
 800f32e:	d102      	bne.n	800f336 <_lseek_r+0x1e>
 800f330:	682b      	ldr	r3, [r5, #0]
 800f332:	b103      	cbz	r3, 800f336 <_lseek_r+0x1e>
 800f334:	6023      	str	r3, [r4, #0]
 800f336:	bd38      	pop	{r3, r4, r5, pc}
 800f338:	2000240c 	.word	0x2000240c

0800f33c <_read_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d07      	ldr	r5, [pc, #28]	@ (800f35c <_read_r+0x20>)
 800f340:	4604      	mov	r4, r0
 800f342:	4608      	mov	r0, r1
 800f344:	4611      	mov	r1, r2
 800f346:	2200      	movs	r2, #0
 800f348:	602a      	str	r2, [r5, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	f7f2 fdbb 	bl	8001ec6 <_read>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d102      	bne.n	800f35a <_read_r+0x1e>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	b103      	cbz	r3, 800f35a <_read_r+0x1e>
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	2000240c 	.word	0x2000240c

0800f360 <_write_r>:
 800f360:	b538      	push	{r3, r4, r5, lr}
 800f362:	4d07      	ldr	r5, [pc, #28]	@ (800f380 <_write_r+0x20>)
 800f364:	4604      	mov	r4, r0
 800f366:	4608      	mov	r0, r1
 800f368:	4611      	mov	r1, r2
 800f36a:	2200      	movs	r2, #0
 800f36c:	602a      	str	r2, [r5, #0]
 800f36e:	461a      	mov	r2, r3
 800f370:	f7f2 fdc6 	bl	8001f00 <_write>
 800f374:	1c43      	adds	r3, r0, #1
 800f376:	d102      	bne.n	800f37e <_write_r+0x1e>
 800f378:	682b      	ldr	r3, [r5, #0]
 800f37a:	b103      	cbz	r3, 800f37e <_write_r+0x1e>
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	bd38      	pop	{r3, r4, r5, pc}
 800f380:	2000240c 	.word	0x2000240c

0800f384 <__errno>:
 800f384:	4b01      	ldr	r3, [pc, #4]	@ (800f38c <__errno+0x8>)
 800f386:	6818      	ldr	r0, [r3, #0]
 800f388:	4770      	bx	lr
 800f38a:	bf00      	nop
 800f38c:	20000114 	.word	0x20000114

0800f390 <__libc_init_array>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	4d0d      	ldr	r5, [pc, #52]	@ (800f3c8 <__libc_init_array+0x38>)
 800f394:	4c0d      	ldr	r4, [pc, #52]	@ (800f3cc <__libc_init_array+0x3c>)
 800f396:	1b64      	subs	r4, r4, r5
 800f398:	10a4      	asrs	r4, r4, #2
 800f39a:	2600      	movs	r6, #0
 800f39c:	42a6      	cmp	r6, r4
 800f39e:	d109      	bne.n	800f3b4 <__libc_init_array+0x24>
 800f3a0:	4d0b      	ldr	r5, [pc, #44]	@ (800f3d0 <__libc_init_array+0x40>)
 800f3a2:	4c0c      	ldr	r4, [pc, #48]	@ (800f3d4 <__libc_init_array+0x44>)
 800f3a4:	f003 fc90 	bl	8012cc8 <_init>
 800f3a8:	1b64      	subs	r4, r4, r5
 800f3aa:	10a4      	asrs	r4, r4, #2
 800f3ac:	2600      	movs	r6, #0
 800f3ae:	42a6      	cmp	r6, r4
 800f3b0:	d105      	bne.n	800f3be <__libc_init_array+0x2e>
 800f3b2:	bd70      	pop	{r4, r5, r6, pc}
 800f3b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3b8:	4798      	blx	r3
 800f3ba:	3601      	adds	r6, #1
 800f3bc:	e7ee      	b.n	800f39c <__libc_init_array+0xc>
 800f3be:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3c2:	4798      	blx	r3
 800f3c4:	3601      	adds	r6, #1
 800f3c6:	e7f2      	b.n	800f3ae <__libc_init_array+0x1e>
 800f3c8:	08013544 	.word	0x08013544
 800f3cc:	08013544 	.word	0x08013544
 800f3d0:	08013544 	.word	0x08013544
 800f3d4:	08013548 	.word	0x08013548

0800f3d8 <__retarget_lock_init_recursive>:
 800f3d8:	4770      	bx	lr

0800f3da <__retarget_lock_acquire_recursive>:
 800f3da:	4770      	bx	lr

0800f3dc <__retarget_lock_release_recursive>:
 800f3dc:	4770      	bx	lr

0800f3de <memcpy>:
 800f3de:	440a      	add	r2, r1
 800f3e0:	4291      	cmp	r1, r2
 800f3e2:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3e6:	d100      	bne.n	800f3ea <memcpy+0xc>
 800f3e8:	4770      	bx	lr
 800f3ea:	b510      	push	{r4, lr}
 800f3ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3f4:	4291      	cmp	r1, r2
 800f3f6:	d1f9      	bne.n	800f3ec <memcpy+0xe>
 800f3f8:	bd10      	pop	{r4, pc}
	...

0800f3fc <nanf>:
 800f3fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f404 <nanf+0x8>
 800f400:	4770      	bx	lr
 800f402:	bf00      	nop
 800f404:	7fc00000 	.word	0x7fc00000

0800f408 <quorem>:
 800f408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f40c:	6903      	ldr	r3, [r0, #16]
 800f40e:	690c      	ldr	r4, [r1, #16]
 800f410:	42a3      	cmp	r3, r4
 800f412:	4607      	mov	r7, r0
 800f414:	db7e      	blt.n	800f514 <quorem+0x10c>
 800f416:	3c01      	subs	r4, #1
 800f418:	f101 0814 	add.w	r8, r1, #20
 800f41c:	00a3      	lsls	r3, r4, #2
 800f41e:	f100 0514 	add.w	r5, r0, #20
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f42e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f432:	3301      	adds	r3, #1
 800f434:	429a      	cmp	r2, r3
 800f436:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f43a:	fbb2 f6f3 	udiv	r6, r2, r3
 800f43e:	d32e      	bcc.n	800f49e <quorem+0x96>
 800f440:	f04f 0a00 	mov.w	sl, #0
 800f444:	46c4      	mov	ip, r8
 800f446:	46ae      	mov	lr, r5
 800f448:	46d3      	mov	fp, sl
 800f44a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f44e:	b298      	uxth	r0, r3
 800f450:	fb06 a000 	mla	r0, r6, r0, sl
 800f454:	0c02      	lsrs	r2, r0, #16
 800f456:	0c1b      	lsrs	r3, r3, #16
 800f458:	fb06 2303 	mla	r3, r6, r3, r2
 800f45c:	f8de 2000 	ldr.w	r2, [lr]
 800f460:	b280      	uxth	r0, r0
 800f462:	b292      	uxth	r2, r2
 800f464:	1a12      	subs	r2, r2, r0
 800f466:	445a      	add	r2, fp
 800f468:	f8de 0000 	ldr.w	r0, [lr]
 800f46c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f470:	b29b      	uxth	r3, r3
 800f472:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f476:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f47a:	b292      	uxth	r2, r2
 800f47c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f480:	45e1      	cmp	r9, ip
 800f482:	f84e 2b04 	str.w	r2, [lr], #4
 800f486:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f48a:	d2de      	bcs.n	800f44a <quorem+0x42>
 800f48c:	9b00      	ldr	r3, [sp, #0]
 800f48e:	58eb      	ldr	r3, [r5, r3]
 800f490:	b92b      	cbnz	r3, 800f49e <quorem+0x96>
 800f492:	9b01      	ldr	r3, [sp, #4]
 800f494:	3b04      	subs	r3, #4
 800f496:	429d      	cmp	r5, r3
 800f498:	461a      	mov	r2, r3
 800f49a:	d32f      	bcc.n	800f4fc <quorem+0xf4>
 800f49c:	613c      	str	r4, [r7, #16]
 800f49e:	4638      	mov	r0, r7
 800f4a0:	f001 f9c6 	bl	8010830 <__mcmp>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	db25      	blt.n	800f4f4 <quorem+0xec>
 800f4a8:	4629      	mov	r1, r5
 800f4aa:	2000      	movs	r0, #0
 800f4ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4b0:	f8d1 c000 	ldr.w	ip, [r1]
 800f4b4:	fa1f fe82 	uxth.w	lr, r2
 800f4b8:	fa1f f38c 	uxth.w	r3, ip
 800f4bc:	eba3 030e 	sub.w	r3, r3, lr
 800f4c0:	4403      	add	r3, r0
 800f4c2:	0c12      	lsrs	r2, r2, #16
 800f4c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f4c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4d2:	45c1      	cmp	r9, r8
 800f4d4:	f841 3b04 	str.w	r3, [r1], #4
 800f4d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4dc:	d2e6      	bcs.n	800f4ac <quorem+0xa4>
 800f4de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4e6:	b922      	cbnz	r2, 800f4f2 <quorem+0xea>
 800f4e8:	3b04      	subs	r3, #4
 800f4ea:	429d      	cmp	r5, r3
 800f4ec:	461a      	mov	r2, r3
 800f4ee:	d30b      	bcc.n	800f508 <quorem+0x100>
 800f4f0:	613c      	str	r4, [r7, #16]
 800f4f2:	3601      	adds	r6, #1
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	b003      	add	sp, #12
 800f4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4fc:	6812      	ldr	r2, [r2, #0]
 800f4fe:	3b04      	subs	r3, #4
 800f500:	2a00      	cmp	r2, #0
 800f502:	d1cb      	bne.n	800f49c <quorem+0x94>
 800f504:	3c01      	subs	r4, #1
 800f506:	e7c6      	b.n	800f496 <quorem+0x8e>
 800f508:	6812      	ldr	r2, [r2, #0]
 800f50a:	3b04      	subs	r3, #4
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	d1ef      	bne.n	800f4f0 <quorem+0xe8>
 800f510:	3c01      	subs	r4, #1
 800f512:	e7ea      	b.n	800f4ea <quorem+0xe2>
 800f514:	2000      	movs	r0, #0
 800f516:	e7ee      	b.n	800f4f6 <quorem+0xee>

0800f518 <_dtoa_r>:
 800f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f51c:	69c7      	ldr	r7, [r0, #28]
 800f51e:	b097      	sub	sp, #92	@ 0x5c
 800f520:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f524:	ec55 4b10 	vmov	r4, r5, d0
 800f528:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f52a:	9107      	str	r1, [sp, #28]
 800f52c:	4681      	mov	r9, r0
 800f52e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f530:	9311      	str	r3, [sp, #68]	@ 0x44
 800f532:	b97f      	cbnz	r7, 800f554 <_dtoa_r+0x3c>
 800f534:	2010      	movs	r0, #16
 800f536:	f000 fe09 	bl	801014c <malloc>
 800f53a:	4602      	mov	r2, r0
 800f53c:	f8c9 001c 	str.w	r0, [r9, #28]
 800f540:	b920      	cbnz	r0, 800f54c <_dtoa_r+0x34>
 800f542:	4ba9      	ldr	r3, [pc, #676]	@ (800f7e8 <_dtoa_r+0x2d0>)
 800f544:	21ef      	movs	r1, #239	@ 0xef
 800f546:	48a9      	ldr	r0, [pc, #676]	@ (800f7ec <_dtoa_r+0x2d4>)
 800f548:	f002 fdf2 	bl	8012130 <__assert_func>
 800f54c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f550:	6007      	str	r7, [r0, #0]
 800f552:	60c7      	str	r7, [r0, #12]
 800f554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f558:	6819      	ldr	r1, [r3, #0]
 800f55a:	b159      	cbz	r1, 800f574 <_dtoa_r+0x5c>
 800f55c:	685a      	ldr	r2, [r3, #4]
 800f55e:	604a      	str	r2, [r1, #4]
 800f560:	2301      	movs	r3, #1
 800f562:	4093      	lsls	r3, r2
 800f564:	608b      	str	r3, [r1, #8]
 800f566:	4648      	mov	r0, r9
 800f568:	f000 fee6 	bl	8010338 <_Bfree>
 800f56c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f570:	2200      	movs	r2, #0
 800f572:	601a      	str	r2, [r3, #0]
 800f574:	1e2b      	subs	r3, r5, #0
 800f576:	bfb9      	ittee	lt
 800f578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f57c:	9305      	strlt	r3, [sp, #20]
 800f57e:	2300      	movge	r3, #0
 800f580:	6033      	strge	r3, [r6, #0]
 800f582:	9f05      	ldr	r7, [sp, #20]
 800f584:	4b9a      	ldr	r3, [pc, #616]	@ (800f7f0 <_dtoa_r+0x2d8>)
 800f586:	bfbc      	itt	lt
 800f588:	2201      	movlt	r2, #1
 800f58a:	6032      	strlt	r2, [r6, #0]
 800f58c:	43bb      	bics	r3, r7
 800f58e:	d112      	bne.n	800f5b6 <_dtoa_r+0x9e>
 800f590:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f592:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f596:	6013      	str	r3, [r2, #0]
 800f598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f59c:	4323      	orrs	r3, r4
 800f59e:	f000 855a 	beq.w	8010056 <_dtoa_r+0xb3e>
 800f5a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f804 <_dtoa_r+0x2ec>
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 855c 	beq.w	8010066 <_dtoa_r+0xb4e>
 800f5ae:	f10a 0303 	add.w	r3, sl, #3
 800f5b2:	f000 bd56 	b.w	8010062 <_dtoa_r+0xb4a>
 800f5b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	ec51 0b17 	vmov	r0, r1, d7
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f5c6:	f7f1 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ca:	4680      	mov	r8, r0
 800f5cc:	b158      	cbz	r0, 800f5e6 <_dtoa_r+0xce>
 800f5ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	6013      	str	r3, [r2, #0]
 800f5d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5d6:	b113      	cbz	r3, 800f5de <_dtoa_r+0xc6>
 800f5d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f5da:	4b86      	ldr	r3, [pc, #536]	@ (800f7f4 <_dtoa_r+0x2dc>)
 800f5dc:	6013      	str	r3, [r2, #0]
 800f5de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f808 <_dtoa_r+0x2f0>
 800f5e2:	f000 bd40 	b.w	8010066 <_dtoa_r+0xb4e>
 800f5e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f5ea:	aa14      	add	r2, sp, #80	@ 0x50
 800f5ec:	a915      	add	r1, sp, #84	@ 0x54
 800f5ee:	4648      	mov	r0, r9
 800f5f0:	f001 fa3e 	bl	8010a70 <__d2b>
 800f5f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f5f8:	9002      	str	r0, [sp, #8]
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	d078      	beq.n	800f6f0 <_dtoa_r+0x1d8>
 800f5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f600:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f60c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f618:	4619      	mov	r1, r3
 800f61a:	2200      	movs	r2, #0
 800f61c:	4b76      	ldr	r3, [pc, #472]	@ (800f7f8 <_dtoa_r+0x2e0>)
 800f61e:	f7f0 fe33 	bl	8000288 <__aeabi_dsub>
 800f622:	a36b      	add	r3, pc, #428	@ (adr r3, 800f7d0 <_dtoa_r+0x2b8>)
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	f7f0 ffe6 	bl	80005f8 <__aeabi_dmul>
 800f62c:	a36a      	add	r3, pc, #424	@ (adr r3, 800f7d8 <_dtoa_r+0x2c0>)
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f7f0 fe2b 	bl	800028c <__adddf3>
 800f636:	4604      	mov	r4, r0
 800f638:	4630      	mov	r0, r6
 800f63a:	460d      	mov	r5, r1
 800f63c:	f7f0 ff72 	bl	8000524 <__aeabi_i2d>
 800f640:	a367      	add	r3, pc, #412	@ (adr r3, 800f7e0 <_dtoa_r+0x2c8>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	f7f0 ffd7 	bl	80005f8 <__aeabi_dmul>
 800f64a:	4602      	mov	r2, r0
 800f64c:	460b      	mov	r3, r1
 800f64e:	4620      	mov	r0, r4
 800f650:	4629      	mov	r1, r5
 800f652:	f7f0 fe1b 	bl	800028c <__adddf3>
 800f656:	4604      	mov	r4, r0
 800f658:	460d      	mov	r5, r1
 800f65a:	f7f1 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800f65e:	2200      	movs	r2, #0
 800f660:	4607      	mov	r7, r0
 800f662:	2300      	movs	r3, #0
 800f664:	4620      	mov	r0, r4
 800f666:	4629      	mov	r1, r5
 800f668:	f7f1 fa38 	bl	8000adc <__aeabi_dcmplt>
 800f66c:	b140      	cbz	r0, 800f680 <_dtoa_r+0x168>
 800f66e:	4638      	mov	r0, r7
 800f670:	f7f0 ff58 	bl	8000524 <__aeabi_i2d>
 800f674:	4622      	mov	r2, r4
 800f676:	462b      	mov	r3, r5
 800f678:	f7f1 fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800f67c:	b900      	cbnz	r0, 800f680 <_dtoa_r+0x168>
 800f67e:	3f01      	subs	r7, #1
 800f680:	2f16      	cmp	r7, #22
 800f682:	d852      	bhi.n	800f72a <_dtoa_r+0x212>
 800f684:	4b5d      	ldr	r3, [pc, #372]	@ (800f7fc <_dtoa_r+0x2e4>)
 800f686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f692:	f7f1 fa23 	bl	8000adc <__aeabi_dcmplt>
 800f696:	2800      	cmp	r0, #0
 800f698:	d049      	beq.n	800f72e <_dtoa_r+0x216>
 800f69a:	3f01      	subs	r7, #1
 800f69c:	2300      	movs	r3, #0
 800f69e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f6a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6a2:	1b9b      	subs	r3, r3, r6
 800f6a4:	1e5a      	subs	r2, r3, #1
 800f6a6:	bf45      	ittet	mi
 800f6a8:	f1c3 0301 	rsbmi	r3, r3, #1
 800f6ac:	9300      	strmi	r3, [sp, #0]
 800f6ae:	2300      	movpl	r3, #0
 800f6b0:	2300      	movmi	r3, #0
 800f6b2:	9206      	str	r2, [sp, #24]
 800f6b4:	bf54      	ite	pl
 800f6b6:	9300      	strpl	r3, [sp, #0]
 800f6b8:	9306      	strmi	r3, [sp, #24]
 800f6ba:	2f00      	cmp	r7, #0
 800f6bc:	db39      	blt.n	800f732 <_dtoa_r+0x21a>
 800f6be:	9b06      	ldr	r3, [sp, #24]
 800f6c0:	970d      	str	r7, [sp, #52]	@ 0x34
 800f6c2:	443b      	add	r3, r7
 800f6c4:	9306      	str	r3, [sp, #24]
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	9308      	str	r3, [sp, #32]
 800f6ca:	9b07      	ldr	r3, [sp, #28]
 800f6cc:	2b09      	cmp	r3, #9
 800f6ce:	d863      	bhi.n	800f798 <_dtoa_r+0x280>
 800f6d0:	2b05      	cmp	r3, #5
 800f6d2:	bfc4      	itt	gt
 800f6d4:	3b04      	subgt	r3, #4
 800f6d6:	9307      	strgt	r3, [sp, #28]
 800f6d8:	9b07      	ldr	r3, [sp, #28]
 800f6da:	f1a3 0302 	sub.w	r3, r3, #2
 800f6de:	bfcc      	ite	gt
 800f6e0:	2400      	movgt	r4, #0
 800f6e2:	2401      	movle	r4, #1
 800f6e4:	2b03      	cmp	r3, #3
 800f6e6:	d863      	bhi.n	800f7b0 <_dtoa_r+0x298>
 800f6e8:	e8df f003 	tbb	[pc, r3]
 800f6ec:	2b375452 	.word	0x2b375452
 800f6f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f6f4:	441e      	add	r6, r3
 800f6f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f6fa:	2b20      	cmp	r3, #32
 800f6fc:	bfc1      	itttt	gt
 800f6fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f702:	409f      	lslgt	r7, r3
 800f704:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f708:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f70c:	bfd6      	itet	le
 800f70e:	f1c3 0320 	rsble	r3, r3, #32
 800f712:	ea47 0003 	orrgt.w	r0, r7, r3
 800f716:	fa04 f003 	lslle.w	r0, r4, r3
 800f71a:	f7f0 fef3 	bl	8000504 <__aeabi_ui2d>
 800f71e:	2201      	movs	r2, #1
 800f720:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f724:	3e01      	subs	r6, #1
 800f726:	9212      	str	r2, [sp, #72]	@ 0x48
 800f728:	e776      	b.n	800f618 <_dtoa_r+0x100>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e7b7      	b.n	800f69e <_dtoa_r+0x186>
 800f72e:	9010      	str	r0, [sp, #64]	@ 0x40
 800f730:	e7b6      	b.n	800f6a0 <_dtoa_r+0x188>
 800f732:	9b00      	ldr	r3, [sp, #0]
 800f734:	1bdb      	subs	r3, r3, r7
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	427b      	negs	r3, r7
 800f73a:	9308      	str	r3, [sp, #32]
 800f73c:	2300      	movs	r3, #0
 800f73e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f740:	e7c3      	b.n	800f6ca <_dtoa_r+0x1b2>
 800f742:	2301      	movs	r3, #1
 800f744:	9309      	str	r3, [sp, #36]	@ 0x24
 800f746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f748:	eb07 0b03 	add.w	fp, r7, r3
 800f74c:	f10b 0301 	add.w	r3, fp, #1
 800f750:	2b01      	cmp	r3, #1
 800f752:	9303      	str	r3, [sp, #12]
 800f754:	bfb8      	it	lt
 800f756:	2301      	movlt	r3, #1
 800f758:	e006      	b.n	800f768 <_dtoa_r+0x250>
 800f75a:	2301      	movs	r3, #1
 800f75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f75e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f760:	2b00      	cmp	r3, #0
 800f762:	dd28      	ble.n	800f7b6 <_dtoa_r+0x29e>
 800f764:	469b      	mov	fp, r3
 800f766:	9303      	str	r3, [sp, #12]
 800f768:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f76c:	2100      	movs	r1, #0
 800f76e:	2204      	movs	r2, #4
 800f770:	f102 0514 	add.w	r5, r2, #20
 800f774:	429d      	cmp	r5, r3
 800f776:	d926      	bls.n	800f7c6 <_dtoa_r+0x2ae>
 800f778:	6041      	str	r1, [r0, #4]
 800f77a:	4648      	mov	r0, r9
 800f77c:	f000 fd9c 	bl	80102b8 <_Balloc>
 800f780:	4682      	mov	sl, r0
 800f782:	2800      	cmp	r0, #0
 800f784:	d142      	bne.n	800f80c <_dtoa_r+0x2f4>
 800f786:	4b1e      	ldr	r3, [pc, #120]	@ (800f800 <_dtoa_r+0x2e8>)
 800f788:	4602      	mov	r2, r0
 800f78a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f78e:	e6da      	b.n	800f546 <_dtoa_r+0x2e>
 800f790:	2300      	movs	r3, #0
 800f792:	e7e3      	b.n	800f75c <_dtoa_r+0x244>
 800f794:	2300      	movs	r3, #0
 800f796:	e7d5      	b.n	800f744 <_dtoa_r+0x22c>
 800f798:	2401      	movs	r4, #1
 800f79a:	2300      	movs	r3, #0
 800f79c:	9307      	str	r3, [sp, #28]
 800f79e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f7a0:	f04f 3bff 	mov.w	fp, #4294967295
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f8cd b00c 	str.w	fp, [sp, #12]
 800f7aa:	2312      	movs	r3, #18
 800f7ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800f7ae:	e7db      	b.n	800f768 <_dtoa_r+0x250>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7b4:	e7f4      	b.n	800f7a0 <_dtoa_r+0x288>
 800f7b6:	f04f 0b01 	mov.w	fp, #1
 800f7ba:	f8cd b00c 	str.w	fp, [sp, #12]
 800f7be:	465b      	mov	r3, fp
 800f7c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f7c4:	e7d0      	b.n	800f768 <_dtoa_r+0x250>
 800f7c6:	3101      	adds	r1, #1
 800f7c8:	0052      	lsls	r2, r2, #1
 800f7ca:	e7d1      	b.n	800f770 <_dtoa_r+0x258>
 800f7cc:	f3af 8000 	nop.w
 800f7d0:	636f4361 	.word	0x636f4361
 800f7d4:	3fd287a7 	.word	0x3fd287a7
 800f7d8:	8b60c8b3 	.word	0x8b60c8b3
 800f7dc:	3fc68a28 	.word	0x3fc68a28
 800f7e0:	509f79fb 	.word	0x509f79fb
 800f7e4:	3fd34413 	.word	0x3fd34413
 800f7e8:	0801311e 	.word	0x0801311e
 800f7ec:	08013135 	.word	0x08013135
 800f7f0:	7ff00000 	.word	0x7ff00000
 800f7f4:	080130e9 	.word	0x080130e9
 800f7f8:	3ff80000 	.word	0x3ff80000
 800f7fc:	080132e8 	.word	0x080132e8
 800f800:	0801318d 	.word	0x0801318d
 800f804:	0801311a 	.word	0x0801311a
 800f808:	080130e8 	.word	0x080130e8
 800f80c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f810:	6018      	str	r0, [r3, #0]
 800f812:	9b03      	ldr	r3, [sp, #12]
 800f814:	2b0e      	cmp	r3, #14
 800f816:	f200 80a1 	bhi.w	800f95c <_dtoa_r+0x444>
 800f81a:	2c00      	cmp	r4, #0
 800f81c:	f000 809e 	beq.w	800f95c <_dtoa_r+0x444>
 800f820:	2f00      	cmp	r7, #0
 800f822:	dd33      	ble.n	800f88c <_dtoa_r+0x374>
 800f824:	4b9c      	ldr	r3, [pc, #624]	@ (800fa98 <_dtoa_r+0x580>)
 800f826:	f007 020f 	and.w	r2, r7, #15
 800f82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f82e:	ed93 7b00 	vldr	d7, [r3]
 800f832:	05f8      	lsls	r0, r7, #23
 800f834:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f838:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f83c:	d516      	bpl.n	800f86c <_dtoa_r+0x354>
 800f83e:	4b97      	ldr	r3, [pc, #604]	@ (800fa9c <_dtoa_r+0x584>)
 800f840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f848:	f7f1 f800 	bl	800084c <__aeabi_ddiv>
 800f84c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f850:	f004 040f 	and.w	r4, r4, #15
 800f854:	2603      	movs	r6, #3
 800f856:	4d91      	ldr	r5, [pc, #580]	@ (800fa9c <_dtoa_r+0x584>)
 800f858:	b954      	cbnz	r4, 800f870 <_dtoa_r+0x358>
 800f85a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f85e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f862:	f7f0 fff3 	bl	800084c <__aeabi_ddiv>
 800f866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f86a:	e028      	b.n	800f8be <_dtoa_r+0x3a6>
 800f86c:	2602      	movs	r6, #2
 800f86e:	e7f2      	b.n	800f856 <_dtoa_r+0x33e>
 800f870:	07e1      	lsls	r1, r4, #31
 800f872:	d508      	bpl.n	800f886 <_dtoa_r+0x36e>
 800f874:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f87c:	f7f0 febc 	bl	80005f8 <__aeabi_dmul>
 800f880:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f884:	3601      	adds	r6, #1
 800f886:	1064      	asrs	r4, r4, #1
 800f888:	3508      	adds	r5, #8
 800f88a:	e7e5      	b.n	800f858 <_dtoa_r+0x340>
 800f88c:	f000 80af 	beq.w	800f9ee <_dtoa_r+0x4d6>
 800f890:	427c      	negs	r4, r7
 800f892:	4b81      	ldr	r3, [pc, #516]	@ (800fa98 <_dtoa_r+0x580>)
 800f894:	4d81      	ldr	r5, [pc, #516]	@ (800fa9c <_dtoa_r+0x584>)
 800f896:	f004 020f 	and.w	r2, r4, #15
 800f89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f8a6:	f7f0 fea7 	bl	80005f8 <__aeabi_dmul>
 800f8aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8ae:	1124      	asrs	r4, r4, #4
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	2602      	movs	r6, #2
 800f8b4:	2c00      	cmp	r4, #0
 800f8b6:	f040 808f 	bne.w	800f9d8 <_dtoa_r+0x4c0>
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1d3      	bne.n	800f866 <_dtoa_r+0x34e>
 800f8be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 8094 	beq.w	800f9f2 <_dtoa_r+0x4da>
 800f8ca:	4b75      	ldr	r3, [pc, #468]	@ (800faa0 <_dtoa_r+0x588>)
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	f7f1 f903 	bl	8000adc <__aeabi_dcmplt>
 800f8d6:	2800      	cmp	r0, #0
 800f8d8:	f000 808b 	beq.w	800f9f2 <_dtoa_r+0x4da>
 800f8dc:	9b03      	ldr	r3, [sp, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 8087 	beq.w	800f9f2 <_dtoa_r+0x4da>
 800f8e4:	f1bb 0f00 	cmp.w	fp, #0
 800f8e8:	dd34      	ble.n	800f954 <_dtoa_r+0x43c>
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	4b6d      	ldr	r3, [pc, #436]	@ (800faa4 <_dtoa_r+0x58c>)
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	f7f0 fe81 	bl	80005f8 <__aeabi_dmul>
 800f8f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8fa:	f107 38ff 	add.w	r8, r7, #4294967295
 800f8fe:	3601      	adds	r6, #1
 800f900:	465c      	mov	r4, fp
 800f902:	4630      	mov	r0, r6
 800f904:	f7f0 fe0e 	bl	8000524 <__aeabi_i2d>
 800f908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f90c:	f7f0 fe74 	bl	80005f8 <__aeabi_dmul>
 800f910:	4b65      	ldr	r3, [pc, #404]	@ (800faa8 <_dtoa_r+0x590>)
 800f912:	2200      	movs	r2, #0
 800f914:	f7f0 fcba 	bl	800028c <__adddf3>
 800f918:	4605      	mov	r5, r0
 800f91a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f91e:	2c00      	cmp	r4, #0
 800f920:	d16a      	bne.n	800f9f8 <_dtoa_r+0x4e0>
 800f922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f926:	4b61      	ldr	r3, [pc, #388]	@ (800faac <_dtoa_r+0x594>)
 800f928:	2200      	movs	r2, #0
 800f92a:	f7f0 fcad 	bl	8000288 <__aeabi_dsub>
 800f92e:	4602      	mov	r2, r0
 800f930:	460b      	mov	r3, r1
 800f932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f936:	462a      	mov	r2, r5
 800f938:	4633      	mov	r3, r6
 800f93a:	f7f1 f8ed 	bl	8000b18 <__aeabi_dcmpgt>
 800f93e:	2800      	cmp	r0, #0
 800f940:	f040 8298 	bne.w	800fe74 <_dtoa_r+0x95c>
 800f944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f948:	462a      	mov	r2, r5
 800f94a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f94e:	f7f1 f8c5 	bl	8000adc <__aeabi_dcmplt>
 800f952:	bb38      	cbnz	r0, 800f9a4 <_dtoa_r+0x48c>
 800f954:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f958:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f95c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f2c0 8157 	blt.w	800fc12 <_dtoa_r+0x6fa>
 800f964:	2f0e      	cmp	r7, #14
 800f966:	f300 8154 	bgt.w	800fc12 <_dtoa_r+0x6fa>
 800f96a:	4b4b      	ldr	r3, [pc, #300]	@ (800fa98 <_dtoa_r+0x580>)
 800f96c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f970:	ed93 7b00 	vldr	d7, [r3]
 800f974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f976:	2b00      	cmp	r3, #0
 800f978:	ed8d 7b00 	vstr	d7, [sp]
 800f97c:	f280 80e5 	bge.w	800fb4a <_dtoa_r+0x632>
 800f980:	9b03      	ldr	r3, [sp, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	f300 80e1 	bgt.w	800fb4a <_dtoa_r+0x632>
 800f988:	d10c      	bne.n	800f9a4 <_dtoa_r+0x48c>
 800f98a:	4b48      	ldr	r3, [pc, #288]	@ (800faac <_dtoa_r+0x594>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	ec51 0b17 	vmov	r0, r1, d7
 800f992:	f7f0 fe31 	bl	80005f8 <__aeabi_dmul>
 800f996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f99a:	f7f1 f8b3 	bl	8000b04 <__aeabi_dcmpge>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	f000 8266 	beq.w	800fe70 <_dtoa_r+0x958>
 800f9a4:	2400      	movs	r4, #0
 800f9a6:	4625      	mov	r5, r4
 800f9a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9aa:	4656      	mov	r6, sl
 800f9ac:	ea6f 0803 	mvn.w	r8, r3
 800f9b0:	2700      	movs	r7, #0
 800f9b2:	4621      	mov	r1, r4
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	f000 fcbf 	bl	8010338 <_Bfree>
 800f9ba:	2d00      	cmp	r5, #0
 800f9bc:	f000 80bd 	beq.w	800fb3a <_dtoa_r+0x622>
 800f9c0:	b12f      	cbz	r7, 800f9ce <_dtoa_r+0x4b6>
 800f9c2:	42af      	cmp	r7, r5
 800f9c4:	d003      	beq.n	800f9ce <_dtoa_r+0x4b6>
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	4648      	mov	r0, r9
 800f9ca:	f000 fcb5 	bl	8010338 <_Bfree>
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	4648      	mov	r0, r9
 800f9d2:	f000 fcb1 	bl	8010338 <_Bfree>
 800f9d6:	e0b0      	b.n	800fb3a <_dtoa_r+0x622>
 800f9d8:	07e2      	lsls	r2, r4, #31
 800f9da:	d505      	bpl.n	800f9e8 <_dtoa_r+0x4d0>
 800f9dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f9e0:	f7f0 fe0a 	bl	80005f8 <__aeabi_dmul>
 800f9e4:	3601      	adds	r6, #1
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	1064      	asrs	r4, r4, #1
 800f9ea:	3508      	adds	r5, #8
 800f9ec:	e762      	b.n	800f8b4 <_dtoa_r+0x39c>
 800f9ee:	2602      	movs	r6, #2
 800f9f0:	e765      	b.n	800f8be <_dtoa_r+0x3a6>
 800f9f2:	9c03      	ldr	r4, [sp, #12]
 800f9f4:	46b8      	mov	r8, r7
 800f9f6:	e784      	b.n	800f902 <_dtoa_r+0x3ea>
 800f9f8:	4b27      	ldr	r3, [pc, #156]	@ (800fa98 <_dtoa_r+0x580>)
 800f9fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f9fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa04:	4454      	add	r4, sl
 800fa06:	2900      	cmp	r1, #0
 800fa08:	d054      	beq.n	800fab4 <_dtoa_r+0x59c>
 800fa0a:	4929      	ldr	r1, [pc, #164]	@ (800fab0 <_dtoa_r+0x598>)
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	f7f0 ff1d 	bl	800084c <__aeabi_ddiv>
 800fa12:	4633      	mov	r3, r6
 800fa14:	462a      	mov	r2, r5
 800fa16:	f7f0 fc37 	bl	8000288 <__aeabi_dsub>
 800fa1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa1e:	4656      	mov	r6, sl
 800fa20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa24:	f7f1 f898 	bl	8000b58 <__aeabi_d2iz>
 800fa28:	4605      	mov	r5, r0
 800fa2a:	f7f0 fd7b 	bl	8000524 <__aeabi_i2d>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa36:	f7f0 fc27 	bl	8000288 <__aeabi_dsub>
 800fa3a:	3530      	adds	r5, #48	@ 0x30
 800fa3c:	4602      	mov	r2, r0
 800fa3e:	460b      	mov	r3, r1
 800fa40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa44:	f806 5b01 	strb.w	r5, [r6], #1
 800fa48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa4c:	f7f1 f846 	bl	8000adc <__aeabi_dcmplt>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	d172      	bne.n	800fb3a <_dtoa_r+0x622>
 800fa54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fa58:	4911      	ldr	r1, [pc, #68]	@ (800faa0 <_dtoa_r+0x588>)
 800fa5a:	2000      	movs	r0, #0
 800fa5c:	f7f0 fc14 	bl	8000288 <__aeabi_dsub>
 800fa60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fa64:	f7f1 f83a 	bl	8000adc <__aeabi_dcmplt>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	f040 80b4 	bne.w	800fbd6 <_dtoa_r+0x6be>
 800fa6e:	42a6      	cmp	r6, r4
 800fa70:	f43f af70 	beq.w	800f954 <_dtoa_r+0x43c>
 800fa74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa78:	4b0a      	ldr	r3, [pc, #40]	@ (800faa4 <_dtoa_r+0x58c>)
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f7f0 fdbc 	bl	80005f8 <__aeabi_dmul>
 800fa80:	4b08      	ldr	r3, [pc, #32]	@ (800faa4 <_dtoa_r+0x58c>)
 800fa82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa86:	2200      	movs	r2, #0
 800fa88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa8c:	f7f0 fdb4 	bl	80005f8 <__aeabi_dmul>
 800fa90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa94:	e7c4      	b.n	800fa20 <_dtoa_r+0x508>
 800fa96:	bf00      	nop
 800fa98:	080132e8 	.word	0x080132e8
 800fa9c:	080132c0 	.word	0x080132c0
 800faa0:	3ff00000 	.word	0x3ff00000
 800faa4:	40240000 	.word	0x40240000
 800faa8:	401c0000 	.word	0x401c0000
 800faac:	40140000 	.word	0x40140000
 800fab0:	3fe00000 	.word	0x3fe00000
 800fab4:	4631      	mov	r1, r6
 800fab6:	4628      	mov	r0, r5
 800fab8:	f7f0 fd9e 	bl	80005f8 <__aeabi_dmul>
 800fabc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fac0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fac2:	4656      	mov	r6, sl
 800fac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fac8:	f7f1 f846 	bl	8000b58 <__aeabi_d2iz>
 800facc:	4605      	mov	r5, r0
 800face:	f7f0 fd29 	bl	8000524 <__aeabi_i2d>
 800fad2:	4602      	mov	r2, r0
 800fad4:	460b      	mov	r3, r1
 800fad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fada:	f7f0 fbd5 	bl	8000288 <__aeabi_dsub>
 800fade:	3530      	adds	r5, #48	@ 0x30
 800fae0:	f806 5b01 	strb.w	r5, [r6], #1
 800fae4:	4602      	mov	r2, r0
 800fae6:	460b      	mov	r3, r1
 800fae8:	42a6      	cmp	r6, r4
 800faea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800faee:	f04f 0200 	mov.w	r2, #0
 800faf2:	d124      	bne.n	800fb3e <_dtoa_r+0x626>
 800faf4:	4baf      	ldr	r3, [pc, #700]	@ (800fdb4 <_dtoa_r+0x89c>)
 800faf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fafa:	f7f0 fbc7 	bl	800028c <__adddf3>
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb06:	f7f1 f807 	bl	8000b18 <__aeabi_dcmpgt>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d163      	bne.n	800fbd6 <_dtoa_r+0x6be>
 800fb0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fb12:	49a8      	ldr	r1, [pc, #672]	@ (800fdb4 <_dtoa_r+0x89c>)
 800fb14:	2000      	movs	r0, #0
 800fb16:	f7f0 fbb7 	bl	8000288 <__aeabi_dsub>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb22:	f7f0 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800fb26:	2800      	cmp	r0, #0
 800fb28:	f43f af14 	beq.w	800f954 <_dtoa_r+0x43c>
 800fb2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fb2e:	1e73      	subs	r3, r6, #1
 800fb30:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fb32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fb36:	2b30      	cmp	r3, #48	@ 0x30
 800fb38:	d0f8      	beq.n	800fb2c <_dtoa_r+0x614>
 800fb3a:	4647      	mov	r7, r8
 800fb3c:	e03b      	b.n	800fbb6 <_dtoa_r+0x69e>
 800fb3e:	4b9e      	ldr	r3, [pc, #632]	@ (800fdb8 <_dtoa_r+0x8a0>)
 800fb40:	f7f0 fd5a 	bl	80005f8 <__aeabi_dmul>
 800fb44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb48:	e7bc      	b.n	800fac4 <_dtoa_r+0x5ac>
 800fb4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fb4e:	4656      	mov	r6, sl
 800fb50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb54:	4620      	mov	r0, r4
 800fb56:	4629      	mov	r1, r5
 800fb58:	f7f0 fe78 	bl	800084c <__aeabi_ddiv>
 800fb5c:	f7f0 fffc 	bl	8000b58 <__aeabi_d2iz>
 800fb60:	4680      	mov	r8, r0
 800fb62:	f7f0 fcdf 	bl	8000524 <__aeabi_i2d>
 800fb66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb6a:	f7f0 fd45 	bl	80005f8 <__aeabi_dmul>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	460b      	mov	r3, r1
 800fb72:	4620      	mov	r0, r4
 800fb74:	4629      	mov	r1, r5
 800fb76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fb7a:	f7f0 fb85 	bl	8000288 <__aeabi_dsub>
 800fb7e:	f806 4b01 	strb.w	r4, [r6], #1
 800fb82:	9d03      	ldr	r5, [sp, #12]
 800fb84:	eba6 040a 	sub.w	r4, r6, sl
 800fb88:	42a5      	cmp	r5, r4
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	d133      	bne.n	800fbf8 <_dtoa_r+0x6e0>
 800fb90:	f7f0 fb7c 	bl	800028c <__adddf3>
 800fb94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb98:	4604      	mov	r4, r0
 800fb9a:	460d      	mov	r5, r1
 800fb9c:	f7f0 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 800fba0:	b9c0      	cbnz	r0, 800fbd4 <_dtoa_r+0x6bc>
 800fba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fba6:	4620      	mov	r0, r4
 800fba8:	4629      	mov	r1, r5
 800fbaa:	f7f0 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbae:	b110      	cbz	r0, 800fbb6 <_dtoa_r+0x69e>
 800fbb0:	f018 0f01 	tst.w	r8, #1
 800fbb4:	d10e      	bne.n	800fbd4 <_dtoa_r+0x6bc>
 800fbb6:	9902      	ldr	r1, [sp, #8]
 800fbb8:	4648      	mov	r0, r9
 800fbba:	f000 fbbd 	bl	8010338 <_Bfree>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	7033      	strb	r3, [r6, #0]
 800fbc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fbc4:	3701      	adds	r7, #1
 800fbc6:	601f      	str	r7, [r3, #0]
 800fbc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	f000 824b 	beq.w	8010066 <_dtoa_r+0xb4e>
 800fbd0:	601e      	str	r6, [r3, #0]
 800fbd2:	e248      	b.n	8010066 <_dtoa_r+0xb4e>
 800fbd4:	46b8      	mov	r8, r7
 800fbd6:	4633      	mov	r3, r6
 800fbd8:	461e      	mov	r6, r3
 800fbda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbde:	2a39      	cmp	r2, #57	@ 0x39
 800fbe0:	d106      	bne.n	800fbf0 <_dtoa_r+0x6d8>
 800fbe2:	459a      	cmp	sl, r3
 800fbe4:	d1f8      	bne.n	800fbd8 <_dtoa_r+0x6c0>
 800fbe6:	2230      	movs	r2, #48	@ 0x30
 800fbe8:	f108 0801 	add.w	r8, r8, #1
 800fbec:	f88a 2000 	strb.w	r2, [sl]
 800fbf0:	781a      	ldrb	r2, [r3, #0]
 800fbf2:	3201      	adds	r2, #1
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	e7a0      	b.n	800fb3a <_dtoa_r+0x622>
 800fbf8:	4b6f      	ldr	r3, [pc, #444]	@ (800fdb8 <_dtoa_r+0x8a0>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f7f0 fcfc 	bl	80005f8 <__aeabi_dmul>
 800fc00:	2200      	movs	r2, #0
 800fc02:	2300      	movs	r3, #0
 800fc04:	4604      	mov	r4, r0
 800fc06:	460d      	mov	r5, r1
 800fc08:	f7f0 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d09f      	beq.n	800fb50 <_dtoa_r+0x638>
 800fc10:	e7d1      	b.n	800fbb6 <_dtoa_r+0x69e>
 800fc12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc14:	2a00      	cmp	r2, #0
 800fc16:	f000 80ea 	beq.w	800fdee <_dtoa_r+0x8d6>
 800fc1a:	9a07      	ldr	r2, [sp, #28]
 800fc1c:	2a01      	cmp	r2, #1
 800fc1e:	f300 80cd 	bgt.w	800fdbc <_dtoa_r+0x8a4>
 800fc22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fc24:	2a00      	cmp	r2, #0
 800fc26:	f000 80c1 	beq.w	800fdac <_dtoa_r+0x894>
 800fc2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fc2e:	9c08      	ldr	r4, [sp, #32]
 800fc30:	9e00      	ldr	r6, [sp, #0]
 800fc32:	9a00      	ldr	r2, [sp, #0]
 800fc34:	441a      	add	r2, r3
 800fc36:	9200      	str	r2, [sp, #0]
 800fc38:	9a06      	ldr	r2, [sp, #24]
 800fc3a:	2101      	movs	r1, #1
 800fc3c:	441a      	add	r2, r3
 800fc3e:	4648      	mov	r0, r9
 800fc40:	9206      	str	r2, [sp, #24]
 800fc42:	f000 fc77 	bl	8010534 <__i2b>
 800fc46:	4605      	mov	r5, r0
 800fc48:	b166      	cbz	r6, 800fc64 <_dtoa_r+0x74c>
 800fc4a:	9b06      	ldr	r3, [sp, #24]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	dd09      	ble.n	800fc64 <_dtoa_r+0x74c>
 800fc50:	42b3      	cmp	r3, r6
 800fc52:	9a00      	ldr	r2, [sp, #0]
 800fc54:	bfa8      	it	ge
 800fc56:	4633      	movge	r3, r6
 800fc58:	1ad2      	subs	r2, r2, r3
 800fc5a:	9200      	str	r2, [sp, #0]
 800fc5c:	9a06      	ldr	r2, [sp, #24]
 800fc5e:	1af6      	subs	r6, r6, r3
 800fc60:	1ad3      	subs	r3, r2, r3
 800fc62:	9306      	str	r3, [sp, #24]
 800fc64:	9b08      	ldr	r3, [sp, #32]
 800fc66:	b30b      	cbz	r3, 800fcac <_dtoa_r+0x794>
 800fc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f000 80c6 	beq.w	800fdfc <_dtoa_r+0x8e4>
 800fc70:	2c00      	cmp	r4, #0
 800fc72:	f000 80c0 	beq.w	800fdf6 <_dtoa_r+0x8de>
 800fc76:	4629      	mov	r1, r5
 800fc78:	4622      	mov	r2, r4
 800fc7a:	4648      	mov	r0, r9
 800fc7c:	f000 fd12 	bl	80106a4 <__pow5mult>
 800fc80:	9a02      	ldr	r2, [sp, #8]
 800fc82:	4601      	mov	r1, r0
 800fc84:	4605      	mov	r5, r0
 800fc86:	4648      	mov	r0, r9
 800fc88:	f000 fc6a 	bl	8010560 <__multiply>
 800fc8c:	9902      	ldr	r1, [sp, #8]
 800fc8e:	4680      	mov	r8, r0
 800fc90:	4648      	mov	r0, r9
 800fc92:	f000 fb51 	bl	8010338 <_Bfree>
 800fc96:	9b08      	ldr	r3, [sp, #32]
 800fc98:	1b1b      	subs	r3, r3, r4
 800fc9a:	9308      	str	r3, [sp, #32]
 800fc9c:	f000 80b1 	beq.w	800fe02 <_dtoa_r+0x8ea>
 800fca0:	9a08      	ldr	r2, [sp, #32]
 800fca2:	4641      	mov	r1, r8
 800fca4:	4648      	mov	r0, r9
 800fca6:	f000 fcfd 	bl	80106a4 <__pow5mult>
 800fcaa:	9002      	str	r0, [sp, #8]
 800fcac:	2101      	movs	r1, #1
 800fcae:	4648      	mov	r0, r9
 800fcb0:	f000 fc40 	bl	8010534 <__i2b>
 800fcb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 81d8 	beq.w	801006e <_dtoa_r+0xb56>
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	4601      	mov	r1, r0
 800fcc2:	4648      	mov	r0, r9
 800fcc4:	f000 fcee 	bl	80106a4 <__pow5mult>
 800fcc8:	9b07      	ldr	r3, [sp, #28]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	4604      	mov	r4, r0
 800fcce:	f300 809f 	bgt.w	800fe10 <_dtoa_r+0x8f8>
 800fcd2:	9b04      	ldr	r3, [sp, #16]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f040 8097 	bne.w	800fe08 <_dtoa_r+0x8f0>
 800fcda:	9b05      	ldr	r3, [sp, #20]
 800fcdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	f040 8093 	bne.w	800fe0c <_dtoa_r+0x8f4>
 800fce6:	9b05      	ldr	r3, [sp, #20]
 800fce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fcec:	0d1b      	lsrs	r3, r3, #20
 800fcee:	051b      	lsls	r3, r3, #20
 800fcf0:	b133      	cbz	r3, 800fd00 <_dtoa_r+0x7e8>
 800fcf2:	9b00      	ldr	r3, [sp, #0]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	9b06      	ldr	r3, [sp, #24]
 800fcfa:	3301      	adds	r3, #1
 800fcfc:	9306      	str	r3, [sp, #24]
 800fcfe:	2301      	movs	r3, #1
 800fd00:	9308      	str	r3, [sp, #32]
 800fd02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	f000 81b8 	beq.w	801007a <_dtoa_r+0xb62>
 800fd0a:	6923      	ldr	r3, [r4, #16]
 800fd0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd10:	6918      	ldr	r0, [r3, #16]
 800fd12:	f000 fbc3 	bl	801049c <__hi0bits>
 800fd16:	f1c0 0020 	rsb	r0, r0, #32
 800fd1a:	9b06      	ldr	r3, [sp, #24]
 800fd1c:	4418      	add	r0, r3
 800fd1e:	f010 001f 	ands.w	r0, r0, #31
 800fd22:	f000 8082 	beq.w	800fe2a <_dtoa_r+0x912>
 800fd26:	f1c0 0320 	rsb	r3, r0, #32
 800fd2a:	2b04      	cmp	r3, #4
 800fd2c:	dd73      	ble.n	800fe16 <_dtoa_r+0x8fe>
 800fd2e:	9b00      	ldr	r3, [sp, #0]
 800fd30:	f1c0 001c 	rsb	r0, r0, #28
 800fd34:	4403      	add	r3, r0
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	9b06      	ldr	r3, [sp, #24]
 800fd3a:	4403      	add	r3, r0
 800fd3c:	4406      	add	r6, r0
 800fd3e:	9306      	str	r3, [sp, #24]
 800fd40:	9b00      	ldr	r3, [sp, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	dd05      	ble.n	800fd52 <_dtoa_r+0x83a>
 800fd46:	9902      	ldr	r1, [sp, #8]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	4648      	mov	r0, r9
 800fd4c:	f000 fd04 	bl	8010758 <__lshift>
 800fd50:	9002      	str	r0, [sp, #8]
 800fd52:	9b06      	ldr	r3, [sp, #24]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	dd05      	ble.n	800fd64 <_dtoa_r+0x84c>
 800fd58:	4621      	mov	r1, r4
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4648      	mov	r0, r9
 800fd5e:	f000 fcfb 	bl	8010758 <__lshift>
 800fd62:	4604      	mov	r4, r0
 800fd64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d061      	beq.n	800fe2e <_dtoa_r+0x916>
 800fd6a:	9802      	ldr	r0, [sp, #8]
 800fd6c:	4621      	mov	r1, r4
 800fd6e:	f000 fd5f 	bl	8010830 <__mcmp>
 800fd72:	2800      	cmp	r0, #0
 800fd74:	da5b      	bge.n	800fe2e <_dtoa_r+0x916>
 800fd76:	2300      	movs	r3, #0
 800fd78:	9902      	ldr	r1, [sp, #8]
 800fd7a:	220a      	movs	r2, #10
 800fd7c:	4648      	mov	r0, r9
 800fd7e:	f000 fafd 	bl	801037c <__multadd>
 800fd82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd84:	9002      	str	r0, [sp, #8]
 800fd86:	f107 38ff 	add.w	r8, r7, #4294967295
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 8177 	beq.w	801007e <_dtoa_r+0xb66>
 800fd90:	4629      	mov	r1, r5
 800fd92:	2300      	movs	r3, #0
 800fd94:	220a      	movs	r2, #10
 800fd96:	4648      	mov	r0, r9
 800fd98:	f000 faf0 	bl	801037c <__multadd>
 800fd9c:	f1bb 0f00 	cmp.w	fp, #0
 800fda0:	4605      	mov	r5, r0
 800fda2:	dc6f      	bgt.n	800fe84 <_dtoa_r+0x96c>
 800fda4:	9b07      	ldr	r3, [sp, #28]
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	dc49      	bgt.n	800fe3e <_dtoa_r+0x926>
 800fdaa:	e06b      	b.n	800fe84 <_dtoa_r+0x96c>
 800fdac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fdae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fdb2:	e73c      	b.n	800fc2e <_dtoa_r+0x716>
 800fdb4:	3fe00000 	.word	0x3fe00000
 800fdb8:	40240000 	.word	0x40240000
 800fdbc:	9b03      	ldr	r3, [sp, #12]
 800fdbe:	1e5c      	subs	r4, r3, #1
 800fdc0:	9b08      	ldr	r3, [sp, #32]
 800fdc2:	42a3      	cmp	r3, r4
 800fdc4:	db09      	blt.n	800fdda <_dtoa_r+0x8c2>
 800fdc6:	1b1c      	subs	r4, r3, r4
 800fdc8:	9b03      	ldr	r3, [sp, #12]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f6bf af30 	bge.w	800fc30 <_dtoa_r+0x718>
 800fdd0:	9b00      	ldr	r3, [sp, #0]
 800fdd2:	9a03      	ldr	r2, [sp, #12]
 800fdd4:	1a9e      	subs	r6, r3, r2
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	e72b      	b.n	800fc32 <_dtoa_r+0x71a>
 800fdda:	9b08      	ldr	r3, [sp, #32]
 800fddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fdde:	9408      	str	r4, [sp, #32]
 800fde0:	1ae3      	subs	r3, r4, r3
 800fde2:	441a      	add	r2, r3
 800fde4:	9e00      	ldr	r6, [sp, #0]
 800fde6:	9b03      	ldr	r3, [sp, #12]
 800fde8:	920d      	str	r2, [sp, #52]	@ 0x34
 800fdea:	2400      	movs	r4, #0
 800fdec:	e721      	b.n	800fc32 <_dtoa_r+0x71a>
 800fdee:	9c08      	ldr	r4, [sp, #32]
 800fdf0:	9e00      	ldr	r6, [sp, #0]
 800fdf2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fdf4:	e728      	b.n	800fc48 <_dtoa_r+0x730>
 800fdf6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fdfa:	e751      	b.n	800fca0 <_dtoa_r+0x788>
 800fdfc:	9a08      	ldr	r2, [sp, #32]
 800fdfe:	9902      	ldr	r1, [sp, #8]
 800fe00:	e750      	b.n	800fca4 <_dtoa_r+0x78c>
 800fe02:	f8cd 8008 	str.w	r8, [sp, #8]
 800fe06:	e751      	b.n	800fcac <_dtoa_r+0x794>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	e779      	b.n	800fd00 <_dtoa_r+0x7e8>
 800fe0c:	9b04      	ldr	r3, [sp, #16]
 800fe0e:	e777      	b.n	800fd00 <_dtoa_r+0x7e8>
 800fe10:	2300      	movs	r3, #0
 800fe12:	9308      	str	r3, [sp, #32]
 800fe14:	e779      	b.n	800fd0a <_dtoa_r+0x7f2>
 800fe16:	d093      	beq.n	800fd40 <_dtoa_r+0x828>
 800fe18:	9a00      	ldr	r2, [sp, #0]
 800fe1a:	331c      	adds	r3, #28
 800fe1c:	441a      	add	r2, r3
 800fe1e:	9200      	str	r2, [sp, #0]
 800fe20:	9a06      	ldr	r2, [sp, #24]
 800fe22:	441a      	add	r2, r3
 800fe24:	441e      	add	r6, r3
 800fe26:	9206      	str	r2, [sp, #24]
 800fe28:	e78a      	b.n	800fd40 <_dtoa_r+0x828>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	e7f4      	b.n	800fe18 <_dtoa_r+0x900>
 800fe2e:	9b03      	ldr	r3, [sp, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	46b8      	mov	r8, r7
 800fe34:	dc20      	bgt.n	800fe78 <_dtoa_r+0x960>
 800fe36:	469b      	mov	fp, r3
 800fe38:	9b07      	ldr	r3, [sp, #28]
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	dd1e      	ble.n	800fe7c <_dtoa_r+0x964>
 800fe3e:	f1bb 0f00 	cmp.w	fp, #0
 800fe42:	f47f adb1 	bne.w	800f9a8 <_dtoa_r+0x490>
 800fe46:	4621      	mov	r1, r4
 800fe48:	465b      	mov	r3, fp
 800fe4a:	2205      	movs	r2, #5
 800fe4c:	4648      	mov	r0, r9
 800fe4e:	f000 fa95 	bl	801037c <__multadd>
 800fe52:	4601      	mov	r1, r0
 800fe54:	4604      	mov	r4, r0
 800fe56:	9802      	ldr	r0, [sp, #8]
 800fe58:	f000 fcea 	bl	8010830 <__mcmp>
 800fe5c:	2800      	cmp	r0, #0
 800fe5e:	f77f ada3 	ble.w	800f9a8 <_dtoa_r+0x490>
 800fe62:	4656      	mov	r6, sl
 800fe64:	2331      	movs	r3, #49	@ 0x31
 800fe66:	f806 3b01 	strb.w	r3, [r6], #1
 800fe6a:	f108 0801 	add.w	r8, r8, #1
 800fe6e:	e59f      	b.n	800f9b0 <_dtoa_r+0x498>
 800fe70:	9c03      	ldr	r4, [sp, #12]
 800fe72:	46b8      	mov	r8, r7
 800fe74:	4625      	mov	r5, r4
 800fe76:	e7f4      	b.n	800fe62 <_dtoa_r+0x94a>
 800fe78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fe7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	f000 8101 	beq.w	8010086 <_dtoa_r+0xb6e>
 800fe84:	2e00      	cmp	r6, #0
 800fe86:	dd05      	ble.n	800fe94 <_dtoa_r+0x97c>
 800fe88:	4629      	mov	r1, r5
 800fe8a:	4632      	mov	r2, r6
 800fe8c:	4648      	mov	r0, r9
 800fe8e:	f000 fc63 	bl	8010758 <__lshift>
 800fe92:	4605      	mov	r5, r0
 800fe94:	9b08      	ldr	r3, [sp, #32]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d05c      	beq.n	800ff54 <_dtoa_r+0xa3c>
 800fe9a:	6869      	ldr	r1, [r5, #4]
 800fe9c:	4648      	mov	r0, r9
 800fe9e:	f000 fa0b 	bl	80102b8 <_Balloc>
 800fea2:	4606      	mov	r6, r0
 800fea4:	b928      	cbnz	r0, 800feb2 <_dtoa_r+0x99a>
 800fea6:	4b82      	ldr	r3, [pc, #520]	@ (80100b0 <_dtoa_r+0xb98>)
 800fea8:	4602      	mov	r2, r0
 800feaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800feae:	f7ff bb4a 	b.w	800f546 <_dtoa_r+0x2e>
 800feb2:	692a      	ldr	r2, [r5, #16]
 800feb4:	3202      	adds	r2, #2
 800feb6:	0092      	lsls	r2, r2, #2
 800feb8:	f105 010c 	add.w	r1, r5, #12
 800febc:	300c      	adds	r0, #12
 800febe:	f7ff fa8e 	bl	800f3de <memcpy>
 800fec2:	2201      	movs	r2, #1
 800fec4:	4631      	mov	r1, r6
 800fec6:	4648      	mov	r0, r9
 800fec8:	f000 fc46 	bl	8010758 <__lshift>
 800fecc:	f10a 0301 	add.w	r3, sl, #1
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	eb0a 030b 	add.w	r3, sl, fp
 800fed6:	9308      	str	r3, [sp, #32]
 800fed8:	9b04      	ldr	r3, [sp, #16]
 800feda:	f003 0301 	and.w	r3, r3, #1
 800fede:	462f      	mov	r7, r5
 800fee0:	9306      	str	r3, [sp, #24]
 800fee2:	4605      	mov	r5, r0
 800fee4:	9b00      	ldr	r3, [sp, #0]
 800fee6:	9802      	ldr	r0, [sp, #8]
 800fee8:	4621      	mov	r1, r4
 800feea:	f103 3bff 	add.w	fp, r3, #4294967295
 800feee:	f7ff fa8b 	bl	800f408 <quorem>
 800fef2:	4603      	mov	r3, r0
 800fef4:	3330      	adds	r3, #48	@ 0x30
 800fef6:	9003      	str	r0, [sp, #12]
 800fef8:	4639      	mov	r1, r7
 800fefa:	9802      	ldr	r0, [sp, #8]
 800fefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fefe:	f000 fc97 	bl	8010830 <__mcmp>
 800ff02:	462a      	mov	r2, r5
 800ff04:	9004      	str	r0, [sp, #16]
 800ff06:	4621      	mov	r1, r4
 800ff08:	4648      	mov	r0, r9
 800ff0a:	f000 fcad 	bl	8010868 <__mdiff>
 800ff0e:	68c2      	ldr	r2, [r0, #12]
 800ff10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff12:	4606      	mov	r6, r0
 800ff14:	bb02      	cbnz	r2, 800ff58 <_dtoa_r+0xa40>
 800ff16:	4601      	mov	r1, r0
 800ff18:	9802      	ldr	r0, [sp, #8]
 800ff1a:	f000 fc89 	bl	8010830 <__mcmp>
 800ff1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff20:	4602      	mov	r2, r0
 800ff22:	4631      	mov	r1, r6
 800ff24:	4648      	mov	r0, r9
 800ff26:	920c      	str	r2, [sp, #48]	@ 0x30
 800ff28:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff2a:	f000 fa05 	bl	8010338 <_Bfree>
 800ff2e:	9b07      	ldr	r3, [sp, #28]
 800ff30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ff32:	9e00      	ldr	r6, [sp, #0]
 800ff34:	ea42 0103 	orr.w	r1, r2, r3
 800ff38:	9b06      	ldr	r3, [sp, #24]
 800ff3a:	4319      	orrs	r1, r3
 800ff3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff3e:	d10d      	bne.n	800ff5c <_dtoa_r+0xa44>
 800ff40:	2b39      	cmp	r3, #57	@ 0x39
 800ff42:	d027      	beq.n	800ff94 <_dtoa_r+0xa7c>
 800ff44:	9a04      	ldr	r2, [sp, #16]
 800ff46:	2a00      	cmp	r2, #0
 800ff48:	dd01      	ble.n	800ff4e <_dtoa_r+0xa36>
 800ff4a:	9b03      	ldr	r3, [sp, #12]
 800ff4c:	3331      	adds	r3, #49	@ 0x31
 800ff4e:	f88b 3000 	strb.w	r3, [fp]
 800ff52:	e52e      	b.n	800f9b2 <_dtoa_r+0x49a>
 800ff54:	4628      	mov	r0, r5
 800ff56:	e7b9      	b.n	800fecc <_dtoa_r+0x9b4>
 800ff58:	2201      	movs	r2, #1
 800ff5a:	e7e2      	b.n	800ff22 <_dtoa_r+0xa0a>
 800ff5c:	9904      	ldr	r1, [sp, #16]
 800ff5e:	2900      	cmp	r1, #0
 800ff60:	db04      	blt.n	800ff6c <_dtoa_r+0xa54>
 800ff62:	9807      	ldr	r0, [sp, #28]
 800ff64:	4301      	orrs	r1, r0
 800ff66:	9806      	ldr	r0, [sp, #24]
 800ff68:	4301      	orrs	r1, r0
 800ff6a:	d120      	bne.n	800ffae <_dtoa_r+0xa96>
 800ff6c:	2a00      	cmp	r2, #0
 800ff6e:	ddee      	ble.n	800ff4e <_dtoa_r+0xa36>
 800ff70:	9902      	ldr	r1, [sp, #8]
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	2201      	movs	r2, #1
 800ff76:	4648      	mov	r0, r9
 800ff78:	f000 fbee 	bl	8010758 <__lshift>
 800ff7c:	4621      	mov	r1, r4
 800ff7e:	9002      	str	r0, [sp, #8]
 800ff80:	f000 fc56 	bl	8010830 <__mcmp>
 800ff84:	2800      	cmp	r0, #0
 800ff86:	9b00      	ldr	r3, [sp, #0]
 800ff88:	dc02      	bgt.n	800ff90 <_dtoa_r+0xa78>
 800ff8a:	d1e0      	bne.n	800ff4e <_dtoa_r+0xa36>
 800ff8c:	07da      	lsls	r2, r3, #31
 800ff8e:	d5de      	bpl.n	800ff4e <_dtoa_r+0xa36>
 800ff90:	2b39      	cmp	r3, #57	@ 0x39
 800ff92:	d1da      	bne.n	800ff4a <_dtoa_r+0xa32>
 800ff94:	2339      	movs	r3, #57	@ 0x39
 800ff96:	f88b 3000 	strb.w	r3, [fp]
 800ff9a:	4633      	mov	r3, r6
 800ff9c:	461e      	mov	r6, r3
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ffa4:	2a39      	cmp	r2, #57	@ 0x39
 800ffa6:	d04e      	beq.n	8010046 <_dtoa_r+0xb2e>
 800ffa8:	3201      	adds	r2, #1
 800ffaa:	701a      	strb	r2, [r3, #0]
 800ffac:	e501      	b.n	800f9b2 <_dtoa_r+0x49a>
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	dd03      	ble.n	800ffba <_dtoa_r+0xaa2>
 800ffb2:	2b39      	cmp	r3, #57	@ 0x39
 800ffb4:	d0ee      	beq.n	800ff94 <_dtoa_r+0xa7c>
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	e7c9      	b.n	800ff4e <_dtoa_r+0xa36>
 800ffba:	9a00      	ldr	r2, [sp, #0]
 800ffbc:	9908      	ldr	r1, [sp, #32]
 800ffbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ffc2:	428a      	cmp	r2, r1
 800ffc4:	d028      	beq.n	8010018 <_dtoa_r+0xb00>
 800ffc6:	9902      	ldr	r1, [sp, #8]
 800ffc8:	2300      	movs	r3, #0
 800ffca:	220a      	movs	r2, #10
 800ffcc:	4648      	mov	r0, r9
 800ffce:	f000 f9d5 	bl	801037c <__multadd>
 800ffd2:	42af      	cmp	r7, r5
 800ffd4:	9002      	str	r0, [sp, #8]
 800ffd6:	f04f 0300 	mov.w	r3, #0
 800ffda:	f04f 020a 	mov.w	r2, #10
 800ffde:	4639      	mov	r1, r7
 800ffe0:	4648      	mov	r0, r9
 800ffe2:	d107      	bne.n	800fff4 <_dtoa_r+0xadc>
 800ffe4:	f000 f9ca 	bl	801037c <__multadd>
 800ffe8:	4607      	mov	r7, r0
 800ffea:	4605      	mov	r5, r0
 800ffec:	9b00      	ldr	r3, [sp, #0]
 800ffee:	3301      	adds	r3, #1
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	e777      	b.n	800fee4 <_dtoa_r+0x9cc>
 800fff4:	f000 f9c2 	bl	801037c <__multadd>
 800fff8:	4629      	mov	r1, r5
 800fffa:	4607      	mov	r7, r0
 800fffc:	2300      	movs	r3, #0
 800fffe:	220a      	movs	r2, #10
 8010000:	4648      	mov	r0, r9
 8010002:	f000 f9bb 	bl	801037c <__multadd>
 8010006:	4605      	mov	r5, r0
 8010008:	e7f0      	b.n	800ffec <_dtoa_r+0xad4>
 801000a:	f1bb 0f00 	cmp.w	fp, #0
 801000e:	bfcc      	ite	gt
 8010010:	465e      	movgt	r6, fp
 8010012:	2601      	movle	r6, #1
 8010014:	4456      	add	r6, sl
 8010016:	2700      	movs	r7, #0
 8010018:	9902      	ldr	r1, [sp, #8]
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	2201      	movs	r2, #1
 801001e:	4648      	mov	r0, r9
 8010020:	f000 fb9a 	bl	8010758 <__lshift>
 8010024:	4621      	mov	r1, r4
 8010026:	9002      	str	r0, [sp, #8]
 8010028:	f000 fc02 	bl	8010830 <__mcmp>
 801002c:	2800      	cmp	r0, #0
 801002e:	dcb4      	bgt.n	800ff9a <_dtoa_r+0xa82>
 8010030:	d102      	bne.n	8010038 <_dtoa_r+0xb20>
 8010032:	9b00      	ldr	r3, [sp, #0]
 8010034:	07db      	lsls	r3, r3, #31
 8010036:	d4b0      	bmi.n	800ff9a <_dtoa_r+0xa82>
 8010038:	4633      	mov	r3, r6
 801003a:	461e      	mov	r6, r3
 801003c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010040:	2a30      	cmp	r2, #48	@ 0x30
 8010042:	d0fa      	beq.n	801003a <_dtoa_r+0xb22>
 8010044:	e4b5      	b.n	800f9b2 <_dtoa_r+0x49a>
 8010046:	459a      	cmp	sl, r3
 8010048:	d1a8      	bne.n	800ff9c <_dtoa_r+0xa84>
 801004a:	2331      	movs	r3, #49	@ 0x31
 801004c:	f108 0801 	add.w	r8, r8, #1
 8010050:	f88a 3000 	strb.w	r3, [sl]
 8010054:	e4ad      	b.n	800f9b2 <_dtoa_r+0x49a>
 8010056:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010058:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80100b4 <_dtoa_r+0xb9c>
 801005c:	b11b      	cbz	r3, 8010066 <_dtoa_r+0xb4e>
 801005e:	f10a 0308 	add.w	r3, sl, #8
 8010062:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8010064:	6013      	str	r3, [r2, #0]
 8010066:	4650      	mov	r0, sl
 8010068:	b017      	add	sp, #92	@ 0x5c
 801006a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006e:	9b07      	ldr	r3, [sp, #28]
 8010070:	2b01      	cmp	r3, #1
 8010072:	f77f ae2e 	ble.w	800fcd2 <_dtoa_r+0x7ba>
 8010076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010078:	9308      	str	r3, [sp, #32]
 801007a:	2001      	movs	r0, #1
 801007c:	e64d      	b.n	800fd1a <_dtoa_r+0x802>
 801007e:	f1bb 0f00 	cmp.w	fp, #0
 8010082:	f77f aed9 	ble.w	800fe38 <_dtoa_r+0x920>
 8010086:	4656      	mov	r6, sl
 8010088:	9802      	ldr	r0, [sp, #8]
 801008a:	4621      	mov	r1, r4
 801008c:	f7ff f9bc 	bl	800f408 <quorem>
 8010090:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010094:	f806 3b01 	strb.w	r3, [r6], #1
 8010098:	eba6 020a 	sub.w	r2, r6, sl
 801009c:	4593      	cmp	fp, r2
 801009e:	ddb4      	ble.n	801000a <_dtoa_r+0xaf2>
 80100a0:	9902      	ldr	r1, [sp, #8]
 80100a2:	2300      	movs	r3, #0
 80100a4:	220a      	movs	r2, #10
 80100a6:	4648      	mov	r0, r9
 80100a8:	f000 f968 	bl	801037c <__multadd>
 80100ac:	9002      	str	r0, [sp, #8]
 80100ae:	e7eb      	b.n	8010088 <_dtoa_r+0xb70>
 80100b0:	0801318d 	.word	0x0801318d
 80100b4:	08013111 	.word	0x08013111

080100b8 <_free_r>:
 80100b8:	b538      	push	{r3, r4, r5, lr}
 80100ba:	4605      	mov	r5, r0
 80100bc:	2900      	cmp	r1, #0
 80100be:	d041      	beq.n	8010144 <_free_r+0x8c>
 80100c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c4:	1f0c      	subs	r4, r1, #4
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	bfb8      	it	lt
 80100ca:	18e4      	addlt	r4, r4, r3
 80100cc:	f000 f8e8 	bl	80102a0 <__malloc_lock>
 80100d0:	4a1d      	ldr	r2, [pc, #116]	@ (8010148 <_free_r+0x90>)
 80100d2:	6813      	ldr	r3, [r2, #0]
 80100d4:	b933      	cbnz	r3, 80100e4 <_free_r+0x2c>
 80100d6:	6063      	str	r3, [r4, #4]
 80100d8:	6014      	str	r4, [r2, #0]
 80100da:	4628      	mov	r0, r5
 80100dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100e0:	f000 b8e4 	b.w	80102ac <__malloc_unlock>
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	d908      	bls.n	80100fa <_free_r+0x42>
 80100e8:	6820      	ldr	r0, [r4, #0]
 80100ea:	1821      	adds	r1, r4, r0
 80100ec:	428b      	cmp	r3, r1
 80100ee:	bf01      	itttt	eq
 80100f0:	6819      	ldreq	r1, [r3, #0]
 80100f2:	685b      	ldreq	r3, [r3, #4]
 80100f4:	1809      	addeq	r1, r1, r0
 80100f6:	6021      	streq	r1, [r4, #0]
 80100f8:	e7ed      	b.n	80100d6 <_free_r+0x1e>
 80100fa:	461a      	mov	r2, r3
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	b10b      	cbz	r3, 8010104 <_free_r+0x4c>
 8010100:	42a3      	cmp	r3, r4
 8010102:	d9fa      	bls.n	80100fa <_free_r+0x42>
 8010104:	6811      	ldr	r1, [r2, #0]
 8010106:	1850      	adds	r0, r2, r1
 8010108:	42a0      	cmp	r0, r4
 801010a:	d10b      	bne.n	8010124 <_free_r+0x6c>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	4401      	add	r1, r0
 8010110:	1850      	adds	r0, r2, r1
 8010112:	4283      	cmp	r3, r0
 8010114:	6011      	str	r1, [r2, #0]
 8010116:	d1e0      	bne.n	80100da <_free_r+0x22>
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	6053      	str	r3, [r2, #4]
 801011e:	4408      	add	r0, r1
 8010120:	6010      	str	r0, [r2, #0]
 8010122:	e7da      	b.n	80100da <_free_r+0x22>
 8010124:	d902      	bls.n	801012c <_free_r+0x74>
 8010126:	230c      	movs	r3, #12
 8010128:	602b      	str	r3, [r5, #0]
 801012a:	e7d6      	b.n	80100da <_free_r+0x22>
 801012c:	6820      	ldr	r0, [r4, #0]
 801012e:	1821      	adds	r1, r4, r0
 8010130:	428b      	cmp	r3, r1
 8010132:	bf04      	itt	eq
 8010134:	6819      	ldreq	r1, [r3, #0]
 8010136:	685b      	ldreq	r3, [r3, #4]
 8010138:	6063      	str	r3, [r4, #4]
 801013a:	bf04      	itt	eq
 801013c:	1809      	addeq	r1, r1, r0
 801013e:	6021      	streq	r1, [r4, #0]
 8010140:	6054      	str	r4, [r2, #4]
 8010142:	e7ca      	b.n	80100da <_free_r+0x22>
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	20002418 	.word	0x20002418

0801014c <malloc>:
 801014c:	4b02      	ldr	r3, [pc, #8]	@ (8010158 <malloc+0xc>)
 801014e:	4601      	mov	r1, r0
 8010150:	6818      	ldr	r0, [r3, #0]
 8010152:	f000 b825 	b.w	80101a0 <_malloc_r>
 8010156:	bf00      	nop
 8010158:	20000114 	.word	0x20000114

0801015c <sbrk_aligned>:
 801015c:	b570      	push	{r4, r5, r6, lr}
 801015e:	4e0f      	ldr	r6, [pc, #60]	@ (801019c <sbrk_aligned+0x40>)
 8010160:	460c      	mov	r4, r1
 8010162:	6831      	ldr	r1, [r6, #0]
 8010164:	4605      	mov	r5, r0
 8010166:	b911      	cbnz	r1, 801016e <sbrk_aligned+0x12>
 8010168:	f001 ffca 	bl	8012100 <_sbrk_r>
 801016c:	6030      	str	r0, [r6, #0]
 801016e:	4621      	mov	r1, r4
 8010170:	4628      	mov	r0, r5
 8010172:	f001 ffc5 	bl	8012100 <_sbrk_r>
 8010176:	1c43      	adds	r3, r0, #1
 8010178:	d103      	bne.n	8010182 <sbrk_aligned+0x26>
 801017a:	f04f 34ff 	mov.w	r4, #4294967295
 801017e:	4620      	mov	r0, r4
 8010180:	bd70      	pop	{r4, r5, r6, pc}
 8010182:	1cc4      	adds	r4, r0, #3
 8010184:	f024 0403 	bic.w	r4, r4, #3
 8010188:	42a0      	cmp	r0, r4
 801018a:	d0f8      	beq.n	801017e <sbrk_aligned+0x22>
 801018c:	1a21      	subs	r1, r4, r0
 801018e:	4628      	mov	r0, r5
 8010190:	f001 ffb6 	bl	8012100 <_sbrk_r>
 8010194:	3001      	adds	r0, #1
 8010196:	d1f2      	bne.n	801017e <sbrk_aligned+0x22>
 8010198:	e7ef      	b.n	801017a <sbrk_aligned+0x1e>
 801019a:	bf00      	nop
 801019c:	20002414 	.word	0x20002414

080101a0 <_malloc_r>:
 80101a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101a4:	1ccd      	adds	r5, r1, #3
 80101a6:	f025 0503 	bic.w	r5, r5, #3
 80101aa:	3508      	adds	r5, #8
 80101ac:	2d0c      	cmp	r5, #12
 80101ae:	bf38      	it	cc
 80101b0:	250c      	movcc	r5, #12
 80101b2:	2d00      	cmp	r5, #0
 80101b4:	4606      	mov	r6, r0
 80101b6:	db01      	blt.n	80101bc <_malloc_r+0x1c>
 80101b8:	42a9      	cmp	r1, r5
 80101ba:	d904      	bls.n	80101c6 <_malloc_r+0x26>
 80101bc:	230c      	movs	r3, #12
 80101be:	6033      	str	r3, [r6, #0]
 80101c0:	2000      	movs	r0, #0
 80101c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801029c <_malloc_r+0xfc>
 80101ca:	f000 f869 	bl	80102a0 <__malloc_lock>
 80101ce:	f8d8 3000 	ldr.w	r3, [r8]
 80101d2:	461c      	mov	r4, r3
 80101d4:	bb44      	cbnz	r4, 8010228 <_malloc_r+0x88>
 80101d6:	4629      	mov	r1, r5
 80101d8:	4630      	mov	r0, r6
 80101da:	f7ff ffbf 	bl	801015c <sbrk_aligned>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	4604      	mov	r4, r0
 80101e2:	d158      	bne.n	8010296 <_malloc_r+0xf6>
 80101e4:	f8d8 4000 	ldr.w	r4, [r8]
 80101e8:	4627      	mov	r7, r4
 80101ea:	2f00      	cmp	r7, #0
 80101ec:	d143      	bne.n	8010276 <_malloc_r+0xd6>
 80101ee:	2c00      	cmp	r4, #0
 80101f0:	d04b      	beq.n	801028a <_malloc_r+0xea>
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	4639      	mov	r1, r7
 80101f6:	4630      	mov	r0, r6
 80101f8:	eb04 0903 	add.w	r9, r4, r3
 80101fc:	f001 ff80 	bl	8012100 <_sbrk_r>
 8010200:	4581      	cmp	r9, r0
 8010202:	d142      	bne.n	801028a <_malloc_r+0xea>
 8010204:	6821      	ldr	r1, [r4, #0]
 8010206:	1a6d      	subs	r5, r5, r1
 8010208:	4629      	mov	r1, r5
 801020a:	4630      	mov	r0, r6
 801020c:	f7ff ffa6 	bl	801015c <sbrk_aligned>
 8010210:	3001      	adds	r0, #1
 8010212:	d03a      	beq.n	801028a <_malloc_r+0xea>
 8010214:	6823      	ldr	r3, [r4, #0]
 8010216:	442b      	add	r3, r5
 8010218:	6023      	str	r3, [r4, #0]
 801021a:	f8d8 3000 	ldr.w	r3, [r8]
 801021e:	685a      	ldr	r2, [r3, #4]
 8010220:	bb62      	cbnz	r2, 801027c <_malloc_r+0xdc>
 8010222:	f8c8 7000 	str.w	r7, [r8]
 8010226:	e00f      	b.n	8010248 <_malloc_r+0xa8>
 8010228:	6822      	ldr	r2, [r4, #0]
 801022a:	1b52      	subs	r2, r2, r5
 801022c:	d420      	bmi.n	8010270 <_malloc_r+0xd0>
 801022e:	2a0b      	cmp	r2, #11
 8010230:	d917      	bls.n	8010262 <_malloc_r+0xc2>
 8010232:	1961      	adds	r1, r4, r5
 8010234:	42a3      	cmp	r3, r4
 8010236:	6025      	str	r5, [r4, #0]
 8010238:	bf18      	it	ne
 801023a:	6059      	strne	r1, [r3, #4]
 801023c:	6863      	ldr	r3, [r4, #4]
 801023e:	bf08      	it	eq
 8010240:	f8c8 1000 	streq.w	r1, [r8]
 8010244:	5162      	str	r2, [r4, r5]
 8010246:	604b      	str	r3, [r1, #4]
 8010248:	4630      	mov	r0, r6
 801024a:	f000 f82f 	bl	80102ac <__malloc_unlock>
 801024e:	f104 000b 	add.w	r0, r4, #11
 8010252:	1d23      	adds	r3, r4, #4
 8010254:	f020 0007 	bic.w	r0, r0, #7
 8010258:	1ac2      	subs	r2, r0, r3
 801025a:	bf1c      	itt	ne
 801025c:	1a1b      	subne	r3, r3, r0
 801025e:	50a3      	strne	r3, [r4, r2]
 8010260:	e7af      	b.n	80101c2 <_malloc_r+0x22>
 8010262:	6862      	ldr	r2, [r4, #4]
 8010264:	42a3      	cmp	r3, r4
 8010266:	bf0c      	ite	eq
 8010268:	f8c8 2000 	streq.w	r2, [r8]
 801026c:	605a      	strne	r2, [r3, #4]
 801026e:	e7eb      	b.n	8010248 <_malloc_r+0xa8>
 8010270:	4623      	mov	r3, r4
 8010272:	6864      	ldr	r4, [r4, #4]
 8010274:	e7ae      	b.n	80101d4 <_malloc_r+0x34>
 8010276:	463c      	mov	r4, r7
 8010278:	687f      	ldr	r7, [r7, #4]
 801027a:	e7b6      	b.n	80101ea <_malloc_r+0x4a>
 801027c:	461a      	mov	r2, r3
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	42a3      	cmp	r3, r4
 8010282:	d1fb      	bne.n	801027c <_malloc_r+0xdc>
 8010284:	2300      	movs	r3, #0
 8010286:	6053      	str	r3, [r2, #4]
 8010288:	e7de      	b.n	8010248 <_malloc_r+0xa8>
 801028a:	230c      	movs	r3, #12
 801028c:	6033      	str	r3, [r6, #0]
 801028e:	4630      	mov	r0, r6
 8010290:	f000 f80c 	bl	80102ac <__malloc_unlock>
 8010294:	e794      	b.n	80101c0 <_malloc_r+0x20>
 8010296:	6005      	str	r5, [r0, #0]
 8010298:	e7d6      	b.n	8010248 <_malloc_r+0xa8>
 801029a:	bf00      	nop
 801029c:	20002418 	.word	0x20002418

080102a0 <__malloc_lock>:
 80102a0:	4801      	ldr	r0, [pc, #4]	@ (80102a8 <__malloc_lock+0x8>)
 80102a2:	f7ff b89a 	b.w	800f3da <__retarget_lock_acquire_recursive>
 80102a6:	bf00      	nop
 80102a8:	20002410 	.word	0x20002410

080102ac <__malloc_unlock>:
 80102ac:	4801      	ldr	r0, [pc, #4]	@ (80102b4 <__malloc_unlock+0x8>)
 80102ae:	f7ff b895 	b.w	800f3dc <__retarget_lock_release_recursive>
 80102b2:	bf00      	nop
 80102b4:	20002410 	.word	0x20002410

080102b8 <_Balloc>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	69c6      	ldr	r6, [r0, #28]
 80102bc:	4604      	mov	r4, r0
 80102be:	460d      	mov	r5, r1
 80102c0:	b976      	cbnz	r6, 80102e0 <_Balloc+0x28>
 80102c2:	2010      	movs	r0, #16
 80102c4:	f7ff ff42 	bl	801014c <malloc>
 80102c8:	4602      	mov	r2, r0
 80102ca:	61e0      	str	r0, [r4, #28]
 80102cc:	b920      	cbnz	r0, 80102d8 <_Balloc+0x20>
 80102ce:	4b18      	ldr	r3, [pc, #96]	@ (8010330 <_Balloc+0x78>)
 80102d0:	4818      	ldr	r0, [pc, #96]	@ (8010334 <_Balloc+0x7c>)
 80102d2:	216b      	movs	r1, #107	@ 0x6b
 80102d4:	f001 ff2c 	bl	8012130 <__assert_func>
 80102d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102dc:	6006      	str	r6, [r0, #0]
 80102de:	60c6      	str	r6, [r0, #12]
 80102e0:	69e6      	ldr	r6, [r4, #28]
 80102e2:	68f3      	ldr	r3, [r6, #12]
 80102e4:	b183      	cbz	r3, 8010308 <_Balloc+0x50>
 80102e6:	69e3      	ldr	r3, [r4, #28]
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102ee:	b9b8      	cbnz	r0, 8010320 <_Balloc+0x68>
 80102f0:	2101      	movs	r1, #1
 80102f2:	fa01 f605 	lsl.w	r6, r1, r5
 80102f6:	1d72      	adds	r2, r6, #5
 80102f8:	0092      	lsls	r2, r2, #2
 80102fa:	4620      	mov	r0, r4
 80102fc:	f001 ff36 	bl	801216c <_calloc_r>
 8010300:	b160      	cbz	r0, 801031c <_Balloc+0x64>
 8010302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010306:	e00e      	b.n	8010326 <_Balloc+0x6e>
 8010308:	2221      	movs	r2, #33	@ 0x21
 801030a:	2104      	movs	r1, #4
 801030c:	4620      	mov	r0, r4
 801030e:	f001 ff2d 	bl	801216c <_calloc_r>
 8010312:	69e3      	ldr	r3, [r4, #28]
 8010314:	60f0      	str	r0, [r6, #12]
 8010316:	68db      	ldr	r3, [r3, #12]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d1e4      	bne.n	80102e6 <_Balloc+0x2e>
 801031c:	2000      	movs	r0, #0
 801031e:	bd70      	pop	{r4, r5, r6, pc}
 8010320:	6802      	ldr	r2, [r0, #0]
 8010322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010326:	2300      	movs	r3, #0
 8010328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801032c:	e7f7      	b.n	801031e <_Balloc+0x66>
 801032e:	bf00      	nop
 8010330:	0801311e 	.word	0x0801311e
 8010334:	0801319e 	.word	0x0801319e

08010338 <_Bfree>:
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	69c6      	ldr	r6, [r0, #28]
 801033c:	4605      	mov	r5, r0
 801033e:	460c      	mov	r4, r1
 8010340:	b976      	cbnz	r6, 8010360 <_Bfree+0x28>
 8010342:	2010      	movs	r0, #16
 8010344:	f7ff ff02 	bl	801014c <malloc>
 8010348:	4602      	mov	r2, r0
 801034a:	61e8      	str	r0, [r5, #28]
 801034c:	b920      	cbnz	r0, 8010358 <_Bfree+0x20>
 801034e:	4b09      	ldr	r3, [pc, #36]	@ (8010374 <_Bfree+0x3c>)
 8010350:	4809      	ldr	r0, [pc, #36]	@ (8010378 <_Bfree+0x40>)
 8010352:	218f      	movs	r1, #143	@ 0x8f
 8010354:	f001 feec 	bl	8012130 <__assert_func>
 8010358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801035c:	6006      	str	r6, [r0, #0]
 801035e:	60c6      	str	r6, [r0, #12]
 8010360:	b13c      	cbz	r4, 8010372 <_Bfree+0x3a>
 8010362:	69eb      	ldr	r3, [r5, #28]
 8010364:	6862      	ldr	r2, [r4, #4]
 8010366:	68db      	ldr	r3, [r3, #12]
 8010368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801036c:	6021      	str	r1, [r4, #0]
 801036e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010372:	bd70      	pop	{r4, r5, r6, pc}
 8010374:	0801311e 	.word	0x0801311e
 8010378:	0801319e 	.word	0x0801319e

0801037c <__multadd>:
 801037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010380:	690d      	ldr	r5, [r1, #16]
 8010382:	4607      	mov	r7, r0
 8010384:	460c      	mov	r4, r1
 8010386:	461e      	mov	r6, r3
 8010388:	f101 0c14 	add.w	ip, r1, #20
 801038c:	2000      	movs	r0, #0
 801038e:	f8dc 3000 	ldr.w	r3, [ip]
 8010392:	b299      	uxth	r1, r3
 8010394:	fb02 6101 	mla	r1, r2, r1, r6
 8010398:	0c1e      	lsrs	r6, r3, #16
 801039a:	0c0b      	lsrs	r3, r1, #16
 801039c:	fb02 3306 	mla	r3, r2, r6, r3
 80103a0:	b289      	uxth	r1, r1
 80103a2:	3001      	adds	r0, #1
 80103a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80103a8:	4285      	cmp	r5, r0
 80103aa:	f84c 1b04 	str.w	r1, [ip], #4
 80103ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80103b2:	dcec      	bgt.n	801038e <__multadd+0x12>
 80103b4:	b30e      	cbz	r6, 80103fa <__multadd+0x7e>
 80103b6:	68a3      	ldr	r3, [r4, #8]
 80103b8:	42ab      	cmp	r3, r5
 80103ba:	dc19      	bgt.n	80103f0 <__multadd+0x74>
 80103bc:	6861      	ldr	r1, [r4, #4]
 80103be:	4638      	mov	r0, r7
 80103c0:	3101      	adds	r1, #1
 80103c2:	f7ff ff79 	bl	80102b8 <_Balloc>
 80103c6:	4680      	mov	r8, r0
 80103c8:	b928      	cbnz	r0, 80103d6 <__multadd+0x5a>
 80103ca:	4602      	mov	r2, r0
 80103cc:	4b0c      	ldr	r3, [pc, #48]	@ (8010400 <__multadd+0x84>)
 80103ce:	480d      	ldr	r0, [pc, #52]	@ (8010404 <__multadd+0x88>)
 80103d0:	21ba      	movs	r1, #186	@ 0xba
 80103d2:	f001 fead 	bl	8012130 <__assert_func>
 80103d6:	6922      	ldr	r2, [r4, #16]
 80103d8:	3202      	adds	r2, #2
 80103da:	f104 010c 	add.w	r1, r4, #12
 80103de:	0092      	lsls	r2, r2, #2
 80103e0:	300c      	adds	r0, #12
 80103e2:	f7fe fffc 	bl	800f3de <memcpy>
 80103e6:	4621      	mov	r1, r4
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff ffa5 	bl	8010338 <_Bfree>
 80103ee:	4644      	mov	r4, r8
 80103f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103f4:	3501      	adds	r5, #1
 80103f6:	615e      	str	r6, [r3, #20]
 80103f8:	6125      	str	r5, [r4, #16]
 80103fa:	4620      	mov	r0, r4
 80103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010400:	0801318d 	.word	0x0801318d
 8010404:	0801319e 	.word	0x0801319e

08010408 <__s2b>:
 8010408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801040c:	460c      	mov	r4, r1
 801040e:	4615      	mov	r5, r2
 8010410:	461f      	mov	r7, r3
 8010412:	2209      	movs	r2, #9
 8010414:	3308      	adds	r3, #8
 8010416:	4606      	mov	r6, r0
 8010418:	fb93 f3f2 	sdiv	r3, r3, r2
 801041c:	2100      	movs	r1, #0
 801041e:	2201      	movs	r2, #1
 8010420:	429a      	cmp	r2, r3
 8010422:	db09      	blt.n	8010438 <__s2b+0x30>
 8010424:	4630      	mov	r0, r6
 8010426:	f7ff ff47 	bl	80102b8 <_Balloc>
 801042a:	b940      	cbnz	r0, 801043e <__s2b+0x36>
 801042c:	4602      	mov	r2, r0
 801042e:	4b19      	ldr	r3, [pc, #100]	@ (8010494 <__s2b+0x8c>)
 8010430:	4819      	ldr	r0, [pc, #100]	@ (8010498 <__s2b+0x90>)
 8010432:	21d3      	movs	r1, #211	@ 0xd3
 8010434:	f001 fe7c 	bl	8012130 <__assert_func>
 8010438:	0052      	lsls	r2, r2, #1
 801043a:	3101      	adds	r1, #1
 801043c:	e7f0      	b.n	8010420 <__s2b+0x18>
 801043e:	9b08      	ldr	r3, [sp, #32]
 8010440:	6143      	str	r3, [r0, #20]
 8010442:	2d09      	cmp	r5, #9
 8010444:	f04f 0301 	mov.w	r3, #1
 8010448:	6103      	str	r3, [r0, #16]
 801044a:	dd16      	ble.n	801047a <__s2b+0x72>
 801044c:	f104 0909 	add.w	r9, r4, #9
 8010450:	46c8      	mov	r8, r9
 8010452:	442c      	add	r4, r5
 8010454:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010458:	4601      	mov	r1, r0
 801045a:	3b30      	subs	r3, #48	@ 0x30
 801045c:	220a      	movs	r2, #10
 801045e:	4630      	mov	r0, r6
 8010460:	f7ff ff8c 	bl	801037c <__multadd>
 8010464:	45a0      	cmp	r8, r4
 8010466:	d1f5      	bne.n	8010454 <__s2b+0x4c>
 8010468:	f1a5 0408 	sub.w	r4, r5, #8
 801046c:	444c      	add	r4, r9
 801046e:	1b2d      	subs	r5, r5, r4
 8010470:	1963      	adds	r3, r4, r5
 8010472:	42bb      	cmp	r3, r7
 8010474:	db04      	blt.n	8010480 <__s2b+0x78>
 8010476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801047a:	340a      	adds	r4, #10
 801047c:	2509      	movs	r5, #9
 801047e:	e7f6      	b.n	801046e <__s2b+0x66>
 8010480:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010484:	4601      	mov	r1, r0
 8010486:	3b30      	subs	r3, #48	@ 0x30
 8010488:	220a      	movs	r2, #10
 801048a:	4630      	mov	r0, r6
 801048c:	f7ff ff76 	bl	801037c <__multadd>
 8010490:	e7ee      	b.n	8010470 <__s2b+0x68>
 8010492:	bf00      	nop
 8010494:	0801318d 	.word	0x0801318d
 8010498:	0801319e 	.word	0x0801319e

0801049c <__hi0bits>:
 801049c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80104a0:	4603      	mov	r3, r0
 80104a2:	bf36      	itet	cc
 80104a4:	0403      	lslcc	r3, r0, #16
 80104a6:	2000      	movcs	r0, #0
 80104a8:	2010      	movcc	r0, #16
 80104aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80104ae:	bf3c      	itt	cc
 80104b0:	021b      	lslcc	r3, r3, #8
 80104b2:	3008      	addcc	r0, #8
 80104b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80104b8:	bf3c      	itt	cc
 80104ba:	011b      	lslcc	r3, r3, #4
 80104bc:	3004      	addcc	r0, #4
 80104be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104c2:	bf3c      	itt	cc
 80104c4:	009b      	lslcc	r3, r3, #2
 80104c6:	3002      	addcc	r0, #2
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	db05      	blt.n	80104d8 <__hi0bits+0x3c>
 80104cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80104d0:	f100 0001 	add.w	r0, r0, #1
 80104d4:	bf08      	it	eq
 80104d6:	2020      	moveq	r0, #32
 80104d8:	4770      	bx	lr

080104da <__lo0bits>:
 80104da:	6803      	ldr	r3, [r0, #0]
 80104dc:	4602      	mov	r2, r0
 80104de:	f013 0007 	ands.w	r0, r3, #7
 80104e2:	d00b      	beq.n	80104fc <__lo0bits+0x22>
 80104e4:	07d9      	lsls	r1, r3, #31
 80104e6:	d421      	bmi.n	801052c <__lo0bits+0x52>
 80104e8:	0798      	lsls	r0, r3, #30
 80104ea:	bf49      	itett	mi
 80104ec:	085b      	lsrmi	r3, r3, #1
 80104ee:	089b      	lsrpl	r3, r3, #2
 80104f0:	2001      	movmi	r0, #1
 80104f2:	6013      	strmi	r3, [r2, #0]
 80104f4:	bf5c      	itt	pl
 80104f6:	6013      	strpl	r3, [r2, #0]
 80104f8:	2002      	movpl	r0, #2
 80104fa:	4770      	bx	lr
 80104fc:	b299      	uxth	r1, r3
 80104fe:	b909      	cbnz	r1, 8010504 <__lo0bits+0x2a>
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	2010      	movs	r0, #16
 8010504:	b2d9      	uxtb	r1, r3
 8010506:	b909      	cbnz	r1, 801050c <__lo0bits+0x32>
 8010508:	3008      	adds	r0, #8
 801050a:	0a1b      	lsrs	r3, r3, #8
 801050c:	0719      	lsls	r1, r3, #28
 801050e:	bf04      	itt	eq
 8010510:	091b      	lsreq	r3, r3, #4
 8010512:	3004      	addeq	r0, #4
 8010514:	0799      	lsls	r1, r3, #30
 8010516:	bf04      	itt	eq
 8010518:	089b      	lsreq	r3, r3, #2
 801051a:	3002      	addeq	r0, #2
 801051c:	07d9      	lsls	r1, r3, #31
 801051e:	d403      	bmi.n	8010528 <__lo0bits+0x4e>
 8010520:	085b      	lsrs	r3, r3, #1
 8010522:	f100 0001 	add.w	r0, r0, #1
 8010526:	d003      	beq.n	8010530 <__lo0bits+0x56>
 8010528:	6013      	str	r3, [r2, #0]
 801052a:	4770      	bx	lr
 801052c:	2000      	movs	r0, #0
 801052e:	4770      	bx	lr
 8010530:	2020      	movs	r0, #32
 8010532:	4770      	bx	lr

08010534 <__i2b>:
 8010534:	b510      	push	{r4, lr}
 8010536:	460c      	mov	r4, r1
 8010538:	2101      	movs	r1, #1
 801053a:	f7ff febd 	bl	80102b8 <_Balloc>
 801053e:	4602      	mov	r2, r0
 8010540:	b928      	cbnz	r0, 801054e <__i2b+0x1a>
 8010542:	4b05      	ldr	r3, [pc, #20]	@ (8010558 <__i2b+0x24>)
 8010544:	4805      	ldr	r0, [pc, #20]	@ (801055c <__i2b+0x28>)
 8010546:	f240 1145 	movw	r1, #325	@ 0x145
 801054a:	f001 fdf1 	bl	8012130 <__assert_func>
 801054e:	2301      	movs	r3, #1
 8010550:	6144      	str	r4, [r0, #20]
 8010552:	6103      	str	r3, [r0, #16]
 8010554:	bd10      	pop	{r4, pc}
 8010556:	bf00      	nop
 8010558:	0801318d 	.word	0x0801318d
 801055c:	0801319e 	.word	0x0801319e

08010560 <__multiply>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	4617      	mov	r7, r2
 8010566:	690a      	ldr	r2, [r1, #16]
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	429a      	cmp	r2, r3
 801056c:	bfa8      	it	ge
 801056e:	463b      	movge	r3, r7
 8010570:	4689      	mov	r9, r1
 8010572:	bfa4      	itt	ge
 8010574:	460f      	movge	r7, r1
 8010576:	4699      	movge	r9, r3
 8010578:	693d      	ldr	r5, [r7, #16]
 801057a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	6879      	ldr	r1, [r7, #4]
 8010582:	eb05 060a 	add.w	r6, r5, sl
 8010586:	42b3      	cmp	r3, r6
 8010588:	b085      	sub	sp, #20
 801058a:	bfb8      	it	lt
 801058c:	3101      	addlt	r1, #1
 801058e:	f7ff fe93 	bl	80102b8 <_Balloc>
 8010592:	b930      	cbnz	r0, 80105a2 <__multiply+0x42>
 8010594:	4602      	mov	r2, r0
 8010596:	4b41      	ldr	r3, [pc, #260]	@ (801069c <__multiply+0x13c>)
 8010598:	4841      	ldr	r0, [pc, #260]	@ (80106a0 <__multiply+0x140>)
 801059a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801059e:	f001 fdc7 	bl	8012130 <__assert_func>
 80105a2:	f100 0414 	add.w	r4, r0, #20
 80105a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80105aa:	4623      	mov	r3, r4
 80105ac:	2200      	movs	r2, #0
 80105ae:	4573      	cmp	r3, lr
 80105b0:	d320      	bcc.n	80105f4 <__multiply+0x94>
 80105b2:	f107 0814 	add.w	r8, r7, #20
 80105b6:	f109 0114 	add.w	r1, r9, #20
 80105ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80105be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80105c2:	9302      	str	r3, [sp, #8]
 80105c4:	1beb      	subs	r3, r5, r7
 80105c6:	3b15      	subs	r3, #21
 80105c8:	f023 0303 	bic.w	r3, r3, #3
 80105cc:	3304      	adds	r3, #4
 80105ce:	3715      	adds	r7, #21
 80105d0:	42bd      	cmp	r5, r7
 80105d2:	bf38      	it	cc
 80105d4:	2304      	movcc	r3, #4
 80105d6:	9301      	str	r3, [sp, #4]
 80105d8:	9b02      	ldr	r3, [sp, #8]
 80105da:	9103      	str	r1, [sp, #12]
 80105dc:	428b      	cmp	r3, r1
 80105de:	d80c      	bhi.n	80105fa <__multiply+0x9a>
 80105e0:	2e00      	cmp	r6, #0
 80105e2:	dd03      	ble.n	80105ec <__multiply+0x8c>
 80105e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d055      	beq.n	8010698 <__multiply+0x138>
 80105ec:	6106      	str	r6, [r0, #16]
 80105ee:	b005      	add	sp, #20
 80105f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f4:	f843 2b04 	str.w	r2, [r3], #4
 80105f8:	e7d9      	b.n	80105ae <__multiply+0x4e>
 80105fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80105fe:	f1ba 0f00 	cmp.w	sl, #0
 8010602:	d01f      	beq.n	8010644 <__multiply+0xe4>
 8010604:	46c4      	mov	ip, r8
 8010606:	46a1      	mov	r9, r4
 8010608:	2700      	movs	r7, #0
 801060a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801060e:	f8d9 3000 	ldr.w	r3, [r9]
 8010612:	fa1f fb82 	uxth.w	fp, r2
 8010616:	b29b      	uxth	r3, r3
 8010618:	fb0a 330b 	mla	r3, sl, fp, r3
 801061c:	443b      	add	r3, r7
 801061e:	f8d9 7000 	ldr.w	r7, [r9]
 8010622:	0c12      	lsrs	r2, r2, #16
 8010624:	0c3f      	lsrs	r7, r7, #16
 8010626:	fb0a 7202 	mla	r2, sl, r2, r7
 801062a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801062e:	b29b      	uxth	r3, r3
 8010630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010634:	4565      	cmp	r5, ip
 8010636:	f849 3b04 	str.w	r3, [r9], #4
 801063a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801063e:	d8e4      	bhi.n	801060a <__multiply+0xaa>
 8010640:	9b01      	ldr	r3, [sp, #4]
 8010642:	50e7      	str	r7, [r4, r3]
 8010644:	9b03      	ldr	r3, [sp, #12]
 8010646:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801064a:	3104      	adds	r1, #4
 801064c:	f1b9 0f00 	cmp.w	r9, #0
 8010650:	d020      	beq.n	8010694 <__multiply+0x134>
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	4647      	mov	r7, r8
 8010656:	46a4      	mov	ip, r4
 8010658:	f04f 0a00 	mov.w	sl, #0
 801065c:	f8b7 b000 	ldrh.w	fp, [r7]
 8010660:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010664:	fb09 220b 	mla	r2, r9, fp, r2
 8010668:	4452      	add	r2, sl
 801066a:	b29b      	uxth	r3, r3
 801066c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010670:	f84c 3b04 	str.w	r3, [ip], #4
 8010674:	f857 3b04 	ldr.w	r3, [r7], #4
 8010678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801067c:	f8bc 3000 	ldrh.w	r3, [ip]
 8010680:	fb09 330a 	mla	r3, r9, sl, r3
 8010684:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010688:	42bd      	cmp	r5, r7
 801068a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801068e:	d8e5      	bhi.n	801065c <__multiply+0xfc>
 8010690:	9a01      	ldr	r2, [sp, #4]
 8010692:	50a3      	str	r3, [r4, r2]
 8010694:	3404      	adds	r4, #4
 8010696:	e79f      	b.n	80105d8 <__multiply+0x78>
 8010698:	3e01      	subs	r6, #1
 801069a:	e7a1      	b.n	80105e0 <__multiply+0x80>
 801069c:	0801318d 	.word	0x0801318d
 80106a0:	0801319e 	.word	0x0801319e

080106a4 <__pow5mult>:
 80106a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a8:	4615      	mov	r5, r2
 80106aa:	f012 0203 	ands.w	r2, r2, #3
 80106ae:	4607      	mov	r7, r0
 80106b0:	460e      	mov	r6, r1
 80106b2:	d007      	beq.n	80106c4 <__pow5mult+0x20>
 80106b4:	4c25      	ldr	r4, [pc, #148]	@ (801074c <__pow5mult+0xa8>)
 80106b6:	3a01      	subs	r2, #1
 80106b8:	2300      	movs	r3, #0
 80106ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106be:	f7ff fe5d 	bl	801037c <__multadd>
 80106c2:	4606      	mov	r6, r0
 80106c4:	10ad      	asrs	r5, r5, #2
 80106c6:	d03d      	beq.n	8010744 <__pow5mult+0xa0>
 80106c8:	69fc      	ldr	r4, [r7, #28]
 80106ca:	b97c      	cbnz	r4, 80106ec <__pow5mult+0x48>
 80106cc:	2010      	movs	r0, #16
 80106ce:	f7ff fd3d 	bl	801014c <malloc>
 80106d2:	4602      	mov	r2, r0
 80106d4:	61f8      	str	r0, [r7, #28]
 80106d6:	b928      	cbnz	r0, 80106e4 <__pow5mult+0x40>
 80106d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010750 <__pow5mult+0xac>)
 80106da:	481e      	ldr	r0, [pc, #120]	@ (8010754 <__pow5mult+0xb0>)
 80106dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80106e0:	f001 fd26 	bl	8012130 <__assert_func>
 80106e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106e8:	6004      	str	r4, [r0, #0]
 80106ea:	60c4      	str	r4, [r0, #12]
 80106ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80106f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106f4:	b94c      	cbnz	r4, 801070a <__pow5mult+0x66>
 80106f6:	f240 2171 	movw	r1, #625	@ 0x271
 80106fa:	4638      	mov	r0, r7
 80106fc:	f7ff ff1a 	bl	8010534 <__i2b>
 8010700:	2300      	movs	r3, #0
 8010702:	f8c8 0008 	str.w	r0, [r8, #8]
 8010706:	4604      	mov	r4, r0
 8010708:	6003      	str	r3, [r0, #0]
 801070a:	f04f 0900 	mov.w	r9, #0
 801070e:	07eb      	lsls	r3, r5, #31
 8010710:	d50a      	bpl.n	8010728 <__pow5mult+0x84>
 8010712:	4631      	mov	r1, r6
 8010714:	4622      	mov	r2, r4
 8010716:	4638      	mov	r0, r7
 8010718:	f7ff ff22 	bl	8010560 <__multiply>
 801071c:	4631      	mov	r1, r6
 801071e:	4680      	mov	r8, r0
 8010720:	4638      	mov	r0, r7
 8010722:	f7ff fe09 	bl	8010338 <_Bfree>
 8010726:	4646      	mov	r6, r8
 8010728:	106d      	asrs	r5, r5, #1
 801072a:	d00b      	beq.n	8010744 <__pow5mult+0xa0>
 801072c:	6820      	ldr	r0, [r4, #0]
 801072e:	b938      	cbnz	r0, 8010740 <__pow5mult+0x9c>
 8010730:	4622      	mov	r2, r4
 8010732:	4621      	mov	r1, r4
 8010734:	4638      	mov	r0, r7
 8010736:	f7ff ff13 	bl	8010560 <__multiply>
 801073a:	6020      	str	r0, [r4, #0]
 801073c:	f8c0 9000 	str.w	r9, [r0]
 8010740:	4604      	mov	r4, r0
 8010742:	e7e4      	b.n	801070e <__pow5mult+0x6a>
 8010744:	4630      	mov	r0, r6
 8010746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801074a:	bf00      	nop
 801074c:	080132b0 	.word	0x080132b0
 8010750:	0801311e 	.word	0x0801311e
 8010754:	0801319e 	.word	0x0801319e

08010758 <__lshift>:
 8010758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801075c:	460c      	mov	r4, r1
 801075e:	6849      	ldr	r1, [r1, #4]
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010766:	68a3      	ldr	r3, [r4, #8]
 8010768:	4607      	mov	r7, r0
 801076a:	4691      	mov	r9, r2
 801076c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010770:	f108 0601 	add.w	r6, r8, #1
 8010774:	42b3      	cmp	r3, r6
 8010776:	db0b      	blt.n	8010790 <__lshift+0x38>
 8010778:	4638      	mov	r0, r7
 801077a:	f7ff fd9d 	bl	80102b8 <_Balloc>
 801077e:	4605      	mov	r5, r0
 8010780:	b948      	cbnz	r0, 8010796 <__lshift+0x3e>
 8010782:	4602      	mov	r2, r0
 8010784:	4b28      	ldr	r3, [pc, #160]	@ (8010828 <__lshift+0xd0>)
 8010786:	4829      	ldr	r0, [pc, #164]	@ (801082c <__lshift+0xd4>)
 8010788:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801078c:	f001 fcd0 	bl	8012130 <__assert_func>
 8010790:	3101      	adds	r1, #1
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	e7ee      	b.n	8010774 <__lshift+0x1c>
 8010796:	2300      	movs	r3, #0
 8010798:	f100 0114 	add.w	r1, r0, #20
 801079c:	f100 0210 	add.w	r2, r0, #16
 80107a0:	4618      	mov	r0, r3
 80107a2:	4553      	cmp	r3, sl
 80107a4:	db33      	blt.n	801080e <__lshift+0xb6>
 80107a6:	6920      	ldr	r0, [r4, #16]
 80107a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107ac:	f104 0314 	add.w	r3, r4, #20
 80107b0:	f019 091f 	ands.w	r9, r9, #31
 80107b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107bc:	d02b      	beq.n	8010816 <__lshift+0xbe>
 80107be:	f1c9 0e20 	rsb	lr, r9, #32
 80107c2:	468a      	mov	sl, r1
 80107c4:	2200      	movs	r2, #0
 80107c6:	6818      	ldr	r0, [r3, #0]
 80107c8:	fa00 f009 	lsl.w	r0, r0, r9
 80107cc:	4310      	orrs	r0, r2
 80107ce:	f84a 0b04 	str.w	r0, [sl], #4
 80107d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d6:	459c      	cmp	ip, r3
 80107d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80107dc:	d8f3      	bhi.n	80107c6 <__lshift+0x6e>
 80107de:	ebac 0304 	sub.w	r3, ip, r4
 80107e2:	3b15      	subs	r3, #21
 80107e4:	f023 0303 	bic.w	r3, r3, #3
 80107e8:	3304      	adds	r3, #4
 80107ea:	f104 0015 	add.w	r0, r4, #21
 80107ee:	4560      	cmp	r0, ip
 80107f0:	bf88      	it	hi
 80107f2:	2304      	movhi	r3, #4
 80107f4:	50ca      	str	r2, [r1, r3]
 80107f6:	b10a      	cbz	r2, 80107fc <__lshift+0xa4>
 80107f8:	f108 0602 	add.w	r6, r8, #2
 80107fc:	3e01      	subs	r6, #1
 80107fe:	4638      	mov	r0, r7
 8010800:	612e      	str	r6, [r5, #16]
 8010802:	4621      	mov	r1, r4
 8010804:	f7ff fd98 	bl	8010338 <_Bfree>
 8010808:	4628      	mov	r0, r5
 801080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010812:	3301      	adds	r3, #1
 8010814:	e7c5      	b.n	80107a2 <__lshift+0x4a>
 8010816:	3904      	subs	r1, #4
 8010818:	f853 2b04 	ldr.w	r2, [r3], #4
 801081c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010820:	459c      	cmp	ip, r3
 8010822:	d8f9      	bhi.n	8010818 <__lshift+0xc0>
 8010824:	e7ea      	b.n	80107fc <__lshift+0xa4>
 8010826:	bf00      	nop
 8010828:	0801318d 	.word	0x0801318d
 801082c:	0801319e 	.word	0x0801319e

08010830 <__mcmp>:
 8010830:	690a      	ldr	r2, [r1, #16]
 8010832:	4603      	mov	r3, r0
 8010834:	6900      	ldr	r0, [r0, #16]
 8010836:	1a80      	subs	r0, r0, r2
 8010838:	b530      	push	{r4, r5, lr}
 801083a:	d10e      	bne.n	801085a <__mcmp+0x2a>
 801083c:	3314      	adds	r3, #20
 801083e:	3114      	adds	r1, #20
 8010840:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010844:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010848:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801084c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010850:	4295      	cmp	r5, r2
 8010852:	d003      	beq.n	801085c <__mcmp+0x2c>
 8010854:	d205      	bcs.n	8010862 <__mcmp+0x32>
 8010856:	f04f 30ff 	mov.w	r0, #4294967295
 801085a:	bd30      	pop	{r4, r5, pc}
 801085c:	42a3      	cmp	r3, r4
 801085e:	d3f3      	bcc.n	8010848 <__mcmp+0x18>
 8010860:	e7fb      	b.n	801085a <__mcmp+0x2a>
 8010862:	2001      	movs	r0, #1
 8010864:	e7f9      	b.n	801085a <__mcmp+0x2a>
	...

08010868 <__mdiff>:
 8010868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801086c:	4689      	mov	r9, r1
 801086e:	4606      	mov	r6, r0
 8010870:	4611      	mov	r1, r2
 8010872:	4648      	mov	r0, r9
 8010874:	4614      	mov	r4, r2
 8010876:	f7ff ffdb 	bl	8010830 <__mcmp>
 801087a:	1e05      	subs	r5, r0, #0
 801087c:	d112      	bne.n	80108a4 <__mdiff+0x3c>
 801087e:	4629      	mov	r1, r5
 8010880:	4630      	mov	r0, r6
 8010882:	f7ff fd19 	bl	80102b8 <_Balloc>
 8010886:	4602      	mov	r2, r0
 8010888:	b928      	cbnz	r0, 8010896 <__mdiff+0x2e>
 801088a:	4b3f      	ldr	r3, [pc, #252]	@ (8010988 <__mdiff+0x120>)
 801088c:	f240 2137 	movw	r1, #567	@ 0x237
 8010890:	483e      	ldr	r0, [pc, #248]	@ (801098c <__mdiff+0x124>)
 8010892:	f001 fc4d 	bl	8012130 <__assert_func>
 8010896:	2301      	movs	r3, #1
 8010898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801089c:	4610      	mov	r0, r2
 801089e:	b003      	add	sp, #12
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	bfbc      	itt	lt
 80108a6:	464b      	movlt	r3, r9
 80108a8:	46a1      	movlt	r9, r4
 80108aa:	4630      	mov	r0, r6
 80108ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80108b0:	bfba      	itte	lt
 80108b2:	461c      	movlt	r4, r3
 80108b4:	2501      	movlt	r5, #1
 80108b6:	2500      	movge	r5, #0
 80108b8:	f7ff fcfe 	bl	80102b8 <_Balloc>
 80108bc:	4602      	mov	r2, r0
 80108be:	b918      	cbnz	r0, 80108c8 <__mdiff+0x60>
 80108c0:	4b31      	ldr	r3, [pc, #196]	@ (8010988 <__mdiff+0x120>)
 80108c2:	f240 2145 	movw	r1, #581	@ 0x245
 80108c6:	e7e3      	b.n	8010890 <__mdiff+0x28>
 80108c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80108cc:	6926      	ldr	r6, [r4, #16]
 80108ce:	60c5      	str	r5, [r0, #12]
 80108d0:	f109 0310 	add.w	r3, r9, #16
 80108d4:	f109 0514 	add.w	r5, r9, #20
 80108d8:	f104 0e14 	add.w	lr, r4, #20
 80108dc:	f100 0b14 	add.w	fp, r0, #20
 80108e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80108e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	46d9      	mov	r9, fp
 80108ec:	f04f 0c00 	mov.w	ip, #0
 80108f0:	9b01      	ldr	r3, [sp, #4]
 80108f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80108f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80108fa:	9301      	str	r3, [sp, #4]
 80108fc:	fa1f f38a 	uxth.w	r3, sl
 8010900:	4619      	mov	r1, r3
 8010902:	b283      	uxth	r3, r0
 8010904:	1acb      	subs	r3, r1, r3
 8010906:	0c00      	lsrs	r0, r0, #16
 8010908:	4463      	add	r3, ip
 801090a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801090e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010912:	b29b      	uxth	r3, r3
 8010914:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010918:	4576      	cmp	r6, lr
 801091a:	f849 3b04 	str.w	r3, [r9], #4
 801091e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010922:	d8e5      	bhi.n	80108f0 <__mdiff+0x88>
 8010924:	1b33      	subs	r3, r6, r4
 8010926:	3b15      	subs	r3, #21
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	3415      	adds	r4, #21
 801092e:	3304      	adds	r3, #4
 8010930:	42a6      	cmp	r6, r4
 8010932:	bf38      	it	cc
 8010934:	2304      	movcc	r3, #4
 8010936:	441d      	add	r5, r3
 8010938:	445b      	add	r3, fp
 801093a:	461e      	mov	r6, r3
 801093c:	462c      	mov	r4, r5
 801093e:	4544      	cmp	r4, r8
 8010940:	d30e      	bcc.n	8010960 <__mdiff+0xf8>
 8010942:	f108 0103 	add.w	r1, r8, #3
 8010946:	1b49      	subs	r1, r1, r5
 8010948:	f021 0103 	bic.w	r1, r1, #3
 801094c:	3d03      	subs	r5, #3
 801094e:	45a8      	cmp	r8, r5
 8010950:	bf38      	it	cc
 8010952:	2100      	movcc	r1, #0
 8010954:	440b      	add	r3, r1
 8010956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801095a:	b191      	cbz	r1, 8010982 <__mdiff+0x11a>
 801095c:	6117      	str	r7, [r2, #16]
 801095e:	e79d      	b.n	801089c <__mdiff+0x34>
 8010960:	f854 1b04 	ldr.w	r1, [r4], #4
 8010964:	46e6      	mov	lr, ip
 8010966:	0c08      	lsrs	r0, r1, #16
 8010968:	fa1c fc81 	uxtah	ip, ip, r1
 801096c:	4471      	add	r1, lr
 801096e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010972:	b289      	uxth	r1, r1
 8010974:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010978:	f846 1b04 	str.w	r1, [r6], #4
 801097c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010980:	e7dd      	b.n	801093e <__mdiff+0xd6>
 8010982:	3f01      	subs	r7, #1
 8010984:	e7e7      	b.n	8010956 <__mdiff+0xee>
 8010986:	bf00      	nop
 8010988:	0801318d 	.word	0x0801318d
 801098c:	0801319e 	.word	0x0801319e

08010990 <__ulp>:
 8010990:	b082      	sub	sp, #8
 8010992:	ed8d 0b00 	vstr	d0, [sp]
 8010996:	9a01      	ldr	r2, [sp, #4]
 8010998:	4b0f      	ldr	r3, [pc, #60]	@ (80109d8 <__ulp+0x48>)
 801099a:	4013      	ands	r3, r2
 801099c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	dc08      	bgt.n	80109b6 <__ulp+0x26>
 80109a4:	425b      	negs	r3, r3
 80109a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80109aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80109ae:	da04      	bge.n	80109ba <__ulp+0x2a>
 80109b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80109b4:	4113      	asrs	r3, r2
 80109b6:	2200      	movs	r2, #0
 80109b8:	e008      	b.n	80109cc <__ulp+0x3c>
 80109ba:	f1a2 0314 	sub.w	r3, r2, #20
 80109be:	2b1e      	cmp	r3, #30
 80109c0:	bfda      	itte	le
 80109c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80109c6:	40da      	lsrle	r2, r3
 80109c8:	2201      	movgt	r2, #1
 80109ca:	2300      	movs	r3, #0
 80109cc:	4619      	mov	r1, r3
 80109ce:	4610      	mov	r0, r2
 80109d0:	ec41 0b10 	vmov	d0, r0, r1
 80109d4:	b002      	add	sp, #8
 80109d6:	4770      	bx	lr
 80109d8:	7ff00000 	.word	0x7ff00000

080109dc <__b2d>:
 80109dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	6906      	ldr	r6, [r0, #16]
 80109e2:	f100 0814 	add.w	r8, r0, #20
 80109e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80109ea:	1f37      	subs	r7, r6, #4
 80109ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80109f0:	4610      	mov	r0, r2
 80109f2:	f7ff fd53 	bl	801049c <__hi0bits>
 80109f6:	f1c0 0320 	rsb	r3, r0, #32
 80109fa:	280a      	cmp	r0, #10
 80109fc:	600b      	str	r3, [r1, #0]
 80109fe:	491b      	ldr	r1, [pc, #108]	@ (8010a6c <__b2d+0x90>)
 8010a00:	dc15      	bgt.n	8010a2e <__b2d+0x52>
 8010a02:	f1c0 0c0b 	rsb	ip, r0, #11
 8010a06:	fa22 f30c 	lsr.w	r3, r2, ip
 8010a0a:	45b8      	cmp	r8, r7
 8010a0c:	ea43 0501 	orr.w	r5, r3, r1
 8010a10:	bf34      	ite	cc
 8010a12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010a16:	2300      	movcs	r3, #0
 8010a18:	3015      	adds	r0, #21
 8010a1a:	fa02 f000 	lsl.w	r0, r2, r0
 8010a1e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010a22:	4303      	orrs	r3, r0
 8010a24:	461c      	mov	r4, r3
 8010a26:	ec45 4b10 	vmov	d0, r4, r5
 8010a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a2e:	45b8      	cmp	r8, r7
 8010a30:	bf3a      	itte	cc
 8010a32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010a36:	f1a6 0708 	subcc.w	r7, r6, #8
 8010a3a:	2300      	movcs	r3, #0
 8010a3c:	380b      	subs	r0, #11
 8010a3e:	d012      	beq.n	8010a66 <__b2d+0x8a>
 8010a40:	f1c0 0120 	rsb	r1, r0, #32
 8010a44:	fa23 f401 	lsr.w	r4, r3, r1
 8010a48:	4082      	lsls	r2, r0
 8010a4a:	4322      	orrs	r2, r4
 8010a4c:	4547      	cmp	r7, r8
 8010a4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010a52:	bf8c      	ite	hi
 8010a54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010a58:	2200      	movls	r2, #0
 8010a5a:	4083      	lsls	r3, r0
 8010a5c:	40ca      	lsrs	r2, r1
 8010a5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010a62:	4313      	orrs	r3, r2
 8010a64:	e7de      	b.n	8010a24 <__b2d+0x48>
 8010a66:	ea42 0501 	orr.w	r5, r2, r1
 8010a6a:	e7db      	b.n	8010a24 <__b2d+0x48>
 8010a6c:	3ff00000 	.word	0x3ff00000

08010a70 <__d2b>:
 8010a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a74:	460f      	mov	r7, r1
 8010a76:	2101      	movs	r1, #1
 8010a78:	ec59 8b10 	vmov	r8, r9, d0
 8010a7c:	4616      	mov	r6, r2
 8010a7e:	f7ff fc1b 	bl	80102b8 <_Balloc>
 8010a82:	4604      	mov	r4, r0
 8010a84:	b930      	cbnz	r0, 8010a94 <__d2b+0x24>
 8010a86:	4602      	mov	r2, r0
 8010a88:	4b23      	ldr	r3, [pc, #140]	@ (8010b18 <__d2b+0xa8>)
 8010a8a:	4824      	ldr	r0, [pc, #144]	@ (8010b1c <__d2b+0xac>)
 8010a8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010a90:	f001 fb4e 	bl	8012130 <__assert_func>
 8010a94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010a98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a9c:	b10d      	cbz	r5, 8010aa2 <__d2b+0x32>
 8010a9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010aa2:	9301      	str	r3, [sp, #4]
 8010aa4:	f1b8 0300 	subs.w	r3, r8, #0
 8010aa8:	d023      	beq.n	8010af2 <__d2b+0x82>
 8010aaa:	4668      	mov	r0, sp
 8010aac:	9300      	str	r3, [sp, #0]
 8010aae:	f7ff fd14 	bl	80104da <__lo0bits>
 8010ab2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010ab6:	b1d0      	cbz	r0, 8010aee <__d2b+0x7e>
 8010ab8:	f1c0 0320 	rsb	r3, r0, #32
 8010abc:	fa02 f303 	lsl.w	r3, r2, r3
 8010ac0:	430b      	orrs	r3, r1
 8010ac2:	40c2      	lsrs	r2, r0
 8010ac4:	6163      	str	r3, [r4, #20]
 8010ac6:	9201      	str	r2, [sp, #4]
 8010ac8:	9b01      	ldr	r3, [sp, #4]
 8010aca:	61a3      	str	r3, [r4, #24]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	bf0c      	ite	eq
 8010ad0:	2201      	moveq	r2, #1
 8010ad2:	2202      	movne	r2, #2
 8010ad4:	6122      	str	r2, [r4, #16]
 8010ad6:	b1a5      	cbz	r5, 8010b02 <__d2b+0x92>
 8010ad8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010adc:	4405      	add	r5, r0
 8010ade:	603d      	str	r5, [r7, #0]
 8010ae0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010ae4:	6030      	str	r0, [r6, #0]
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	b003      	add	sp, #12
 8010aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aee:	6161      	str	r1, [r4, #20]
 8010af0:	e7ea      	b.n	8010ac8 <__d2b+0x58>
 8010af2:	a801      	add	r0, sp, #4
 8010af4:	f7ff fcf1 	bl	80104da <__lo0bits>
 8010af8:	9b01      	ldr	r3, [sp, #4]
 8010afa:	6163      	str	r3, [r4, #20]
 8010afc:	3020      	adds	r0, #32
 8010afe:	2201      	movs	r2, #1
 8010b00:	e7e8      	b.n	8010ad4 <__d2b+0x64>
 8010b02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010b0a:	6038      	str	r0, [r7, #0]
 8010b0c:	6918      	ldr	r0, [r3, #16]
 8010b0e:	f7ff fcc5 	bl	801049c <__hi0bits>
 8010b12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b16:	e7e5      	b.n	8010ae4 <__d2b+0x74>
 8010b18:	0801318d 	.word	0x0801318d
 8010b1c:	0801319e 	.word	0x0801319e

08010b20 <__ratio>:
 8010b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b24:	b085      	sub	sp, #20
 8010b26:	e9cd 1000 	strd	r1, r0, [sp]
 8010b2a:	a902      	add	r1, sp, #8
 8010b2c:	f7ff ff56 	bl	80109dc <__b2d>
 8010b30:	9800      	ldr	r0, [sp, #0]
 8010b32:	a903      	add	r1, sp, #12
 8010b34:	ec55 4b10 	vmov	r4, r5, d0
 8010b38:	f7ff ff50 	bl	80109dc <__b2d>
 8010b3c:	9b01      	ldr	r3, [sp, #4]
 8010b3e:	6919      	ldr	r1, [r3, #16]
 8010b40:	9b00      	ldr	r3, [sp, #0]
 8010b42:	691b      	ldr	r3, [r3, #16]
 8010b44:	1ac9      	subs	r1, r1, r3
 8010b46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010b4a:	1a9b      	subs	r3, r3, r2
 8010b4c:	ec5b ab10 	vmov	sl, fp, d0
 8010b50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	bfce      	itee	gt
 8010b58:	462a      	movgt	r2, r5
 8010b5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b5e:	465a      	movle	r2, fp
 8010b60:	462f      	mov	r7, r5
 8010b62:	46d9      	mov	r9, fp
 8010b64:	bfcc      	ite	gt
 8010b66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b6a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010b6e:	464b      	mov	r3, r9
 8010b70:	4652      	mov	r2, sl
 8010b72:	4620      	mov	r0, r4
 8010b74:	4639      	mov	r1, r7
 8010b76:	f7ef fe69 	bl	800084c <__aeabi_ddiv>
 8010b7a:	ec41 0b10 	vmov	d0, r0, r1
 8010b7e:	b005      	add	sp, #20
 8010b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b84 <__copybits>:
 8010b84:	3901      	subs	r1, #1
 8010b86:	b570      	push	{r4, r5, r6, lr}
 8010b88:	1149      	asrs	r1, r1, #5
 8010b8a:	6914      	ldr	r4, [r2, #16]
 8010b8c:	3101      	adds	r1, #1
 8010b8e:	f102 0314 	add.w	r3, r2, #20
 8010b92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010b96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b9a:	1f05      	subs	r5, r0, #4
 8010b9c:	42a3      	cmp	r3, r4
 8010b9e:	d30c      	bcc.n	8010bba <__copybits+0x36>
 8010ba0:	1aa3      	subs	r3, r4, r2
 8010ba2:	3b11      	subs	r3, #17
 8010ba4:	f023 0303 	bic.w	r3, r3, #3
 8010ba8:	3211      	adds	r2, #17
 8010baa:	42a2      	cmp	r2, r4
 8010bac:	bf88      	it	hi
 8010bae:	2300      	movhi	r3, #0
 8010bb0:	4418      	add	r0, r3
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	4288      	cmp	r0, r1
 8010bb6:	d305      	bcc.n	8010bc4 <__copybits+0x40>
 8010bb8:	bd70      	pop	{r4, r5, r6, pc}
 8010bba:	f853 6b04 	ldr.w	r6, [r3], #4
 8010bbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8010bc2:	e7eb      	b.n	8010b9c <__copybits+0x18>
 8010bc4:	f840 3b04 	str.w	r3, [r0], #4
 8010bc8:	e7f4      	b.n	8010bb4 <__copybits+0x30>

08010bca <__any_on>:
 8010bca:	f100 0214 	add.w	r2, r0, #20
 8010bce:	6900      	ldr	r0, [r0, #16]
 8010bd0:	114b      	asrs	r3, r1, #5
 8010bd2:	4298      	cmp	r0, r3
 8010bd4:	b510      	push	{r4, lr}
 8010bd6:	db11      	blt.n	8010bfc <__any_on+0x32>
 8010bd8:	dd0a      	ble.n	8010bf0 <__any_on+0x26>
 8010bda:	f011 011f 	ands.w	r1, r1, #31
 8010bde:	d007      	beq.n	8010bf0 <__any_on+0x26>
 8010be0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010be4:	fa24 f001 	lsr.w	r0, r4, r1
 8010be8:	fa00 f101 	lsl.w	r1, r0, r1
 8010bec:	428c      	cmp	r4, r1
 8010bee:	d10b      	bne.n	8010c08 <__any_on+0x3e>
 8010bf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d803      	bhi.n	8010c00 <__any_on+0x36>
 8010bf8:	2000      	movs	r0, #0
 8010bfa:	bd10      	pop	{r4, pc}
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	e7f7      	b.n	8010bf0 <__any_on+0x26>
 8010c00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c04:	2900      	cmp	r1, #0
 8010c06:	d0f5      	beq.n	8010bf4 <__any_on+0x2a>
 8010c08:	2001      	movs	r0, #1
 8010c0a:	e7f6      	b.n	8010bfa <__any_on+0x30>

08010c0c <sulp>:
 8010c0c:	b570      	push	{r4, r5, r6, lr}
 8010c0e:	4604      	mov	r4, r0
 8010c10:	460d      	mov	r5, r1
 8010c12:	ec45 4b10 	vmov	d0, r4, r5
 8010c16:	4616      	mov	r6, r2
 8010c18:	f7ff feba 	bl	8010990 <__ulp>
 8010c1c:	ec51 0b10 	vmov	r0, r1, d0
 8010c20:	b17e      	cbz	r6, 8010c42 <sulp+0x36>
 8010c22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010c26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	dd09      	ble.n	8010c42 <sulp+0x36>
 8010c2e:	051b      	lsls	r3, r3, #20
 8010c30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010c34:	2400      	movs	r4, #0
 8010c36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	462b      	mov	r3, r5
 8010c3e:	f7ef fcdb 	bl	80005f8 <__aeabi_dmul>
 8010c42:	ec41 0b10 	vmov	d0, r0, r1
 8010c46:	bd70      	pop	{r4, r5, r6, pc}

08010c48 <_strtod_l>:
 8010c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4c:	b09f      	sub	sp, #124	@ 0x7c
 8010c4e:	460c      	mov	r4, r1
 8010c50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010c52:	2200      	movs	r2, #0
 8010c54:	921a      	str	r2, [sp, #104]	@ 0x68
 8010c56:	9005      	str	r0, [sp, #20]
 8010c58:	f04f 0a00 	mov.w	sl, #0
 8010c5c:	f04f 0b00 	mov.w	fp, #0
 8010c60:	460a      	mov	r2, r1
 8010c62:	9219      	str	r2, [sp, #100]	@ 0x64
 8010c64:	7811      	ldrb	r1, [r2, #0]
 8010c66:	292b      	cmp	r1, #43	@ 0x2b
 8010c68:	d04a      	beq.n	8010d00 <_strtod_l+0xb8>
 8010c6a:	d838      	bhi.n	8010cde <_strtod_l+0x96>
 8010c6c:	290d      	cmp	r1, #13
 8010c6e:	d832      	bhi.n	8010cd6 <_strtod_l+0x8e>
 8010c70:	2908      	cmp	r1, #8
 8010c72:	d832      	bhi.n	8010cda <_strtod_l+0x92>
 8010c74:	2900      	cmp	r1, #0
 8010c76:	d03b      	beq.n	8010cf0 <_strtod_l+0xa8>
 8010c78:	2200      	movs	r2, #0
 8010c7a:	920e      	str	r2, [sp, #56]	@ 0x38
 8010c7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010c7e:	782a      	ldrb	r2, [r5, #0]
 8010c80:	2a30      	cmp	r2, #48	@ 0x30
 8010c82:	f040 80b2 	bne.w	8010dea <_strtod_l+0x1a2>
 8010c86:	786a      	ldrb	r2, [r5, #1]
 8010c88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010c8c:	2a58      	cmp	r2, #88	@ 0x58
 8010c8e:	d16e      	bne.n	8010d6e <_strtod_l+0x126>
 8010c90:	9302      	str	r3, [sp, #8]
 8010c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c94:	9301      	str	r3, [sp, #4]
 8010c96:	ab1a      	add	r3, sp, #104	@ 0x68
 8010c98:	9300      	str	r3, [sp, #0]
 8010c9a:	4a8f      	ldr	r2, [pc, #572]	@ (8010ed8 <_strtod_l+0x290>)
 8010c9c:	9805      	ldr	r0, [sp, #20]
 8010c9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010ca0:	a919      	add	r1, sp, #100	@ 0x64
 8010ca2:	f001 fadf 	bl	8012264 <__gethex>
 8010ca6:	f010 060f 	ands.w	r6, r0, #15
 8010caa:	4604      	mov	r4, r0
 8010cac:	d005      	beq.n	8010cba <_strtod_l+0x72>
 8010cae:	2e06      	cmp	r6, #6
 8010cb0:	d128      	bne.n	8010d04 <_strtod_l+0xbc>
 8010cb2:	3501      	adds	r5, #1
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8010cb8:	930e      	str	r3, [sp, #56]	@ 0x38
 8010cba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	f040 858e 	bne.w	80117de <_strtod_l+0xb96>
 8010cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cc4:	b1cb      	cbz	r3, 8010cfa <_strtod_l+0xb2>
 8010cc6:	4652      	mov	r2, sl
 8010cc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010ccc:	ec43 2b10 	vmov	d0, r2, r3
 8010cd0:	b01f      	add	sp, #124	@ 0x7c
 8010cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd6:	2920      	cmp	r1, #32
 8010cd8:	d1ce      	bne.n	8010c78 <_strtod_l+0x30>
 8010cda:	3201      	adds	r2, #1
 8010cdc:	e7c1      	b.n	8010c62 <_strtod_l+0x1a>
 8010cde:	292d      	cmp	r1, #45	@ 0x2d
 8010ce0:	d1ca      	bne.n	8010c78 <_strtod_l+0x30>
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	910e      	str	r1, [sp, #56]	@ 0x38
 8010ce6:	1c51      	adds	r1, r2, #1
 8010ce8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010cea:	7852      	ldrb	r2, [r2, #1]
 8010cec:	2a00      	cmp	r2, #0
 8010cee:	d1c5      	bne.n	8010c7c <_strtod_l+0x34>
 8010cf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010cf2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	f040 8570 	bne.w	80117da <_strtod_l+0xb92>
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	465b      	mov	r3, fp
 8010cfe:	e7e5      	b.n	8010ccc <_strtod_l+0x84>
 8010d00:	2100      	movs	r1, #0
 8010d02:	e7ef      	b.n	8010ce4 <_strtod_l+0x9c>
 8010d04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010d06:	b13a      	cbz	r2, 8010d18 <_strtod_l+0xd0>
 8010d08:	2135      	movs	r1, #53	@ 0x35
 8010d0a:	a81c      	add	r0, sp, #112	@ 0x70
 8010d0c:	f7ff ff3a 	bl	8010b84 <__copybits>
 8010d10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010d12:	9805      	ldr	r0, [sp, #20]
 8010d14:	f7ff fb10 	bl	8010338 <_Bfree>
 8010d18:	3e01      	subs	r6, #1
 8010d1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010d1c:	2e04      	cmp	r6, #4
 8010d1e:	d806      	bhi.n	8010d2e <_strtod_l+0xe6>
 8010d20:	e8df f006 	tbb	[pc, r6]
 8010d24:	201d0314 	.word	0x201d0314
 8010d28:	14          	.byte	0x14
 8010d29:	00          	.byte	0x00
 8010d2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010d2e:	05e1      	lsls	r1, r4, #23
 8010d30:	bf48      	it	mi
 8010d32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010d36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010d3a:	0d1b      	lsrs	r3, r3, #20
 8010d3c:	051b      	lsls	r3, r3, #20
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1bb      	bne.n	8010cba <_strtod_l+0x72>
 8010d42:	f7fe fb1f 	bl	800f384 <__errno>
 8010d46:	2322      	movs	r3, #34	@ 0x22
 8010d48:	6003      	str	r3, [r0, #0]
 8010d4a:	e7b6      	b.n	8010cba <_strtod_l+0x72>
 8010d4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010d50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010d54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010d58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010d5c:	e7e7      	b.n	8010d2e <_strtod_l+0xe6>
 8010d5e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010ee0 <_strtod_l+0x298>
 8010d62:	e7e4      	b.n	8010d2e <_strtod_l+0xe6>
 8010d64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010d68:	f04f 3aff 	mov.w	sl, #4294967295
 8010d6c:	e7df      	b.n	8010d2e <_strtod_l+0xe6>
 8010d6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d70:	1c5a      	adds	r2, r3, #1
 8010d72:	9219      	str	r2, [sp, #100]	@ 0x64
 8010d74:	785b      	ldrb	r3, [r3, #1]
 8010d76:	2b30      	cmp	r3, #48	@ 0x30
 8010d78:	d0f9      	beq.n	8010d6e <_strtod_l+0x126>
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d09d      	beq.n	8010cba <_strtod_l+0x72>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	2700      	movs	r7, #0
 8010d82:	9308      	str	r3, [sp, #32]
 8010d84:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010d86:	930c      	str	r3, [sp, #48]	@ 0x30
 8010d88:	970b      	str	r7, [sp, #44]	@ 0x2c
 8010d8a:	46b9      	mov	r9, r7
 8010d8c:	220a      	movs	r2, #10
 8010d8e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8010d90:	7805      	ldrb	r5, [r0, #0]
 8010d92:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8010d96:	b2d9      	uxtb	r1, r3
 8010d98:	2909      	cmp	r1, #9
 8010d9a:	d928      	bls.n	8010dee <_strtod_l+0x1a6>
 8010d9c:	494f      	ldr	r1, [pc, #316]	@ (8010edc <_strtod_l+0x294>)
 8010d9e:	2201      	movs	r2, #1
 8010da0:	f001 f97a 	bl	8012098 <strncmp>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	d032      	beq.n	8010e0e <_strtod_l+0x1c6>
 8010da8:	2000      	movs	r0, #0
 8010daa:	462a      	mov	r2, r5
 8010dac:	900a      	str	r0, [sp, #40]	@ 0x28
 8010dae:	464d      	mov	r5, r9
 8010db0:	4603      	mov	r3, r0
 8010db2:	2a65      	cmp	r2, #101	@ 0x65
 8010db4:	d001      	beq.n	8010dba <_strtod_l+0x172>
 8010db6:	2a45      	cmp	r2, #69	@ 0x45
 8010db8:	d114      	bne.n	8010de4 <_strtod_l+0x19c>
 8010dba:	b91d      	cbnz	r5, 8010dc4 <_strtod_l+0x17c>
 8010dbc:	9a08      	ldr	r2, [sp, #32]
 8010dbe:	4302      	orrs	r2, r0
 8010dc0:	d096      	beq.n	8010cf0 <_strtod_l+0xa8>
 8010dc2:	2500      	movs	r5, #0
 8010dc4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010dc6:	1c62      	adds	r2, r4, #1
 8010dc8:	9219      	str	r2, [sp, #100]	@ 0x64
 8010dca:	7862      	ldrb	r2, [r4, #1]
 8010dcc:	2a2b      	cmp	r2, #43	@ 0x2b
 8010dce:	d07a      	beq.n	8010ec6 <_strtod_l+0x27e>
 8010dd0:	2a2d      	cmp	r2, #45	@ 0x2d
 8010dd2:	d07e      	beq.n	8010ed2 <_strtod_l+0x28a>
 8010dd4:	f04f 0c00 	mov.w	ip, #0
 8010dd8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8010ddc:	2909      	cmp	r1, #9
 8010dde:	f240 8085 	bls.w	8010eec <_strtod_l+0x2a4>
 8010de2:	9419      	str	r4, [sp, #100]	@ 0x64
 8010de4:	f04f 0800 	mov.w	r8, #0
 8010de8:	e0a5      	b.n	8010f36 <_strtod_l+0x2ee>
 8010dea:	2300      	movs	r3, #0
 8010dec:	e7c8      	b.n	8010d80 <_strtod_l+0x138>
 8010dee:	f1b9 0f08 	cmp.w	r9, #8
 8010df2:	bfd8      	it	le
 8010df4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010df6:	f100 0001 	add.w	r0, r0, #1
 8010dfa:	bfda      	itte	le
 8010dfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8010e00:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010e02:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010e06:	f109 0901 	add.w	r9, r9, #1
 8010e0a:	9019      	str	r0, [sp, #100]	@ 0x64
 8010e0c:	e7bf      	b.n	8010d8e <_strtod_l+0x146>
 8010e0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e10:	1c5a      	adds	r2, r3, #1
 8010e12:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e14:	785a      	ldrb	r2, [r3, #1]
 8010e16:	f1b9 0f00 	cmp.w	r9, #0
 8010e1a:	d03b      	beq.n	8010e94 <_strtod_l+0x24c>
 8010e1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8010e1e:	464d      	mov	r5, r9
 8010e20:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010e24:	2b09      	cmp	r3, #9
 8010e26:	d912      	bls.n	8010e4e <_strtod_l+0x206>
 8010e28:	2301      	movs	r3, #1
 8010e2a:	e7c2      	b.n	8010db2 <_strtod_l+0x16a>
 8010e2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	9219      	str	r2, [sp, #100]	@ 0x64
 8010e32:	785a      	ldrb	r2, [r3, #1]
 8010e34:	3001      	adds	r0, #1
 8010e36:	2a30      	cmp	r2, #48	@ 0x30
 8010e38:	d0f8      	beq.n	8010e2c <_strtod_l+0x1e4>
 8010e3a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8010e3e:	2b08      	cmp	r3, #8
 8010e40:	f200 84d2 	bhi.w	80117e8 <_strtod_l+0xba0>
 8010e44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010e46:	900a      	str	r0, [sp, #40]	@ 0x28
 8010e48:	2000      	movs	r0, #0
 8010e4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	3a30      	subs	r2, #48	@ 0x30
 8010e50:	f100 0301 	add.w	r3, r0, #1
 8010e54:	d018      	beq.n	8010e88 <_strtod_l+0x240>
 8010e56:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010e58:	4419      	add	r1, r3
 8010e5a:	910a      	str	r1, [sp, #40]	@ 0x28
 8010e5c:	462e      	mov	r6, r5
 8010e5e:	f04f 0e0a 	mov.w	lr, #10
 8010e62:	1c71      	adds	r1, r6, #1
 8010e64:	eba1 0c05 	sub.w	ip, r1, r5
 8010e68:	4563      	cmp	r3, ip
 8010e6a:	dc15      	bgt.n	8010e98 <_strtod_l+0x250>
 8010e6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8010e70:	182b      	adds	r3, r5, r0
 8010e72:	2b08      	cmp	r3, #8
 8010e74:	f105 0501 	add.w	r5, r5, #1
 8010e78:	4405      	add	r5, r0
 8010e7a:	dc1a      	bgt.n	8010eb2 <_strtod_l+0x26a>
 8010e7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010e7e:	230a      	movs	r3, #10
 8010e80:	fb03 2301 	mla	r3, r3, r1, r2
 8010e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010e86:	2300      	movs	r3, #0
 8010e88:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010e8a:	1c51      	adds	r1, r2, #1
 8010e8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8010e8e:	7852      	ldrb	r2, [r2, #1]
 8010e90:	4618      	mov	r0, r3
 8010e92:	e7c5      	b.n	8010e20 <_strtod_l+0x1d8>
 8010e94:	4648      	mov	r0, r9
 8010e96:	e7ce      	b.n	8010e36 <_strtod_l+0x1ee>
 8010e98:	2e08      	cmp	r6, #8
 8010e9a:	dc05      	bgt.n	8010ea8 <_strtod_l+0x260>
 8010e9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8010e9e:	fb0e f606 	mul.w	r6, lr, r6
 8010ea2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8010ea4:	460e      	mov	r6, r1
 8010ea6:	e7dc      	b.n	8010e62 <_strtod_l+0x21a>
 8010ea8:	2910      	cmp	r1, #16
 8010eaa:	bfd8      	it	le
 8010eac:	fb0e f707 	mulle.w	r7, lr, r7
 8010eb0:	e7f8      	b.n	8010ea4 <_strtod_l+0x25c>
 8010eb2:	2b0f      	cmp	r3, #15
 8010eb4:	bfdc      	itt	le
 8010eb6:	230a      	movle	r3, #10
 8010eb8:	fb03 2707 	mlale	r7, r3, r7, r2
 8010ebc:	e7e3      	b.n	8010e86 <_strtod_l+0x23e>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e77a      	b.n	8010dbc <_strtod_l+0x174>
 8010ec6:	f04f 0c00 	mov.w	ip, #0
 8010eca:	1ca2      	adds	r2, r4, #2
 8010ecc:	9219      	str	r2, [sp, #100]	@ 0x64
 8010ece:	78a2      	ldrb	r2, [r4, #2]
 8010ed0:	e782      	b.n	8010dd8 <_strtod_l+0x190>
 8010ed2:	f04f 0c01 	mov.w	ip, #1
 8010ed6:	e7f8      	b.n	8010eca <_strtod_l+0x282>
 8010ed8:	080133c4 	.word	0x080133c4
 8010edc:	080131f7 	.word	0x080131f7
 8010ee0:	7ff00000 	.word	0x7ff00000
 8010ee4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010ee6:	1c51      	adds	r1, r2, #1
 8010ee8:	9119      	str	r1, [sp, #100]	@ 0x64
 8010eea:	7852      	ldrb	r2, [r2, #1]
 8010eec:	2a30      	cmp	r2, #48	@ 0x30
 8010eee:	d0f9      	beq.n	8010ee4 <_strtod_l+0x29c>
 8010ef0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010ef4:	2908      	cmp	r1, #8
 8010ef6:	f63f af75 	bhi.w	8010de4 <_strtod_l+0x19c>
 8010efa:	3a30      	subs	r2, #48	@ 0x30
 8010efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8010efe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f00:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010f02:	f04f 080a 	mov.w	r8, #10
 8010f06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010f08:	1c56      	adds	r6, r2, #1
 8010f0a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010f0c:	7852      	ldrb	r2, [r2, #1]
 8010f0e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010f12:	f1be 0f09 	cmp.w	lr, #9
 8010f16:	d939      	bls.n	8010f8c <_strtod_l+0x344>
 8010f18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010f1a:	1a76      	subs	r6, r6, r1
 8010f1c:	2e08      	cmp	r6, #8
 8010f1e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010f22:	dc03      	bgt.n	8010f2c <_strtod_l+0x2e4>
 8010f24:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f26:	4588      	cmp	r8, r1
 8010f28:	bfa8      	it	ge
 8010f2a:	4688      	movge	r8, r1
 8010f2c:	f1bc 0f00 	cmp.w	ip, #0
 8010f30:	d001      	beq.n	8010f36 <_strtod_l+0x2ee>
 8010f32:	f1c8 0800 	rsb	r8, r8, #0
 8010f36:	2d00      	cmp	r5, #0
 8010f38:	d14e      	bne.n	8010fd8 <_strtod_l+0x390>
 8010f3a:	9908      	ldr	r1, [sp, #32]
 8010f3c:	4308      	orrs	r0, r1
 8010f3e:	f47f aebc 	bne.w	8010cba <_strtod_l+0x72>
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	f47f aed4 	bne.w	8010cf0 <_strtod_l+0xa8>
 8010f48:	2a69      	cmp	r2, #105	@ 0x69
 8010f4a:	d028      	beq.n	8010f9e <_strtod_l+0x356>
 8010f4c:	dc25      	bgt.n	8010f9a <_strtod_l+0x352>
 8010f4e:	2a49      	cmp	r2, #73	@ 0x49
 8010f50:	d025      	beq.n	8010f9e <_strtod_l+0x356>
 8010f52:	2a4e      	cmp	r2, #78	@ 0x4e
 8010f54:	f47f aecc 	bne.w	8010cf0 <_strtod_l+0xa8>
 8010f58:	499a      	ldr	r1, [pc, #616]	@ (80111c4 <_strtod_l+0x57c>)
 8010f5a:	a819      	add	r0, sp, #100	@ 0x64
 8010f5c:	f001 fba4 	bl	80126a8 <__match>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	f43f aec5 	beq.w	8010cf0 <_strtod_l+0xa8>
 8010f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010f68:	781b      	ldrb	r3, [r3, #0]
 8010f6a:	2b28      	cmp	r3, #40	@ 0x28
 8010f6c:	d12e      	bne.n	8010fcc <_strtod_l+0x384>
 8010f6e:	4996      	ldr	r1, [pc, #600]	@ (80111c8 <_strtod_l+0x580>)
 8010f70:	aa1c      	add	r2, sp, #112	@ 0x70
 8010f72:	a819      	add	r0, sp, #100	@ 0x64
 8010f74:	f001 fbac 	bl	80126d0 <__hexnan>
 8010f78:	2805      	cmp	r0, #5
 8010f7a:	d127      	bne.n	8010fcc <_strtod_l+0x384>
 8010f7c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010f7e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010f82:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010f86:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010f8a:	e696      	b.n	8010cba <_strtod_l+0x72>
 8010f8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f8e:	fb08 2101 	mla	r1, r8, r1, r2
 8010f92:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010f96:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f98:	e7b5      	b.n	8010f06 <_strtod_l+0x2be>
 8010f9a:	2a6e      	cmp	r2, #110	@ 0x6e
 8010f9c:	e7da      	b.n	8010f54 <_strtod_l+0x30c>
 8010f9e:	498b      	ldr	r1, [pc, #556]	@ (80111cc <_strtod_l+0x584>)
 8010fa0:	a819      	add	r0, sp, #100	@ 0x64
 8010fa2:	f001 fb81 	bl	80126a8 <__match>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f43f aea2 	beq.w	8010cf0 <_strtod_l+0xa8>
 8010fac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010fae:	4988      	ldr	r1, [pc, #544]	@ (80111d0 <_strtod_l+0x588>)
 8010fb0:	3b01      	subs	r3, #1
 8010fb2:	a819      	add	r0, sp, #100	@ 0x64
 8010fb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8010fb6:	f001 fb77 	bl	80126a8 <__match>
 8010fba:	b910      	cbnz	r0, 8010fc2 <_strtod_l+0x37a>
 8010fbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010fbe:	3301      	adds	r3, #1
 8010fc0:	9319      	str	r3, [sp, #100]	@ 0x64
 8010fc2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80111e0 <_strtod_l+0x598>
 8010fc6:	f04f 0a00 	mov.w	sl, #0
 8010fca:	e676      	b.n	8010cba <_strtod_l+0x72>
 8010fcc:	4881      	ldr	r0, [pc, #516]	@ (80111d4 <_strtod_l+0x58c>)
 8010fce:	f001 f8a7 	bl	8012120 <nan>
 8010fd2:	ec5b ab10 	vmov	sl, fp, d0
 8010fd6:	e670      	b.n	8010cba <_strtod_l+0x72>
 8010fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fda:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010fdc:	eba8 0303 	sub.w	r3, r8, r3
 8010fe0:	f1b9 0f00 	cmp.w	r9, #0
 8010fe4:	bf08      	it	eq
 8010fe6:	46a9      	moveq	r9, r5
 8010fe8:	2d10      	cmp	r5, #16
 8010fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fec:	462c      	mov	r4, r5
 8010fee:	bfa8      	it	ge
 8010ff0:	2410      	movge	r4, #16
 8010ff2:	f7ef fa87 	bl	8000504 <__aeabi_ui2d>
 8010ff6:	2d09      	cmp	r5, #9
 8010ff8:	4682      	mov	sl, r0
 8010ffa:	468b      	mov	fp, r1
 8010ffc:	dc13      	bgt.n	8011026 <_strtod_l+0x3de>
 8010ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011000:	2b00      	cmp	r3, #0
 8011002:	f43f ae5a 	beq.w	8010cba <_strtod_l+0x72>
 8011006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011008:	dd78      	ble.n	80110fc <_strtod_l+0x4b4>
 801100a:	2b16      	cmp	r3, #22
 801100c:	dc5f      	bgt.n	80110ce <_strtod_l+0x486>
 801100e:	4972      	ldr	r1, [pc, #456]	@ (80111d8 <_strtod_l+0x590>)
 8011010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011018:	4652      	mov	r2, sl
 801101a:	465b      	mov	r3, fp
 801101c:	f7ef faec 	bl	80005f8 <__aeabi_dmul>
 8011020:	4682      	mov	sl, r0
 8011022:	468b      	mov	fp, r1
 8011024:	e649      	b.n	8010cba <_strtod_l+0x72>
 8011026:	4b6c      	ldr	r3, [pc, #432]	@ (80111d8 <_strtod_l+0x590>)
 8011028:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801102c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011030:	f7ef fae2 	bl	80005f8 <__aeabi_dmul>
 8011034:	4682      	mov	sl, r0
 8011036:	4638      	mov	r0, r7
 8011038:	468b      	mov	fp, r1
 801103a:	f7ef fa63 	bl	8000504 <__aeabi_ui2d>
 801103e:	4602      	mov	r2, r0
 8011040:	460b      	mov	r3, r1
 8011042:	4650      	mov	r0, sl
 8011044:	4659      	mov	r1, fp
 8011046:	f7ef f921 	bl	800028c <__adddf3>
 801104a:	2d0f      	cmp	r5, #15
 801104c:	4682      	mov	sl, r0
 801104e:	468b      	mov	fp, r1
 8011050:	ddd5      	ble.n	8010ffe <_strtod_l+0x3b6>
 8011052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011054:	1b2c      	subs	r4, r5, r4
 8011056:	441c      	add	r4, r3
 8011058:	2c00      	cmp	r4, #0
 801105a:	f340 8093 	ble.w	8011184 <_strtod_l+0x53c>
 801105e:	f014 030f 	ands.w	r3, r4, #15
 8011062:	d00a      	beq.n	801107a <_strtod_l+0x432>
 8011064:	495c      	ldr	r1, [pc, #368]	@ (80111d8 <_strtod_l+0x590>)
 8011066:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801106a:	4652      	mov	r2, sl
 801106c:	465b      	mov	r3, fp
 801106e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011072:	f7ef fac1 	bl	80005f8 <__aeabi_dmul>
 8011076:	4682      	mov	sl, r0
 8011078:	468b      	mov	fp, r1
 801107a:	f034 040f 	bics.w	r4, r4, #15
 801107e:	d073      	beq.n	8011168 <_strtod_l+0x520>
 8011080:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011084:	dd49      	ble.n	801111a <_strtod_l+0x4d2>
 8011086:	2400      	movs	r4, #0
 8011088:	46a0      	mov	r8, r4
 801108a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801108c:	46a1      	mov	r9, r4
 801108e:	9a05      	ldr	r2, [sp, #20]
 8011090:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80111e0 <_strtod_l+0x598>
 8011094:	2322      	movs	r3, #34	@ 0x22
 8011096:	6013      	str	r3, [r2, #0]
 8011098:	f04f 0a00 	mov.w	sl, #0
 801109c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f43f ae0b 	beq.w	8010cba <_strtod_l+0x72>
 80110a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80110a6:	9805      	ldr	r0, [sp, #20]
 80110a8:	f7ff f946 	bl	8010338 <_Bfree>
 80110ac:	9805      	ldr	r0, [sp, #20]
 80110ae:	4649      	mov	r1, r9
 80110b0:	f7ff f942 	bl	8010338 <_Bfree>
 80110b4:	9805      	ldr	r0, [sp, #20]
 80110b6:	4641      	mov	r1, r8
 80110b8:	f7ff f93e 	bl	8010338 <_Bfree>
 80110bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80110be:	9805      	ldr	r0, [sp, #20]
 80110c0:	f7ff f93a 	bl	8010338 <_Bfree>
 80110c4:	9805      	ldr	r0, [sp, #20]
 80110c6:	4621      	mov	r1, r4
 80110c8:	f7ff f936 	bl	8010338 <_Bfree>
 80110cc:	e5f5      	b.n	8010cba <_strtod_l+0x72>
 80110ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80110d4:	4293      	cmp	r3, r2
 80110d6:	dbbc      	blt.n	8011052 <_strtod_l+0x40a>
 80110d8:	4c3f      	ldr	r4, [pc, #252]	@ (80111d8 <_strtod_l+0x590>)
 80110da:	f1c5 050f 	rsb	r5, r5, #15
 80110de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80110e2:	4652      	mov	r2, sl
 80110e4:	465b      	mov	r3, fp
 80110e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110ea:	f7ef fa85 	bl	80005f8 <__aeabi_dmul>
 80110ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80110f0:	1b5d      	subs	r5, r3, r5
 80110f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80110f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80110fa:	e78f      	b.n	801101c <_strtod_l+0x3d4>
 80110fc:	3316      	adds	r3, #22
 80110fe:	dba8      	blt.n	8011052 <_strtod_l+0x40a>
 8011100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011102:	eba3 0808 	sub.w	r8, r3, r8
 8011106:	4b34      	ldr	r3, [pc, #208]	@ (80111d8 <_strtod_l+0x590>)
 8011108:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801110c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011110:	4650      	mov	r0, sl
 8011112:	4659      	mov	r1, fp
 8011114:	f7ef fb9a 	bl	800084c <__aeabi_ddiv>
 8011118:	e782      	b.n	8011020 <_strtod_l+0x3d8>
 801111a:	2300      	movs	r3, #0
 801111c:	4f2f      	ldr	r7, [pc, #188]	@ (80111dc <_strtod_l+0x594>)
 801111e:	1124      	asrs	r4, r4, #4
 8011120:	4650      	mov	r0, sl
 8011122:	4659      	mov	r1, fp
 8011124:	461e      	mov	r6, r3
 8011126:	2c01      	cmp	r4, #1
 8011128:	dc21      	bgt.n	801116e <_strtod_l+0x526>
 801112a:	b10b      	cbz	r3, 8011130 <_strtod_l+0x4e8>
 801112c:	4682      	mov	sl, r0
 801112e:	468b      	mov	fp, r1
 8011130:	492a      	ldr	r1, [pc, #168]	@ (80111dc <_strtod_l+0x594>)
 8011132:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011136:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801113a:	4652      	mov	r2, sl
 801113c:	465b      	mov	r3, fp
 801113e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011142:	f7ef fa59 	bl	80005f8 <__aeabi_dmul>
 8011146:	4b26      	ldr	r3, [pc, #152]	@ (80111e0 <_strtod_l+0x598>)
 8011148:	460a      	mov	r2, r1
 801114a:	400b      	ands	r3, r1
 801114c:	4925      	ldr	r1, [pc, #148]	@ (80111e4 <_strtod_l+0x59c>)
 801114e:	428b      	cmp	r3, r1
 8011150:	4682      	mov	sl, r0
 8011152:	d898      	bhi.n	8011086 <_strtod_l+0x43e>
 8011154:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011158:	428b      	cmp	r3, r1
 801115a:	bf86      	itte	hi
 801115c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80111e8 <_strtod_l+0x5a0>
 8011160:	f04f 3aff 	movhi.w	sl, #4294967295
 8011164:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011168:	2300      	movs	r3, #0
 801116a:	9308      	str	r3, [sp, #32]
 801116c:	e076      	b.n	801125c <_strtod_l+0x614>
 801116e:	07e2      	lsls	r2, r4, #31
 8011170:	d504      	bpl.n	801117c <_strtod_l+0x534>
 8011172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011176:	f7ef fa3f 	bl	80005f8 <__aeabi_dmul>
 801117a:	2301      	movs	r3, #1
 801117c:	3601      	adds	r6, #1
 801117e:	1064      	asrs	r4, r4, #1
 8011180:	3708      	adds	r7, #8
 8011182:	e7d0      	b.n	8011126 <_strtod_l+0x4de>
 8011184:	d0f0      	beq.n	8011168 <_strtod_l+0x520>
 8011186:	4264      	negs	r4, r4
 8011188:	f014 020f 	ands.w	r2, r4, #15
 801118c:	d00a      	beq.n	80111a4 <_strtod_l+0x55c>
 801118e:	4b12      	ldr	r3, [pc, #72]	@ (80111d8 <_strtod_l+0x590>)
 8011190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011194:	4650      	mov	r0, sl
 8011196:	4659      	mov	r1, fp
 8011198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801119c:	f7ef fb56 	bl	800084c <__aeabi_ddiv>
 80111a0:	4682      	mov	sl, r0
 80111a2:	468b      	mov	fp, r1
 80111a4:	1124      	asrs	r4, r4, #4
 80111a6:	d0df      	beq.n	8011168 <_strtod_l+0x520>
 80111a8:	2c1f      	cmp	r4, #31
 80111aa:	dd1f      	ble.n	80111ec <_strtod_l+0x5a4>
 80111ac:	2400      	movs	r4, #0
 80111ae:	46a0      	mov	r8, r4
 80111b0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80111b2:	46a1      	mov	r9, r4
 80111b4:	9a05      	ldr	r2, [sp, #20]
 80111b6:	2322      	movs	r3, #34	@ 0x22
 80111b8:	f04f 0a00 	mov.w	sl, #0
 80111bc:	f04f 0b00 	mov.w	fp, #0
 80111c0:	6013      	str	r3, [r2, #0]
 80111c2:	e76b      	b.n	801109c <_strtod_l+0x454>
 80111c4:	080130e5 	.word	0x080130e5
 80111c8:	080133b0 	.word	0x080133b0
 80111cc:	080130dd 	.word	0x080130dd
 80111d0:	08013114 	.word	0x08013114
 80111d4:	0801324d 	.word	0x0801324d
 80111d8:	080132e8 	.word	0x080132e8
 80111dc:	080132c0 	.word	0x080132c0
 80111e0:	7ff00000 	.word	0x7ff00000
 80111e4:	7ca00000 	.word	0x7ca00000
 80111e8:	7fefffff 	.word	0x7fefffff
 80111ec:	f014 0310 	ands.w	r3, r4, #16
 80111f0:	bf18      	it	ne
 80111f2:	236a      	movne	r3, #106	@ 0x6a
 80111f4:	4ea9      	ldr	r6, [pc, #676]	@ (801149c <_strtod_l+0x854>)
 80111f6:	9308      	str	r3, [sp, #32]
 80111f8:	4650      	mov	r0, sl
 80111fa:	4659      	mov	r1, fp
 80111fc:	2300      	movs	r3, #0
 80111fe:	07e7      	lsls	r7, r4, #31
 8011200:	d504      	bpl.n	801120c <_strtod_l+0x5c4>
 8011202:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011206:	f7ef f9f7 	bl	80005f8 <__aeabi_dmul>
 801120a:	2301      	movs	r3, #1
 801120c:	1064      	asrs	r4, r4, #1
 801120e:	f106 0608 	add.w	r6, r6, #8
 8011212:	d1f4      	bne.n	80111fe <_strtod_l+0x5b6>
 8011214:	b10b      	cbz	r3, 801121a <_strtod_l+0x5d2>
 8011216:	4682      	mov	sl, r0
 8011218:	468b      	mov	fp, r1
 801121a:	9b08      	ldr	r3, [sp, #32]
 801121c:	b1b3      	cbz	r3, 801124c <_strtod_l+0x604>
 801121e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011222:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8011226:	2b00      	cmp	r3, #0
 8011228:	4659      	mov	r1, fp
 801122a:	dd0f      	ble.n	801124c <_strtod_l+0x604>
 801122c:	2b1f      	cmp	r3, #31
 801122e:	dd56      	ble.n	80112de <_strtod_l+0x696>
 8011230:	2b34      	cmp	r3, #52	@ 0x34
 8011232:	bfde      	ittt	le
 8011234:	f04f 33ff 	movle.w	r3, #4294967295
 8011238:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801123c:	4093      	lslle	r3, r2
 801123e:	f04f 0a00 	mov.w	sl, #0
 8011242:	bfcc      	ite	gt
 8011244:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8011248:	ea03 0b01 	andle.w	fp, r3, r1
 801124c:	2200      	movs	r2, #0
 801124e:	2300      	movs	r3, #0
 8011250:	4650      	mov	r0, sl
 8011252:	4659      	mov	r1, fp
 8011254:	f7ef fc38 	bl	8000ac8 <__aeabi_dcmpeq>
 8011258:	2800      	cmp	r0, #0
 801125a:	d1a7      	bne.n	80111ac <_strtod_l+0x564>
 801125c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011262:	9805      	ldr	r0, [sp, #20]
 8011264:	462b      	mov	r3, r5
 8011266:	464a      	mov	r2, r9
 8011268:	f7ff f8ce 	bl	8010408 <__s2b>
 801126c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801126e:	2800      	cmp	r0, #0
 8011270:	f43f af09 	beq.w	8011086 <_strtod_l+0x43e>
 8011274:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011278:	2a00      	cmp	r2, #0
 801127a:	eba3 0308 	sub.w	r3, r3, r8
 801127e:	bfa8      	it	ge
 8011280:	2300      	movge	r3, #0
 8011282:	9312      	str	r3, [sp, #72]	@ 0x48
 8011284:	2400      	movs	r4, #0
 8011286:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801128a:	9316      	str	r3, [sp, #88]	@ 0x58
 801128c:	46a0      	mov	r8, r4
 801128e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011290:	9805      	ldr	r0, [sp, #20]
 8011292:	6859      	ldr	r1, [r3, #4]
 8011294:	f7ff f810 	bl	80102b8 <_Balloc>
 8011298:	4681      	mov	r9, r0
 801129a:	2800      	cmp	r0, #0
 801129c:	f43f aef7 	beq.w	801108e <_strtod_l+0x446>
 80112a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112a2:	691a      	ldr	r2, [r3, #16]
 80112a4:	3202      	adds	r2, #2
 80112a6:	f103 010c 	add.w	r1, r3, #12
 80112aa:	0092      	lsls	r2, r2, #2
 80112ac:	300c      	adds	r0, #12
 80112ae:	f7fe f896 	bl	800f3de <memcpy>
 80112b2:	ec4b ab10 	vmov	d0, sl, fp
 80112b6:	9805      	ldr	r0, [sp, #20]
 80112b8:	aa1c      	add	r2, sp, #112	@ 0x70
 80112ba:	a91b      	add	r1, sp, #108	@ 0x6c
 80112bc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80112c0:	f7ff fbd6 	bl	8010a70 <__d2b>
 80112c4:	901a      	str	r0, [sp, #104]	@ 0x68
 80112c6:	2800      	cmp	r0, #0
 80112c8:	f43f aee1 	beq.w	801108e <_strtod_l+0x446>
 80112cc:	9805      	ldr	r0, [sp, #20]
 80112ce:	2101      	movs	r1, #1
 80112d0:	f7ff f930 	bl	8010534 <__i2b>
 80112d4:	4680      	mov	r8, r0
 80112d6:	b948      	cbnz	r0, 80112ec <_strtod_l+0x6a4>
 80112d8:	f04f 0800 	mov.w	r8, #0
 80112dc:	e6d7      	b.n	801108e <_strtod_l+0x446>
 80112de:	f04f 32ff 	mov.w	r2, #4294967295
 80112e2:	fa02 f303 	lsl.w	r3, r2, r3
 80112e6:	ea03 0a0a 	and.w	sl, r3, sl
 80112ea:	e7af      	b.n	801124c <_strtod_l+0x604>
 80112ec:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80112ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80112f0:	2d00      	cmp	r5, #0
 80112f2:	bfab      	itete	ge
 80112f4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80112f6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80112f8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80112fa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80112fc:	bfac      	ite	ge
 80112fe:	18ef      	addge	r7, r5, r3
 8011300:	1b5e      	sublt	r6, r3, r5
 8011302:	9b08      	ldr	r3, [sp, #32]
 8011304:	1aed      	subs	r5, r5, r3
 8011306:	4415      	add	r5, r2
 8011308:	4b65      	ldr	r3, [pc, #404]	@ (80114a0 <_strtod_l+0x858>)
 801130a:	3d01      	subs	r5, #1
 801130c:	429d      	cmp	r5, r3
 801130e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011312:	da50      	bge.n	80113b6 <_strtod_l+0x76e>
 8011314:	1b5b      	subs	r3, r3, r5
 8011316:	2b1f      	cmp	r3, #31
 8011318:	eba2 0203 	sub.w	r2, r2, r3
 801131c:	f04f 0101 	mov.w	r1, #1
 8011320:	dc3d      	bgt.n	801139e <_strtod_l+0x756>
 8011322:	fa01 f303 	lsl.w	r3, r1, r3
 8011326:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011328:	2300      	movs	r3, #0
 801132a:	9310      	str	r3, [sp, #64]	@ 0x40
 801132c:	18bd      	adds	r5, r7, r2
 801132e:	9b08      	ldr	r3, [sp, #32]
 8011330:	42af      	cmp	r7, r5
 8011332:	4416      	add	r6, r2
 8011334:	441e      	add	r6, r3
 8011336:	463b      	mov	r3, r7
 8011338:	bfa8      	it	ge
 801133a:	462b      	movge	r3, r5
 801133c:	42b3      	cmp	r3, r6
 801133e:	bfa8      	it	ge
 8011340:	4633      	movge	r3, r6
 8011342:	2b00      	cmp	r3, #0
 8011344:	bfc2      	ittt	gt
 8011346:	1aed      	subgt	r5, r5, r3
 8011348:	1af6      	subgt	r6, r6, r3
 801134a:	1aff      	subgt	r7, r7, r3
 801134c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801134e:	2b00      	cmp	r3, #0
 8011350:	dd16      	ble.n	8011380 <_strtod_l+0x738>
 8011352:	4641      	mov	r1, r8
 8011354:	9805      	ldr	r0, [sp, #20]
 8011356:	461a      	mov	r2, r3
 8011358:	f7ff f9a4 	bl	80106a4 <__pow5mult>
 801135c:	4680      	mov	r8, r0
 801135e:	2800      	cmp	r0, #0
 8011360:	d0ba      	beq.n	80112d8 <_strtod_l+0x690>
 8011362:	4601      	mov	r1, r0
 8011364:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011366:	9805      	ldr	r0, [sp, #20]
 8011368:	f7ff f8fa 	bl	8010560 <__multiply>
 801136c:	900a      	str	r0, [sp, #40]	@ 0x28
 801136e:	2800      	cmp	r0, #0
 8011370:	f43f ae8d 	beq.w	801108e <_strtod_l+0x446>
 8011374:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011376:	9805      	ldr	r0, [sp, #20]
 8011378:	f7fe ffde 	bl	8010338 <_Bfree>
 801137c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801137e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011380:	2d00      	cmp	r5, #0
 8011382:	dc1d      	bgt.n	80113c0 <_strtod_l+0x778>
 8011384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011386:	2b00      	cmp	r3, #0
 8011388:	dd23      	ble.n	80113d2 <_strtod_l+0x78a>
 801138a:	4649      	mov	r1, r9
 801138c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801138e:	9805      	ldr	r0, [sp, #20]
 8011390:	f7ff f988 	bl	80106a4 <__pow5mult>
 8011394:	4681      	mov	r9, r0
 8011396:	b9e0      	cbnz	r0, 80113d2 <_strtod_l+0x78a>
 8011398:	f04f 0900 	mov.w	r9, #0
 801139c:	e677      	b.n	801108e <_strtod_l+0x446>
 801139e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80113a2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80113a6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80113aa:	35e2      	adds	r5, #226	@ 0xe2
 80113ac:	fa01 f305 	lsl.w	r3, r1, r5
 80113b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80113b2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80113b4:	e7ba      	b.n	801132c <_strtod_l+0x6e4>
 80113b6:	2300      	movs	r3, #0
 80113b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80113ba:	2301      	movs	r3, #1
 80113bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80113be:	e7b5      	b.n	801132c <_strtod_l+0x6e4>
 80113c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113c2:	9805      	ldr	r0, [sp, #20]
 80113c4:	462a      	mov	r2, r5
 80113c6:	f7ff f9c7 	bl	8010758 <__lshift>
 80113ca:	901a      	str	r0, [sp, #104]	@ 0x68
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d1d9      	bne.n	8011384 <_strtod_l+0x73c>
 80113d0:	e65d      	b.n	801108e <_strtod_l+0x446>
 80113d2:	2e00      	cmp	r6, #0
 80113d4:	dd07      	ble.n	80113e6 <_strtod_l+0x79e>
 80113d6:	4649      	mov	r1, r9
 80113d8:	9805      	ldr	r0, [sp, #20]
 80113da:	4632      	mov	r2, r6
 80113dc:	f7ff f9bc 	bl	8010758 <__lshift>
 80113e0:	4681      	mov	r9, r0
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d0d8      	beq.n	8011398 <_strtod_l+0x750>
 80113e6:	2f00      	cmp	r7, #0
 80113e8:	dd08      	ble.n	80113fc <_strtod_l+0x7b4>
 80113ea:	4641      	mov	r1, r8
 80113ec:	9805      	ldr	r0, [sp, #20]
 80113ee:	463a      	mov	r2, r7
 80113f0:	f7ff f9b2 	bl	8010758 <__lshift>
 80113f4:	4680      	mov	r8, r0
 80113f6:	2800      	cmp	r0, #0
 80113f8:	f43f ae49 	beq.w	801108e <_strtod_l+0x446>
 80113fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80113fe:	9805      	ldr	r0, [sp, #20]
 8011400:	464a      	mov	r2, r9
 8011402:	f7ff fa31 	bl	8010868 <__mdiff>
 8011406:	4604      	mov	r4, r0
 8011408:	2800      	cmp	r0, #0
 801140a:	f43f ae40 	beq.w	801108e <_strtod_l+0x446>
 801140e:	68c3      	ldr	r3, [r0, #12]
 8011410:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011412:	2300      	movs	r3, #0
 8011414:	60c3      	str	r3, [r0, #12]
 8011416:	4641      	mov	r1, r8
 8011418:	f7ff fa0a 	bl	8010830 <__mcmp>
 801141c:	2800      	cmp	r0, #0
 801141e:	da45      	bge.n	80114ac <_strtod_l+0x864>
 8011420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011422:	ea53 030a 	orrs.w	r3, r3, sl
 8011426:	d16b      	bne.n	8011500 <_strtod_l+0x8b8>
 8011428:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801142c:	2b00      	cmp	r3, #0
 801142e:	d167      	bne.n	8011500 <_strtod_l+0x8b8>
 8011430:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011434:	0d1b      	lsrs	r3, r3, #20
 8011436:	051b      	lsls	r3, r3, #20
 8011438:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801143c:	d960      	bls.n	8011500 <_strtod_l+0x8b8>
 801143e:	6963      	ldr	r3, [r4, #20]
 8011440:	b913      	cbnz	r3, 8011448 <_strtod_l+0x800>
 8011442:	6923      	ldr	r3, [r4, #16]
 8011444:	2b01      	cmp	r3, #1
 8011446:	dd5b      	ble.n	8011500 <_strtod_l+0x8b8>
 8011448:	4621      	mov	r1, r4
 801144a:	2201      	movs	r2, #1
 801144c:	9805      	ldr	r0, [sp, #20]
 801144e:	f7ff f983 	bl	8010758 <__lshift>
 8011452:	4641      	mov	r1, r8
 8011454:	4604      	mov	r4, r0
 8011456:	f7ff f9eb 	bl	8010830 <__mcmp>
 801145a:	2800      	cmp	r0, #0
 801145c:	dd50      	ble.n	8011500 <_strtod_l+0x8b8>
 801145e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011462:	9a08      	ldr	r2, [sp, #32]
 8011464:	0d1b      	lsrs	r3, r3, #20
 8011466:	051b      	lsls	r3, r3, #20
 8011468:	2a00      	cmp	r2, #0
 801146a:	d06a      	beq.n	8011542 <_strtod_l+0x8fa>
 801146c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8011470:	d867      	bhi.n	8011542 <_strtod_l+0x8fa>
 8011472:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011476:	f67f ae9d 	bls.w	80111b4 <_strtod_l+0x56c>
 801147a:	4b0a      	ldr	r3, [pc, #40]	@ (80114a4 <_strtod_l+0x85c>)
 801147c:	4650      	mov	r0, sl
 801147e:	4659      	mov	r1, fp
 8011480:	2200      	movs	r2, #0
 8011482:	f7ef f8b9 	bl	80005f8 <__aeabi_dmul>
 8011486:	4b08      	ldr	r3, [pc, #32]	@ (80114a8 <_strtod_l+0x860>)
 8011488:	400b      	ands	r3, r1
 801148a:	4682      	mov	sl, r0
 801148c:	468b      	mov	fp, r1
 801148e:	2b00      	cmp	r3, #0
 8011490:	f47f ae08 	bne.w	80110a4 <_strtod_l+0x45c>
 8011494:	9a05      	ldr	r2, [sp, #20]
 8011496:	2322      	movs	r3, #34	@ 0x22
 8011498:	6013      	str	r3, [r2, #0]
 801149a:	e603      	b.n	80110a4 <_strtod_l+0x45c>
 801149c:	080133d8 	.word	0x080133d8
 80114a0:	fffffc02 	.word	0xfffffc02
 80114a4:	39500000 	.word	0x39500000
 80114a8:	7ff00000 	.word	0x7ff00000
 80114ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80114b0:	d165      	bne.n	801157e <_strtod_l+0x936>
 80114b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80114b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80114b8:	b35a      	cbz	r2, 8011512 <_strtod_l+0x8ca>
 80114ba:	4a9f      	ldr	r2, [pc, #636]	@ (8011738 <_strtod_l+0xaf0>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	d12b      	bne.n	8011518 <_strtod_l+0x8d0>
 80114c0:	9b08      	ldr	r3, [sp, #32]
 80114c2:	4651      	mov	r1, sl
 80114c4:	b303      	cbz	r3, 8011508 <_strtod_l+0x8c0>
 80114c6:	4b9d      	ldr	r3, [pc, #628]	@ (801173c <_strtod_l+0xaf4>)
 80114c8:	465a      	mov	r2, fp
 80114ca:	4013      	ands	r3, r2
 80114cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80114d0:	f04f 32ff 	mov.w	r2, #4294967295
 80114d4:	d81b      	bhi.n	801150e <_strtod_l+0x8c6>
 80114d6:	0d1b      	lsrs	r3, r3, #20
 80114d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80114dc:	fa02 f303 	lsl.w	r3, r2, r3
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d119      	bne.n	8011518 <_strtod_l+0x8d0>
 80114e4:	4b96      	ldr	r3, [pc, #600]	@ (8011740 <_strtod_l+0xaf8>)
 80114e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d102      	bne.n	80114f2 <_strtod_l+0x8aa>
 80114ec:	3101      	adds	r1, #1
 80114ee:	f43f adce 	beq.w	801108e <_strtod_l+0x446>
 80114f2:	4b92      	ldr	r3, [pc, #584]	@ (801173c <_strtod_l+0xaf4>)
 80114f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80114f6:	401a      	ands	r2, r3
 80114f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80114fc:	f04f 0a00 	mov.w	sl, #0
 8011500:	9b08      	ldr	r3, [sp, #32]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d1b9      	bne.n	801147a <_strtod_l+0x832>
 8011506:	e5cd      	b.n	80110a4 <_strtod_l+0x45c>
 8011508:	f04f 33ff 	mov.w	r3, #4294967295
 801150c:	e7e8      	b.n	80114e0 <_strtod_l+0x898>
 801150e:	4613      	mov	r3, r2
 8011510:	e7e6      	b.n	80114e0 <_strtod_l+0x898>
 8011512:	ea53 030a 	orrs.w	r3, r3, sl
 8011516:	d0a2      	beq.n	801145e <_strtod_l+0x816>
 8011518:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801151a:	b1db      	cbz	r3, 8011554 <_strtod_l+0x90c>
 801151c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801151e:	4213      	tst	r3, r2
 8011520:	d0ee      	beq.n	8011500 <_strtod_l+0x8b8>
 8011522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011524:	9a08      	ldr	r2, [sp, #32]
 8011526:	4650      	mov	r0, sl
 8011528:	4659      	mov	r1, fp
 801152a:	b1bb      	cbz	r3, 801155c <_strtod_l+0x914>
 801152c:	f7ff fb6e 	bl	8010c0c <sulp>
 8011530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011534:	ec53 2b10 	vmov	r2, r3, d0
 8011538:	f7ee fea8 	bl	800028c <__adddf3>
 801153c:	4682      	mov	sl, r0
 801153e:	468b      	mov	fp, r1
 8011540:	e7de      	b.n	8011500 <_strtod_l+0x8b8>
 8011542:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011546:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801154a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801154e:	f04f 3aff 	mov.w	sl, #4294967295
 8011552:	e7d5      	b.n	8011500 <_strtod_l+0x8b8>
 8011554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011556:	ea13 0f0a 	tst.w	r3, sl
 801155a:	e7e1      	b.n	8011520 <_strtod_l+0x8d8>
 801155c:	f7ff fb56 	bl	8010c0c <sulp>
 8011560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011564:	ec53 2b10 	vmov	r2, r3, d0
 8011568:	f7ee fe8e 	bl	8000288 <__aeabi_dsub>
 801156c:	2200      	movs	r2, #0
 801156e:	2300      	movs	r3, #0
 8011570:	4682      	mov	sl, r0
 8011572:	468b      	mov	fp, r1
 8011574:	f7ef faa8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011578:	2800      	cmp	r0, #0
 801157a:	d0c1      	beq.n	8011500 <_strtod_l+0x8b8>
 801157c:	e61a      	b.n	80111b4 <_strtod_l+0x56c>
 801157e:	4641      	mov	r1, r8
 8011580:	4620      	mov	r0, r4
 8011582:	f7ff facd 	bl	8010b20 <__ratio>
 8011586:	ec57 6b10 	vmov	r6, r7, d0
 801158a:	2200      	movs	r2, #0
 801158c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011590:	4630      	mov	r0, r6
 8011592:	4639      	mov	r1, r7
 8011594:	f7ef faac 	bl	8000af0 <__aeabi_dcmple>
 8011598:	2800      	cmp	r0, #0
 801159a:	d06f      	beq.n	801167c <_strtod_l+0xa34>
 801159c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d17a      	bne.n	8011698 <_strtod_l+0xa50>
 80115a2:	f1ba 0f00 	cmp.w	sl, #0
 80115a6:	d158      	bne.n	801165a <_strtod_l+0xa12>
 80115a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d15a      	bne.n	8011668 <_strtod_l+0xa20>
 80115b2:	4b64      	ldr	r3, [pc, #400]	@ (8011744 <_strtod_l+0xafc>)
 80115b4:	2200      	movs	r2, #0
 80115b6:	4630      	mov	r0, r6
 80115b8:	4639      	mov	r1, r7
 80115ba:	f7ef fa8f 	bl	8000adc <__aeabi_dcmplt>
 80115be:	2800      	cmp	r0, #0
 80115c0:	d159      	bne.n	8011676 <_strtod_l+0xa2e>
 80115c2:	4630      	mov	r0, r6
 80115c4:	4639      	mov	r1, r7
 80115c6:	4b60      	ldr	r3, [pc, #384]	@ (8011748 <_strtod_l+0xb00>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	f7ef f815 	bl	80005f8 <__aeabi_dmul>
 80115ce:	4606      	mov	r6, r0
 80115d0:	460f      	mov	r7, r1
 80115d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80115d6:	9606      	str	r6, [sp, #24]
 80115d8:	9307      	str	r3, [sp, #28]
 80115da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115de:	4d57      	ldr	r5, [pc, #348]	@ (801173c <_strtod_l+0xaf4>)
 80115e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80115e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115e6:	401d      	ands	r5, r3
 80115e8:	4b58      	ldr	r3, [pc, #352]	@ (801174c <_strtod_l+0xb04>)
 80115ea:	429d      	cmp	r5, r3
 80115ec:	f040 80b2 	bne.w	8011754 <_strtod_l+0xb0c>
 80115f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80115f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80115f6:	ec4b ab10 	vmov	d0, sl, fp
 80115fa:	f7ff f9c9 	bl	8010990 <__ulp>
 80115fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011602:	ec51 0b10 	vmov	r0, r1, d0
 8011606:	f7ee fff7 	bl	80005f8 <__aeabi_dmul>
 801160a:	4652      	mov	r2, sl
 801160c:	465b      	mov	r3, fp
 801160e:	f7ee fe3d 	bl	800028c <__adddf3>
 8011612:	460b      	mov	r3, r1
 8011614:	4949      	ldr	r1, [pc, #292]	@ (801173c <_strtod_l+0xaf4>)
 8011616:	4a4e      	ldr	r2, [pc, #312]	@ (8011750 <_strtod_l+0xb08>)
 8011618:	4019      	ands	r1, r3
 801161a:	4291      	cmp	r1, r2
 801161c:	4682      	mov	sl, r0
 801161e:	d942      	bls.n	80116a6 <_strtod_l+0xa5e>
 8011620:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011622:	4b47      	ldr	r3, [pc, #284]	@ (8011740 <_strtod_l+0xaf8>)
 8011624:	429a      	cmp	r2, r3
 8011626:	d103      	bne.n	8011630 <_strtod_l+0x9e8>
 8011628:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801162a:	3301      	adds	r3, #1
 801162c:	f43f ad2f 	beq.w	801108e <_strtod_l+0x446>
 8011630:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011740 <_strtod_l+0xaf8>
 8011634:	f04f 3aff 	mov.w	sl, #4294967295
 8011638:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801163a:	9805      	ldr	r0, [sp, #20]
 801163c:	f7fe fe7c 	bl	8010338 <_Bfree>
 8011640:	9805      	ldr	r0, [sp, #20]
 8011642:	4649      	mov	r1, r9
 8011644:	f7fe fe78 	bl	8010338 <_Bfree>
 8011648:	9805      	ldr	r0, [sp, #20]
 801164a:	4641      	mov	r1, r8
 801164c:	f7fe fe74 	bl	8010338 <_Bfree>
 8011650:	9805      	ldr	r0, [sp, #20]
 8011652:	4621      	mov	r1, r4
 8011654:	f7fe fe70 	bl	8010338 <_Bfree>
 8011658:	e619      	b.n	801128e <_strtod_l+0x646>
 801165a:	f1ba 0f01 	cmp.w	sl, #1
 801165e:	d103      	bne.n	8011668 <_strtod_l+0xa20>
 8011660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011662:	2b00      	cmp	r3, #0
 8011664:	f43f ada6 	beq.w	80111b4 <_strtod_l+0x56c>
 8011668:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011718 <_strtod_l+0xad0>
 801166c:	4f35      	ldr	r7, [pc, #212]	@ (8011744 <_strtod_l+0xafc>)
 801166e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011672:	2600      	movs	r6, #0
 8011674:	e7b1      	b.n	80115da <_strtod_l+0x992>
 8011676:	4f34      	ldr	r7, [pc, #208]	@ (8011748 <_strtod_l+0xb00>)
 8011678:	2600      	movs	r6, #0
 801167a:	e7aa      	b.n	80115d2 <_strtod_l+0x98a>
 801167c:	4b32      	ldr	r3, [pc, #200]	@ (8011748 <_strtod_l+0xb00>)
 801167e:	4630      	mov	r0, r6
 8011680:	4639      	mov	r1, r7
 8011682:	2200      	movs	r2, #0
 8011684:	f7ee ffb8 	bl	80005f8 <__aeabi_dmul>
 8011688:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801168a:	4606      	mov	r6, r0
 801168c:	460f      	mov	r7, r1
 801168e:	2b00      	cmp	r3, #0
 8011690:	d09f      	beq.n	80115d2 <_strtod_l+0x98a>
 8011692:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011696:	e7a0      	b.n	80115da <_strtod_l+0x992>
 8011698:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011720 <_strtod_l+0xad8>
 801169c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80116a0:	ec57 6b17 	vmov	r6, r7, d7
 80116a4:	e799      	b.n	80115da <_strtod_l+0x992>
 80116a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80116aa:	9b08      	ldr	r3, [sp, #32]
 80116ac:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d1c1      	bne.n	8011638 <_strtod_l+0x9f0>
 80116b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116b8:	0d1b      	lsrs	r3, r3, #20
 80116ba:	051b      	lsls	r3, r3, #20
 80116bc:	429d      	cmp	r5, r3
 80116be:	d1bb      	bne.n	8011638 <_strtod_l+0x9f0>
 80116c0:	4630      	mov	r0, r6
 80116c2:	4639      	mov	r1, r7
 80116c4:	f7ef faf8 	bl	8000cb8 <__aeabi_d2lz>
 80116c8:	f7ee ff68 	bl	800059c <__aeabi_l2d>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4630      	mov	r0, r6
 80116d2:	4639      	mov	r1, r7
 80116d4:	f7ee fdd8 	bl	8000288 <__aeabi_dsub>
 80116d8:	460b      	mov	r3, r1
 80116da:	4602      	mov	r2, r0
 80116dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80116e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80116e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116e6:	ea46 060a 	orr.w	r6, r6, sl
 80116ea:	431e      	orrs	r6, r3
 80116ec:	d06f      	beq.n	80117ce <_strtod_l+0xb86>
 80116ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8011728 <_strtod_l+0xae0>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	f7ef f9f2 	bl	8000adc <__aeabi_dcmplt>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	f47f acd3 	bne.w	80110a4 <_strtod_l+0x45c>
 80116fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8011730 <_strtod_l+0xae8>)
 8011700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011704:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011708:	f7ef fa06 	bl	8000b18 <__aeabi_dcmpgt>
 801170c:	2800      	cmp	r0, #0
 801170e:	d093      	beq.n	8011638 <_strtod_l+0x9f0>
 8011710:	e4c8      	b.n	80110a4 <_strtod_l+0x45c>
 8011712:	bf00      	nop
 8011714:	f3af 8000 	nop.w
 8011718:	00000000 	.word	0x00000000
 801171c:	bff00000 	.word	0xbff00000
 8011720:	00000000 	.word	0x00000000
 8011724:	3ff00000 	.word	0x3ff00000
 8011728:	94a03595 	.word	0x94a03595
 801172c:	3fdfffff 	.word	0x3fdfffff
 8011730:	35afe535 	.word	0x35afe535
 8011734:	3fe00000 	.word	0x3fe00000
 8011738:	000fffff 	.word	0x000fffff
 801173c:	7ff00000 	.word	0x7ff00000
 8011740:	7fefffff 	.word	0x7fefffff
 8011744:	3ff00000 	.word	0x3ff00000
 8011748:	3fe00000 	.word	0x3fe00000
 801174c:	7fe00000 	.word	0x7fe00000
 8011750:	7c9fffff 	.word	0x7c9fffff
 8011754:	9b08      	ldr	r3, [sp, #32]
 8011756:	b323      	cbz	r3, 80117a2 <_strtod_l+0xb5a>
 8011758:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801175c:	d821      	bhi.n	80117a2 <_strtod_l+0xb5a>
 801175e:	a328      	add	r3, pc, #160	@ (adr r3, 8011800 <_strtod_l+0xbb8>)
 8011760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011764:	4630      	mov	r0, r6
 8011766:	4639      	mov	r1, r7
 8011768:	f7ef f9c2 	bl	8000af0 <__aeabi_dcmple>
 801176c:	b1a0      	cbz	r0, 8011798 <_strtod_l+0xb50>
 801176e:	4639      	mov	r1, r7
 8011770:	4630      	mov	r0, r6
 8011772:	f7ef fa19 	bl	8000ba8 <__aeabi_d2uiz>
 8011776:	2801      	cmp	r0, #1
 8011778:	bf38      	it	cc
 801177a:	2001      	movcc	r0, #1
 801177c:	f7ee fec2 	bl	8000504 <__aeabi_ui2d>
 8011780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011782:	4606      	mov	r6, r0
 8011784:	460f      	mov	r7, r1
 8011786:	b9fb      	cbnz	r3, 80117c8 <_strtod_l+0xb80>
 8011788:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801178c:	9014      	str	r0, [sp, #80]	@ 0x50
 801178e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011790:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011794:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011798:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801179a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801179e:	1b5b      	subs	r3, r3, r5
 80117a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80117a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80117a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80117aa:	f7ff f8f1 	bl	8010990 <__ulp>
 80117ae:	4650      	mov	r0, sl
 80117b0:	ec53 2b10 	vmov	r2, r3, d0
 80117b4:	4659      	mov	r1, fp
 80117b6:	f7ee ff1f 	bl	80005f8 <__aeabi_dmul>
 80117ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80117be:	f7ee fd65 	bl	800028c <__adddf3>
 80117c2:	4682      	mov	sl, r0
 80117c4:	468b      	mov	fp, r1
 80117c6:	e770      	b.n	80116aa <_strtod_l+0xa62>
 80117c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80117cc:	e7e0      	b.n	8011790 <_strtod_l+0xb48>
 80117ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8011808 <_strtod_l+0xbc0>)
 80117d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d4:	f7ef f982 	bl	8000adc <__aeabi_dcmplt>
 80117d8:	e798      	b.n	801170c <_strtod_l+0xac4>
 80117da:	2300      	movs	r3, #0
 80117dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80117de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80117e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80117e2:	6013      	str	r3, [r2, #0]
 80117e4:	f7ff ba6d 	b.w	8010cc2 <_strtod_l+0x7a>
 80117e8:	2a65      	cmp	r2, #101	@ 0x65
 80117ea:	f43f ab68 	beq.w	8010ebe <_strtod_l+0x276>
 80117ee:	2a45      	cmp	r2, #69	@ 0x45
 80117f0:	f43f ab65 	beq.w	8010ebe <_strtod_l+0x276>
 80117f4:	2301      	movs	r3, #1
 80117f6:	f7ff bba0 	b.w	8010f3a <_strtod_l+0x2f2>
 80117fa:	bf00      	nop
 80117fc:	f3af 8000 	nop.w
 8011800:	ffc00000 	.word	0xffc00000
 8011804:	41dfffff 	.word	0x41dfffff
 8011808:	94a03595 	.word	0x94a03595
 801180c:	3fcfffff 	.word	0x3fcfffff

08011810 <_strtod_r>:
 8011810:	4b01      	ldr	r3, [pc, #4]	@ (8011818 <_strtod_r+0x8>)
 8011812:	f7ff ba19 	b.w	8010c48 <_strtod_l>
 8011816:	bf00      	nop
 8011818:	20000164 	.word	0x20000164

0801181c <_strtol_l.isra.0>:
 801181c:	2b24      	cmp	r3, #36	@ 0x24
 801181e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011822:	4686      	mov	lr, r0
 8011824:	4690      	mov	r8, r2
 8011826:	d801      	bhi.n	801182c <_strtol_l.isra.0+0x10>
 8011828:	2b01      	cmp	r3, #1
 801182a:	d106      	bne.n	801183a <_strtol_l.isra.0+0x1e>
 801182c:	f7fd fdaa 	bl	800f384 <__errno>
 8011830:	2316      	movs	r3, #22
 8011832:	6003      	str	r3, [r0, #0]
 8011834:	2000      	movs	r0, #0
 8011836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183a:	4834      	ldr	r0, [pc, #208]	@ (801190c <_strtol_l.isra.0+0xf0>)
 801183c:	460d      	mov	r5, r1
 801183e:	462a      	mov	r2, r5
 8011840:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011844:	5d06      	ldrb	r6, [r0, r4]
 8011846:	f016 0608 	ands.w	r6, r6, #8
 801184a:	d1f8      	bne.n	801183e <_strtol_l.isra.0+0x22>
 801184c:	2c2d      	cmp	r4, #45	@ 0x2d
 801184e:	d110      	bne.n	8011872 <_strtol_l.isra.0+0x56>
 8011850:	782c      	ldrb	r4, [r5, #0]
 8011852:	2601      	movs	r6, #1
 8011854:	1c95      	adds	r5, r2, #2
 8011856:	f033 0210 	bics.w	r2, r3, #16
 801185a:	d115      	bne.n	8011888 <_strtol_l.isra.0+0x6c>
 801185c:	2c30      	cmp	r4, #48	@ 0x30
 801185e:	d10d      	bne.n	801187c <_strtol_l.isra.0+0x60>
 8011860:	782a      	ldrb	r2, [r5, #0]
 8011862:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011866:	2a58      	cmp	r2, #88	@ 0x58
 8011868:	d108      	bne.n	801187c <_strtol_l.isra.0+0x60>
 801186a:	786c      	ldrb	r4, [r5, #1]
 801186c:	3502      	adds	r5, #2
 801186e:	2310      	movs	r3, #16
 8011870:	e00a      	b.n	8011888 <_strtol_l.isra.0+0x6c>
 8011872:	2c2b      	cmp	r4, #43	@ 0x2b
 8011874:	bf04      	itt	eq
 8011876:	782c      	ldrbeq	r4, [r5, #0]
 8011878:	1c95      	addeq	r5, r2, #2
 801187a:	e7ec      	b.n	8011856 <_strtol_l.isra.0+0x3a>
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1f6      	bne.n	801186e <_strtol_l.isra.0+0x52>
 8011880:	2c30      	cmp	r4, #48	@ 0x30
 8011882:	bf14      	ite	ne
 8011884:	230a      	movne	r3, #10
 8011886:	2308      	moveq	r3, #8
 8011888:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801188c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011890:	2200      	movs	r2, #0
 8011892:	fbbc f9f3 	udiv	r9, ip, r3
 8011896:	4610      	mov	r0, r2
 8011898:	fb03 ca19 	mls	sl, r3, r9, ip
 801189c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80118a0:	2f09      	cmp	r7, #9
 80118a2:	d80f      	bhi.n	80118c4 <_strtol_l.isra.0+0xa8>
 80118a4:	463c      	mov	r4, r7
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	dd1b      	ble.n	80118e2 <_strtol_l.isra.0+0xc6>
 80118aa:	1c57      	adds	r7, r2, #1
 80118ac:	d007      	beq.n	80118be <_strtol_l.isra.0+0xa2>
 80118ae:	4581      	cmp	r9, r0
 80118b0:	d314      	bcc.n	80118dc <_strtol_l.isra.0+0xc0>
 80118b2:	d101      	bne.n	80118b8 <_strtol_l.isra.0+0x9c>
 80118b4:	45a2      	cmp	sl, r4
 80118b6:	db11      	blt.n	80118dc <_strtol_l.isra.0+0xc0>
 80118b8:	fb00 4003 	mla	r0, r0, r3, r4
 80118bc:	2201      	movs	r2, #1
 80118be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118c2:	e7eb      	b.n	801189c <_strtol_l.isra.0+0x80>
 80118c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80118c8:	2f19      	cmp	r7, #25
 80118ca:	d801      	bhi.n	80118d0 <_strtol_l.isra.0+0xb4>
 80118cc:	3c37      	subs	r4, #55	@ 0x37
 80118ce:	e7ea      	b.n	80118a6 <_strtol_l.isra.0+0x8a>
 80118d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80118d4:	2f19      	cmp	r7, #25
 80118d6:	d804      	bhi.n	80118e2 <_strtol_l.isra.0+0xc6>
 80118d8:	3c57      	subs	r4, #87	@ 0x57
 80118da:	e7e4      	b.n	80118a6 <_strtol_l.isra.0+0x8a>
 80118dc:	f04f 32ff 	mov.w	r2, #4294967295
 80118e0:	e7ed      	b.n	80118be <_strtol_l.isra.0+0xa2>
 80118e2:	1c53      	adds	r3, r2, #1
 80118e4:	d108      	bne.n	80118f8 <_strtol_l.isra.0+0xdc>
 80118e6:	2322      	movs	r3, #34	@ 0x22
 80118e8:	f8ce 3000 	str.w	r3, [lr]
 80118ec:	4660      	mov	r0, ip
 80118ee:	f1b8 0f00 	cmp.w	r8, #0
 80118f2:	d0a0      	beq.n	8011836 <_strtol_l.isra.0+0x1a>
 80118f4:	1e69      	subs	r1, r5, #1
 80118f6:	e006      	b.n	8011906 <_strtol_l.isra.0+0xea>
 80118f8:	b106      	cbz	r6, 80118fc <_strtol_l.isra.0+0xe0>
 80118fa:	4240      	negs	r0, r0
 80118fc:	f1b8 0f00 	cmp.w	r8, #0
 8011900:	d099      	beq.n	8011836 <_strtol_l.isra.0+0x1a>
 8011902:	2a00      	cmp	r2, #0
 8011904:	d1f6      	bne.n	80118f4 <_strtol_l.isra.0+0xd8>
 8011906:	f8c8 1000 	str.w	r1, [r8]
 801190a:	e794      	b.n	8011836 <_strtol_l.isra.0+0x1a>
 801190c:	08013401 	.word	0x08013401

08011910 <_strtol_r>:
 8011910:	f7ff bf84 	b.w	801181c <_strtol_l.isra.0>

08011914 <__ssputs_r>:
 8011914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011918:	688e      	ldr	r6, [r1, #8]
 801191a:	461f      	mov	r7, r3
 801191c:	42be      	cmp	r6, r7
 801191e:	680b      	ldr	r3, [r1, #0]
 8011920:	4682      	mov	sl, r0
 8011922:	460c      	mov	r4, r1
 8011924:	4690      	mov	r8, r2
 8011926:	d82d      	bhi.n	8011984 <__ssputs_r+0x70>
 8011928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801192c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011930:	d026      	beq.n	8011980 <__ssputs_r+0x6c>
 8011932:	6965      	ldr	r5, [r4, #20]
 8011934:	6909      	ldr	r1, [r1, #16]
 8011936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801193a:	eba3 0901 	sub.w	r9, r3, r1
 801193e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011942:	1c7b      	adds	r3, r7, #1
 8011944:	444b      	add	r3, r9
 8011946:	106d      	asrs	r5, r5, #1
 8011948:	429d      	cmp	r5, r3
 801194a:	bf38      	it	cc
 801194c:	461d      	movcc	r5, r3
 801194e:	0553      	lsls	r3, r2, #21
 8011950:	d527      	bpl.n	80119a2 <__ssputs_r+0x8e>
 8011952:	4629      	mov	r1, r5
 8011954:	f7fe fc24 	bl	80101a0 <_malloc_r>
 8011958:	4606      	mov	r6, r0
 801195a:	b360      	cbz	r0, 80119b6 <__ssputs_r+0xa2>
 801195c:	6921      	ldr	r1, [r4, #16]
 801195e:	464a      	mov	r2, r9
 8011960:	f7fd fd3d 	bl	800f3de <memcpy>
 8011964:	89a3      	ldrh	r3, [r4, #12]
 8011966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801196a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801196e:	81a3      	strh	r3, [r4, #12]
 8011970:	6126      	str	r6, [r4, #16]
 8011972:	6165      	str	r5, [r4, #20]
 8011974:	444e      	add	r6, r9
 8011976:	eba5 0509 	sub.w	r5, r5, r9
 801197a:	6026      	str	r6, [r4, #0]
 801197c:	60a5      	str	r5, [r4, #8]
 801197e:	463e      	mov	r6, r7
 8011980:	42be      	cmp	r6, r7
 8011982:	d900      	bls.n	8011986 <__ssputs_r+0x72>
 8011984:	463e      	mov	r6, r7
 8011986:	6820      	ldr	r0, [r4, #0]
 8011988:	4632      	mov	r2, r6
 801198a:	4641      	mov	r1, r8
 801198c:	f000 fb6a 	bl	8012064 <memmove>
 8011990:	68a3      	ldr	r3, [r4, #8]
 8011992:	1b9b      	subs	r3, r3, r6
 8011994:	60a3      	str	r3, [r4, #8]
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	4433      	add	r3, r6
 801199a:	6023      	str	r3, [r4, #0]
 801199c:	2000      	movs	r0, #0
 801199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a2:	462a      	mov	r2, r5
 80119a4:	f000 ff41 	bl	801282a <_realloc_r>
 80119a8:	4606      	mov	r6, r0
 80119aa:	2800      	cmp	r0, #0
 80119ac:	d1e0      	bne.n	8011970 <__ssputs_r+0x5c>
 80119ae:	6921      	ldr	r1, [r4, #16]
 80119b0:	4650      	mov	r0, sl
 80119b2:	f7fe fb81 	bl	80100b8 <_free_r>
 80119b6:	230c      	movs	r3, #12
 80119b8:	f8ca 3000 	str.w	r3, [sl]
 80119bc:	89a3      	ldrh	r3, [r4, #12]
 80119be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80119c2:	81a3      	strh	r3, [r4, #12]
 80119c4:	f04f 30ff 	mov.w	r0, #4294967295
 80119c8:	e7e9      	b.n	801199e <__ssputs_r+0x8a>
	...

080119cc <_svfiprintf_r>:
 80119cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d0:	4698      	mov	r8, r3
 80119d2:	898b      	ldrh	r3, [r1, #12]
 80119d4:	061b      	lsls	r3, r3, #24
 80119d6:	b09d      	sub	sp, #116	@ 0x74
 80119d8:	4607      	mov	r7, r0
 80119da:	460d      	mov	r5, r1
 80119dc:	4614      	mov	r4, r2
 80119de:	d510      	bpl.n	8011a02 <_svfiprintf_r+0x36>
 80119e0:	690b      	ldr	r3, [r1, #16]
 80119e2:	b973      	cbnz	r3, 8011a02 <_svfiprintf_r+0x36>
 80119e4:	2140      	movs	r1, #64	@ 0x40
 80119e6:	f7fe fbdb 	bl	80101a0 <_malloc_r>
 80119ea:	6028      	str	r0, [r5, #0]
 80119ec:	6128      	str	r0, [r5, #16]
 80119ee:	b930      	cbnz	r0, 80119fe <_svfiprintf_r+0x32>
 80119f0:	230c      	movs	r3, #12
 80119f2:	603b      	str	r3, [r7, #0]
 80119f4:	f04f 30ff 	mov.w	r0, #4294967295
 80119f8:	b01d      	add	sp, #116	@ 0x74
 80119fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fe:	2340      	movs	r3, #64	@ 0x40
 8011a00:	616b      	str	r3, [r5, #20]
 8011a02:	2300      	movs	r3, #0
 8011a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a06:	2320      	movs	r3, #32
 8011a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a10:	2330      	movs	r3, #48	@ 0x30
 8011a12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011bb0 <_svfiprintf_r+0x1e4>
 8011a16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011a1a:	f04f 0901 	mov.w	r9, #1
 8011a1e:	4623      	mov	r3, r4
 8011a20:	469a      	mov	sl, r3
 8011a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a26:	b10a      	cbz	r2, 8011a2c <_svfiprintf_r+0x60>
 8011a28:	2a25      	cmp	r2, #37	@ 0x25
 8011a2a:	d1f9      	bne.n	8011a20 <_svfiprintf_r+0x54>
 8011a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8011a30:	d00b      	beq.n	8011a4a <_svfiprintf_r+0x7e>
 8011a32:	465b      	mov	r3, fp
 8011a34:	4622      	mov	r2, r4
 8011a36:	4629      	mov	r1, r5
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f7ff ff6b 	bl	8011914 <__ssputs_r>
 8011a3e:	3001      	adds	r0, #1
 8011a40:	f000 80a7 	beq.w	8011b92 <_svfiprintf_r+0x1c6>
 8011a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a46:	445a      	add	r2, fp
 8011a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8011a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f000 809f 	beq.w	8011b92 <_svfiprintf_r+0x1c6>
 8011a54:	2300      	movs	r3, #0
 8011a56:	f04f 32ff 	mov.w	r2, #4294967295
 8011a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a5e:	f10a 0a01 	add.w	sl, sl, #1
 8011a62:	9304      	str	r3, [sp, #16]
 8011a64:	9307      	str	r3, [sp, #28]
 8011a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011a6c:	4654      	mov	r4, sl
 8011a6e:	2205      	movs	r2, #5
 8011a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a74:	484e      	ldr	r0, [pc, #312]	@ (8011bb0 <_svfiprintf_r+0x1e4>)
 8011a76:	f7ee fbab 	bl	80001d0 <memchr>
 8011a7a:	9a04      	ldr	r2, [sp, #16]
 8011a7c:	b9d8      	cbnz	r0, 8011ab6 <_svfiprintf_r+0xea>
 8011a7e:	06d0      	lsls	r0, r2, #27
 8011a80:	bf44      	itt	mi
 8011a82:	2320      	movmi	r3, #32
 8011a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a88:	0711      	lsls	r1, r2, #28
 8011a8a:	bf44      	itt	mi
 8011a8c:	232b      	movmi	r3, #43	@ 0x2b
 8011a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a92:	f89a 3000 	ldrb.w	r3, [sl]
 8011a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a98:	d015      	beq.n	8011ac6 <_svfiprintf_r+0xfa>
 8011a9a:	9a07      	ldr	r2, [sp, #28]
 8011a9c:	4654      	mov	r4, sl
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	f04f 0c0a 	mov.w	ip, #10
 8011aa4:	4621      	mov	r1, r4
 8011aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011aaa:	3b30      	subs	r3, #48	@ 0x30
 8011aac:	2b09      	cmp	r3, #9
 8011aae:	d94b      	bls.n	8011b48 <_svfiprintf_r+0x17c>
 8011ab0:	b1b0      	cbz	r0, 8011ae0 <_svfiprintf_r+0x114>
 8011ab2:	9207      	str	r2, [sp, #28]
 8011ab4:	e014      	b.n	8011ae0 <_svfiprintf_r+0x114>
 8011ab6:	eba0 0308 	sub.w	r3, r0, r8
 8011aba:	fa09 f303 	lsl.w	r3, r9, r3
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	9304      	str	r3, [sp, #16]
 8011ac2:	46a2      	mov	sl, r4
 8011ac4:	e7d2      	b.n	8011a6c <_svfiprintf_r+0xa0>
 8011ac6:	9b03      	ldr	r3, [sp, #12]
 8011ac8:	1d19      	adds	r1, r3, #4
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	9103      	str	r1, [sp, #12]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	bfbb      	ittet	lt
 8011ad2:	425b      	neglt	r3, r3
 8011ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ad8:	9307      	strge	r3, [sp, #28]
 8011ada:	9307      	strlt	r3, [sp, #28]
 8011adc:	bfb8      	it	lt
 8011ade:	9204      	strlt	r2, [sp, #16]
 8011ae0:	7823      	ldrb	r3, [r4, #0]
 8011ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8011ae4:	d10a      	bne.n	8011afc <_svfiprintf_r+0x130>
 8011ae6:	7863      	ldrb	r3, [r4, #1]
 8011ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011aea:	d132      	bne.n	8011b52 <_svfiprintf_r+0x186>
 8011aec:	9b03      	ldr	r3, [sp, #12]
 8011aee:	1d1a      	adds	r2, r3, #4
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	9203      	str	r2, [sp, #12]
 8011af4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011af8:	3402      	adds	r4, #2
 8011afa:	9305      	str	r3, [sp, #20]
 8011afc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011bc0 <_svfiprintf_r+0x1f4>
 8011b00:	7821      	ldrb	r1, [r4, #0]
 8011b02:	2203      	movs	r2, #3
 8011b04:	4650      	mov	r0, sl
 8011b06:	f7ee fb63 	bl	80001d0 <memchr>
 8011b0a:	b138      	cbz	r0, 8011b1c <_svfiprintf_r+0x150>
 8011b0c:	9b04      	ldr	r3, [sp, #16]
 8011b0e:	eba0 000a 	sub.w	r0, r0, sl
 8011b12:	2240      	movs	r2, #64	@ 0x40
 8011b14:	4082      	lsls	r2, r0
 8011b16:	4313      	orrs	r3, r2
 8011b18:	3401      	adds	r4, #1
 8011b1a:	9304      	str	r3, [sp, #16]
 8011b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b20:	4824      	ldr	r0, [pc, #144]	@ (8011bb4 <_svfiprintf_r+0x1e8>)
 8011b22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011b26:	2206      	movs	r2, #6
 8011b28:	f7ee fb52 	bl	80001d0 <memchr>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	d036      	beq.n	8011b9e <_svfiprintf_r+0x1d2>
 8011b30:	4b21      	ldr	r3, [pc, #132]	@ (8011bb8 <_svfiprintf_r+0x1ec>)
 8011b32:	bb1b      	cbnz	r3, 8011b7c <_svfiprintf_r+0x1b0>
 8011b34:	9b03      	ldr	r3, [sp, #12]
 8011b36:	3307      	adds	r3, #7
 8011b38:	f023 0307 	bic.w	r3, r3, #7
 8011b3c:	3308      	adds	r3, #8
 8011b3e:	9303      	str	r3, [sp, #12]
 8011b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b42:	4433      	add	r3, r6
 8011b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b46:	e76a      	b.n	8011a1e <_svfiprintf_r+0x52>
 8011b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b4c:	460c      	mov	r4, r1
 8011b4e:	2001      	movs	r0, #1
 8011b50:	e7a8      	b.n	8011aa4 <_svfiprintf_r+0xd8>
 8011b52:	2300      	movs	r3, #0
 8011b54:	3401      	adds	r4, #1
 8011b56:	9305      	str	r3, [sp, #20]
 8011b58:	4619      	mov	r1, r3
 8011b5a:	f04f 0c0a 	mov.w	ip, #10
 8011b5e:	4620      	mov	r0, r4
 8011b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b64:	3a30      	subs	r2, #48	@ 0x30
 8011b66:	2a09      	cmp	r2, #9
 8011b68:	d903      	bls.n	8011b72 <_svfiprintf_r+0x1a6>
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d0c6      	beq.n	8011afc <_svfiprintf_r+0x130>
 8011b6e:	9105      	str	r1, [sp, #20]
 8011b70:	e7c4      	b.n	8011afc <_svfiprintf_r+0x130>
 8011b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b76:	4604      	mov	r4, r0
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e7f0      	b.n	8011b5e <_svfiprintf_r+0x192>
 8011b7c:	ab03      	add	r3, sp, #12
 8011b7e:	9300      	str	r3, [sp, #0]
 8011b80:	462a      	mov	r2, r5
 8011b82:	4b0e      	ldr	r3, [pc, #56]	@ (8011bbc <_svfiprintf_r+0x1f0>)
 8011b84:	a904      	add	r1, sp, #16
 8011b86:	4638      	mov	r0, r7
 8011b88:	f7fc fbba 	bl	800e300 <_printf_float>
 8011b8c:	1c42      	adds	r2, r0, #1
 8011b8e:	4606      	mov	r6, r0
 8011b90:	d1d6      	bne.n	8011b40 <_svfiprintf_r+0x174>
 8011b92:	89ab      	ldrh	r3, [r5, #12]
 8011b94:	065b      	lsls	r3, r3, #25
 8011b96:	f53f af2d 	bmi.w	80119f4 <_svfiprintf_r+0x28>
 8011b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b9c:	e72c      	b.n	80119f8 <_svfiprintf_r+0x2c>
 8011b9e:	ab03      	add	r3, sp, #12
 8011ba0:	9300      	str	r3, [sp, #0]
 8011ba2:	462a      	mov	r2, r5
 8011ba4:	4b05      	ldr	r3, [pc, #20]	@ (8011bbc <_svfiprintf_r+0x1f0>)
 8011ba6:	a904      	add	r1, sp, #16
 8011ba8:	4638      	mov	r0, r7
 8011baa:	f7fc fe41 	bl	800e830 <_printf_i>
 8011bae:	e7ed      	b.n	8011b8c <_svfiprintf_r+0x1c0>
 8011bb0:	080131f9 	.word	0x080131f9
 8011bb4:	08013203 	.word	0x08013203
 8011bb8:	0800e301 	.word	0x0800e301
 8011bbc:	08011915 	.word	0x08011915
 8011bc0:	080131ff 	.word	0x080131ff

08011bc4 <__sfputc_r>:
 8011bc4:	6893      	ldr	r3, [r2, #8]
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	b410      	push	{r4}
 8011bcc:	6093      	str	r3, [r2, #8]
 8011bce:	da08      	bge.n	8011be2 <__sfputc_r+0x1e>
 8011bd0:	6994      	ldr	r4, [r2, #24]
 8011bd2:	42a3      	cmp	r3, r4
 8011bd4:	db01      	blt.n	8011bda <__sfputc_r+0x16>
 8011bd6:	290a      	cmp	r1, #10
 8011bd8:	d103      	bne.n	8011be2 <__sfputc_r+0x1e>
 8011bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bde:	f7fd baea 	b.w	800f1b6 <__swbuf_r>
 8011be2:	6813      	ldr	r3, [r2, #0]
 8011be4:	1c58      	adds	r0, r3, #1
 8011be6:	6010      	str	r0, [r2, #0]
 8011be8:	7019      	strb	r1, [r3, #0]
 8011bea:	4608      	mov	r0, r1
 8011bec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <__sfputs_r>:
 8011bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	4614      	mov	r4, r2
 8011bfa:	18d5      	adds	r5, r2, r3
 8011bfc:	42ac      	cmp	r4, r5
 8011bfe:	d101      	bne.n	8011c04 <__sfputs_r+0x12>
 8011c00:	2000      	movs	r0, #0
 8011c02:	e007      	b.n	8011c14 <__sfputs_r+0x22>
 8011c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c08:	463a      	mov	r2, r7
 8011c0a:	4630      	mov	r0, r6
 8011c0c:	f7ff ffda 	bl	8011bc4 <__sfputc_r>
 8011c10:	1c43      	adds	r3, r0, #1
 8011c12:	d1f3      	bne.n	8011bfc <__sfputs_r+0xa>
 8011c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c18 <_vfiprintf_r>:
 8011c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c1c:	460d      	mov	r5, r1
 8011c1e:	b09d      	sub	sp, #116	@ 0x74
 8011c20:	4614      	mov	r4, r2
 8011c22:	4698      	mov	r8, r3
 8011c24:	4606      	mov	r6, r0
 8011c26:	b118      	cbz	r0, 8011c30 <_vfiprintf_r+0x18>
 8011c28:	6a03      	ldr	r3, [r0, #32]
 8011c2a:	b90b      	cbnz	r3, 8011c30 <_vfiprintf_r+0x18>
 8011c2c:	f7fd f9b8 	bl	800efa0 <__sinit>
 8011c30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c32:	07d9      	lsls	r1, r3, #31
 8011c34:	d405      	bmi.n	8011c42 <_vfiprintf_r+0x2a>
 8011c36:	89ab      	ldrh	r3, [r5, #12]
 8011c38:	059a      	lsls	r2, r3, #22
 8011c3a:	d402      	bmi.n	8011c42 <_vfiprintf_r+0x2a>
 8011c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c3e:	f7fd fbcc 	bl	800f3da <__retarget_lock_acquire_recursive>
 8011c42:	89ab      	ldrh	r3, [r5, #12]
 8011c44:	071b      	lsls	r3, r3, #28
 8011c46:	d501      	bpl.n	8011c4c <_vfiprintf_r+0x34>
 8011c48:	692b      	ldr	r3, [r5, #16]
 8011c4a:	b99b      	cbnz	r3, 8011c74 <_vfiprintf_r+0x5c>
 8011c4c:	4629      	mov	r1, r5
 8011c4e:	4630      	mov	r0, r6
 8011c50:	f7fd faf0 	bl	800f234 <__swsetup_r>
 8011c54:	b170      	cbz	r0, 8011c74 <_vfiprintf_r+0x5c>
 8011c56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c58:	07dc      	lsls	r4, r3, #31
 8011c5a:	d504      	bpl.n	8011c66 <_vfiprintf_r+0x4e>
 8011c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c60:	b01d      	add	sp, #116	@ 0x74
 8011c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c66:	89ab      	ldrh	r3, [r5, #12]
 8011c68:	0598      	lsls	r0, r3, #22
 8011c6a:	d4f7      	bmi.n	8011c5c <_vfiprintf_r+0x44>
 8011c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c6e:	f7fd fbb5 	bl	800f3dc <__retarget_lock_release_recursive>
 8011c72:	e7f3      	b.n	8011c5c <_vfiprintf_r+0x44>
 8011c74:	2300      	movs	r3, #0
 8011c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c78:	2320      	movs	r3, #32
 8011c7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c82:	2330      	movs	r3, #48	@ 0x30
 8011c84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e34 <_vfiprintf_r+0x21c>
 8011c88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c8c:	f04f 0901 	mov.w	r9, #1
 8011c90:	4623      	mov	r3, r4
 8011c92:	469a      	mov	sl, r3
 8011c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c98:	b10a      	cbz	r2, 8011c9e <_vfiprintf_r+0x86>
 8011c9a:	2a25      	cmp	r2, #37	@ 0x25
 8011c9c:	d1f9      	bne.n	8011c92 <_vfiprintf_r+0x7a>
 8011c9e:	ebba 0b04 	subs.w	fp, sl, r4
 8011ca2:	d00b      	beq.n	8011cbc <_vfiprintf_r+0xa4>
 8011ca4:	465b      	mov	r3, fp
 8011ca6:	4622      	mov	r2, r4
 8011ca8:	4629      	mov	r1, r5
 8011caa:	4630      	mov	r0, r6
 8011cac:	f7ff ffa1 	bl	8011bf2 <__sfputs_r>
 8011cb0:	3001      	adds	r0, #1
 8011cb2:	f000 80a7 	beq.w	8011e04 <_vfiprintf_r+0x1ec>
 8011cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cb8:	445a      	add	r2, fp
 8011cba:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 809f 	beq.w	8011e04 <_vfiprintf_r+0x1ec>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011ccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cd0:	f10a 0a01 	add.w	sl, sl, #1
 8011cd4:	9304      	str	r3, [sp, #16]
 8011cd6:	9307      	str	r3, [sp, #28]
 8011cd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cdc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cde:	4654      	mov	r4, sl
 8011ce0:	2205      	movs	r2, #5
 8011ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce6:	4853      	ldr	r0, [pc, #332]	@ (8011e34 <_vfiprintf_r+0x21c>)
 8011ce8:	f7ee fa72 	bl	80001d0 <memchr>
 8011cec:	9a04      	ldr	r2, [sp, #16]
 8011cee:	b9d8      	cbnz	r0, 8011d28 <_vfiprintf_r+0x110>
 8011cf0:	06d1      	lsls	r1, r2, #27
 8011cf2:	bf44      	itt	mi
 8011cf4:	2320      	movmi	r3, #32
 8011cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cfa:	0713      	lsls	r3, r2, #28
 8011cfc:	bf44      	itt	mi
 8011cfe:	232b      	movmi	r3, #43	@ 0x2b
 8011d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d04:	f89a 3000 	ldrb.w	r3, [sl]
 8011d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d0a:	d015      	beq.n	8011d38 <_vfiprintf_r+0x120>
 8011d0c:	9a07      	ldr	r2, [sp, #28]
 8011d0e:	4654      	mov	r4, sl
 8011d10:	2000      	movs	r0, #0
 8011d12:	f04f 0c0a 	mov.w	ip, #10
 8011d16:	4621      	mov	r1, r4
 8011d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d1c:	3b30      	subs	r3, #48	@ 0x30
 8011d1e:	2b09      	cmp	r3, #9
 8011d20:	d94b      	bls.n	8011dba <_vfiprintf_r+0x1a2>
 8011d22:	b1b0      	cbz	r0, 8011d52 <_vfiprintf_r+0x13a>
 8011d24:	9207      	str	r2, [sp, #28]
 8011d26:	e014      	b.n	8011d52 <_vfiprintf_r+0x13a>
 8011d28:	eba0 0308 	sub.w	r3, r0, r8
 8011d2c:	fa09 f303 	lsl.w	r3, r9, r3
 8011d30:	4313      	orrs	r3, r2
 8011d32:	9304      	str	r3, [sp, #16]
 8011d34:	46a2      	mov	sl, r4
 8011d36:	e7d2      	b.n	8011cde <_vfiprintf_r+0xc6>
 8011d38:	9b03      	ldr	r3, [sp, #12]
 8011d3a:	1d19      	adds	r1, r3, #4
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	9103      	str	r1, [sp, #12]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	bfbb      	ittet	lt
 8011d44:	425b      	neglt	r3, r3
 8011d46:	f042 0202 	orrlt.w	r2, r2, #2
 8011d4a:	9307      	strge	r3, [sp, #28]
 8011d4c:	9307      	strlt	r3, [sp, #28]
 8011d4e:	bfb8      	it	lt
 8011d50:	9204      	strlt	r2, [sp, #16]
 8011d52:	7823      	ldrb	r3, [r4, #0]
 8011d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d56:	d10a      	bne.n	8011d6e <_vfiprintf_r+0x156>
 8011d58:	7863      	ldrb	r3, [r4, #1]
 8011d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d5c:	d132      	bne.n	8011dc4 <_vfiprintf_r+0x1ac>
 8011d5e:	9b03      	ldr	r3, [sp, #12]
 8011d60:	1d1a      	adds	r2, r3, #4
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	9203      	str	r2, [sp, #12]
 8011d66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d6a:	3402      	adds	r4, #2
 8011d6c:	9305      	str	r3, [sp, #20]
 8011d6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e44 <_vfiprintf_r+0x22c>
 8011d72:	7821      	ldrb	r1, [r4, #0]
 8011d74:	2203      	movs	r2, #3
 8011d76:	4650      	mov	r0, sl
 8011d78:	f7ee fa2a 	bl	80001d0 <memchr>
 8011d7c:	b138      	cbz	r0, 8011d8e <_vfiprintf_r+0x176>
 8011d7e:	9b04      	ldr	r3, [sp, #16]
 8011d80:	eba0 000a 	sub.w	r0, r0, sl
 8011d84:	2240      	movs	r2, #64	@ 0x40
 8011d86:	4082      	lsls	r2, r0
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	3401      	adds	r4, #1
 8011d8c:	9304      	str	r3, [sp, #16]
 8011d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d92:	4829      	ldr	r0, [pc, #164]	@ (8011e38 <_vfiprintf_r+0x220>)
 8011d94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d98:	2206      	movs	r2, #6
 8011d9a:	f7ee fa19 	bl	80001d0 <memchr>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	d03f      	beq.n	8011e22 <_vfiprintf_r+0x20a>
 8011da2:	4b26      	ldr	r3, [pc, #152]	@ (8011e3c <_vfiprintf_r+0x224>)
 8011da4:	bb1b      	cbnz	r3, 8011dee <_vfiprintf_r+0x1d6>
 8011da6:	9b03      	ldr	r3, [sp, #12]
 8011da8:	3307      	adds	r3, #7
 8011daa:	f023 0307 	bic.w	r3, r3, #7
 8011dae:	3308      	adds	r3, #8
 8011db0:	9303      	str	r3, [sp, #12]
 8011db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011db4:	443b      	add	r3, r7
 8011db6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011db8:	e76a      	b.n	8011c90 <_vfiprintf_r+0x78>
 8011dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	2001      	movs	r0, #1
 8011dc2:	e7a8      	b.n	8011d16 <_vfiprintf_r+0xfe>
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	3401      	adds	r4, #1
 8011dc8:	9305      	str	r3, [sp, #20]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	f04f 0c0a 	mov.w	ip, #10
 8011dd0:	4620      	mov	r0, r4
 8011dd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dd6:	3a30      	subs	r2, #48	@ 0x30
 8011dd8:	2a09      	cmp	r2, #9
 8011dda:	d903      	bls.n	8011de4 <_vfiprintf_r+0x1cc>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d0c6      	beq.n	8011d6e <_vfiprintf_r+0x156>
 8011de0:	9105      	str	r1, [sp, #20]
 8011de2:	e7c4      	b.n	8011d6e <_vfiprintf_r+0x156>
 8011de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011de8:	4604      	mov	r4, r0
 8011dea:	2301      	movs	r3, #1
 8011dec:	e7f0      	b.n	8011dd0 <_vfiprintf_r+0x1b8>
 8011dee:	ab03      	add	r3, sp, #12
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	462a      	mov	r2, r5
 8011df4:	4b12      	ldr	r3, [pc, #72]	@ (8011e40 <_vfiprintf_r+0x228>)
 8011df6:	a904      	add	r1, sp, #16
 8011df8:	4630      	mov	r0, r6
 8011dfa:	f7fc fa81 	bl	800e300 <_printf_float>
 8011dfe:	4607      	mov	r7, r0
 8011e00:	1c78      	adds	r0, r7, #1
 8011e02:	d1d6      	bne.n	8011db2 <_vfiprintf_r+0x19a>
 8011e04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011e06:	07d9      	lsls	r1, r3, #31
 8011e08:	d405      	bmi.n	8011e16 <_vfiprintf_r+0x1fe>
 8011e0a:	89ab      	ldrh	r3, [r5, #12]
 8011e0c:	059a      	lsls	r2, r3, #22
 8011e0e:	d402      	bmi.n	8011e16 <_vfiprintf_r+0x1fe>
 8011e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e12:	f7fd fae3 	bl	800f3dc <__retarget_lock_release_recursive>
 8011e16:	89ab      	ldrh	r3, [r5, #12]
 8011e18:	065b      	lsls	r3, r3, #25
 8011e1a:	f53f af1f 	bmi.w	8011c5c <_vfiprintf_r+0x44>
 8011e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e20:	e71e      	b.n	8011c60 <_vfiprintf_r+0x48>
 8011e22:	ab03      	add	r3, sp, #12
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	462a      	mov	r2, r5
 8011e28:	4b05      	ldr	r3, [pc, #20]	@ (8011e40 <_vfiprintf_r+0x228>)
 8011e2a:	a904      	add	r1, sp, #16
 8011e2c:	4630      	mov	r0, r6
 8011e2e:	f7fc fcff 	bl	800e830 <_printf_i>
 8011e32:	e7e4      	b.n	8011dfe <_vfiprintf_r+0x1e6>
 8011e34:	080131f9 	.word	0x080131f9
 8011e38:	08013203 	.word	0x08013203
 8011e3c:	0800e301 	.word	0x0800e301
 8011e40:	08011bf3 	.word	0x08011bf3
 8011e44:	080131ff 	.word	0x080131ff

08011e48 <__sflush_r>:
 8011e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e50:	0716      	lsls	r6, r2, #28
 8011e52:	4605      	mov	r5, r0
 8011e54:	460c      	mov	r4, r1
 8011e56:	d454      	bmi.n	8011f02 <__sflush_r+0xba>
 8011e58:	684b      	ldr	r3, [r1, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	dc02      	bgt.n	8011e64 <__sflush_r+0x1c>
 8011e5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	dd48      	ble.n	8011ef6 <__sflush_r+0xae>
 8011e64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e66:	2e00      	cmp	r6, #0
 8011e68:	d045      	beq.n	8011ef6 <__sflush_r+0xae>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e70:	682f      	ldr	r7, [r5, #0]
 8011e72:	6a21      	ldr	r1, [r4, #32]
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	d030      	beq.n	8011eda <__sflush_r+0x92>
 8011e78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e7a:	89a3      	ldrh	r3, [r4, #12]
 8011e7c:	0759      	lsls	r1, r3, #29
 8011e7e:	d505      	bpl.n	8011e8c <__sflush_r+0x44>
 8011e80:	6863      	ldr	r3, [r4, #4]
 8011e82:	1ad2      	subs	r2, r2, r3
 8011e84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e86:	b10b      	cbz	r3, 8011e8c <__sflush_r+0x44>
 8011e88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e8a:	1ad2      	subs	r2, r2, r3
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e90:	6a21      	ldr	r1, [r4, #32]
 8011e92:	4628      	mov	r0, r5
 8011e94:	47b0      	blx	r6
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	89a3      	ldrh	r3, [r4, #12]
 8011e9a:	d106      	bne.n	8011eaa <__sflush_r+0x62>
 8011e9c:	6829      	ldr	r1, [r5, #0]
 8011e9e:	291d      	cmp	r1, #29
 8011ea0:	d82b      	bhi.n	8011efa <__sflush_r+0xb2>
 8011ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8011f4c <__sflush_r+0x104>)
 8011ea4:	40ca      	lsrs	r2, r1
 8011ea6:	07d6      	lsls	r6, r2, #31
 8011ea8:	d527      	bpl.n	8011efa <__sflush_r+0xb2>
 8011eaa:	2200      	movs	r2, #0
 8011eac:	6062      	str	r2, [r4, #4]
 8011eae:	04d9      	lsls	r1, r3, #19
 8011eb0:	6922      	ldr	r2, [r4, #16]
 8011eb2:	6022      	str	r2, [r4, #0]
 8011eb4:	d504      	bpl.n	8011ec0 <__sflush_r+0x78>
 8011eb6:	1c42      	adds	r2, r0, #1
 8011eb8:	d101      	bne.n	8011ebe <__sflush_r+0x76>
 8011eba:	682b      	ldr	r3, [r5, #0]
 8011ebc:	b903      	cbnz	r3, 8011ec0 <__sflush_r+0x78>
 8011ebe:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ec2:	602f      	str	r7, [r5, #0]
 8011ec4:	b1b9      	cbz	r1, 8011ef6 <__sflush_r+0xae>
 8011ec6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011eca:	4299      	cmp	r1, r3
 8011ecc:	d002      	beq.n	8011ed4 <__sflush_r+0x8c>
 8011ece:	4628      	mov	r0, r5
 8011ed0:	f7fe f8f2 	bl	80100b8 <_free_r>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ed8:	e00d      	b.n	8011ef6 <__sflush_r+0xae>
 8011eda:	2301      	movs	r3, #1
 8011edc:	4628      	mov	r0, r5
 8011ede:	47b0      	blx	r6
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	1c50      	adds	r0, r2, #1
 8011ee4:	d1c9      	bne.n	8011e7a <__sflush_r+0x32>
 8011ee6:	682b      	ldr	r3, [r5, #0]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d0c6      	beq.n	8011e7a <__sflush_r+0x32>
 8011eec:	2b1d      	cmp	r3, #29
 8011eee:	d001      	beq.n	8011ef4 <__sflush_r+0xac>
 8011ef0:	2b16      	cmp	r3, #22
 8011ef2:	d11e      	bne.n	8011f32 <__sflush_r+0xea>
 8011ef4:	602f      	str	r7, [r5, #0]
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	e022      	b.n	8011f40 <__sflush_r+0xf8>
 8011efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011efe:	b21b      	sxth	r3, r3
 8011f00:	e01b      	b.n	8011f3a <__sflush_r+0xf2>
 8011f02:	690f      	ldr	r7, [r1, #16]
 8011f04:	2f00      	cmp	r7, #0
 8011f06:	d0f6      	beq.n	8011ef6 <__sflush_r+0xae>
 8011f08:	0793      	lsls	r3, r2, #30
 8011f0a:	680e      	ldr	r6, [r1, #0]
 8011f0c:	bf08      	it	eq
 8011f0e:	694b      	ldreq	r3, [r1, #20]
 8011f10:	600f      	str	r7, [r1, #0]
 8011f12:	bf18      	it	ne
 8011f14:	2300      	movne	r3, #0
 8011f16:	eba6 0807 	sub.w	r8, r6, r7
 8011f1a:	608b      	str	r3, [r1, #8]
 8011f1c:	f1b8 0f00 	cmp.w	r8, #0
 8011f20:	dde9      	ble.n	8011ef6 <__sflush_r+0xae>
 8011f22:	6a21      	ldr	r1, [r4, #32]
 8011f24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011f26:	4643      	mov	r3, r8
 8011f28:	463a      	mov	r2, r7
 8011f2a:	4628      	mov	r0, r5
 8011f2c:	47b0      	blx	r6
 8011f2e:	2800      	cmp	r0, #0
 8011f30:	dc08      	bgt.n	8011f44 <__sflush_r+0xfc>
 8011f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f3a:	81a3      	strh	r3, [r4, #12]
 8011f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f44:	4407      	add	r7, r0
 8011f46:	eba8 0800 	sub.w	r8, r8, r0
 8011f4a:	e7e7      	b.n	8011f1c <__sflush_r+0xd4>
 8011f4c:	20400001 	.word	0x20400001

08011f50 <_fflush_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	690b      	ldr	r3, [r1, #16]
 8011f54:	4605      	mov	r5, r0
 8011f56:	460c      	mov	r4, r1
 8011f58:	b913      	cbnz	r3, 8011f60 <_fflush_r+0x10>
 8011f5a:	2500      	movs	r5, #0
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	bd38      	pop	{r3, r4, r5, pc}
 8011f60:	b118      	cbz	r0, 8011f6a <_fflush_r+0x1a>
 8011f62:	6a03      	ldr	r3, [r0, #32]
 8011f64:	b90b      	cbnz	r3, 8011f6a <_fflush_r+0x1a>
 8011f66:	f7fd f81b 	bl	800efa0 <__sinit>
 8011f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d0f3      	beq.n	8011f5a <_fflush_r+0xa>
 8011f72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f74:	07d0      	lsls	r0, r2, #31
 8011f76:	d404      	bmi.n	8011f82 <_fflush_r+0x32>
 8011f78:	0599      	lsls	r1, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_fflush_r+0x32>
 8011f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f7e:	f7fd fa2c 	bl	800f3da <__retarget_lock_acquire_recursive>
 8011f82:	4628      	mov	r0, r5
 8011f84:	4621      	mov	r1, r4
 8011f86:	f7ff ff5f 	bl	8011e48 <__sflush_r>
 8011f8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f8c:	07da      	lsls	r2, r3, #31
 8011f8e:	4605      	mov	r5, r0
 8011f90:	d4e4      	bmi.n	8011f5c <_fflush_r+0xc>
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	059b      	lsls	r3, r3, #22
 8011f96:	d4e1      	bmi.n	8011f5c <_fflush_r+0xc>
 8011f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f9a:	f7fd fa1f 	bl	800f3dc <__retarget_lock_release_recursive>
 8011f9e:	e7dd      	b.n	8011f5c <_fflush_r+0xc>

08011fa0 <__swhatbuf_r>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fa8:	2900      	cmp	r1, #0
 8011faa:	b096      	sub	sp, #88	@ 0x58
 8011fac:	4615      	mov	r5, r2
 8011fae:	461e      	mov	r6, r3
 8011fb0:	da0d      	bge.n	8011fce <__swhatbuf_r+0x2e>
 8011fb2:	89a3      	ldrh	r3, [r4, #12]
 8011fb4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011fb8:	f04f 0100 	mov.w	r1, #0
 8011fbc:	bf14      	ite	ne
 8011fbe:	2340      	movne	r3, #64	@ 0x40
 8011fc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011fc4:	2000      	movs	r0, #0
 8011fc6:	6031      	str	r1, [r6, #0]
 8011fc8:	602b      	str	r3, [r5, #0]
 8011fca:	b016      	add	sp, #88	@ 0x58
 8011fcc:	bd70      	pop	{r4, r5, r6, pc}
 8011fce:	466a      	mov	r2, sp
 8011fd0:	f000 f874 	bl	80120bc <_fstat_r>
 8011fd4:	2800      	cmp	r0, #0
 8011fd6:	dbec      	blt.n	8011fb2 <__swhatbuf_r+0x12>
 8011fd8:	9901      	ldr	r1, [sp, #4]
 8011fda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011fde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011fe2:	4259      	negs	r1, r3
 8011fe4:	4159      	adcs	r1, r3
 8011fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011fea:	e7eb      	b.n	8011fc4 <__swhatbuf_r+0x24>

08011fec <__smakebuf_r>:
 8011fec:	898b      	ldrh	r3, [r1, #12]
 8011fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ff0:	079d      	lsls	r5, r3, #30
 8011ff2:	4606      	mov	r6, r0
 8011ff4:	460c      	mov	r4, r1
 8011ff6:	d507      	bpl.n	8012008 <__smakebuf_r+0x1c>
 8011ff8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ffc:	6023      	str	r3, [r4, #0]
 8011ffe:	6123      	str	r3, [r4, #16]
 8012000:	2301      	movs	r3, #1
 8012002:	6163      	str	r3, [r4, #20]
 8012004:	b003      	add	sp, #12
 8012006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012008:	ab01      	add	r3, sp, #4
 801200a:	466a      	mov	r2, sp
 801200c:	f7ff ffc8 	bl	8011fa0 <__swhatbuf_r>
 8012010:	9f00      	ldr	r7, [sp, #0]
 8012012:	4605      	mov	r5, r0
 8012014:	4639      	mov	r1, r7
 8012016:	4630      	mov	r0, r6
 8012018:	f7fe f8c2 	bl	80101a0 <_malloc_r>
 801201c:	b948      	cbnz	r0, 8012032 <__smakebuf_r+0x46>
 801201e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012022:	059a      	lsls	r2, r3, #22
 8012024:	d4ee      	bmi.n	8012004 <__smakebuf_r+0x18>
 8012026:	f023 0303 	bic.w	r3, r3, #3
 801202a:	f043 0302 	orr.w	r3, r3, #2
 801202e:	81a3      	strh	r3, [r4, #12]
 8012030:	e7e2      	b.n	8011ff8 <__smakebuf_r+0xc>
 8012032:	89a3      	ldrh	r3, [r4, #12]
 8012034:	6020      	str	r0, [r4, #0]
 8012036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801203a:	81a3      	strh	r3, [r4, #12]
 801203c:	9b01      	ldr	r3, [sp, #4]
 801203e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012042:	b15b      	cbz	r3, 801205c <__smakebuf_r+0x70>
 8012044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012048:	4630      	mov	r0, r6
 801204a:	f000 f849 	bl	80120e0 <_isatty_r>
 801204e:	b128      	cbz	r0, 801205c <__smakebuf_r+0x70>
 8012050:	89a3      	ldrh	r3, [r4, #12]
 8012052:	f023 0303 	bic.w	r3, r3, #3
 8012056:	f043 0301 	orr.w	r3, r3, #1
 801205a:	81a3      	strh	r3, [r4, #12]
 801205c:	89a3      	ldrh	r3, [r4, #12]
 801205e:	431d      	orrs	r5, r3
 8012060:	81a5      	strh	r5, [r4, #12]
 8012062:	e7cf      	b.n	8012004 <__smakebuf_r+0x18>

08012064 <memmove>:
 8012064:	4288      	cmp	r0, r1
 8012066:	b510      	push	{r4, lr}
 8012068:	eb01 0402 	add.w	r4, r1, r2
 801206c:	d902      	bls.n	8012074 <memmove+0x10>
 801206e:	4284      	cmp	r4, r0
 8012070:	4623      	mov	r3, r4
 8012072:	d807      	bhi.n	8012084 <memmove+0x20>
 8012074:	1e43      	subs	r3, r0, #1
 8012076:	42a1      	cmp	r1, r4
 8012078:	d008      	beq.n	801208c <memmove+0x28>
 801207a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801207e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012082:	e7f8      	b.n	8012076 <memmove+0x12>
 8012084:	4402      	add	r2, r0
 8012086:	4601      	mov	r1, r0
 8012088:	428a      	cmp	r2, r1
 801208a:	d100      	bne.n	801208e <memmove+0x2a>
 801208c:	bd10      	pop	{r4, pc}
 801208e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012096:	e7f7      	b.n	8012088 <memmove+0x24>

08012098 <strncmp>:
 8012098:	b510      	push	{r4, lr}
 801209a:	b16a      	cbz	r2, 80120b8 <strncmp+0x20>
 801209c:	3901      	subs	r1, #1
 801209e:	1884      	adds	r4, r0, r2
 80120a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d103      	bne.n	80120b4 <strncmp+0x1c>
 80120ac:	42a0      	cmp	r0, r4
 80120ae:	d001      	beq.n	80120b4 <strncmp+0x1c>
 80120b0:	2a00      	cmp	r2, #0
 80120b2:	d1f5      	bne.n	80120a0 <strncmp+0x8>
 80120b4:	1ad0      	subs	r0, r2, r3
 80120b6:	bd10      	pop	{r4, pc}
 80120b8:	4610      	mov	r0, r2
 80120ba:	e7fc      	b.n	80120b6 <strncmp+0x1e>

080120bc <_fstat_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	4d07      	ldr	r5, [pc, #28]	@ (80120dc <_fstat_r+0x20>)
 80120c0:	2300      	movs	r3, #0
 80120c2:	4604      	mov	r4, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	4611      	mov	r1, r2
 80120c8:	602b      	str	r3, [r5, #0]
 80120ca:	f7ef ff41 	bl	8001f50 <_fstat>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	d102      	bne.n	80120d8 <_fstat_r+0x1c>
 80120d2:	682b      	ldr	r3, [r5, #0]
 80120d4:	b103      	cbz	r3, 80120d8 <_fstat_r+0x1c>
 80120d6:	6023      	str	r3, [r4, #0]
 80120d8:	bd38      	pop	{r3, r4, r5, pc}
 80120da:	bf00      	nop
 80120dc:	2000240c 	.word	0x2000240c

080120e0 <_isatty_r>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4d06      	ldr	r5, [pc, #24]	@ (80120fc <_isatty_r+0x1c>)
 80120e4:	2300      	movs	r3, #0
 80120e6:	4604      	mov	r4, r0
 80120e8:	4608      	mov	r0, r1
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	f7ef ff40 	bl	8001f70 <_isatty>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d102      	bne.n	80120fa <_isatty_r+0x1a>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	b103      	cbz	r3, 80120fa <_isatty_r+0x1a>
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	bd38      	pop	{r3, r4, r5, pc}
 80120fc:	2000240c 	.word	0x2000240c

08012100 <_sbrk_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	4d06      	ldr	r5, [pc, #24]	@ (801211c <_sbrk_r+0x1c>)
 8012104:	2300      	movs	r3, #0
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	602b      	str	r3, [r5, #0]
 801210c:	f000 fdce 	bl	8012cac <_sbrk>
 8012110:	1c43      	adds	r3, r0, #1
 8012112:	d102      	bne.n	801211a <_sbrk_r+0x1a>
 8012114:	682b      	ldr	r3, [r5, #0]
 8012116:	b103      	cbz	r3, 801211a <_sbrk_r+0x1a>
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	2000240c 	.word	0x2000240c

08012120 <nan>:
 8012120:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012128 <nan+0x8>
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	00000000 	.word	0x00000000
 801212c:	7ff80000 	.word	0x7ff80000

08012130 <__assert_func>:
 8012130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012132:	4614      	mov	r4, r2
 8012134:	461a      	mov	r2, r3
 8012136:	4b09      	ldr	r3, [pc, #36]	@ (801215c <__assert_func+0x2c>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	4605      	mov	r5, r0
 801213c:	68d8      	ldr	r0, [r3, #12]
 801213e:	b14c      	cbz	r4, 8012154 <__assert_func+0x24>
 8012140:	4b07      	ldr	r3, [pc, #28]	@ (8012160 <__assert_func+0x30>)
 8012142:	9100      	str	r1, [sp, #0]
 8012144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012148:	4906      	ldr	r1, [pc, #24]	@ (8012164 <__assert_func+0x34>)
 801214a:	462b      	mov	r3, r5
 801214c:	f000 fba8 	bl	80128a0 <fiprintf>
 8012150:	f000 fbb8 	bl	80128c4 <abort>
 8012154:	4b04      	ldr	r3, [pc, #16]	@ (8012168 <__assert_func+0x38>)
 8012156:	461c      	mov	r4, r3
 8012158:	e7f3      	b.n	8012142 <__assert_func+0x12>
 801215a:	bf00      	nop
 801215c:	20000114 	.word	0x20000114
 8012160:	08013212 	.word	0x08013212
 8012164:	0801321f 	.word	0x0801321f
 8012168:	0801324d 	.word	0x0801324d

0801216c <_calloc_r>:
 801216c:	b570      	push	{r4, r5, r6, lr}
 801216e:	fba1 5402 	umull	r5, r4, r1, r2
 8012172:	b934      	cbnz	r4, 8012182 <_calloc_r+0x16>
 8012174:	4629      	mov	r1, r5
 8012176:	f7fe f813 	bl	80101a0 <_malloc_r>
 801217a:	4606      	mov	r6, r0
 801217c:	b928      	cbnz	r0, 801218a <_calloc_r+0x1e>
 801217e:	4630      	mov	r0, r6
 8012180:	bd70      	pop	{r4, r5, r6, pc}
 8012182:	220c      	movs	r2, #12
 8012184:	6002      	str	r2, [r0, #0]
 8012186:	2600      	movs	r6, #0
 8012188:	e7f9      	b.n	801217e <_calloc_r+0x12>
 801218a:	462a      	mov	r2, r5
 801218c:	4621      	mov	r1, r4
 801218e:	f7fd f8a7 	bl	800f2e0 <memset>
 8012192:	e7f4      	b.n	801217e <_calloc_r+0x12>

08012194 <rshift>:
 8012194:	6903      	ldr	r3, [r0, #16]
 8012196:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801219a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801219e:	ea4f 1261 	mov.w	r2, r1, asr #5
 80121a2:	f100 0414 	add.w	r4, r0, #20
 80121a6:	dd45      	ble.n	8012234 <rshift+0xa0>
 80121a8:	f011 011f 	ands.w	r1, r1, #31
 80121ac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80121b0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80121b4:	d10c      	bne.n	80121d0 <rshift+0x3c>
 80121b6:	f100 0710 	add.w	r7, r0, #16
 80121ba:	4629      	mov	r1, r5
 80121bc:	42b1      	cmp	r1, r6
 80121be:	d334      	bcc.n	801222a <rshift+0x96>
 80121c0:	1a9b      	subs	r3, r3, r2
 80121c2:	009b      	lsls	r3, r3, #2
 80121c4:	1eea      	subs	r2, r5, #3
 80121c6:	4296      	cmp	r6, r2
 80121c8:	bf38      	it	cc
 80121ca:	2300      	movcc	r3, #0
 80121cc:	4423      	add	r3, r4
 80121ce:	e015      	b.n	80121fc <rshift+0x68>
 80121d0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80121d4:	f1c1 0820 	rsb	r8, r1, #32
 80121d8:	40cf      	lsrs	r7, r1
 80121da:	f105 0e04 	add.w	lr, r5, #4
 80121de:	46a1      	mov	r9, r4
 80121e0:	4576      	cmp	r6, lr
 80121e2:	46f4      	mov	ip, lr
 80121e4:	d815      	bhi.n	8012212 <rshift+0x7e>
 80121e6:	1a9a      	subs	r2, r3, r2
 80121e8:	0092      	lsls	r2, r2, #2
 80121ea:	3a04      	subs	r2, #4
 80121ec:	3501      	adds	r5, #1
 80121ee:	42ae      	cmp	r6, r5
 80121f0:	bf38      	it	cc
 80121f2:	2200      	movcc	r2, #0
 80121f4:	18a3      	adds	r3, r4, r2
 80121f6:	50a7      	str	r7, [r4, r2]
 80121f8:	b107      	cbz	r7, 80121fc <rshift+0x68>
 80121fa:	3304      	adds	r3, #4
 80121fc:	1b1a      	subs	r2, r3, r4
 80121fe:	42a3      	cmp	r3, r4
 8012200:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012204:	bf08      	it	eq
 8012206:	2300      	moveq	r3, #0
 8012208:	6102      	str	r2, [r0, #16]
 801220a:	bf08      	it	eq
 801220c:	6143      	streq	r3, [r0, #20]
 801220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012212:	f8dc c000 	ldr.w	ip, [ip]
 8012216:	fa0c fc08 	lsl.w	ip, ip, r8
 801221a:	ea4c 0707 	orr.w	r7, ip, r7
 801221e:	f849 7b04 	str.w	r7, [r9], #4
 8012222:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012226:	40cf      	lsrs	r7, r1
 8012228:	e7da      	b.n	80121e0 <rshift+0x4c>
 801222a:	f851 cb04 	ldr.w	ip, [r1], #4
 801222e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012232:	e7c3      	b.n	80121bc <rshift+0x28>
 8012234:	4623      	mov	r3, r4
 8012236:	e7e1      	b.n	80121fc <rshift+0x68>

08012238 <__hexdig_fun>:
 8012238:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801223c:	2b09      	cmp	r3, #9
 801223e:	d802      	bhi.n	8012246 <__hexdig_fun+0xe>
 8012240:	3820      	subs	r0, #32
 8012242:	b2c0      	uxtb	r0, r0
 8012244:	4770      	bx	lr
 8012246:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801224a:	2b05      	cmp	r3, #5
 801224c:	d801      	bhi.n	8012252 <__hexdig_fun+0x1a>
 801224e:	3847      	subs	r0, #71	@ 0x47
 8012250:	e7f7      	b.n	8012242 <__hexdig_fun+0xa>
 8012252:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8012256:	2b05      	cmp	r3, #5
 8012258:	d801      	bhi.n	801225e <__hexdig_fun+0x26>
 801225a:	3827      	subs	r0, #39	@ 0x27
 801225c:	e7f1      	b.n	8012242 <__hexdig_fun+0xa>
 801225e:	2000      	movs	r0, #0
 8012260:	4770      	bx	lr
	...

08012264 <__gethex>:
 8012264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012268:	b085      	sub	sp, #20
 801226a:	468a      	mov	sl, r1
 801226c:	9302      	str	r3, [sp, #8]
 801226e:	680b      	ldr	r3, [r1, #0]
 8012270:	9001      	str	r0, [sp, #4]
 8012272:	4690      	mov	r8, r2
 8012274:	1c9c      	adds	r4, r3, #2
 8012276:	46a1      	mov	r9, r4
 8012278:	f814 0b01 	ldrb.w	r0, [r4], #1
 801227c:	2830      	cmp	r0, #48	@ 0x30
 801227e:	d0fa      	beq.n	8012276 <__gethex+0x12>
 8012280:	eba9 0303 	sub.w	r3, r9, r3
 8012284:	f1a3 0b02 	sub.w	fp, r3, #2
 8012288:	f7ff ffd6 	bl	8012238 <__hexdig_fun>
 801228c:	4605      	mov	r5, r0
 801228e:	2800      	cmp	r0, #0
 8012290:	d168      	bne.n	8012364 <__gethex+0x100>
 8012292:	49a0      	ldr	r1, [pc, #640]	@ (8012514 <__gethex+0x2b0>)
 8012294:	2201      	movs	r2, #1
 8012296:	4648      	mov	r0, r9
 8012298:	f7ff fefe 	bl	8012098 <strncmp>
 801229c:	4607      	mov	r7, r0
 801229e:	2800      	cmp	r0, #0
 80122a0:	d167      	bne.n	8012372 <__gethex+0x10e>
 80122a2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80122a6:	4626      	mov	r6, r4
 80122a8:	f7ff ffc6 	bl	8012238 <__hexdig_fun>
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d062      	beq.n	8012376 <__gethex+0x112>
 80122b0:	4623      	mov	r3, r4
 80122b2:	7818      	ldrb	r0, [r3, #0]
 80122b4:	2830      	cmp	r0, #48	@ 0x30
 80122b6:	4699      	mov	r9, r3
 80122b8:	f103 0301 	add.w	r3, r3, #1
 80122bc:	d0f9      	beq.n	80122b2 <__gethex+0x4e>
 80122be:	f7ff ffbb 	bl	8012238 <__hexdig_fun>
 80122c2:	fab0 f580 	clz	r5, r0
 80122c6:	096d      	lsrs	r5, r5, #5
 80122c8:	f04f 0b01 	mov.w	fp, #1
 80122cc:	464a      	mov	r2, r9
 80122ce:	4616      	mov	r6, r2
 80122d0:	3201      	adds	r2, #1
 80122d2:	7830      	ldrb	r0, [r6, #0]
 80122d4:	f7ff ffb0 	bl	8012238 <__hexdig_fun>
 80122d8:	2800      	cmp	r0, #0
 80122da:	d1f8      	bne.n	80122ce <__gethex+0x6a>
 80122dc:	498d      	ldr	r1, [pc, #564]	@ (8012514 <__gethex+0x2b0>)
 80122de:	2201      	movs	r2, #1
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff fed9 	bl	8012098 <strncmp>
 80122e6:	2800      	cmp	r0, #0
 80122e8:	d13f      	bne.n	801236a <__gethex+0x106>
 80122ea:	b944      	cbnz	r4, 80122fe <__gethex+0x9a>
 80122ec:	1c74      	adds	r4, r6, #1
 80122ee:	4622      	mov	r2, r4
 80122f0:	4616      	mov	r6, r2
 80122f2:	3201      	adds	r2, #1
 80122f4:	7830      	ldrb	r0, [r6, #0]
 80122f6:	f7ff ff9f 	bl	8012238 <__hexdig_fun>
 80122fa:	2800      	cmp	r0, #0
 80122fc:	d1f8      	bne.n	80122f0 <__gethex+0x8c>
 80122fe:	1ba4      	subs	r4, r4, r6
 8012300:	00a7      	lsls	r7, r4, #2
 8012302:	7833      	ldrb	r3, [r6, #0]
 8012304:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012308:	2b50      	cmp	r3, #80	@ 0x50
 801230a:	d13e      	bne.n	801238a <__gethex+0x126>
 801230c:	7873      	ldrb	r3, [r6, #1]
 801230e:	2b2b      	cmp	r3, #43	@ 0x2b
 8012310:	d033      	beq.n	801237a <__gethex+0x116>
 8012312:	2b2d      	cmp	r3, #45	@ 0x2d
 8012314:	d034      	beq.n	8012380 <__gethex+0x11c>
 8012316:	1c71      	adds	r1, r6, #1
 8012318:	2400      	movs	r4, #0
 801231a:	7808      	ldrb	r0, [r1, #0]
 801231c:	f7ff ff8c 	bl	8012238 <__hexdig_fun>
 8012320:	1e43      	subs	r3, r0, #1
 8012322:	b2db      	uxtb	r3, r3
 8012324:	2b18      	cmp	r3, #24
 8012326:	d830      	bhi.n	801238a <__gethex+0x126>
 8012328:	f1a0 0210 	sub.w	r2, r0, #16
 801232c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012330:	f7ff ff82 	bl	8012238 <__hexdig_fun>
 8012334:	f100 3cff 	add.w	ip, r0, #4294967295
 8012338:	fa5f fc8c 	uxtb.w	ip, ip
 801233c:	f1bc 0f18 	cmp.w	ip, #24
 8012340:	f04f 030a 	mov.w	r3, #10
 8012344:	d91e      	bls.n	8012384 <__gethex+0x120>
 8012346:	b104      	cbz	r4, 801234a <__gethex+0xe6>
 8012348:	4252      	negs	r2, r2
 801234a:	4417      	add	r7, r2
 801234c:	f8ca 1000 	str.w	r1, [sl]
 8012350:	b1ed      	cbz	r5, 801238e <__gethex+0x12a>
 8012352:	f1bb 0f00 	cmp.w	fp, #0
 8012356:	bf0c      	ite	eq
 8012358:	2506      	moveq	r5, #6
 801235a:	2500      	movne	r5, #0
 801235c:	4628      	mov	r0, r5
 801235e:	b005      	add	sp, #20
 8012360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012364:	2500      	movs	r5, #0
 8012366:	462c      	mov	r4, r5
 8012368:	e7b0      	b.n	80122cc <__gethex+0x68>
 801236a:	2c00      	cmp	r4, #0
 801236c:	d1c7      	bne.n	80122fe <__gethex+0x9a>
 801236e:	4627      	mov	r7, r4
 8012370:	e7c7      	b.n	8012302 <__gethex+0x9e>
 8012372:	464e      	mov	r6, r9
 8012374:	462f      	mov	r7, r5
 8012376:	2501      	movs	r5, #1
 8012378:	e7c3      	b.n	8012302 <__gethex+0x9e>
 801237a:	2400      	movs	r4, #0
 801237c:	1cb1      	adds	r1, r6, #2
 801237e:	e7cc      	b.n	801231a <__gethex+0xb6>
 8012380:	2401      	movs	r4, #1
 8012382:	e7fb      	b.n	801237c <__gethex+0x118>
 8012384:	fb03 0002 	mla	r0, r3, r2, r0
 8012388:	e7ce      	b.n	8012328 <__gethex+0xc4>
 801238a:	4631      	mov	r1, r6
 801238c:	e7de      	b.n	801234c <__gethex+0xe8>
 801238e:	eba6 0309 	sub.w	r3, r6, r9
 8012392:	3b01      	subs	r3, #1
 8012394:	4629      	mov	r1, r5
 8012396:	2b07      	cmp	r3, #7
 8012398:	dc0a      	bgt.n	80123b0 <__gethex+0x14c>
 801239a:	9801      	ldr	r0, [sp, #4]
 801239c:	f7fd ff8c 	bl	80102b8 <_Balloc>
 80123a0:	4604      	mov	r4, r0
 80123a2:	b940      	cbnz	r0, 80123b6 <__gethex+0x152>
 80123a4:	4b5c      	ldr	r3, [pc, #368]	@ (8012518 <__gethex+0x2b4>)
 80123a6:	4602      	mov	r2, r0
 80123a8:	21e4      	movs	r1, #228	@ 0xe4
 80123aa:	485c      	ldr	r0, [pc, #368]	@ (801251c <__gethex+0x2b8>)
 80123ac:	f7ff fec0 	bl	8012130 <__assert_func>
 80123b0:	3101      	adds	r1, #1
 80123b2:	105b      	asrs	r3, r3, #1
 80123b4:	e7ef      	b.n	8012396 <__gethex+0x132>
 80123b6:	f100 0a14 	add.w	sl, r0, #20
 80123ba:	2300      	movs	r3, #0
 80123bc:	4655      	mov	r5, sl
 80123be:	469b      	mov	fp, r3
 80123c0:	45b1      	cmp	r9, r6
 80123c2:	d337      	bcc.n	8012434 <__gethex+0x1d0>
 80123c4:	f845 bb04 	str.w	fp, [r5], #4
 80123c8:	eba5 050a 	sub.w	r5, r5, sl
 80123cc:	10ad      	asrs	r5, r5, #2
 80123ce:	6125      	str	r5, [r4, #16]
 80123d0:	4658      	mov	r0, fp
 80123d2:	f7fe f863 	bl	801049c <__hi0bits>
 80123d6:	016d      	lsls	r5, r5, #5
 80123d8:	f8d8 6000 	ldr.w	r6, [r8]
 80123dc:	1a2d      	subs	r5, r5, r0
 80123de:	42b5      	cmp	r5, r6
 80123e0:	dd54      	ble.n	801248c <__gethex+0x228>
 80123e2:	1bad      	subs	r5, r5, r6
 80123e4:	4629      	mov	r1, r5
 80123e6:	4620      	mov	r0, r4
 80123e8:	f7fe fbef 	bl	8010bca <__any_on>
 80123ec:	4681      	mov	r9, r0
 80123ee:	b178      	cbz	r0, 8012410 <__gethex+0x1ac>
 80123f0:	1e6b      	subs	r3, r5, #1
 80123f2:	1159      	asrs	r1, r3, #5
 80123f4:	f003 021f 	and.w	r2, r3, #31
 80123f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80123fc:	f04f 0901 	mov.w	r9, #1
 8012400:	fa09 f202 	lsl.w	r2, r9, r2
 8012404:	420a      	tst	r2, r1
 8012406:	d003      	beq.n	8012410 <__gethex+0x1ac>
 8012408:	454b      	cmp	r3, r9
 801240a:	dc36      	bgt.n	801247a <__gethex+0x216>
 801240c:	f04f 0902 	mov.w	r9, #2
 8012410:	4629      	mov	r1, r5
 8012412:	4620      	mov	r0, r4
 8012414:	f7ff febe 	bl	8012194 <rshift>
 8012418:	442f      	add	r7, r5
 801241a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801241e:	42bb      	cmp	r3, r7
 8012420:	da42      	bge.n	80124a8 <__gethex+0x244>
 8012422:	9801      	ldr	r0, [sp, #4]
 8012424:	4621      	mov	r1, r4
 8012426:	f7fd ff87 	bl	8010338 <_Bfree>
 801242a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801242c:	2300      	movs	r3, #0
 801242e:	6013      	str	r3, [r2, #0]
 8012430:	25a3      	movs	r5, #163	@ 0xa3
 8012432:	e793      	b.n	801235c <__gethex+0xf8>
 8012434:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012438:	2a2e      	cmp	r2, #46	@ 0x2e
 801243a:	d012      	beq.n	8012462 <__gethex+0x1fe>
 801243c:	2b20      	cmp	r3, #32
 801243e:	d104      	bne.n	801244a <__gethex+0x1e6>
 8012440:	f845 bb04 	str.w	fp, [r5], #4
 8012444:	f04f 0b00 	mov.w	fp, #0
 8012448:	465b      	mov	r3, fp
 801244a:	7830      	ldrb	r0, [r6, #0]
 801244c:	9303      	str	r3, [sp, #12]
 801244e:	f7ff fef3 	bl	8012238 <__hexdig_fun>
 8012452:	9b03      	ldr	r3, [sp, #12]
 8012454:	f000 000f 	and.w	r0, r0, #15
 8012458:	4098      	lsls	r0, r3
 801245a:	ea4b 0b00 	orr.w	fp, fp, r0
 801245e:	3304      	adds	r3, #4
 8012460:	e7ae      	b.n	80123c0 <__gethex+0x15c>
 8012462:	45b1      	cmp	r9, r6
 8012464:	d8ea      	bhi.n	801243c <__gethex+0x1d8>
 8012466:	492b      	ldr	r1, [pc, #172]	@ (8012514 <__gethex+0x2b0>)
 8012468:	9303      	str	r3, [sp, #12]
 801246a:	2201      	movs	r2, #1
 801246c:	4630      	mov	r0, r6
 801246e:	f7ff fe13 	bl	8012098 <strncmp>
 8012472:	9b03      	ldr	r3, [sp, #12]
 8012474:	2800      	cmp	r0, #0
 8012476:	d1e1      	bne.n	801243c <__gethex+0x1d8>
 8012478:	e7a2      	b.n	80123c0 <__gethex+0x15c>
 801247a:	1ea9      	subs	r1, r5, #2
 801247c:	4620      	mov	r0, r4
 801247e:	f7fe fba4 	bl	8010bca <__any_on>
 8012482:	2800      	cmp	r0, #0
 8012484:	d0c2      	beq.n	801240c <__gethex+0x1a8>
 8012486:	f04f 0903 	mov.w	r9, #3
 801248a:	e7c1      	b.n	8012410 <__gethex+0x1ac>
 801248c:	da09      	bge.n	80124a2 <__gethex+0x23e>
 801248e:	1b75      	subs	r5, r6, r5
 8012490:	4621      	mov	r1, r4
 8012492:	9801      	ldr	r0, [sp, #4]
 8012494:	462a      	mov	r2, r5
 8012496:	f7fe f95f 	bl	8010758 <__lshift>
 801249a:	1b7f      	subs	r7, r7, r5
 801249c:	4604      	mov	r4, r0
 801249e:	f100 0a14 	add.w	sl, r0, #20
 80124a2:	f04f 0900 	mov.w	r9, #0
 80124a6:	e7b8      	b.n	801241a <__gethex+0x1b6>
 80124a8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80124ac:	42bd      	cmp	r5, r7
 80124ae:	dd6f      	ble.n	8012590 <__gethex+0x32c>
 80124b0:	1bed      	subs	r5, r5, r7
 80124b2:	42ae      	cmp	r6, r5
 80124b4:	dc34      	bgt.n	8012520 <__gethex+0x2bc>
 80124b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80124ba:	2b02      	cmp	r3, #2
 80124bc:	d022      	beq.n	8012504 <__gethex+0x2a0>
 80124be:	2b03      	cmp	r3, #3
 80124c0:	d024      	beq.n	801250c <__gethex+0x2a8>
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d115      	bne.n	80124f2 <__gethex+0x28e>
 80124c6:	42ae      	cmp	r6, r5
 80124c8:	d113      	bne.n	80124f2 <__gethex+0x28e>
 80124ca:	2e01      	cmp	r6, #1
 80124cc:	d10b      	bne.n	80124e6 <__gethex+0x282>
 80124ce:	9a02      	ldr	r2, [sp, #8]
 80124d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	2301      	movs	r3, #1
 80124d8:	6123      	str	r3, [r4, #16]
 80124da:	f8ca 3000 	str.w	r3, [sl]
 80124de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124e0:	2562      	movs	r5, #98	@ 0x62
 80124e2:	601c      	str	r4, [r3, #0]
 80124e4:	e73a      	b.n	801235c <__gethex+0xf8>
 80124e6:	1e71      	subs	r1, r6, #1
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7fe fb6e 	bl	8010bca <__any_on>
 80124ee:	2800      	cmp	r0, #0
 80124f0:	d1ed      	bne.n	80124ce <__gethex+0x26a>
 80124f2:	9801      	ldr	r0, [sp, #4]
 80124f4:	4621      	mov	r1, r4
 80124f6:	f7fd ff1f 	bl	8010338 <_Bfree>
 80124fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80124fc:	2300      	movs	r3, #0
 80124fe:	6013      	str	r3, [r2, #0]
 8012500:	2550      	movs	r5, #80	@ 0x50
 8012502:	e72b      	b.n	801235c <__gethex+0xf8>
 8012504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1f3      	bne.n	80124f2 <__gethex+0x28e>
 801250a:	e7e0      	b.n	80124ce <__gethex+0x26a>
 801250c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801250e:	2b00      	cmp	r3, #0
 8012510:	d1dd      	bne.n	80124ce <__gethex+0x26a>
 8012512:	e7ee      	b.n	80124f2 <__gethex+0x28e>
 8012514:	080131f7 	.word	0x080131f7
 8012518:	0801318d 	.word	0x0801318d
 801251c:	0801324e 	.word	0x0801324e
 8012520:	1e6f      	subs	r7, r5, #1
 8012522:	f1b9 0f00 	cmp.w	r9, #0
 8012526:	d130      	bne.n	801258a <__gethex+0x326>
 8012528:	b127      	cbz	r7, 8012534 <__gethex+0x2d0>
 801252a:	4639      	mov	r1, r7
 801252c:	4620      	mov	r0, r4
 801252e:	f7fe fb4c 	bl	8010bca <__any_on>
 8012532:	4681      	mov	r9, r0
 8012534:	117a      	asrs	r2, r7, #5
 8012536:	2301      	movs	r3, #1
 8012538:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801253c:	f007 071f 	and.w	r7, r7, #31
 8012540:	40bb      	lsls	r3, r7
 8012542:	4213      	tst	r3, r2
 8012544:	4629      	mov	r1, r5
 8012546:	4620      	mov	r0, r4
 8012548:	bf18      	it	ne
 801254a:	f049 0902 	orrne.w	r9, r9, #2
 801254e:	f7ff fe21 	bl	8012194 <rshift>
 8012552:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8012556:	1b76      	subs	r6, r6, r5
 8012558:	2502      	movs	r5, #2
 801255a:	f1b9 0f00 	cmp.w	r9, #0
 801255e:	d047      	beq.n	80125f0 <__gethex+0x38c>
 8012560:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012564:	2b02      	cmp	r3, #2
 8012566:	d015      	beq.n	8012594 <__gethex+0x330>
 8012568:	2b03      	cmp	r3, #3
 801256a:	d017      	beq.n	801259c <__gethex+0x338>
 801256c:	2b01      	cmp	r3, #1
 801256e:	d109      	bne.n	8012584 <__gethex+0x320>
 8012570:	f019 0f02 	tst.w	r9, #2
 8012574:	d006      	beq.n	8012584 <__gethex+0x320>
 8012576:	f8da 3000 	ldr.w	r3, [sl]
 801257a:	ea49 0903 	orr.w	r9, r9, r3
 801257e:	f019 0f01 	tst.w	r9, #1
 8012582:	d10e      	bne.n	80125a2 <__gethex+0x33e>
 8012584:	f045 0510 	orr.w	r5, r5, #16
 8012588:	e032      	b.n	80125f0 <__gethex+0x38c>
 801258a:	f04f 0901 	mov.w	r9, #1
 801258e:	e7d1      	b.n	8012534 <__gethex+0x2d0>
 8012590:	2501      	movs	r5, #1
 8012592:	e7e2      	b.n	801255a <__gethex+0x2f6>
 8012594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012596:	f1c3 0301 	rsb	r3, r3, #1
 801259a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801259c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d0f0      	beq.n	8012584 <__gethex+0x320>
 80125a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80125a6:	f104 0314 	add.w	r3, r4, #20
 80125aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80125ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80125b2:	f04f 0c00 	mov.w	ip, #0
 80125b6:	4618      	mov	r0, r3
 80125b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80125bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80125c0:	d01b      	beq.n	80125fa <__gethex+0x396>
 80125c2:	3201      	adds	r2, #1
 80125c4:	6002      	str	r2, [r0, #0]
 80125c6:	2d02      	cmp	r5, #2
 80125c8:	f104 0314 	add.w	r3, r4, #20
 80125cc:	d13c      	bne.n	8012648 <__gethex+0x3e4>
 80125ce:	f8d8 2000 	ldr.w	r2, [r8]
 80125d2:	3a01      	subs	r2, #1
 80125d4:	42b2      	cmp	r2, r6
 80125d6:	d109      	bne.n	80125ec <__gethex+0x388>
 80125d8:	1171      	asrs	r1, r6, #5
 80125da:	2201      	movs	r2, #1
 80125dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125e0:	f006 061f 	and.w	r6, r6, #31
 80125e4:	fa02 f606 	lsl.w	r6, r2, r6
 80125e8:	421e      	tst	r6, r3
 80125ea:	d13a      	bne.n	8012662 <__gethex+0x3fe>
 80125ec:	f045 0520 	orr.w	r5, r5, #32
 80125f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125f2:	601c      	str	r4, [r3, #0]
 80125f4:	9b02      	ldr	r3, [sp, #8]
 80125f6:	601f      	str	r7, [r3, #0]
 80125f8:	e6b0      	b.n	801235c <__gethex+0xf8>
 80125fa:	4299      	cmp	r1, r3
 80125fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8012600:	d8d9      	bhi.n	80125b6 <__gethex+0x352>
 8012602:	68a3      	ldr	r3, [r4, #8]
 8012604:	459b      	cmp	fp, r3
 8012606:	db17      	blt.n	8012638 <__gethex+0x3d4>
 8012608:	6861      	ldr	r1, [r4, #4]
 801260a:	9801      	ldr	r0, [sp, #4]
 801260c:	3101      	adds	r1, #1
 801260e:	f7fd fe53 	bl	80102b8 <_Balloc>
 8012612:	4681      	mov	r9, r0
 8012614:	b918      	cbnz	r0, 801261e <__gethex+0x3ba>
 8012616:	4b1a      	ldr	r3, [pc, #104]	@ (8012680 <__gethex+0x41c>)
 8012618:	4602      	mov	r2, r0
 801261a:	2184      	movs	r1, #132	@ 0x84
 801261c:	e6c5      	b.n	80123aa <__gethex+0x146>
 801261e:	6922      	ldr	r2, [r4, #16]
 8012620:	3202      	adds	r2, #2
 8012622:	f104 010c 	add.w	r1, r4, #12
 8012626:	0092      	lsls	r2, r2, #2
 8012628:	300c      	adds	r0, #12
 801262a:	f7fc fed8 	bl	800f3de <memcpy>
 801262e:	4621      	mov	r1, r4
 8012630:	9801      	ldr	r0, [sp, #4]
 8012632:	f7fd fe81 	bl	8010338 <_Bfree>
 8012636:	464c      	mov	r4, r9
 8012638:	6923      	ldr	r3, [r4, #16]
 801263a:	1c5a      	adds	r2, r3, #1
 801263c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012640:	6122      	str	r2, [r4, #16]
 8012642:	2201      	movs	r2, #1
 8012644:	615a      	str	r2, [r3, #20]
 8012646:	e7be      	b.n	80125c6 <__gethex+0x362>
 8012648:	6922      	ldr	r2, [r4, #16]
 801264a:	455a      	cmp	r2, fp
 801264c:	dd0b      	ble.n	8012666 <__gethex+0x402>
 801264e:	2101      	movs	r1, #1
 8012650:	4620      	mov	r0, r4
 8012652:	f7ff fd9f 	bl	8012194 <rshift>
 8012656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801265a:	3701      	adds	r7, #1
 801265c:	42bb      	cmp	r3, r7
 801265e:	f6ff aee0 	blt.w	8012422 <__gethex+0x1be>
 8012662:	2501      	movs	r5, #1
 8012664:	e7c2      	b.n	80125ec <__gethex+0x388>
 8012666:	f016 061f 	ands.w	r6, r6, #31
 801266a:	d0fa      	beq.n	8012662 <__gethex+0x3fe>
 801266c:	4453      	add	r3, sl
 801266e:	f1c6 0620 	rsb	r6, r6, #32
 8012672:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012676:	f7fd ff11 	bl	801049c <__hi0bits>
 801267a:	42b0      	cmp	r0, r6
 801267c:	dbe7      	blt.n	801264e <__gethex+0x3ea>
 801267e:	e7f0      	b.n	8012662 <__gethex+0x3fe>
 8012680:	0801318d 	.word	0x0801318d

08012684 <L_shift>:
 8012684:	f1c2 0208 	rsb	r2, r2, #8
 8012688:	0092      	lsls	r2, r2, #2
 801268a:	b570      	push	{r4, r5, r6, lr}
 801268c:	f1c2 0620 	rsb	r6, r2, #32
 8012690:	6843      	ldr	r3, [r0, #4]
 8012692:	6804      	ldr	r4, [r0, #0]
 8012694:	fa03 f506 	lsl.w	r5, r3, r6
 8012698:	432c      	orrs	r4, r5
 801269a:	40d3      	lsrs	r3, r2
 801269c:	6004      	str	r4, [r0, #0]
 801269e:	f840 3f04 	str.w	r3, [r0, #4]!
 80126a2:	4288      	cmp	r0, r1
 80126a4:	d3f4      	bcc.n	8012690 <L_shift+0xc>
 80126a6:	bd70      	pop	{r4, r5, r6, pc}

080126a8 <__match>:
 80126a8:	b530      	push	{r4, r5, lr}
 80126aa:	6803      	ldr	r3, [r0, #0]
 80126ac:	3301      	adds	r3, #1
 80126ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126b2:	b914      	cbnz	r4, 80126ba <__match+0x12>
 80126b4:	6003      	str	r3, [r0, #0]
 80126b6:	2001      	movs	r0, #1
 80126b8:	bd30      	pop	{r4, r5, pc}
 80126ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80126be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80126c2:	2d19      	cmp	r5, #25
 80126c4:	bf98      	it	ls
 80126c6:	3220      	addls	r2, #32
 80126c8:	42a2      	cmp	r2, r4
 80126ca:	d0f0      	beq.n	80126ae <__match+0x6>
 80126cc:	2000      	movs	r0, #0
 80126ce:	e7f3      	b.n	80126b8 <__match+0x10>

080126d0 <__hexnan>:
 80126d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126d4:	680b      	ldr	r3, [r1, #0]
 80126d6:	6801      	ldr	r1, [r0, #0]
 80126d8:	115e      	asrs	r6, r3, #5
 80126da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80126de:	f013 031f 	ands.w	r3, r3, #31
 80126e2:	b087      	sub	sp, #28
 80126e4:	bf18      	it	ne
 80126e6:	3604      	addne	r6, #4
 80126e8:	2500      	movs	r5, #0
 80126ea:	1f37      	subs	r7, r6, #4
 80126ec:	4682      	mov	sl, r0
 80126ee:	4690      	mov	r8, r2
 80126f0:	9301      	str	r3, [sp, #4]
 80126f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80126f6:	46b9      	mov	r9, r7
 80126f8:	463c      	mov	r4, r7
 80126fa:	9502      	str	r5, [sp, #8]
 80126fc:	46ab      	mov	fp, r5
 80126fe:	784a      	ldrb	r2, [r1, #1]
 8012700:	1c4b      	adds	r3, r1, #1
 8012702:	9303      	str	r3, [sp, #12]
 8012704:	b342      	cbz	r2, 8012758 <__hexnan+0x88>
 8012706:	4610      	mov	r0, r2
 8012708:	9105      	str	r1, [sp, #20]
 801270a:	9204      	str	r2, [sp, #16]
 801270c:	f7ff fd94 	bl	8012238 <__hexdig_fun>
 8012710:	2800      	cmp	r0, #0
 8012712:	d151      	bne.n	80127b8 <__hexnan+0xe8>
 8012714:	9a04      	ldr	r2, [sp, #16]
 8012716:	9905      	ldr	r1, [sp, #20]
 8012718:	2a20      	cmp	r2, #32
 801271a:	d818      	bhi.n	801274e <__hexnan+0x7e>
 801271c:	9b02      	ldr	r3, [sp, #8]
 801271e:	459b      	cmp	fp, r3
 8012720:	dd13      	ble.n	801274a <__hexnan+0x7a>
 8012722:	454c      	cmp	r4, r9
 8012724:	d206      	bcs.n	8012734 <__hexnan+0x64>
 8012726:	2d07      	cmp	r5, #7
 8012728:	dc04      	bgt.n	8012734 <__hexnan+0x64>
 801272a:	462a      	mov	r2, r5
 801272c:	4649      	mov	r1, r9
 801272e:	4620      	mov	r0, r4
 8012730:	f7ff ffa8 	bl	8012684 <L_shift>
 8012734:	4544      	cmp	r4, r8
 8012736:	d952      	bls.n	80127de <__hexnan+0x10e>
 8012738:	2300      	movs	r3, #0
 801273a:	f1a4 0904 	sub.w	r9, r4, #4
 801273e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012742:	f8cd b008 	str.w	fp, [sp, #8]
 8012746:	464c      	mov	r4, r9
 8012748:	461d      	mov	r5, r3
 801274a:	9903      	ldr	r1, [sp, #12]
 801274c:	e7d7      	b.n	80126fe <__hexnan+0x2e>
 801274e:	2a29      	cmp	r2, #41	@ 0x29
 8012750:	d157      	bne.n	8012802 <__hexnan+0x132>
 8012752:	3102      	adds	r1, #2
 8012754:	f8ca 1000 	str.w	r1, [sl]
 8012758:	f1bb 0f00 	cmp.w	fp, #0
 801275c:	d051      	beq.n	8012802 <__hexnan+0x132>
 801275e:	454c      	cmp	r4, r9
 8012760:	d206      	bcs.n	8012770 <__hexnan+0xa0>
 8012762:	2d07      	cmp	r5, #7
 8012764:	dc04      	bgt.n	8012770 <__hexnan+0xa0>
 8012766:	462a      	mov	r2, r5
 8012768:	4649      	mov	r1, r9
 801276a:	4620      	mov	r0, r4
 801276c:	f7ff ff8a 	bl	8012684 <L_shift>
 8012770:	4544      	cmp	r4, r8
 8012772:	d936      	bls.n	80127e2 <__hexnan+0x112>
 8012774:	f1a8 0204 	sub.w	r2, r8, #4
 8012778:	4623      	mov	r3, r4
 801277a:	f853 1b04 	ldr.w	r1, [r3], #4
 801277e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012782:	429f      	cmp	r7, r3
 8012784:	d2f9      	bcs.n	801277a <__hexnan+0xaa>
 8012786:	1b3b      	subs	r3, r7, r4
 8012788:	f023 0303 	bic.w	r3, r3, #3
 801278c:	3304      	adds	r3, #4
 801278e:	3401      	adds	r4, #1
 8012790:	3e03      	subs	r6, #3
 8012792:	42b4      	cmp	r4, r6
 8012794:	bf88      	it	hi
 8012796:	2304      	movhi	r3, #4
 8012798:	4443      	add	r3, r8
 801279a:	2200      	movs	r2, #0
 801279c:	f843 2b04 	str.w	r2, [r3], #4
 80127a0:	429f      	cmp	r7, r3
 80127a2:	d2fb      	bcs.n	801279c <__hexnan+0xcc>
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	b91b      	cbnz	r3, 80127b0 <__hexnan+0xe0>
 80127a8:	4547      	cmp	r7, r8
 80127aa:	d128      	bne.n	80127fe <__hexnan+0x12e>
 80127ac:	2301      	movs	r3, #1
 80127ae:	603b      	str	r3, [r7, #0]
 80127b0:	2005      	movs	r0, #5
 80127b2:	b007      	add	sp, #28
 80127b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127b8:	3501      	adds	r5, #1
 80127ba:	2d08      	cmp	r5, #8
 80127bc:	f10b 0b01 	add.w	fp, fp, #1
 80127c0:	dd06      	ble.n	80127d0 <__hexnan+0x100>
 80127c2:	4544      	cmp	r4, r8
 80127c4:	d9c1      	bls.n	801274a <__hexnan+0x7a>
 80127c6:	2300      	movs	r3, #0
 80127c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80127cc:	2501      	movs	r5, #1
 80127ce:	3c04      	subs	r4, #4
 80127d0:	6822      	ldr	r2, [r4, #0]
 80127d2:	f000 000f 	and.w	r0, r0, #15
 80127d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80127da:	6020      	str	r0, [r4, #0]
 80127dc:	e7b5      	b.n	801274a <__hexnan+0x7a>
 80127de:	2508      	movs	r5, #8
 80127e0:	e7b3      	b.n	801274a <__hexnan+0x7a>
 80127e2:	9b01      	ldr	r3, [sp, #4]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d0dd      	beq.n	80127a4 <__hexnan+0xd4>
 80127e8:	f1c3 0320 	rsb	r3, r3, #32
 80127ec:	f04f 32ff 	mov.w	r2, #4294967295
 80127f0:	40da      	lsrs	r2, r3
 80127f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80127f6:	4013      	ands	r3, r2
 80127f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80127fc:	e7d2      	b.n	80127a4 <__hexnan+0xd4>
 80127fe:	3f04      	subs	r7, #4
 8012800:	e7d0      	b.n	80127a4 <__hexnan+0xd4>
 8012802:	2004      	movs	r0, #4
 8012804:	e7d5      	b.n	80127b2 <__hexnan+0xe2>

08012806 <__ascii_mbtowc>:
 8012806:	b082      	sub	sp, #8
 8012808:	b901      	cbnz	r1, 801280c <__ascii_mbtowc+0x6>
 801280a:	a901      	add	r1, sp, #4
 801280c:	b142      	cbz	r2, 8012820 <__ascii_mbtowc+0x1a>
 801280e:	b14b      	cbz	r3, 8012824 <__ascii_mbtowc+0x1e>
 8012810:	7813      	ldrb	r3, [r2, #0]
 8012812:	600b      	str	r3, [r1, #0]
 8012814:	7812      	ldrb	r2, [r2, #0]
 8012816:	1e10      	subs	r0, r2, #0
 8012818:	bf18      	it	ne
 801281a:	2001      	movne	r0, #1
 801281c:	b002      	add	sp, #8
 801281e:	4770      	bx	lr
 8012820:	4610      	mov	r0, r2
 8012822:	e7fb      	b.n	801281c <__ascii_mbtowc+0x16>
 8012824:	f06f 0001 	mvn.w	r0, #1
 8012828:	e7f8      	b.n	801281c <__ascii_mbtowc+0x16>

0801282a <_realloc_r>:
 801282a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801282e:	4607      	mov	r7, r0
 8012830:	4614      	mov	r4, r2
 8012832:	460d      	mov	r5, r1
 8012834:	b921      	cbnz	r1, 8012840 <_realloc_r+0x16>
 8012836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801283a:	4611      	mov	r1, r2
 801283c:	f7fd bcb0 	b.w	80101a0 <_malloc_r>
 8012840:	b92a      	cbnz	r2, 801284e <_realloc_r+0x24>
 8012842:	f7fd fc39 	bl	80100b8 <_free_r>
 8012846:	4625      	mov	r5, r4
 8012848:	4628      	mov	r0, r5
 801284a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801284e:	f000 f840 	bl	80128d2 <_malloc_usable_size_r>
 8012852:	4284      	cmp	r4, r0
 8012854:	4606      	mov	r6, r0
 8012856:	d802      	bhi.n	801285e <_realloc_r+0x34>
 8012858:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801285c:	d8f4      	bhi.n	8012848 <_realloc_r+0x1e>
 801285e:	4621      	mov	r1, r4
 8012860:	4638      	mov	r0, r7
 8012862:	f7fd fc9d 	bl	80101a0 <_malloc_r>
 8012866:	4680      	mov	r8, r0
 8012868:	b908      	cbnz	r0, 801286e <_realloc_r+0x44>
 801286a:	4645      	mov	r5, r8
 801286c:	e7ec      	b.n	8012848 <_realloc_r+0x1e>
 801286e:	42b4      	cmp	r4, r6
 8012870:	4622      	mov	r2, r4
 8012872:	4629      	mov	r1, r5
 8012874:	bf28      	it	cs
 8012876:	4632      	movcs	r2, r6
 8012878:	f7fc fdb1 	bl	800f3de <memcpy>
 801287c:	4629      	mov	r1, r5
 801287e:	4638      	mov	r0, r7
 8012880:	f7fd fc1a 	bl	80100b8 <_free_r>
 8012884:	e7f1      	b.n	801286a <_realloc_r+0x40>

08012886 <__ascii_wctomb>:
 8012886:	4603      	mov	r3, r0
 8012888:	4608      	mov	r0, r1
 801288a:	b141      	cbz	r1, 801289e <__ascii_wctomb+0x18>
 801288c:	2aff      	cmp	r2, #255	@ 0xff
 801288e:	d904      	bls.n	801289a <__ascii_wctomb+0x14>
 8012890:	228a      	movs	r2, #138	@ 0x8a
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	4770      	bx	lr
 801289a:	700a      	strb	r2, [r1, #0]
 801289c:	2001      	movs	r0, #1
 801289e:	4770      	bx	lr

080128a0 <fiprintf>:
 80128a0:	b40e      	push	{r1, r2, r3}
 80128a2:	b503      	push	{r0, r1, lr}
 80128a4:	4601      	mov	r1, r0
 80128a6:	ab03      	add	r3, sp, #12
 80128a8:	4805      	ldr	r0, [pc, #20]	@ (80128c0 <fiprintf+0x20>)
 80128aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ae:	6800      	ldr	r0, [r0, #0]
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	f7ff f9b1 	bl	8011c18 <_vfiprintf_r>
 80128b6:	b002      	add	sp, #8
 80128b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128bc:	b003      	add	sp, #12
 80128be:	4770      	bx	lr
 80128c0:	20000114 	.word	0x20000114

080128c4 <abort>:
 80128c4:	b508      	push	{r3, lr}
 80128c6:	2006      	movs	r0, #6
 80128c8:	f000 f834 	bl	8012934 <raise>
 80128cc:	2001      	movs	r0, #1
 80128ce:	f7ef faef 	bl	8001eb0 <_exit>

080128d2 <_malloc_usable_size_r>:
 80128d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128d6:	1f18      	subs	r0, r3, #4
 80128d8:	2b00      	cmp	r3, #0
 80128da:	bfbc      	itt	lt
 80128dc:	580b      	ldrlt	r3, [r1, r0]
 80128de:	18c0      	addlt	r0, r0, r3
 80128e0:	4770      	bx	lr

080128e2 <_raise_r>:
 80128e2:	291f      	cmp	r1, #31
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	4605      	mov	r5, r0
 80128e8:	460c      	mov	r4, r1
 80128ea:	d904      	bls.n	80128f6 <_raise_r+0x14>
 80128ec:	2316      	movs	r3, #22
 80128ee:	6003      	str	r3, [r0, #0]
 80128f0:	f04f 30ff 	mov.w	r0, #4294967295
 80128f4:	bd38      	pop	{r3, r4, r5, pc}
 80128f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80128f8:	b112      	cbz	r2, 8012900 <_raise_r+0x1e>
 80128fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80128fe:	b94b      	cbnz	r3, 8012914 <_raise_r+0x32>
 8012900:	4628      	mov	r0, r5
 8012902:	f000 f831 	bl	8012968 <_getpid_r>
 8012906:	4622      	mov	r2, r4
 8012908:	4601      	mov	r1, r0
 801290a:	4628      	mov	r0, r5
 801290c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012910:	f000 b818 	b.w	8012944 <_kill_r>
 8012914:	2b01      	cmp	r3, #1
 8012916:	d00a      	beq.n	801292e <_raise_r+0x4c>
 8012918:	1c59      	adds	r1, r3, #1
 801291a:	d103      	bne.n	8012924 <_raise_r+0x42>
 801291c:	2316      	movs	r3, #22
 801291e:	6003      	str	r3, [r0, #0]
 8012920:	2001      	movs	r0, #1
 8012922:	e7e7      	b.n	80128f4 <_raise_r+0x12>
 8012924:	2100      	movs	r1, #0
 8012926:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801292a:	4620      	mov	r0, r4
 801292c:	4798      	blx	r3
 801292e:	2000      	movs	r0, #0
 8012930:	e7e0      	b.n	80128f4 <_raise_r+0x12>
	...

08012934 <raise>:
 8012934:	4b02      	ldr	r3, [pc, #8]	@ (8012940 <raise+0xc>)
 8012936:	4601      	mov	r1, r0
 8012938:	6818      	ldr	r0, [r3, #0]
 801293a:	f7ff bfd2 	b.w	80128e2 <_raise_r>
 801293e:	bf00      	nop
 8012940:	20000114 	.word	0x20000114

08012944 <_kill_r>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4d07      	ldr	r5, [pc, #28]	@ (8012964 <_kill_r+0x20>)
 8012948:	2300      	movs	r3, #0
 801294a:	4604      	mov	r4, r0
 801294c:	4608      	mov	r0, r1
 801294e:	4611      	mov	r1, r2
 8012950:	602b      	str	r3, [r5, #0]
 8012952:	f7ef fa9d 	bl	8001e90 <_kill>
 8012956:	1c43      	adds	r3, r0, #1
 8012958:	d102      	bne.n	8012960 <_kill_r+0x1c>
 801295a:	682b      	ldr	r3, [r5, #0]
 801295c:	b103      	cbz	r3, 8012960 <_kill_r+0x1c>
 801295e:	6023      	str	r3, [r4, #0]
 8012960:	bd38      	pop	{r3, r4, r5, pc}
 8012962:	bf00      	nop
 8012964:	2000240c 	.word	0x2000240c

08012968 <_getpid_r>:
 8012968:	f7ef ba8a 	b.w	8001e80 <_getpid>

0801296c <atan2f>:
 801296c:	f000 b822 	b.w	80129b4 <__ieee754_atan2f>

08012970 <sqrtf>:
 8012970:	b508      	push	{r3, lr}
 8012972:	ed2d 8b02 	vpush	{d8}
 8012976:	eeb0 8a40 	vmov.f32	s16, s0
 801297a:	f000 f817 	bl	80129ac <__ieee754_sqrtf>
 801297e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012986:	d60c      	bvs.n	80129a2 <sqrtf+0x32>
 8012988:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80129a8 <sqrtf+0x38>
 801298c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012994:	d505      	bpl.n	80129a2 <sqrtf+0x32>
 8012996:	f7fc fcf5 	bl	800f384 <__errno>
 801299a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801299e:	2321      	movs	r3, #33	@ 0x21
 80129a0:	6003      	str	r3, [r0, #0]
 80129a2:	ecbd 8b02 	vpop	{d8}
 80129a6:	bd08      	pop	{r3, pc}
 80129a8:	00000000 	.word	0x00000000

080129ac <__ieee754_sqrtf>:
 80129ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80129b0:	4770      	bx	lr
	...

080129b4 <__ieee754_atan2f>:
 80129b4:	ee10 2a90 	vmov	r2, s1
 80129b8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80129bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80129c0:	b510      	push	{r4, lr}
 80129c2:	eef0 7a40 	vmov.f32	s15, s0
 80129c6:	d806      	bhi.n	80129d6 <__ieee754_atan2f+0x22>
 80129c8:	ee10 0a10 	vmov	r0, s0
 80129cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80129d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80129d4:	d904      	bls.n	80129e0 <__ieee754_atan2f+0x2c>
 80129d6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80129da:	eeb0 0a67 	vmov.f32	s0, s15
 80129de:	bd10      	pop	{r4, pc}
 80129e0:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80129e4:	d103      	bne.n	80129ee <__ieee754_atan2f+0x3a>
 80129e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129ea:	f000 b883 	b.w	8012af4 <atanf>
 80129ee:	1794      	asrs	r4, r2, #30
 80129f0:	f004 0402 	and.w	r4, r4, #2
 80129f4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80129f8:	b943      	cbnz	r3, 8012a0c <__ieee754_atan2f+0x58>
 80129fa:	2c02      	cmp	r4, #2
 80129fc:	d05e      	beq.n	8012abc <__ieee754_atan2f+0x108>
 80129fe:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012ad0 <__ieee754_atan2f+0x11c>
 8012a02:	2c03      	cmp	r4, #3
 8012a04:	bf08      	it	eq
 8012a06:	eef0 7a47 	vmoveq.f32	s15, s14
 8012a0a:	e7e6      	b.n	80129da <__ieee754_atan2f+0x26>
 8012a0c:	b941      	cbnz	r1, 8012a20 <__ieee754_atan2f+0x6c>
 8012a0e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8012ad4 <__ieee754_atan2f+0x120>
 8012a12:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012ad8 <__ieee754_atan2f+0x124>
 8012a16:	2800      	cmp	r0, #0
 8012a18:	bfa8      	it	ge
 8012a1a:	eef0 7a47 	vmovge.f32	s15, s14
 8012a1e:	e7dc      	b.n	80129da <__ieee754_atan2f+0x26>
 8012a20:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012a24:	d110      	bne.n	8012a48 <__ieee754_atan2f+0x94>
 8012a26:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012a2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012a2e:	d107      	bne.n	8012a40 <__ieee754_atan2f+0x8c>
 8012a30:	2c02      	cmp	r4, #2
 8012a32:	d846      	bhi.n	8012ac2 <__ieee754_atan2f+0x10e>
 8012a34:	4b29      	ldr	r3, [pc, #164]	@ (8012adc <__ieee754_atan2f+0x128>)
 8012a36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012a3a:	edd3 7a00 	vldr	s15, [r3]
 8012a3e:	e7cc      	b.n	80129da <__ieee754_atan2f+0x26>
 8012a40:	2c02      	cmp	r4, #2
 8012a42:	d841      	bhi.n	8012ac8 <__ieee754_atan2f+0x114>
 8012a44:	4b26      	ldr	r3, [pc, #152]	@ (8012ae0 <__ieee754_atan2f+0x12c>)
 8012a46:	e7f6      	b.n	8012a36 <__ieee754_atan2f+0x82>
 8012a48:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012a4c:	d0df      	beq.n	8012a0e <__ieee754_atan2f+0x5a>
 8012a4e:	1a5b      	subs	r3, r3, r1
 8012a50:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8012a54:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8012a58:	da1a      	bge.n	8012a90 <__ieee754_atan2f+0xdc>
 8012a5a:	2a00      	cmp	r2, #0
 8012a5c:	da01      	bge.n	8012a62 <__ieee754_atan2f+0xae>
 8012a5e:	313c      	adds	r1, #60	@ 0x3c
 8012a60:	db19      	blt.n	8012a96 <__ieee754_atan2f+0xe2>
 8012a62:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8012a66:	f000 f919 	bl	8012c9c <fabsf>
 8012a6a:	f000 f843 	bl	8012af4 <atanf>
 8012a6e:	eef0 7a40 	vmov.f32	s15, s0
 8012a72:	2c01      	cmp	r4, #1
 8012a74:	d012      	beq.n	8012a9c <__ieee754_atan2f+0xe8>
 8012a76:	2c02      	cmp	r4, #2
 8012a78:	d017      	beq.n	8012aaa <__ieee754_atan2f+0xf6>
 8012a7a:	2c00      	cmp	r4, #0
 8012a7c:	d0ad      	beq.n	80129da <__ieee754_atan2f+0x26>
 8012a7e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8012ae4 <__ieee754_atan2f+0x130>
 8012a82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a86:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012ae8 <__ieee754_atan2f+0x134>
 8012a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a8e:	e7a4      	b.n	80129da <__ieee754_atan2f+0x26>
 8012a90:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012ad8 <__ieee754_atan2f+0x124>
 8012a94:	e7ed      	b.n	8012a72 <__ieee754_atan2f+0xbe>
 8012a96:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012aec <__ieee754_atan2f+0x138>
 8012a9a:	e7ea      	b.n	8012a72 <__ieee754_atan2f+0xbe>
 8012a9c:	ee17 3a90 	vmov	r3, s15
 8012aa0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012aa4:	ee07 3a90 	vmov	s15, r3
 8012aa8:	e797      	b.n	80129da <__ieee754_atan2f+0x26>
 8012aaa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012ae4 <__ieee754_atan2f+0x130>
 8012aae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012ab2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012ae8 <__ieee754_atan2f+0x134>
 8012ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012aba:	e78e      	b.n	80129da <__ieee754_atan2f+0x26>
 8012abc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012ae8 <__ieee754_atan2f+0x134>
 8012ac0:	e78b      	b.n	80129da <__ieee754_atan2f+0x26>
 8012ac2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012af0 <__ieee754_atan2f+0x13c>
 8012ac6:	e788      	b.n	80129da <__ieee754_atan2f+0x26>
 8012ac8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012aec <__ieee754_atan2f+0x138>
 8012acc:	e785      	b.n	80129da <__ieee754_atan2f+0x26>
 8012ace:	bf00      	nop
 8012ad0:	c0490fdb 	.word	0xc0490fdb
 8012ad4:	bfc90fdb 	.word	0xbfc90fdb
 8012ad8:	3fc90fdb 	.word	0x3fc90fdb
 8012adc:	08013510 	.word	0x08013510
 8012ae0:	08013504 	.word	0x08013504
 8012ae4:	33bbbd2e 	.word	0x33bbbd2e
 8012ae8:	40490fdb 	.word	0x40490fdb
 8012aec:	00000000 	.word	0x00000000
 8012af0:	3f490fdb 	.word	0x3f490fdb

08012af4 <atanf>:
 8012af4:	b538      	push	{r3, r4, r5, lr}
 8012af6:	ee10 5a10 	vmov	r5, s0
 8012afa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8012afe:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8012b02:	eef0 7a40 	vmov.f32	s15, s0
 8012b06:	d310      	bcc.n	8012b2a <atanf+0x36>
 8012b08:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8012b0c:	d904      	bls.n	8012b18 <atanf+0x24>
 8012b0e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012b12:	eeb0 0a67 	vmov.f32	s0, s15
 8012b16:	bd38      	pop	{r3, r4, r5, pc}
 8012b18:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012c50 <atanf+0x15c>
 8012b1c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012c54 <atanf+0x160>
 8012b20:	2d00      	cmp	r5, #0
 8012b22:	bfc8      	it	gt
 8012b24:	eef0 7a47 	vmovgt.f32	s15, s14
 8012b28:	e7f3      	b.n	8012b12 <atanf+0x1e>
 8012b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8012c58 <atanf+0x164>)
 8012b2c:	429c      	cmp	r4, r3
 8012b2e:	d810      	bhi.n	8012b52 <atanf+0x5e>
 8012b30:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8012b34:	d20a      	bcs.n	8012b4c <atanf+0x58>
 8012b36:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012c5c <atanf+0x168>
 8012b3a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012b42:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b4a:	dce2      	bgt.n	8012b12 <atanf+0x1e>
 8012b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b50:	e013      	b.n	8012b7a <atanf+0x86>
 8012b52:	f000 f8a3 	bl	8012c9c <fabsf>
 8012b56:	4b42      	ldr	r3, [pc, #264]	@ (8012c60 <atanf+0x16c>)
 8012b58:	429c      	cmp	r4, r3
 8012b5a:	d84f      	bhi.n	8012bfc <atanf+0x108>
 8012b5c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012b60:	429c      	cmp	r4, r3
 8012b62:	d841      	bhi.n	8012be8 <atanf+0xf4>
 8012b64:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012b68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012b6c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012b70:	2300      	movs	r3, #0
 8012b72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012b7a:	1c5a      	adds	r2, r3, #1
 8012b7c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012b80:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012c64 <atanf+0x170>
 8012b84:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8012c68 <atanf+0x174>
 8012b88:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8012c6c <atanf+0x178>
 8012b8c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012b90:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012b94:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8012c70 <atanf+0x17c>
 8012b98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012b9c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012c74 <atanf+0x180>
 8012ba0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012ba4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8012c78 <atanf+0x184>
 8012ba8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012bac:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012c7c <atanf+0x188>
 8012bb0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012bb4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8012c80 <atanf+0x18c>
 8012bb8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012bbc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8012c84 <atanf+0x190>
 8012bc0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012bc4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8012c88 <atanf+0x194>
 8012bc8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012bcc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8012c8c <atanf+0x198>
 8012bd0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012bd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012bd8:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012be0:	d121      	bne.n	8012c26 <atanf+0x132>
 8012be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012be6:	e794      	b.n	8012b12 <atanf+0x1e>
 8012be8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012bec:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012bf0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012bfa:	e7be      	b.n	8012b7a <atanf+0x86>
 8012bfc:	4b24      	ldr	r3, [pc, #144]	@ (8012c90 <atanf+0x19c>)
 8012bfe:	429c      	cmp	r4, r3
 8012c00:	d80b      	bhi.n	8012c1a <atanf+0x126>
 8012c02:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8012c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012c0a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012c0e:	2302      	movs	r3, #2
 8012c10:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c18:	e7af      	b.n	8012b7a <atanf+0x86>
 8012c1a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012c1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012c22:	2303      	movs	r3, #3
 8012c24:	e7a9      	b.n	8012b7a <atanf+0x86>
 8012c26:	4a1b      	ldr	r2, [pc, #108]	@ (8012c94 <atanf+0x1a0>)
 8012c28:	491b      	ldr	r1, [pc, #108]	@ (8012c98 <atanf+0x1a4>)
 8012c2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012c2e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012c32:	edd3 6a00 	vldr	s13, [r3]
 8012c36:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012c3a:	2d00      	cmp	r5, #0
 8012c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c40:	edd2 7a00 	vldr	s15, [r2]
 8012c44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c48:	bfb8      	it	lt
 8012c4a:	eef1 7a67 	vneglt.f32	s15, s15
 8012c4e:	e760      	b.n	8012b12 <atanf+0x1e>
 8012c50:	bfc90fdb 	.word	0xbfc90fdb
 8012c54:	3fc90fdb 	.word	0x3fc90fdb
 8012c58:	3edfffff 	.word	0x3edfffff
 8012c5c:	7149f2ca 	.word	0x7149f2ca
 8012c60:	3f97ffff 	.word	0x3f97ffff
 8012c64:	3c8569d7 	.word	0x3c8569d7
 8012c68:	3d4bda59 	.word	0x3d4bda59
 8012c6c:	bd6ef16b 	.word	0xbd6ef16b
 8012c70:	3d886b35 	.word	0x3d886b35
 8012c74:	3dba2e6e 	.word	0x3dba2e6e
 8012c78:	3e124925 	.word	0x3e124925
 8012c7c:	3eaaaaab 	.word	0x3eaaaaab
 8012c80:	bd15a221 	.word	0xbd15a221
 8012c84:	bd9d8795 	.word	0xbd9d8795
 8012c88:	bde38e38 	.word	0xbde38e38
 8012c8c:	be4ccccd 	.word	0xbe4ccccd
 8012c90:	401bffff 	.word	0x401bffff
 8012c94:	0801352c 	.word	0x0801352c
 8012c98:	0801351c 	.word	0x0801351c

08012c9c <fabsf>:
 8012c9c:	ee10 3a10 	vmov	r3, s0
 8012ca0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ca4:	ee00 3a10 	vmov	s0, r3
 8012ca8:	4770      	bx	lr
	...

08012cac <_sbrk>:
 8012cac:	4a04      	ldr	r2, [pc, #16]	@ (8012cc0 <_sbrk+0x14>)
 8012cae:	6811      	ldr	r1, [r2, #0]
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	b909      	cbnz	r1, 8012cb8 <_sbrk+0xc>
 8012cb4:	4903      	ldr	r1, [pc, #12]	@ (8012cc4 <_sbrk+0x18>)
 8012cb6:	6011      	str	r1, [r2, #0]
 8012cb8:	6810      	ldr	r0, [r2, #0]
 8012cba:	4403      	add	r3, r0
 8012cbc:	6013      	str	r3, [r2, #0]
 8012cbe:	4770      	bx	lr
 8012cc0:	2000241c 	.word	0x2000241c
 8012cc4:	20002420 	.word	0x20002420

08012cc8 <_init>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr

08012cd4 <_fini>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	bf00      	nop
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr
