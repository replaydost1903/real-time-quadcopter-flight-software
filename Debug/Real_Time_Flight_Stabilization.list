
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800ca50  0800ca50  0000da50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d194  0800d194  0000f1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d194  0800d194  0000e194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d19c  0800d19c  0000f1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d19c  0800d19c  0000e19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1a0  0800d1a0  0000e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800d1a4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1e0  2**0
                  CONTENTS
 10 .bss          00000484  200001e0  200001e0  0000f1e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000664  20000664  0000f1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b74b  00000000  00000000  0000f210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c8  00000000  00000000  0002a95b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  0002db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013c5  00000000  00000000  0002f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024401  00000000  00000000  000307d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b653  00000000  00000000  00054bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfee8  00000000  00000000  00070229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150111  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008114  00000000  00000000  00150154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  00158268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ca38 	.word	0x0800ca38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800ca38 	.word	0x0800ca38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fc6a 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f82a 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f94c 	bl	80012c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001030:	f000 f890 	bl	8001154 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001034:	f000 f8bc 	bl	80011b0 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001038:	f000 f8e8 	bl	800120c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800103c:	f000 f91a 	bl	8001274 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /*!< BMI160 Init Process >!*/
  Complementary_Init(&bmi160_comp, 0.7f, 50.0f);
 8001040:	ed9f 1b07 	vldr	d1, [pc, #28]	@ 8001060 <main+0x40>
 8001044:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8001068 <main+0x48>
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <main+0x50>)
 800104a:	f003 fb93 	bl	8004774 <Complementary_Init>
  init_bmi160_sensor_driver_interface(&bmi160);
 800104e:	4809      	ldr	r0, [pc, #36]	@ (8001074 <main+0x54>)
 8001050:	f004 ffc2 	bl	8005fd8 <init_bmi160_sensor_driver_interface>

  /*!< BMP388 Init Process >!*/
  init_bmp388_sensor_driver_interface(&bmp388,&bmp388_intf);
 8001054:	4908      	ldr	r1, [pc, #32]	@ (8001078 <main+0x58>)
 8001056:	4809      	ldr	r0, [pc, #36]	@ (800107c <main+0x5c>)
 8001058:	f006 fcfa 	bl	8007a50 <init_bmp388_sensor_driver_interface>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <main+0x3c>
 8001060:	00000000 	.word	0x00000000
 8001064:	40490000 	.word	0x40490000
 8001068:	60000000 	.word	0x60000000
 800106c:	3fe66666 	.word	0x3fe66666
 8001070:	20000360 	.word	0x20000360
 8001074:	20000334 	.word	0x20000334
 8001078:	20000000 	.word	0x20000000
 800107c:	20000388 	.word	0x20000388

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	@ 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	@ 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f008 f97c 	bl	800938c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b28      	ldr	r3, [pc, #160]	@ (800114c <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <SystemClock_Config+0xcc>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b22      	ldr	r3, [pc, #136]	@ (8001150 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a21      	ldr	r2, [pc, #132]	@ (8001150 <SystemClock_Config+0xd0>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001150 <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010f4:	23a8      	movs	r3, #168	@ 0xa8
 80010f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f001 ff1b 	bl	8002f40 <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001110:	f000 f970 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001120:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	2105      	movs	r1, #5
 8001132:	4618      	mov	r0, r3
 8001134:	f002 f97c 	bl	8003430 <HAL_RCC_ClockConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800113e:	f000 f959 	bl	80013f4 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	@ (80011a8 <MX_I2C1_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <MX_I2C1_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_I2C1_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_I2C1_Init+0x50>)
 8001192:	f000 feb1 	bl	8001ef8 <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 f92a 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001fc 	.word	0x200001fc
 80011a8:	40005400 	.word	0x40005400
 80011ac:	00061a80 	.word	0x00061a80

080011b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011b6:	4a13      	ldr	r2, [pc, #76]	@ (8001204 <MX_I2C2_Init+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <MX_I2C2_Init+0x58>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011da:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_I2C2_Init+0x50>)
 80011ee:	f000 fe83 	bl	8001ef8 <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f000 f8fc 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000250 	.word	0x20000250
 8001204:	40005800 	.word	0x40005800
 8001208:	00061a80 	.word	0x00061a80

0800120c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <MX_TIM6_Init+0x60>)
 800121c:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <MX_TIM6_Init+0x64>)
 800121e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_TIM6_Init+0x60>)
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_TIM6_Init+0x60>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_TIM6_Init+0x60>)
 800122e:	22a7      	movs	r2, #167	@ 0xa7
 8001230:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_TIM6_Init+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001238:	480c      	ldr	r0, [pc, #48]	@ (800126c <MX_TIM6_Init+0x60>)
 800123a:	f002 fb4b 	bl	80038d4 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001244:	f000 f8d6 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_TIM6_Init+0x60>)
 8001256:	f002 fdf1 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001260:	f000 f8c8 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	200002a4 	.word	0x200002a4
 8001270:	40001000 	.word	0x40001000

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_USART2_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART2_UART_Init+0x4c>)
 80012ac:	f002 fe56 	bl	8003f5c <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 f89d 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002ec 	.word	0x200002ec
 80012c4:	40004400 	.word	0x40004400

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	@ 0x28
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <MX_GPIO_Init+0xd0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001398 <MX_GPIO_Init+0xd0>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b1f      	ldr	r3, [pc, #124]	@ (8001398 <MX_GPIO_Init+0xd0>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	@ (8001398 <MX_GPIO_Init+0xd0>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <MX_GPIO_Init+0xd0>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <MX_GPIO_Init+0xd4>)
 8001356:	f000 fdb5 	bl	8001ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <MX_GPIO_Init+0xd8>)
 800136e:	f000 fc0d 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001372:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_GPIO_Init+0xd4>)
 800138c:	f000 fbfe 	bl	8001b8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40020000 	.word	0x40020000

080013a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	f04f 33ff 	mov.w	r3, #4294967295
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	4804      	ldr	r0, [pc, #16]	@ (80013cc <_write+0x28>)
 80013bc:	f002 fe1e 	bl	8003ffc <HAL_UART_Transmit>
  return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200002ec 	.word	0x200002ec

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013e2:	f000 faad 	bl	8001940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40001400 	.word	0x40001400

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_MspInit+0x58>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	4a12      	ldr	r2, [pc, #72]	@ (8001458 <HAL_MspInit+0x58>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001414:	6453      	str	r3, [r2, #68]	@ 0x44
 8001416:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_MspInit+0x58>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b0c      	ldr	r3, [pc, #48]	@ (8001458 <HAL_MspInit+0x58>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_MspInit+0x58>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b09      	ldr	r3, [pc, #36]	@ (8001458 <HAL_MspInit+0x58>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2005      	movs	r0, #5
 8001444:	f000 fb78 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001448:	2005      	movs	r0, #5
 800144a:	f000 fb91 	bl	8001b70 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	@ 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 031c 	add.w	r3, r7, #28
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <HAL_I2C_MspInit+0xec>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12d      	bne.n	80014da <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	4b32      	ldr	r3, [pc, #200]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a31      	ldr	r2, [pc, #196]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 800149a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ac:	2304      	movs	r3, #4
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4826      	ldr	r0, [pc, #152]	@ (8001550 <HAL_I2C_MspInit+0xf4>)
 80014b8:	f000 fb68 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	4b22      	ldr	r3, [pc, #136]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80014cc:	4b1f      	ldr	r3, [pc, #124]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014d8:	e031      	b.n	800153e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1d      	ldr	r2, [pc, #116]	@ (8001554 <HAL_I2C_MspInit+0xf8>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d12c      	bne.n	800153e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014ee:	f043 0302 	orr.w	r3, r3, #2
 80014f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP388_SCL_Pin|BMP388_SDA_Pin;
 8001500:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001506:	2312      	movs	r3, #18
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001512:	2304      	movs	r3, #4
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <HAL_I2C_MspInit+0xf4>)
 800151e:	f000 fb35 	bl	8001b8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a08      	ldr	r2, [pc, #32]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_I2C_MspInit+0xf0>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40005400 	.word	0x40005400
 800154c:	40023800 	.word	0x40023800
 8001550:	40020400 	.word	0x40020400
 8001554:	40005800 	.word	0x40005800

08001558 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0e      	ldr	r2, [pc, #56]	@ (80015a0 <HAL_TIM_Base_MspInit+0x48>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d115      	bne.n	8001596 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	4a0c      	ldr	r2, [pc, #48]	@ (80015a4 <HAL_TIM_Base_MspInit+0x4c>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6413      	str	r3, [r2, #64]	@ 0x40
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_TIM_Base_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2036      	movs	r0, #54	@ 0x36
 800158c:	f000 fad4 	bl	8001b38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001590:	2036      	movs	r0, #54	@ 0x36
 8001592:	f000 faed 	bl	8001b70 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40001000 	.word	0x40001000
 80015a4:	40023800 	.word	0x40023800

080015a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	@ 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	@ (800162c <HAL_UART_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12b      	bne.n	8001622 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_UART_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 8001602:	230c      	movs	r3, #12
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001612:	2307      	movs	r3, #7
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	@ (8001634 <HAL_UART_MspInit+0x8c>)
 800161e:	f000 fab5 	bl	8001b8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40004400 	.word	0x40004400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08e      	sub	sp, #56	@ 0x38
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4b33      	ldr	r3, [pc, #204]	@ (800171c <HAL_InitTick+0xe4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	4a32      	ldr	r2, [pc, #200]	@ (800171c <HAL_InitTick+0xe4>)
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	6413      	str	r3, [r2, #64]	@ 0x40
 8001658:	4b30      	ldr	r3, [pc, #192]	@ (800171c <HAL_InitTick+0xe4>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f002 f8fe 	bl	8003870 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800167e:	f002 f8cf 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8001682:	6378      	str	r0, [r7, #52]	@ 0x34
 8001684:	e004      	b.n	8001690 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001686:	f002 f8cb 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 800168a:	4603      	mov	r3, r0
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001692:	4a23      	ldr	r2, [pc, #140]	@ (8001720 <HAL_InitTick+0xe8>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	3b01      	subs	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800169e:	4b21      	ldr	r3, [pc, #132]	@ (8001724 <HAL_InitTick+0xec>)
 80016a0:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <HAL_InitTick+0xf0>)
 80016a2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_InitTick+0xec>)
 80016a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016aa:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80016ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001724 <HAL_InitTick+0xec>)
 80016ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_InitTick+0xec>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_InitTick+0xec>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_InitTick+0xec>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016c4:	4817      	ldr	r0, [pc, #92]	@ (8001724 <HAL_InitTick+0xec>)
 80016c6:	f002 f905 	bl	80038d4 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d11b      	bne.n	8001710 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016d8:	4812      	ldr	r0, [pc, #72]	@ (8001724 <HAL_InitTick+0xec>)
 80016da:	f002 f94b 	bl	8003974 <HAL_TIM_Base_Start_IT>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016ec:	2037      	movs	r0, #55	@ 0x37
 80016ee:	f000 fa3f 	bl	8001b70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d808      	bhi.n	800170a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2037      	movs	r0, #55	@ 0x37
 80016fe:	f000 fa1b 	bl	8001b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_InitTick+0xf4>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e002      	b.n	8001710 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001710:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001714:	4618      	mov	r0, r3
 8001716:	3738      	adds	r7, #56	@ 0x38
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	431bde83 	.word	0x431bde83
 8001724:	20000438 	.word	0x20000438
 8001728:	40001400 	.word	0x40001400
 800172c:	20000010 	.word	0x20000010

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <NMI_Handler+0x4>

08001738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <HardFault_Handler+0x4>

08001740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <MemManage_Handler+0x4>

08001748 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <UsageFault_Handler+0x4>

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM6_DAC_IRQHandler+0x10>)
 800177a:	f002 f99a 	bl	8003ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002a4 	.word	0x200002a4

08001788 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <TIM7_IRQHandler+0x10>)
 800178e:	f002 f990 	bl	8003ab2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000438 	.word	0x20000438

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b6:	f007 fe3b 	bl	8009430 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80017de:	bf00      	nop
 80017e0:	e7fd      	b.n	80017de <_exit+0x12>

080017e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e00a      	b.n	800180a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f4:	f3af 8000 	nop.w
 80017f8:	4601      	mov	r1, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf0      	blt.n	80017f4 <_read+0x12>
  }

  return len;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_close>:
  }
  return len;
}

int _close(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001844:	605a      	str	r2, [r3, #4]
  return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_isatty>:

int _isatty(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ac:	f7ff ffea 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f007 fdb1 	bl	800943c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff fba1 	bl	8001020 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018ec:	0800d1a4 	.word	0x0800d1a4
  ldr r2, =_sbss
 80018f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018f4:	20000664 	.word	0x20000664

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f8fc 	bl	8001b22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	200f      	movs	r0, #15
 800192c:	f7ff fe84 	bl	8001638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fd66 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000014 	.word	0x20000014
 8001964:	20000480 	.word	0x20000480

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000480 	.word	0x20000480

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000014 	.word	0x20000014

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	@ (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	@ (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff4c 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
 8001b44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4a:	f7ff ff61 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	6978      	ldr	r0, [r7, #20]
 8001b56:	f7ff ffb1 	bl	8001abc <NVIC_EncodePriority>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff80 	bl	8001a68 <__NVIC_SetPriority>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff54 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e16b      	b.n	8001e80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 815a 	bne.w	8001e7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80b4 	beq.w	8001e7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b60      	ldr	r3, [pc, #384]	@ (8001e98 <HAL_GPIO_Init+0x30c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001e98 <HAL_GPIO_Init+0x30c>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b5d      	ldr	r3, [pc, #372]	@ (8001e98 <HAL_GPIO_Init+0x30c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001e9c <HAL_GPIO_Init+0x310>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a52      	ldr	r2, [pc, #328]	@ (8001ea0 <HAL_GPIO_Init+0x314>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d02b      	beq.n	8001db2 <HAL_GPIO_Init+0x226>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a51      	ldr	r2, [pc, #324]	@ (8001ea4 <HAL_GPIO_Init+0x318>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d025      	beq.n	8001dae <HAL_GPIO_Init+0x222>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a50      	ldr	r2, [pc, #320]	@ (8001ea8 <HAL_GPIO_Init+0x31c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d01f      	beq.n	8001daa <HAL_GPIO_Init+0x21e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001eac <HAL_GPIO_Init+0x320>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d019      	beq.n	8001da6 <HAL_GPIO_Init+0x21a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d013      	beq.n	8001da2 <HAL_GPIO_Init+0x216>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb4 <HAL_GPIO_Init+0x328>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00d      	beq.n	8001d9e <HAL_GPIO_Init+0x212>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb8 <HAL_GPIO_Init+0x32c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d007      	beq.n	8001d9a <HAL_GPIO_Init+0x20e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001ebc <HAL_GPIO_Init+0x330>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_Init+0x20a>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00e      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001d96:	2308      	movs	r3, #8
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x228>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dc4:	4935      	ldr	r1, [pc, #212]	@ (8001e9c <HAL_GPIO_Init+0x310>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df6:	4a32      	ldr	r2, [pc, #200]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dfc:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e20:	4a27      	ldr	r2, [pc, #156]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e26:	4b26      	ldr	r3, [pc, #152]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e74:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_GPIO_Init+0x334>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae90 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	bf00      	nop
 8001e8c:	3724      	adds	r7, #36	@ 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40021c00 	.word	0x40021c00
 8001ec0:	40013c00 	.word	0x40013c00

08001ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed4:	787b      	ldrb	r3, [r7, #1]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eda:	887a      	ldrh	r2, [r7, #2]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ee0:	e003      	b.n	8001eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	041a      	lsls	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e12b      	b.n	8002162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fa9c 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2224      	movs	r2, #36	@ 0x24
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f5c:	f001 fc60 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 8001f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a81      	ldr	r2, [pc, #516]	@ (800216c <HAL_I2C_Init+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d807      	bhi.n	8001f7c <HAL_I2C_Init+0x84>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a80      	ldr	r2, [pc, #512]	@ (8002170 <HAL_I2C_Init+0x278>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	e006      	b.n	8001f8a <HAL_I2C_Init+0x92>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a7d      	ldr	r2, [pc, #500]	@ (8002174 <HAL_I2C_Init+0x27c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bf94      	ite	ls
 8001f84:	2301      	movls	r3, #1
 8001f86:	2300      	movhi	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0e7      	b.n	8002162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a78      	ldr	r2, [pc, #480]	@ (8002178 <HAL_I2C_Init+0x280>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800216c <HAL_I2C_Init+0x274>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d802      	bhi.n	8001fcc <HAL_I2C_Init+0xd4>
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	e009      	b.n	8001fe0 <HAL_I2C_Init+0xe8>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	4a69      	ldr	r2, [pc, #420]	@ (800217c <HAL_I2C_Init+0x284>)
 8001fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fdc:	099b      	lsrs	r3, r3, #6
 8001fde:	3301      	adds	r3, #1
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ff2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	495c      	ldr	r1, [pc, #368]	@ (800216c <HAL_I2C_Init+0x274>)
 8001ffc:	428b      	cmp	r3, r1
 8001ffe:	d819      	bhi.n	8002034 <HAL_I2C_Init+0x13c>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e59      	subs	r1, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fbb1 f3f3 	udiv	r3, r1, r3
 800200e:	1c59      	adds	r1, r3, #1
 8002010:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002014:	400b      	ands	r3, r1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_I2C_Init+0x138>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e59      	subs	r1, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb1 f3f3 	udiv	r3, r1, r3
 8002028:	3301      	adds	r3, #1
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	e051      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002030:	2304      	movs	r3, #4
 8002032:	e04f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d111      	bne.n	8002060 <HAL_I2C_Init+0x168>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	1e58      	subs	r0, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e012      	b.n	8002086 <HAL_I2C_Init+0x18e>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e58      	subs	r0, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6859      	ldr	r1, [r3, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	0099      	lsls	r1, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x196>
 800208a:	2301      	movs	r3, #1
 800208c:	e022      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_I2C_Init+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e58      	subs	r0, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6859      	ldr	r1, [r3, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	440b      	add	r3, r1
 80020a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020b2:	e00f      	b.n	80020d4 <HAL_I2C_Init+0x1dc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1e58      	subs	r0, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	460b      	mov	r3, r1
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	0099      	lsls	r1, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ca:	3301      	adds	r3, #1
 80020cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6809      	ldr	r1, [r1, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002102:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6911      	ldr	r1, [r2, #16]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	000186a0 	.word	0x000186a0
 8002170:	001e847f 	.word	0x001e847f
 8002174:	003d08ff 	.word	0x003d08ff
 8002178:	431bde83 	.word	0x431bde83
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af02      	add	r7, sp, #8
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	4608      	mov	r0, r1
 800218a:	4611      	mov	r1, r2
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	817b      	strh	r3, [r7, #10]
 8002192:	460b      	mov	r3, r1
 8002194:	813b      	strh	r3, [r7, #8]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800219a:	f7ff fbe5 	bl	8001968 <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	f040 80d9 	bne.w	8002360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2319      	movs	r3, #25
 80021b4:	2201      	movs	r2, #1
 80021b6:	496d      	ldr	r1, [pc, #436]	@ (800236c <HAL_I2C_Mem_Write+0x1ec>)
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 fc8b 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0cc      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Mem_Write+0x56>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e0c5      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d007      	beq.n	80021fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2221      	movs	r2, #33	@ 0x21
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2240      	movs	r2, #64	@ 0x40
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800222c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a4d      	ldr	r2, [pc, #308]	@ (8002370 <HAL_I2C_Mem_Write+0x1f0>)
 800223c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800223e:	88f8      	ldrh	r0, [r7, #6]
 8002240:	893a      	ldrh	r2, [r7, #8]
 8002242:	8979      	ldrh	r1, [r7, #10]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4603      	mov	r3, r0
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 fac2 	bl	80027d8 <I2C_RequestMemoryWrite>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d052      	beq.n	8002300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e081      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fd50 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00d      	beq.n	800228a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	2b04      	cmp	r3, #4
 8002274:	d107      	bne.n	8002286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e06b      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	1c5a      	adds	r2, r3, #1
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d11b      	bne.n	8002300 <HAL_I2C_Mem_Write+0x180>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d017      	beq.n	8002300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1aa      	bne.n	800225e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fd43 	bl	8002d98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	2b04      	cmp	r3, #4
 800231e:	d107      	bne.n	8002330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e016      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	00100002 	.word	0x00100002
 8002370:	ffff0000 	.word	0xffff0000

08002374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08c      	sub	sp, #48	@ 0x30
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	817b      	strh	r3, [r7, #10]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800238e:	f7ff faeb 	bl	8001968 <HAL_GetTick>
 8002392:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	f040 8214 	bne.w	80027ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	2319      	movs	r3, #25
 80023a8:	2201      	movs	r2, #1
 80023aa:	497b      	ldr	r1, [pc, #492]	@ (8002598 <HAL_I2C_Mem_Read+0x224>)
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fb91 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80023b8:	2302      	movs	r3, #2
 80023ba:	e207      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Read+0x56>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e200      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d007      	beq.n	80023f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2222      	movs	r2, #34	@ 0x22
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2240      	movs	r2, #64	@ 0x40
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4a5b      	ldr	r2, [pc, #364]	@ (800259c <HAL_I2C_Mem_Read+0x228>)
 8002430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002432:	88f8      	ldrh	r0, [r7, #6]
 8002434:	893a      	ldrh	r2, [r7, #8]
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fa5e 	bl	8002904 <I2C_RequestMemoryRead>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1bc      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	623b      	str	r3, [r7, #32]
 800246e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e190      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002486:	2b01      	cmp	r3, #1
 8002488:	d11b      	bne.n	80024c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e170      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d11b      	bne.n	8002502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	61bb      	str	r3, [r7, #24]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	e150      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002518:	e144      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	2b03      	cmp	r3, #3
 8002520:	f200 80f1 	bhi.w	8002706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	2b01      	cmp	r3, #1
 800252a:	d123      	bne.n	8002574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f000 fc79 	bl	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e145      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002572:	e117      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002578:	2b02      	cmp	r3, #2
 800257a:	d14e      	bne.n	800261a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002582:	2200      	movs	r2, #0
 8002584:	4906      	ldr	r1, [pc, #24]	@ (80025a0 <HAL_I2C_Mem_Read+0x22c>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 faa4 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e11a      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
 8002596:	bf00      	nop
 8002598:	00100002 	.word	0x00100002
 800259c:	ffff0000 	.word	0xffff0000
 80025a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002618:	e0c4      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2200      	movs	r2, #0
 8002622:	496c      	ldr	r1, [pc, #432]	@ (80027d4 <HAL_I2C_Mem_Read+0x460>)
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fa55 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0cb      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800267c:	2200      	movs	r2, #0
 800267e:	4955      	ldr	r1, [pc, #340]	@ (80027d4 <HAL_I2C_Mem_Read+0x460>)
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fa27 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e09d      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691a      	ldr	r2, [r3, #16]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002704:	e04e      	b.n	80027a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002708:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fb8c 	bl	8002e28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e058      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d124      	bne.n	80027a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800275e:	2b03      	cmp	r3, #3
 8002760:	d107      	bne.n	8002772 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002770:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f47f aeb6 	bne.w	800251a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3728      	adds	r7, #40	@ 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	00010004 	.word	0x00010004

080027d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002800:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	2200      	movs	r2, #0
 800280a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 f960 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002828:	d103      	bne.n	8002832 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e05f      	b.n	80028f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002836:	897b      	ldrh	r3, [r7, #10]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002844:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	6a3a      	ldr	r2, [r7, #32]
 800284a:	492d      	ldr	r1, [pc, #180]	@ (8002900 <I2C_RequestMemoryWrite+0x128>)
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f9bb 	bl	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e04c      	b.n	80028f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002874:	6a39      	ldr	r1, [r7, #32]
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa46 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	2b04      	cmp	r3, #4
 8002888:	d107      	bne.n	800289a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002898:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e02b      	b.n	80028f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d105      	bne.n	80028b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028a4:	893b      	ldrh	r3, [r7, #8]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	611a      	str	r2, [r3, #16]
 80028ae:	e021      	b.n	80028f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80028b0:	893b      	ldrh	r3, [r7, #8]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa20 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d107      	bne.n	80028e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e005      	b.n	80028f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	00010002 	.word	0x00010002

08002904 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800292c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800293c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	2200      	movs	r2, #0
 8002946:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 f8c2 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002964:	d103      	bne.n	800296e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e0aa      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002972:	897b      	ldrh	r3, [r7, #10]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002980:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	4952      	ldr	r1, [pc, #328]	@ (8002ad0 <I2C_RequestMemoryRead+0x1cc>)
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f91d 	bl	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e097      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f9a8 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d107      	bne.n	80029d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e076      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d105      	bne.n	80029ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029e0:	893b      	ldrh	r3, [r7, #8]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	e021      	b.n	8002a30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	6a39      	ldr	r1, [r7, #32]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f982 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e050      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a26:	893b      	ldrh	r3, [r7, #8]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a32:	6a39      	ldr	r1, [r7, #32]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f967 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d107      	bne.n	8002a58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e035      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f82b 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a92:	d103      	bne.n	8002a9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e013      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002aa0:	897b      	ldrh	r3, [r7, #10]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	6a3a      	ldr	r2, [r7, #32]
 8002ab4:	4906      	ldr	r1, [pc, #24]	@ (8002ad0 <I2C_RequestMemoryRead+0x1cc>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f886 	bl	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010002 	.word	0x00010002

08002ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae4:	e048      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d044      	beq.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe ff3b 	bl	8001968 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d139      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10d      	bne.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	e00c      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d116      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e023      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10d      	bne.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	e00c      	b.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d093      	beq.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bd6:	e071      	b.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	d123      	bne.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e067      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d041      	beq.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fe96 	bl	8001968 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d136      	bne.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10c      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e00b      	b.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e021      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10c      	bne.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e00b      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af6d 	bne.w	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	e034      	b.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f8e3 	bl	8002ee2 <I2C_IsAcknowledgeFailed>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e034      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d028      	beq.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fe1b 	bl	8001968 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11d      	bne.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d016      	beq.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e007      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8a:	2b80      	cmp	r3, #128	@ 0x80
 8002d8c:	d1c3      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da4:	e034      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f89b 	bl	8002ee2 <I2C_IsAcknowledgeFailed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e034      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d028      	beq.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe fdd3 	bl	8001968 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d016      	beq.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d1c3      	bne.n	8002da6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e34:	e049      	b.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d119      	bne.n	8002e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0210 	mvn.w	r2, #16
 8002e4c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e030      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e78:	f7fe fd76 	bl	8001968 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d302      	bcc.n	8002e8e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d11d      	bne.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b40      	cmp	r3, #64	@ 0x40
 8002e9a:	d016      	beq.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e007      	b.n	8002eda <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed4:	2b40      	cmp	r3, #64	@ 0x40
 8002ed6:	d1ae      	bne.n	8002e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef8:	d11b      	bne.n	8002f32 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f02:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f043 0204 	orr.w	r2, r3, #4
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e267      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d075      	beq.n	800304a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f5e:	4b88      	ldr	r3, [pc, #544]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d00c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b85      	ldr	r3, [pc, #532]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d112      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f76:	4b82      	ldr	r3, [pc, #520]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	4b7e      	ldr	r3, [pc, #504]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d05b      	beq.n	8003048 <HAL_RCC_OscConfig+0x108>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d157      	bne.n	8003048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e242      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x74>
 8002fa6:	4b76      	ldr	r3, [pc, #472]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a75      	ldr	r2, [pc, #468]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	e01d      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x98>
 8002fbe:	4b70      	ldr	r3, [pc, #448]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6f      	ldr	r2, [pc, #444]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	4b6d      	ldr	r3, [pc, #436]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a6c      	ldr	r2, [pc, #432]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	e00b      	b.n	8002ff0 <HAL_RCC_OscConfig+0xb0>
 8002fd8:	4b69      	ldr	r3, [pc, #420]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a68      	ldr	r2, [pc, #416]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a65      	ldr	r2, [pc, #404]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d013      	beq.n	8003020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fcb6 	bl	8001968 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fcb2 	bl	8001968 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e207      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003012:	4b5b      	ldr	r3, [pc, #364]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0xc0>
 800301e:	e014      	b.n	800304a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fca2 	bl	8001968 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fc9e 	bl	8001968 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1f3      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303a:	4b51      	ldr	r3, [pc, #324]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0xe8>
 8003046:	e000      	b.n	800304a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d063      	beq.n	800311e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003056:	4b4a      	ldr	r3, [pc, #296]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00b      	beq.n	800307a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800306a:	2b08      	cmp	r3, #8
 800306c:	d11c      	bne.n	80030a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306e:	4b44      	ldr	r3, [pc, #272]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d116      	bne.n	80030a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	4b41      	ldr	r3, [pc, #260]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_RCC_OscConfig+0x152>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e1c7      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4937      	ldr	r1, [pc, #220]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a6:	e03a      	b.n	800311e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d020      	beq.n	80030f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b0:	4b34      	ldr	r3, [pc, #208]	@ (8003184 <HAL_RCC_OscConfig+0x244>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fc57 	bl	8001968 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe fc53 	bl	8001968 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1a8      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d0:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	4b28      	ldr	r3, [pc, #160]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4925      	ldr	r1, [pc, #148]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	600b      	str	r3, [r1, #0]
 80030f0:	e015      	b.n	800311e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f2:	4b24      	ldr	r3, [pc, #144]	@ (8003184 <HAL_RCC_OscConfig+0x244>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fc36 	bl	8001968 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003100:	f7fe fc32 	bl	8001968 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e187      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f0      	bne.n	8003100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d036      	beq.n	8003198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d016      	beq.n	8003160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003132:	4b15      	ldr	r3, [pc, #84]	@ (8003188 <HAL_RCC_OscConfig+0x248>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fe fc16 	bl	8001968 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fc12 	bl	8001968 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e167      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003152:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_OscConfig+0x240>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x200>
 800315e:	e01b      	b.n	8003198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003160:	4b09      	ldr	r3, [pc, #36]	@ (8003188 <HAL_RCC_OscConfig+0x248>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003166:	f7fe fbff 	bl	8001968 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800316c:	e00e      	b.n	800318c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316e:	f7fe fbfb 	bl	8001968 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d907      	bls.n	800318c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e150      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
 8003180:	40023800 	.word	0x40023800
 8003184:	42470000 	.word	0x42470000
 8003188:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	4b88      	ldr	r3, [pc, #544]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800318e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1ea      	bne.n	800316e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8097 	beq.w	80032d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4b81      	ldr	r3, [pc, #516]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	4b7d      	ldr	r3, [pc, #500]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	4a7c      	ldr	r2, [pc, #496]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031c6:	4b7a      	ldr	r3, [pc, #488]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d6:	4b77      	ldr	r3, [pc, #476]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d118      	bne.n	8003214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031e2:	4b74      	ldr	r3, [pc, #464]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a73      	ldr	r2, [pc, #460]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 80031e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fbbb 	bl	8001968 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f6:	f7fe fbb7 	bl	8001968 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e10c      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003208:	4b6a      	ldr	r3, [pc, #424]	@ (80033b4 <HAL_RCC_OscConfig+0x474>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d106      	bne.n	800322a <HAL_RCC_OscConfig+0x2ea>
 800321c:	4b64      	ldr	r3, [pc, #400]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003220:	4a63      	ldr	r2, [pc, #396]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003222:	f043 0301 	orr.w	r3, r3, #1
 8003226:	6713      	str	r3, [r2, #112]	@ 0x70
 8003228:	e01c      	b.n	8003264 <HAL_RCC_OscConfig+0x324>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b05      	cmp	r3, #5
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x30c>
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	4a5e      	ldr	r2, [pc, #376]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	6713      	str	r3, [r2, #112]	@ 0x70
 800323e:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	4a5b      	ldr	r2, [pc, #364]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6713      	str	r3, [r2, #112]	@ 0x70
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0x324>
 800324c:	4b58      	ldr	r3, [pc, #352]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003250:	4a57      	ldr	r2, [pc, #348]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6713      	str	r3, [r2, #112]	@ 0x70
 8003258:	4b55      	ldr	r3, [pc, #340]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800325a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325c:	4a54      	ldr	r2, [pc, #336]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 0304 	bic.w	r3, r3, #4
 8003262:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe fb7c 	bl	8001968 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe fb78 	bl	8001968 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0cb      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	4b49      	ldr	r3, [pc, #292]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ee      	beq.n	8003274 <HAL_RCC_OscConfig+0x334>
 8003296:	e014      	b.n	80032c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003298:	f7fe fb66 	bl	8001968 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a0:	f7fe fb62 	bl	8001968 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0b5      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b6:	4b3e      	ldr	r3, [pc, #248]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ee      	bne.n	80032a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c8:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	4a38      	ldr	r2, [pc, #224]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a1 	beq.w	8003420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032de:	4b34      	ldr	r3, [pc, #208]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d05c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d141      	bne.n	8003376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7fe fb36 	bl	8001968 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003300:	f7fe fb32 	bl	8001968 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e087      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	3b01      	subs	r3, #1
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	491b      	ldr	r1, [pc, #108]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b1b      	ldr	r3, [pc, #108]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fe fb0b 	bl	8001968 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe fb07 	bl	8001968 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e05c      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x416>
 8003374:	e054      	b.n	8003420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <HAL_RCC_OscConfig+0x478>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe faf4 	bl	8001968 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fe faf0 	bl	8001968 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e045      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_RCC_OscConfig+0x470>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x444>
 80033a2:	e03d      	b.n	8003420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e038      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40007000 	.word	0x40007000
 80033b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_RCC_OscConfig+0x4ec>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d028      	beq.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d121      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d11a      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033ec:	4013      	ands	r3, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d111      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	3b01      	subs	r3, #1
 8003406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d107      	bne.n	800341c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800

08003430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0cc      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003444:	4b68      	ldr	r3, [pc, #416]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d90c      	bls.n	800346c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b65      	ldr	r3, [pc, #404]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b63      	ldr	r3, [pc, #396]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0b8      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003484:	4b59      	ldr	r3, [pc, #356]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a58      	ldr	r2, [pc, #352]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800348e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800349c:	4b53      	ldr	r3, [pc, #332]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a52      	ldr	r2, [pc, #328]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	494d      	ldr	r1, [pc, #308]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d044      	beq.n	8003550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d107      	bne.n	80034de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d119      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e07f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d107      	bne.n	80034fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ee:	4b3f      	ldr	r3, [pc, #252]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fe:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e067      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350e:	4b37      	ldr	r3, [pc, #220]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	4934      	ldr	r1, [pc, #208]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	4313      	orrs	r3, r2
 800351e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003520:	f7fe fa22 	bl	8001968 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	e00a      	b.n	800353e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003528:	f7fe fa1e 	bl	8001968 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e04f      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 020c 	and.w	r2, r3, #12
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	429a      	cmp	r2, r3
 800354e:	d1eb      	bne.n	8003528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003550:	4b25      	ldr	r3, [pc, #148]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d20c      	bcs.n	8003578 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003566:	4b20      	ldr	r3, [pc, #128]	@ (80035e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e032      	b.n	80035de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003584:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4916      	ldr	r1, [pc, #88]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a2:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	490e      	ldr	r1, [pc, #56]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b6:	f000 f821 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035ba:	4602      	mov	r2, r0
 80035bc:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	490a      	ldr	r1, [pc, #40]	@ (80035f0 <HAL_RCC_ClockConfig+0x1c0>)
 80035c8:	5ccb      	ldrb	r3, [r1, r3]
 80035ca:	fa22 f303 	lsr.w	r3, r2, r3
 80035ce:	4a09      	ldr	r2, [pc, #36]	@ (80035f4 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035d2:	4b09      	ldr	r3, [pc, #36]	@ (80035f8 <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe f82e 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40023c00 	.word	0x40023c00
 80035ec:	40023800 	.word	0x40023800
 80035f0:	0800cd50 	.word	0x0800cd50
 80035f4:	2000000c 	.word	0x2000000c
 80035f8:	20000010 	.word	0x20000010

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003600:	b094      	sub	sp, #80	@ 0x50
 8003602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003614:	4b79      	ldr	r3, [pc, #484]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b08      	cmp	r3, #8
 800361e:	d00d      	beq.n	800363c <HAL_RCC_GetSysClockFreq+0x40>
 8003620:	2b08      	cmp	r3, #8
 8003622:	f200 80e1 	bhi.w	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x34>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d003      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x3a>
 800362e:	e0db      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003630:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003634:	e0db      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003636:	4b73      	ldr	r3, [pc, #460]	@ (8003804 <HAL_RCC_GetSysClockFreq+0x208>)
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800363a:	e0d8      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800363c:	4b6f      	ldr	r3, [pc, #444]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003644:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d063      	beq.n	800371a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003652:	4b6a      	ldr	r3, [pc, #424]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	099b      	lsrs	r3, r3, #6
 8003658:	2200      	movs	r2, #0
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	633b      	str	r3, [r7, #48]	@ 0x30
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	@ 0x34
 800366a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003680:	0150      	lsls	r0, r2, #5
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4621      	mov	r1, r4
 8003688:	1a51      	subs	r1, r2, r1
 800368a:	6139      	str	r1, [r7, #16]
 800368c:	4629      	mov	r1, r5
 800368e:	eb63 0301 	sbc.w	r3, r3, r1
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036a0:	4659      	mov	r1, fp
 80036a2:	018b      	lsls	r3, r1, #6
 80036a4:	4651      	mov	r1, sl
 80036a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036aa:	4651      	mov	r1, sl
 80036ac:	018a      	lsls	r2, r1, #6
 80036ae:	4651      	mov	r1, sl
 80036b0:	ebb2 0801 	subs.w	r8, r2, r1
 80036b4:	4659      	mov	r1, fp
 80036b6:	eb63 0901 	sbc.w	r9, r3, r1
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ce:	4690      	mov	r8, r2
 80036d0:	4699      	mov	r9, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	eb18 0303 	adds.w	r3, r8, r3
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	462b      	mov	r3, r5
 80036dc:	eb49 0303 	adc.w	r3, r9, r3
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ee:	4629      	mov	r1, r5
 80036f0:	024b      	lsls	r3, r1, #9
 80036f2:	4621      	mov	r1, r4
 80036f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f8:	4621      	mov	r1, r4
 80036fa:	024a      	lsls	r2, r1, #9
 80036fc:	4610      	mov	r0, r2
 80036fe:	4619      	mov	r1, r3
 8003700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003702:	2200      	movs	r2, #0
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800370c:	f7fd fabc 	bl	8000c88 <__aeabi_uldivmod>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4613      	mov	r3, r2
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	e058      	b.n	80037cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b38      	ldr	r3, [pc, #224]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	4618      	mov	r0, r3
 8003724:	4611      	mov	r1, r2
 8003726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	f04f 0000 	mov.w	r0, #0
 800373c:	f04f 0100 	mov.w	r1, #0
 8003740:	0159      	lsls	r1, r3, #5
 8003742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003746:	0150      	lsls	r0, r2, #5
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4641      	mov	r1, r8
 800374e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003752:	4649      	mov	r1, r9
 8003754:	eb63 0b01 	sbc.w	fp, r3, r1
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800376c:	ebb2 040a 	subs.w	r4, r2, sl
 8003770:	eb63 050b 	sbc.w	r5, r3, fp
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	00eb      	lsls	r3, r5, #3
 800377e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003782:	00e2      	lsls	r2, r4, #3
 8003784:	4614      	mov	r4, r2
 8003786:	461d      	mov	r5, r3
 8003788:	4643      	mov	r3, r8
 800378a:	18e3      	adds	r3, r4, r3
 800378c:	603b      	str	r3, [r7, #0]
 800378e:	464b      	mov	r3, r9
 8003790:	eb45 0303 	adc.w	r3, r5, r3
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037a2:	4629      	mov	r1, r5
 80037a4:	028b      	lsls	r3, r1, #10
 80037a6:	4621      	mov	r1, r4
 80037a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ac:	4621      	mov	r1, r4
 80037ae:	028a      	lsls	r2, r1, #10
 80037b0:	4610      	mov	r0, r2
 80037b2:	4619      	mov	r1, r3
 80037b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037b6:	2200      	movs	r2, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	61fa      	str	r2, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	f7fd fa62 	bl	8000c88 <__aeabi_uldivmod>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4613      	mov	r3, r2
 80037ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_GetSysClockFreq+0x200>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	0c1b      	lsrs	r3, r3, #16
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	3301      	adds	r3, #1
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037e6:	e002      	b.n	80037ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e8:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetSysClockFreq+0x204>)
 80037ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3750      	adds	r7, #80	@ 0x50
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	007a1200 	.word	0x007a1200

08003808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800380c:	4b03      	ldr	r3, [pc, #12]	@ (800381c <HAL_RCC_GetHCLKFreq+0x14>)
 800380e:	681b      	ldr	r3, [r3, #0]
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	2000000c 	.word	0x2000000c

08003820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003824:	f7ff fff0 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	@ (8003844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	0800cd60 	.word	0x0800cd60

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800384c:	f7ff ffdc 	bl	8003808 <HAL_RCC_GetHCLKFreq>
 8003850:	4602      	mov	r2, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0b5b      	lsrs	r3, r3, #13
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4903      	ldr	r1, [pc, #12]	@ (800386c <HAL_RCC_GetPCLK2Freq+0x24>)
 800385e:	5ccb      	ldrb	r3, [r1, r3]
 8003860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	0800cd60 	.word	0x0800cd60

08003870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	220f      	movs	r2, #15
 800387e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003880:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <HAL_RCC_GetClockConfig+0x5c>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0203 	and.w	r2, r3, #3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <HAL_RCC_GetClockConfig+0x5c>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003898:	4b0c      	ldr	r3, [pc, #48]	@ (80038cc <HAL_RCC_GetClockConfig+0x5c>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038a4:	4b09      	ldr	r3, [pc, #36]	@ (80038cc <HAL_RCC_GetClockConfig+0x5c>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	08db      	lsrs	r3, r3, #3
 80038aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <HAL_RCC_GetClockConfig+0x60>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	601a      	str	r2, [r3, #0]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e041      	b.n	800396a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fd fe2c 	bl	8001558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f000 f9e6 	bl	8003ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d001      	beq.n	800398c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04e      	b.n	8003a2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a23      	ldr	r2, [pc, #140]	@ (8003a38 <HAL_TIM_Base_Start_IT+0xc4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b6:	d01d      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <HAL_TIM_Base_Start_IT+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_TIM_Base_Start_IT+0xcc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a44 <HAL_TIM_Base_Start_IT+0xd0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1b      	ldr	r2, [pc, #108]	@ (8003a48 <HAL_TIM_Base_Start_IT+0xd4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	@ (8003a4c <HAL_TIM_Base_Start_IT+0xd8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_TIM_Base_Start_IT+0xdc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d111      	bne.n	8003a18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d010      	beq.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f042 0201 	orr.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a16:	e007      	b.n	8003a28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40010400 	.word	0x40010400
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40001800 	.word	0x40001800

08003a54 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a1a      	ldr	r2, [r3, #32]
 8003a72:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6a1a      	ldr	r2, [r3, #32]
 8003a82:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_Base_Stop_IT+0x48>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01b      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0202 	mvn.w	r2, #2
 8003ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f8d2 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b02:	e005      	b.n	8003b10 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f8c4 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8d5 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d01b      	beq.n	8003b62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0204 	mvn.w	r2, #4
 8003b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8ac 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b4e:	e005      	b.n	8003b5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f89e 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f8af 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d020      	beq.n	8003bae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01b      	beq.n	8003bae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f06f 0208 	mvn.w	r2, #8
 8003b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f886 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003b9a:	e005      	b.n	8003ba8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f878 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f889 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d020      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d01b      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f06f 0210 	mvn.w	r2, #16
 8003bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2208      	movs	r2, #8
 8003bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f860 	bl	8003ca6 <HAL_TIM_IC_CaptureCallback>
 8003be6:	e005      	b.n	8003bf4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f852 	bl	8003c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f863 	bl	8003cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00c      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f06f 0201 	mvn.w	r2, #1
 8003c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fd fbd9 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00c      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f983 	bl	8003f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00c      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f834 	bl	8003cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f06f 0220 	mvn.w	r2, #32
 8003c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f955 	bl	8003f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
	...

08003ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a46      	ldr	r2, [pc, #280]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a43      	ldr	r2, [pc, #268]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a42      	ldr	r2, [pc, #264]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a41      	ldr	r2, [pc, #260]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a40      	ldr	r2, [pc, #256]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d108      	bne.n	8003d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a35      	ldr	r2, [pc, #212]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d44:	d027      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a32      	ldr	r2, [pc, #200]	@ (8003e14 <TIM_Base_SetConfig+0x130>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d023      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a31      	ldr	r2, [pc, #196]	@ (8003e18 <TIM_Base_SetConfig+0x134>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d01f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <TIM_Base_SetConfig+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2f      	ldr	r2, [pc, #188]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d017      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2e      	ldr	r2, [pc, #184]	@ (8003e24 <TIM_Base_SetConfig+0x140>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2d      	ldr	r2, [pc, #180]	@ (8003e28 <TIM_Base_SetConfig+0x144>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00f      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2c      	ldr	r2, [pc, #176]	@ (8003e2c <TIM_Base_SetConfig+0x148>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00b      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2b      	ldr	r2, [pc, #172]	@ (8003e30 <TIM_Base_SetConfig+0x14c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d007      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2a      	ldr	r2, [pc, #168]	@ (8003e34 <TIM_Base_SetConfig+0x150>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <TIM_Base_SetConfig+0x154>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d108      	bne.n	8003da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a10      	ldr	r2, [pc, #64]	@ (8003e10 <TIM_Base_SetConfig+0x12c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d003      	beq.n	8003ddc <TIM_Base_SetConfig+0xf8>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	@ (8003e20 <TIM_Base_SetConfig+0x13c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f023 0201 	bic.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
  }
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40001800 	.word	0x40001800
 8003e34:	40001c00 	.word	0x40001c00
 8003e38:	40002000 	.word	0x40002000

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e05a      	b.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a21      	ldr	r2, [pc, #132]	@ (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea0:	d01d      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a18      	ldr	r2, [pc, #96]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a17      	ldr	r2, [pc, #92]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40010400 	.word	0x40010400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40001800 	.word	0x40001800

08003f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d106      	bne.n	8003f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fd fb10 	bl	80015a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2224      	movs	r2, #36	@ 0x24
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f973 	bl	800428c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b20      	cmp	r3, #32
 800401a:	d175      	bne.n	8004108 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Transmit+0x2c>
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e06e      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2221      	movs	r2, #33	@ 0x21
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800403a:	f7fd fc95 	bl	8001968 <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004054:	d108      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004070:	e02e      	b.n	80040d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	@ 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f848 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03a      	b.n	800410a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3302      	adds	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e007      	b.n	80040c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1cb      	bne.n	8004072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2140      	movs	r1, #64	@ 0x40
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f814 	bl	8004112 <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e006      	b.n	800410a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3720      	adds	r7, #32
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004122:	e03b      	b.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d037      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412c:	f7fd fc1c 	bl	8001968 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <UART_WaitOnFlagUntilTimeout+0x30>
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03a      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	d023      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b80      	cmp	r3, #128	@ 0x80
 8004158:	d020      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	d01d      	beq.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b08      	cmp	r3, #8
 800416c:	d116      	bne.n	800419c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f81d 	bl	80041c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2208      	movs	r2, #8
 800418e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e00f      	b.n	80041bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4013      	ands	r3, r2
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	461a      	mov	r2, r3
 80041b4:	79fb      	ldrb	r3, [r7, #7]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d0b4      	beq.n	8004124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b095      	sub	sp, #84	@ 0x54
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80041ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3314      	adds	r3, #20
 800421e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800422e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004238:	2b01      	cmp	r3, #1
 800423a:	d119      	bne.n	8004270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	330c      	adds	r3, #12
 8004242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	60bb      	str	r3, [r7, #8]
   return(result);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	647b      	str	r3, [r7, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425c:	61ba      	str	r2, [r7, #24]
 800425e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e5      	bne.n	800423c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800427e:	bf00      	nop
 8004280:	3754      	adds	r7, #84	@ 0x54
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b0c0      	sub	sp, #256	@ 0x100
 8004292:	af00      	add	r7, sp, #0
 8004294:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	ea40 0301 	orr.w	r3, r0, r1
 80042b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042e4:	f021 010c 	bic.w	r1, r1, #12
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042f2:	430b      	orrs	r3, r1
 80042f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004306:	6999      	ldr	r1, [r3, #24]
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	ea40 0301 	orr.w	r3, r0, r1
 8004312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b8f      	ldr	r3, [pc, #572]	@ (8004558 <UART_SetConfig+0x2cc>)
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <UART_SetConfig+0xa0>
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b8d      	ldr	r3, [pc, #564]	@ (800455c <UART_SetConfig+0x2d0>)
 8004328:	429a      	cmp	r2, r3
 800432a:	d104      	bne.n	8004336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800432c:	f7ff fa8c 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8004330:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004334:	e003      	b.n	800433e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7ff fa73 	bl	8003820 <HAL_RCC_GetPCLK1Freq>
 800433a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800433e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004348:	f040 810c 	bne.w	8004564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800434c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004356:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800435a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	1891      	adds	r1, r2, r2
 8004364:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004366:	415b      	adcs	r3, r3
 8004368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800436a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800436e:	4621      	mov	r1, r4
 8004370:	eb12 0801 	adds.w	r8, r2, r1
 8004374:	4629      	mov	r1, r5
 8004376:	eb43 0901 	adc.w	r9, r3, r1
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800438a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800438e:	4690      	mov	r8, r2
 8004390:	4699      	mov	r9, r3
 8004392:	4623      	mov	r3, r4
 8004394:	eb18 0303 	adds.w	r3, r8, r3
 8004398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800439c:	462b      	mov	r3, r5
 800439e:	eb49 0303 	adc.w	r3, r9, r3
 80043a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043ba:	460b      	mov	r3, r1
 80043bc:	18db      	adds	r3, r3, r3
 80043be:	653b      	str	r3, [r7, #80]	@ 0x50
 80043c0:	4613      	mov	r3, r2
 80043c2:	eb42 0303 	adc.w	r3, r2, r3
 80043c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80043c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043d0:	f7fc fc5a 	bl	8000c88 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4b61      	ldr	r3, [pc, #388]	@ (8004560 <UART_SetConfig+0x2d4>)
 80043da:	fba3 2302 	umull	r2, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	011c      	lsls	r4, r3, #4
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043fc:	415b      	adcs	r3, r3
 80043fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004404:	4641      	mov	r1, r8
 8004406:	eb12 0a01 	adds.w	sl, r2, r1
 800440a:	4649      	mov	r1, r9
 800440c:	eb43 0b01 	adc.w	fp, r3, r1
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800441c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004424:	4692      	mov	sl, r2
 8004426:	469b      	mov	fp, r3
 8004428:	4643      	mov	r3, r8
 800442a:	eb1a 0303 	adds.w	r3, sl, r3
 800442e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004432:	464b      	mov	r3, r9
 8004434:	eb4b 0303 	adc.w	r3, fp, r3
 8004438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004448:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800444c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004450:	460b      	mov	r3, r1
 8004452:	18db      	adds	r3, r3, r3
 8004454:	643b      	str	r3, [r7, #64]	@ 0x40
 8004456:	4613      	mov	r3, r2
 8004458:	eb42 0303 	adc.w	r3, r2, r3
 800445c:	647b      	str	r3, [r7, #68]	@ 0x44
 800445e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004466:	f7fc fc0f 	bl	8000c88 <__aeabi_uldivmod>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4611      	mov	r1, r2
 8004470:	4b3b      	ldr	r3, [pc, #236]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004472:	fba3 2301 	umull	r2, r3, r3, r1
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2264      	movs	r2, #100	@ 0x64
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	1acb      	subs	r3, r1, r3
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004486:	4b36      	ldr	r3, [pc, #216]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004488:	fba3 2302 	umull	r2, r3, r3, r2
 800448c:	095b      	lsrs	r3, r3, #5
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004494:	441c      	add	r4, r3
 8004496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044b0:	415b      	adcs	r3, r3
 80044b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044b8:	4641      	mov	r1, r8
 80044ba:	1851      	adds	r1, r2, r1
 80044bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80044be:	4649      	mov	r1, r9
 80044c0:	414b      	adcs	r3, r1
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044d0:	4659      	mov	r1, fp
 80044d2:	00cb      	lsls	r3, r1, #3
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044da:	4651      	mov	r1, sl
 80044dc:	00ca      	lsls	r2, r1, #3
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	4642      	mov	r2, r8
 80044e6:	189b      	adds	r3, r3, r2
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044ec:	464b      	mov	r3, r9
 80044ee:	460a      	mov	r2, r1
 80044f0:	eb42 0303 	adc.w	r3, r2, r3
 80044f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004504:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800450c:	460b      	mov	r3, r1
 800450e:	18db      	adds	r3, r3, r3
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004512:	4613      	mov	r3, r2
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800451e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004522:	f7fc fbb1 	bl	8000c88 <__aeabi_uldivmod>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <UART_SetConfig+0x2d4>)
 800452c:	fba3 1302 	umull	r1, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	2164      	movs	r1, #100	@ 0x64
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	3332      	adds	r3, #50	@ 0x32
 800453e:	4a08      	ldr	r2, [pc, #32]	@ (8004560 <UART_SetConfig+0x2d4>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	095b      	lsrs	r3, r3, #5
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4422      	add	r2, r4
 8004552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004554:	e106      	b.n	8004764 <UART_SetConfig+0x4d8>
 8004556:	bf00      	nop
 8004558:	40011000 	.word	0x40011000
 800455c:	40011400 	.word	0x40011400
 8004560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004568:	2200      	movs	r2, #0
 800456a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800456e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004576:	4642      	mov	r2, r8
 8004578:	464b      	mov	r3, r9
 800457a:	1891      	adds	r1, r2, r2
 800457c:	6239      	str	r1, [r7, #32]
 800457e:	415b      	adcs	r3, r3
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
 8004582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004586:	4641      	mov	r1, r8
 8004588:	1854      	adds	r4, r2, r1
 800458a:	4649      	mov	r1, r9
 800458c:	eb43 0501 	adc.w	r5, r3, r1
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	00eb      	lsls	r3, r5, #3
 800459a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800459e:	00e2      	lsls	r2, r4, #3
 80045a0:	4614      	mov	r4, r2
 80045a2:	461d      	mov	r5, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	18e3      	adds	r3, r4, r3
 80045a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045ac:	464b      	mov	r3, r9
 80045ae:	eb45 0303 	adc.w	r3, r5, r3
 80045b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045d2:	4629      	mov	r1, r5
 80045d4:	008b      	lsls	r3, r1, #2
 80045d6:	4621      	mov	r1, r4
 80045d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045dc:	4621      	mov	r1, r4
 80045de:	008a      	lsls	r2, r1, #2
 80045e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045e4:	f7fc fb50 	bl	8000c88 <__aeabi_uldivmod>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4b60      	ldr	r3, [pc, #384]	@ (8004770 <UART_SetConfig+0x4e4>)
 80045ee:	fba3 2302 	umull	r2, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	011c      	lsls	r4, r3, #4
 80045f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004600:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004608:	4642      	mov	r2, r8
 800460a:	464b      	mov	r3, r9
 800460c:	1891      	adds	r1, r2, r2
 800460e:	61b9      	str	r1, [r7, #24]
 8004610:	415b      	adcs	r3, r3
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004618:	4641      	mov	r1, r8
 800461a:	1851      	adds	r1, r2, r1
 800461c:	6139      	str	r1, [r7, #16]
 800461e:	4649      	mov	r1, r9
 8004620:	414b      	adcs	r3, r1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004630:	4659      	mov	r1, fp
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4651      	mov	r1, sl
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4651      	mov	r1, sl
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4642      	mov	r2, r8
 8004646:	189b      	adds	r3, r3, r2
 8004648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800464c:	464b      	mov	r3, r9
 800464e:	460a      	mov	r2, r1
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004662:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004670:	4649      	mov	r1, r9
 8004672:	008b      	lsls	r3, r1, #2
 8004674:	4641      	mov	r1, r8
 8004676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467a:	4641      	mov	r1, r8
 800467c:	008a      	lsls	r2, r1, #2
 800467e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004682:	f7fc fb01 	bl	8000c88 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4611      	mov	r1, r2
 800468c:	4b38      	ldr	r3, [pc, #224]	@ (8004770 <UART_SetConfig+0x4e4>)
 800468e:	fba3 2301 	umull	r2, r3, r3, r1
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2264      	movs	r2, #100	@ 0x64
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	1acb      	subs	r3, r1, r3
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	3332      	adds	r3, #50	@ 0x32
 80046a0:	4a33      	ldr	r2, [pc, #204]	@ (8004770 <UART_SetConfig+0x4e4>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046ac:	441c      	add	r4, r3
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80046b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80046b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046bc:	4642      	mov	r2, r8
 80046be:	464b      	mov	r3, r9
 80046c0:	1891      	adds	r1, r2, r2
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	415b      	adcs	r3, r3
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046cc:	4641      	mov	r1, r8
 80046ce:	1851      	adds	r1, r2, r1
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	4649      	mov	r1, r9
 80046d4:	414b      	adcs	r3, r1
 80046d6:	607b      	str	r3, [r7, #4]
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	f04f 0300 	mov.w	r3, #0
 80046e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046e4:	4659      	mov	r1, fp
 80046e6:	00cb      	lsls	r3, r1, #3
 80046e8:	4651      	mov	r1, sl
 80046ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ee:	4651      	mov	r1, sl
 80046f0:	00ca      	lsls	r2, r1, #3
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	4642      	mov	r2, r8
 80046fa:	189b      	adds	r3, r3, r2
 80046fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fe:	464b      	mov	r3, r9
 8004700:	460a      	mov	r2, r1
 8004702:	eb42 0303 	adc.w	r3, r2, r3
 8004706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	663b      	str	r3, [r7, #96]	@ 0x60
 8004712:	667a      	str	r2, [r7, #100]	@ 0x64
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004720:	4649      	mov	r1, r9
 8004722:	008b      	lsls	r3, r1, #2
 8004724:	4641      	mov	r1, r8
 8004726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800472a:	4641      	mov	r1, r8
 800472c:	008a      	lsls	r2, r1, #2
 800472e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004732:	f7fc faa9 	bl	8000c88 <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4b0d      	ldr	r3, [pc, #52]	@ (8004770 <UART_SetConfig+0x4e4>)
 800473c:	fba3 1302 	umull	r1, r3, r3, r2
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	2164      	movs	r1, #100	@ 0x64
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	3332      	adds	r3, #50	@ 0x32
 800474e:	4a08      	ldr	r2, [pc, #32]	@ (8004770 <UART_SetConfig+0x4e4>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	095b      	lsrs	r3, r3, #5
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4422      	add	r2, r4
 8004762:	609a      	str	r2, [r3, #8]
}
 8004764:	bf00      	nop
 8004766:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800476a:	46bd      	mov	sp, r7
 800476c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004770:	51eb851f 	.word	0x51eb851f

08004774 <Complementary_Init>:

extern void Error_Handler(void);


void Complementary_Init(struct complementary *pComp,double alpha,double sampling_time)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6178      	str	r0, [r7, #20]
 800477c:	ed87 0b02 	vstr	d0, [r7, #8]
 8004780:	ed87 1b00 	vstr	d1, [r7]
	if( pComp == NULL)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <Complementary_Init+0x20>
	{
		printf("Null pointer error !\n");
 800478a:	4839      	ldr	r0, [pc, #228]	@ (8004870 <Complementary_Init+0xfc>)
 800478c:	f004 fcfc 	bl	8009188 <puts>
		Error_Handler();
 8004790:	f7fc fe30 	bl	80013f4 <Error_Handler>
	}

	if( !( ( alpha >= 0.0f ) && ( alpha <= 1.0f ) && ( sampling_time > 0.0f ) ) )
 8004794:	2301      	movs	r3, #1
 8004796:	461c      	mov	r4, r3
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047a4:	f7fc f9ae 	bl	8000b04 <__aeabi_dcmpge>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <Complementary_Init+0x3e>
 80047ae:	2300      	movs	r3, #0
 80047b0:	461c      	mov	r4, r3
 80047b2:	b2e3      	uxtb	r3, r4
 80047b4:	f083 0301 	eor.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d128      	bne.n	8004810 <Complementary_Init+0x9c>
 80047be:	2301      	movs	r3, #1
 80047c0:	461c      	mov	r4, r3
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	4b2b      	ldr	r3, [pc, #172]	@ (8004874 <Complementary_Init+0x100>)
 80047c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047cc:	f7fc f990 	bl	8000af0 <__aeabi_dcmple>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <Complementary_Init+0x66>
 80047d6:	2300      	movs	r3, #0
 80047d8:	461c      	mov	r4, r3
 80047da:	b2e3      	uxtb	r3, r4
 80047dc:	f083 0301 	eor.w	r3, r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d114      	bne.n	8004810 <Complementary_Init+0x9c>
 80047e6:	2301      	movs	r3, #1
 80047e8:	461c      	mov	r4, r3
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047f6:	f7fc f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <Complementary_Init+0x90>
 8004800:	2300      	movs	r3, #0
 8004802:	461c      	mov	r4, r3
 8004804:	b2e3      	uxtb	r3, r4
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d004      	beq.n	800481a <Complementary_Init+0xa6>
	{
		printf("Alpha must be [0-1] !\n");
 8004810:	4819      	ldr	r0, [pc, #100]	@ (8004878 <Complementary_Init+0x104>)
 8004812:	f004 fcb9 	bl	8009188 <puts>
		Error_Handler();
 8004816:	f7fc fded 	bl	80013f4 <Error_Handler>
	}

	pComp->alpha = alpha;
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004820:	e9c1 2300 	strd	r2, r3, [r1]
	pComp->pitch = 0.0f;
 8004824:	6979      	ldr	r1, [r7, #20]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pComp->roll = 0.0f;
 8004832:	6979      	ldr	r1, [r7, #20]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pComp->yaw = 0.0f;
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pComp->ts = sampling_time / 1000.0f;
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <Complementary_Init+0x108>)
 8004854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004858:	f7fb fff8 	bl	800084c <__aeabi_ddiv>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	6979      	ldr	r1, [r7, #20]
 8004862:	e9c1 2308 	strd	r2, r3, [r1, #32]

}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	0800ca50 	.word	0x0800ca50
 8004874:	3ff00000 	.word	0x3ff00000
 8004878:	0800ca68 	.word	0x0800ca68
 800487c:	408f4000 	.word	0x408f4000

08004880 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	4603      	mov	r3, r0
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	4613      	mov	r3, r2
 8004890:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <bmi160_get_regs+0x24>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d102      	bne.n	80048aa <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 80048a4:	23ff      	movs	r3, #255	@ 0xff
 80048a6:	75fb      	strb	r3, [r7, #23]
 80048a8:	e017      	b.n	80048da <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 80048aa:	89bb      	ldrh	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80048b0:	23f4      	movs	r3, #244	@ 0xf4
 80048b2:	75fb      	strb	r3, [r7, #23]
 80048b4:	e011      	b.n	80048da <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	789b      	ldrb	r3, [r3, #2]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d103      	bne.n	80048c6 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80048c4:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69dc      	ldr	r4, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7858      	ldrb	r0, [r3, #1]
 80048ce:	89bb      	ldrh	r3, [r7, #12]
 80048d0:	7bf9      	ldrb	r1, [r7, #15]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	47a0      	blx	r4
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80048da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd90      	pop	{r4, r7, pc}

080048e6 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80048e6:	b590      	push	{r4, r7, lr}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	4613      	mov	r3, r2
 80048f6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <bmi160_set_regs+0x28>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 800490e:	23ff      	movs	r3, #255	@ 0xff
 8004910:	75fb      	strb	r3, [r7, #23]
 8004912:	e045      	b.n	80049a0 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8004914:	89bb      	ldrh	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800491a:	23f4      	movs	r3, #244	@ 0xf4
 800491c:	75fb      	strb	r3, [r7, #23]
 800491e:	e03f      	b.n	80049a0 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	789b      	ldrb	r3, [r3, #2]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d103      	bne.n	8004930 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800492e:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7a1b      	ldrb	r3, [r3, #8]
 8004934:	2b11      	cmp	r3, #17
 8004936:	d003      	beq.n	8004940 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 800493c:	2b15      	cmp	r3, #21
 800493e:	d124      	bne.n	800498a <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1c      	ldr	r4, [r3, #32]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	7858      	ldrb	r0, [r3, #1]
 8004948:	89bb      	ldrh	r3, [r7, #12]
 800494a:	7bf9      	ldrb	r1, [r7, #15]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	47a0      	blx	r4
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004958:	2001      	movs	r0, #1
 800495a:	4798      	blx	r3
 800495c:	e01a      	b.n	8004994 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1c      	ldr	r4, [r3, #32]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	7858      	ldrb	r0, [r3, #1]
 8004966:	7dbb      	ldrb	r3, [r7, #22]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	441a      	add	r2, r3
 800496c:	7bf9      	ldrb	r1, [r7, #15]
 800496e:	2301      	movs	r3, #1
 8004970:	47a0      	blx	r4
 8004972:	4603      	mov	r3, r0
 8004974:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8004976:	7bfb      	ldrb	r3, [r7, #15]
 8004978:	3301      	adds	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	2001      	movs	r0, #1
 8004982:	4798      	blx	r3
            for (; count < len; count++)
 8004984:	7dbb      	ldrb	r3, [r7, #22]
 8004986:	3301      	adds	r3, #1
 8004988:	75bb      	strb	r3, [r7, #22]
 800498a:	7dbb      	ldrb	r3, [r7, #22]
 800498c:	b29b      	uxth	r3, r3
 800498e:	89ba      	ldrh	r2, [r7, #12]
 8004990:	429a      	cmp	r2, r3
 8004992:	d8e4      	bhi.n	800495e <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 800499c:	23fe      	movs	r3, #254	@ 0xfe
 800499e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80049a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd90      	pop	{r4, r7, pc}

080049ac <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 80049b4:	2303      	movs	r3, #3
 80049b6:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa98 	bl	8004eee <null_ptr_check>
 80049be:	4603      	mov	r3, r0
 80049c0:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 80049c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10c      	bne.n	80049e4 <bmi160_init+0x38>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d108      	bne.n	80049e4 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 80049d2:	f107 010d 	add.w	r1, r7, #13
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	207f      	movs	r0, #127	@ 0x7f
 80049dc:	f7ff ff50 	bl	8004880 <bmi160_get_regs>
 80049e0:	4603      	mov	r3, r0
 80049e2:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80049e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d127      	bne.n	8004a3c <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80049f2:	e007      	b.n	8004a04 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7ff ff40 	bl	8004880 <bmi160_get_regs>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	1e5a      	subs	r2, r3, #1
 8004a08:	73ba      	strb	r2, [r7, #14]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <bmi160_init+0x6a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2bd1      	cmp	r3, #209	@ 0xd1
 8004a14:	d1ee      	bne.n	80049f4 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10c      	bne.n	8004a38 <bmi160_init+0x8c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2bd1      	cmp	r3, #209	@ 0xd1
 8004a24:	d108      	bne.n	8004a38 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	22ff      	movs	r2, #255	@ 0xff
 8004a2a:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f80b 	bl	8004a48 <bmi160_soft_reset>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	e001      	b.n	8004a3c <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8004a38:	23fd      	movs	r3, #253	@ 0xfd
 8004a3a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004a50:	23b6      	movs	r3, #182	@ 0xb6
 8004a52:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <bmi160_soft_reset+0x1a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004a62:	23ff      	movs	r3, #255	@ 0xff
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e024      	b.n	8004ab2 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004a68:	f107 010e 	add.w	r1, r7, #14
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	207e      	movs	r0, #126	@ 0x7e
 8004a72:	f7ff ff38 	bl	80048e6 <bmi160_set_regs>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	2001      	movs	r0, #1
 8004a80:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <bmi160_soft_reset+0x5c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	789b      	ldrb	r3, [r3, #2]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d108      	bne.n	8004aa4 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004a92:	f107 010e 	add.w	r1, r7, #14
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	207f      	movs	r0, #127	@ 0x7f
 8004a9c:	f7ff fef0 	bl	8004880 <bmi160_get_regs>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8004aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa3e 	bl	8004f2e <default_param_settg>
        }
    }

    return rslt;
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <bmi160_set_sens_conf+0x1a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d102      	bne.n	8004ade <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ad8:	23ff      	movs	r3, #255	@ 0xff
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	e01f      	b.n	8004b1e <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa4f 	bl	8004f82 <set_accel_conf>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d116      	bne.n	8004b1e <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb8b 	bl	800520c <set_gyro_conf>
 8004af6:	4603      	mov	r3, r0
 8004af8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10d      	bne.n	8004b1e <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f811 	bl	8004b2a <bmi160_set_power_mode>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb44 	bl	80051a2 <check_invalid_settg>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <bmi160_set_power_mode+0x1a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b44:	23ff      	movs	r3, #255	@ 0xff
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e00d      	b.n	8004b66 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fc68 	bl	8005420 <set_accel_pwr>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d104      	bne.n	8004b66 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fcf6 	bl	800554e <set_gyro_pwr>
 8004b62:	4603      	mov	r3, r0
 8004b64:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8004b92:	7d7b      	ldrb	r3, [r7, #21]
 8004b94:	109b      	asrs	r3, r3, #2
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8004b9e:	7d7b      	ldrb	r3, [r7, #21]
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8004ba6:	7d3b      	ldrb	r3, [r7, #20]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8004bac:	2303      	movs	r3, #3
 8004bae:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d03c      	beq.n	8004c30 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8004bb6:	7d7b      	ldrb	r3, [r7, #21]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d024      	beq.n	8004c06 <bmi160_get_sensor_data+0x94>
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	dc34      	bgt.n	8004c2a <bmi160_get_sensor_data+0xb8>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d002      	beq.n	8004bca <bmi160_get_sensor_data+0x58>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d00f      	beq.n	8004be8 <bmi160_get_sensor_data+0x76>
 8004bc8:	e02f      	b.n	8004c2a <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004bd0:	23ff      	movs	r3, #255	@ 0xff
 8004bd2:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8004bd4:	e02e      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8004bd6:	7dbb      	ldrb	r3, [r7, #22]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fcfa 	bl	80055d6 <get_accel_data>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]
                break;
 8004be6:	e025      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004bee:	23ff      	movs	r3, #255	@ 0xff
 8004bf0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8004bf2:	e01f      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8004bf4:	7dbb      	ldrb	r3, [r7, #22]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fdb7 	bl	800576e <get_gyro_data>
 8004c00:	4603      	mov	r3, r0
 8004c02:	75fb      	strb	r3, [r7, #23]
                break;
 8004c04:	e016      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <bmi160_get_sensor_data+0xa0>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004c12:	23ff      	movs	r3, #255	@ 0xff
 8004c14:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8004c16:	e00d      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8004c18:	7db8      	ldrb	r0, [r7, #22]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	f000 fef3 	bl	8005a0a <get_accel_gyro_data>
 8004c24:	4603      	mov	r3, r0
 8004c26:	75fb      	strb	r3, [r7, #23]
                break;
 8004c28:	e004      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8004c2a:	23fb      	movs	r3, #251	@ 0xfb
 8004c2c:	75fb      	strb	r3, [r7, #23]
                break;
 8004c2e:	e001      	b.n	8004c34 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004c30:	23ff      	movs	r3, #255	@ 0xff
 8004c32:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	6039      	str	r1, [r7, #0]
 8004c4a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    int8_t self_test_rslt = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004c50:	6838      	ldr	r0, [r7, #0]
 8004c52:	f000 f94c 	bl	8004eee <null_ptr_check>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <bmi160_perform_self_test+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004c62:	23ff      	movs	r3, #255	@ 0xff
 8004c64:	73fb      	strb	r3, [r7, #15]
 8004c66:	e032      	b.n	8004cce <bmi160_perform_self_test+0x8e>
    }
    else
    {

        /* Proceed if null check is fine */
        switch (select_sensor)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d002      	beq.n	8004c74 <bmi160_perform_self_test+0x34>
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d006      	beq.n	8004c80 <bmi160_perform_self_test+0x40>
 8004c72:	e017      	b.n	8004ca4 <bmi160_perform_self_test+0x64>
        {
            case BMI160_ACCEL_ONLY:
                rslt = perform_accel_self_test(dev);
 8004c74:	6838      	ldr	r0, [r7, #0]
 8004c76:	f001 f80b 	bl	8005c90 <perform_accel_self_test>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]
                break;
 8004c7e:	e015      	b.n	8004cac <bmi160_perform_self_test+0x6c>
            case BMI160_GYRO_ONLY:

                /* Set the power mode as normal mode */
                dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2215      	movs	r2, #21
 8004c84:	731a      	strb	r2, [r3, #12]
                rslt = bmi160_set_power_mode(dev);
 8004c86:	6838      	ldr	r0, [r7, #0]
 8004c88:	f7ff ff4f 	bl	8004b2a <bmi160_set_power_mode>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

                /* Perform gyro self test */
                if (rslt == BMI160_OK)
 8004c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d108      	bne.n	8004caa <bmi160_perform_self_test+0x6a>
                {
                    /* Perform gyro self test */
                    rslt = perform_gyro_self_test(dev);
 8004c98:	6838      	ldr	r0, [r7, #0]
 8004c9a:	f001 f8d5 	bl	8005e48 <perform_gyro_self_test>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8004ca2:	e002      	b.n	8004caa <bmi160_perform_self_test+0x6a>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8004ca4:	23fb      	movs	r3, #251	@ 0xfb
 8004ca6:	73fb      	strb	r3, [r7, #15]
                break;
 8004ca8:	e000      	b.n	8004cac <bmi160_perform_self_test+0x6c>
                break;
 8004caa:	bf00      	nop
        }

        /* Check to ensure bus error does not occur */
        if (rslt >= BMI160_OK)
 8004cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	db06      	blt.n	8004cc2 <bmi160_perform_self_test+0x82>
        {
            /* Store the status of self test result */
            self_test_rslt = rslt;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	73bb      	strb	r3, [r7, #14]

            /* Perform soft reset */
            rslt = bmi160_soft_reset(dev);
 8004cb8:	6838      	ldr	r0, [r7, #0]
 8004cba:	f7ff fec5 	bl	8004a48 <bmi160_soft_reset>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	73fb      	strb	r3, [r7, #15]

        }

        /* Check to ensure bus operations are success */
        if (rslt == BMI160_OK)
 8004cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <bmi160_perform_self_test+0x8e>
        {
            /* Restore self_test_rslt as return value */
            rslt = self_test_rslt;
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b088      	sub	sp, #32
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004ce4:	6838      	ldr	r0, [r7, #0]
 8004ce6:	f000 f902 	bl	8004eee <null_ptr_check>
 8004cea:	4603      	mov	r3, r0
 8004cec:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004cee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004cf6:	23ff      	movs	r3, #255	@ 0xff
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e069      	b.n	8004dd0 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004cfc:	f107 010c 	add.w	r1, r7, #12
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2207      	movs	r2, #7
 8004d04:	2071      	movs	r0, #113	@ 0x71
 8004d06:	f7ff fdbb 	bl	8004880 <bmi160_get_regs>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004d0e:	7b3b      	ldrb	r3, [r7, #12]
 8004d10:	b25a      	sxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004d16:	7b7b      	ldrb	r3, [r7, #13]
 8004d18:	b25a      	sxtb	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004d1e:	7bbb      	ldrb	r3, [r7, #14]
 8004d20:	b25a      	sxtb	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004d2a:	7cbb      	ldrb	r3, [r7, #18]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004d32:	7f7b      	ldrb	r3, [r7, #29]
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	039b      	lsls	r3, r3, #14
 8004d38:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004d3a:	7fbb      	ldrb	r3, [r7, #30]
 8004d3c:	b21b      	sxth	r3, r3
 8004d3e:	019b      	lsls	r3, r3, #6
 8004d40:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004d42:	8b7a      	ldrh	r2, [r7, #26]
 8004d44:	8b3b      	ldrh	r3, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8004d4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da00      	bge.n	8004d54 <bmi160_get_offsets+0x7a>
 8004d52:	333f      	adds	r3, #63	@ 0x3f
 8004d54:	119b      	asrs	r3, r3, #6
 8004d56:	b21a      	sxth	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004d5c:	7c3b      	ldrb	r3, [r7, #16]
 8004d5e:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004d60:	7cbb      	ldrb	r3, [r7, #18]
 8004d62:	109b      	asrs	r3, r3, #2
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004d6c:	7f7b      	ldrb	r3, [r7, #29]
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	039b      	lsls	r3, r3, #14
 8004d72:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004d74:	7fbb      	ldrb	r3, [r7, #30]
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004d7c:	8b7a      	ldrh	r2, [r7, #26]
 8004d7e:	8b3b      	ldrh	r3, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8004d84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da00      	bge.n	8004d8e <bmi160_get_offsets+0xb4>
 8004d8c:	333f      	adds	r3, #63	@ 0x3f
 8004d8e:	119b      	asrs	r3, r3, #6
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8004d96:	7c7b      	ldrb	r3, [r7, #17]
 8004d98:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8004d9a:	7cbb      	ldrb	r3, [r7, #18]
 8004d9c:	111b      	asrs	r3, r3, #4
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004da6:	7f7b      	ldrb	r3, [r7, #29]
 8004da8:	b21b      	sxth	r3, r3
 8004daa:	039b      	lsls	r3, r3, #14
 8004dac:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004dae:	7fbb      	ldrb	r3, [r7, #30]
 8004db0:	b21b      	sxth	r3, r3
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004db6:	8b7a      	ldrh	r2, [r7, #26]
 8004db8:	8b3b      	ldrh	r3, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004dbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da00      	bge.n	8004dc8 <bmi160_get_offsets+0xee>
 8004dc6:	333f      	adds	r3, #63	@ 0x3f
 8004dc8:	119b      	asrs	r3, r3, #6
 8004dca:	b21a      	sxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004dd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <bmi160_set_offsets>:
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,
                          const struct bmi160_offsets *offset,
                          struct bmi160_dev const *dev)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data[7];
    uint8_t x_msb, y_msb, z_msb;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f880 	bl	8004eee <null_ptr_check>
 8004dee:	4603      	mov	r3, r0
 8004df0:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <bmi160_set_offsets+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8004dfa:	23ff      	movs	r3, #255	@ 0xff
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e070      	b.n	8004ee2 <bmi160_set_offsets+0x106>
    }
    else
    {
        /* Update the accel offset */
        data[0] = (uint8_t)offset->off_acc_x;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f993 3000 	ldrsb.w	r3, [r3]
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	753b      	strb	r3, [r7, #20]
        data[1] = (uint8_t)offset->off_acc_y;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	757b      	strb	r3, [r7, #21]
        data[2] = (uint8_t)offset->off_acc_z;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	75bb      	strb	r3, [r7, #22]

        /* Update the LSB of gyro offset */
        data[3] = BMI160_GET_LSB(offset->off_gyro_x);
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	75fb      	strb	r3, [r7, #23]
        data[4] = BMI160_GET_LSB(offset->off_gyro_y);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	763b      	strb	r3, [r7, #24]
        data[5] = BMI160_GET_LSB(offset->off_gyro_z);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	767b      	strb	r3, [r7, #25]

        /* Update the MSB of gyro offset */
        x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	121b      	asrs	r3, r3, #8
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	77bb      	strb	r3, [r7, #30]
        y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	121b      	asrs	r3, r3, #8
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	777b      	strb	r3, [r7, #29]
        z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	121b      	asrs	r3, r3, #8
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	773b      	strb	r3, [r7, #28]
        data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
 8004e72:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	b25a      	sxtb	r2, r3
 8004e7a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	4313      	orrs	r3, r2
 8004e84:	b25a      	sxtb	r2, r3
 8004e86:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	76bb      	strb	r3, [r7, #26]

        /* Set the offset enable/disable for gyro and accel */
        data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8004e92:	7ebb      	ldrb	r3, [r7, #26]
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9a:	b25a      	sxtb	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	795b      	ldrb	r3, [r3, #5]
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	76bb      	strb	r3, [r7, #26]
        data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8004eae:	7ebb      	ldrb	r3, [r7, #26]
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eb6:	b25a      	sxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	019b      	lsls	r3, r3, #6
 8004ec0:	b25b      	sxtb	r3, r3
 8004ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b25b      	sxtb	r3, r3
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	76bb      	strb	r3, [r7, #26]

        /* Set the offset config and values in the sensor */
        rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004ed0:	f107 0114 	add.w	r1, r7, #20
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	2071      	movs	r0, #113	@ 0x71
 8004eda:	f7ff fd04 	bl	80048e6 <bmi160_set_regs>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004ee2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <null_ptr_check+0x26>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <null_ptr_check+0x26>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <null_ptr_check+0x26>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8004f14:	23ff      	movs	r3, #255	@ 0xff
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e001      	b.n	8004f1e <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2210      	movs	r2, #16
 8004f46:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2208      	movs	r2, #8
 8004f58:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2214      	movs	r2, #20
 8004f5e:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6852      	ldr	r2, [r2, #4]
 8004f6c:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	68d2      	ldr	r2, [r2, #12]
 8004f74:	611a      	str	r2, [r3, #16]
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8004f8e:	f107 030c 	add.w	r3, r7, #12
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f000 f833 	bl	8005000 <check_accel_config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8004f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d126      	bne.n	8004ff4 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8004fa6:	f107 010c 	add.w	r1, r7, #12
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	2040      	movs	r0, #64	@ 0x40
 8004fb0:	f7ff fc99 	bl	80048e6 <bmi160_set_regs>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d119      	bne.n	8004ff4 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	795a      	ldrb	r2, [r3, #5]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	79da      	ldrb	r2, [r3, #7]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8004fd0:	f107 030c 	add.w	r3, r7, #12
 8004fd4:	1c59      	adds	r1, r3, #1
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	2041      	movs	r0, #65	@ 0x41
 8004fdc:	f7ff fc83 	bl	80048e6 <bmi160_set_regs>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d103      	bne.n	8004ff4 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	799a      	ldrb	r2, [r3, #6]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8004ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2202      	movs	r2, #2
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	2040      	movs	r0, #64	@ 0x40
 8005012:	f7ff fc35 	bl	8004880 <bmi160_get_regs>
 8005016:	4603      	mov	r3, r0
 8005018:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800501a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d11b      	bne.n	800505a <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8005022:	6839      	ldr	r1, [r7, #0]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f81e 	bl	8005066 <process_accel_odr>
 800502a:	4603      	mov	r3, r0
 800502c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d111      	bne.n	800505a <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8005036:	6839      	ldr	r1, [r7, #0]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f848 	bl	80050ce <process_accel_bw>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d107      	bne.n	800505a <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3301      	adds	r3, #1
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 f872 	bl	800513a <process_accel_range>
 8005056:	4603      	mov	r3, r0
 8005058:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800505a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	795b      	ldrb	r3, [r3, #5]
 8005080:	2b0c      	cmp	r3, #12
 8005082:	d81a      	bhi.n	80050ba <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	795a      	ldrb	r2, [r3, #5]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	7a5b      	ldrb	r3, [r3, #9]
 800508c:	429a      	cmp	r2, r3
 800508e:	d016      	beq.n	80050be <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	795b      	ldrb	r3, [r3, #5]
 8005094:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f023 030f 	bic.w	r3, r3, #15
 800509e:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80050a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b25a      	sxtb	r2, r3
 80050aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	b25b      	sxtb	r3, r3
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e001      	b.n	80050be <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80050ba:	23fc      	movs	r3, #252	@ 0xfc
 80050bc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80050be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	79db      	ldrb	r3, [r3, #7]
 80050e8:	2b07      	cmp	r3, #7
 80050ea:	d81c      	bhi.n	8005126 <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	79da      	ldrb	r2, [r3, #7]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7adb      	ldrb	r3, [r3, #11]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d018      	beq.n	800512a <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	79db      	ldrb	r3, [r3, #7]
 80050fc:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8005108:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	b25b      	sxtb	r3, r3
 8005110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005114:	b25a      	sxtb	r2, r3
 8005116:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800511a:	4313      	orrs	r3, r2
 800511c:	b25b      	sxtb	r3, r3
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	701a      	strb	r2, [r3, #0]
 8005124:	e001      	b.n	800512a <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005126:	23fc      	movs	r3, #252	@ 0xfc
 8005128:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800512a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	799b      	ldrb	r3, [r3, #6]
 8005154:	2b0c      	cmp	r3, #12
 8005156:	d81a      	bhi.n	800518e <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	799a      	ldrb	r2, [r3, #6]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	7a9b      	ldrb	r3, [r3, #10]
 8005160:	429a      	cmp	r2, r3
 8005162:	d016      	beq.n	8005192 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	799b      	ldrb	r3, [r3, #6]
 8005168:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8005174:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	b25a      	sxtb	r2, r3
 800517e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005182:	4313      	orrs	r3, r2
 8005184:	b25b      	sxtb	r3, r3
 8005186:	b2da      	uxtb	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	e001      	b.n	8005192 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800518e:	23fc      	movs	r3, #252	@ 0xfc
 8005190:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b084      	sub	sp, #16
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80051ae:	f107 010e 	add.w	r1, r7, #14
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	2002      	movs	r0, #2
 80051b8:	f7ff fb62 	bl	8004880 <bmi160_get_regs>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80051c0:	7bbb      	ldrb	r3, [r7, #14]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d102      	bne.n	80051de <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 80051d8:	23fa      	movs	r3, #250	@ 0xfa
 80051da:	73fb      	strb	r3, [r7, #15]
 80051dc:	e010      	b.n	8005200 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d102      	bne.n	80051ea <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 80051e4:	23f9      	movs	r3, #249	@ 0xf9
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	e00a      	b.n	8005200 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 80051ea:	7bbb      	ldrb	r3, [r7, #14]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d102      	bne.n	80051f6 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 80051f0:	23f8      	movs	r3, #248	@ 0xf8
 80051f2:	73fb      	strb	r3, [r7, #15]
 80051f4:	e004      	b.n	8005200 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 80051f6:	7bbb      	ldrb	r3, [r7, #14]
 80051f8:	2b07      	cmp	r3, #7
 80051fa:	d101      	bne.n	8005200 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 80051fc:	23f7      	movs	r3, #247	@ 0xf7
 80051fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005200:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8005214:	2300      	movs	r3, #0
 8005216:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f833 	bl	800528a <check_gyro_config>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d126      	bne.n	800527e <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8005230:	f107 010c 	add.w	r1, r7, #12
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	2042      	movs	r0, #66	@ 0x42
 800523a:	f7ff fb54 	bl	80048e6 <bmi160_set_regs>
 800523e:	4603      	mov	r3, r0
 8005240:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d119      	bne.n	800527e <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7b5a      	ldrb	r2, [r3, #13]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7bda      	ldrb	r2, [r3, #15]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800525a:	f107 030c 	add.w	r3, r7, #12
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	2043      	movs	r0, #67	@ 0x43
 8005266:	f7ff fb3e 	bl	80048e6 <bmi160_set_regs>
 800526a:	4603      	mov	r3, r0
 800526c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7b9a      	ldrb	r2, [r3, #14]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 800527e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b084      	sub	sp, #16
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2202      	movs	r2, #2
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	2042      	movs	r0, #66	@ 0x42
 800529c:	f7ff faf0 	bl	8004880 <bmi160_get_regs>
 80052a0:	4603      	mov	r3, r0
 80052a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80052a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d11b      	bne.n	80052e4 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f81e 	bl	80052f0 <process_gyro_odr>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80052b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d111      	bne.n	80052e4 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f848 	bl	8005358 <process_gyro_bw>
 80052c8:	4603      	mov	r3, r0
 80052ca:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80052cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d107      	bne.n	80052e4 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3301      	adds	r3, #1
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f86c 	bl	80053b8 <process_gyro_range>
 80052e0:	4603      	mov	r3, r0
 80052e2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80052e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	7b5b      	ldrb	r3, [r3, #13]
 800530a:	2b0d      	cmp	r3, #13
 800530c:	d81a      	bhi.n	8005344 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	7b5a      	ldrb	r2, [r3, #13]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	7c5b      	ldrb	r3, [r3, #17]
 8005316:	429a      	cmp	r2, r3
 8005318:	d016      	beq.n	8005348 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	7b5b      	ldrb	r3, [r3, #13]
 800531e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	f023 030f 	bic.w	r3, r3, #15
 8005328:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800532a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	b25a      	sxtb	r2, r3
 8005334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005338:	4313      	orrs	r3, r2
 800533a:	b25b      	sxtb	r3, r3
 800533c:	b2da      	uxtb	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e001      	b.n	8005348 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005344:	23fc      	movs	r3, #252	@ 0xfc
 8005346:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005348:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	7bdb      	ldrb	r3, [r3, #15]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d816      	bhi.n	80053a4 <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	7bdb      	ldrb	r3, [r3, #15]
 800537a:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005384:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8005386:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	b25b      	sxtb	r3, r3
 800538e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005392:	b25a      	sxtb	r2, r3
 8005394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005398:	4313      	orrs	r3, r2
 800539a:	b25b      	sxtb	r3, r3
 800539c:	b2da      	uxtb	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	e001      	b.n	80053a8 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80053a4:	23fc      	movs	r3, #252	@ 0xfc
 80053a6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80053a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	7b9b      	ldrb	r3, [r3, #14]
 80053d2:	2b04      	cmp	r3, #4
 80053d4:	d81a      	bhi.n	800540c <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	7b9a      	ldrb	r2, [r3, #14]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	7c9b      	ldrb	r3, [r3, #18]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d016      	beq.n	8005410 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	7b9b      	ldrb	r3, [r3, #14]
 80053e6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f023 0307 	bic.w	r3, r3, #7
 80053f0:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 80053f2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	b25a      	sxtb	r2, r3
 80053fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005400:	4313      	orrs	r3, r2
 8005402:	b25b      	sxtb	r3, r3
 8005404:	b2da      	uxtb	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	e001      	b.n	8005410 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800540c:	23fc      	movs	r3, #252	@ 0xfc
 800540e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	791b      	ldrb	r3, [r3, #4]
 8005434:	2b0f      	cmp	r3, #15
 8005436:	d92b      	bls.n	8005490 <set_accel_pwr+0x70>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	2b12      	cmp	r3, #18
 800543e:	d827      	bhi.n	8005490 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	791a      	ldrb	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	7a1b      	ldrb	r3, [r3, #8]
 8005448:	429a      	cmp	r2, r3
 800544a:	d024      	beq.n	8005496 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 800544c:	f107 030e 	add.w	r3, r7, #14
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 f826 	bl	80054a4 <process_under_sampling>
 8005458:	4603      	mov	r3, r0
 800545a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800545c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d118      	bne.n	8005496 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1d19      	adds	r1, r3, #4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	207e      	movs	r0, #126	@ 0x7e
 800546e:	f7ff fa3a 	bl	80048e6 <bmi160_set_regs>
 8005472:	4603      	mov	r3, r0
 8005474:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7a1b      	ldrb	r3, [r3, #8]
 800547a:	2b10      	cmp	r3, #16
 800547c:	d103      	bne.n	8005486 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	2005      	movs	r0, #5
 8005484:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	791a      	ldrb	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800548e:	e002      	b.n	8005496 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8005490:	23f3      	movs	r3, #243	@ 0xf3
 8005492:	73fb      	strb	r3, [r7, #15]
 8005494:	e000      	b.n	8005498 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005496:	bf00      	nop
    }

    return rslt;
 8005498:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 80054b2:	2300      	movs	r3, #0
 80054b4:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	2040      	movs	r0, #64	@ 0x40
 80054be:	f7ff f9df 	bl	8004880 <bmi160_get_regs>
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d139      	bne.n	8005542 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	791b      	ldrb	r3, [r3, #4]
 80054d2:	2b12      	cmp	r3, #18
 80054d4:	d120      	bne.n	8005518 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054de:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 80054e0:	7bbb      	ldrb	r3, [r7, #14]
 80054e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2201      	movs	r2, #1
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	2040      	movs	r0, #64	@ 0x40
 80054f4:	f7ff f9f7 	bl	80048e6 <bmi160_set_regs>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 80054fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11e      	bne.n	8005542 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8005504:	f107 010c 	add.w	r1, r7, #12
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2202      	movs	r2, #2
 800550c:	2058      	movs	r0, #88	@ 0x58
 800550e:	f7ff f9ea 	bl	80048e6 <bmi160_set_regs>
 8005512:	4603      	mov	r3, r0
 8005514:	73fb      	strb	r3, [r7, #15]
 8005516:	e014      	b.n	8005542 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	b25b      	sxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	da0f      	bge.n	8005542 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552a:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7bba      	ldrb	r2, [r7, #14]
 8005530:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	2040      	movs	r0, #64	@ 0x40
 800553a:	f7ff f9d4 	bl	80048e6 <bmi160_set_regs>
 800553e:	4603      	mov	r3, r0
 8005540:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	7b1b      	ldrb	r3, [r3, #12]
 800555e:	2b14      	cmp	r3, #20
 8005560:	d007      	beq.n	8005572 <set_gyro_pwr+0x24>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	7b1b      	ldrb	r3, [r3, #12]
 8005566:	2b15      	cmp	r3, #21
 8005568:	d003      	beq.n	8005572 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800556e:	2b17      	cmp	r3, #23
 8005570:	d129      	bne.n	80055c6 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	7b1a      	ldrb	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7c1b      	ldrb	r3, [r3, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d025      	beq.n	80055ca <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f103 010c 	add.w	r1, r3, #12
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	207e      	movs	r0, #126	@ 0x7e
 800558a:	f7ff f9ac 	bl	80048e6 <bmi160_set_regs>
 800558e:	4603      	mov	r3, r0
 8005590:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7c1b      	ldrb	r3, [r3, #16]
 8005596:	2b14      	cmp	r3, #20
 8005598:	d104      	bne.n	80055a4 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	2050      	movs	r0, #80	@ 0x50
 80055a0:	4798      	blx	r3
 80055a2:	e00b      	b.n	80055bc <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7c1b      	ldrb	r3, [r3, #16]
 80055a8:	2b17      	cmp	r3, #23
 80055aa:	d107      	bne.n	80055bc <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 80055b0:	2b15      	cmp	r3, #21
 80055b2:	d103      	bne.n	80055bc <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	200a      	movs	r0, #10
 80055ba:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7b1a      	ldrb	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80055c4:	e001      	b.n	80055ca <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 80055c6:	23f3      	movs	r3, #243	@ 0xf3
 80055c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08c      	sub	sp, #48	@ 0x30
 80055da:	af00      	add	r7, sp, #0
 80055dc:	4603      	mov	r3, r0
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 80055ea:	f107 0314 	add.w	r3, r7, #20
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	605a      	str	r2, [r3, #4]
 80055f4:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	b29b      	uxth	r3, r3
 8005608:	3306      	adds	r3, #6
 800560a:	b29a      	uxth	r2, r3
 800560c:	f107 0114 	add.w	r1, r7, #20
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2012      	movs	r0, #18
 8005614:	f7ff f934 	bl	8004880 <bmi160_get_regs>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800561e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005622:	2b00      	cmp	r3, #0
 8005624:	f040 809a 	bne.w	800575c <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8005628:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005632:	3330      	adds	r3, #48	@ 0x30
 8005634:	443b      	add	r3, r7
 8005636:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800563a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800563e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005648:	3330      	adds	r3, #48	@ 0x30
 800564a:	443b      	add	r3, r7
 800564c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005654:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005658:	b21b      	sxth	r3, r3
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b21a      	sxth	r2, r3
 800565e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005662:	b21b      	sxth	r3, r3
 8005664:	4313      	orrs	r3, r2
 8005666:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	8c3a      	ldrh	r2, [r7, #32]
 800566c:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800566e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005678:	3330      	adds	r3, #48	@ 0x30
 800567a:	443b      	add	r3, r7
 800567c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005680:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005684:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800568e:	3330      	adds	r3, #48	@ 0x30
 8005690:	443b      	add	r3, r7
 8005692:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005696:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800569a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800569e:	b21b      	sxth	r3, r3
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	b21a      	sxth	r2, r3
 80056a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	8c3a      	ldrh	r2, [r7, #32]
 80056b2:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80056b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056be:	3330      	adds	r3, #48	@ 0x30
 80056c0:	443b      	add	r3, r7
 80056c2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80056ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056d4:	3330      	adds	r3, #48	@ 0x30
 80056d6:	443b      	add	r3, r7
 80056d8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80056dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80056e0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80056e4:	b21b      	sxth	r3, r3
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	8c3a      	ldrh	r2, [r7, #32]
 80056f8:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b03      	cmp	r3, #3
 80056fe:	d129      	bne.n	8005754 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 8005700:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800570a:	3330      	adds	r3, #48	@ 0x30
 800570c:	443b      	add	r3, r7
 800570e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005712:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005720:	3330      	adds	r3, #48	@ 0x30
 8005722:	443b      	add	r3, r7
 8005724:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800572c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005736:	3330      	adds	r3, #48	@ 0x30
 8005738:	443b      	add	r3, r7
 800573a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005742:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	431a      	orrs	r2, r3
 8005748:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800574c:	431a      	orrs	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	609a      	str	r2, [r3, #8]
 8005752:	e006      	b.n	8005762 <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	2200      	movs	r2, #0
 8005758:	609a      	str	r2, [r3, #8]
 800575a:	e002      	b.n	8005762 <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800575c:	23fe      	movs	r3, #254	@ 0xfe
 800575e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005762:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005766:	4618      	mov	r0, r3
 8005768:	3730      	adds	r7, #48	@ 0x30
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b08c      	sub	sp, #48	@ 0x30
 8005772:	af00      	add	r7, sp, #0
 8005774:	4603      	mov	r3, r0
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005798:	2300      	movs	r3, #0
 800579a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800579c:	2300      	movs	r3, #0
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d17e      	bne.n	80058a4 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 80057a6:	f107 0110 	add.w	r1, r7, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2206      	movs	r2, #6
 80057ae:	200c      	movs	r0, #12
 80057b0:	f7ff f866 	bl	8004880 <bmi160_get_regs>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80057ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d16c      	bne.n	800589c <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80057c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80057cc:	3330      	adds	r3, #48	@ 0x30
 80057ce:	443b      	add	r3, r7
 80057d0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80057d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80057d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80057e2:	3330      	adds	r3, #48	@ 0x30
 80057e4:	443b      	add	r3, r7
 80057e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80057ea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80057ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80057f2:	b21b      	sxth	r3, r3
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	b21a      	sxth	r2, r3
 80057f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057fc:	b21b      	sxth	r3, r3
 80057fe:	4313      	orrs	r3, r2
 8005800:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	8c3a      	ldrh	r2, [r7, #32]
 8005806:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005808:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005812:	3330      	adds	r3, #48	@ 0x30
 8005814:	443b      	add	r3, r7
 8005816:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800581a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800581e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005828:	3330      	adds	r3, #48	@ 0x30
 800582a:	443b      	add	r3, r7
 800582c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005834:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005838:	b21b      	sxth	r3, r3
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	b21a      	sxth	r2, r3
 800583e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005842:	b21b      	sxth	r3, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	8c3a      	ldrh	r2, [r7, #32]
 800584c:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800584e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005858:	3330      	adds	r3, #48	@ 0x30
 800585a:	443b      	add	r3, r7
 800585c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005864:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800586e:	3330      	adds	r3, #48	@ 0x30
 8005870:	443b      	add	r3, r7
 8005872:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005876:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800587a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800587e:	b21b      	sxth	r3, r3
 8005880:	021b      	lsls	r3, r3, #8
 8005882:	b21a      	sxth	r2, r3
 8005884:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005888:	b21b      	sxth	r3, r3
 800588a:	4313      	orrs	r3, r2
 800588c:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	8c3a      	ldrh	r2, [r7, #32]
 8005892:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2200      	movs	r2, #0
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	e0b0      	b.n	80059fe <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800589c:	23fe      	movs	r3, #254	@ 0xfe
 800589e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80058a2:	e0ac      	b.n	80059fe <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	330c      	adds	r3, #12
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	f107 0110 	add.w	r1, r7, #16
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	200c      	movs	r0, #12
 80058b4:	f7fe ffe4 	bl	8004880 <bmi160_get_regs>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80058be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f040 8098 	bne.w	80059f8 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80058c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058d2:	3330      	adds	r3, #48	@ 0x30
 80058d4:	443b      	add	r3, r7
 80058d6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80058de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058e8:	3330      	adds	r3, #48	@ 0x30
 80058ea:	443b      	add	r3, r7
 80058ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80058f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005902:	b21b      	sxth	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	8c3a      	ldrh	r2, [r7, #32]
 800590c:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800590e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005918:	3330      	adds	r3, #48	@ 0x30
 800591a:	443b      	add	r3, r7
 800591c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005924:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800592e:	3330      	adds	r3, #48	@ 0x30
 8005930:	443b      	add	r3, r7
 8005932:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005936:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800593a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800593e:	b21b      	sxth	r3, r3
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	b21a      	sxth	r2, r3
 8005944:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005948:	b21b      	sxth	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	8c3a      	ldrh	r2, [r7, #32]
 8005952:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8005954:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800595e:	3330      	adds	r3, #48	@ 0x30
 8005960:	443b      	add	r3, r7
 8005962:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800596a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005974:	3330      	adds	r3, #48	@ 0x30
 8005976:	443b      	add	r3, r7
 8005978:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800597c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005980:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005984:	b21b      	sxth	r3, r3
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	b21a      	sxth	r2, r3
 800598a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800598e:	b21b      	sxth	r3, r3
 8005990:	4313      	orrs	r3, r2
 8005992:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	8c3a      	ldrh	r2, [r7, #32]
 8005998:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 800599a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800599e:	3306      	adds	r3, #6
 80059a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 80059a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059ae:	3330      	adds	r3, #48	@ 0x30
 80059b0:	443b      	add	r3, r7
 80059b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80059ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059c4:	3330      	adds	r3, #48	@ 0x30
 80059c6:	443b      	add	r3, r7
 80059c8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80059d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059da:	3330      	adds	r3, #48	@ 0x30
 80059dc:	443b      	add	r3, r7
 80059de:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059e2:	041b      	lsls	r3, r3, #16
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80059e6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	431a      	orrs	r2, r3
 80059ec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]
 80059f6:	e002      	b.n	80059fe <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80059f8:	23fe      	movs	r3, #254	@ 0xfe
 80059fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 80059fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3730      	adds	r7, #48	@ 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b08c      	sub	sp, #48	@ 0x30
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4603      	mov	r3, r0
 8005a18:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005a20:	f107 0310 	add.w	r3, r7, #16
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	609a      	str	r2, [r3, #8]
 8005a2c:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	330c      	adds	r3, #12
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	f107 0110 	add.w	r1, r7, #16
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	200c      	movs	r0, #12
 8005a4e:	f7fe ff17 	bl	8004880 <bmi160_get_regs>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005a58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 810e 	bne.w	8005c7e <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005a62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a6c:	3330      	adds	r3, #48	@ 0x30
 8005a6e:	443b      	add	r3, r7
 8005a70:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005a78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a82:	3330      	adds	r3, #48	@ 0x30
 8005a84:	443b      	add	r3, r7
 8005a86:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005a8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	b21a      	sxth	r2, r3
 8005a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a9c:	b21b      	sxth	r3, r3
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	8c3a      	ldrh	r2, [r7, #32]
 8005aa6:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ab2:	3330      	adds	r3, #48	@ 0x30
 8005ab4:	443b      	add	r3, r7
 8005ab6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005abe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005ac8:	3330      	adds	r3, #48	@ 0x30
 8005aca:	443b      	add	r3, r7
 8005acc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ad8:	b21b      	sxth	r3, r3
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	b21a      	sxth	r2, r3
 8005ade:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ae2:	b21b      	sxth	r3, r3
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8c3a      	ldrh	r2, [r7, #32]
 8005aec:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005aee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005af8:	3330      	adds	r3, #48	@ 0x30
 8005afa:	443b      	add	r3, r7
 8005afc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005b04:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b08:	1c5a      	adds	r2, r3, #1
 8005b0a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b0e:	3330      	adds	r3, #48	@ 0x30
 8005b10:	443b      	add	r3, r7
 8005b12:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b16:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b1a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	b21a      	sxth	r2, r3
 8005b24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8c3a      	ldrh	r2, [r7, #32]
 8005b32:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8005b34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b3e:	3330      	adds	r3, #48	@ 0x30
 8005b40:	443b      	add	r3, r7
 8005b42:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b54:	3330      	adds	r3, #48	@ 0x30
 8005b56:	443b      	add	r3, r7
 8005b58:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	b21a      	sxth	r2, r3
 8005b6a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b6e:	b21b      	sxth	r3, r3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	8c3a      	ldrh	r2, [r7, #32]
 8005b78:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005b7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b84:	3330      	adds	r3, #48	@ 0x30
 8005b86:	443b      	add	r3, r7
 8005b88:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005b90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b9a:	3330      	adds	r3, #48	@ 0x30
 8005b9c:	443b      	add	r3, r7
 8005b9e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ba2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005ba6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005baa:	b21b      	sxth	r3, r3
 8005bac:	021b      	lsls	r3, r3, #8
 8005bae:	b21a      	sxth	r2, r3
 8005bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bb4:	b21b      	sxth	r3, r3
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	8c3a      	ldrh	r2, [r7, #32]
 8005bbe:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005bca:	3330      	adds	r3, #48	@ 0x30
 8005bcc:	443b      	add	r3, r7
 8005bce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005bd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005be0:	3330      	adds	r3, #48	@ 0x30
 8005be2:	443b      	add	r3, r7
 8005be4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005be8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005bec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	b21a      	sxth	r2, r3
 8005bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bfa:	b21b      	sxth	r3, r3
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	8c3a      	ldrh	r2, [r7, #32]
 8005c04:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d131      	bne.n	8005c70 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 8005c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c16:	3330      	adds	r3, #48	@ 0x30
 8005c18:	443b      	add	r3, r7
 8005c1a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c1e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005c22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c2c:	3330      	adds	r3, #48	@ 0x30
 8005c2e:	443b      	add	r3, r7
 8005c30:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005c38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c42:	3330      	adds	r3, #48	@ 0x30
 8005c44:	443b      	add	r3, r7
 8005c46:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005c4e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	431a      	orrs	r2, r3
 8005c54:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005c5e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	431a      	orrs	r2, r3
 8005c64:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	609a      	str	r2, [r3, #8]
 8005c6e:	e009      	b.n	8005c84 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	e002      	b.n	8005c84 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005c7e:	23fe      	movs	r3, #254	@ 0xfe
 8005c80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005c84:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3730      	adds	r7, #48	@ 0x30
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <perform_accel_self_test>:

/*!
 * @brief This API performs the self test for accelerometer of BMI160
 */
static int8_t perform_accel_self_test(struct bmi160_dev *dev)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08a      	sub	sp, #40	@ 0x28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    struct bmi160_sensor_data accel_pos, accel_neg;

    /* Enable Gyro self test bit */
    rslt = enable_accel_self_test(dev);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f832 	bl	8005d02 <enable_accel_self_test>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI160_OK)
 8005ca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d124      	bne.n	8005cf6 <perform_accel_self_test+0x66>
    {
        /* Perform accel self test with positive excitation */
        rslt = accel_self_test_positive_excitation(&accel_pos, dev);
 8005cac:	f107 0318 	add.w	r3, r7, #24
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 f849 	bl	8005d4a <accel_self_test_positive_excitation>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI160_OK)
 8005cbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d117      	bne.n	8005cf6 <perform_accel_self_test+0x66>
        {
            /* Perform accel self test with negative excitation */
            rslt = accel_self_test_negative_excitation(&accel_neg, dev);
 8005cc6:	f107 030c 	add.w	r3, r7, #12
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f862 	bl	8005d96 <accel_self_test_negative_excitation>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BMI160_OK)
 8005cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <perform_accel_self_test+0x66>
            {
                /* Validate the self test result */
                rslt = validate_accel_self_test(&accel_pos, &accel_neg);
 8005ce0:	f107 020c 	add.w	r2, r7, #12
 8005ce4:	f107 0318 	add.w	r3, r7, #24
 8005ce8:	4611      	mov	r1, r2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f879 	bl	8005de2 <validate_accel_self_test>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return rslt;
 8005cf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3728      	adds	r7, #40	@ 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <enable_accel_self_test>:
/*!
 * @brief This API enables to perform the accel self test by setting proper
 * configurations to facilitate accel self test
 */
static int8_t enable_accel_self_test(struct bmi160_dev *dev)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Set the Accel power mode as normal mode */
    dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2211      	movs	r2, #17
 8005d0e:	711a      	strb	r2, [r3, #4]

    /* Set the sensor range configuration as 8G */
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2208      	movs	r2, #8
 8005d14:	719a      	strb	r2, [r3, #6]
    rslt = bmi160_set_sens_conf(dev);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fe fed1 	bl	8004abe <bmi160_set_sens_conf>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <enable_accel_self_test+0x3c>
    {
        /* Accel configurations are set to facilitate self test
         * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
        reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
 8005d28:	232c      	movs	r3, #44	@ 0x2c
 8005d2a:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
 8005d2c:	f107 010e 	add.w	r1, r7, #14
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	2040      	movs	r0, #64	@ 0x40
 8005d36:	f7fe fdd6 	bl	80048e6 <bmi160_set_regs>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <accel_self_test_positive_excitation>:

/*!
 * @brief This API performs accel self test with positive excitation
 */
static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const struct bmi160_dev *dev)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with positive self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
 8005d54:	230d      	movs	r3, #13
 8005d56:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005d58:	f107 010e 	add.w	r1, r7, #14
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	206d      	movs	r0, #109	@ 0x6d
 8005d62:	f7fe fdc0 	bl	80048e6 <bmi160_set_regs>
 8005d66:	4603      	mov	r3, r0
 8005d68:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <accel_self_test_positive_excitation+0x40>
    {
        /* Read the data after a delay of 50ms - refer datasheet  2.8.1 accel self test*/
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2032      	movs	r0, #50	@ 0x32
 8005d78:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	2001      	movs	r0, #1
 8005d82:	f7fe fef6 	bl	8004b72 <bmi160_get_sensor_data>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3710      	adds	r7, #16
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <accel_self_test_negative_excitation>:

/*!
 * @brief This API performs accel self test with negative excitation
 */
static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const struct bmi160_dev *dev)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b084      	sub	sp, #16
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with negative self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
 8005da0:	2309      	movs	r3, #9
 8005da2:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005da4:	f107 010e 	add.w	r1, r7, #14
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2201      	movs	r2, #1
 8005dac:	206d      	movs	r0, #109	@ 0x6d
 8005dae:	f7fe fd9a 	bl	80048e6 <bmi160_set_regs>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <accel_self_test_negative_excitation+0x40>
    {
        /* Read the data after a delay of 50ms */
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	2032      	movs	r0, #50	@ 0x32
 8005dc4:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	2001      	movs	r0, #1
 8005dce:	f7fe fed0 	bl	8004b72 <bmi160_get_sensor_data>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <validate_accel_self_test>:
/*!
 * @brief This API validates the accel self test results
 */
static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,
                                       const struct bmi160_sensor_data *accel_neg)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Validate the results of self test */
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e00:	dd18      	ble.n	8005e34 <validate_accel_self_test+0x52>
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e10:	1ad3      	subs	r3, r2, r3
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e16:	dd0d      	ble.n	8005e34 <validate_accel_self_test+0x52>
        ((accel_neg->z - accel_pos->z) > BMI160_ACCEL_SELF_TEST_LIMIT))
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e26:	1ad3      	subs	r3, r2, r3
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e2c:	dd02      	ble.n	8005e34 <validate_accel_self_test+0x52>
    {
        /* Self test pass condition */
        rslt = BMI160_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e001      	b.n	8005e38 <validate_accel_self_test+0x56>
    }
    else
    {
        rslt = BMI160_W_ACCEl_SELF_TEST_FAIL;
 8005e34:	2302      	movs	r3, #2
 8005e36:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <perform_gyro_self_test>:

/*!
 * @brief This API performs the self test for gyroscope of BMI160
 */
static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Enable Gyro self test bit */
    rslt = enable_gyro_self_test(dev);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f815 	bl	8005e80 <enable_gyro_self_test>
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d108      	bne.n	8005e74 <perform_gyro_self_test+0x2c>
    {
        /* Validate the gyro self test a delay of 50ms */
        dev->delay_ms(50);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	2032      	movs	r0, #50	@ 0x32
 8005e68:	4798      	blx	r3

        /* Validate the gyro self test results */
        rslt = validate_gyro_self_test(dev);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 f835 	bl	8005eda <validate_gyro_self_test>
 8005e70:	4603      	mov	r3, r0
 8005e72:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <enable_gyro_self_test>:

/*!
 * @brief This API enables the self test bit to trigger self test for Gyro
 */
static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable the Gyro self test bit to trigger the self test */
    rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005e88:	f107 010e 	add.w	r1, r7, #14
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	206d      	movs	r0, #109	@ 0x6d
 8005e92:	f7fe fcf5 	bl	8004880 <bmi160_get_regs>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d115      	bne.n	8005ece <enable_gyro_self_test+0x4e>
    {
        reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
 8005ea2:	7bbb      	ldrb	r3, [r7, #14]
 8005ea4:	f043 0310 	orr.w	r3, r3, #16
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005eac:	f107 010e 	add.w	r1, r7, #14
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	206d      	movs	r0, #109	@ 0x6d
 8005eb6:	f7fe fd16 	bl	80048e6 <bmi160_set_regs>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <enable_gyro_self_test+0x4e>
        {
            /* Delay to enable gyro self test */
            dev->delay_ms(15);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	200f      	movs	r0, #15
 8005ecc:	4798      	blx	r3
        }
    }

    return rslt;
 8005ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <validate_gyro_self_test>:

/*!
 * @brief This API validates the self test results of Gyro
 */
static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Validate the Gyro self test result */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
 8005ee2:	f107 010e 	add.w	r1, r7, #14
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	201b      	movs	r0, #27
 8005eec:	f7fe fcc8 	bl	8004880 <bmi160_get_regs>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10e      	bne.n	8005f1a <validate_gyro_self_test+0x40>
    {

        reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
 8005efc:	7bbb      	ldrb	r3, [r7, #14]
 8005efe:	105b      	asrs	r3, r3, #1
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	73bb      	strb	r3, [r7, #14]
        if (reg_data == BMI160_ENABLE)
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d102      	bne.n	8005f16 <validate_gyro_self_test+0x3c>
        {
            /* Gyro self test success case */
            rslt = BMI160_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
 8005f14:	e001      	b.n	8005f1a <validate_gyro_self_test+0x40>
        }
        else
        {
            rslt = BMI160_W_GYRO_SELF_TEST_FAIL;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <bmi160_i2c_write>:
		  Error_Handler();
	  }
}

int8_t bmi160_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af04      	add	r7, sp, #16
 8005f2e:	603a      	str	r2, [r7, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
 8005f36:	460b      	mov	r3, r1
 8005f38:	71bb      	strb	r3, [r7, #6]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 8005f44:	79fb      	ldrb	r3, [r7, #7]
 8005f46:	b299      	uxth	r1, r3
 8005f48:	79bb      	ldrb	r3, [r7, #6]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	88bb      	ldrh	r3, [r7, #4]
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4803      	ldr	r0, [pc, #12]	@ (8005f6c <bmi160_i2c_write+0x44>)
 8005f5e:	f7fc f90f 	bl	8002180 <HAL_I2C_Mem_Write>
	return ( BMI160_OK );
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	200001fc 	.word	0x200001fc

08005f70 <bmi160_i2c_read>:
int8_t bmi160_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	603a      	str	r2, [r7, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	71bb      	strb	r3, [r7, #6]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	b299      	uxth	r1, r3
 8005f96:	79bb      	ldrb	r3, [r7, #6]
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f9e:	9302      	str	r3, [sp, #8]
 8005fa0:	88bb      	ldrh	r3, [r7, #4]
 8005fa2:	9301      	str	r3, [sp, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4804      	ldr	r0, [pc, #16]	@ (8005fbc <bmi160_i2c_read+0x4c>)
 8005fac:	f7fc f9e2 	bl	8002374 <HAL_I2C_Mem_Read>
	return ( BMI160_OK );
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200001fc 	.word	0x200001fc

08005fc0 <delay_ms>:
void delay_ms(uint32_t period)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);		//Systick yerine TIM6 olacak
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f7fb fcd9 	bl	8001980 <HAL_Delay>
}
 8005fce:	bf00      	nop
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
	...

08005fd8 <init_bmi160_sensor_driver_interface>:

int8_t init_bmi160_sensor_driver_interface(struct bmi160_dev *bmi160)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <init_bmi160_sensor_driver_interface+0x12>
	{
	  Error_Handler();
 8005fe6:	f7fb fa05 	bl	80013f4 <Error_Handler>

	#if ( ( BMI160_I2C_INTERFACE) && ( !BMI160_SPI_INTERFACE ) )

	int8_t rslt;

	bmi160_soft_reset(bmi160);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fe fd2c 	bl	8004a48 <bmi160_soft_reset>

	bmi160->id = BMI160_DEV_ADDR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2268      	movs	r2, #104	@ 0x68
 8005ff4:	705a      	strb	r2, [r3, #1]
	bmi160->intf = BMI160_I2C_INTF;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	709a      	strb	r2, [r3, #2]
	bmi160->read = bmi160_i2c_read;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8006170 <init_bmi160_sensor_driver_interface+0x198>)
 8006000:	61da      	str	r2, [r3, #28]
	bmi160->write = bmi160_i2c_write;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a5b      	ldr	r2, [pc, #364]	@ (8006174 <init_bmi160_sensor_driver_interface+0x19c>)
 8006006:	621a      	str	r2, [r3, #32]
	bmi160->delay_ms = delay_ms;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a5b      	ldr	r2, [pc, #364]	@ (8006178 <init_bmi160_sensor_driver_interface+0x1a0>)
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24

	/* After sensor init introduce 200 msec sleep */
	bmi160->delay_ms(200);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006012:	20c8      	movs	r0, #200	@ 0xc8
 8006014:	4798      	blx	r3

	rslt = bmi160_init(bmi160);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fe fcc8 	bl	80049ac <bmi160_init>
 800601c:	4603      	mov	r3, r0
 800601e:	77fb      	strb	r3, [r7, #31]

	if ( rslt != BMI160_OK )
 8006020:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <init_bmi160_sensor_driver_interface+0x5a>
	{
		printf("BMI160 initialization failure !\n");
 8006028:	4854      	ldr	r0, [pc, #336]	@ (800617c <init_bmi160_sensor_driver_interface+0x1a4>)
 800602a:	f003 f8ad 	bl	8009188 <puts>
		Error_Handler();
 800602e:	f7fb f9e1 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 initialization success !\n");
 8006032:	4853      	ldr	r0, [pc, #332]	@ (8006180 <init_bmi160_sensor_driver_interface+0x1a8>)
 8006034:	f003 f8a8 	bl	8009188 <puts>
	printf("Chip ID 0x%X\n" , bmi160->chip_id);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	4619      	mov	r1, r3
 800603e:	4851      	ldr	r0, [pc, #324]	@ (8006184 <init_bmi160_sensor_driver_interface+0x1ac>)
 8006040:	f003 f83a 	bl	80090b8 <iprintf>

	//acceleration self-test configuration
	rslt = bmi160_perform_self_test(BMI160_ACCEL_ONLY,bmi160);
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	2001      	movs	r0, #1
 8006048:	f7fe fdfa 	bl	8004c40 <bmi160_perform_self_test>
 800604c:	4603      	mov	r3, r0
 800604e:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 8006050:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <init_bmi160_sensor_driver_interface+0x8a>
	{
		printf("BMI160 acceleration self-test failure !\n");
 8006058:	484b      	ldr	r0, [pc, #300]	@ (8006188 <init_bmi160_sensor_driver_interface+0x1b0>)
 800605a:	f003 f895 	bl	8009188 <puts>
		Error_Handler();
 800605e:	f7fb f9c9 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 acceleration self-test success !\n");
 8006062:	484a      	ldr	r0, [pc, #296]	@ (800618c <init_bmi160_sensor_driver_interface+0x1b4>)
 8006064:	f003 f890 	bl	8009188 <puts>

	//gyroscope self-test configuration
	rslt = bmi160_perform_self_test(BMI160_GYRO_ONLY,bmi160);
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	2002      	movs	r0, #2
 800606c:	f7fe fde8 	bl	8004c40 <bmi160_perform_self_test>
 8006070:	4603      	mov	r3, r0
 8006072:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 8006074:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <init_bmi160_sensor_driver_interface+0xae>
	{
		printf("BMI160 gyroscope self-test failure !\n");
 800607c:	4844      	ldr	r0, [pc, #272]	@ (8006190 <init_bmi160_sensor_driver_interface+0x1b8>)
 800607e:	f003 f883 	bl	8009188 <puts>
		Error_Handler();
 8006082:	f7fb f9b7 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 gyroscope self-test success !\n");
 8006086:	4843      	ldr	r0, [pc, #268]	@ (8006194 <init_bmi160_sensor_driver_interface+0x1bc>)
 8006088:	f003 f87e 	bl	8009188 <puts>

	/* Select the Output data rate, range of accelerometer sensor */
	bmi160->accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	220c      	movs	r2, #12
 8006090:	715a      	strb	r2, [r3, #5]
	bmi160->accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	220c      	movs	r2, #12
 8006096:	719a      	strb	r2, [r3, #6]
	bmi160->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	71da      	strb	r2, [r3, #7]

	/* Select the power mode of accelerometer sensor */
	bmi160->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2211      	movs	r2, #17
 80060a2:	711a      	strb	r2, [r3, #4]

	/* Select the Output data rate, range of Gyroscope sensor */
	bmi160->gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	220d      	movs	r2, #13
 80060a8:	735a      	strb	r2, [r3, #13]
	bmi160->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	739a      	strb	r2, [r3, #14]
	bmi160->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	73da      	strb	r2, [r3, #15]

	/* Select the power mode of Gyroscope sensor */
	bmi160->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2215      	movs	r2, #21
 80060ba:	731a      	strb	r2, [r3, #12]

	/* Set the sensor configuration */
	rslt = bmi160_set_power_mode(bmi160);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fe fd34 	bl	8004b2a <bmi160_set_power_mode>
 80060c2:	4603      	mov	r3, r0
 80060c4:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 80060c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d004      	beq.n	80060d8 <init_bmi160_sensor_driver_interface+0x100>
	{
		printf("BMI160 sensor configuration failure !\n");
 80060ce:	4832      	ldr	r0, [pc, #200]	@ (8006198 <init_bmi160_sensor_driver_interface+0x1c0>)
 80060d0:	f003 f85a 	bl	8009188 <puts>
		Error_Handler();
 80060d4:	f7fb f98e 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 sensor configuration success !\n");
 80060d8:	4830      	ldr	r0, [pc, #192]	@ (800619c <init_bmi160_sensor_driver_interface+0x1c4>)
 80060da:	f003 f855 	bl	8009188 <puts>

	struct bmi160_offsets bmi160_offset = {0};
 80060de:	f107 0314 	add.w	r3, r7, #20
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	605a      	str	r2, [r3, #4]
 80060e8:	811a      	strh	r2, [r3, #8]
	struct bmi160_foc_conf bmi160_foc = {0};
 80060ea:	f107 030c 	add.w	r3, r7, #12
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	809a      	strh	r2, [r3, #4]

	rslt = bmi160_get_offsets(&bmi160_offset,bmi160);
 80060f4:	f107 0314 	add.w	r3, r7, #20
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe fded 	bl	8004cda <bmi160_get_offsets>
 8006100:	4603      	mov	r3, r0
 8006102:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 8006104:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d004      	beq.n	8006116 <init_bmi160_sensor_driver_interface+0x13e>
	{
		printf("BMI160 sensor offset value failure !\n");
 800610c:	4824      	ldr	r0, [pc, #144]	@ (80061a0 <init_bmi160_sensor_driver_interface+0x1c8>)
 800610e:	f003 f83b 	bl	8009188 <puts>
		Error_Handler();
 8006112:	f7fb f96f 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 8006116:	4823      	ldr	r0, [pc, #140]	@ (80061a4 <init_bmi160_sensor_driver_interface+0x1cc>)
 8006118:	f003 f836 	bl	8009188 <puts>

	bmi160_foc.acc_off_en = BMI160_ENABLE;
 800611c:	2301      	movs	r3, #1
 800611e:	743b      	strb	r3, [r7, #16]
	bmi160_foc.gyro_off_en = BMI160_ENABLE;
 8006120:	2301      	movs	r3, #1
 8006122:	747b      	strb	r3, [r7, #17]
	bmi160_foc.foc_gyr_en = BMI160_FOC_ACCEL_POSITIVE_G;
 8006124:	2301      	movs	r3, #1
 8006126:	733b      	strb	r3, [r7, #12]
	bmi160_foc.foc_acc_x = BMI160_FOC_ACCEL_POSITIVE_G;
 8006128:	2301      	movs	r3, #1
 800612a:	737b      	strb	r3, [r7, #13]
	bmi160_foc.foc_acc_y = BMI160_FOC_ACCEL_POSITIVE_G;
 800612c:	2301      	movs	r3, #1
 800612e:	73bb      	strb	r3, [r7, #14]
	bmi160_foc.foc_acc_z = BMI160_FOC_ACCEL_POSITIVE_G;
 8006130:	2301      	movs	r3, #1
 8006132:	73fb      	strb	r3, [r7, #15]

	bmi160_set_offsets(&bmi160_foc, &bmi160_offset, bmi160);
 8006134:	f107 0114 	add.w	r1, r7, #20
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fe fe4c 	bl	8004ddc <bmi160_set_offsets>

	if( rslt != BMI160_OK )
 8006144:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d004      	beq.n	8006156 <init_bmi160_sensor_driver_interface+0x17e>
	{
		printf("BMI160 sensor offset value failure !\n");
 800614c:	4814      	ldr	r0, [pc, #80]	@ (80061a0 <init_bmi160_sensor_driver_interface+0x1c8>)
 800614e:	f003 f81b 	bl	8009188 <puts>
		Error_Handler();
 8006152:	f7fb f94f 	bl	80013f4 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 8006156:	4813      	ldr	r0, [pc, #76]	@ (80061a4 <init_bmi160_sensor_driver_interface+0x1cc>)
 8006158:	f003 f816 	bl	8009188 <puts>

	HAL_Delay(2000);
 800615c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8006160:	f7fb fc0e 	bl	8001980 <HAL_Delay>

	return ( BMI160_OK );
 8006164:	2300      	movs	r3, #0

	#else
		Error_Handler();
	#endif
	return ( BMI160_E_INVALID_CONFIG );
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	08005f71 	.word	0x08005f71
 8006174:	08005f29 	.word	0x08005f29
 8006178:	08005fc1 	.word	0x08005fc1
 800617c:	0800ca80 	.word	0x0800ca80
 8006180:	0800caa0 	.word	0x0800caa0
 8006184:	0800cac0 	.word	0x0800cac0
 8006188:	0800cad0 	.word	0x0800cad0
 800618c:	0800caf8 	.word	0x0800caf8
 8006190:	0800cb20 	.word	0x0800cb20
 8006194:	0800cb48 	.word	0x0800cb48
 8006198:	0800cb70 	.word	0x0800cb70
 800619c:	0800cb98 	.word	0x0800cb98
 80061a0:	0800cbc0 	.word	0x0800cbc0
 80061a4:	0800cbe8 	.word	0x0800cbe8

080061a8 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f001 fbc0 	bl	800793a <null_ptr_check>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d131      	bne.n	800622a <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7a1b      	ldrb	r3, [r3, #8]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d003      	beq.n	80061d6 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	729a      	strb	r2, [r3, #10]
 80061d4:	e002      	b.n	80061dc <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 80061dc:	f107 010e 	add.w	r1, r7, #14
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	2000      	movs	r0, #0
 80061e6:	f000 f826 	bl	8006236 <bmp3_get_regs>
 80061ea:	4603      	mov	r3, r0
 80061ec:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d119      	bne.n	800622a <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 80061f6:	7bbb      	ldrb	r3, [r7, #14]
 80061f8:	2b50      	cmp	r3, #80	@ 0x50
 80061fa:	d002      	beq.n	8006202 <bmp3_init+0x5a>
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b60      	cmp	r3, #96	@ 0x60
 8006200:	d111      	bne.n	8006226 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8006202:	7bba      	ldrb	r2, [r7, #14]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f987 	bl	800651c <bmp3_soft_reset>
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8006212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d107      	bne.n	800622a <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fb29 	bl	8006872 <get_calib_data>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8006224:	e001      	b.n	800622a <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8006226:	23f9      	movs	r3, #249	@ 0xf9
 8006228:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800622a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8006236:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800623a:	b08b      	sub	sp, #44	@ 0x2c
 800623c:	af00      	add	r7, sp, #0
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8006248:	6838      	ldr	r0, [r7, #0]
 800624a:	f001 fb76 	bl	800793a <null_ptr_check>
 800624e:	4603      	mov	r3, r0
 8006250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8006254:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006258:	2b00      	cmp	r3, #0
 800625a:	d172      	bne.n	8006342 <bmp3_get_regs+0x10c>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d06f      	beq.n	8006342 <bmp3_get_regs+0x10c>
    {
 8006262:	466b      	mov	r3, sp
 8006264:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	7a9b      	ldrb	r3, [r3, #10]
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	7a9b      	ldrb	r3, [r3, #10]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	18d1      	adds	r1, r2, r3
 800627c:	460b      	mov	r3, r1
 800627e:	3b01      	subs	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	2300      	movs	r3, #0
 8006284:	4688      	mov	r8, r1
 8006286:	4699      	mov	r9, r3
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006294:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006298:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629c:	2300      	movs	r3, #0
 800629e:	460c      	mov	r4, r1
 80062a0:	461d      	mov	r5, r3
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	00eb      	lsls	r3, r5, #3
 80062ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062b0:	00e2      	lsls	r2, r4, #3
 80062b2:	1dcb      	adds	r3, r1, #7
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	ebad 0d03 	sub.w	sp, sp, r3
 80062bc:	466b      	mov	r3, sp
 80062be:	3300      	adds	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	7a1b      	ldrb	r3, [r3, #8]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d025      	beq.n	8006316 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80062d0:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68dc      	ldr	r4, [r3, #12]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	7bf8      	ldrb	r0, [r7, #15]
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	6979      	ldr	r1, [r7, #20]
 80062e0:	47a0      	blx	r4
 80062e2:	4603      	mov	r3, r0
 80062e4:	461a      	mov	r2, r3
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 80062ea:	2300      	movs	r3, #0
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	e00d      	b.n	800630c <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	7a9b      	ldrb	r3, [r3, #10]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	441a      	add	r2, r3
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	440b      	add	r3, r1
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	5c8a      	ldrb	r2, [r1, r2]
 8006304:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	3301      	adds	r3, #1
 800630a:	623b      	str	r3, [r7, #32]
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d3ed      	bcc.n	80062f0 <bmp3_get_regs+0xba>
 8006314:	e00b      	b.n	800632e <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68dc      	ldr	r4, [r3, #12]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	7bf8      	ldrb	r0, [r7, #15]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	47a0      	blx	r4
 8006326:	4603      	mov	r3, r0
 8006328:	461a      	mov	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 8006338:	23fe      	movs	r3, #254	@ 0xfe
 800633a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800633e:	46b5      	mov	sp, r6
    {
 8006340:	e002      	b.n	8006348 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006342:	23ff      	movs	r3, #255	@ 0xff
 8006344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006348:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800634c:	4618      	mov	r0, r3
 800634e:	372c      	adds	r7, #44	@ 0x2c
 8006350:	46bd      	mov	sp, r7
 8006352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006356 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8006356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800635a:	b08b      	sub	sp, #44	@ 0x2c
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	466b      	mov	r3, sp
 8006368:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0059      	lsls	r1, r3, #1
 800636e:	460b      	mov	r3, r1
 8006370:	3b01      	subs	r3, #1
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	2300      	movs	r3, #0
 8006376:	4688      	mov	r8, r1
 8006378:	4699      	mov	r9, r3
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 0300 	mov.w	r3, #0
 8006382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800638a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800638e:	2300      	movs	r3, #0
 8006390:	460c      	mov	r4, r1
 8006392:	461d      	mov	r5, r3
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	00eb      	lsls	r3, r5, #3
 800639e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063a2:	00e2      	lsls	r2, r4, #3
 80063a4:	1dcb      	adds	r3, r1, #7
 80063a6:	08db      	lsrs	r3, r3, #3
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	ebad 0d03 	sub.w	sp, sp, r3
 80063ae:	466b      	mov	r3, sp
 80063b0:	3300      	adds	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80063b4:	6838      	ldr	r0, [r7, #0]
 80063b6:	f001 fac0 	bl	800793a <null_ptr_check>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80063c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d14e      	bne.n	8006466 <bmp3_set_regs+0x110>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04b      	beq.n	8006466 <bmp3_set_regs+0x110>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d048      	beq.n	8006466 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d041      	beq.n	800645e <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	7a1b      	ldrb	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d114      	bne.n	8006414 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80063ea:	2300      	movs	r3, #0
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e00d      	b.n	800640c <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80063f0:	7ffb      	ldrb	r3, [r7, #31]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	781a      	ldrb	r2, [r3, #0]
 80063f8:	7ffb      	ldrb	r3, [r7, #31]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	440b      	add	r3, r1
 80063fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8006406:	7ffb      	ldrb	r3, [r7, #31]
 8006408:	3301      	adds	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	7ffb      	ldrb	r3, [r7, #31]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d8ed      	bhi.n	80063f0 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d909      	bls.n	800642e <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fa4a 	bl	80068ba <interleave_reg_addr>
                temp_len = len * 2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	e001      	b.n	8006432 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	691c      	ldr	r4, [r3, #16]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	7818      	ldrb	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	6979      	ldr	r1, [r7, #20]
 8006442:	47a0      	blx	r4
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8006456:	23fe      	movs	r3, #254	@ 0xfe
 8006458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 800645c:	e007      	b.n	800646e <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800645e:	23fa      	movs	r3, #250	@ 0xfa
 8006460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 8006464:	e003      	b.n	800646e <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006466:	23ff      	movs	r3, #255	@ 0xff
 8006468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800646c:	e000      	b.n	8006470 <bmp3_set_regs+0x11a>
        if (len != 0)
 800646e:	bf00      	nop
    }

    return rslt;
 8006470:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006474:	46b5      	mov	sp, r6
}
 8006476:	4618      	mov	r0, r3
 8006478:	372c      	adds	r7, #44	@ 0x2c
 800647a:	46bd      	mov	sp, r7
 800647c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006480 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d03a      	beq.n	800650c <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	2006      	movs	r0, #6
 800649a:	f001 fa36 	bl	800790a <are_settings_changed>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fa6c 	bl	8006986 <set_pwr_ctrl_settings>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	20f0      	movs	r0, #240	@ 0xf0
 80064b6:	f001 fa28 	bl	800790a <are_settings_changed>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 faad 	bl	8006a24 <set_odr_filter_settings>
 80064ca:	4603      	mov	r3, r0
 80064cc:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 80064ce:	68f9      	ldr	r1, [r7, #12]
 80064d0:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 80064d4:	f001 fa19 	bl	800790a <are_settings_changed>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	68b9      	ldr	r1, [r7, #8]
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f000 fb0b 	bl	8006afe <set_int_ctrl_settings>
 80064e8:	4603      	mov	r3, r0
 80064ea:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 80064ec:	68f9      	ldr	r1, [r7, #12]
 80064ee:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 80064f2:	f001 fa0a 	bl	800790a <are_settings_changed>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f000 fb79 	bl	8006bf8 <set_advance_settings>
 8006506:	4603      	mov	r3, r0
 8006508:	75fb      	strb	r3, [r7, #23]
 800650a:	e001      	b.n	8006510 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800650c:	23ff      	movs	r3, #255	@ 0xff
 800650e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006510:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 8006524:	237e      	movs	r3, #126	@ 0x7e
 8006526:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 8006528:	23b6      	movs	r3, #182	@ 0xb6
 800652a:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800652c:	f107 010c 	add.w	r1, r7, #12
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	2003      	movs	r0, #3
 8006536:	f7ff fe7e 	bl	8006236 <bmp3_get_regs>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800653e:	7b3b      	ldrb	r3, [r7, #12]
 8006540:	f003 0310 	and.w	r3, r3, #16
 8006544:	2b00      	cmp	r3, #0
 8006546:	d02d      	beq.n	80065a4 <bmp3_soft_reset+0x88>
 8006548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d129      	bne.n	80065a4 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8006550:	f107 010d 	add.w	r1, r7, #13
 8006554:	f107 000e 	add.w	r0, r7, #14
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f7ff fefb 	bl	8006356 <bmp3_set_regs>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8006564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d11b      	bne.n	80065a4 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6852      	ldr	r2, [r2, #4]
 8006574:	4611      	mov	r1, r2
 8006576:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800657a:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800657c:	f107 010b 	add.w	r1, r7, #11
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	2002      	movs	r0, #2
 8006586:	f7ff fe56 	bl	8006236 <bmp3_get_regs>
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006594:	2b00      	cmp	r3, #0
 8006596:	d103      	bne.n	80065a0 <bmp3_soft_reset+0x84>
 8006598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 80065a0:	23fc      	movs	r3, #252	@ 0xfc
 80065a2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80065a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80065ba:	6838      	ldr	r0, [r7, #0]
 80065bc:	f001 f9bd 	bl	800793a <null_ptr_check>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 80065c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d139      	bne.n	8006640 <bmp3_set_op_mode+0x90>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d036      	beq.n	8006640 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80065d8:	f107 030d 	add.w	r3, r7, #13
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f838 	bl	8006654 <bmp3_get_op_mode>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 80065e8:	7b7b      	ldrb	r3, [r7, #13]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <bmp3_set_op_mode+0x60>
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10c      	bne.n	8006610 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80065f6:	6838      	ldr	r0, [r7, #0]
 80065f8:	f000 f8f9 	bl	80067ee <put_device_to_sleep>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	6852      	ldr	r2, [r2, #4]
 8006608:	4611      	mov	r1, r2
 800660a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800660e:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8006610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d116      	bne.n	8006646 <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 8006618:	7bbb      	ldrb	r3, [r7, #14]
 800661a:	2b03      	cmp	r3, #3
 800661c:	d106      	bne.n	800662c <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f87a 	bl	800671a <set_normal_mode>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
    {
 800662a:	e00c      	b.n	8006646 <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d109      	bne.n	8006646 <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 f8a3 	bl	8006780 <write_power_mode>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]
    {
 800663e:	e002      	b.n	8006646 <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006640:	23ff      	movs	r3, #255	@ 0xff
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	e000      	b.n	8006648 <bmp3_set_op_mode+0x98>
    {
 8006646:	bf00      	nop
    }

    return rslt;
 8006648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2201      	movs	r2, #1
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	201b      	movs	r0, #27
 800666c:	f7ff fde3 	bl	8006236 <bmp3_get_regs>
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	111b      	asrs	r3, r3, #4
 800667a:	b2db      	uxtb	r3, r3
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	b2da      	uxtb	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	e001      	b.n	800668c <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006688:	23ff      	movs	r3, #255	@ 0xff
 800668a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800668c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	@ 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 80066a6:	f107 0320 	add.w	r3, r7, #32
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 80066b0:	f107 0310 	add.w	r3, r7, #16
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
 80066bc:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d021      	beq.n	8006708 <bmp3_get_sensor_data+0x70>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80066c4:	f107 0120 	add.w	r1, r7, #32
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2206      	movs	r2, #6
 80066cc:	2004      	movs	r0, #4
 80066ce:	f7ff fdb2 	bl	8006236 <bmp3_get_regs>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMP3_OK)
 80066d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d116      	bne.n	800670e <bmp3_get_sensor_data+0x76>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80066e0:	f107 0210 	add.w	r2, r7, #16
 80066e4:	f107 0320 	add.w	r3, r7, #32
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fc76 	bl	8006fdc <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3318      	adds	r3, #24
 80066f4:	f107 0110 	add.w	r1, r7, #16
 80066f8:	7bf8      	ldrb	r0, [r7, #15]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	f000 fca9 	bl	8007052 <compensate_data>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006706:	e002      	b.n	800670e <bmp3_get_sensor_data+0x76>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006708:	23ff      	movs	r3, #255	@ 0xff
 800670a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800670e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006712:	4618      	mov	r0, r3
 8006714:	3728      	adds	r7, #40	@ 0x28
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
 8006722:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 8006724:	6839      	ldr	r1, [r7, #0]
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f889 	bl	800683e <validate_normal_mode_settings>
 800672c:	4603      	mov	r3, r0
 800672e:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8006730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d11d      	bne.n	8006774 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f820 	bl	8006780 <write_power_mode>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8006744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d113      	bne.n	8006774 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800674c:	f107 010e 	add.w	r1, r7, #14
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2201      	movs	r2, #1
 8006754:	2002      	movs	r0, #2
 8006756:	f7ff fd6e 	bl	8006236 <bmp3_get_regs>
 800675a:	4603      	mov	r3, r0
 800675c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800675e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8006770:	23fb      	movs	r3, #251	@ 0xfb
 8006772:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8006774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800678a:	231b      	movs	r3, #27
 800678c:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8006794:	7b78      	ldrb	r0, [r7, #13]
 8006796:	f107 010c 	add.w	r1, r7, #12
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	f7ff fd4a 	bl	8006236 <bmp3_get_regs>
 80067a2:	4603      	mov	r3, r0
 80067a4:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 80067a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d119      	bne.n	80067e2 <write_power_mode+0x62>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 80067ae:	7b3b      	ldrb	r3, [r7, #12]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80067b6:	b25a      	sxtb	r2, r3
 80067b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	4313      	orrs	r3, r2
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80067ce:	f107 010c 	add.w	r1, r7, #12
 80067d2:	f107 000d 	add.w	r0, r7, #13
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2201      	movs	r2, #1
 80067da:	f7ff fdbc 	bl	8006356 <bmp3_set_regs>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80067f6:	231b      	movs	r3, #27
 80067f8:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80067fa:	f107 010d 	add.w	r1, r7, #13
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	201b      	movs	r0, #27
 8006804:	f7ff fd17 	bl	8006236 <bmp3_get_regs>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800680c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10e      	bne.n	8006832 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8006814:	7b7b      	ldrb	r3, [r7, #13]
 8006816:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800681a:	b2db      	uxtb	r3, r3
 800681c:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800681e:	f107 010d 	add.w	r1, r7, #13
 8006822:	f107 000e 	add.w	r0, r7, #14
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f7ff fd94 	bl	8006356 <bmp3_set_regs>
 800682e:	4603      	mov	r3, r0
 8006830:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fa29 	bl	8006ca2 <get_odr_filter_settings>
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8006854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d104      	bne.n	8006866 <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fa3d 	bl	8006cdc <validate_osr_and_odr_settings>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b088      	sub	sp, #32
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 800687a:	2331      	movs	r3, #49	@ 0x31
 800687c:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800687e:	f107 0308 	add.w	r3, r7, #8
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
 8006888:	609a      	str	r2, [r3, #8]
 800688a:	60da      	str	r2, [r3, #12]
 800688c:	611a      	str	r2, [r3, #16]
 800688e:	751a      	strb	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	7ff8      	ldrb	r0, [r7, #31]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2215      	movs	r2, #21
 800689a:	f7ff fccc 	bl	8006236 <bmp3_get_regs>
 800689e:	4603      	mov	r3, r0
 80068a0:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 80068a2:	f107 0308 	add.w	r3, r7, #8
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fc45 	bl	8007138 <parse_calib_data>

    return rslt;
 80068ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
 80068c6:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80068c8:	2301      	movs	r3, #1
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	e015      	b.n	80068fa <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	441a      	add	r2, r3
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	3b01      	subs	r3, #1
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	440b      	add	r3, r1
 80068de:	7812      	ldrb	r2, [r2, #0]
 80068e0:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	441a      	add	r2, r3
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	440b      	add	r3, r1
 80068f0:	7812      	ldrb	r2, [r2, #0]
 80068f2:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3301      	adds	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d3e5      	bcc.n	80068ce <interleave_reg_addr+0x14>
    }
}
 8006902:	bf00      	nop
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4413      	add	r3, r2
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	f003 0307 	and.w	r3, r3, #7
 800692a:	b2da      	uxtb	r2, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4413      	add	r3, r2
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	10db      	asrs	r3, r3, #3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	b2da      	uxtb	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	3301      	adds	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	f003 031f 	and.w	r3, r3, #31
 8006958:	b2da      	uxtb	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	3302      	adds	r3, #2
 8006962:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	4413      	add	r3, r2
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	105b      	asrs	r3, r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	b2da      	uxtb	r2, r3
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	709a      	strb	r2, [r3, #2]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b086      	sub	sp, #24
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8006992:	231b      	movs	r3, #27
 8006994:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006996:	7db8      	ldrb	r0, [r7, #22]
 8006998:	f107 0115 	add.w	r1, r7, #21
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f7ff fc49 	bl	8006236 <bmp3_get_regs>
 80069a4:	4603      	mov	r3, r0
 80069a6:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 80069a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d133      	bne.n	8006a18 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f003 0302 	and.w	r3, r3, #2
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 80069ba:	7d7b      	ldrb	r3, [r7, #21]
 80069bc:	b25b      	sxtb	r3, r3
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	b25a      	sxtb	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	785b      	ldrb	r3, [r3, #1]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	4313      	orrs	r3, r2
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d010      	beq.n	8006a04 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 80069e2:	7d7b      	ldrb	r3, [r7, #21]
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	f023 0302 	bic.w	r3, r3, #2
 80069ea:	b25a      	sxtb	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	789b      	ldrb	r3, [r3, #2]
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	b25b      	sxtb	r3, r3
 80069fc:	4313      	orrs	r3, r2
 80069fe:	b25b      	sxtb	r3, r3
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006a04:	f107 0115 	add.w	r1, r7, #21
 8006a08:	f107 0016 	add.w	r0, r7, #22
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f7ff fca1 	bl	8006356 <bmp3_set_regs>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b08a      	sub	sp, #40	@ 0x28
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8006a30:	f107 031c 	add.w	r3, r7, #28
 8006a34:	2100      	movs	r1, #0
 8006a36:	460a      	mov	r2, r1
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	460a      	mov	r2, r1
 8006a3c:	709a      	strb	r2, [r3, #2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8006a42:	f107 0118 	add.w	r1, r7, #24
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2204      	movs	r2, #4
 8006a4a:	201c      	movs	r0, #28
 8006a4c:	f7ff fbf3 	bl	8006236 <bmp3_get_regs>
 8006a50:	4603      	mov	r3, r0
 8006a52:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8006a54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d14a      	bne.n	8006af2 <set_odr_filter_settings+0xce>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8006a5c:	68f9      	ldr	r1, [r7, #12]
 8006a5e:	2030      	movs	r0, #48	@ 0x30
 8006a60:	f000 ff53 	bl	800790a <are_settings_changed>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <set_odr_filter_settings+0x5e>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8006a6a:	f107 0017 	add.w	r0, r7, #23
 8006a6e:	f107 0218 	add.w	r2, r7, #24
 8006a72:	f107 011c 	add.w	r1, r7, #28
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f9e3 	bl	8006e48 <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	2080      	movs	r0, #128	@ 0x80
 8006a86:	f000 ff40 	bl	800790a <are_settings_changed>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <set_odr_filter_settings+0x7e>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8006a90:	f107 0217 	add.w	r2, r7, #23
 8006a94:	f107 0118 	add.w	r1, r7, #24
 8006a98:	f107 001c 	add.w	r0, r7, #28
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f000 fa2c 	bl	8006efa <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8006aa2:	68f9      	ldr	r1, [r7, #12]
 8006aa4:	2040      	movs	r0, #64	@ 0x40
 8006aa6:	f000 ff30 	bl	800790a <are_settings_changed>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d008      	beq.n	8006ac2 <set_odr_filter_settings+0x9e>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8006ab0:	f107 0217 	add.w	r2, r7, #23
 8006ab4:	f107 0118 	add.w	r1, r7, #24
 8006ab8:	f107 001c 	add.w	r0, r7, #28
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f000 fa56 	bl	8006f6e <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d104      	bne.n	8006ad4 <set_odr_filter_settings+0xb0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8006aca:	68b8      	ldr	r0, [r7, #8]
 8006acc:	f000 f906 	bl	8006cdc <validate_osr_and_odr_settings>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8006ad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <set_odr_filter_settings+0xce>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f107 0118 	add.w	r1, r7, #24
 8006ae4:	f107 001c 	add.w	r0, r7, #28
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f7ff fc34 	bl	8006356 <bmp3_set_regs>
 8006aee:	4603      	mov	r3, r0
 8006af0:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8006af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3720      	adds	r7, #32
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8006b0a:	2319      	movs	r3, #25
 8006b0c:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006b0e:	7d78      	ldrb	r0, [r7, #21]
 8006b10:	f107 0116 	add.w	r1, r7, #22
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f7ff fb8d 	bl	8006236 <bmp3_get_regs>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8006b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d161      	bne.n	8006bec <set_int_ctrl_settings+0xee>
    {
        int_settings = settings->int_settings;
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f107 0310 	add.w	r3, r7, #16
 8006b2e:	3207      	adds	r2, #7
 8006b30:	6810      	ldr	r0, [r2, #0]
 8006b32:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8006b3e:	7dbb      	ldrb	r3, [r7, #22]
 8006b40:	b25b      	sxtb	r3, r3
 8006b42:	f023 0301 	bic.w	r3, r3, #1
 8006b46:	b25a      	sxtb	r2, r3
 8006b48:	7c3b      	ldrb	r3, [r7, #16]
 8006b4a:	b25b      	sxtb	r3, r3
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	b25b      	sxtb	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b25b      	sxtb	r3, r3
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00f      	beq.n	8006b84 <set_int_ctrl_settings+0x86>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8006b64:	7dbb      	ldrb	r3, [r7, #22]
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	f023 0302 	bic.w	r3, r3, #2
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	7c7b      	ldrb	r3, [r7, #17]
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	b25b      	sxtb	r3, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	b25b      	sxtb	r3, r3
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00f      	beq.n	8006bae <set_int_ctrl_settings+0xb0>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8006b8e:	7dbb      	ldrb	r3, [r7, #22]
 8006b90:	b25b      	sxtb	r3, r3
 8006b92:	f023 0304 	bic.w	r3, r3, #4
 8006b96:	b25a      	sxtb	r2, r3
 8006b98:	7cbb      	ldrb	r3, [r7, #18]
 8006b9a:	b25b      	sxtb	r3, r3
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	b25b      	sxtb	r3, r3
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00f      	beq.n	8006bd8 <set_int_ctrl_settings+0xda>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8006bb8:	7dbb      	ldrb	r3, [r7, #22]
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bc0:	b25a      	sxtb	r2, r3
 8006bc2:	7cfb      	ldrb	r3, [r7, #19]
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	019b      	lsls	r3, r3, #6
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b25b      	sxtb	r3, r3
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006bd8:	f107 0116 	add.w	r1, r7, #22
 8006bdc:	f107 0015 	add.w	r0, r7, #21
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f7ff fbb7 	bl	8006356 <bmp3_set_regs>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	f107 0310 	add.w	r3, r7, #16
 8006c0a:	320b      	adds	r2, #11
 8006c0c:	8812      	ldrh	r2, [r2, #0]
 8006c0e:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8006c10:	231a      	movs	r3, #26
 8006c12:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006c14:	7db8      	ldrb	r0, [r7, #22]
 8006c16:	f107 0115 	add.w	r1, r7, #21
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f7ff fb0a 	bl	8006236 <bmp3_get_regs>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8006c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d133      	bne.n	8006c96 <set_advance_settings+0x9e>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00f      	beq.n	8006c58 <set_advance_settings+0x60>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8006c38:	7d7b      	ldrb	r3, [r7, #21]
 8006c3a:	b25b      	sxtb	r3, r3
 8006c3c:	f023 0302 	bic.w	r3, r3, #2
 8006c40:	b25a      	sxtb	r2, r3
 8006c42:	7c3b      	ldrb	r3, [r7, #16]
 8006c44:	b25b      	sxtb	r3, r3
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	b25b      	sxtb	r3, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	b25b      	sxtb	r3, r3
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00f      	beq.n	8006c82 <set_advance_settings+0x8a>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8006c62:	7d7b      	ldrb	r3, [r7, #21]
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	f023 0304 	bic.w	r3, r3, #4
 8006c6a:	b25a      	sxtb	r2, r3
 8006c6c:	7c7b      	ldrb	r3, [r7, #17]
 8006c6e:	b25b      	sxtb	r3, r3
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	b25b      	sxtb	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006c82:	f107 0115 	add.w	r1, r7, #21
 8006c86:	f107 0016 	add.w	r0, r7, #22
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f7ff fb62 	bl	8006356 <bmp3_set_regs>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	201c      	movs	r0, #28
 8006cb6:	f7ff fabe 	bl	8006236 <bmp3_get_regs>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	1cda      	adds	r2, r3, #3
 8006cc2:	f107 0308 	add.w	r3, r7, #8
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fe21 	bl	8006910 <parse_odr_filter_settings>

    return rslt;
 8006cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b098      	sub	sp, #96	@ 0x60
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8006ce4:	23ea      	movs	r3, #234	@ 0xea
 8006ce6:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t meas_t_p = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8006cec:	4a1a      	ldr	r2, [pc, #104]	@ (8006d58 <validate_osr_and_odr_settings+0x7c>)
 8006cee:	f107 030c 	add.w	r3, r7, #12
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	2248      	movs	r2, #72	@ 0x48
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 fbc7 	bl	800948a <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d006      	beq.n	8006d12 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f83f 	bl	8006d88 <calculate_press_meas_time>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d0e:	4413      	add	r3, r2
 8006d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    if (settings->temp_en)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	789b      	ldrb	r3, [r3, #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d006      	beq.n	8006d28 <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f864 	bl	8006de8 <calculate_temp_meas_time>
 8006d20:	4602      	mov	r2, r0
 8006d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d24:	4413      	add	r3, r2
 8006d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8006d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d2c:	4413      	add	r3, r2
 8006d2e:	65bb      	str	r3, [r7, #88]	@ 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	799b      	ldrb	r3, [r3, #6]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	3360      	adds	r3, #96	@ 0x60
 8006d38:	443b      	add	r3, r7
 8006d3a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006d42:	f000 f80b 	bl	8006d5c <verify_meas_time_and_odr_duration>
 8006d46:	4603      	mov	r3, r0
 8006d48:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    return rslt;
 8006d4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3760      	adds	r7, #96	@ 0x60
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	0800cc10 	.word	0x0800cc10

08006d5c <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d202      	bcs.n	8006d74 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
 8006d72:	e001      	b.n	8006d78 <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8006d74:	23fd      	movs	r3, #253	@ 0xfd
 8006d76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	f107 030c 	add.w	r3, r7, #12
 8006d96:	3203      	adds	r2, #3
 8006d98:	6810      	ldr	r0, [r2, #0]
 8006d9a:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006da4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8006da8:	7b3b      	ldrb	r3, [r7, #12]
 8006daa:	4618      	mov	r0, r3
 8006dac:	ed97 0b06 	vldr	d0, [r7, #24]
 8006db0:	f000 fd86 	bl	80078c0 <pow_bmp3>
 8006db4:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8006db8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dbc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006de0 <calculate_press_meas_time+0x58>
 8006dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006dc4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006de4 <calculate_press_meas_time+0x5c>
 8006dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd0:	ee17 3a90 	vmov	r3, s15
 8006dd4:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8006dd6:	693b      	ldr	r3, [r7, #16]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3720      	adds	r7, #32
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	44fa0000 	.word	0x44fa0000
 8006de4:	43c40000 	.word	0x43c40000

08006de8 <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b088      	sub	sp, #32
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	f107 030c 	add.w	r3, r7, #12
 8006df6:	3203      	adds	r2, #3
 8006df8:	6810      	ldr	r0, [r2, #0]
 8006dfa:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e04:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8006e08:	7b7b      	ldrb	r3, [r7, #13]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	ed97 0b06 	vldr	d0, [r7, #24]
 8006e10:	f000 fd56 	bl	80078c0 <pow_bmp3>
 8006e14:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8006e18:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e1c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006e40 <calculate_temp_meas_time+0x58>
 8006e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e24:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006e44 <calculate_temp_meas_time+0x5c>
 8006e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e30:	ee17 3a90 	vmov	r3, s15
 8006e34:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8006e36:	693b      	ldr	r3, [r7, #16]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	44fa0000 	.word	0x44fa0000
 8006e44:	439c8000 	.word	0x439c8000

08006e48 <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8006e56:	6a3a      	ldr	r2, [r7, #32]
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	3203      	adds	r2, #3
 8006e5e:	6810      	ldr	r0, [r2, #0]
 8006e60:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d040      	beq.n	8006eee <fill_osr_data+0xa6>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0310 	and.w	r3, r3, #16
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d013      	beq.n	8006e9e <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	b25b      	sxtb	r3, r3
 8006e7c:	f023 0307 	bic.w	r3, r3, #7
 8006e80:	b25a      	sxtb	r2, r3
 8006e82:	7d3b      	ldrb	r3, [r7, #20]
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b25a      	sxtb	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	4619      	mov	r1, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	440b      	add	r3, r1
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d015      	beq.n	8006ed4 <fill_osr_data+0x8c>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006eb2:	b25a      	sxtb	r2, r3
 8006eb4:	7d7b      	ldrb	r3, [r7, #21]
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ec0:	b25b      	sxtb	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b25a      	sxtb	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	440b      	add	r3, r1
 8006ed0:	b2d2      	uxtb	r2, r2
 8006ed2:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4413      	add	r3, r2
 8006ede:	221c      	movs	r2, #28
 8006ee0:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	701a      	strb	r2, [r3, #0]
    }
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b087      	sub	sp, #28
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	60f8      	str	r0, [r7, #12]
 8006f02:	60b9      	str	r1, [r7, #8]
 8006f04:	607a      	str	r2, [r7, #4]
 8006f06:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	3303      	adds	r3, #3
 8006f0c:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	78db      	ldrb	r3, [r3, #3]
 8006f12:	2b11      	cmp	r3, #17
 8006f14:	d902      	bls.n	8006f1c <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2211      	movs	r2, #17
 8006f1a:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	f023 031f 	bic.w	r3, r3, #31
 8006f28:	b25a      	sxtb	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	78db      	ldrb	r3, [r3, #3]
 8006f2e:	b25b      	sxtb	r3, r3
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	4313      	orrs	r3, r2
 8006f38:	b25a      	sxtb	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	440b      	add	r3, r1
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	221d      	movs	r2, #29
 8006f54:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	701a      	strb	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr

08006f6e <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b087      	sub	sp, #28
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	f107 0314 	add.w	r3, r7, #20
 8006f82:	3203      	adds	r2, #3
 8006f84:	6810      	ldr	r0, [r2, #0]
 8006f86:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	3303      	adds	r3, #3
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	f023 030e 	bic.w	r3, r3, #14
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	7dbb      	ldrb	r3, [r7, #22]
 8006f98:	b25b      	sxtb	r3, r3
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	f003 030e 	and.w	r3, r3, #14
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b25a      	sxtb	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	440b      	add	r3, r1
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	221f      	movs	r2, #31
 8006fc2:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	701a      	strb	r2, [r3, #0]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8006fdc:	b4b0      	push	{r4, r5, r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	7809      	ldrb	r1, [r1, #0]
 8006fea:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	3101      	adds	r1, #1
 8006ff0:	7809      	ldrb	r1, [r1, #0]
 8006ff2:	0209      	lsls	r1, r1, #8
 8006ff4:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	3102      	adds	r1, #2
 8006ffa:	7809      	ldrb	r1, [r1, #0]
 8006ffc:	0409      	lsls	r1, r1, #16
 8006ffe:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	6939      	ldr	r1, [r7, #16]
 8007004:	4308      	orrs	r0, r1
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	4301      	orrs	r1, r0
 800700a:	2000      	movs	r0, #0
 800700c:	460c      	mov	r4, r1
 800700e:	4605      	mov	r5, r0
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	3103      	adds	r1, #3
 800701a:	7809      	ldrb	r1, [r1, #0]
 800701c:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	3104      	adds	r1, #4
 8007022:	7809      	ldrb	r1, [r1, #0]
 8007024:	0209      	lsls	r1, r1, #8
 8007026:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8007028:	6879      	ldr	r1, [r7, #4]
 800702a:	3105      	adds	r1, #5
 800702c:	7809      	ldrb	r1, [r1, #0]
 800702e:	0409      	lsls	r1, r1, #16
 8007030:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	6939      	ldr	r1, [r7, #16]
 8007036:	4308      	orrs	r0, r1
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	4301      	orrs	r1, r0
 800703c:	2000      	movs	r0, #0
 800703e:	460a      	mov	r2, r1
 8007040:	4603      	mov	r3, r0
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	bcb0      	pop	{r4, r5, r7}
 8007050:	4770      	bx	lr

08007052 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d05a      	beq.n	8007122 <compensate_data+0xd0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d057      	beq.n	8007122 <compensate_data+0xd0>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d054      	beq.n	8007122 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d115      	bne.n	80070aa <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	68b9      	ldr	r1, [r7, #8]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fa27 	bl	80074d8 <compensate_temperature>
 800708a:	4603      	mov	r3, r0
 800708c:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800708e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d148      	bne.n	8007128 <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	3308      	adds	r3, #8
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fa96 	bl	80075d0 <compensate_pressure>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80070a8:	e03e      	b.n	8007128 <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d116      	bne.n	80070de <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 fa0e 	bl	80074d8 <compensate_temperature>
            comp_data->temperature = 0;
 80070bc:	6879      	ldr	r1, [r7, #4]
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3308      	adds	r3, #8
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	68b9      	ldr	r1, [r7, #8]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fa7c 	bl	80075d0 <compensate_pressure>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80070dc:	e024      	b.n	8007128 <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d10f      	bne.n	8007104 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f9f4 	bl	80074d8 <compensate_temperature>
 80070f0:	4603      	mov	r3, r0
 80070f2:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007102:	e011      	b.n	8007128 <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	f04f 0300 	mov.w	r3, #0
 800710e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007120:	e002      	b.n	8007128 <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8007122:	23ff      	movs	r3, #255	@ 0xff
 8007124:	75fb      	strb	r3, [r7, #23]
 8007126:	e000      	b.n	800712a <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007128:	bf00      	nop
    }

    return rslt;
 800712a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	3390      	adds	r3, #144	@ 0x90
 8007146:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	3318      	adds	r3, #24
 800714c:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800714e:	f04f 0200 	mov.w	r2, #0
 8007152:	4ba4      	ldr	r3, [pc, #656]	@ (80073e4 <parse_calib_data+0x2ac>)
 8007154:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	3301      	adds	r3, #1
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	b21b      	sxth	r3, r3
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	b21a      	sxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	b21b      	sxth	r3, r3
 800716a:	4313      	orrs	r3, r2
 800716c:	b21b      	sxth	r3, r3
 800716e:	b29a      	uxth	r2, r3
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	881b      	ldrh	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7f9 f9c3 	bl	8000504 <__aeabi_ui2d>
 800717e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007182:	f7f9 fb63 	bl	800084c <__aeabi_ddiv>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	6939      	ldr	r1, [r7, #16]
 800718c:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3303      	adds	r3, #3
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	b21b      	sxth	r3, r3
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	b21a      	sxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3302      	adds	r3, #2
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	b21b      	sxth	r3, r3
 80071a4:	4313      	orrs	r3, r2
 80071a6:	b21b      	sxth	r3, r3
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	4b8d      	ldr	r3, [pc, #564]	@ (80073e8 <parse_calib_data+0x2b0>)
 80071b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	4618      	mov	r0, r3
 80071be:	f7f9 f9a1 	bl	8000504 <__aeabi_ui2d>
 80071c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c6:	f7f9 fb41 	bl	800084c <__aeabi_ddiv>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	6939      	ldr	r1, [r7, #16]
 80071d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	b25a      	sxtb	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	4b81      	ldr	r3, [pc, #516]	@ (80073ec <parse_calib_data+0x2b4>)
 80071e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7f9 f997 	bl	8000524 <__aeabi_i2d>
 80071f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071fa:	f7f9 fb27 	bl	800084c <__aeabi_ddiv>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	6939      	ldr	r1, [r7, #16]
 8007204:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3306      	adds	r3, #6
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	b21b      	sxth	r3, r3
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	b21a      	sxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3305      	adds	r3, #5
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b21b      	sxth	r3, r3
 800721c:	4313      	orrs	r3, r2
 800721e:	b21a      	sxth	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8007224:	f04f 0200 	mov.w	r2, #0
 8007228:	4b71      	ldr	r3, [pc, #452]	@ (80073f0 <parse_calib_data+0x2b8>)
 800722a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007234:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 f973 	bl	8000524 <__aeabi_i2d>
 800723e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007242:	f7f9 fb03 	bl	800084c <__aeabi_ddiv>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	6939      	ldr	r1, [r7, #16]
 800724c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3308      	adds	r3, #8
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b21b      	sxth	r3, r3
 8007258:	021b      	lsls	r3, r3, #8
 800725a:	b21a      	sxth	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3307      	adds	r3, #7
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b21b      	sxth	r3, r3
 8007264:	4313      	orrs	r3, r2
 8007266:	b21a      	sxth	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800726c:	f04f 0200 	mov.w	r2, #0
 8007270:	4b60      	ldr	r3, [pc, #384]	@ (80073f4 <parse_calib_data+0x2bc>)
 8007272:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800727c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007280:	4618      	mov	r0, r3
 8007282:	f7f9 f94f 	bl	8000524 <__aeabi_i2d>
 8007286:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800728a:	f7f9 fadf 	bl	800084c <__aeabi_ddiv>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	6939      	ldr	r1, [r7, #16]
 8007294:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3309      	adds	r3, #9
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b25a      	sxtb	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80072a4:	f04f 0200 	mov.w	r2, #0
 80072a8:	4b53      	ldr	r3, [pc, #332]	@ (80073f8 <parse_calib_data+0x2c0>)
 80072aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7f9 f935 	bl	8000524 <__aeabi_i2d>
 80072ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072be:	f7f9 fac5 	bl	800084c <__aeabi_ddiv>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	6939      	ldr	r1, [r7, #16]
 80072c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	330a      	adds	r3, #10
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b25a      	sxtb	r2, r3
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	4b47      	ldr	r3, [pc, #284]	@ (80073fc <parse_calib_data+0x2c4>)
 80072de:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7f9 f91b 	bl	8000524 <__aeabi_i2d>
 80072ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f2:	f7f9 faab 	bl	800084c <__aeabi_ddiv>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	6939      	ldr	r1, [r7, #16]
 80072fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	330c      	adds	r3, #12
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	b21b      	sxth	r3, r3
 8007308:	021b      	lsls	r3, r3, #8
 800730a:	b21a      	sxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	330b      	adds	r3, #11
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	b21b      	sxth	r3, r3
 8007314:	4313      	orrs	r3, r2
 8007316:	b21b      	sxth	r3, r3
 8007318:	b29a      	uxth	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007326:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	899b      	ldrh	r3, [r3, #12]
 800732e:	4618      	mov	r0, r3
 8007330:	f7f9 f8e8 	bl	8000504 <__aeabi_ui2d>
 8007334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007338:	f7f9 fa88 	bl	800084c <__aeabi_ddiv>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	6939      	ldr	r1, [r7, #16]
 8007342:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	330e      	adds	r3, #14
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	b21b      	sxth	r3, r3
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	b21a      	sxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	330d      	adds	r3, #13
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b21b      	sxth	r3, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	b21b      	sxth	r3, r3
 800735e:	b29a      	uxth	r2, r3
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	4b25      	ldr	r3, [pc, #148]	@ (8007400 <parse_calib_data+0x2c8>)
 800736a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	89db      	ldrh	r3, [r3, #14]
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 f8c6 	bl	8000504 <__aeabi_ui2d>
 8007378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800737c:	f7f9 fa66 	bl	800084c <__aeabi_ddiv>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	6939      	ldr	r1, [r7, #16]
 8007386:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	330f      	adds	r3, #15
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b25a      	sxtb	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	4b1a      	ldr	r3, [pc, #104]	@ (8007404 <parse_calib_data+0x2cc>)
 800739c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7f9 f8bc 	bl	8000524 <__aeabi_i2d>
 80073ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073b0:	f7f9 fa4c 	bl	800084c <__aeabi_ddiv>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	6939      	ldr	r1, [r7, #16]
 80073ba:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3310      	adds	r3, #16
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	b25a      	sxtb	r2, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80073ca:	f04f 0200 	mov.w	r2, #0
 80073ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007408 <parse_calib_data+0x2d0>)
 80073d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7f9 f8a2 	bl	8000524 <__aeabi_i2d>
 80073e0:	e014      	b.n	800740c <parse_calib_data+0x2d4>
 80073e2:	bf00      	nop
 80073e4:	3f700000 	.word	0x3f700000
 80073e8:	41d00000 	.word	0x41d00000
 80073ec:	42f00000 	.word	0x42f00000
 80073f0:	41300000 	.word	0x41300000
 80073f4:	41c00000 	.word	0x41c00000
 80073f8:	41f00000 	.word	0x41f00000
 80073fc:	42400000 	.word	0x42400000
 8007400:	40500000 	.word	0x40500000
 8007404:	40700000 	.word	0x40700000
 8007408:	40e00000 	.word	0x40e00000
 800740c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007410:	f7f9 fa1c 	bl	800084c <__aeabi_ddiv>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	6939      	ldr	r1, [r7, #16]
 800741a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3312      	adds	r3, #18
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	b21b      	sxth	r3, r3
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	b21a      	sxth	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3311      	adds	r3, #17
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	b21b      	sxth	r3, r3
 8007432:	4313      	orrs	r3, r2
 8007434:	b21a      	sxth	r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	4b25      	ldr	r3, [pc, #148]	@ (80074d4 <parse_calib_data+0x39c>)
 8007440:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 f86a 	bl	8000524 <__aeabi_i2d>
 8007450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007454:	f7f9 f9fa 	bl	800084c <__aeabi_ddiv>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	6939      	ldr	r1, [r7, #16]
 800745e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3313      	adds	r3, #19
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	b25a      	sxtb	r2, r3
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	4b18      	ldr	r3, [pc, #96]	@ (80074d4 <parse_calib_data+0x39c>)
 8007474:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800747e:	4618      	mov	r0, r3
 8007480:	f7f9 f850 	bl	8000524 <__aeabi_i2d>
 8007484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007488:	f7f9 f9e0 	bl	800084c <__aeabi_ddiv>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	6939      	ldr	r1, [r7, #16]
 8007492:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3314      	adds	r3, #20
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b25a      	sxtb	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 80074aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7f9 f835 	bl	8000524 <__aeabi_i2d>
 80074ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074be:	f7f9 f9c5 	bl	800084c <__aeabi_ddiv>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	6939      	ldr	r1, [r7, #16]
 80074c8:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 80074cc:	bf00      	nop
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	42f00000 	.word	0x42f00000

080074d8 <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	@ 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80074f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80074f8:	f7f9 f850 	bl	800059c <__aeabi_l2d>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fec1 	bl	8000288 <__aeabi_dsub>
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007514:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007518:	f7f9 f86e 	bl	80005f8 <__aeabi_dmul>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8007524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007528:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800752c:	f7f9 f864 	bl	80005f8 <__aeabi_dmul>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4610      	mov	r0, r2
 8007536:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800753e:	f7f9 f85b 	bl	80005f8 <__aeabi_dmul>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800754e:	f7f8 fe9d 	bl	800028c <__adddf3>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	4b17      	ldr	r3, [pc, #92]	@ (80075c4 <compensate_temperature+0xec>)
 8007568:	f7f9 fab8 	bl	8000adc <__aeabi_dcmplt>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d008      	beq.n	8007584 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 8007572:	6879      	ldr	r1, [r7, #4]
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <compensate_temperature+0xec>)
 800757a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MIN_TEMP;
 800757e:	2303      	movs	r3, #3
 8007580:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <compensate_temperature+0xf0>)
 8007590:	f7f9 fac2 	bl	8000b18 <__aeabi_dcmpgt>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d008      	beq.n	80075ac <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	4b09      	ldr	r3, [pc, #36]	@ (80075c8 <compensate_temperature+0xf0>)
 80075a2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MAX_TEMP;
 80075a6:	2304      	movs	r3, #4
 80075a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 80075b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3730      	adds	r7, #48	@ 0x30
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	c0440000 	.word	0xc0440000
 80075c8:	40554000 	.word	0x40554000
 80075cc:	00000000 	.word	0x00000000

080075d0 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 80075d0:	b5b0      	push	{r4, r5, r7, lr}
 80075d2:	b096      	sub	sp, #88	@ 0x58
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 80075dc:	2300      	movs	r3, #0
 80075de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	647b      	str	r3, [r7, #68]	@ 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 80075e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075e8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80075ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ee:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80075f2:	f7f9 f801 	bl	80005f8 <__aeabi_dmul>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80075fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007600:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8007604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007606:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800760a:	2002      	movs	r0, #2
 800760c:	eeb0 0a47 	vmov.f32	s0, s14
 8007610:	eef0 0a67 	vmov.f32	s1, s15
 8007614:	f000 f954 	bl	80078c0 <pow_bmp3>
 8007618:	ee10 3a10 	vmov	r3, s0
 800761c:	4618      	mov	r0, r3
 800761e:	f7f8 ff93 	bl	8000548 <__aeabi_f2d>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4620      	mov	r0, r4
 8007628:	4629      	mov	r1, r5
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8007636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007638:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800763c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800763e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8007642:	2003      	movs	r0, #3
 8007644:	eeb0 0a47 	vmov.f32	s0, s14
 8007648:	eef0 0a67 	vmov.f32	s1, s15
 800764c:	f000 f938 	bl	80078c0 <pow_bmp3>
 8007650:	ee10 3a10 	vmov	r3, s0
 8007654:	4618      	mov	r0, r3
 8007656:	f7f8 ff77 	bl	8000548 <__aeabi_f2d>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	4620      	mov	r0, r4
 8007660:	4629      	mov	r1, r5
 8007662:	f7f8 ffc9 	bl	80005f8 <__aeabi_dmul>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800766e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007670:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007674:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007678:	f7f8 fe08 	bl	800028c <__adddf3>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4610      	mov	r0, r2
 8007682:	4619      	mov	r1, r3
 8007684:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007688:	f7f8 fe00 	bl	800028c <__adddf3>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007694:	f7f8 fdfa 	bl	800028c <__adddf3>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 80076a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80076a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076a8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80076ac:	f7f8 ffa4 	bl	80005f8 <__aeabi_dmul>
 80076b0:	4602      	mov	r2, r0
 80076b2:	460b      	mov	r3, r1
 80076b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80076b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80076be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80076c4:	2002      	movs	r0, #2
 80076c6:	eeb0 0a47 	vmov.f32	s0, s14
 80076ca:	eef0 0a67 	vmov.f32	s1, s15
 80076ce:	f000 f8f7 	bl	80078c0 <pow_bmp3>
 80076d2:	ee10 3a10 	vmov	r3, s0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7f8 ff36 	bl	8000548 <__aeabi_f2d>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	f7f8 ff88 	bl	80005f8 <__aeabi_dmul>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80076f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80076f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80076fc:	2003      	movs	r0, #3
 80076fe:	eeb0 0a47 	vmov.f32	s0, s14
 8007702:	eef0 0a67 	vmov.f32	s1, s15
 8007706:	f000 f8db 	bl	80078c0 <pow_bmp3>
 800770a:	ee10 3a10 	vmov	r3, s0
 800770e:	4618      	mov	r0, r3
 8007710:	f7f8 ff1a 	bl	8000548 <__aeabi_f2d>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out2 = uncomp_data->pressure *
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	4610      	mov	r0, r2
 8007730:	4619      	mov	r1, r3
 8007732:	f7f8 ff2b 	bl	800058c <__aeabi_ul2d>
 8007736:	4604      	mov	r4, r0
 8007738:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800773a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007740:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007744:	f7f8 fda2 	bl	800028c <__adddf3>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4610      	mov	r0, r2
 800774e:	4619      	mov	r1, r3
 8007750:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007754:	f7f8 fd9a 	bl	800028c <__adddf3>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007764:	f7f8 fd92 	bl	800028c <__adddf3>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800776c:	4620      	mov	r0, r4
 800776e:	4629      	mov	r1, r5
 8007770:	f7f8 ff42 	bl	80005f8 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	4610      	mov	r0, r2
 8007784:	4619      	mov	r1, r3
 8007786:	f7f8 ff01 	bl	800058c <__aeabi_ul2d>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	2002      	movs	r0, #2
 8007790:	ec43 2b10 	vmov	d0, r2, r3
 8007794:	f000 f894 	bl	80078c0 <pow_bmp3>
 8007798:	ee10 3a10 	vmov	r3, s0
 800779c:	4618      	mov	r0, r3
 800779e:	f7f8 fed3 	bl	8000548 <__aeabi_f2d>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 80077aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ac:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 80077b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 80077b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80077bc:	f7f8 ff1c 	bl	80005f8 <__aeabi_dmul>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f8 fd60 	bl	800028c <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = partial_data1 * partial_data2;
 80077d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80077d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80077dc:	f7f8 ff0c 	bl	80005f8 <__aeabi_dmul>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	4610      	mov	r0, r2
 80077f0:	4619      	mov	r1, r3
 80077f2:	f7f8 fecb 	bl	800058c <__aeabi_ul2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	2003      	movs	r0, #3
 80077fc:	ec43 2b10 	vmov	d0, r2, r3
 8007800:	f000 f85e 	bl	80078c0 <pow_bmp3>
 8007804:	ee10 3a10 	vmov	r3, s0
 8007808:	4618      	mov	r0, r3
 800780a:	f7f8 fe9d 	bl	8000548 <__aeabi_f2d>
 800780e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007810:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8007814:	f7f8 fef0 	bl	80005f8 <__aeabi_dmul>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007820:	f7f8 fd34 	bl	800028c <__adddf3>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800782c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007830:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007834:	f7f8 fd2a 	bl	800028c <__adddf3>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007840:	f7f8 fd24 	bl	800028c <__adddf3>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800784c:	a318      	add	r3, pc, #96	@ (adr r3, 80078b0 <compensate_pressure+0x2e0>)
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007856:	f7f9 f941 	bl	8000adc <__aeabi_dcmplt>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 8007860:	a313      	add	r3, pc, #76	@ (adr r3, 80078b0 <compensate_pressure+0x2e0>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MIN_PRES;
 800786a:	2305      	movs	r3, #5
 800786c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 8007870:	a311      	add	r3, pc, #68	@ (adr r3, 80078b8 <compensate_pressure+0x2e8>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800787a:	f7f9 f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8007884:	a30c      	add	r3, pc, #48	@ (adr r3, 80078b8 <compensate_pressure+0x2e8>)
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MAX_PRES;
 800788e:	2306      	movs	r3, #6
 8007890:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    (*pressure) = comp_press;
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800789a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800789e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3758      	adds	r7, #88	@ 0x58
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bdb0      	pop	{r4, r5, r7, pc}
 80078aa:	bf00      	nop
 80078ac:	f3af 8000 	nop.w
 80078b0:	00000000 	.word	0x00000000
 80078b4:	40dd4c00 	.word	0x40dd4c00
 80078b8:	00000000 	.word	0x00000000
 80078bc:	40fe8480 	.word	0x40fe8480

080078c0 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	ed87 0b02 	vstr	d0, [r7, #8]
 80078ca:	4603      	mov	r3, r0
 80078cc:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80078ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80078d2:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80078d4:	e00e      	b.n	80078f4 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 80078d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80078da:	f7f9 f985 	bl	8000be8 <__aeabi_d2f>
 80078de:	ee07 0a10 	vmov	s14, r0
 80078e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80078e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078ea:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1ed      	bne.n	80078d6 <pow_bmp3+0x16>
    }

    return pow_output;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	ee07 3a90 	vmov	s15, r3
}
 8007900:	eeb0 0a67 	vmov.f32	s0, s15
 8007904:	3718      	adds	r7, #24
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4013      	ands	r3, r2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8007922:	2301      	movs	r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
 8007926:	e001      	b.n	800792c <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8007928:	2300      	movs	r3, #0
 800792a:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800792c:	7bfb      	ldrb	r3, [r7, #15]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800793a:	b480      	push	{r7}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <null_ptr_check+0x2e>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <null_ptr_check+0x2e>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <null_ptr_check+0x2e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8007964:	2b00      	cmp	r3, #0
 8007966:	d102      	bne.n	800796e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 8007968:	23ff      	movs	r3, #255	@ 0xff
 800796a:	73fb      	strb	r3, [r7, #15]
 800796c:	e001      	b.n	8007972 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8007972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <bmp388_read>:
extern struct bmp388_interface bmp388_intf;

static volatile uint32_t counter = 0U;

BMP3_INTF_RET_TYPE bmp388_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 8007982:	b590      	push	{r4, r7, lr}
 8007984:	b08b      	sub	sp, #44	@ 0x2c
 8007986:	af04      	add	r7, sp, #16
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4603      	mov	r3, r0
 8007990:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(intf->hi2c, (intf->dev_addr << 1U), reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	6858      	ldr	r0, [r3, #4]
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	7a1b      	ldrb	r3, [r3, #8]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	b299      	uxth	r1, r3
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f04f 34ff 	mov.w	r4, #4294967295
 80079ae:	9402      	str	r4, [sp, #8]
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	2301      	movs	r3, #1
 80079b8:	f7fa fcdc 	bl	8002374 <HAL_I2C_Mem_Read>
	return ( BMP3_INTF_RET_SUCCESS );
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd90      	pop	{r4, r7, pc}

080079c6 <bmp388_write>:

BMP3_INTF_RET_TYPE bmp388_write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len,void *intf_ptr)
{
 80079c6:	b590      	push	{r4, r7, lr}
 80079c8:	b08b      	sub	sp, #44	@ 0x2c
 80079ca:	af04      	add	r7, sp, #16
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
 80079d0:	603b      	str	r3, [r7, #0]
 80079d2:	4603      	mov	r3, r0
 80079d4:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Write(intf->hi2c, ((intf->dev_addr << 1U) | 0x1U), reg_addr, 1U, (uint8_t*)read_data, len, HAL_MAX_DELAY);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6858      	ldr	r0, [r3, #4]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	7a1b      	ldrb	r3, [r3, #8]
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	b299      	uxth	r1, r3
 80079ec:	7bfb      	ldrb	r3, [r7, #15]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	f04f 34ff 	mov.w	r4, #4294967295
 80079f8:	9402      	str	r4, [sp, #8]
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2301      	movs	r3, #1
 8007a02:	f7fa fbbd 	bl	8002180 <HAL_I2C_Mem_Write>
	return ( BMP3_INTF_RET_SUCCESS );
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd90      	pop	{r4, r7, pc}

08007a10 <delay_us>:
//	}
//
//}

void delay_us(uint32_t period, void *intf_ptr)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]

	HAL_TIM_Base_Start_IT(intf->htim);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fb ffa6 	bl	8003974 <HAL_TIM_Base_Start_IT>

	while(counter != period);
 8007a28:	bf00      	nop
 8007a2a:	4b08      	ldr	r3, [pc, #32]	@ (8007a4c <delay_us+0x3c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d1fa      	bne.n	8007a2a <delay_us+0x1a>

	HAL_TIM_Base_Stop_IT(intf->htim);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7fc f80b 	bl	8003a54 <HAL_TIM_Base_Stop_IT>

	counter = 0U;
 8007a3e:	4b03      	ldr	r3, [pc, #12]	@ (8007a4c <delay_us+0x3c>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000484 	.word	0x20000484

08007a50 <init_bmp388_sensor_driver_interface>:

BMP3_INTF_RET_TYPE init_bmp388_sensor_driver_interface(struct bmp3_dev *bmp388,struct bmp388_interface *bmp388_intf)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]

	if( bmp388 == NULL )
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <init_bmp388_sensor_driver_interface+0x14>
	{
		Error_Handler();
 8007a60:	f7f9 fcc8 	bl	80013f4 <Error_Handler>
	}

	struct bmp3_settings settings = { 0 };
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	605a      	str	r2, [r3, #4]
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	731a      	strb	r2, [r3, #12]
	int8_t rslt = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	77fb      	strb	r3, [r7, #31]
	uint16_t settings_sel = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	83bb      	strh	r3, [r7, #28]

	bmp388->intf = BMP3_I2C_INTF;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	721a      	strb	r2, [r3, #8]
	bmp388->read = bmp388_read;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a3a      	ldr	r2, [pc, #232]	@ (8007b6c <init_bmp388_sensor_driver_interface+0x11c>)
 8007a84:	60da      	str	r2, [r3, #12]
	bmp388->write = bmp388_write;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a39      	ldr	r2, [pc, #228]	@ (8007b70 <init_bmp388_sensor_driver_interface+0x120>)
 8007a8a:	611a      	str	r2, [r3, #16]
	bmp388->delay_us = delay_us;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a39      	ldr	r2, [pc, #228]	@ (8007b74 <init_bmp388_sensor_driver_interface+0x124>)
 8007a90:	615a      	str	r2, [r3, #20]
	bmp388->intf_ptr = bmp388_intf;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	605a      	str	r2, [r3, #4]

	rslt = bmp3_selftest_check(bmp388);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f87d 	bl	8007b98 <bmp3_selftest_check>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <init_bmp388_sensor_driver_interface+0x64>
	{
		printf("BMP388 self-test failure !\n");
 8007aaa:	4833      	ldr	r0, [pc, #204]	@ (8007b78 <init_bmp388_sensor_driver_interface+0x128>)
 8007aac:	f001 fb6c 	bl	8009188 <puts>
		Error_Handler();
 8007ab0:	f7f9 fca0 	bl	80013f4 <Error_Handler>
	}

	printf("BMP388 self-test success !\n");
 8007ab4:	4831      	ldr	r0, [pc, #196]	@ (8007b7c <init_bmp388_sensor_driver_interface+0x12c>)
 8007ab6:	f001 fb67 	bl	8009188 <puts>

	rslt = bmp3_init(bmp388);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fe fb74 	bl	80061a8 <bmp3_init>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <init_bmp388_sensor_driver_interface+0x86>
	{
		printf("BMP388 initialization failure !\n");
 8007acc:	482c      	ldr	r0, [pc, #176]	@ (8007b80 <init_bmp388_sensor_driver_interface+0x130>)
 8007ace:	f001 fb5b 	bl	8009188 <puts>
		Error_Handler();
 8007ad2:	f7f9 fc8f 	bl	80013f4 <Error_Handler>
	}

	printf("BMP388 initialization success !\n");
 8007ad6:	482b      	ldr	r0, [pc, #172]	@ (8007b84 <init_bmp388_sensor_driver_interface+0x134>)
 8007ad8:	f001 fb56 	bl	8009188 <puts>
	printf("Chip ID 0x%X\n" , bmp388->chip_id);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	4829      	ldr	r0, [pc, #164]	@ (8007b88 <init_bmp388_sensor_driver_interface+0x138>)
 8007ae4:	f001 fae8 	bl	80090b8 <iprintf>

	settings.press_en = BMP3_ENABLE;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	737b      	strb	r3, [r7, #13]
	settings.temp_en = BMP3_ENABLE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73bb      	strb	r3, [r7, #14]

	settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_63; //BMP3_IIR_FILTER_COEFF_3
 8007af0:	2306      	movs	r3, #6
 8007af2:	747b      	strb	r3, [r7, #17]
	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 8007af4:	2303      	movs	r3, #3
 8007af6:	73fb      	strb	r3, [r7, #15]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8007af8:	2300      	movs	r3, #0
 8007afa:	743b      	strb	r3, [r7, #16]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 8007afc:	2302      	movs	r3, #2
 8007afe:	74bb      	strb	r3, [r7, #18]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8007b00:	23fe      	movs	r3, #254	@ 0xfe
 8007b02:	83bb      	strh	r3, [r7, #28]
				 BMP3_SEL_DRDY_EN | BMP3_SEL_IIR_FILTER;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, bmp388);
 8007b04:	8bbb      	ldrh	r3, [r7, #28]
 8007b06:	f107 010c 	add.w	r1, r7, #12
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fcb7 	bl	8006480 <bmp3_set_sensor_settings>
 8007b12:	4603      	mov	r3, r0
 8007b14:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007b16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d004      	beq.n	8007b28 <init_bmp388_sensor_driver_interface+0xd8>
	{
		printf("BMP388 set sensor settings failure !\n");
 8007b1e:	481b      	ldr	r0, [pc, #108]	@ (8007b8c <init_bmp388_sensor_driver_interface+0x13c>)
 8007b20:	f001 fb32 	bl	8009188 <puts>
		Error_Handler();
 8007b24:	f7f9 fc66 	bl	80013f4 <Error_Handler>
	}

	printf("BMP388 set sensor settings success !\n");
 8007b28:	4819      	ldr	r0, [pc, #100]	@ (8007b90 <init_bmp388_sensor_driver_interface+0x140>)
 8007b2a:	f001 fb2d 	bl	8009188 <puts>

	settings.op_mode = BMP3_MODE_NORMAL;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	733b      	strb	r3, [r7, #12]
	rslt = bmp3_set_op_mode(&settings, bmp388);
 8007b32:	f107 030c 	add.w	r3, r7, #12
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fd39 	bl	80065b0 <bmp3_set_op_mode>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <init_bmp388_sensor_driver_interface+0x104>
	{
		printf("BMP388 sensor op mode failure !\n");
 8007b4a:	4812      	ldr	r0, [pc, #72]	@ (8007b94 <init_bmp388_sensor_driver_interface+0x144>)
 8007b4c:	f001 fb1c 	bl	8009188 <puts>
		Error_Handler();
 8007b50:	f7f9 fc50 	bl	80013f4 <Error_Handler>
	}

	printf("BMP388 sensor op mode failure !\n");
 8007b54:	480f      	ldr	r0, [pc, #60]	@ (8007b94 <init_bmp388_sensor_driver_interface+0x144>)
 8007b56:	f001 fb17 	bl	8009188 <puts>

	HAL_Delay(3000);
 8007b5a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007b5e:	f7f9 ff0f 	bl	8001980 <HAL_Delay>

	return ( BMP3_INTF_RET_SUCCESS );
 8007b62:	2300      	movs	r3, #0

}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3720      	adds	r7, #32
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	08007983 	.word	0x08007983
 8007b70:	080079c7 	.word	0x080079c7
 8007b74:	08007a11 	.word	0x08007a11
 8007b78:	0800cc58 	.word	0x0800cc58
 8007b7c:	0800cc74 	.word	0x0800cc74
 8007b80:	0800cc90 	.word	0x0800cc90
 8007b84:	0800ccb0 	.word	0x0800ccb0
 8007b88:	0800ccd0 	.word	0x0800ccd0
 8007b8c:	0800cce0 	.word	0x0800cce0
 8007b90:	0800cd08 	.word	0x0800cd08
 8007b94:	0800cd30 	.word	0x0800cd30

08007b98 <bmp3_selftest_check>:

/*!
 * @brief       Self-test API for the BMP38X
 */
int8_t bmp3_selftest_check(struct bmp3_dev *dev)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08e      	sub	sp, #56	@ 0x38
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

    /* Variable used to select the sensor component */
    uint8_t sensor_comp;

    /* Variable used to store the compensated data */
    struct bmp3_data data = { 0 };
 8007ba0:	f107 0318 	add.w	r3, r7, #24
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	609a      	str	r2, [r3, #8]
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	611a      	str	r2, [r3, #16]
 8007bb0:	615a      	str	r2, [r3, #20]

    /* Used to select the settings user needs to change */
    uint16_t settings_sel;

    /* Reset the sensor */
    rslt = bmp3_soft_reset(dev);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fe fcb2 	bl	800651c <bmp3_soft_reset>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BMP3_SENSOR_OK)
 8007bbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d17a      	bne.n	8007cbc <bmp3_selftest_check+0x124>
    {
        rslt = bmp3_init(dev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fe faee 	bl	80061a8 <bmp3_init>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        if (rslt == BMP3_E_COMM_FAIL || rslt == BMP3_E_DEV_NOT_FOUND)
 8007bd2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007bd6:	f113 0f02 	cmn.w	r3, #2
 8007bda:	d004      	beq.n	8007be6 <bmp3_selftest_check+0x4e>
 8007bdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007be0:	f113 0f07 	cmn.w	r3, #7
 8007be4:	d102      	bne.n	8007bec <bmp3_selftest_check+0x54>
        {
            rslt = BMP3_COMMUNICATION_ERROR_OR_WRONG_DEVICE;
 8007be6:	230a      	movs	r3, #10
 8007be8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }

        if (rslt == BMP3_SENSOR_OK)
 8007bec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d105      	bne.n	8007c00 <bmp3_selftest_check+0x68>
        {
            rslt = validate_trimming_param(dev);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f8b5 	bl	8007d64 <validate_trimming_param>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }

        if (rslt == BMP3_SENSOR_OK)
 8007c00:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d13e      	bne.n	8007c86 <bmp3_selftest_check+0xee>
        {
            /* Select the pressure and temperature sensor to be enabled */
        	dev_setting.press_en = BMP3_ENABLE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	727b      	strb	r3, [r7, #9]
        	dev_setting.temp_en = BMP3_ENABLE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	72bb      	strb	r3, [r7, #10]

            /* Select the output data rate and over sampling settings for pressure and temperature */
        	dev_setting.odr_filter.press_os = BMP3_NO_OVERSAMPLING;
 8007c10:	2300      	movs	r3, #0
 8007c12:	72fb      	strb	r3, [r7, #11]
        	dev_setting.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8007c14:	2300      	movs	r3, #0
 8007c16:	733b      	strb	r3, [r7, #12]
        	dev_setting.odr_filter.odr = BMP3_ODR_25_HZ;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73bb      	strb	r3, [r7, #14]

            /* Assign the settings which needs to be set in the sensor */
            settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 8007c1c:	23b6      	movs	r3, #182	@ 0xb6
 8007c1e:	86bb      	strh	r3, [r7, #52]	@ 0x34
            rslt = bmp3_set_sensor_settings(settings_sel, &dev_setting,dev);
 8007c20:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8007c22:	f107 0108 	add.w	r1, r7, #8
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fc29 	bl	8006480 <bmp3_set_sensor_settings>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BMP3_SENSOR_OK)
 8007c34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d124      	bne.n	8007c86 <bmp3_selftest_check+0xee>
            {
            	dev_setting.op_mode = BMP3_MODE_NORMAL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 8007c40:	f107 0308 	add.w	r3, r7, #8
 8007c44:	6879      	ldr	r1, [r7, #4]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe fcb2 	bl	80065b0 <bmp3_set_op_mode>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (rslt == BMP3_SENSOR_OK)
 8007c52:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <bmp3_selftest_check+0xee>
                {
                    dev->delay_us(40000, dev->intf_ptr);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	695b      	ldr	r3, [r3, #20]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	4611      	mov	r1, r2
 8007c64:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8007c68:	4798      	blx	r3

                    /* Sensor component selection */
                    sensor_comp = BMP3_PRESS | BMP3_TEMP;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

                    /* Temperature and Pressure data are read and stored in the bmp3_data instance */
                    rslt = bmp3_get_sensor_data(sensor_comp, &data, dev);
 8007c70:	f107 0118 	add.w	r1, r7, #24
 8007c74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fd0c 	bl	8006698 <bmp3_get_sensor_data>
 8007c80:	4603      	mov	r3, r0
 8007c82:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                }
            }
        }

        if (rslt == BMP3_SENSOR_OK)
 8007c86:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d116      	bne.n	8007cbc <bmp3_selftest_check+0x124>
        {
            rslt = analyze_sensor_data(&data);
 8007c8e:	f107 0318 	add.w	r3, r7, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f818 	bl	8007cc8 <analyze_sensor_data>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

            /* Set the power mode to sleep mode */
            if (rslt == BMP3_SENSOR_OK)
 8007c9e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <bmp3_selftest_check+0x124>
            {
            	dev_setting.op_mode = BMP3_MODE_SLEEP;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 8007caa:	f107 0308 	add.w	r3, r7, #8
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fc7d 	bl	80065b0 <bmp3_set_op_mode>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }
        }
    }

    return rslt;
 8007cbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3738      	adds	r7, #56	@ 0x38
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <analyze_sensor_data>:

/*!
 * @brief  Function to analyze the sensor data
 */
static int8_t analyze_sensor_data(const struct bmp3_data *sens_data)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP3_SENSOR_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]

    if ((sens_data->temperature < BMP3_MIN_TEMPERATURE) || (sens_data->temperature > BMP3_MAX_TEMPERATURE))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	f04f 0300 	mov.w	r3, #0
 8007ce2:	f7f8 fefb 	bl	8000adc <__aeabi_dcmplt>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d10a      	bne.n	8007d02 <analyze_sensor_data+0x3a>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007cf2:	f04f 0200 	mov.w	r2, #0
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d60 <analyze_sensor_data+0x98>)
 8007cf8:	f7f8 ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <analyze_sensor_data+0x3e>
    {
        rslt = BMP3_IMPLAUSIBLE_TEMPERATURE;
 8007d02:	2328      	movs	r3, #40	@ 0x28
 8007d04:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMP3_SENSOR_OK)
 8007d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d117      	bne.n	8007d3e <analyze_sensor_data+0x76>
    {
        if ((sens_data->pressure < BMP3_MIN_PRESSURE) || (sens_data->pressure > BMP3_MAX_PRESSURE))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007d14:	a30e      	add	r3, pc, #56	@ (adr r3, 8007d50 <analyze_sensor_data+0x88>)
 8007d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1a:	f7f8 fedf 	bl	8000adc <__aeabi_dcmplt>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10a      	bne.n	8007d3a <analyze_sensor_data+0x72>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007d2a:	a30b      	add	r3, pc, #44	@ (adr r3, 8007d58 <analyze_sensor_data+0x90>)
 8007d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d30:	f7f8 fef2 	bl	8000b18 <__aeabi_dcmpgt>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <analyze_sensor_data+0x76>
        {
            rslt = BMP3_IMPLAUSIBLE_PRESSURE;
 8007d3a:	2329      	movs	r3, #41	@ 0x29
 8007d3c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w
 8007d50:	00000000 	.word	0x00000000
 8007d54:	40f5f900 	.word	0x40f5f900
 8007d58:	00000000 	.word	0x00000000
 8007d5c:	40fadb00 	.word	0x40fadb00
 8007d60:	40af4000 	.word	0x40af4000

08007d64 <validate_trimming_param>:

/*
 * @brief Function to verify the trimming parameters
 * */
static int8_t validate_trimming_param(struct bmp3_dev *dev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b08a      	sub	sp, #40	@ 0x28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t crc = 0xFF;
 8007d6c:	23ff      	movs	r3, #255	@ 0xff
 8007d6e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t stored_crc;
    uint8_t trim_param[21];
    uint8_t i;

    rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8007d72:	f107 010c 	add.w	r1, r7, #12
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2215      	movs	r2, #21
 8007d7a:	2031      	movs	r0, #49	@ 0x31
 8007d7c:	f7fe fa5b 	bl	8006236 <bmp3_get_regs>
 8007d80:	4603      	mov	r3, r0
 8007d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMP3_SENSOR_OK)
 8007d86:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d133      	bne.n	8007df6 <validate_trimming_param+0x92>
    {
        for (i = 0; i < 21; i++)
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007d94:	e013      	b.n	8007dbe <validate_trimming_param+0x5a>
        {
            crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8007d96:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d9a:	3328      	adds	r3, #40	@ 0x28
 8007d9c:	443b      	add	r3, r7
 8007d9e:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8007da2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007da6:	4611      	mov	r1, r2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f82a 	bl	8007e02 <cal_crc>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (i = 0; i < 21; i++)
 8007db4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007db8:	3301      	adds	r3, #1
 8007dba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007dbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dc2:	2b14      	cmp	r3, #20
 8007dc4:	d9e7      	bls.n	8007d96 <validate_trimming_param+0x32>
        }

        crc = (crc ^ 0xFF);
 8007dc6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007dca:	43db      	mvns	r3, r3
 8007dcc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8007dd0:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	2030      	movs	r0, #48	@ 0x30
 8007dda:	f7fe fa2c 	bl	8006236 <bmp3_get_regs>
 8007dde:	4603      	mov	r3, r0
 8007de0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (stored_crc != crc)
 8007de4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007de8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d002      	beq.n	8007df6 <validate_trimming_param+0x92>
        {
            rslt = BMP3_TRIMMING_DATA_OUT_OF_BOUND;
 8007df0:	2314      	movs	r3, #20
 8007df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8007df6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3728      	adds	r7, #40	@ 0x28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <cal_crc>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	71fb      	strb	r3, [r7, #7]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	71bb      	strb	r3, [r7, #6]
    int8_t poly = 0x1D;
 8007e12:	231d      	movs	r3, #29
 8007e14:	737b      	strb	r3, [r7, #13]
    int8_t var2;
    uint8_t i;

    for (i = 0; i < 8; i++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	73bb      	strb	r3, [r7, #14]
 8007e1a:	e01c      	b.n	8007e56 <cal_crc+0x54>
    {
        if ((seed & 0x80) ^ (data & 0x80))
 8007e1c:	79fa      	ldrb	r2, [r7, #7]
 8007e1e:	79bb      	ldrb	r3, [r7, #6]
 8007e20:	4053      	eors	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	b25b      	sxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	da02      	bge.n	8007e30 <cal_crc+0x2e>
        {
            var2 = 1;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
 8007e2e:	e001      	b.n	8007e34 <cal_crc+0x32>
        }
        else
        {
            var2 = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
        }

        seed = (seed & 0x7F) << 1;
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	71fb      	strb	r3, [r7, #7]
        data = (data & 0x7F) << 1;
 8007e3a:	79bb      	ldrb	r3, [r7, #6]
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	71bb      	strb	r3, [r7, #6]
        seed = seed ^ (uint8_t)(poly * var2);
 8007e40:	7b7a      	ldrb	r2, [r7, #13]
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	fb12 f303 	smulbb	r3, r2, r3
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	4053      	eors	r3, r2
 8007e4e:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	3301      	adds	r3, #1
 8007e54:	73bb      	strb	r3, [r7, #14]
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	d9df      	bls.n	8007e1c <cal_crc+0x1a>
    }

    return (int8_t)seed;
 8007e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	@ 0x28
 8007e70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007e72:	2300      	movs	r3, #0
 8007e74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e76:	4b7e      	ldr	r3, [pc, #504]	@ (8008070 <xTaskIncrementTick+0x204>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f040 80ed 	bne.w	800805a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e80:	4b7c      	ldr	r3, [pc, #496]	@ (8008074 <xTaskIncrementTick+0x208>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3301      	adds	r3, #1
 8007e86:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007e88:	4a7a      	ldr	r2, [pc, #488]	@ (8008074 <xTaskIncrementTick+0x208>)
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d121      	bne.n	8007ed8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007e94:	4b78      	ldr	r3, [pc, #480]	@ (8008078 <xTaskIncrementTick+0x20c>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00b      	beq.n	8007eb6 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <xTaskIncrementTick+0x46>
 8007eb6:	4b70      	ldr	r3, [pc, #448]	@ (8008078 <xTaskIncrementTick+0x20c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800807c <xTaskIncrementTick+0x210>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a6d      	ldr	r2, [pc, #436]	@ (8008078 <xTaskIncrementTick+0x20c>)
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	4a6d      	ldr	r2, [pc, #436]	@ (800807c <xTaskIncrementTick+0x210>)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	6013      	str	r3, [r2, #0]
 8007eca:	4b6d      	ldr	r3, [pc, #436]	@ (8008080 <xTaskIncrementTick+0x214>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	4a6b      	ldr	r2, [pc, #428]	@ (8008080 <xTaskIncrementTick+0x214>)
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	f000 f93e 	bl	8008154 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8008084 <xTaskIncrementTick+0x218>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	f0c0 80a6 	bcc.w	8008030 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ee4:	4b64      	ldr	r3, [pc, #400]	@ (8008078 <xTaskIncrementTick+0x20c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d104      	bne.n	8007ef8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eee:	4b65      	ldr	r3, [pc, #404]	@ (8008084 <xTaskIncrementTick+0x218>)
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ef4:	601a      	str	r2, [r3, #0]
                    break;
 8007ef6:	e09b      	b.n	8008030 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef8:	4b5f      	ldr	r3, [pc, #380]	@ (8008078 <xTaskIncrementTick+0x20c>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d203      	bcs.n	8007f18 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007f10:	4a5c      	ldr	r2, [pc, #368]	@ (8008084 <xTaskIncrementTick+0x218>)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007f16:	e08b      	b.n	8008030 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	68d2      	ldr	r2, [r2, #12]
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	6892      	ldr	r2, [r2, #8]
 8007f30:	605a      	str	r2, [r3, #4]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d103      	bne.n	8007f46 <xTaskIncrementTick+0xda>
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	615a      	str	r2, [r3, #20]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	1e5a      	subs	r2, r3, #1
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01e      	beq.n	8007f9c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	6a12      	ldr	r2, [r2, #32]
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	69d2      	ldr	r2, [r2, #28]
 8007f76:	605a      	str	r2, [r3, #4]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d103      	bne.n	8007f8c <xTaskIncrementTick+0x120>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	6a1a      	ldr	r2, [r3, #32]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	605a      	str	r2, [r3, #4]
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	1e5a      	subs	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	4b38      	ldr	r3, [pc, #224]	@ (8008088 <xTaskIncrementTick+0x21c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	4a37      	ldr	r2, [pc, #220]	@ (8008088 <xTaskIncrementTick+0x21c>)
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb2:	4936      	ldr	r1, [pc, #216]	@ (800808c <xTaskIncrementTick+0x220>)
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	609a      	str	r2, [r3, #8]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	60da      	str	r2, [r3, #12]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	3204      	adds	r2, #4
 8007fda:	605a      	str	r2, [r3, #4]
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4a26      	ldr	r2, [pc, #152]	@ (800808c <xTaskIncrementTick+0x220>)
 8007ff2:	441a      	add	r2, r3
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	615a      	str	r2, [r3, #20]
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ffc:	4923      	ldr	r1, [pc, #140]	@ (800808c <xTaskIncrementTick+0x220>)
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	440b      	add	r3, r1
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	1c59      	adds	r1, r3, #1
 800800c:	481f      	ldr	r0, [pc, #124]	@ (800808c <xTaskIncrementTick+0x220>)
 800800e:	4613      	mov	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4403      	add	r3, r0
 8008018:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801e:	4b1c      	ldr	r3, [pc, #112]	@ (8008090 <xTaskIncrementTick+0x224>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	429a      	cmp	r2, r3
 8008026:	f67f af5d 	bls.w	8007ee4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800802a:	2301      	movs	r3, #1
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800802e:	e759      	b.n	8007ee4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008030:	4b17      	ldr	r3, [pc, #92]	@ (8008090 <xTaskIncrementTick+0x224>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008036:	4915      	ldr	r1, [pc, #84]	@ (800808c <xTaskIncrementTick+0x220>)
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	440b      	add	r3, r1
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d901      	bls.n	800804c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008048:	2301      	movs	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800804c:	4b11      	ldr	r3, [pc, #68]	@ (8008094 <xTaskIncrementTick+0x228>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008054:	2301      	movs	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	@ 0x24
 8008058:	e004      	b.n	8008064 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800805a:	4b0f      	ldr	r3, [pc, #60]	@ (8008098 <xTaskIncrementTick+0x22c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3301      	adds	r3, #1
 8008060:	4a0d      	ldr	r2, [pc, #52]	@ (8008098 <xTaskIncrementTick+0x22c>)
 8008062:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008066:	4618      	mov	r0, r3
 8008068:	3728      	adds	r7, #40	@ 0x28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000510 	.word	0x20000510
 8008074:	200004f8 	.word	0x200004f8
 8008078:	200004f0 	.word	0x200004f0
 800807c:	200004f4 	.word	0x200004f4
 8008080:	20000508 	.word	0x20000508
 8008084:	2000050c 	.word	0x2000050c
 8008088:	200004fc 	.word	0x200004fc
 800808c:	2000048c 	.word	0x2000048c
 8008090:	20000488 	.word	0x20000488
 8008094:	20000504 	.word	0x20000504
 8008098:	20000500 	.word	0x20000500

0800809c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080a2:	4b27      	ldr	r3, [pc, #156]	@ (8008140 <vTaskSwitchContext+0xa4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80080aa:	4b26      	ldr	r3, [pc, #152]	@ (8008144 <vTaskSwitchContext+0xa8>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80080b0:	e040      	b.n	8008134 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80080b2:	4b24      	ldr	r3, [pc, #144]	@ (8008144 <vTaskSwitchContext+0xa8>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b8:	4b23      	ldr	r3, [pc, #140]	@ (8008148 <vTaskSwitchContext+0xac>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	fab3 f383 	clz	r3, r3
 80080c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80080c6:	7afb      	ldrb	r3, [r7, #11]
 80080c8:	f1c3 031f 	rsb	r3, r3, #31
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	491f      	ldr	r1, [pc, #124]	@ (800814c <vTaskSwitchContext+0xb0>)
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4613      	mov	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	4413      	add	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <vTaskSwitchContext+0x5e>
        __asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	607b      	str	r3, [r7, #4]
    }
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <vTaskSwitchContext+0x5a>
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4a11      	ldr	r2, [pc, #68]	@ (800814c <vTaskSwitchContext+0xb0>)
 8008106:	4413      	add	r3, r2
 8008108:	613b      	str	r3, [r7, #16]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	605a      	str	r2, [r3, #4]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	3308      	adds	r3, #8
 800811c:	429a      	cmp	r2, r3
 800811e:	d104      	bne.n	800812a <vTaskSwitchContext+0x8e>
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	605a      	str	r2, [r3, #4]
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	4a07      	ldr	r2, [pc, #28]	@ (8008150 <vTaskSwitchContext+0xb4>)
 8008132:	6013      	str	r3, [r2, #0]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	20000510 	.word	0x20000510
 8008144:	20000504 	.word	0x20000504
 8008148:	200004fc 	.word	0x200004fc
 800814c:	2000048c 	.word	0x2000048c
 8008150:	20000488 	.word	0x20000488

08008154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008154:	b480      	push	{r7}
 8008156:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008158:	4b0a      	ldr	r3, [pc, #40]	@ (8008184 <prvResetNextTaskUnblockTime+0x30>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d104      	bne.n	800816c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008162:	4b09      	ldr	r3, [pc, #36]	@ (8008188 <prvResetNextTaskUnblockTime+0x34>)
 8008164:	f04f 32ff 	mov.w	r2, #4294967295
 8008168:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800816a:	e005      	b.n	8008178 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800816c:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <prvResetNextTaskUnblockTime+0x30>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a04      	ldr	r2, [pc, #16]	@ (8008188 <prvResetNextTaskUnblockTime+0x34>)
 8008176:	6013      	str	r3, [r2, #0]
}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	200004f0 	.word	0x200004f0
 8008188:	2000050c 	.word	0x2000050c
 800818c:	00000000 	.word	0x00000000

08008190 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <pxCurrentTCBConst2>)
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6808      	ldr	r0, [r1, #0]
 8008196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819a:	f380 8809 	msr	PSP, r0
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f04f 0000 	mov.w	r0, #0
 80081a6:	f380 8811 	msr	BASEPRI, r0
 80081aa:	4770      	bx	lr
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst2>:
 80081b0:	20000488 	.word	0x20000488
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
	...

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	@ (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081e4:	f380 8811 	msr	BASEPRI, r0
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f7ff ff54 	bl	800809c <vTaskSwitchContext>
 80081f4:	f04f 0000 	mov.w	r0, #0
 80081f8:	f380 8811 	msr	BASEPRI, r0
 80081fc:	bc09      	pop	{r0, r3}
 80081fe:	6819      	ldr	r1, [r3, #0]
 8008200:	6808      	ldr	r0, [r1, #0]
 8008202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008206:	f01e 0f10 	tst.w	lr, #16
 800820a:	bf08      	it	eq
 800820c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008210:	f380 8809 	msr	PSP, r0
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst>:
 8008220:	20000488 	.word	0x20000488
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
        __asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	607b      	str	r3, [r7, #4]
    }
 8008240:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008242:	f7ff fe13 	bl	8007e6c <xTaskIncrementTick>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824c:	4b06      	ldr	r3, [pc, #24]	@ (8008268 <SysTick_Handler+0x40>)
 800824e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	2300      	movs	r3, #0
 8008256:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800825e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <__cvt>:
 800826c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	ec57 6b10 	vmov	r6, r7, d0
 8008274:	2f00      	cmp	r7, #0
 8008276:	460c      	mov	r4, r1
 8008278:	4619      	mov	r1, r3
 800827a:	463b      	mov	r3, r7
 800827c:	bfbb      	ittet	lt
 800827e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008282:	461f      	movlt	r7, r3
 8008284:	2300      	movge	r3, #0
 8008286:	232d      	movlt	r3, #45	@ 0x2d
 8008288:	700b      	strb	r3, [r1, #0]
 800828a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800828c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008290:	4691      	mov	r9, r2
 8008292:	f023 0820 	bic.w	r8, r3, #32
 8008296:	bfbc      	itt	lt
 8008298:	4632      	movlt	r2, r6
 800829a:	4616      	movlt	r6, r2
 800829c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80082a0:	d005      	beq.n	80082ae <__cvt+0x42>
 80082a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80082a6:	d100      	bne.n	80082aa <__cvt+0x3e>
 80082a8:	3401      	adds	r4, #1
 80082aa:	2102      	movs	r1, #2
 80082ac:	e000      	b.n	80082b0 <__cvt+0x44>
 80082ae:	2103      	movs	r1, #3
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	ab02      	add	r3, sp, #8
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	ec47 6b10 	vmov	d0, r6, r7
 80082bc:	4653      	mov	r3, sl
 80082be:	4622      	mov	r2, r4
 80082c0:	f001 f982 	bl	80095c8 <_dtoa_r>
 80082c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80082c8:	4605      	mov	r5, r0
 80082ca:	d119      	bne.n	8008300 <__cvt+0x94>
 80082cc:	f019 0f01 	tst.w	r9, #1
 80082d0:	d00e      	beq.n	80082f0 <__cvt+0x84>
 80082d2:	eb00 0904 	add.w	r9, r0, r4
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	4630      	mov	r0, r6
 80082dc:	4639      	mov	r1, r7
 80082de:	f7f8 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e2:	b108      	cbz	r0, 80082e8 <__cvt+0x7c>
 80082e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80082e8:	2230      	movs	r2, #48	@ 0x30
 80082ea:	9b03      	ldr	r3, [sp, #12]
 80082ec:	454b      	cmp	r3, r9
 80082ee:	d31e      	bcc.n	800832e <__cvt+0xc2>
 80082f0:	9b03      	ldr	r3, [sp, #12]
 80082f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082f4:	1b5b      	subs	r3, r3, r5
 80082f6:	4628      	mov	r0, r5
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	b004      	add	sp, #16
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008304:	eb00 0904 	add.w	r9, r0, r4
 8008308:	d1e5      	bne.n	80082d6 <__cvt+0x6a>
 800830a:	7803      	ldrb	r3, [r0, #0]
 800830c:	2b30      	cmp	r3, #48	@ 0x30
 800830e:	d10a      	bne.n	8008326 <__cvt+0xba>
 8008310:	2200      	movs	r2, #0
 8008312:	2300      	movs	r3, #0
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800831c:	b918      	cbnz	r0, 8008326 <__cvt+0xba>
 800831e:	f1c4 0401 	rsb	r4, r4, #1
 8008322:	f8ca 4000 	str.w	r4, [sl]
 8008326:	f8da 3000 	ldr.w	r3, [sl]
 800832a:	4499      	add	r9, r3
 800832c:	e7d3      	b.n	80082d6 <__cvt+0x6a>
 800832e:	1c59      	adds	r1, r3, #1
 8008330:	9103      	str	r1, [sp, #12]
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e7d9      	b.n	80082ea <__cvt+0x7e>

08008336 <__exponent>:
 8008336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008338:	2900      	cmp	r1, #0
 800833a:	bfba      	itte	lt
 800833c:	4249      	neglt	r1, r1
 800833e:	232d      	movlt	r3, #45	@ 0x2d
 8008340:	232b      	movge	r3, #43	@ 0x2b
 8008342:	2909      	cmp	r1, #9
 8008344:	7002      	strb	r2, [r0, #0]
 8008346:	7043      	strb	r3, [r0, #1]
 8008348:	dd29      	ble.n	800839e <__exponent+0x68>
 800834a:	f10d 0307 	add.w	r3, sp, #7
 800834e:	461d      	mov	r5, r3
 8008350:	270a      	movs	r7, #10
 8008352:	461a      	mov	r2, r3
 8008354:	fbb1 f6f7 	udiv	r6, r1, r7
 8008358:	fb07 1416 	mls	r4, r7, r6, r1
 800835c:	3430      	adds	r4, #48	@ 0x30
 800835e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008362:	460c      	mov	r4, r1
 8008364:	2c63      	cmp	r4, #99	@ 0x63
 8008366:	f103 33ff 	add.w	r3, r3, #4294967295
 800836a:	4631      	mov	r1, r6
 800836c:	dcf1      	bgt.n	8008352 <__exponent+0x1c>
 800836e:	3130      	adds	r1, #48	@ 0x30
 8008370:	1e94      	subs	r4, r2, #2
 8008372:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008376:	1c41      	adds	r1, r0, #1
 8008378:	4623      	mov	r3, r4
 800837a:	42ab      	cmp	r3, r5
 800837c:	d30a      	bcc.n	8008394 <__exponent+0x5e>
 800837e:	f10d 0309 	add.w	r3, sp, #9
 8008382:	1a9b      	subs	r3, r3, r2
 8008384:	42ac      	cmp	r4, r5
 8008386:	bf88      	it	hi
 8008388:	2300      	movhi	r3, #0
 800838a:	3302      	adds	r3, #2
 800838c:	4403      	add	r3, r0
 800838e:	1a18      	subs	r0, r3, r0
 8008390:	b003      	add	sp, #12
 8008392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008394:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008398:	f801 6f01 	strb.w	r6, [r1, #1]!
 800839c:	e7ed      	b.n	800837a <__exponent+0x44>
 800839e:	2330      	movs	r3, #48	@ 0x30
 80083a0:	3130      	adds	r1, #48	@ 0x30
 80083a2:	7083      	strb	r3, [r0, #2]
 80083a4:	70c1      	strb	r1, [r0, #3]
 80083a6:	1d03      	adds	r3, r0, #4
 80083a8:	e7f1      	b.n	800838e <__exponent+0x58>
	...

080083ac <_printf_float>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	b08d      	sub	sp, #52	@ 0x34
 80083b2:	460c      	mov	r4, r1
 80083b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80083b8:	4616      	mov	r6, r2
 80083ba:	461f      	mov	r7, r3
 80083bc:	4605      	mov	r5, r0
 80083be:	f000 ffed 	bl	800939c <_localeconv_r>
 80083c2:	6803      	ldr	r3, [r0, #0]
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f7 ff52 	bl	8000270 <strlen>
 80083cc:	2300      	movs	r3, #0
 80083ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d0:	f8d8 3000 	ldr.w	r3, [r8]
 80083d4:	9005      	str	r0, [sp, #20]
 80083d6:	3307      	adds	r3, #7
 80083d8:	f023 0307 	bic.w	r3, r3, #7
 80083dc:	f103 0208 	add.w	r2, r3, #8
 80083e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80083e4:	f8d4 b000 	ldr.w	fp, [r4]
 80083e8:	f8c8 2000 	str.w	r2, [r8]
 80083ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80083fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80083fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008402:	4b9c      	ldr	r3, [pc, #624]	@ (8008674 <_printf_float+0x2c8>)
 8008404:	f04f 32ff 	mov.w	r2, #4294967295
 8008408:	f7f8 fb90 	bl	8000b2c <__aeabi_dcmpun>
 800840c:	bb70      	cbnz	r0, 800846c <_printf_float+0xc0>
 800840e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008412:	4b98      	ldr	r3, [pc, #608]	@ (8008674 <_printf_float+0x2c8>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295
 8008418:	f7f8 fb6a 	bl	8000af0 <__aeabi_dcmple>
 800841c:	bb30      	cbnz	r0, 800846c <_printf_float+0xc0>
 800841e:	2200      	movs	r2, #0
 8008420:	2300      	movs	r3, #0
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f8 fb59 	bl	8000adc <__aeabi_dcmplt>
 800842a:	b110      	cbz	r0, 8008432 <_printf_float+0x86>
 800842c:	232d      	movs	r3, #45	@ 0x2d
 800842e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008432:	4a91      	ldr	r2, [pc, #580]	@ (8008678 <_printf_float+0x2cc>)
 8008434:	4b91      	ldr	r3, [pc, #580]	@ (800867c <_printf_float+0x2d0>)
 8008436:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800843a:	bf8c      	ite	hi
 800843c:	4690      	movhi	r8, r2
 800843e:	4698      	movls	r8, r3
 8008440:	2303      	movs	r3, #3
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	f02b 0304 	bic.w	r3, fp, #4
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	f04f 0900 	mov.w	r9, #0
 800844e:	9700      	str	r7, [sp, #0]
 8008450:	4633      	mov	r3, r6
 8008452:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f9d2 	bl	8008800 <_printf_common>
 800845c:	3001      	adds	r0, #1
 800845e:	f040 808d 	bne.w	800857c <_printf_float+0x1d0>
 8008462:	f04f 30ff 	mov.w	r0, #4294967295
 8008466:	b00d      	add	sp, #52	@ 0x34
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f8 fb5a 	bl	8000b2c <__aeabi_dcmpun>
 8008478:	b140      	cbz	r0, 800848c <_printf_float+0xe0>
 800847a:	464b      	mov	r3, r9
 800847c:	2b00      	cmp	r3, #0
 800847e:	bfbc      	itt	lt
 8008480:	232d      	movlt	r3, #45	@ 0x2d
 8008482:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008486:	4a7e      	ldr	r2, [pc, #504]	@ (8008680 <_printf_float+0x2d4>)
 8008488:	4b7e      	ldr	r3, [pc, #504]	@ (8008684 <_printf_float+0x2d8>)
 800848a:	e7d4      	b.n	8008436 <_printf_float+0x8a>
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008492:	9206      	str	r2, [sp, #24]
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	d13b      	bne.n	8008510 <_printf_float+0x164>
 8008498:	2306      	movs	r3, #6
 800849a:	6063      	str	r3, [r4, #4]
 800849c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80084a0:	2300      	movs	r3, #0
 80084a2:	6022      	str	r2, [r4, #0]
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80084a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80084ac:	ab09      	add	r3, sp, #36	@ 0x24
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	6861      	ldr	r1, [r4, #4]
 80084b2:	ec49 8b10 	vmov	d0, r8, r9
 80084b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80084ba:	4628      	mov	r0, r5
 80084bc:	f7ff fed6 	bl	800826c <__cvt>
 80084c0:	9b06      	ldr	r3, [sp, #24]
 80084c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084c4:	2b47      	cmp	r3, #71	@ 0x47
 80084c6:	4680      	mov	r8, r0
 80084c8:	d129      	bne.n	800851e <_printf_float+0x172>
 80084ca:	1cc8      	adds	r0, r1, #3
 80084cc:	db02      	blt.n	80084d4 <_printf_float+0x128>
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	4299      	cmp	r1, r3
 80084d2:	dd41      	ble.n	8008558 <_printf_float+0x1ac>
 80084d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80084d8:	fa5f fa8a 	uxtb.w	sl, sl
 80084dc:	3901      	subs	r1, #1
 80084de:	4652      	mov	r2, sl
 80084e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80084e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80084e6:	f7ff ff26 	bl	8008336 <__exponent>
 80084ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084ec:	1813      	adds	r3, r2, r0
 80084ee:	2a01      	cmp	r2, #1
 80084f0:	4681      	mov	r9, r0
 80084f2:	6123      	str	r3, [r4, #16]
 80084f4:	dc02      	bgt.n	80084fc <_printf_float+0x150>
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	07d2      	lsls	r2, r2, #31
 80084fa:	d501      	bpl.n	8008500 <_printf_float+0x154>
 80084fc:	3301      	adds	r3, #1
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008504:	2b00      	cmp	r3, #0
 8008506:	d0a2      	beq.n	800844e <_printf_float+0xa2>
 8008508:	232d      	movs	r3, #45	@ 0x2d
 800850a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800850e:	e79e      	b.n	800844e <_printf_float+0xa2>
 8008510:	9a06      	ldr	r2, [sp, #24]
 8008512:	2a47      	cmp	r2, #71	@ 0x47
 8008514:	d1c2      	bne.n	800849c <_printf_float+0xf0>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1c0      	bne.n	800849c <_printf_float+0xf0>
 800851a:	2301      	movs	r3, #1
 800851c:	e7bd      	b.n	800849a <_printf_float+0xee>
 800851e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008522:	d9db      	bls.n	80084dc <_printf_float+0x130>
 8008524:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008528:	d118      	bne.n	800855c <_printf_float+0x1b0>
 800852a:	2900      	cmp	r1, #0
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	dd0b      	ble.n	8008548 <_printf_float+0x19c>
 8008530:	6121      	str	r1, [r4, #16]
 8008532:	b913      	cbnz	r3, 800853a <_printf_float+0x18e>
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	07d0      	lsls	r0, r2, #31
 8008538:	d502      	bpl.n	8008540 <_printf_float+0x194>
 800853a:	3301      	adds	r3, #1
 800853c:	440b      	add	r3, r1
 800853e:	6123      	str	r3, [r4, #16]
 8008540:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008542:	f04f 0900 	mov.w	r9, #0
 8008546:	e7db      	b.n	8008500 <_printf_float+0x154>
 8008548:	b913      	cbnz	r3, 8008550 <_printf_float+0x1a4>
 800854a:	6822      	ldr	r2, [r4, #0]
 800854c:	07d2      	lsls	r2, r2, #31
 800854e:	d501      	bpl.n	8008554 <_printf_float+0x1a8>
 8008550:	3302      	adds	r3, #2
 8008552:	e7f4      	b.n	800853e <_printf_float+0x192>
 8008554:	2301      	movs	r3, #1
 8008556:	e7f2      	b.n	800853e <_printf_float+0x192>
 8008558:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800855c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800855e:	4299      	cmp	r1, r3
 8008560:	db05      	blt.n	800856e <_printf_float+0x1c2>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	6121      	str	r1, [r4, #16]
 8008566:	07d8      	lsls	r0, r3, #31
 8008568:	d5ea      	bpl.n	8008540 <_printf_float+0x194>
 800856a:	1c4b      	adds	r3, r1, #1
 800856c:	e7e7      	b.n	800853e <_printf_float+0x192>
 800856e:	2900      	cmp	r1, #0
 8008570:	bfd4      	ite	le
 8008572:	f1c1 0202 	rsble	r2, r1, #2
 8008576:	2201      	movgt	r2, #1
 8008578:	4413      	add	r3, r2
 800857a:	e7e0      	b.n	800853e <_printf_float+0x192>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	055a      	lsls	r2, r3, #21
 8008580:	d407      	bmi.n	8008592 <_printf_float+0x1e6>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	4642      	mov	r2, r8
 8008586:	4631      	mov	r1, r6
 8008588:	4628      	mov	r0, r5
 800858a:	47b8      	blx	r7
 800858c:	3001      	adds	r0, #1
 800858e:	d12b      	bne.n	80085e8 <_printf_float+0x23c>
 8008590:	e767      	b.n	8008462 <_printf_float+0xb6>
 8008592:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008596:	f240 80dd 	bls.w	8008754 <_printf_float+0x3a8>
 800859a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	f7f8 fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d033      	beq.n	8008612 <_printf_float+0x266>
 80085aa:	4a37      	ldr	r2, [pc, #220]	@ (8008688 <_printf_float+0x2dc>)
 80085ac:	2301      	movs	r3, #1
 80085ae:	4631      	mov	r1, r6
 80085b0:	4628      	mov	r0, r5
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	f43f af54 	beq.w	8008462 <_printf_float+0xb6>
 80085ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80085be:	4543      	cmp	r3, r8
 80085c0:	db02      	blt.n	80085c8 <_printf_float+0x21c>
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	07d8      	lsls	r0, r3, #31
 80085c6:	d50f      	bpl.n	80085e8 <_printf_float+0x23c>
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af45 	beq.w	8008462 <_printf_float+0xb6>
 80085d8:	f04f 0900 	mov.w	r9, #0
 80085dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80085e0:	f104 0a1a 	add.w	sl, r4, #26
 80085e4:	45c8      	cmp	r8, r9
 80085e6:	dc09      	bgt.n	80085fc <_printf_float+0x250>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	079b      	lsls	r3, r3, #30
 80085ec:	f100 8103 	bmi.w	80087f6 <_printf_float+0x44a>
 80085f0:	68e0      	ldr	r0, [r4, #12]
 80085f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085f4:	4298      	cmp	r0, r3
 80085f6:	bfb8      	it	lt
 80085f8:	4618      	movlt	r0, r3
 80085fa:	e734      	b.n	8008466 <_printf_float+0xba>
 80085fc:	2301      	movs	r3, #1
 80085fe:	4652      	mov	r2, sl
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f af2b 	beq.w	8008462 <_printf_float+0xb6>
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	e7e8      	b.n	80085e4 <_printf_float+0x238>
 8008612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008614:	2b00      	cmp	r3, #0
 8008616:	dc39      	bgt.n	800868c <_printf_float+0x2e0>
 8008618:	4a1b      	ldr	r2, [pc, #108]	@ (8008688 <_printf_float+0x2dc>)
 800861a:	2301      	movs	r3, #1
 800861c:	4631      	mov	r1, r6
 800861e:	4628      	mov	r0, r5
 8008620:	47b8      	blx	r7
 8008622:	3001      	adds	r0, #1
 8008624:	f43f af1d 	beq.w	8008462 <_printf_float+0xb6>
 8008628:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800862c:	ea59 0303 	orrs.w	r3, r9, r3
 8008630:	d102      	bne.n	8008638 <_printf_float+0x28c>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	07d9      	lsls	r1, r3, #31
 8008636:	d5d7      	bpl.n	80085e8 <_printf_float+0x23c>
 8008638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af0d 	beq.w	8008462 <_printf_float+0xb6>
 8008648:	f04f 0a00 	mov.w	sl, #0
 800864c:	f104 0b1a 	add.w	fp, r4, #26
 8008650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008652:	425b      	negs	r3, r3
 8008654:	4553      	cmp	r3, sl
 8008656:	dc01      	bgt.n	800865c <_printf_float+0x2b0>
 8008658:	464b      	mov	r3, r9
 800865a:	e793      	b.n	8008584 <_printf_float+0x1d8>
 800865c:	2301      	movs	r3, #1
 800865e:	465a      	mov	r2, fp
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	f43f aefb 	beq.w	8008462 <_printf_float+0xb6>
 800866c:	f10a 0a01 	add.w	sl, sl, #1
 8008670:	e7ee      	b.n	8008650 <_printf_float+0x2a4>
 8008672:	bf00      	nop
 8008674:	7fefffff 	.word	0x7fefffff
 8008678:	0800cd6c 	.word	0x0800cd6c
 800867c:	0800cd68 	.word	0x0800cd68
 8008680:	0800cd74 	.word	0x0800cd74
 8008684:	0800cd70 	.word	0x0800cd70
 8008688:	0800cd78 	.word	0x0800cd78
 800868c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800868e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008692:	4553      	cmp	r3, sl
 8008694:	bfa8      	it	ge
 8008696:	4653      	movge	r3, sl
 8008698:	2b00      	cmp	r3, #0
 800869a:	4699      	mov	r9, r3
 800869c:	dc36      	bgt.n	800870c <_printf_float+0x360>
 800869e:	f04f 0b00 	mov.w	fp, #0
 80086a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a6:	f104 021a 	add.w	r2, r4, #26
 80086aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80086ac:	9306      	str	r3, [sp, #24]
 80086ae:	eba3 0309 	sub.w	r3, r3, r9
 80086b2:	455b      	cmp	r3, fp
 80086b4:	dc31      	bgt.n	800871a <_printf_float+0x36e>
 80086b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b8:	459a      	cmp	sl, r3
 80086ba:	dc3a      	bgt.n	8008732 <_printf_float+0x386>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	07da      	lsls	r2, r3, #31
 80086c0:	d437      	bmi.n	8008732 <_printf_float+0x386>
 80086c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c4:	ebaa 0903 	sub.w	r9, sl, r3
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	ebaa 0303 	sub.w	r3, sl, r3
 80086ce:	4599      	cmp	r9, r3
 80086d0:	bfa8      	it	ge
 80086d2:	4699      	movge	r9, r3
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	dc33      	bgt.n	8008742 <_printf_float+0x396>
 80086da:	f04f 0800 	mov.w	r8, #0
 80086de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086e2:	f104 0b1a 	add.w	fp, r4, #26
 80086e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e8:	ebaa 0303 	sub.w	r3, sl, r3
 80086ec:	eba3 0309 	sub.w	r3, r3, r9
 80086f0:	4543      	cmp	r3, r8
 80086f2:	f77f af79 	ble.w	80085e8 <_printf_float+0x23c>
 80086f6:	2301      	movs	r3, #1
 80086f8:	465a      	mov	r2, fp
 80086fa:	4631      	mov	r1, r6
 80086fc:	4628      	mov	r0, r5
 80086fe:	47b8      	blx	r7
 8008700:	3001      	adds	r0, #1
 8008702:	f43f aeae 	beq.w	8008462 <_printf_float+0xb6>
 8008706:	f108 0801 	add.w	r8, r8, #1
 800870a:	e7ec      	b.n	80086e6 <_printf_float+0x33a>
 800870c:	4642      	mov	r2, r8
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d1c2      	bne.n	800869e <_printf_float+0x2f2>
 8008718:	e6a3      	b.n	8008462 <_printf_float+0xb6>
 800871a:	2301      	movs	r3, #1
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	9206      	str	r2, [sp, #24]
 8008722:	47b8      	blx	r7
 8008724:	3001      	adds	r0, #1
 8008726:	f43f ae9c 	beq.w	8008462 <_printf_float+0xb6>
 800872a:	9a06      	ldr	r2, [sp, #24]
 800872c:	f10b 0b01 	add.w	fp, fp, #1
 8008730:	e7bb      	b.n	80086aa <_printf_float+0x2fe>
 8008732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	d1c0      	bne.n	80086c2 <_printf_float+0x316>
 8008740:	e68f      	b.n	8008462 <_printf_float+0xb6>
 8008742:	9a06      	ldr	r2, [sp, #24]
 8008744:	464b      	mov	r3, r9
 8008746:	4442      	add	r2, r8
 8008748:	4631      	mov	r1, r6
 800874a:	4628      	mov	r0, r5
 800874c:	47b8      	blx	r7
 800874e:	3001      	adds	r0, #1
 8008750:	d1c3      	bne.n	80086da <_printf_float+0x32e>
 8008752:	e686      	b.n	8008462 <_printf_float+0xb6>
 8008754:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008758:	f1ba 0f01 	cmp.w	sl, #1
 800875c:	dc01      	bgt.n	8008762 <_printf_float+0x3b6>
 800875e:	07db      	lsls	r3, r3, #31
 8008760:	d536      	bpl.n	80087d0 <_printf_float+0x424>
 8008762:	2301      	movs	r3, #1
 8008764:	4642      	mov	r2, r8
 8008766:	4631      	mov	r1, r6
 8008768:	4628      	mov	r0, r5
 800876a:	47b8      	blx	r7
 800876c:	3001      	adds	r0, #1
 800876e:	f43f ae78 	beq.w	8008462 <_printf_float+0xb6>
 8008772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	f43f ae70 	beq.w	8008462 <_printf_float+0xb6>
 8008782:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008786:	2200      	movs	r2, #0
 8008788:	2300      	movs	r3, #0
 800878a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800878e:	f7f8 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008792:	b9c0      	cbnz	r0, 80087c6 <_printf_float+0x41a>
 8008794:	4653      	mov	r3, sl
 8008796:	f108 0201 	add.w	r2, r8, #1
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	d10c      	bne.n	80087be <_printf_float+0x412>
 80087a4:	e65d      	b.n	8008462 <_printf_float+0xb6>
 80087a6:	2301      	movs	r3, #1
 80087a8:	465a      	mov	r2, fp
 80087aa:	4631      	mov	r1, r6
 80087ac:	4628      	mov	r0, r5
 80087ae:	47b8      	blx	r7
 80087b0:	3001      	adds	r0, #1
 80087b2:	f43f ae56 	beq.w	8008462 <_printf_float+0xb6>
 80087b6:	f108 0801 	add.w	r8, r8, #1
 80087ba:	45d0      	cmp	r8, sl
 80087bc:	dbf3      	blt.n	80087a6 <_printf_float+0x3fa>
 80087be:	464b      	mov	r3, r9
 80087c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80087c4:	e6df      	b.n	8008586 <_printf_float+0x1da>
 80087c6:	f04f 0800 	mov.w	r8, #0
 80087ca:	f104 0b1a 	add.w	fp, r4, #26
 80087ce:	e7f4      	b.n	80087ba <_printf_float+0x40e>
 80087d0:	2301      	movs	r3, #1
 80087d2:	4642      	mov	r2, r8
 80087d4:	e7e1      	b.n	800879a <_printf_float+0x3ee>
 80087d6:	2301      	movs	r3, #1
 80087d8:	464a      	mov	r2, r9
 80087da:	4631      	mov	r1, r6
 80087dc:	4628      	mov	r0, r5
 80087de:	47b8      	blx	r7
 80087e0:	3001      	adds	r0, #1
 80087e2:	f43f ae3e 	beq.w	8008462 <_printf_float+0xb6>
 80087e6:	f108 0801 	add.w	r8, r8, #1
 80087ea:	68e3      	ldr	r3, [r4, #12]
 80087ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087ee:	1a5b      	subs	r3, r3, r1
 80087f0:	4543      	cmp	r3, r8
 80087f2:	dcf0      	bgt.n	80087d6 <_printf_float+0x42a>
 80087f4:	e6fc      	b.n	80085f0 <_printf_float+0x244>
 80087f6:	f04f 0800 	mov.w	r8, #0
 80087fa:	f104 0919 	add.w	r9, r4, #25
 80087fe:	e7f4      	b.n	80087ea <_printf_float+0x43e>

08008800 <_printf_common>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	4698      	mov	r8, r3
 8008808:	688a      	ldr	r2, [r1, #8]
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008810:	4293      	cmp	r3, r2
 8008812:	bfb8      	it	lt
 8008814:	4613      	movlt	r3, r2
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800881c:	4607      	mov	r7, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b10a      	cbz	r2, 8008826 <_printf_common+0x26>
 8008822:	3301      	adds	r3, #1
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	bf42      	ittt	mi
 800882c:	6833      	ldrmi	r3, [r6, #0]
 800882e:	3302      	addmi	r3, #2
 8008830:	6033      	strmi	r3, [r6, #0]
 8008832:	6825      	ldr	r5, [r4, #0]
 8008834:	f015 0506 	ands.w	r5, r5, #6
 8008838:	d106      	bne.n	8008848 <_printf_common+0x48>
 800883a:	f104 0a19 	add.w	sl, r4, #25
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	6832      	ldr	r2, [r6, #0]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	42ab      	cmp	r3, r5
 8008846:	dc26      	bgt.n	8008896 <_printf_common+0x96>
 8008848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	3b00      	subs	r3, #0
 8008850:	bf18      	it	ne
 8008852:	2301      	movne	r3, #1
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d42b      	bmi.n	80088b0 <_printf_common+0xb0>
 8008858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800885c:	4641      	mov	r1, r8
 800885e:	4638      	mov	r0, r7
 8008860:	47c8      	blx	r9
 8008862:	3001      	adds	r0, #1
 8008864:	d01e      	beq.n	80088a4 <_printf_common+0xa4>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	f003 0306 	and.w	r3, r3, #6
 800886e:	2b04      	cmp	r3, #4
 8008870:	bf02      	ittt	eq
 8008872:	68e5      	ldreq	r5, [r4, #12]
 8008874:	6833      	ldreq	r3, [r6, #0]
 8008876:	1aed      	subeq	r5, r5, r3
 8008878:	68a3      	ldr	r3, [r4, #8]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	2600      	movs	r6, #0
 800888c:	341a      	adds	r4, #26
 800888e:	42b5      	cmp	r5, r6
 8008890:	d11a      	bne.n	80088c8 <_printf_common+0xc8>
 8008892:	2000      	movs	r0, #0
 8008894:	e008      	b.n	80088a8 <_printf_common+0xa8>
 8008896:	2301      	movs	r3, #1
 8008898:	4652      	mov	r2, sl
 800889a:	4641      	mov	r1, r8
 800889c:	4638      	mov	r0, r7
 800889e:	47c8      	blx	r9
 80088a0:	3001      	adds	r0, #1
 80088a2:	d103      	bne.n	80088ac <_printf_common+0xac>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7c6      	b.n	800883e <_printf_common+0x3e>
 80088b0:	18e1      	adds	r1, r4, r3
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	2030      	movs	r0, #48	@ 0x30
 80088b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80088ba:	4422      	add	r2, r4
 80088bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80088c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80088c4:	3302      	adds	r3, #2
 80088c6:	e7c7      	b.n	8008858 <_printf_common+0x58>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	4641      	mov	r1, r8
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c8      	blx	r9
 80088d2:	3001      	adds	r0, #1
 80088d4:	d0e6      	beq.n	80088a4 <_printf_common+0xa4>
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7d9      	b.n	800888e <_printf_common+0x8e>
	...

080088dc <_printf_i>:
 80088dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	7e0f      	ldrb	r7, [r1, #24]
 80088e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80088e4:	2f78      	cmp	r7, #120	@ 0x78
 80088e6:	4691      	mov	r9, r2
 80088e8:	4680      	mov	r8, r0
 80088ea:	460c      	mov	r4, r1
 80088ec:	469a      	mov	sl, r3
 80088ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80088f2:	d807      	bhi.n	8008904 <_printf_i+0x28>
 80088f4:	2f62      	cmp	r7, #98	@ 0x62
 80088f6:	d80a      	bhi.n	800890e <_printf_i+0x32>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	f000 80d1 	beq.w	8008aa0 <_printf_i+0x1c4>
 80088fe:	2f58      	cmp	r7, #88	@ 0x58
 8008900:	f000 80b8 	beq.w	8008a74 <_printf_i+0x198>
 8008904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800890c:	e03a      	b.n	8008984 <_printf_i+0xa8>
 800890e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008912:	2b15      	cmp	r3, #21
 8008914:	d8f6      	bhi.n	8008904 <_printf_i+0x28>
 8008916:	a101      	add	r1, pc, #4	@ (adr r1, 800891c <_printf_i+0x40>)
 8008918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800891c:	08008975 	.word	0x08008975
 8008920:	08008989 	.word	0x08008989
 8008924:	08008905 	.word	0x08008905
 8008928:	08008905 	.word	0x08008905
 800892c:	08008905 	.word	0x08008905
 8008930:	08008905 	.word	0x08008905
 8008934:	08008989 	.word	0x08008989
 8008938:	08008905 	.word	0x08008905
 800893c:	08008905 	.word	0x08008905
 8008940:	08008905 	.word	0x08008905
 8008944:	08008905 	.word	0x08008905
 8008948:	08008a87 	.word	0x08008a87
 800894c:	080089b3 	.word	0x080089b3
 8008950:	08008a41 	.word	0x08008a41
 8008954:	08008905 	.word	0x08008905
 8008958:	08008905 	.word	0x08008905
 800895c:	08008aa9 	.word	0x08008aa9
 8008960:	08008905 	.word	0x08008905
 8008964:	080089b3 	.word	0x080089b3
 8008968:	08008905 	.word	0x08008905
 800896c:	08008905 	.word	0x08008905
 8008970:	08008a49 	.word	0x08008a49
 8008974:	6833      	ldr	r3, [r6, #0]
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6032      	str	r2, [r6, #0]
 800897c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008984:	2301      	movs	r3, #1
 8008986:	e09c      	b.n	8008ac2 <_printf_i+0x1e6>
 8008988:	6833      	ldr	r3, [r6, #0]
 800898a:	6820      	ldr	r0, [r4, #0]
 800898c:	1d19      	adds	r1, r3, #4
 800898e:	6031      	str	r1, [r6, #0]
 8008990:	0606      	lsls	r6, r0, #24
 8008992:	d501      	bpl.n	8008998 <_printf_i+0xbc>
 8008994:	681d      	ldr	r5, [r3, #0]
 8008996:	e003      	b.n	80089a0 <_printf_i+0xc4>
 8008998:	0645      	lsls	r5, r0, #25
 800899a:	d5fb      	bpl.n	8008994 <_printf_i+0xb8>
 800899c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80089a0:	2d00      	cmp	r5, #0
 80089a2:	da03      	bge.n	80089ac <_printf_i+0xd0>
 80089a4:	232d      	movs	r3, #45	@ 0x2d
 80089a6:	426d      	negs	r5, r5
 80089a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089ac:	4858      	ldr	r0, [pc, #352]	@ (8008b10 <_printf_i+0x234>)
 80089ae:	230a      	movs	r3, #10
 80089b0:	e011      	b.n	80089d6 <_printf_i+0xfa>
 80089b2:	6821      	ldr	r1, [r4, #0]
 80089b4:	6833      	ldr	r3, [r6, #0]
 80089b6:	0608      	lsls	r0, r1, #24
 80089b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80089bc:	d402      	bmi.n	80089c4 <_printf_i+0xe8>
 80089be:	0649      	lsls	r1, r1, #25
 80089c0:	bf48      	it	mi
 80089c2:	b2ad      	uxthmi	r5, r5
 80089c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80089c6:	4852      	ldr	r0, [pc, #328]	@ (8008b10 <_printf_i+0x234>)
 80089c8:	6033      	str	r3, [r6, #0]
 80089ca:	bf14      	ite	ne
 80089cc:	230a      	movne	r3, #10
 80089ce:	2308      	moveq	r3, #8
 80089d0:	2100      	movs	r1, #0
 80089d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80089d6:	6866      	ldr	r6, [r4, #4]
 80089d8:	60a6      	str	r6, [r4, #8]
 80089da:	2e00      	cmp	r6, #0
 80089dc:	db05      	blt.n	80089ea <_printf_i+0x10e>
 80089de:	6821      	ldr	r1, [r4, #0]
 80089e0:	432e      	orrs	r6, r5
 80089e2:	f021 0104 	bic.w	r1, r1, #4
 80089e6:	6021      	str	r1, [r4, #0]
 80089e8:	d04b      	beq.n	8008a82 <_printf_i+0x1a6>
 80089ea:	4616      	mov	r6, r2
 80089ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80089f0:	fb03 5711 	mls	r7, r3, r1, r5
 80089f4:	5dc7      	ldrb	r7, [r0, r7]
 80089f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80089fa:	462f      	mov	r7, r5
 80089fc:	42bb      	cmp	r3, r7
 80089fe:	460d      	mov	r5, r1
 8008a00:	d9f4      	bls.n	80089ec <_printf_i+0x110>
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	d10b      	bne.n	8008a1e <_printf_i+0x142>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	07df      	lsls	r7, r3, #31
 8008a0a:	d508      	bpl.n	8008a1e <_printf_i+0x142>
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	6861      	ldr	r1, [r4, #4]
 8008a10:	4299      	cmp	r1, r3
 8008a12:	bfde      	ittt	le
 8008a14:	2330      	movle	r3, #48	@ 0x30
 8008a16:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a1a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a1e:	1b92      	subs	r2, r2, r6
 8008a20:	6122      	str	r2, [r4, #16]
 8008a22:	f8cd a000 	str.w	sl, [sp]
 8008a26:	464b      	mov	r3, r9
 8008a28:	aa03      	add	r2, sp, #12
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	f7ff fee7 	bl	8008800 <_printf_common>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d14a      	bne.n	8008acc <_printf_i+0x1f0>
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3a:	b004      	add	sp, #16
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	f043 0320 	orr.w	r3, r3, #32
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	4832      	ldr	r0, [pc, #200]	@ (8008b14 <_printf_i+0x238>)
 8008a4a:	2778      	movs	r7, #120	@ 0x78
 8008a4c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	6831      	ldr	r1, [r6, #0]
 8008a54:	061f      	lsls	r7, r3, #24
 8008a56:	f851 5b04 	ldr.w	r5, [r1], #4
 8008a5a:	d402      	bmi.n	8008a62 <_printf_i+0x186>
 8008a5c:	065f      	lsls	r7, r3, #25
 8008a5e:	bf48      	it	mi
 8008a60:	b2ad      	uxthmi	r5, r5
 8008a62:	6031      	str	r1, [r6, #0]
 8008a64:	07d9      	lsls	r1, r3, #31
 8008a66:	bf44      	itt	mi
 8008a68:	f043 0320 	orrmi.w	r3, r3, #32
 8008a6c:	6023      	strmi	r3, [r4, #0]
 8008a6e:	b11d      	cbz	r5, 8008a78 <_printf_i+0x19c>
 8008a70:	2310      	movs	r3, #16
 8008a72:	e7ad      	b.n	80089d0 <_printf_i+0xf4>
 8008a74:	4826      	ldr	r0, [pc, #152]	@ (8008b10 <_printf_i+0x234>)
 8008a76:	e7e9      	b.n	8008a4c <_printf_i+0x170>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	f023 0320 	bic.w	r3, r3, #32
 8008a7e:	6023      	str	r3, [r4, #0]
 8008a80:	e7f6      	b.n	8008a70 <_printf_i+0x194>
 8008a82:	4616      	mov	r6, r2
 8008a84:	e7bd      	b.n	8008a02 <_printf_i+0x126>
 8008a86:	6833      	ldr	r3, [r6, #0]
 8008a88:	6825      	ldr	r5, [r4, #0]
 8008a8a:	6961      	ldr	r1, [r4, #20]
 8008a8c:	1d18      	adds	r0, r3, #4
 8008a8e:	6030      	str	r0, [r6, #0]
 8008a90:	062e      	lsls	r6, r5, #24
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	d501      	bpl.n	8008a9a <_printf_i+0x1be>
 8008a96:	6019      	str	r1, [r3, #0]
 8008a98:	e002      	b.n	8008aa0 <_printf_i+0x1c4>
 8008a9a:	0668      	lsls	r0, r5, #25
 8008a9c:	d5fb      	bpl.n	8008a96 <_printf_i+0x1ba>
 8008a9e:	8019      	strh	r1, [r3, #0]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6123      	str	r3, [r4, #16]
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	e7bc      	b.n	8008a22 <_printf_i+0x146>
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	1d1a      	adds	r2, r3, #4
 8008aac:	6032      	str	r2, [r6, #0]
 8008aae:	681e      	ldr	r6, [r3, #0]
 8008ab0:	6862      	ldr	r2, [r4, #4]
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7f7 fb8b 	bl	80001d0 <memchr>
 8008aba:	b108      	cbz	r0, 8008ac0 <_printf_i+0x1e4>
 8008abc:	1b80      	subs	r0, r0, r6
 8008abe:	6060      	str	r0, [r4, #4]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008aca:	e7aa      	b.n	8008a22 <_printf_i+0x146>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	4632      	mov	r2, r6
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	47d0      	blx	sl
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d0ad      	beq.n	8008a36 <_printf_i+0x15a>
 8008ada:	6823      	ldr	r3, [r4, #0]
 8008adc:	079b      	lsls	r3, r3, #30
 8008ade:	d413      	bmi.n	8008b08 <_printf_i+0x22c>
 8008ae0:	68e0      	ldr	r0, [r4, #12]
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	4298      	cmp	r0, r3
 8008ae6:	bfb8      	it	lt
 8008ae8:	4618      	movlt	r0, r3
 8008aea:	e7a6      	b.n	8008a3a <_printf_i+0x15e>
 8008aec:	2301      	movs	r3, #1
 8008aee:	4632      	mov	r2, r6
 8008af0:	4649      	mov	r1, r9
 8008af2:	4640      	mov	r0, r8
 8008af4:	47d0      	blx	sl
 8008af6:	3001      	adds	r0, #1
 8008af8:	d09d      	beq.n	8008a36 <_printf_i+0x15a>
 8008afa:	3501      	adds	r5, #1
 8008afc:	68e3      	ldr	r3, [r4, #12]
 8008afe:	9903      	ldr	r1, [sp, #12]
 8008b00:	1a5b      	subs	r3, r3, r1
 8008b02:	42ab      	cmp	r3, r5
 8008b04:	dcf2      	bgt.n	8008aec <_printf_i+0x210>
 8008b06:	e7eb      	b.n	8008ae0 <_printf_i+0x204>
 8008b08:	2500      	movs	r5, #0
 8008b0a:	f104 0619 	add.w	r6, r4, #25
 8008b0e:	e7f5      	b.n	8008afc <_printf_i+0x220>
 8008b10:	0800cd7a 	.word	0x0800cd7a
 8008b14:	0800cd8b 	.word	0x0800cd8b

08008b18 <_scanf_float>:
 8008b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	b087      	sub	sp, #28
 8008b1e:	4691      	mov	r9, r2
 8008b20:	9303      	str	r3, [sp, #12]
 8008b22:	688b      	ldr	r3, [r1, #8]
 8008b24:	1e5a      	subs	r2, r3, #1
 8008b26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008b2a:	bf81      	itttt	hi
 8008b2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008b30:	eb03 0b05 	addhi.w	fp, r3, r5
 8008b34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008b38:	608b      	strhi	r3, [r1, #8]
 8008b3a:	680b      	ldr	r3, [r1, #0]
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	f04f 0500 	mov.w	r5, #0
 8008b42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008b46:	f842 3b1c 	str.w	r3, [r2], #28
 8008b4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b4e:	4680      	mov	r8, r0
 8008b50:	460c      	mov	r4, r1
 8008b52:	bf98      	it	ls
 8008b54:	f04f 0b00 	movls.w	fp, #0
 8008b58:	9201      	str	r2, [sp, #4]
 8008b5a:	4616      	mov	r6, r2
 8008b5c:	46aa      	mov	sl, r5
 8008b5e:	462f      	mov	r7, r5
 8008b60:	9502      	str	r5, [sp, #8]
 8008b62:	68a2      	ldr	r2, [r4, #8]
 8008b64:	b15a      	cbz	r2, 8008b7e <_scanf_float+0x66>
 8008b66:	f8d9 3000 	ldr.w	r3, [r9]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	2b4e      	cmp	r3, #78	@ 0x4e
 8008b6e:	d863      	bhi.n	8008c38 <_scanf_float+0x120>
 8008b70:	2b40      	cmp	r3, #64	@ 0x40
 8008b72:	d83b      	bhi.n	8008bec <_scanf_float+0xd4>
 8008b74:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008b78:	b2c8      	uxtb	r0, r1
 8008b7a:	280e      	cmp	r0, #14
 8008b7c:	d939      	bls.n	8008bf2 <_scanf_float+0xda>
 8008b7e:	b11f      	cbz	r7, 8008b88 <_scanf_float+0x70>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b86:	6023      	str	r3, [r4, #0]
 8008b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b8c:	f1ba 0f01 	cmp.w	sl, #1
 8008b90:	f200 8114 	bhi.w	8008dbc <_scanf_float+0x2a4>
 8008b94:	9b01      	ldr	r3, [sp, #4]
 8008b96:	429e      	cmp	r6, r3
 8008b98:	f200 8105 	bhi.w	8008da6 <_scanf_float+0x28e>
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	b007      	add	sp, #28
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008ba8:	2a0d      	cmp	r2, #13
 8008baa:	d8e8      	bhi.n	8008b7e <_scanf_float+0x66>
 8008bac:	a101      	add	r1, pc, #4	@ (adr r1, 8008bb4 <_scanf_float+0x9c>)
 8008bae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bb2:	bf00      	nop
 8008bb4:	08008cfd 	.word	0x08008cfd
 8008bb8:	08008b7f 	.word	0x08008b7f
 8008bbc:	08008b7f 	.word	0x08008b7f
 8008bc0:	08008b7f 	.word	0x08008b7f
 8008bc4:	08008d59 	.word	0x08008d59
 8008bc8:	08008d33 	.word	0x08008d33
 8008bcc:	08008b7f 	.word	0x08008b7f
 8008bd0:	08008b7f 	.word	0x08008b7f
 8008bd4:	08008d0b 	.word	0x08008d0b
 8008bd8:	08008b7f 	.word	0x08008b7f
 8008bdc:	08008b7f 	.word	0x08008b7f
 8008be0:	08008b7f 	.word	0x08008b7f
 8008be4:	08008b7f 	.word	0x08008b7f
 8008be8:	08008cc7 	.word	0x08008cc7
 8008bec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008bf0:	e7da      	b.n	8008ba8 <_scanf_float+0x90>
 8008bf2:	290e      	cmp	r1, #14
 8008bf4:	d8c3      	bhi.n	8008b7e <_scanf_float+0x66>
 8008bf6:	a001      	add	r0, pc, #4	@ (adr r0, 8008bfc <_scanf_float+0xe4>)
 8008bf8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008bfc:	08008cb7 	.word	0x08008cb7
 8008c00:	08008b7f 	.word	0x08008b7f
 8008c04:	08008cb7 	.word	0x08008cb7
 8008c08:	08008d47 	.word	0x08008d47
 8008c0c:	08008b7f 	.word	0x08008b7f
 8008c10:	08008c59 	.word	0x08008c59
 8008c14:	08008c9d 	.word	0x08008c9d
 8008c18:	08008c9d 	.word	0x08008c9d
 8008c1c:	08008c9d 	.word	0x08008c9d
 8008c20:	08008c9d 	.word	0x08008c9d
 8008c24:	08008c9d 	.word	0x08008c9d
 8008c28:	08008c9d 	.word	0x08008c9d
 8008c2c:	08008c9d 	.word	0x08008c9d
 8008c30:	08008c9d 	.word	0x08008c9d
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	2b6e      	cmp	r3, #110	@ 0x6e
 8008c3a:	d809      	bhi.n	8008c50 <_scanf_float+0x138>
 8008c3c:	2b60      	cmp	r3, #96	@ 0x60
 8008c3e:	d8b1      	bhi.n	8008ba4 <_scanf_float+0x8c>
 8008c40:	2b54      	cmp	r3, #84	@ 0x54
 8008c42:	d07b      	beq.n	8008d3c <_scanf_float+0x224>
 8008c44:	2b59      	cmp	r3, #89	@ 0x59
 8008c46:	d19a      	bne.n	8008b7e <_scanf_float+0x66>
 8008c48:	2d07      	cmp	r5, #7
 8008c4a:	d198      	bne.n	8008b7e <_scanf_float+0x66>
 8008c4c:	2508      	movs	r5, #8
 8008c4e:	e02f      	b.n	8008cb0 <_scanf_float+0x198>
 8008c50:	2b74      	cmp	r3, #116	@ 0x74
 8008c52:	d073      	beq.n	8008d3c <_scanf_float+0x224>
 8008c54:	2b79      	cmp	r3, #121	@ 0x79
 8008c56:	e7f6      	b.n	8008c46 <_scanf_float+0x12e>
 8008c58:	6821      	ldr	r1, [r4, #0]
 8008c5a:	05c8      	lsls	r0, r1, #23
 8008c5c:	d51e      	bpl.n	8008c9c <_scanf_float+0x184>
 8008c5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008c62:	6021      	str	r1, [r4, #0]
 8008c64:	3701      	adds	r7, #1
 8008c66:	f1bb 0f00 	cmp.w	fp, #0
 8008c6a:	d003      	beq.n	8008c74 <_scanf_float+0x15c>
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c72:	60a2      	str	r2, [r4, #8]
 8008c74:	68a3      	ldr	r3, [r4, #8]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	60a3      	str	r3, [r4, #8]
 8008c7a:	6923      	ldr	r3, [r4, #16]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008c84:	3b01      	subs	r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f8c9 3004 	str.w	r3, [r9, #4]
 8008c8c:	f340 8082 	ble.w	8008d94 <_scanf_float+0x27c>
 8008c90:	f8d9 3000 	ldr.w	r3, [r9]
 8008c94:	3301      	adds	r3, #1
 8008c96:	f8c9 3000 	str.w	r3, [r9]
 8008c9a:	e762      	b.n	8008b62 <_scanf_float+0x4a>
 8008c9c:	eb1a 0105 	adds.w	r1, sl, r5
 8008ca0:	f47f af6d 	bne.w	8008b7e <_scanf_float+0x66>
 8008ca4:	6822      	ldr	r2, [r4, #0]
 8008ca6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008caa:	6022      	str	r2, [r4, #0]
 8008cac:	460d      	mov	r5, r1
 8008cae:	468a      	mov	sl, r1
 8008cb0:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb4:	e7de      	b.n	8008c74 <_scanf_float+0x15c>
 8008cb6:	6822      	ldr	r2, [r4, #0]
 8008cb8:	0610      	lsls	r0, r2, #24
 8008cba:	f57f af60 	bpl.w	8008b7e <_scanf_float+0x66>
 8008cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cc2:	6022      	str	r2, [r4, #0]
 8008cc4:	e7f4      	b.n	8008cb0 <_scanf_float+0x198>
 8008cc6:	f1ba 0f00 	cmp.w	sl, #0
 8008cca:	d10c      	bne.n	8008ce6 <_scanf_float+0x1ce>
 8008ccc:	b977      	cbnz	r7, 8008cec <_scanf_float+0x1d4>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008cd4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008cd8:	d108      	bne.n	8008cec <_scanf_float+0x1d4>
 8008cda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	f04f 0a01 	mov.w	sl, #1
 8008ce4:	e7e4      	b.n	8008cb0 <_scanf_float+0x198>
 8008ce6:	f1ba 0f02 	cmp.w	sl, #2
 8008cea:	d050      	beq.n	8008d8e <_scanf_float+0x276>
 8008cec:	2d01      	cmp	r5, #1
 8008cee:	d002      	beq.n	8008cf6 <_scanf_float+0x1de>
 8008cf0:	2d04      	cmp	r5, #4
 8008cf2:	f47f af44 	bne.w	8008b7e <_scanf_float+0x66>
 8008cf6:	3501      	adds	r5, #1
 8008cf8:	b2ed      	uxtb	r5, r5
 8008cfa:	e7d9      	b.n	8008cb0 <_scanf_float+0x198>
 8008cfc:	f1ba 0f01 	cmp.w	sl, #1
 8008d00:	f47f af3d 	bne.w	8008b7e <_scanf_float+0x66>
 8008d04:	f04f 0a02 	mov.w	sl, #2
 8008d08:	e7d2      	b.n	8008cb0 <_scanf_float+0x198>
 8008d0a:	b975      	cbnz	r5, 8008d2a <_scanf_float+0x212>
 8008d0c:	2f00      	cmp	r7, #0
 8008d0e:	f47f af37 	bne.w	8008b80 <_scanf_float+0x68>
 8008d12:	6822      	ldr	r2, [r4, #0]
 8008d14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d1c:	f040 8103 	bne.w	8008f26 <_scanf_float+0x40e>
 8008d20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d24:	6022      	str	r2, [r4, #0]
 8008d26:	2501      	movs	r5, #1
 8008d28:	e7c2      	b.n	8008cb0 <_scanf_float+0x198>
 8008d2a:	2d03      	cmp	r5, #3
 8008d2c:	d0e3      	beq.n	8008cf6 <_scanf_float+0x1de>
 8008d2e:	2d05      	cmp	r5, #5
 8008d30:	e7df      	b.n	8008cf2 <_scanf_float+0x1da>
 8008d32:	2d02      	cmp	r5, #2
 8008d34:	f47f af23 	bne.w	8008b7e <_scanf_float+0x66>
 8008d38:	2503      	movs	r5, #3
 8008d3a:	e7b9      	b.n	8008cb0 <_scanf_float+0x198>
 8008d3c:	2d06      	cmp	r5, #6
 8008d3e:	f47f af1e 	bne.w	8008b7e <_scanf_float+0x66>
 8008d42:	2507      	movs	r5, #7
 8008d44:	e7b4      	b.n	8008cb0 <_scanf_float+0x198>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	0591      	lsls	r1, r2, #22
 8008d4a:	f57f af18 	bpl.w	8008b7e <_scanf_float+0x66>
 8008d4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008d52:	6022      	str	r2, [r4, #0]
 8008d54:	9702      	str	r7, [sp, #8]
 8008d56:	e7ab      	b.n	8008cb0 <_scanf_float+0x198>
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008d5e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008d62:	d005      	beq.n	8008d70 <_scanf_float+0x258>
 8008d64:	0550      	lsls	r0, r2, #21
 8008d66:	f57f af0a 	bpl.w	8008b7e <_scanf_float+0x66>
 8008d6a:	2f00      	cmp	r7, #0
 8008d6c:	f000 80db 	beq.w	8008f26 <_scanf_float+0x40e>
 8008d70:	0591      	lsls	r1, r2, #22
 8008d72:	bf58      	it	pl
 8008d74:	9902      	ldrpl	r1, [sp, #8]
 8008d76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d7a:	bf58      	it	pl
 8008d7c:	1a79      	subpl	r1, r7, r1
 8008d7e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008d82:	bf58      	it	pl
 8008d84:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008d88:	6022      	str	r2, [r4, #0]
 8008d8a:	2700      	movs	r7, #0
 8008d8c:	e790      	b.n	8008cb0 <_scanf_float+0x198>
 8008d8e:	f04f 0a03 	mov.w	sl, #3
 8008d92:	e78d      	b.n	8008cb0 <_scanf_float+0x198>
 8008d94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d98:	4649      	mov	r1, r9
 8008d9a:	4640      	mov	r0, r8
 8008d9c:	4798      	blx	r3
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	f43f aedf 	beq.w	8008b62 <_scanf_float+0x4a>
 8008da4:	e6eb      	b.n	8008b7e <_scanf_float+0x66>
 8008da6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008daa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dae:	464a      	mov	r2, r9
 8008db0:	4640      	mov	r0, r8
 8008db2:	4798      	blx	r3
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	3b01      	subs	r3, #1
 8008db8:	6123      	str	r3, [r4, #16]
 8008dba:	e6eb      	b.n	8008b94 <_scanf_float+0x7c>
 8008dbc:	1e6b      	subs	r3, r5, #1
 8008dbe:	2b06      	cmp	r3, #6
 8008dc0:	d824      	bhi.n	8008e0c <_scanf_float+0x2f4>
 8008dc2:	2d02      	cmp	r5, #2
 8008dc4:	d836      	bhi.n	8008e34 <_scanf_float+0x31c>
 8008dc6:	9b01      	ldr	r3, [sp, #4]
 8008dc8:	429e      	cmp	r6, r3
 8008dca:	f67f aee7 	bls.w	8008b9c <_scanf_float+0x84>
 8008dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd6:	464a      	mov	r2, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4798      	blx	r3
 8008ddc:	6923      	ldr	r3, [r4, #16]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	6123      	str	r3, [r4, #16]
 8008de2:	e7f0      	b.n	8008dc6 <_scanf_float+0x2ae>
 8008de4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008de8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008dec:	464a      	mov	r2, r9
 8008dee:	4640      	mov	r0, r8
 8008df0:	4798      	blx	r3
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dfc:	fa5f fa8a 	uxtb.w	sl, sl
 8008e00:	f1ba 0f02 	cmp.w	sl, #2
 8008e04:	d1ee      	bne.n	8008de4 <_scanf_float+0x2cc>
 8008e06:	3d03      	subs	r5, #3
 8008e08:	b2ed      	uxtb	r5, r5
 8008e0a:	1b76      	subs	r6, r6, r5
 8008e0c:	6823      	ldr	r3, [r4, #0]
 8008e0e:	05da      	lsls	r2, r3, #23
 8008e10:	d530      	bpl.n	8008e74 <_scanf_float+0x35c>
 8008e12:	055b      	lsls	r3, r3, #21
 8008e14:	d511      	bpl.n	8008e3a <_scanf_float+0x322>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	f67f aebf 	bls.w	8008b9c <_scanf_float+0x84>
 8008e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e26:	464a      	mov	r2, r9
 8008e28:	4640      	mov	r0, r8
 8008e2a:	4798      	blx	r3
 8008e2c:	6923      	ldr	r3, [r4, #16]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	e7f0      	b.n	8008e16 <_scanf_float+0x2fe>
 8008e34:	46aa      	mov	sl, r5
 8008e36:	46b3      	mov	fp, r6
 8008e38:	e7de      	b.n	8008df8 <_scanf_float+0x2e0>
 8008e3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e3e:	6923      	ldr	r3, [r4, #16]
 8008e40:	2965      	cmp	r1, #101	@ 0x65
 8008e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8008e46:	f106 35ff 	add.w	r5, r6, #4294967295
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	d00c      	beq.n	8008e68 <_scanf_float+0x350>
 8008e4e:	2945      	cmp	r1, #69	@ 0x45
 8008e50:	d00a      	beq.n	8008e68 <_scanf_float+0x350>
 8008e52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e56:	464a      	mov	r2, r9
 8008e58:	4640      	mov	r0, r8
 8008e5a:	4798      	blx	r3
 8008e5c:	6923      	ldr	r3, [r4, #16]
 8008e5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e62:	3b01      	subs	r3, #1
 8008e64:	1eb5      	subs	r5, r6, #2
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e6c:	464a      	mov	r2, r9
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4798      	blx	r3
 8008e72:	462e      	mov	r6, r5
 8008e74:	6822      	ldr	r2, [r4, #0]
 8008e76:	f012 0210 	ands.w	r2, r2, #16
 8008e7a:	d001      	beq.n	8008e80 <_scanf_float+0x368>
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e68e      	b.n	8008b9e <_scanf_float+0x86>
 8008e80:	7032      	strb	r2, [r6, #0]
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e8c:	d125      	bne.n	8008eda <_scanf_float+0x3c2>
 8008e8e:	9b02      	ldr	r3, [sp, #8]
 8008e90:	429f      	cmp	r7, r3
 8008e92:	d00a      	beq.n	8008eaa <_scanf_float+0x392>
 8008e94:	1bda      	subs	r2, r3, r7
 8008e96:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008e9a:	429e      	cmp	r6, r3
 8008e9c:	bf28      	it	cs
 8008e9e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008ea2:	4922      	ldr	r1, [pc, #136]	@ (8008f2c <_scanf_float+0x414>)
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f000 f977 	bl	8009198 <siprintf>
 8008eaa:	9901      	ldr	r1, [sp, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	4640      	mov	r0, r8
 8008eb0:	f002 fd06 	bl	800b8c0 <_strtod_r>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	6821      	ldr	r1, [r4, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f011 0f02 	tst.w	r1, #2
 8008ebe:	ec57 6b10 	vmov	r6, r7, d0
 8008ec2:	f103 0204 	add.w	r2, r3, #4
 8008ec6:	d015      	beq.n	8008ef4 <_scanf_float+0x3dc>
 8008ec8:	9903      	ldr	r1, [sp, #12]
 8008eca:	600a      	str	r2, [r1, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	e9c3 6700 	strd	r6, r7, [r3]
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	60e3      	str	r3, [r4, #12]
 8008ed8:	e7d0      	b.n	8008e7c <_scanf_float+0x364>
 8008eda:	9b04      	ldr	r3, [sp, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0e4      	beq.n	8008eaa <_scanf_float+0x392>
 8008ee0:	9905      	ldr	r1, [sp, #20]
 8008ee2:	230a      	movs	r3, #10
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	4640      	mov	r0, r8
 8008ee8:	f002 fd6a 	bl	800b9c0 <_strtol_r>
 8008eec:	9b04      	ldr	r3, [sp, #16]
 8008eee:	9e05      	ldr	r6, [sp, #20]
 8008ef0:	1ac2      	subs	r2, r0, r3
 8008ef2:	e7d0      	b.n	8008e96 <_scanf_float+0x37e>
 8008ef4:	f011 0f04 	tst.w	r1, #4
 8008ef8:	9903      	ldr	r1, [sp, #12]
 8008efa:	600a      	str	r2, [r1, #0]
 8008efc:	d1e6      	bne.n	8008ecc <_scanf_float+0x3b4>
 8008efe:	681d      	ldr	r5, [r3, #0]
 8008f00:	4632      	mov	r2, r6
 8008f02:	463b      	mov	r3, r7
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 fe10 	bl	8000b2c <__aeabi_dcmpun>
 8008f0c:	b128      	cbz	r0, 8008f1a <_scanf_float+0x402>
 8008f0e:	4808      	ldr	r0, [pc, #32]	@ (8008f30 <_scanf_float+0x418>)
 8008f10:	f000 faca 	bl	80094a8 <nanf>
 8008f14:	ed85 0a00 	vstr	s0, [r5]
 8008f18:	e7db      	b.n	8008ed2 <_scanf_float+0x3ba>
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	4639      	mov	r1, r7
 8008f1e:	f7f7 fe63 	bl	8000be8 <__aeabi_d2f>
 8008f22:	6028      	str	r0, [r5, #0]
 8008f24:	e7d5      	b.n	8008ed2 <_scanf_float+0x3ba>
 8008f26:	2700      	movs	r7, #0
 8008f28:	e62e      	b.n	8008b88 <_scanf_float+0x70>
 8008f2a:	bf00      	nop
 8008f2c:	0800cd9c 	.word	0x0800cd9c
 8008f30:	0800cedd 	.word	0x0800cedd

08008f34 <std>:
 8008f34:	2300      	movs	r3, #0
 8008f36:	b510      	push	{r4, lr}
 8008f38:	4604      	mov	r4, r0
 8008f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f42:	6083      	str	r3, [r0, #8]
 8008f44:	8181      	strh	r1, [r0, #12]
 8008f46:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f48:	81c2      	strh	r2, [r0, #14]
 8008f4a:	6183      	str	r3, [r0, #24]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	2208      	movs	r2, #8
 8008f50:	305c      	adds	r0, #92	@ 0x5c
 8008f52:	f000 fa1b 	bl	800938c <memset>
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <std+0x58>)
 8008f58:	6263      	str	r3, [r4, #36]	@ 0x24
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f90 <std+0x5c>)
 8008f5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008f94 <std+0x60>)
 8008f60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008f62:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <std+0x64>)
 8008f64:	6323      	str	r3, [r4, #48]	@ 0x30
 8008f66:	4b0d      	ldr	r3, [pc, #52]	@ (8008f9c <std+0x68>)
 8008f68:	6224      	str	r4, [r4, #32]
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	d006      	beq.n	8008f7c <std+0x48>
 8008f6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008f72:	4294      	cmp	r4, r2
 8008f74:	d002      	beq.n	8008f7c <std+0x48>
 8008f76:	33d0      	adds	r3, #208	@ 0xd0
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d105      	bne.n	8008f88 <std+0x54>
 8008f7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f84:	f000 ba7e 	b.w	8009484 <__retarget_lock_init_recursive>
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	bf00      	nop
 8008f8c:	080091dd 	.word	0x080091dd
 8008f90:	080091ff 	.word	0x080091ff
 8008f94:	08009237 	.word	0x08009237
 8008f98:	0800925b 	.word	0x0800925b
 8008f9c:	20000514 	.word	0x20000514

08008fa0 <stdio_exit_handler>:
 8008fa0:	4a02      	ldr	r2, [pc, #8]	@ (8008fac <stdio_exit_handler+0xc>)
 8008fa2:	4903      	ldr	r1, [pc, #12]	@ (8008fb0 <stdio_exit_handler+0x10>)
 8008fa4:	4803      	ldr	r0, [pc, #12]	@ (8008fb4 <stdio_exit_handler+0x14>)
 8008fa6:	f000 b869 	b.w	800907c <_fwalk_sglue>
 8008faa:	bf00      	nop
 8008fac:	20000018 	.word	0x20000018
 8008fb0:	0800c001 	.word	0x0800c001
 8008fb4:	20000028 	.word	0x20000028

08008fb8 <cleanup_stdio>:
 8008fb8:	6841      	ldr	r1, [r0, #4]
 8008fba:	4b0c      	ldr	r3, [pc, #48]	@ (8008fec <cleanup_stdio+0x34>)
 8008fbc:	4299      	cmp	r1, r3
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	4604      	mov	r4, r0
 8008fc2:	d001      	beq.n	8008fc8 <cleanup_stdio+0x10>
 8008fc4:	f003 f81c 	bl	800c000 <_fflush_r>
 8008fc8:	68a1      	ldr	r1, [r4, #8]
 8008fca:	4b09      	ldr	r3, [pc, #36]	@ (8008ff0 <cleanup_stdio+0x38>)
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d002      	beq.n	8008fd6 <cleanup_stdio+0x1e>
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	f003 f815 	bl	800c000 <_fflush_r>
 8008fd6:	68e1      	ldr	r1, [r4, #12]
 8008fd8:	4b06      	ldr	r3, [pc, #24]	@ (8008ff4 <cleanup_stdio+0x3c>)
 8008fda:	4299      	cmp	r1, r3
 8008fdc:	d004      	beq.n	8008fe8 <cleanup_stdio+0x30>
 8008fde:	4620      	mov	r0, r4
 8008fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fe4:	f003 b80c 	b.w	800c000 <_fflush_r>
 8008fe8:	bd10      	pop	{r4, pc}
 8008fea:	bf00      	nop
 8008fec:	20000514 	.word	0x20000514
 8008ff0:	2000057c 	.word	0x2000057c
 8008ff4:	200005e4 	.word	0x200005e4

08008ff8 <global_stdio_init.part.0>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8009028 <global_stdio_init.part.0+0x30>)
 8008ffc:	4c0b      	ldr	r4, [pc, #44]	@ (800902c <global_stdio_init.part.0+0x34>)
 8008ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8009030 <global_stdio_init.part.0+0x38>)
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	4620      	mov	r0, r4
 8009004:	2200      	movs	r2, #0
 8009006:	2104      	movs	r1, #4
 8009008:	f7ff ff94 	bl	8008f34 <std>
 800900c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009010:	2201      	movs	r2, #1
 8009012:	2109      	movs	r1, #9
 8009014:	f7ff ff8e 	bl	8008f34 <std>
 8009018:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800901c:	2202      	movs	r2, #2
 800901e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009022:	2112      	movs	r1, #18
 8009024:	f7ff bf86 	b.w	8008f34 <std>
 8009028:	2000064c 	.word	0x2000064c
 800902c:	20000514 	.word	0x20000514
 8009030:	08008fa1 	.word	0x08008fa1

08009034 <__sfp_lock_acquire>:
 8009034:	4801      	ldr	r0, [pc, #4]	@ (800903c <__sfp_lock_acquire+0x8>)
 8009036:	f000 ba26 	b.w	8009486 <__retarget_lock_acquire_recursive>
 800903a:	bf00      	nop
 800903c:	20000655 	.word	0x20000655

08009040 <__sfp_lock_release>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__sfp_lock_release+0x8>)
 8009042:	f000 ba21 	b.w	8009488 <__retarget_lock_release_recursive>
 8009046:	bf00      	nop
 8009048:	20000655 	.word	0x20000655

0800904c <__sinit>:
 800904c:	b510      	push	{r4, lr}
 800904e:	4604      	mov	r4, r0
 8009050:	f7ff fff0 	bl	8009034 <__sfp_lock_acquire>
 8009054:	6a23      	ldr	r3, [r4, #32]
 8009056:	b11b      	cbz	r3, 8009060 <__sinit+0x14>
 8009058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800905c:	f7ff bff0 	b.w	8009040 <__sfp_lock_release>
 8009060:	4b04      	ldr	r3, [pc, #16]	@ (8009074 <__sinit+0x28>)
 8009062:	6223      	str	r3, [r4, #32]
 8009064:	4b04      	ldr	r3, [pc, #16]	@ (8009078 <__sinit+0x2c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f5      	bne.n	8009058 <__sinit+0xc>
 800906c:	f7ff ffc4 	bl	8008ff8 <global_stdio_init.part.0>
 8009070:	e7f2      	b.n	8009058 <__sinit+0xc>
 8009072:	bf00      	nop
 8009074:	08008fb9 	.word	0x08008fb9
 8009078:	2000064c 	.word	0x2000064c

0800907c <_fwalk_sglue>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	4607      	mov	r7, r0
 8009082:	4688      	mov	r8, r1
 8009084:	4614      	mov	r4, r2
 8009086:	2600      	movs	r6, #0
 8009088:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800908c:	f1b9 0901 	subs.w	r9, r9, #1
 8009090:	d505      	bpl.n	800909e <_fwalk_sglue+0x22>
 8009092:	6824      	ldr	r4, [r4, #0]
 8009094:	2c00      	cmp	r4, #0
 8009096:	d1f7      	bne.n	8009088 <_fwalk_sglue+0xc>
 8009098:	4630      	mov	r0, r6
 800909a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d907      	bls.n	80090b4 <_fwalk_sglue+0x38>
 80090a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090a8:	3301      	adds	r3, #1
 80090aa:	d003      	beq.n	80090b4 <_fwalk_sglue+0x38>
 80090ac:	4629      	mov	r1, r5
 80090ae:	4638      	mov	r0, r7
 80090b0:	47c0      	blx	r8
 80090b2:	4306      	orrs	r6, r0
 80090b4:	3568      	adds	r5, #104	@ 0x68
 80090b6:	e7e9      	b.n	800908c <_fwalk_sglue+0x10>

080090b8 <iprintf>:
 80090b8:	b40f      	push	{r0, r1, r2, r3}
 80090ba:	b507      	push	{r0, r1, r2, lr}
 80090bc:	4906      	ldr	r1, [pc, #24]	@ (80090d8 <iprintf+0x20>)
 80090be:	ab04      	add	r3, sp, #16
 80090c0:	6808      	ldr	r0, [r1, #0]
 80090c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c6:	6881      	ldr	r1, [r0, #8]
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	f002 fdfd 	bl	800bcc8 <_vfiprintf_r>
 80090ce:	b003      	add	sp, #12
 80090d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090d4:	b004      	add	sp, #16
 80090d6:	4770      	bx	lr
 80090d8:	20000024 	.word	0x20000024

080090dc <_puts_r>:
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b570      	push	{r4, r5, r6, lr}
 80090e0:	6884      	ldr	r4, [r0, #8]
 80090e2:	4605      	mov	r5, r0
 80090e4:	460e      	mov	r6, r1
 80090e6:	b90b      	cbnz	r3, 80090ec <_puts_r+0x10>
 80090e8:	f7ff ffb0 	bl	800904c <__sinit>
 80090ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090ee:	07db      	lsls	r3, r3, #31
 80090f0:	d405      	bmi.n	80090fe <_puts_r+0x22>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	0598      	lsls	r0, r3, #22
 80090f6:	d402      	bmi.n	80090fe <_puts_r+0x22>
 80090f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090fa:	f000 f9c4 	bl	8009486 <__retarget_lock_acquire_recursive>
 80090fe:	89a3      	ldrh	r3, [r4, #12]
 8009100:	0719      	lsls	r1, r3, #28
 8009102:	d502      	bpl.n	800910a <_puts_r+0x2e>
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d135      	bne.n	8009176 <_puts_r+0x9a>
 800910a:	4621      	mov	r1, r4
 800910c:	4628      	mov	r0, r5
 800910e:	f000 f8e7 	bl	80092e0 <__swsetup_r>
 8009112:	b380      	cbz	r0, 8009176 <_puts_r+0x9a>
 8009114:	f04f 35ff 	mov.w	r5, #4294967295
 8009118:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800911a:	07da      	lsls	r2, r3, #31
 800911c:	d405      	bmi.n	800912a <_puts_r+0x4e>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	d402      	bmi.n	800912a <_puts_r+0x4e>
 8009124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009126:	f000 f9af 	bl	8009488 <__retarget_lock_release_recursive>
 800912a:	4628      	mov	r0, r5
 800912c:	bd70      	pop	{r4, r5, r6, pc}
 800912e:	2b00      	cmp	r3, #0
 8009130:	da04      	bge.n	800913c <_puts_r+0x60>
 8009132:	69a2      	ldr	r2, [r4, #24]
 8009134:	429a      	cmp	r2, r3
 8009136:	dc17      	bgt.n	8009168 <_puts_r+0x8c>
 8009138:	290a      	cmp	r1, #10
 800913a:	d015      	beq.n	8009168 <_puts_r+0x8c>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	6022      	str	r2, [r4, #0]
 8009142:	7019      	strb	r1, [r3, #0]
 8009144:	68a3      	ldr	r3, [r4, #8]
 8009146:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800914a:	3b01      	subs	r3, #1
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	2900      	cmp	r1, #0
 8009150:	d1ed      	bne.n	800912e <_puts_r+0x52>
 8009152:	2b00      	cmp	r3, #0
 8009154:	da11      	bge.n	800917a <_puts_r+0x9e>
 8009156:	4622      	mov	r2, r4
 8009158:	210a      	movs	r1, #10
 800915a:	4628      	mov	r0, r5
 800915c:	f000 f881 	bl	8009262 <__swbuf_r>
 8009160:	3001      	adds	r0, #1
 8009162:	d0d7      	beq.n	8009114 <_puts_r+0x38>
 8009164:	250a      	movs	r5, #10
 8009166:	e7d7      	b.n	8009118 <_puts_r+0x3c>
 8009168:	4622      	mov	r2, r4
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f879 	bl	8009262 <__swbuf_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d1e7      	bne.n	8009144 <_puts_r+0x68>
 8009174:	e7ce      	b.n	8009114 <_puts_r+0x38>
 8009176:	3e01      	subs	r6, #1
 8009178:	e7e4      	b.n	8009144 <_puts_r+0x68>
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	6022      	str	r2, [r4, #0]
 8009180:	220a      	movs	r2, #10
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	e7ee      	b.n	8009164 <_puts_r+0x88>
	...

08009188 <puts>:
 8009188:	4b02      	ldr	r3, [pc, #8]	@ (8009194 <puts+0xc>)
 800918a:	4601      	mov	r1, r0
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	f7ff bfa5 	b.w	80090dc <_puts_r>
 8009192:	bf00      	nop
 8009194:	20000024 	.word	0x20000024

08009198 <siprintf>:
 8009198:	b40e      	push	{r1, r2, r3}
 800919a:	b510      	push	{r4, lr}
 800919c:	b09d      	sub	sp, #116	@ 0x74
 800919e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80091a0:	9002      	str	r0, [sp, #8]
 80091a2:	9006      	str	r0, [sp, #24]
 80091a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80091a8:	480a      	ldr	r0, [pc, #40]	@ (80091d4 <siprintf+0x3c>)
 80091aa:	9107      	str	r1, [sp, #28]
 80091ac:	9104      	str	r1, [sp, #16]
 80091ae:	490a      	ldr	r1, [pc, #40]	@ (80091d8 <siprintf+0x40>)
 80091b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b4:	9105      	str	r1, [sp, #20]
 80091b6:	2400      	movs	r4, #0
 80091b8:	a902      	add	r1, sp, #8
 80091ba:	6800      	ldr	r0, [r0, #0]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80091c0:	f002 fc5c 	bl	800ba7c <_svfiprintf_r>
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	701c      	strb	r4, [r3, #0]
 80091c8:	b01d      	add	sp, #116	@ 0x74
 80091ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ce:	b003      	add	sp, #12
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20000024 	.word	0x20000024
 80091d8:	ffff0208 	.word	0xffff0208

080091dc <__sread>:
 80091dc:	b510      	push	{r4, lr}
 80091de:	460c      	mov	r4, r1
 80091e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e4:	f000 f900 	bl	80093e8 <_read_r>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	bfab      	itete	ge
 80091ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091ee:	89a3      	ldrhlt	r3, [r4, #12]
 80091f0:	181b      	addge	r3, r3, r0
 80091f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091f6:	bfac      	ite	ge
 80091f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091fa:	81a3      	strhlt	r3, [r4, #12]
 80091fc:	bd10      	pop	{r4, pc}

080091fe <__swrite>:
 80091fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	461f      	mov	r7, r3
 8009204:	898b      	ldrh	r3, [r1, #12]
 8009206:	05db      	lsls	r3, r3, #23
 8009208:	4605      	mov	r5, r0
 800920a:	460c      	mov	r4, r1
 800920c:	4616      	mov	r6, r2
 800920e:	d505      	bpl.n	800921c <__swrite+0x1e>
 8009210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009214:	2302      	movs	r3, #2
 8009216:	2200      	movs	r2, #0
 8009218:	f000 f8d4 	bl	80093c4 <_lseek_r>
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009226:	81a3      	strh	r3, [r4, #12]
 8009228:	4632      	mov	r2, r6
 800922a:	463b      	mov	r3, r7
 800922c:	4628      	mov	r0, r5
 800922e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009232:	f000 b8eb 	b.w	800940c <_write_r>

08009236 <__sseek>:
 8009236:	b510      	push	{r4, lr}
 8009238:	460c      	mov	r4, r1
 800923a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800923e:	f000 f8c1 	bl	80093c4 <_lseek_r>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	bf15      	itete	ne
 8009248:	6560      	strne	r0, [r4, #84]	@ 0x54
 800924a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800924e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009252:	81a3      	strheq	r3, [r4, #12]
 8009254:	bf18      	it	ne
 8009256:	81a3      	strhne	r3, [r4, #12]
 8009258:	bd10      	pop	{r4, pc}

0800925a <__sclose>:
 800925a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800925e:	f000 b8a1 	b.w	80093a4 <_close_r>

08009262 <__swbuf_r>:
 8009262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009264:	460e      	mov	r6, r1
 8009266:	4614      	mov	r4, r2
 8009268:	4605      	mov	r5, r0
 800926a:	b118      	cbz	r0, 8009274 <__swbuf_r+0x12>
 800926c:	6a03      	ldr	r3, [r0, #32]
 800926e:	b90b      	cbnz	r3, 8009274 <__swbuf_r+0x12>
 8009270:	f7ff feec 	bl	800904c <__sinit>
 8009274:	69a3      	ldr	r3, [r4, #24]
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	071a      	lsls	r2, r3, #28
 800927c:	d501      	bpl.n	8009282 <__swbuf_r+0x20>
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	b943      	cbnz	r3, 8009294 <__swbuf_r+0x32>
 8009282:	4621      	mov	r1, r4
 8009284:	4628      	mov	r0, r5
 8009286:	f000 f82b 	bl	80092e0 <__swsetup_r>
 800928a:	b118      	cbz	r0, 8009294 <__swbuf_r+0x32>
 800928c:	f04f 37ff 	mov.w	r7, #4294967295
 8009290:	4638      	mov	r0, r7
 8009292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009294:	6823      	ldr	r3, [r4, #0]
 8009296:	6922      	ldr	r2, [r4, #16]
 8009298:	1a98      	subs	r0, r3, r2
 800929a:	6963      	ldr	r3, [r4, #20]
 800929c:	b2f6      	uxtb	r6, r6
 800929e:	4283      	cmp	r3, r0
 80092a0:	4637      	mov	r7, r6
 80092a2:	dc05      	bgt.n	80092b0 <__swbuf_r+0x4e>
 80092a4:	4621      	mov	r1, r4
 80092a6:	4628      	mov	r0, r5
 80092a8:	f002 feaa 	bl	800c000 <_fflush_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1ed      	bne.n	800928c <__swbuf_r+0x2a>
 80092b0:	68a3      	ldr	r3, [r4, #8]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	60a3      	str	r3, [r4, #8]
 80092b6:	6823      	ldr	r3, [r4, #0]
 80092b8:	1c5a      	adds	r2, r3, #1
 80092ba:	6022      	str	r2, [r4, #0]
 80092bc:	701e      	strb	r6, [r3, #0]
 80092be:	6962      	ldr	r2, [r4, #20]
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d004      	beq.n	80092d0 <__swbuf_r+0x6e>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	07db      	lsls	r3, r3, #31
 80092ca:	d5e1      	bpl.n	8009290 <__swbuf_r+0x2e>
 80092cc:	2e0a      	cmp	r6, #10
 80092ce:	d1df      	bne.n	8009290 <__swbuf_r+0x2e>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4628      	mov	r0, r5
 80092d4:	f002 fe94 	bl	800c000 <_fflush_r>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d0d9      	beq.n	8009290 <__swbuf_r+0x2e>
 80092dc:	e7d6      	b.n	800928c <__swbuf_r+0x2a>
	...

080092e0 <__swsetup_r>:
 80092e0:	b538      	push	{r3, r4, r5, lr}
 80092e2:	4b29      	ldr	r3, [pc, #164]	@ (8009388 <__swsetup_r+0xa8>)
 80092e4:	4605      	mov	r5, r0
 80092e6:	6818      	ldr	r0, [r3, #0]
 80092e8:	460c      	mov	r4, r1
 80092ea:	b118      	cbz	r0, 80092f4 <__swsetup_r+0x14>
 80092ec:	6a03      	ldr	r3, [r0, #32]
 80092ee:	b90b      	cbnz	r3, 80092f4 <__swsetup_r+0x14>
 80092f0:	f7ff feac 	bl	800904c <__sinit>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	0719      	lsls	r1, r3, #28
 80092fa:	d422      	bmi.n	8009342 <__swsetup_r+0x62>
 80092fc:	06da      	lsls	r2, r3, #27
 80092fe:	d407      	bmi.n	8009310 <__swsetup_r+0x30>
 8009300:	2209      	movs	r2, #9
 8009302:	602a      	str	r2, [r5, #0]
 8009304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	e033      	b.n	8009378 <__swsetup_r+0x98>
 8009310:	0758      	lsls	r0, r3, #29
 8009312:	d512      	bpl.n	800933a <__swsetup_r+0x5a>
 8009314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009316:	b141      	cbz	r1, 800932a <__swsetup_r+0x4a>
 8009318:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800931c:	4299      	cmp	r1, r3
 800931e:	d002      	beq.n	8009326 <__swsetup_r+0x46>
 8009320:	4628      	mov	r0, r5
 8009322:	f000 ff21 	bl	800a168 <_free_r>
 8009326:	2300      	movs	r3, #0
 8009328:	6363      	str	r3, [r4, #52]	@ 0x34
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009330:	81a3      	strh	r3, [r4, #12]
 8009332:	2300      	movs	r3, #0
 8009334:	6063      	str	r3, [r4, #4]
 8009336:	6923      	ldr	r3, [r4, #16]
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	f043 0308 	orr.w	r3, r3, #8
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	b94b      	cbnz	r3, 800935a <__swsetup_r+0x7a>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800934c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009350:	d003      	beq.n	800935a <__swsetup_r+0x7a>
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f002 fea1 	bl	800c09c <__smakebuf_r>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	f013 0201 	ands.w	r2, r3, #1
 8009362:	d00a      	beq.n	800937a <__swsetup_r+0x9a>
 8009364:	2200      	movs	r2, #0
 8009366:	60a2      	str	r2, [r4, #8]
 8009368:	6962      	ldr	r2, [r4, #20]
 800936a:	4252      	negs	r2, r2
 800936c:	61a2      	str	r2, [r4, #24]
 800936e:	6922      	ldr	r2, [r4, #16]
 8009370:	b942      	cbnz	r2, 8009384 <__swsetup_r+0xa4>
 8009372:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009376:	d1c5      	bne.n	8009304 <__swsetup_r+0x24>
 8009378:	bd38      	pop	{r3, r4, r5, pc}
 800937a:	0799      	lsls	r1, r3, #30
 800937c:	bf58      	it	pl
 800937e:	6962      	ldrpl	r2, [r4, #20]
 8009380:	60a2      	str	r2, [r4, #8]
 8009382:	e7f4      	b.n	800936e <__swsetup_r+0x8e>
 8009384:	2000      	movs	r0, #0
 8009386:	e7f7      	b.n	8009378 <__swsetup_r+0x98>
 8009388:	20000024 	.word	0x20000024

0800938c <memset>:
 800938c:	4402      	add	r2, r0
 800938e:	4603      	mov	r3, r0
 8009390:	4293      	cmp	r3, r2
 8009392:	d100      	bne.n	8009396 <memset+0xa>
 8009394:	4770      	bx	lr
 8009396:	f803 1b01 	strb.w	r1, [r3], #1
 800939a:	e7f9      	b.n	8009390 <memset+0x4>

0800939c <_localeconv_r>:
 800939c:	4800      	ldr	r0, [pc, #0]	@ (80093a0 <_localeconv_r+0x4>)
 800939e:	4770      	bx	lr
 80093a0:	20000164 	.word	0x20000164

080093a4 <_close_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d06      	ldr	r5, [pc, #24]	@ (80093c0 <_close_r+0x1c>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f8 fa34 	bl	800181c <_close>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_close_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_close_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20000650 	.word	0x20000650

080093c4 <_lseek_r>:
 80093c4:	b538      	push	{r3, r4, r5, lr}
 80093c6:	4d07      	ldr	r5, [pc, #28]	@ (80093e4 <_lseek_r+0x20>)
 80093c8:	4604      	mov	r4, r0
 80093ca:	4608      	mov	r0, r1
 80093cc:	4611      	mov	r1, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	602a      	str	r2, [r5, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	f7f8 fa49 	bl	800186a <_lseek>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d102      	bne.n	80093e2 <_lseek_r+0x1e>
 80093dc:	682b      	ldr	r3, [r5, #0]
 80093de:	b103      	cbz	r3, 80093e2 <_lseek_r+0x1e>
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	bd38      	pop	{r3, r4, r5, pc}
 80093e4:	20000650 	.word	0x20000650

080093e8 <_read_r>:
 80093e8:	b538      	push	{r3, r4, r5, lr}
 80093ea:	4d07      	ldr	r5, [pc, #28]	@ (8009408 <_read_r+0x20>)
 80093ec:	4604      	mov	r4, r0
 80093ee:	4608      	mov	r0, r1
 80093f0:	4611      	mov	r1, r2
 80093f2:	2200      	movs	r2, #0
 80093f4:	602a      	str	r2, [r5, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	f7f8 f9f3 	bl	80017e2 <_read>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d102      	bne.n	8009406 <_read_r+0x1e>
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	b103      	cbz	r3, 8009406 <_read_r+0x1e>
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	20000650 	.word	0x20000650

0800940c <_write_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d07      	ldr	r5, [pc, #28]	@ (800942c <_write_r+0x20>)
 8009410:	4604      	mov	r4, r0
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	2200      	movs	r2, #0
 8009418:	602a      	str	r2, [r5, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f7f7 ffc2 	bl	80013a4 <_write>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_write_r+0x1e>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_write_r+0x1e>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000650 	.word	0x20000650

08009430 <__errno>:
 8009430:	4b01      	ldr	r3, [pc, #4]	@ (8009438 <__errno+0x8>)
 8009432:	6818      	ldr	r0, [r3, #0]
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000024 	.word	0x20000024

0800943c <__libc_init_array>:
 800943c:	b570      	push	{r4, r5, r6, lr}
 800943e:	4d0d      	ldr	r5, [pc, #52]	@ (8009474 <__libc_init_array+0x38>)
 8009440:	4c0d      	ldr	r4, [pc, #52]	@ (8009478 <__libc_init_array+0x3c>)
 8009442:	1b64      	subs	r4, r4, r5
 8009444:	10a4      	asrs	r4, r4, #2
 8009446:	2600      	movs	r6, #0
 8009448:	42a6      	cmp	r6, r4
 800944a:	d109      	bne.n	8009460 <__libc_init_array+0x24>
 800944c:	4d0b      	ldr	r5, [pc, #44]	@ (800947c <__libc_init_array+0x40>)
 800944e:	4c0c      	ldr	r4, [pc, #48]	@ (8009480 <__libc_init_array+0x44>)
 8009450:	f003 faf2 	bl	800ca38 <_init>
 8009454:	1b64      	subs	r4, r4, r5
 8009456:	10a4      	asrs	r4, r4, #2
 8009458:	2600      	movs	r6, #0
 800945a:	42a6      	cmp	r6, r4
 800945c:	d105      	bne.n	800946a <__libc_init_array+0x2e>
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	f855 3b04 	ldr.w	r3, [r5], #4
 8009464:	4798      	blx	r3
 8009466:	3601      	adds	r6, #1
 8009468:	e7ee      	b.n	8009448 <__libc_init_array+0xc>
 800946a:	f855 3b04 	ldr.w	r3, [r5], #4
 800946e:	4798      	blx	r3
 8009470:	3601      	adds	r6, #1
 8009472:	e7f2      	b.n	800945a <__libc_init_array+0x1e>
 8009474:	0800d19c 	.word	0x0800d19c
 8009478:	0800d19c 	.word	0x0800d19c
 800947c:	0800d19c 	.word	0x0800d19c
 8009480:	0800d1a0 	.word	0x0800d1a0

08009484 <__retarget_lock_init_recursive>:
 8009484:	4770      	bx	lr

08009486 <__retarget_lock_acquire_recursive>:
 8009486:	4770      	bx	lr

08009488 <__retarget_lock_release_recursive>:
 8009488:	4770      	bx	lr

0800948a <memcpy>:
 800948a:	440a      	add	r2, r1
 800948c:	4291      	cmp	r1, r2
 800948e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009492:	d100      	bne.n	8009496 <memcpy+0xc>
 8009494:	4770      	bx	lr
 8009496:	b510      	push	{r4, lr}
 8009498:	f811 4b01 	ldrb.w	r4, [r1], #1
 800949c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094a0:	4291      	cmp	r1, r2
 80094a2:	d1f9      	bne.n	8009498 <memcpy+0xe>
 80094a4:	bd10      	pop	{r4, pc}
	...

080094a8 <nanf>:
 80094a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094b0 <nanf+0x8>
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	7fc00000 	.word	0x7fc00000

080094b4 <quorem>:
 80094b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b8:	6903      	ldr	r3, [r0, #16]
 80094ba:	690c      	ldr	r4, [r1, #16]
 80094bc:	42a3      	cmp	r3, r4
 80094be:	4607      	mov	r7, r0
 80094c0:	db7e      	blt.n	80095c0 <quorem+0x10c>
 80094c2:	3c01      	subs	r4, #1
 80094c4:	f101 0814 	add.w	r8, r1, #20
 80094c8:	00a3      	lsls	r3, r4, #2
 80094ca:	f100 0514 	add.w	r5, r0, #20
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094de:	3301      	adds	r3, #1
 80094e0:	429a      	cmp	r2, r3
 80094e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80094ea:	d32e      	bcc.n	800954a <quorem+0x96>
 80094ec:	f04f 0a00 	mov.w	sl, #0
 80094f0:	46c4      	mov	ip, r8
 80094f2:	46ae      	mov	lr, r5
 80094f4:	46d3      	mov	fp, sl
 80094f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094fa:	b298      	uxth	r0, r3
 80094fc:	fb06 a000 	mla	r0, r6, r0, sl
 8009500:	0c02      	lsrs	r2, r0, #16
 8009502:	0c1b      	lsrs	r3, r3, #16
 8009504:	fb06 2303 	mla	r3, r6, r3, r2
 8009508:	f8de 2000 	ldr.w	r2, [lr]
 800950c:	b280      	uxth	r0, r0
 800950e:	b292      	uxth	r2, r2
 8009510:	1a12      	subs	r2, r2, r0
 8009512:	445a      	add	r2, fp
 8009514:	f8de 0000 	ldr.w	r0, [lr]
 8009518:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800951c:	b29b      	uxth	r3, r3
 800951e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009522:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009526:	b292      	uxth	r2, r2
 8009528:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800952c:	45e1      	cmp	r9, ip
 800952e:	f84e 2b04 	str.w	r2, [lr], #4
 8009532:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009536:	d2de      	bcs.n	80094f6 <quorem+0x42>
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	58eb      	ldr	r3, [r5, r3]
 800953c:	b92b      	cbnz	r3, 800954a <quorem+0x96>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	3b04      	subs	r3, #4
 8009542:	429d      	cmp	r5, r3
 8009544:	461a      	mov	r2, r3
 8009546:	d32f      	bcc.n	80095a8 <quorem+0xf4>
 8009548:	613c      	str	r4, [r7, #16]
 800954a:	4638      	mov	r0, r7
 800954c:	f001 f9c8 	bl	800a8e0 <__mcmp>
 8009550:	2800      	cmp	r0, #0
 8009552:	db25      	blt.n	80095a0 <quorem+0xec>
 8009554:	4629      	mov	r1, r5
 8009556:	2000      	movs	r0, #0
 8009558:	f858 2b04 	ldr.w	r2, [r8], #4
 800955c:	f8d1 c000 	ldr.w	ip, [r1]
 8009560:	fa1f fe82 	uxth.w	lr, r2
 8009564:	fa1f f38c 	uxth.w	r3, ip
 8009568:	eba3 030e 	sub.w	r3, r3, lr
 800956c:	4403      	add	r3, r0
 800956e:	0c12      	lsrs	r2, r2, #16
 8009570:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009574:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009578:	b29b      	uxth	r3, r3
 800957a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800957e:	45c1      	cmp	r9, r8
 8009580:	f841 3b04 	str.w	r3, [r1], #4
 8009584:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009588:	d2e6      	bcs.n	8009558 <quorem+0xa4>
 800958a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800958e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009592:	b922      	cbnz	r2, 800959e <quorem+0xea>
 8009594:	3b04      	subs	r3, #4
 8009596:	429d      	cmp	r5, r3
 8009598:	461a      	mov	r2, r3
 800959a:	d30b      	bcc.n	80095b4 <quorem+0x100>
 800959c:	613c      	str	r4, [r7, #16]
 800959e:	3601      	adds	r6, #1
 80095a0:	4630      	mov	r0, r6
 80095a2:	b003      	add	sp, #12
 80095a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a8:	6812      	ldr	r2, [r2, #0]
 80095aa:	3b04      	subs	r3, #4
 80095ac:	2a00      	cmp	r2, #0
 80095ae:	d1cb      	bne.n	8009548 <quorem+0x94>
 80095b0:	3c01      	subs	r4, #1
 80095b2:	e7c6      	b.n	8009542 <quorem+0x8e>
 80095b4:	6812      	ldr	r2, [r2, #0]
 80095b6:	3b04      	subs	r3, #4
 80095b8:	2a00      	cmp	r2, #0
 80095ba:	d1ef      	bne.n	800959c <quorem+0xe8>
 80095bc:	3c01      	subs	r4, #1
 80095be:	e7ea      	b.n	8009596 <quorem+0xe2>
 80095c0:	2000      	movs	r0, #0
 80095c2:	e7ee      	b.n	80095a2 <quorem+0xee>
 80095c4:	0000      	movs	r0, r0
	...

080095c8 <_dtoa_r>:
 80095c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	69c7      	ldr	r7, [r0, #28]
 80095ce:	b097      	sub	sp, #92	@ 0x5c
 80095d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80095d4:	ec55 4b10 	vmov	r4, r5, d0
 80095d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80095da:	9107      	str	r1, [sp, #28]
 80095dc:	4681      	mov	r9, r0
 80095de:	920c      	str	r2, [sp, #48]	@ 0x30
 80095e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095e2:	b97f      	cbnz	r7, 8009604 <_dtoa_r+0x3c>
 80095e4:	2010      	movs	r0, #16
 80095e6:	f000 fe09 	bl	800a1fc <malloc>
 80095ea:	4602      	mov	r2, r0
 80095ec:	f8c9 001c 	str.w	r0, [r9, #28]
 80095f0:	b920      	cbnz	r0, 80095fc <_dtoa_r+0x34>
 80095f2:	4ba9      	ldr	r3, [pc, #676]	@ (8009898 <_dtoa_r+0x2d0>)
 80095f4:	21ef      	movs	r1, #239	@ 0xef
 80095f6:	48a9      	ldr	r0, [pc, #676]	@ (800989c <_dtoa_r+0x2d4>)
 80095f8:	f002 fdf2 	bl	800c1e0 <__assert_func>
 80095fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009600:	6007      	str	r7, [r0, #0]
 8009602:	60c7      	str	r7, [r0, #12]
 8009604:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009608:	6819      	ldr	r1, [r3, #0]
 800960a:	b159      	cbz	r1, 8009624 <_dtoa_r+0x5c>
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	604a      	str	r2, [r1, #4]
 8009610:	2301      	movs	r3, #1
 8009612:	4093      	lsls	r3, r2
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	4648      	mov	r0, r9
 8009618:	f000 fee6 	bl	800a3e8 <_Bfree>
 800961c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	1e2b      	subs	r3, r5, #0
 8009626:	bfb9      	ittee	lt
 8009628:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800962c:	9305      	strlt	r3, [sp, #20]
 800962e:	2300      	movge	r3, #0
 8009630:	6033      	strge	r3, [r6, #0]
 8009632:	9f05      	ldr	r7, [sp, #20]
 8009634:	4b9a      	ldr	r3, [pc, #616]	@ (80098a0 <_dtoa_r+0x2d8>)
 8009636:	bfbc      	itt	lt
 8009638:	2201      	movlt	r2, #1
 800963a:	6032      	strlt	r2, [r6, #0]
 800963c:	43bb      	bics	r3, r7
 800963e:	d112      	bne.n	8009666 <_dtoa_r+0x9e>
 8009640:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009642:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800964c:	4323      	orrs	r3, r4
 800964e:	f000 855a 	beq.w	800a106 <_dtoa_r+0xb3e>
 8009652:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009654:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80098b4 <_dtoa_r+0x2ec>
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 855c 	beq.w	800a116 <_dtoa_r+0xb4e>
 800965e:	f10a 0303 	add.w	r3, sl, #3
 8009662:	f000 bd56 	b.w	800a112 <_dtoa_r+0xb4a>
 8009666:	ed9d 7b04 	vldr	d7, [sp, #16]
 800966a:	2200      	movs	r2, #0
 800966c:	ec51 0b17 	vmov	r0, r1, d7
 8009670:	2300      	movs	r3, #0
 8009672:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009676:	f7f7 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800967a:	4680      	mov	r8, r0
 800967c:	b158      	cbz	r0, 8009696 <_dtoa_r+0xce>
 800967e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009680:	2301      	movs	r3, #1
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009686:	b113      	cbz	r3, 800968e <_dtoa_r+0xc6>
 8009688:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800968a:	4b86      	ldr	r3, [pc, #536]	@ (80098a4 <_dtoa_r+0x2dc>)
 800968c:	6013      	str	r3, [r2, #0]
 800968e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80098b8 <_dtoa_r+0x2f0>
 8009692:	f000 bd40 	b.w	800a116 <_dtoa_r+0xb4e>
 8009696:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800969a:	aa14      	add	r2, sp, #80	@ 0x50
 800969c:	a915      	add	r1, sp, #84	@ 0x54
 800969e:	4648      	mov	r0, r9
 80096a0:	f001 fa3e 	bl	800ab20 <__d2b>
 80096a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80096a8:	9002      	str	r0, [sp, #8]
 80096aa:	2e00      	cmp	r6, #0
 80096ac:	d078      	beq.n	80097a0 <_dtoa_r+0x1d8>
 80096ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80096b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80096c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80096c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096c8:	4619      	mov	r1, r3
 80096ca:	2200      	movs	r2, #0
 80096cc:	4b76      	ldr	r3, [pc, #472]	@ (80098a8 <_dtoa_r+0x2e0>)
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009880 <_dtoa_r+0x2b8>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009888 <_dtoa_r+0x2c0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fdd3 	bl	800028c <__adddf3>
 80096e6:	4604      	mov	r4, r0
 80096e8:	4630      	mov	r0, r6
 80096ea:	460d      	mov	r5, r1
 80096ec:	f7f6 ff1a 	bl	8000524 <__aeabi_i2d>
 80096f0:	a367      	add	r3, pc, #412	@ (adr r3, 8009890 <_dtoa_r+0x2c8>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4620      	mov	r0, r4
 8009700:	4629      	mov	r1, r5
 8009702:	f7f6 fdc3 	bl	800028c <__adddf3>
 8009706:	4604      	mov	r4, r0
 8009708:	460d      	mov	r5, r1
 800970a:	f7f7 fa25 	bl	8000b58 <__aeabi_d2iz>
 800970e:	2200      	movs	r2, #0
 8009710:	4607      	mov	r7, r0
 8009712:	2300      	movs	r3, #0
 8009714:	4620      	mov	r0, r4
 8009716:	4629      	mov	r1, r5
 8009718:	f7f7 f9e0 	bl	8000adc <__aeabi_dcmplt>
 800971c:	b140      	cbz	r0, 8009730 <_dtoa_r+0x168>
 800971e:	4638      	mov	r0, r7
 8009720:	f7f6 ff00 	bl	8000524 <__aeabi_i2d>
 8009724:	4622      	mov	r2, r4
 8009726:	462b      	mov	r3, r5
 8009728:	f7f7 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800972c:	b900      	cbnz	r0, 8009730 <_dtoa_r+0x168>
 800972e:	3f01      	subs	r7, #1
 8009730:	2f16      	cmp	r7, #22
 8009732:	d852      	bhi.n	80097da <_dtoa_r+0x212>
 8009734:	4b5d      	ldr	r3, [pc, #372]	@ (80098ac <_dtoa_r+0x2e4>)
 8009736:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009742:	f7f7 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8009746:	2800      	cmp	r0, #0
 8009748:	d049      	beq.n	80097de <_dtoa_r+0x216>
 800974a:	3f01      	subs	r7, #1
 800974c:	2300      	movs	r3, #0
 800974e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009750:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009752:	1b9b      	subs	r3, r3, r6
 8009754:	1e5a      	subs	r2, r3, #1
 8009756:	bf45      	ittet	mi
 8009758:	f1c3 0301 	rsbmi	r3, r3, #1
 800975c:	9300      	strmi	r3, [sp, #0]
 800975e:	2300      	movpl	r3, #0
 8009760:	2300      	movmi	r3, #0
 8009762:	9206      	str	r2, [sp, #24]
 8009764:	bf54      	ite	pl
 8009766:	9300      	strpl	r3, [sp, #0]
 8009768:	9306      	strmi	r3, [sp, #24]
 800976a:	2f00      	cmp	r7, #0
 800976c:	db39      	blt.n	80097e2 <_dtoa_r+0x21a>
 800976e:	9b06      	ldr	r3, [sp, #24]
 8009770:	970d      	str	r7, [sp, #52]	@ 0x34
 8009772:	443b      	add	r3, r7
 8009774:	9306      	str	r3, [sp, #24]
 8009776:	2300      	movs	r3, #0
 8009778:	9308      	str	r3, [sp, #32]
 800977a:	9b07      	ldr	r3, [sp, #28]
 800977c:	2b09      	cmp	r3, #9
 800977e:	d863      	bhi.n	8009848 <_dtoa_r+0x280>
 8009780:	2b05      	cmp	r3, #5
 8009782:	bfc4      	itt	gt
 8009784:	3b04      	subgt	r3, #4
 8009786:	9307      	strgt	r3, [sp, #28]
 8009788:	9b07      	ldr	r3, [sp, #28]
 800978a:	f1a3 0302 	sub.w	r3, r3, #2
 800978e:	bfcc      	ite	gt
 8009790:	2400      	movgt	r4, #0
 8009792:	2401      	movle	r4, #1
 8009794:	2b03      	cmp	r3, #3
 8009796:	d863      	bhi.n	8009860 <_dtoa_r+0x298>
 8009798:	e8df f003 	tbb	[pc, r3]
 800979c:	2b375452 	.word	0x2b375452
 80097a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80097a4:	441e      	add	r6, r3
 80097a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80097aa:	2b20      	cmp	r3, #32
 80097ac:	bfc1      	itttt	gt
 80097ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097b2:	409f      	lslgt	r7, r3
 80097b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80097b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80097bc:	bfd6      	itet	le
 80097be:	f1c3 0320 	rsble	r3, r3, #32
 80097c2:	ea47 0003 	orrgt.w	r0, r7, r3
 80097c6:	fa04 f003 	lslle.w	r0, r4, r3
 80097ca:	f7f6 fe9b 	bl	8000504 <__aeabi_ui2d>
 80097ce:	2201      	movs	r2, #1
 80097d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80097d4:	3e01      	subs	r6, #1
 80097d6:	9212      	str	r2, [sp, #72]	@ 0x48
 80097d8:	e776      	b.n	80096c8 <_dtoa_r+0x100>
 80097da:	2301      	movs	r3, #1
 80097dc:	e7b7      	b.n	800974e <_dtoa_r+0x186>
 80097de:	9010      	str	r0, [sp, #64]	@ 0x40
 80097e0:	e7b6      	b.n	8009750 <_dtoa_r+0x188>
 80097e2:	9b00      	ldr	r3, [sp, #0]
 80097e4:	1bdb      	subs	r3, r3, r7
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	427b      	negs	r3, r7
 80097ea:	9308      	str	r3, [sp, #32]
 80097ec:	2300      	movs	r3, #0
 80097ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80097f0:	e7c3      	b.n	800977a <_dtoa_r+0x1b2>
 80097f2:	2301      	movs	r3, #1
 80097f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097f8:	eb07 0b03 	add.w	fp, r7, r3
 80097fc:	f10b 0301 	add.w	r3, fp, #1
 8009800:	2b01      	cmp	r3, #1
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	bfb8      	it	lt
 8009806:	2301      	movlt	r3, #1
 8009808:	e006      	b.n	8009818 <_dtoa_r+0x250>
 800980a:	2301      	movs	r3, #1
 800980c:	9309      	str	r3, [sp, #36]	@ 0x24
 800980e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009810:	2b00      	cmp	r3, #0
 8009812:	dd28      	ble.n	8009866 <_dtoa_r+0x29e>
 8009814:	469b      	mov	fp, r3
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800981c:	2100      	movs	r1, #0
 800981e:	2204      	movs	r2, #4
 8009820:	f102 0514 	add.w	r5, r2, #20
 8009824:	429d      	cmp	r5, r3
 8009826:	d926      	bls.n	8009876 <_dtoa_r+0x2ae>
 8009828:	6041      	str	r1, [r0, #4]
 800982a:	4648      	mov	r0, r9
 800982c:	f000 fd9c 	bl	800a368 <_Balloc>
 8009830:	4682      	mov	sl, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d142      	bne.n	80098bc <_dtoa_r+0x2f4>
 8009836:	4b1e      	ldr	r3, [pc, #120]	@ (80098b0 <_dtoa_r+0x2e8>)
 8009838:	4602      	mov	r2, r0
 800983a:	f240 11af 	movw	r1, #431	@ 0x1af
 800983e:	e6da      	b.n	80095f6 <_dtoa_r+0x2e>
 8009840:	2300      	movs	r3, #0
 8009842:	e7e3      	b.n	800980c <_dtoa_r+0x244>
 8009844:	2300      	movs	r3, #0
 8009846:	e7d5      	b.n	80097f4 <_dtoa_r+0x22c>
 8009848:	2401      	movs	r4, #1
 800984a:	2300      	movs	r3, #0
 800984c:	9307      	str	r3, [sp, #28]
 800984e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009850:	f04f 3bff 	mov.w	fp, #4294967295
 8009854:	2200      	movs	r2, #0
 8009856:	f8cd b00c 	str.w	fp, [sp, #12]
 800985a:	2312      	movs	r3, #18
 800985c:	920c      	str	r2, [sp, #48]	@ 0x30
 800985e:	e7db      	b.n	8009818 <_dtoa_r+0x250>
 8009860:	2301      	movs	r3, #1
 8009862:	9309      	str	r3, [sp, #36]	@ 0x24
 8009864:	e7f4      	b.n	8009850 <_dtoa_r+0x288>
 8009866:	f04f 0b01 	mov.w	fp, #1
 800986a:	f8cd b00c 	str.w	fp, [sp, #12]
 800986e:	465b      	mov	r3, fp
 8009870:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009874:	e7d0      	b.n	8009818 <_dtoa_r+0x250>
 8009876:	3101      	adds	r1, #1
 8009878:	0052      	lsls	r2, r2, #1
 800987a:	e7d1      	b.n	8009820 <_dtoa_r+0x258>
 800987c:	f3af 8000 	nop.w
 8009880:	636f4361 	.word	0x636f4361
 8009884:	3fd287a7 	.word	0x3fd287a7
 8009888:	8b60c8b3 	.word	0x8b60c8b3
 800988c:	3fc68a28 	.word	0x3fc68a28
 8009890:	509f79fb 	.word	0x509f79fb
 8009894:	3fd34413 	.word	0x3fd34413
 8009898:	0800cdae 	.word	0x0800cdae
 800989c:	0800cdc5 	.word	0x0800cdc5
 80098a0:	7ff00000 	.word	0x7ff00000
 80098a4:	0800cd79 	.word	0x0800cd79
 80098a8:	3ff80000 	.word	0x3ff80000
 80098ac:	0800cf78 	.word	0x0800cf78
 80098b0:	0800ce1d 	.word	0x0800ce1d
 80098b4:	0800cdaa 	.word	0x0800cdaa
 80098b8:	0800cd78 	.word	0x0800cd78
 80098bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098c0:	6018      	str	r0, [r3, #0]
 80098c2:	9b03      	ldr	r3, [sp, #12]
 80098c4:	2b0e      	cmp	r3, #14
 80098c6:	f200 80a1 	bhi.w	8009a0c <_dtoa_r+0x444>
 80098ca:	2c00      	cmp	r4, #0
 80098cc:	f000 809e 	beq.w	8009a0c <_dtoa_r+0x444>
 80098d0:	2f00      	cmp	r7, #0
 80098d2:	dd33      	ble.n	800993c <_dtoa_r+0x374>
 80098d4:	4b9c      	ldr	r3, [pc, #624]	@ (8009b48 <_dtoa_r+0x580>)
 80098d6:	f007 020f 	and.w	r2, r7, #15
 80098da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098de:	ed93 7b00 	vldr	d7, [r3]
 80098e2:	05f8      	lsls	r0, r7, #23
 80098e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80098e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80098ec:	d516      	bpl.n	800991c <_dtoa_r+0x354>
 80098ee:	4b97      	ldr	r3, [pc, #604]	@ (8009b4c <_dtoa_r+0x584>)
 80098f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098f8:	f7f6 ffa8 	bl	800084c <__aeabi_ddiv>
 80098fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009900:	f004 040f 	and.w	r4, r4, #15
 8009904:	2603      	movs	r6, #3
 8009906:	4d91      	ldr	r5, [pc, #580]	@ (8009b4c <_dtoa_r+0x584>)
 8009908:	b954      	cbnz	r4, 8009920 <_dtoa_r+0x358>
 800990a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800990e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009912:	f7f6 ff9b 	bl	800084c <__aeabi_ddiv>
 8009916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991a:	e028      	b.n	800996e <_dtoa_r+0x3a6>
 800991c:	2602      	movs	r6, #2
 800991e:	e7f2      	b.n	8009906 <_dtoa_r+0x33e>
 8009920:	07e1      	lsls	r1, r4, #31
 8009922:	d508      	bpl.n	8009936 <_dtoa_r+0x36e>
 8009924:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009928:	e9d5 2300 	ldrd	r2, r3, [r5]
 800992c:	f7f6 fe64 	bl	80005f8 <__aeabi_dmul>
 8009930:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009934:	3601      	adds	r6, #1
 8009936:	1064      	asrs	r4, r4, #1
 8009938:	3508      	adds	r5, #8
 800993a:	e7e5      	b.n	8009908 <_dtoa_r+0x340>
 800993c:	f000 80af 	beq.w	8009a9e <_dtoa_r+0x4d6>
 8009940:	427c      	negs	r4, r7
 8009942:	4b81      	ldr	r3, [pc, #516]	@ (8009b48 <_dtoa_r+0x580>)
 8009944:	4d81      	ldr	r5, [pc, #516]	@ (8009b4c <_dtoa_r+0x584>)
 8009946:	f004 020f 	and.w	r2, r4, #15
 800994a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009956:	f7f6 fe4f 	bl	80005f8 <__aeabi_dmul>
 800995a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800995e:	1124      	asrs	r4, r4, #4
 8009960:	2300      	movs	r3, #0
 8009962:	2602      	movs	r6, #2
 8009964:	2c00      	cmp	r4, #0
 8009966:	f040 808f 	bne.w	8009a88 <_dtoa_r+0x4c0>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1d3      	bne.n	8009916 <_dtoa_r+0x34e>
 800996e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009970:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	f000 8094 	beq.w	8009aa2 <_dtoa_r+0x4da>
 800997a:	4b75      	ldr	r3, [pc, #468]	@ (8009b50 <_dtoa_r+0x588>)
 800997c:	2200      	movs	r2, #0
 800997e:	4620      	mov	r0, r4
 8009980:	4629      	mov	r1, r5
 8009982:	f7f7 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	f000 808b 	beq.w	8009aa2 <_dtoa_r+0x4da>
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 8087 	beq.w	8009aa2 <_dtoa_r+0x4da>
 8009994:	f1bb 0f00 	cmp.w	fp, #0
 8009998:	dd34      	ble.n	8009a04 <_dtoa_r+0x43c>
 800999a:	4620      	mov	r0, r4
 800999c:	4b6d      	ldr	r3, [pc, #436]	@ (8009b54 <_dtoa_r+0x58c>)
 800999e:	2200      	movs	r2, #0
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fe29 	bl	80005f8 <__aeabi_dmul>
 80099a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099aa:	f107 38ff 	add.w	r8, r7, #4294967295
 80099ae:	3601      	adds	r6, #1
 80099b0:	465c      	mov	r4, fp
 80099b2:	4630      	mov	r0, r6
 80099b4:	f7f6 fdb6 	bl	8000524 <__aeabi_i2d>
 80099b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	4b65      	ldr	r3, [pc, #404]	@ (8009b58 <_dtoa_r+0x590>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	f7f6 fc62 	bl	800028c <__adddf3>
 80099c8:	4605      	mov	r5, r0
 80099ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80099ce:	2c00      	cmp	r4, #0
 80099d0:	d16a      	bne.n	8009aa8 <_dtoa_r+0x4e0>
 80099d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d6:	4b61      	ldr	r3, [pc, #388]	@ (8009b5c <_dtoa_r+0x594>)
 80099d8:	2200      	movs	r2, #0
 80099da:	f7f6 fc55 	bl	8000288 <__aeabi_dsub>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099e6:	462a      	mov	r2, r5
 80099e8:	4633      	mov	r3, r6
 80099ea:	f7f7 f895 	bl	8000b18 <__aeabi_dcmpgt>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f040 8298 	bne.w	8009f24 <_dtoa_r+0x95c>
 80099f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099f8:	462a      	mov	r2, r5
 80099fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099fe:	f7f7 f86d 	bl	8000adc <__aeabi_dcmplt>
 8009a02:	bb38      	cbnz	r0, 8009a54 <_dtoa_r+0x48c>
 8009a04:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009a08:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a0c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f2c0 8157 	blt.w	8009cc2 <_dtoa_r+0x6fa>
 8009a14:	2f0e      	cmp	r7, #14
 8009a16:	f300 8154 	bgt.w	8009cc2 <_dtoa_r+0x6fa>
 8009a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b48 <_dtoa_r+0x580>)
 8009a1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a20:	ed93 7b00 	vldr	d7, [r3]
 8009a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	ed8d 7b00 	vstr	d7, [sp]
 8009a2c:	f280 80e5 	bge.w	8009bfa <_dtoa_r+0x632>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f300 80e1 	bgt.w	8009bfa <_dtoa_r+0x632>
 8009a38:	d10c      	bne.n	8009a54 <_dtoa_r+0x48c>
 8009a3a:	4b48      	ldr	r3, [pc, #288]	@ (8009b5c <_dtoa_r+0x594>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	ec51 0b17 	vmov	r0, r1, d7
 8009a42:	f7f6 fdd9 	bl	80005f8 <__aeabi_dmul>
 8009a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a4a:	f7f7 f85b 	bl	8000b04 <__aeabi_dcmpge>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f000 8266 	beq.w	8009f20 <_dtoa_r+0x958>
 8009a54:	2400      	movs	r4, #0
 8009a56:	4625      	mov	r5, r4
 8009a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a5a:	4656      	mov	r6, sl
 8009a5c:	ea6f 0803 	mvn.w	r8, r3
 8009a60:	2700      	movs	r7, #0
 8009a62:	4621      	mov	r1, r4
 8009a64:	4648      	mov	r0, r9
 8009a66:	f000 fcbf 	bl	800a3e8 <_Bfree>
 8009a6a:	2d00      	cmp	r5, #0
 8009a6c:	f000 80bd 	beq.w	8009bea <_dtoa_r+0x622>
 8009a70:	b12f      	cbz	r7, 8009a7e <_dtoa_r+0x4b6>
 8009a72:	42af      	cmp	r7, r5
 8009a74:	d003      	beq.n	8009a7e <_dtoa_r+0x4b6>
 8009a76:	4639      	mov	r1, r7
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f000 fcb5 	bl	800a3e8 <_Bfree>
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4648      	mov	r0, r9
 8009a82:	f000 fcb1 	bl	800a3e8 <_Bfree>
 8009a86:	e0b0      	b.n	8009bea <_dtoa_r+0x622>
 8009a88:	07e2      	lsls	r2, r4, #31
 8009a8a:	d505      	bpl.n	8009a98 <_dtoa_r+0x4d0>
 8009a8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a90:	f7f6 fdb2 	bl	80005f8 <__aeabi_dmul>
 8009a94:	3601      	adds	r6, #1
 8009a96:	2301      	movs	r3, #1
 8009a98:	1064      	asrs	r4, r4, #1
 8009a9a:	3508      	adds	r5, #8
 8009a9c:	e762      	b.n	8009964 <_dtoa_r+0x39c>
 8009a9e:	2602      	movs	r6, #2
 8009aa0:	e765      	b.n	800996e <_dtoa_r+0x3a6>
 8009aa2:	9c03      	ldr	r4, [sp, #12]
 8009aa4:	46b8      	mov	r8, r7
 8009aa6:	e784      	b.n	80099b2 <_dtoa_r+0x3ea>
 8009aa8:	4b27      	ldr	r3, [pc, #156]	@ (8009b48 <_dtoa_r+0x580>)
 8009aaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009aac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ab0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ab4:	4454      	add	r4, sl
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	d054      	beq.n	8009b64 <_dtoa_r+0x59c>
 8009aba:	4929      	ldr	r1, [pc, #164]	@ (8009b60 <_dtoa_r+0x598>)
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7f6 fec5 	bl	800084c <__aeabi_ddiv>
 8009ac2:	4633      	mov	r3, r6
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	f7f6 fbdf 	bl	8000288 <__aeabi_dsub>
 8009aca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ace:	4656      	mov	r6, sl
 8009ad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ad4:	f7f7 f840 	bl	8000b58 <__aeabi_d2iz>
 8009ad8:	4605      	mov	r5, r0
 8009ada:	f7f6 fd23 	bl	8000524 <__aeabi_i2d>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae6:	f7f6 fbcf 	bl	8000288 <__aeabi_dsub>
 8009aea:	3530      	adds	r5, #48	@ 0x30
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009af4:	f806 5b01 	strb.w	r5, [r6], #1
 8009af8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009afc:	f7f6 ffee 	bl	8000adc <__aeabi_dcmplt>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	d172      	bne.n	8009bea <_dtoa_r+0x622>
 8009b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b08:	4911      	ldr	r1, [pc, #68]	@ (8009b50 <_dtoa_r+0x588>)
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	f7f6 fbbc 	bl	8000288 <__aeabi_dsub>
 8009b10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b14:	f7f6 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	f040 80b4 	bne.w	8009c86 <_dtoa_r+0x6be>
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	f43f af70 	beq.w	8009a04 <_dtoa_r+0x43c>
 8009b24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b28:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <_dtoa_r+0x58c>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f7f6 fd64 	bl	80005f8 <__aeabi_dmul>
 8009b30:	4b08      	ldr	r3, [pc, #32]	@ (8009b54 <_dtoa_r+0x58c>)
 8009b32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b36:	2200      	movs	r2, #0
 8009b38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b3c:	f7f6 fd5c 	bl	80005f8 <__aeabi_dmul>
 8009b40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b44:	e7c4      	b.n	8009ad0 <_dtoa_r+0x508>
 8009b46:	bf00      	nop
 8009b48:	0800cf78 	.word	0x0800cf78
 8009b4c:	0800cf50 	.word	0x0800cf50
 8009b50:	3ff00000 	.word	0x3ff00000
 8009b54:	40240000 	.word	0x40240000
 8009b58:	401c0000 	.word	0x401c0000
 8009b5c:	40140000 	.word	0x40140000
 8009b60:	3fe00000 	.word	0x3fe00000
 8009b64:	4631      	mov	r1, r6
 8009b66:	4628      	mov	r0, r5
 8009b68:	f7f6 fd46 	bl	80005f8 <__aeabi_dmul>
 8009b6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b70:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b72:	4656      	mov	r6, sl
 8009b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b78:	f7f6 ffee 	bl	8000b58 <__aeabi_d2iz>
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	f7f6 fcd1 	bl	8000524 <__aeabi_i2d>
 8009b82:	4602      	mov	r2, r0
 8009b84:	460b      	mov	r3, r1
 8009b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b8a:	f7f6 fb7d 	bl	8000288 <__aeabi_dsub>
 8009b8e:	3530      	adds	r5, #48	@ 0x30
 8009b90:	f806 5b01 	strb.w	r5, [r6], #1
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	42a6      	cmp	r6, r4
 8009b9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	d124      	bne.n	8009bee <_dtoa_r+0x626>
 8009ba4:	4baf      	ldr	r3, [pc, #700]	@ (8009e64 <_dtoa_r+0x89c>)
 8009ba6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009baa:	f7f6 fb6f 	bl	800028c <__adddf3>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb6:	f7f6 ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d163      	bne.n	8009c86 <_dtoa_r+0x6be>
 8009bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009bc2:	49a8      	ldr	r1, [pc, #672]	@ (8009e64 <_dtoa_r+0x89c>)
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f7f6 fb5f 	bl	8000288 <__aeabi_dsub>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bd2:	f7f6 ff83 	bl	8000adc <__aeabi_dcmplt>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f43f af14 	beq.w	8009a04 <_dtoa_r+0x43c>
 8009bdc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009bde:	1e73      	subs	r3, r6, #1
 8009be0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009be2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009be6:	2b30      	cmp	r3, #48	@ 0x30
 8009be8:	d0f8      	beq.n	8009bdc <_dtoa_r+0x614>
 8009bea:	4647      	mov	r7, r8
 8009bec:	e03b      	b.n	8009c66 <_dtoa_r+0x69e>
 8009bee:	4b9e      	ldr	r3, [pc, #632]	@ (8009e68 <_dtoa_r+0x8a0>)
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bf8:	e7bc      	b.n	8009b74 <_dtoa_r+0x5ac>
 8009bfa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009bfe:	4656      	mov	r6, sl
 8009c00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c04:	4620      	mov	r0, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	f7f6 fe20 	bl	800084c <__aeabi_ddiv>
 8009c0c:	f7f6 ffa4 	bl	8000b58 <__aeabi_d2iz>
 8009c10:	4680      	mov	r8, r0
 8009c12:	f7f6 fc87 	bl	8000524 <__aeabi_i2d>
 8009c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4620      	mov	r0, r4
 8009c24:	4629      	mov	r1, r5
 8009c26:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c2a:	f7f6 fb2d 	bl	8000288 <__aeabi_dsub>
 8009c2e:	f806 4b01 	strb.w	r4, [r6], #1
 8009c32:	9d03      	ldr	r5, [sp, #12]
 8009c34:	eba6 040a 	sub.w	r4, r6, sl
 8009c38:	42a5      	cmp	r5, r4
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	d133      	bne.n	8009ca8 <_dtoa_r+0x6e0>
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c48:	4604      	mov	r4, r0
 8009c4a:	460d      	mov	r5, r1
 8009c4c:	f7f6 ff64 	bl	8000b18 <__aeabi_dcmpgt>
 8009c50:	b9c0      	cbnz	r0, 8009c84 <_dtoa_r+0x6bc>
 8009c52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c56:	4620      	mov	r0, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7f6 ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c5e:	b110      	cbz	r0, 8009c66 <_dtoa_r+0x69e>
 8009c60:	f018 0f01 	tst.w	r8, #1
 8009c64:	d10e      	bne.n	8009c84 <_dtoa_r+0x6bc>
 8009c66:	9902      	ldr	r1, [sp, #8]
 8009c68:	4648      	mov	r0, r9
 8009c6a:	f000 fbbd 	bl	800a3e8 <_Bfree>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	7033      	strb	r3, [r6, #0]
 8009c72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c74:	3701      	adds	r7, #1
 8009c76:	601f      	str	r7, [r3, #0]
 8009c78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 824b 	beq.w	800a116 <_dtoa_r+0xb4e>
 8009c80:	601e      	str	r6, [r3, #0]
 8009c82:	e248      	b.n	800a116 <_dtoa_r+0xb4e>
 8009c84:	46b8      	mov	r8, r7
 8009c86:	4633      	mov	r3, r6
 8009c88:	461e      	mov	r6, r3
 8009c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c8e:	2a39      	cmp	r2, #57	@ 0x39
 8009c90:	d106      	bne.n	8009ca0 <_dtoa_r+0x6d8>
 8009c92:	459a      	cmp	sl, r3
 8009c94:	d1f8      	bne.n	8009c88 <_dtoa_r+0x6c0>
 8009c96:	2230      	movs	r2, #48	@ 0x30
 8009c98:	f108 0801 	add.w	r8, r8, #1
 8009c9c:	f88a 2000 	strb.w	r2, [sl]
 8009ca0:	781a      	ldrb	r2, [r3, #0]
 8009ca2:	3201      	adds	r2, #1
 8009ca4:	701a      	strb	r2, [r3, #0]
 8009ca6:	e7a0      	b.n	8009bea <_dtoa_r+0x622>
 8009ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8009e68 <_dtoa_r+0x8a0>)
 8009caa:	2200      	movs	r2, #0
 8009cac:	f7f6 fca4 	bl	80005f8 <__aeabi_dmul>
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	f7f6 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d09f      	beq.n	8009c00 <_dtoa_r+0x638>
 8009cc0:	e7d1      	b.n	8009c66 <_dtoa_r+0x69e>
 8009cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	f000 80ea 	beq.w	8009e9e <_dtoa_r+0x8d6>
 8009cca:	9a07      	ldr	r2, [sp, #28]
 8009ccc:	2a01      	cmp	r2, #1
 8009cce:	f300 80cd 	bgt.w	8009e6c <_dtoa_r+0x8a4>
 8009cd2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	f000 80c1 	beq.w	8009e5c <_dtoa_r+0x894>
 8009cda:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009cde:	9c08      	ldr	r4, [sp, #32]
 8009ce0:	9e00      	ldr	r6, [sp, #0]
 8009ce2:	9a00      	ldr	r2, [sp, #0]
 8009ce4:	441a      	add	r2, r3
 8009ce6:	9200      	str	r2, [sp, #0]
 8009ce8:	9a06      	ldr	r2, [sp, #24]
 8009cea:	2101      	movs	r1, #1
 8009cec:	441a      	add	r2, r3
 8009cee:	4648      	mov	r0, r9
 8009cf0:	9206      	str	r2, [sp, #24]
 8009cf2:	f000 fc77 	bl	800a5e4 <__i2b>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b166      	cbz	r6, 8009d14 <_dtoa_r+0x74c>
 8009cfa:	9b06      	ldr	r3, [sp, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dd09      	ble.n	8009d14 <_dtoa_r+0x74c>
 8009d00:	42b3      	cmp	r3, r6
 8009d02:	9a00      	ldr	r2, [sp, #0]
 8009d04:	bfa8      	it	ge
 8009d06:	4633      	movge	r3, r6
 8009d08:	1ad2      	subs	r2, r2, r3
 8009d0a:	9200      	str	r2, [sp, #0]
 8009d0c:	9a06      	ldr	r2, [sp, #24]
 8009d0e:	1af6      	subs	r6, r6, r3
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	9306      	str	r3, [sp, #24]
 8009d14:	9b08      	ldr	r3, [sp, #32]
 8009d16:	b30b      	cbz	r3, 8009d5c <_dtoa_r+0x794>
 8009d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 80c6 	beq.w	8009eac <_dtoa_r+0x8e4>
 8009d20:	2c00      	cmp	r4, #0
 8009d22:	f000 80c0 	beq.w	8009ea6 <_dtoa_r+0x8de>
 8009d26:	4629      	mov	r1, r5
 8009d28:	4622      	mov	r2, r4
 8009d2a:	4648      	mov	r0, r9
 8009d2c:	f000 fd12 	bl	800a754 <__pow5mult>
 8009d30:	9a02      	ldr	r2, [sp, #8]
 8009d32:	4601      	mov	r1, r0
 8009d34:	4605      	mov	r5, r0
 8009d36:	4648      	mov	r0, r9
 8009d38:	f000 fc6a 	bl	800a610 <__multiply>
 8009d3c:	9902      	ldr	r1, [sp, #8]
 8009d3e:	4680      	mov	r8, r0
 8009d40:	4648      	mov	r0, r9
 8009d42:	f000 fb51 	bl	800a3e8 <_Bfree>
 8009d46:	9b08      	ldr	r3, [sp, #32]
 8009d48:	1b1b      	subs	r3, r3, r4
 8009d4a:	9308      	str	r3, [sp, #32]
 8009d4c:	f000 80b1 	beq.w	8009eb2 <_dtoa_r+0x8ea>
 8009d50:	9a08      	ldr	r2, [sp, #32]
 8009d52:	4641      	mov	r1, r8
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fcfd 	bl	800a754 <__pow5mult>
 8009d5a:	9002      	str	r0, [sp, #8]
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	4648      	mov	r0, r9
 8009d60:	f000 fc40 	bl	800a5e4 <__i2b>
 8009d64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d66:	4604      	mov	r4, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 81d8 	beq.w	800a11e <_dtoa_r+0xb56>
 8009d6e:	461a      	mov	r2, r3
 8009d70:	4601      	mov	r1, r0
 8009d72:	4648      	mov	r0, r9
 8009d74:	f000 fcee 	bl	800a754 <__pow5mult>
 8009d78:	9b07      	ldr	r3, [sp, #28]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	f300 809f 	bgt.w	8009ec0 <_dtoa_r+0x8f8>
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f040 8097 	bne.w	8009eb8 <_dtoa_r+0x8f0>
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f040 8093 	bne.w	8009ebc <_dtoa_r+0x8f4>
 8009d96:	9b05      	ldr	r3, [sp, #20]
 8009d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d9c:	0d1b      	lsrs	r3, r3, #20
 8009d9e:	051b      	lsls	r3, r3, #20
 8009da0:	b133      	cbz	r3, 8009db0 <_dtoa_r+0x7e8>
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	3301      	adds	r3, #1
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	9b06      	ldr	r3, [sp, #24]
 8009daa:	3301      	adds	r3, #1
 8009dac:	9306      	str	r3, [sp, #24]
 8009dae:	2301      	movs	r3, #1
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 81b8 	beq.w	800a12a <_dtoa_r+0xb62>
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009dc0:	6918      	ldr	r0, [r3, #16]
 8009dc2:	f000 fbc3 	bl	800a54c <__hi0bits>
 8009dc6:	f1c0 0020 	rsb	r0, r0, #32
 8009dca:	9b06      	ldr	r3, [sp, #24]
 8009dcc:	4418      	add	r0, r3
 8009dce:	f010 001f 	ands.w	r0, r0, #31
 8009dd2:	f000 8082 	beq.w	8009eda <_dtoa_r+0x912>
 8009dd6:	f1c0 0320 	rsb	r3, r0, #32
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	dd73      	ble.n	8009ec6 <_dtoa_r+0x8fe>
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	f1c0 001c 	rsb	r0, r0, #28
 8009de4:	4403      	add	r3, r0
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	9b06      	ldr	r3, [sp, #24]
 8009dea:	4403      	add	r3, r0
 8009dec:	4406      	add	r6, r0
 8009dee:	9306      	str	r3, [sp, #24]
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dd05      	ble.n	8009e02 <_dtoa_r+0x83a>
 8009df6:	9902      	ldr	r1, [sp, #8]
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f000 fd04 	bl	800a808 <__lshift>
 8009e00:	9002      	str	r0, [sp, #8]
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dd05      	ble.n	8009e14 <_dtoa_r+0x84c>
 8009e08:	4621      	mov	r1, r4
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4648      	mov	r0, r9
 8009e0e:	f000 fcfb 	bl	800a808 <__lshift>
 8009e12:	4604      	mov	r4, r0
 8009e14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d061      	beq.n	8009ede <_dtoa_r+0x916>
 8009e1a:	9802      	ldr	r0, [sp, #8]
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f000 fd5f 	bl	800a8e0 <__mcmp>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	da5b      	bge.n	8009ede <_dtoa_r+0x916>
 8009e26:	2300      	movs	r3, #0
 8009e28:	9902      	ldr	r1, [sp, #8]
 8009e2a:	220a      	movs	r2, #10
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f000 fafd 	bl	800a42c <__multadd>
 8009e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e34:	9002      	str	r0, [sp, #8]
 8009e36:	f107 38ff 	add.w	r8, r7, #4294967295
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 8177 	beq.w	800a12e <_dtoa_r+0xb66>
 8009e40:	4629      	mov	r1, r5
 8009e42:	2300      	movs	r3, #0
 8009e44:	220a      	movs	r2, #10
 8009e46:	4648      	mov	r0, r9
 8009e48:	f000 faf0 	bl	800a42c <__multadd>
 8009e4c:	f1bb 0f00 	cmp.w	fp, #0
 8009e50:	4605      	mov	r5, r0
 8009e52:	dc6f      	bgt.n	8009f34 <_dtoa_r+0x96c>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dc49      	bgt.n	8009eee <_dtoa_r+0x926>
 8009e5a:	e06b      	b.n	8009f34 <_dtoa_r+0x96c>
 8009e5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e62:	e73c      	b.n	8009cde <_dtoa_r+0x716>
 8009e64:	3fe00000 	.word	0x3fe00000
 8009e68:	40240000 	.word	0x40240000
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	1e5c      	subs	r4, r3, #1
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	42a3      	cmp	r3, r4
 8009e74:	db09      	blt.n	8009e8a <_dtoa_r+0x8c2>
 8009e76:	1b1c      	subs	r4, r3, r4
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f6bf af30 	bge.w	8009ce0 <_dtoa_r+0x718>
 8009e80:	9b00      	ldr	r3, [sp, #0]
 8009e82:	9a03      	ldr	r2, [sp, #12]
 8009e84:	1a9e      	subs	r6, r3, r2
 8009e86:	2300      	movs	r3, #0
 8009e88:	e72b      	b.n	8009ce2 <_dtoa_r+0x71a>
 8009e8a:	9b08      	ldr	r3, [sp, #32]
 8009e8c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e8e:	9408      	str	r4, [sp, #32]
 8009e90:	1ae3      	subs	r3, r4, r3
 8009e92:	441a      	add	r2, r3
 8009e94:	9e00      	ldr	r6, [sp, #0]
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e9a:	2400      	movs	r4, #0
 8009e9c:	e721      	b.n	8009ce2 <_dtoa_r+0x71a>
 8009e9e:	9c08      	ldr	r4, [sp, #32]
 8009ea0:	9e00      	ldr	r6, [sp, #0]
 8009ea2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009ea4:	e728      	b.n	8009cf8 <_dtoa_r+0x730>
 8009ea6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009eaa:	e751      	b.n	8009d50 <_dtoa_r+0x788>
 8009eac:	9a08      	ldr	r2, [sp, #32]
 8009eae:	9902      	ldr	r1, [sp, #8]
 8009eb0:	e750      	b.n	8009d54 <_dtoa_r+0x78c>
 8009eb2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009eb6:	e751      	b.n	8009d5c <_dtoa_r+0x794>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	e779      	b.n	8009db0 <_dtoa_r+0x7e8>
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	e777      	b.n	8009db0 <_dtoa_r+0x7e8>
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9308      	str	r3, [sp, #32]
 8009ec4:	e779      	b.n	8009dba <_dtoa_r+0x7f2>
 8009ec6:	d093      	beq.n	8009df0 <_dtoa_r+0x828>
 8009ec8:	9a00      	ldr	r2, [sp, #0]
 8009eca:	331c      	adds	r3, #28
 8009ecc:	441a      	add	r2, r3
 8009ece:	9200      	str	r2, [sp, #0]
 8009ed0:	9a06      	ldr	r2, [sp, #24]
 8009ed2:	441a      	add	r2, r3
 8009ed4:	441e      	add	r6, r3
 8009ed6:	9206      	str	r2, [sp, #24]
 8009ed8:	e78a      	b.n	8009df0 <_dtoa_r+0x828>
 8009eda:	4603      	mov	r3, r0
 8009edc:	e7f4      	b.n	8009ec8 <_dtoa_r+0x900>
 8009ede:	9b03      	ldr	r3, [sp, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	46b8      	mov	r8, r7
 8009ee4:	dc20      	bgt.n	8009f28 <_dtoa_r+0x960>
 8009ee6:	469b      	mov	fp, r3
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	dd1e      	ble.n	8009f2c <_dtoa_r+0x964>
 8009eee:	f1bb 0f00 	cmp.w	fp, #0
 8009ef2:	f47f adb1 	bne.w	8009a58 <_dtoa_r+0x490>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	465b      	mov	r3, fp
 8009efa:	2205      	movs	r2, #5
 8009efc:	4648      	mov	r0, r9
 8009efe:	f000 fa95 	bl	800a42c <__multadd>
 8009f02:	4601      	mov	r1, r0
 8009f04:	4604      	mov	r4, r0
 8009f06:	9802      	ldr	r0, [sp, #8]
 8009f08:	f000 fcea 	bl	800a8e0 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f77f ada3 	ble.w	8009a58 <_dtoa_r+0x490>
 8009f12:	4656      	mov	r6, sl
 8009f14:	2331      	movs	r3, #49	@ 0x31
 8009f16:	f806 3b01 	strb.w	r3, [r6], #1
 8009f1a:	f108 0801 	add.w	r8, r8, #1
 8009f1e:	e59f      	b.n	8009a60 <_dtoa_r+0x498>
 8009f20:	9c03      	ldr	r4, [sp, #12]
 8009f22:	46b8      	mov	r8, r7
 8009f24:	4625      	mov	r5, r4
 8009f26:	e7f4      	b.n	8009f12 <_dtoa_r+0x94a>
 8009f28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8101 	beq.w	800a136 <_dtoa_r+0xb6e>
 8009f34:	2e00      	cmp	r6, #0
 8009f36:	dd05      	ble.n	8009f44 <_dtoa_r+0x97c>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4632      	mov	r2, r6
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fc63 	bl	800a808 <__lshift>
 8009f42:	4605      	mov	r5, r0
 8009f44:	9b08      	ldr	r3, [sp, #32]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d05c      	beq.n	800a004 <_dtoa_r+0xa3c>
 8009f4a:	6869      	ldr	r1, [r5, #4]
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fa0b 	bl	800a368 <_Balloc>
 8009f52:	4606      	mov	r6, r0
 8009f54:	b928      	cbnz	r0, 8009f62 <_dtoa_r+0x99a>
 8009f56:	4b82      	ldr	r3, [pc, #520]	@ (800a160 <_dtoa_r+0xb98>)
 8009f58:	4602      	mov	r2, r0
 8009f5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f5e:	f7ff bb4a 	b.w	80095f6 <_dtoa_r+0x2e>
 8009f62:	692a      	ldr	r2, [r5, #16]
 8009f64:	3202      	adds	r2, #2
 8009f66:	0092      	lsls	r2, r2, #2
 8009f68:	f105 010c 	add.w	r1, r5, #12
 8009f6c:	300c      	adds	r0, #12
 8009f6e:	f7ff fa8c 	bl	800948a <memcpy>
 8009f72:	2201      	movs	r2, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4648      	mov	r0, r9
 8009f78:	f000 fc46 	bl	800a808 <__lshift>
 8009f7c:	f10a 0301 	add.w	r3, sl, #1
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	eb0a 030b 	add.w	r3, sl, fp
 8009f86:	9308      	str	r3, [sp, #32]
 8009f88:	9b04      	ldr	r3, [sp, #16]
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	462f      	mov	r7, r5
 8009f90:	9306      	str	r3, [sp, #24]
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b00      	ldr	r3, [sp, #0]
 8009f96:	9802      	ldr	r0, [sp, #8]
 8009f98:	4621      	mov	r1, r4
 8009f9a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f9e:	f7ff fa89 	bl	80094b4 <quorem>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	3330      	adds	r3, #48	@ 0x30
 8009fa6:	9003      	str	r0, [sp, #12]
 8009fa8:	4639      	mov	r1, r7
 8009faa:	9802      	ldr	r0, [sp, #8]
 8009fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fae:	f000 fc97 	bl	800a8e0 <__mcmp>
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	9004      	str	r0, [sp, #16]
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f000 fcad 	bl	800a918 <__mdiff>
 8009fbe:	68c2      	ldr	r2, [r0, #12]
 8009fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	bb02      	cbnz	r2, 800a008 <_dtoa_r+0xa40>
 8009fc6:	4601      	mov	r1, r0
 8009fc8:	9802      	ldr	r0, [sp, #8]
 8009fca:	f000 fc89 	bl	800a8e0 <__mcmp>
 8009fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	4631      	mov	r1, r6
 8009fd4:	4648      	mov	r0, r9
 8009fd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fda:	f000 fa05 	bl	800a3e8 <_Bfree>
 8009fde:	9b07      	ldr	r3, [sp, #28]
 8009fe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fe2:	9e00      	ldr	r6, [sp, #0]
 8009fe4:	ea42 0103 	orr.w	r1, r2, r3
 8009fe8:	9b06      	ldr	r3, [sp, #24]
 8009fea:	4319      	orrs	r1, r3
 8009fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fee:	d10d      	bne.n	800a00c <_dtoa_r+0xa44>
 8009ff0:	2b39      	cmp	r3, #57	@ 0x39
 8009ff2:	d027      	beq.n	800a044 <_dtoa_r+0xa7c>
 8009ff4:	9a04      	ldr	r2, [sp, #16]
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	dd01      	ble.n	8009ffe <_dtoa_r+0xa36>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	3331      	adds	r3, #49	@ 0x31
 8009ffe:	f88b 3000 	strb.w	r3, [fp]
 800a002:	e52e      	b.n	8009a62 <_dtoa_r+0x49a>
 800a004:	4628      	mov	r0, r5
 800a006:	e7b9      	b.n	8009f7c <_dtoa_r+0x9b4>
 800a008:	2201      	movs	r2, #1
 800a00a:	e7e2      	b.n	8009fd2 <_dtoa_r+0xa0a>
 800a00c:	9904      	ldr	r1, [sp, #16]
 800a00e:	2900      	cmp	r1, #0
 800a010:	db04      	blt.n	800a01c <_dtoa_r+0xa54>
 800a012:	9807      	ldr	r0, [sp, #28]
 800a014:	4301      	orrs	r1, r0
 800a016:	9806      	ldr	r0, [sp, #24]
 800a018:	4301      	orrs	r1, r0
 800a01a:	d120      	bne.n	800a05e <_dtoa_r+0xa96>
 800a01c:	2a00      	cmp	r2, #0
 800a01e:	ddee      	ble.n	8009ffe <_dtoa_r+0xa36>
 800a020:	9902      	ldr	r1, [sp, #8]
 800a022:	9300      	str	r3, [sp, #0]
 800a024:	2201      	movs	r2, #1
 800a026:	4648      	mov	r0, r9
 800a028:	f000 fbee 	bl	800a808 <__lshift>
 800a02c:	4621      	mov	r1, r4
 800a02e:	9002      	str	r0, [sp, #8]
 800a030:	f000 fc56 	bl	800a8e0 <__mcmp>
 800a034:	2800      	cmp	r0, #0
 800a036:	9b00      	ldr	r3, [sp, #0]
 800a038:	dc02      	bgt.n	800a040 <_dtoa_r+0xa78>
 800a03a:	d1e0      	bne.n	8009ffe <_dtoa_r+0xa36>
 800a03c:	07da      	lsls	r2, r3, #31
 800a03e:	d5de      	bpl.n	8009ffe <_dtoa_r+0xa36>
 800a040:	2b39      	cmp	r3, #57	@ 0x39
 800a042:	d1da      	bne.n	8009ffa <_dtoa_r+0xa32>
 800a044:	2339      	movs	r3, #57	@ 0x39
 800a046:	f88b 3000 	strb.w	r3, [fp]
 800a04a:	4633      	mov	r3, r6
 800a04c:	461e      	mov	r6, r3
 800a04e:	3b01      	subs	r3, #1
 800a050:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a054:	2a39      	cmp	r2, #57	@ 0x39
 800a056:	d04e      	beq.n	800a0f6 <_dtoa_r+0xb2e>
 800a058:	3201      	adds	r2, #1
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	e501      	b.n	8009a62 <_dtoa_r+0x49a>
 800a05e:	2a00      	cmp	r2, #0
 800a060:	dd03      	ble.n	800a06a <_dtoa_r+0xaa2>
 800a062:	2b39      	cmp	r3, #57	@ 0x39
 800a064:	d0ee      	beq.n	800a044 <_dtoa_r+0xa7c>
 800a066:	3301      	adds	r3, #1
 800a068:	e7c9      	b.n	8009ffe <_dtoa_r+0xa36>
 800a06a:	9a00      	ldr	r2, [sp, #0]
 800a06c:	9908      	ldr	r1, [sp, #32]
 800a06e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a072:	428a      	cmp	r2, r1
 800a074:	d028      	beq.n	800a0c8 <_dtoa_r+0xb00>
 800a076:	9902      	ldr	r1, [sp, #8]
 800a078:	2300      	movs	r3, #0
 800a07a:	220a      	movs	r2, #10
 800a07c:	4648      	mov	r0, r9
 800a07e:	f000 f9d5 	bl	800a42c <__multadd>
 800a082:	42af      	cmp	r7, r5
 800a084:	9002      	str	r0, [sp, #8]
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	f04f 020a 	mov.w	r2, #10
 800a08e:	4639      	mov	r1, r7
 800a090:	4648      	mov	r0, r9
 800a092:	d107      	bne.n	800a0a4 <_dtoa_r+0xadc>
 800a094:	f000 f9ca 	bl	800a42c <__multadd>
 800a098:	4607      	mov	r7, r0
 800a09a:	4605      	mov	r5, r0
 800a09c:	9b00      	ldr	r3, [sp, #0]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	e777      	b.n	8009f94 <_dtoa_r+0x9cc>
 800a0a4:	f000 f9c2 	bl	800a42c <__multadd>
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	220a      	movs	r2, #10
 800a0b0:	4648      	mov	r0, r9
 800a0b2:	f000 f9bb 	bl	800a42c <__multadd>
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	e7f0      	b.n	800a09c <_dtoa_r+0xad4>
 800a0ba:	f1bb 0f00 	cmp.w	fp, #0
 800a0be:	bfcc      	ite	gt
 800a0c0:	465e      	movgt	r6, fp
 800a0c2:	2601      	movle	r6, #1
 800a0c4:	4456      	add	r6, sl
 800a0c6:	2700      	movs	r7, #0
 800a0c8:	9902      	ldr	r1, [sp, #8]
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	4648      	mov	r0, r9
 800a0d0:	f000 fb9a 	bl	800a808 <__lshift>
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	9002      	str	r0, [sp, #8]
 800a0d8:	f000 fc02 	bl	800a8e0 <__mcmp>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	dcb4      	bgt.n	800a04a <_dtoa_r+0xa82>
 800a0e0:	d102      	bne.n	800a0e8 <_dtoa_r+0xb20>
 800a0e2:	9b00      	ldr	r3, [sp, #0]
 800a0e4:	07db      	lsls	r3, r3, #31
 800a0e6:	d4b0      	bmi.n	800a04a <_dtoa_r+0xa82>
 800a0e8:	4633      	mov	r3, r6
 800a0ea:	461e      	mov	r6, r3
 800a0ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0f0:	2a30      	cmp	r2, #48	@ 0x30
 800a0f2:	d0fa      	beq.n	800a0ea <_dtoa_r+0xb22>
 800a0f4:	e4b5      	b.n	8009a62 <_dtoa_r+0x49a>
 800a0f6:	459a      	cmp	sl, r3
 800a0f8:	d1a8      	bne.n	800a04c <_dtoa_r+0xa84>
 800a0fa:	2331      	movs	r3, #49	@ 0x31
 800a0fc:	f108 0801 	add.w	r8, r8, #1
 800a100:	f88a 3000 	strb.w	r3, [sl]
 800a104:	e4ad      	b.n	8009a62 <_dtoa_r+0x49a>
 800a106:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a108:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a164 <_dtoa_r+0xb9c>
 800a10c:	b11b      	cbz	r3, 800a116 <_dtoa_r+0xb4e>
 800a10e:	f10a 0308 	add.w	r3, sl, #8
 800a112:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	4650      	mov	r0, sl
 800a118:	b017      	add	sp, #92	@ 0x5c
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11e:	9b07      	ldr	r3, [sp, #28]
 800a120:	2b01      	cmp	r3, #1
 800a122:	f77f ae2e 	ble.w	8009d82 <_dtoa_r+0x7ba>
 800a126:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	2001      	movs	r0, #1
 800a12c:	e64d      	b.n	8009dca <_dtoa_r+0x802>
 800a12e:	f1bb 0f00 	cmp.w	fp, #0
 800a132:	f77f aed9 	ble.w	8009ee8 <_dtoa_r+0x920>
 800a136:	4656      	mov	r6, sl
 800a138:	9802      	ldr	r0, [sp, #8]
 800a13a:	4621      	mov	r1, r4
 800a13c:	f7ff f9ba 	bl	80094b4 <quorem>
 800a140:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a144:	f806 3b01 	strb.w	r3, [r6], #1
 800a148:	eba6 020a 	sub.w	r2, r6, sl
 800a14c:	4593      	cmp	fp, r2
 800a14e:	ddb4      	ble.n	800a0ba <_dtoa_r+0xaf2>
 800a150:	9902      	ldr	r1, [sp, #8]
 800a152:	2300      	movs	r3, #0
 800a154:	220a      	movs	r2, #10
 800a156:	4648      	mov	r0, r9
 800a158:	f000 f968 	bl	800a42c <__multadd>
 800a15c:	9002      	str	r0, [sp, #8]
 800a15e:	e7eb      	b.n	800a138 <_dtoa_r+0xb70>
 800a160:	0800ce1d 	.word	0x0800ce1d
 800a164:	0800cda1 	.word	0x0800cda1

0800a168 <_free_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	4605      	mov	r5, r0
 800a16c:	2900      	cmp	r1, #0
 800a16e:	d041      	beq.n	800a1f4 <_free_r+0x8c>
 800a170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a174:	1f0c      	subs	r4, r1, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	bfb8      	it	lt
 800a17a:	18e4      	addlt	r4, r4, r3
 800a17c:	f000 f8e8 	bl	800a350 <__malloc_lock>
 800a180:	4a1d      	ldr	r2, [pc, #116]	@ (800a1f8 <_free_r+0x90>)
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	b933      	cbnz	r3, 800a194 <_free_r+0x2c>
 800a186:	6063      	str	r3, [r4, #4]
 800a188:	6014      	str	r4, [r2, #0]
 800a18a:	4628      	mov	r0, r5
 800a18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a190:	f000 b8e4 	b.w	800a35c <__malloc_unlock>
 800a194:	42a3      	cmp	r3, r4
 800a196:	d908      	bls.n	800a1aa <_free_r+0x42>
 800a198:	6820      	ldr	r0, [r4, #0]
 800a19a:	1821      	adds	r1, r4, r0
 800a19c:	428b      	cmp	r3, r1
 800a19e:	bf01      	itttt	eq
 800a1a0:	6819      	ldreq	r1, [r3, #0]
 800a1a2:	685b      	ldreq	r3, [r3, #4]
 800a1a4:	1809      	addeq	r1, r1, r0
 800a1a6:	6021      	streq	r1, [r4, #0]
 800a1a8:	e7ed      	b.n	800a186 <_free_r+0x1e>
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	b10b      	cbz	r3, 800a1b4 <_free_r+0x4c>
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	d9fa      	bls.n	800a1aa <_free_r+0x42>
 800a1b4:	6811      	ldr	r1, [r2, #0]
 800a1b6:	1850      	adds	r0, r2, r1
 800a1b8:	42a0      	cmp	r0, r4
 800a1ba:	d10b      	bne.n	800a1d4 <_free_r+0x6c>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	4401      	add	r1, r0
 800a1c0:	1850      	adds	r0, r2, r1
 800a1c2:	4283      	cmp	r3, r0
 800a1c4:	6011      	str	r1, [r2, #0]
 800a1c6:	d1e0      	bne.n	800a18a <_free_r+0x22>
 800a1c8:	6818      	ldr	r0, [r3, #0]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	6053      	str	r3, [r2, #4]
 800a1ce:	4408      	add	r0, r1
 800a1d0:	6010      	str	r0, [r2, #0]
 800a1d2:	e7da      	b.n	800a18a <_free_r+0x22>
 800a1d4:	d902      	bls.n	800a1dc <_free_r+0x74>
 800a1d6:	230c      	movs	r3, #12
 800a1d8:	602b      	str	r3, [r5, #0]
 800a1da:	e7d6      	b.n	800a18a <_free_r+0x22>
 800a1dc:	6820      	ldr	r0, [r4, #0]
 800a1de:	1821      	adds	r1, r4, r0
 800a1e0:	428b      	cmp	r3, r1
 800a1e2:	bf04      	itt	eq
 800a1e4:	6819      	ldreq	r1, [r3, #0]
 800a1e6:	685b      	ldreq	r3, [r3, #4]
 800a1e8:	6063      	str	r3, [r4, #4]
 800a1ea:	bf04      	itt	eq
 800a1ec:	1809      	addeq	r1, r1, r0
 800a1ee:	6021      	streq	r1, [r4, #0]
 800a1f0:	6054      	str	r4, [r2, #4]
 800a1f2:	e7ca      	b.n	800a18a <_free_r+0x22>
 800a1f4:	bd38      	pop	{r3, r4, r5, pc}
 800a1f6:	bf00      	nop
 800a1f8:	2000065c 	.word	0x2000065c

0800a1fc <malloc>:
 800a1fc:	4b02      	ldr	r3, [pc, #8]	@ (800a208 <malloc+0xc>)
 800a1fe:	4601      	mov	r1, r0
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	f000 b825 	b.w	800a250 <_malloc_r>
 800a206:	bf00      	nop
 800a208:	20000024 	.word	0x20000024

0800a20c <sbrk_aligned>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	4e0f      	ldr	r6, [pc, #60]	@ (800a24c <sbrk_aligned+0x40>)
 800a210:	460c      	mov	r4, r1
 800a212:	6831      	ldr	r1, [r6, #0]
 800a214:	4605      	mov	r5, r0
 800a216:	b911      	cbnz	r1, 800a21e <sbrk_aligned+0x12>
 800a218:	f001 ffca 	bl	800c1b0 <_sbrk_r>
 800a21c:	6030      	str	r0, [r6, #0]
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f001 ffc5 	bl	800c1b0 <_sbrk_r>
 800a226:	1c43      	adds	r3, r0, #1
 800a228:	d103      	bne.n	800a232 <sbrk_aligned+0x26>
 800a22a:	f04f 34ff 	mov.w	r4, #4294967295
 800a22e:	4620      	mov	r0, r4
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	1cc4      	adds	r4, r0, #3
 800a234:	f024 0403 	bic.w	r4, r4, #3
 800a238:	42a0      	cmp	r0, r4
 800a23a:	d0f8      	beq.n	800a22e <sbrk_aligned+0x22>
 800a23c:	1a21      	subs	r1, r4, r0
 800a23e:	4628      	mov	r0, r5
 800a240:	f001 ffb6 	bl	800c1b0 <_sbrk_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d1f2      	bne.n	800a22e <sbrk_aligned+0x22>
 800a248:	e7ef      	b.n	800a22a <sbrk_aligned+0x1e>
 800a24a:	bf00      	nop
 800a24c:	20000658 	.word	0x20000658

0800a250 <_malloc_r>:
 800a250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a254:	1ccd      	adds	r5, r1, #3
 800a256:	f025 0503 	bic.w	r5, r5, #3
 800a25a:	3508      	adds	r5, #8
 800a25c:	2d0c      	cmp	r5, #12
 800a25e:	bf38      	it	cc
 800a260:	250c      	movcc	r5, #12
 800a262:	2d00      	cmp	r5, #0
 800a264:	4606      	mov	r6, r0
 800a266:	db01      	blt.n	800a26c <_malloc_r+0x1c>
 800a268:	42a9      	cmp	r1, r5
 800a26a:	d904      	bls.n	800a276 <_malloc_r+0x26>
 800a26c:	230c      	movs	r3, #12
 800a26e:	6033      	str	r3, [r6, #0]
 800a270:	2000      	movs	r0, #0
 800a272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a276:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a34c <_malloc_r+0xfc>
 800a27a:	f000 f869 	bl	800a350 <__malloc_lock>
 800a27e:	f8d8 3000 	ldr.w	r3, [r8]
 800a282:	461c      	mov	r4, r3
 800a284:	bb44      	cbnz	r4, 800a2d8 <_malloc_r+0x88>
 800a286:	4629      	mov	r1, r5
 800a288:	4630      	mov	r0, r6
 800a28a:	f7ff ffbf 	bl	800a20c <sbrk_aligned>
 800a28e:	1c43      	adds	r3, r0, #1
 800a290:	4604      	mov	r4, r0
 800a292:	d158      	bne.n	800a346 <_malloc_r+0xf6>
 800a294:	f8d8 4000 	ldr.w	r4, [r8]
 800a298:	4627      	mov	r7, r4
 800a29a:	2f00      	cmp	r7, #0
 800a29c:	d143      	bne.n	800a326 <_malloc_r+0xd6>
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	d04b      	beq.n	800a33a <_malloc_r+0xea>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	eb04 0903 	add.w	r9, r4, r3
 800a2ac:	f001 ff80 	bl	800c1b0 <_sbrk_r>
 800a2b0:	4581      	cmp	r9, r0
 800a2b2:	d142      	bne.n	800a33a <_malloc_r+0xea>
 800a2b4:	6821      	ldr	r1, [r4, #0]
 800a2b6:	1a6d      	subs	r5, r5, r1
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ffa6 	bl	800a20c <sbrk_aligned>
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d03a      	beq.n	800a33a <_malloc_r+0xea>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	442b      	add	r3, r5
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	bb62      	cbnz	r2, 800a32c <_malloc_r+0xdc>
 800a2d2:	f8c8 7000 	str.w	r7, [r8]
 800a2d6:	e00f      	b.n	800a2f8 <_malloc_r+0xa8>
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	1b52      	subs	r2, r2, r5
 800a2dc:	d420      	bmi.n	800a320 <_malloc_r+0xd0>
 800a2de:	2a0b      	cmp	r2, #11
 800a2e0:	d917      	bls.n	800a312 <_malloc_r+0xc2>
 800a2e2:	1961      	adds	r1, r4, r5
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	6025      	str	r5, [r4, #0]
 800a2e8:	bf18      	it	ne
 800a2ea:	6059      	strne	r1, [r3, #4]
 800a2ec:	6863      	ldr	r3, [r4, #4]
 800a2ee:	bf08      	it	eq
 800a2f0:	f8c8 1000 	streq.w	r1, [r8]
 800a2f4:	5162      	str	r2, [r4, r5]
 800a2f6:	604b      	str	r3, [r1, #4]
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 f82f 	bl	800a35c <__malloc_unlock>
 800a2fe:	f104 000b 	add.w	r0, r4, #11
 800a302:	1d23      	adds	r3, r4, #4
 800a304:	f020 0007 	bic.w	r0, r0, #7
 800a308:	1ac2      	subs	r2, r0, r3
 800a30a:	bf1c      	itt	ne
 800a30c:	1a1b      	subne	r3, r3, r0
 800a30e:	50a3      	strne	r3, [r4, r2]
 800a310:	e7af      	b.n	800a272 <_malloc_r+0x22>
 800a312:	6862      	ldr	r2, [r4, #4]
 800a314:	42a3      	cmp	r3, r4
 800a316:	bf0c      	ite	eq
 800a318:	f8c8 2000 	streq.w	r2, [r8]
 800a31c:	605a      	strne	r2, [r3, #4]
 800a31e:	e7eb      	b.n	800a2f8 <_malloc_r+0xa8>
 800a320:	4623      	mov	r3, r4
 800a322:	6864      	ldr	r4, [r4, #4]
 800a324:	e7ae      	b.n	800a284 <_malloc_r+0x34>
 800a326:	463c      	mov	r4, r7
 800a328:	687f      	ldr	r7, [r7, #4]
 800a32a:	e7b6      	b.n	800a29a <_malloc_r+0x4a>
 800a32c:	461a      	mov	r2, r3
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	42a3      	cmp	r3, r4
 800a332:	d1fb      	bne.n	800a32c <_malloc_r+0xdc>
 800a334:	2300      	movs	r3, #0
 800a336:	6053      	str	r3, [r2, #4]
 800a338:	e7de      	b.n	800a2f8 <_malloc_r+0xa8>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6033      	str	r3, [r6, #0]
 800a33e:	4630      	mov	r0, r6
 800a340:	f000 f80c 	bl	800a35c <__malloc_unlock>
 800a344:	e794      	b.n	800a270 <_malloc_r+0x20>
 800a346:	6005      	str	r5, [r0, #0]
 800a348:	e7d6      	b.n	800a2f8 <_malloc_r+0xa8>
 800a34a:	bf00      	nop
 800a34c:	2000065c 	.word	0x2000065c

0800a350 <__malloc_lock>:
 800a350:	4801      	ldr	r0, [pc, #4]	@ (800a358 <__malloc_lock+0x8>)
 800a352:	f7ff b898 	b.w	8009486 <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	20000654 	.word	0x20000654

0800a35c <__malloc_unlock>:
 800a35c:	4801      	ldr	r0, [pc, #4]	@ (800a364 <__malloc_unlock+0x8>)
 800a35e:	f7ff b893 	b.w	8009488 <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	20000654 	.word	0x20000654

0800a368 <_Balloc>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	69c6      	ldr	r6, [r0, #28]
 800a36c:	4604      	mov	r4, r0
 800a36e:	460d      	mov	r5, r1
 800a370:	b976      	cbnz	r6, 800a390 <_Balloc+0x28>
 800a372:	2010      	movs	r0, #16
 800a374:	f7ff ff42 	bl	800a1fc <malloc>
 800a378:	4602      	mov	r2, r0
 800a37a:	61e0      	str	r0, [r4, #28]
 800a37c:	b920      	cbnz	r0, 800a388 <_Balloc+0x20>
 800a37e:	4b18      	ldr	r3, [pc, #96]	@ (800a3e0 <_Balloc+0x78>)
 800a380:	4818      	ldr	r0, [pc, #96]	@ (800a3e4 <_Balloc+0x7c>)
 800a382:	216b      	movs	r1, #107	@ 0x6b
 800a384:	f001 ff2c 	bl	800c1e0 <__assert_func>
 800a388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a38c:	6006      	str	r6, [r0, #0]
 800a38e:	60c6      	str	r6, [r0, #12]
 800a390:	69e6      	ldr	r6, [r4, #28]
 800a392:	68f3      	ldr	r3, [r6, #12]
 800a394:	b183      	cbz	r3, 800a3b8 <_Balloc+0x50>
 800a396:	69e3      	ldr	r3, [r4, #28]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a39e:	b9b8      	cbnz	r0, 800a3d0 <_Balloc+0x68>
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3a6:	1d72      	adds	r2, r6, #5
 800a3a8:	0092      	lsls	r2, r2, #2
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f001 ff36 	bl	800c21c <_calloc_r>
 800a3b0:	b160      	cbz	r0, 800a3cc <_Balloc+0x64>
 800a3b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3b6:	e00e      	b.n	800a3d6 <_Balloc+0x6e>
 800a3b8:	2221      	movs	r2, #33	@ 0x21
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f001 ff2d 	bl	800c21c <_calloc_r>
 800a3c2:	69e3      	ldr	r3, [r4, #28]
 800a3c4:	60f0      	str	r0, [r6, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1e4      	bne.n	800a396 <_Balloc+0x2e>
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}
 800a3d0:	6802      	ldr	r2, [r0, #0]
 800a3d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3dc:	e7f7      	b.n	800a3ce <_Balloc+0x66>
 800a3de:	bf00      	nop
 800a3e0:	0800cdae 	.word	0x0800cdae
 800a3e4:	0800ce2e 	.word	0x0800ce2e

0800a3e8 <_Bfree>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	69c6      	ldr	r6, [r0, #28]
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	b976      	cbnz	r6, 800a410 <_Bfree+0x28>
 800a3f2:	2010      	movs	r0, #16
 800a3f4:	f7ff ff02 	bl	800a1fc <malloc>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	61e8      	str	r0, [r5, #28]
 800a3fc:	b920      	cbnz	r0, 800a408 <_Bfree+0x20>
 800a3fe:	4b09      	ldr	r3, [pc, #36]	@ (800a424 <_Bfree+0x3c>)
 800a400:	4809      	ldr	r0, [pc, #36]	@ (800a428 <_Bfree+0x40>)
 800a402:	218f      	movs	r1, #143	@ 0x8f
 800a404:	f001 feec 	bl	800c1e0 <__assert_func>
 800a408:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a40c:	6006      	str	r6, [r0, #0]
 800a40e:	60c6      	str	r6, [r0, #12]
 800a410:	b13c      	cbz	r4, 800a422 <_Bfree+0x3a>
 800a412:	69eb      	ldr	r3, [r5, #28]
 800a414:	6862      	ldr	r2, [r4, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a41c:	6021      	str	r1, [r4, #0]
 800a41e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	0800cdae 	.word	0x0800cdae
 800a428:	0800ce2e 	.word	0x0800ce2e

0800a42c <__multadd>:
 800a42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a430:	690d      	ldr	r5, [r1, #16]
 800a432:	4607      	mov	r7, r0
 800a434:	460c      	mov	r4, r1
 800a436:	461e      	mov	r6, r3
 800a438:	f101 0c14 	add.w	ip, r1, #20
 800a43c:	2000      	movs	r0, #0
 800a43e:	f8dc 3000 	ldr.w	r3, [ip]
 800a442:	b299      	uxth	r1, r3
 800a444:	fb02 6101 	mla	r1, r2, r1, r6
 800a448:	0c1e      	lsrs	r6, r3, #16
 800a44a:	0c0b      	lsrs	r3, r1, #16
 800a44c:	fb02 3306 	mla	r3, r2, r6, r3
 800a450:	b289      	uxth	r1, r1
 800a452:	3001      	adds	r0, #1
 800a454:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a458:	4285      	cmp	r5, r0
 800a45a:	f84c 1b04 	str.w	r1, [ip], #4
 800a45e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a462:	dcec      	bgt.n	800a43e <__multadd+0x12>
 800a464:	b30e      	cbz	r6, 800a4aa <__multadd+0x7e>
 800a466:	68a3      	ldr	r3, [r4, #8]
 800a468:	42ab      	cmp	r3, r5
 800a46a:	dc19      	bgt.n	800a4a0 <__multadd+0x74>
 800a46c:	6861      	ldr	r1, [r4, #4]
 800a46e:	4638      	mov	r0, r7
 800a470:	3101      	adds	r1, #1
 800a472:	f7ff ff79 	bl	800a368 <_Balloc>
 800a476:	4680      	mov	r8, r0
 800a478:	b928      	cbnz	r0, 800a486 <__multadd+0x5a>
 800a47a:	4602      	mov	r2, r0
 800a47c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4b0 <__multadd+0x84>)
 800a47e:	480d      	ldr	r0, [pc, #52]	@ (800a4b4 <__multadd+0x88>)
 800a480:	21ba      	movs	r1, #186	@ 0xba
 800a482:	f001 fead 	bl	800c1e0 <__assert_func>
 800a486:	6922      	ldr	r2, [r4, #16]
 800a488:	3202      	adds	r2, #2
 800a48a:	f104 010c 	add.w	r1, r4, #12
 800a48e:	0092      	lsls	r2, r2, #2
 800a490:	300c      	adds	r0, #12
 800a492:	f7fe fffa 	bl	800948a <memcpy>
 800a496:	4621      	mov	r1, r4
 800a498:	4638      	mov	r0, r7
 800a49a:	f7ff ffa5 	bl	800a3e8 <_Bfree>
 800a49e:	4644      	mov	r4, r8
 800a4a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	615e      	str	r6, [r3, #20]
 800a4a8:	6125      	str	r5, [r4, #16]
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	0800ce1d 	.word	0x0800ce1d
 800a4b4:	0800ce2e 	.word	0x0800ce2e

0800a4b8 <__s2b>:
 800a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	4615      	mov	r5, r2
 800a4c0:	461f      	mov	r7, r3
 800a4c2:	2209      	movs	r2, #9
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	db09      	blt.n	800a4e8 <__s2b+0x30>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff ff47 	bl	800a368 <_Balloc>
 800a4da:	b940      	cbnz	r0, 800a4ee <__s2b+0x36>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	4b19      	ldr	r3, [pc, #100]	@ (800a544 <__s2b+0x8c>)
 800a4e0:	4819      	ldr	r0, [pc, #100]	@ (800a548 <__s2b+0x90>)
 800a4e2:	21d3      	movs	r1, #211	@ 0xd3
 800a4e4:	f001 fe7c 	bl	800c1e0 <__assert_func>
 800a4e8:	0052      	lsls	r2, r2, #1
 800a4ea:	3101      	adds	r1, #1
 800a4ec:	e7f0      	b.n	800a4d0 <__s2b+0x18>
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	6143      	str	r3, [r0, #20]
 800a4f2:	2d09      	cmp	r5, #9
 800a4f4:	f04f 0301 	mov.w	r3, #1
 800a4f8:	6103      	str	r3, [r0, #16]
 800a4fa:	dd16      	ble.n	800a52a <__s2b+0x72>
 800a4fc:	f104 0909 	add.w	r9, r4, #9
 800a500:	46c8      	mov	r8, r9
 800a502:	442c      	add	r4, r5
 800a504:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a508:	4601      	mov	r1, r0
 800a50a:	3b30      	subs	r3, #48	@ 0x30
 800a50c:	220a      	movs	r2, #10
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff ff8c 	bl	800a42c <__multadd>
 800a514:	45a0      	cmp	r8, r4
 800a516:	d1f5      	bne.n	800a504 <__s2b+0x4c>
 800a518:	f1a5 0408 	sub.w	r4, r5, #8
 800a51c:	444c      	add	r4, r9
 800a51e:	1b2d      	subs	r5, r5, r4
 800a520:	1963      	adds	r3, r4, r5
 800a522:	42bb      	cmp	r3, r7
 800a524:	db04      	blt.n	800a530 <__s2b+0x78>
 800a526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52a:	340a      	adds	r4, #10
 800a52c:	2509      	movs	r5, #9
 800a52e:	e7f6      	b.n	800a51e <__s2b+0x66>
 800a530:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a534:	4601      	mov	r1, r0
 800a536:	3b30      	subs	r3, #48	@ 0x30
 800a538:	220a      	movs	r2, #10
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ff76 	bl	800a42c <__multadd>
 800a540:	e7ee      	b.n	800a520 <__s2b+0x68>
 800a542:	bf00      	nop
 800a544:	0800ce1d 	.word	0x0800ce1d
 800a548:	0800ce2e 	.word	0x0800ce2e

0800a54c <__hi0bits>:
 800a54c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a550:	4603      	mov	r3, r0
 800a552:	bf36      	itet	cc
 800a554:	0403      	lslcc	r3, r0, #16
 800a556:	2000      	movcs	r0, #0
 800a558:	2010      	movcc	r0, #16
 800a55a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a55e:	bf3c      	itt	cc
 800a560:	021b      	lslcc	r3, r3, #8
 800a562:	3008      	addcc	r0, #8
 800a564:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a568:	bf3c      	itt	cc
 800a56a:	011b      	lslcc	r3, r3, #4
 800a56c:	3004      	addcc	r0, #4
 800a56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a572:	bf3c      	itt	cc
 800a574:	009b      	lslcc	r3, r3, #2
 800a576:	3002      	addcc	r0, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	db05      	blt.n	800a588 <__hi0bits+0x3c>
 800a57c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a580:	f100 0001 	add.w	r0, r0, #1
 800a584:	bf08      	it	eq
 800a586:	2020      	moveq	r0, #32
 800a588:	4770      	bx	lr

0800a58a <__lo0bits>:
 800a58a:	6803      	ldr	r3, [r0, #0]
 800a58c:	4602      	mov	r2, r0
 800a58e:	f013 0007 	ands.w	r0, r3, #7
 800a592:	d00b      	beq.n	800a5ac <__lo0bits+0x22>
 800a594:	07d9      	lsls	r1, r3, #31
 800a596:	d421      	bmi.n	800a5dc <__lo0bits+0x52>
 800a598:	0798      	lsls	r0, r3, #30
 800a59a:	bf49      	itett	mi
 800a59c:	085b      	lsrmi	r3, r3, #1
 800a59e:	089b      	lsrpl	r3, r3, #2
 800a5a0:	2001      	movmi	r0, #1
 800a5a2:	6013      	strmi	r3, [r2, #0]
 800a5a4:	bf5c      	itt	pl
 800a5a6:	6013      	strpl	r3, [r2, #0]
 800a5a8:	2002      	movpl	r0, #2
 800a5aa:	4770      	bx	lr
 800a5ac:	b299      	uxth	r1, r3
 800a5ae:	b909      	cbnz	r1, 800a5b4 <__lo0bits+0x2a>
 800a5b0:	0c1b      	lsrs	r3, r3, #16
 800a5b2:	2010      	movs	r0, #16
 800a5b4:	b2d9      	uxtb	r1, r3
 800a5b6:	b909      	cbnz	r1, 800a5bc <__lo0bits+0x32>
 800a5b8:	3008      	adds	r0, #8
 800a5ba:	0a1b      	lsrs	r3, r3, #8
 800a5bc:	0719      	lsls	r1, r3, #28
 800a5be:	bf04      	itt	eq
 800a5c0:	091b      	lsreq	r3, r3, #4
 800a5c2:	3004      	addeq	r0, #4
 800a5c4:	0799      	lsls	r1, r3, #30
 800a5c6:	bf04      	itt	eq
 800a5c8:	089b      	lsreq	r3, r3, #2
 800a5ca:	3002      	addeq	r0, #2
 800a5cc:	07d9      	lsls	r1, r3, #31
 800a5ce:	d403      	bmi.n	800a5d8 <__lo0bits+0x4e>
 800a5d0:	085b      	lsrs	r3, r3, #1
 800a5d2:	f100 0001 	add.w	r0, r0, #1
 800a5d6:	d003      	beq.n	800a5e0 <__lo0bits+0x56>
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	4770      	bx	lr
 800a5dc:	2000      	movs	r0, #0
 800a5de:	4770      	bx	lr
 800a5e0:	2020      	movs	r0, #32
 800a5e2:	4770      	bx	lr

0800a5e4 <__i2b>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	f7ff febd 	bl	800a368 <_Balloc>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	b928      	cbnz	r0, 800a5fe <__i2b+0x1a>
 800a5f2:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <__i2b+0x24>)
 800a5f4:	4805      	ldr	r0, [pc, #20]	@ (800a60c <__i2b+0x28>)
 800a5f6:	f240 1145 	movw	r1, #325	@ 0x145
 800a5fa:	f001 fdf1 	bl	800c1e0 <__assert_func>
 800a5fe:	2301      	movs	r3, #1
 800a600:	6144      	str	r4, [r0, #20]
 800a602:	6103      	str	r3, [r0, #16]
 800a604:	bd10      	pop	{r4, pc}
 800a606:	bf00      	nop
 800a608:	0800ce1d 	.word	0x0800ce1d
 800a60c:	0800ce2e 	.word	0x0800ce2e

0800a610 <__multiply>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	4617      	mov	r7, r2
 800a616:	690a      	ldr	r2, [r1, #16]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	bfa8      	it	ge
 800a61e:	463b      	movge	r3, r7
 800a620:	4689      	mov	r9, r1
 800a622:	bfa4      	itt	ge
 800a624:	460f      	movge	r7, r1
 800a626:	4699      	movge	r9, r3
 800a628:	693d      	ldr	r5, [r7, #16]
 800a62a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	eb05 060a 	add.w	r6, r5, sl
 800a636:	42b3      	cmp	r3, r6
 800a638:	b085      	sub	sp, #20
 800a63a:	bfb8      	it	lt
 800a63c:	3101      	addlt	r1, #1
 800a63e:	f7ff fe93 	bl	800a368 <_Balloc>
 800a642:	b930      	cbnz	r0, 800a652 <__multiply+0x42>
 800a644:	4602      	mov	r2, r0
 800a646:	4b41      	ldr	r3, [pc, #260]	@ (800a74c <__multiply+0x13c>)
 800a648:	4841      	ldr	r0, [pc, #260]	@ (800a750 <__multiply+0x140>)
 800a64a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a64e:	f001 fdc7 	bl	800c1e0 <__assert_func>
 800a652:	f100 0414 	add.w	r4, r0, #20
 800a656:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a65a:	4623      	mov	r3, r4
 800a65c:	2200      	movs	r2, #0
 800a65e:	4573      	cmp	r3, lr
 800a660:	d320      	bcc.n	800a6a4 <__multiply+0x94>
 800a662:	f107 0814 	add.w	r8, r7, #20
 800a666:	f109 0114 	add.w	r1, r9, #20
 800a66a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a66e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a672:	9302      	str	r3, [sp, #8]
 800a674:	1beb      	subs	r3, r5, r7
 800a676:	3b15      	subs	r3, #21
 800a678:	f023 0303 	bic.w	r3, r3, #3
 800a67c:	3304      	adds	r3, #4
 800a67e:	3715      	adds	r7, #21
 800a680:	42bd      	cmp	r5, r7
 800a682:	bf38      	it	cc
 800a684:	2304      	movcc	r3, #4
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	9b02      	ldr	r3, [sp, #8]
 800a68a:	9103      	str	r1, [sp, #12]
 800a68c:	428b      	cmp	r3, r1
 800a68e:	d80c      	bhi.n	800a6aa <__multiply+0x9a>
 800a690:	2e00      	cmp	r6, #0
 800a692:	dd03      	ble.n	800a69c <__multiply+0x8c>
 800a694:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d055      	beq.n	800a748 <__multiply+0x138>
 800a69c:	6106      	str	r6, [r0, #16]
 800a69e:	b005      	add	sp, #20
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	f843 2b04 	str.w	r2, [r3], #4
 800a6a8:	e7d9      	b.n	800a65e <__multiply+0x4e>
 800a6aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800a6ae:	f1ba 0f00 	cmp.w	sl, #0
 800a6b2:	d01f      	beq.n	800a6f4 <__multiply+0xe4>
 800a6b4:	46c4      	mov	ip, r8
 800a6b6:	46a1      	mov	r9, r4
 800a6b8:	2700      	movs	r7, #0
 800a6ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a6be:	f8d9 3000 	ldr.w	r3, [r9]
 800a6c2:	fa1f fb82 	uxth.w	fp, r2
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6cc:	443b      	add	r3, r7
 800a6ce:	f8d9 7000 	ldr.w	r7, [r9]
 800a6d2:	0c12      	lsrs	r2, r2, #16
 800a6d4:	0c3f      	lsrs	r7, r7, #16
 800a6d6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a6da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6e4:	4565      	cmp	r5, ip
 800a6e6:	f849 3b04 	str.w	r3, [r9], #4
 800a6ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6ee:	d8e4      	bhi.n	800a6ba <__multiply+0xaa>
 800a6f0:	9b01      	ldr	r3, [sp, #4]
 800a6f2:	50e7      	str	r7, [r4, r3]
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6fa:	3104      	adds	r1, #4
 800a6fc:	f1b9 0f00 	cmp.w	r9, #0
 800a700:	d020      	beq.n	800a744 <__multiply+0x134>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	4647      	mov	r7, r8
 800a706:	46a4      	mov	ip, r4
 800a708:	f04f 0a00 	mov.w	sl, #0
 800a70c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a710:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a714:	fb09 220b 	mla	r2, r9, fp, r2
 800a718:	4452      	add	r2, sl
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a720:	f84c 3b04 	str.w	r3, [ip], #4
 800a724:	f857 3b04 	ldr.w	r3, [r7], #4
 800a728:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a72c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a730:	fb09 330a 	mla	r3, r9, sl, r3
 800a734:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a738:	42bd      	cmp	r5, r7
 800a73a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a73e:	d8e5      	bhi.n	800a70c <__multiply+0xfc>
 800a740:	9a01      	ldr	r2, [sp, #4]
 800a742:	50a3      	str	r3, [r4, r2]
 800a744:	3404      	adds	r4, #4
 800a746:	e79f      	b.n	800a688 <__multiply+0x78>
 800a748:	3e01      	subs	r6, #1
 800a74a:	e7a1      	b.n	800a690 <__multiply+0x80>
 800a74c:	0800ce1d 	.word	0x0800ce1d
 800a750:	0800ce2e 	.word	0x0800ce2e

0800a754 <__pow5mult>:
 800a754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a758:	4615      	mov	r5, r2
 800a75a:	f012 0203 	ands.w	r2, r2, #3
 800a75e:	4607      	mov	r7, r0
 800a760:	460e      	mov	r6, r1
 800a762:	d007      	beq.n	800a774 <__pow5mult+0x20>
 800a764:	4c25      	ldr	r4, [pc, #148]	@ (800a7fc <__pow5mult+0xa8>)
 800a766:	3a01      	subs	r2, #1
 800a768:	2300      	movs	r3, #0
 800a76a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a76e:	f7ff fe5d 	bl	800a42c <__multadd>
 800a772:	4606      	mov	r6, r0
 800a774:	10ad      	asrs	r5, r5, #2
 800a776:	d03d      	beq.n	800a7f4 <__pow5mult+0xa0>
 800a778:	69fc      	ldr	r4, [r7, #28]
 800a77a:	b97c      	cbnz	r4, 800a79c <__pow5mult+0x48>
 800a77c:	2010      	movs	r0, #16
 800a77e:	f7ff fd3d 	bl	800a1fc <malloc>
 800a782:	4602      	mov	r2, r0
 800a784:	61f8      	str	r0, [r7, #28]
 800a786:	b928      	cbnz	r0, 800a794 <__pow5mult+0x40>
 800a788:	4b1d      	ldr	r3, [pc, #116]	@ (800a800 <__pow5mult+0xac>)
 800a78a:	481e      	ldr	r0, [pc, #120]	@ (800a804 <__pow5mult+0xb0>)
 800a78c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a790:	f001 fd26 	bl	800c1e0 <__assert_func>
 800a794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a798:	6004      	str	r4, [r0, #0]
 800a79a:	60c4      	str	r4, [r0, #12]
 800a79c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a7a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7a4:	b94c      	cbnz	r4, 800a7ba <__pow5mult+0x66>
 800a7a6:	f240 2171 	movw	r1, #625	@ 0x271
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7ff ff1a 	bl	800a5e4 <__i2b>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	6003      	str	r3, [r0, #0]
 800a7ba:	f04f 0900 	mov.w	r9, #0
 800a7be:	07eb      	lsls	r3, r5, #31
 800a7c0:	d50a      	bpl.n	800a7d8 <__pow5mult+0x84>
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4622      	mov	r2, r4
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	f7ff ff22 	bl	800a610 <__multiply>
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff fe09 	bl	800a3e8 <_Bfree>
 800a7d6:	4646      	mov	r6, r8
 800a7d8:	106d      	asrs	r5, r5, #1
 800a7da:	d00b      	beq.n	800a7f4 <__pow5mult+0xa0>
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	b938      	cbnz	r0, 800a7f0 <__pow5mult+0x9c>
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7ff ff13 	bl	800a610 <__multiply>
 800a7ea:	6020      	str	r0, [r4, #0]
 800a7ec:	f8c0 9000 	str.w	r9, [r0]
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	e7e4      	b.n	800a7be <__pow5mult+0x6a>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fa:	bf00      	nop
 800a7fc:	0800cf40 	.word	0x0800cf40
 800a800:	0800cdae 	.word	0x0800cdae
 800a804:	0800ce2e 	.word	0x0800ce2e

0800a808 <__lshift>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	460c      	mov	r4, r1
 800a80e:	6849      	ldr	r1, [r1, #4]
 800a810:	6923      	ldr	r3, [r4, #16]
 800a812:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	4607      	mov	r7, r0
 800a81a:	4691      	mov	r9, r2
 800a81c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a820:	f108 0601 	add.w	r6, r8, #1
 800a824:	42b3      	cmp	r3, r6
 800a826:	db0b      	blt.n	800a840 <__lshift+0x38>
 800a828:	4638      	mov	r0, r7
 800a82a:	f7ff fd9d 	bl	800a368 <_Balloc>
 800a82e:	4605      	mov	r5, r0
 800a830:	b948      	cbnz	r0, 800a846 <__lshift+0x3e>
 800a832:	4602      	mov	r2, r0
 800a834:	4b28      	ldr	r3, [pc, #160]	@ (800a8d8 <__lshift+0xd0>)
 800a836:	4829      	ldr	r0, [pc, #164]	@ (800a8dc <__lshift+0xd4>)
 800a838:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a83c:	f001 fcd0 	bl	800c1e0 <__assert_func>
 800a840:	3101      	adds	r1, #1
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	e7ee      	b.n	800a824 <__lshift+0x1c>
 800a846:	2300      	movs	r3, #0
 800a848:	f100 0114 	add.w	r1, r0, #20
 800a84c:	f100 0210 	add.w	r2, r0, #16
 800a850:	4618      	mov	r0, r3
 800a852:	4553      	cmp	r3, sl
 800a854:	db33      	blt.n	800a8be <__lshift+0xb6>
 800a856:	6920      	ldr	r0, [r4, #16]
 800a858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a85c:	f104 0314 	add.w	r3, r4, #20
 800a860:	f019 091f 	ands.w	r9, r9, #31
 800a864:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a868:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a86c:	d02b      	beq.n	800a8c6 <__lshift+0xbe>
 800a86e:	f1c9 0e20 	rsb	lr, r9, #32
 800a872:	468a      	mov	sl, r1
 800a874:	2200      	movs	r2, #0
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	fa00 f009 	lsl.w	r0, r0, r9
 800a87c:	4310      	orrs	r0, r2
 800a87e:	f84a 0b04 	str.w	r0, [sl], #4
 800a882:	f853 2b04 	ldr.w	r2, [r3], #4
 800a886:	459c      	cmp	ip, r3
 800a888:	fa22 f20e 	lsr.w	r2, r2, lr
 800a88c:	d8f3      	bhi.n	800a876 <__lshift+0x6e>
 800a88e:	ebac 0304 	sub.w	r3, ip, r4
 800a892:	3b15      	subs	r3, #21
 800a894:	f023 0303 	bic.w	r3, r3, #3
 800a898:	3304      	adds	r3, #4
 800a89a:	f104 0015 	add.w	r0, r4, #21
 800a89e:	4560      	cmp	r0, ip
 800a8a0:	bf88      	it	hi
 800a8a2:	2304      	movhi	r3, #4
 800a8a4:	50ca      	str	r2, [r1, r3]
 800a8a6:	b10a      	cbz	r2, 800a8ac <__lshift+0xa4>
 800a8a8:	f108 0602 	add.w	r6, r8, #2
 800a8ac:	3e01      	subs	r6, #1
 800a8ae:	4638      	mov	r0, r7
 800a8b0:	612e      	str	r6, [r5, #16]
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	f7ff fd98 	bl	800a3e8 <_Bfree>
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	e7c5      	b.n	800a852 <__lshift+0x4a>
 800a8c6:	3904      	subs	r1, #4
 800a8c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8d0:	459c      	cmp	ip, r3
 800a8d2:	d8f9      	bhi.n	800a8c8 <__lshift+0xc0>
 800a8d4:	e7ea      	b.n	800a8ac <__lshift+0xa4>
 800a8d6:	bf00      	nop
 800a8d8:	0800ce1d 	.word	0x0800ce1d
 800a8dc:	0800ce2e 	.word	0x0800ce2e

0800a8e0 <__mcmp>:
 800a8e0:	690a      	ldr	r2, [r1, #16]
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6900      	ldr	r0, [r0, #16]
 800a8e6:	1a80      	subs	r0, r0, r2
 800a8e8:	b530      	push	{r4, r5, lr}
 800a8ea:	d10e      	bne.n	800a90a <__mcmp+0x2a>
 800a8ec:	3314      	adds	r3, #20
 800a8ee:	3114      	adds	r1, #20
 800a8f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a900:	4295      	cmp	r5, r2
 800a902:	d003      	beq.n	800a90c <__mcmp+0x2c>
 800a904:	d205      	bcs.n	800a912 <__mcmp+0x32>
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	bd30      	pop	{r4, r5, pc}
 800a90c:	42a3      	cmp	r3, r4
 800a90e:	d3f3      	bcc.n	800a8f8 <__mcmp+0x18>
 800a910:	e7fb      	b.n	800a90a <__mcmp+0x2a>
 800a912:	2001      	movs	r0, #1
 800a914:	e7f9      	b.n	800a90a <__mcmp+0x2a>
	...

0800a918 <__mdiff>:
 800a918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	4689      	mov	r9, r1
 800a91e:	4606      	mov	r6, r0
 800a920:	4611      	mov	r1, r2
 800a922:	4648      	mov	r0, r9
 800a924:	4614      	mov	r4, r2
 800a926:	f7ff ffdb 	bl	800a8e0 <__mcmp>
 800a92a:	1e05      	subs	r5, r0, #0
 800a92c:	d112      	bne.n	800a954 <__mdiff+0x3c>
 800a92e:	4629      	mov	r1, r5
 800a930:	4630      	mov	r0, r6
 800a932:	f7ff fd19 	bl	800a368 <_Balloc>
 800a936:	4602      	mov	r2, r0
 800a938:	b928      	cbnz	r0, 800a946 <__mdiff+0x2e>
 800a93a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa38 <__mdiff+0x120>)
 800a93c:	f240 2137 	movw	r1, #567	@ 0x237
 800a940:	483e      	ldr	r0, [pc, #248]	@ (800aa3c <__mdiff+0x124>)
 800a942:	f001 fc4d 	bl	800c1e0 <__assert_func>
 800a946:	2301      	movs	r3, #1
 800a948:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a94c:	4610      	mov	r0, r2
 800a94e:	b003      	add	sp, #12
 800a950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a954:	bfbc      	itt	lt
 800a956:	464b      	movlt	r3, r9
 800a958:	46a1      	movlt	r9, r4
 800a95a:	4630      	mov	r0, r6
 800a95c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a960:	bfba      	itte	lt
 800a962:	461c      	movlt	r4, r3
 800a964:	2501      	movlt	r5, #1
 800a966:	2500      	movge	r5, #0
 800a968:	f7ff fcfe 	bl	800a368 <_Balloc>
 800a96c:	4602      	mov	r2, r0
 800a96e:	b918      	cbnz	r0, 800a978 <__mdiff+0x60>
 800a970:	4b31      	ldr	r3, [pc, #196]	@ (800aa38 <__mdiff+0x120>)
 800a972:	f240 2145 	movw	r1, #581	@ 0x245
 800a976:	e7e3      	b.n	800a940 <__mdiff+0x28>
 800a978:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a97c:	6926      	ldr	r6, [r4, #16]
 800a97e:	60c5      	str	r5, [r0, #12]
 800a980:	f109 0310 	add.w	r3, r9, #16
 800a984:	f109 0514 	add.w	r5, r9, #20
 800a988:	f104 0e14 	add.w	lr, r4, #20
 800a98c:	f100 0b14 	add.w	fp, r0, #20
 800a990:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a994:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	46d9      	mov	r9, fp
 800a99c:	f04f 0c00 	mov.w	ip, #0
 800a9a0:	9b01      	ldr	r3, [sp, #4]
 800a9a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a9a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a9aa:	9301      	str	r3, [sp, #4]
 800a9ac:	fa1f f38a 	uxth.w	r3, sl
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	b283      	uxth	r3, r0
 800a9b4:	1acb      	subs	r3, r1, r3
 800a9b6:	0c00      	lsrs	r0, r0, #16
 800a9b8:	4463      	add	r3, ip
 800a9ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a9be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9c8:	4576      	cmp	r6, lr
 800a9ca:	f849 3b04 	str.w	r3, [r9], #4
 800a9ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9d2:	d8e5      	bhi.n	800a9a0 <__mdiff+0x88>
 800a9d4:	1b33      	subs	r3, r6, r4
 800a9d6:	3b15      	subs	r3, #21
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	3415      	adds	r4, #21
 800a9de:	3304      	adds	r3, #4
 800a9e0:	42a6      	cmp	r6, r4
 800a9e2:	bf38      	it	cc
 800a9e4:	2304      	movcc	r3, #4
 800a9e6:	441d      	add	r5, r3
 800a9e8:	445b      	add	r3, fp
 800a9ea:	461e      	mov	r6, r3
 800a9ec:	462c      	mov	r4, r5
 800a9ee:	4544      	cmp	r4, r8
 800a9f0:	d30e      	bcc.n	800aa10 <__mdiff+0xf8>
 800a9f2:	f108 0103 	add.w	r1, r8, #3
 800a9f6:	1b49      	subs	r1, r1, r5
 800a9f8:	f021 0103 	bic.w	r1, r1, #3
 800a9fc:	3d03      	subs	r5, #3
 800a9fe:	45a8      	cmp	r8, r5
 800aa00:	bf38      	it	cc
 800aa02:	2100      	movcc	r1, #0
 800aa04:	440b      	add	r3, r1
 800aa06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa0a:	b191      	cbz	r1, 800aa32 <__mdiff+0x11a>
 800aa0c:	6117      	str	r7, [r2, #16]
 800aa0e:	e79d      	b.n	800a94c <__mdiff+0x34>
 800aa10:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa14:	46e6      	mov	lr, ip
 800aa16:	0c08      	lsrs	r0, r1, #16
 800aa18:	fa1c fc81 	uxtah	ip, ip, r1
 800aa1c:	4471      	add	r1, lr
 800aa1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa22:	b289      	uxth	r1, r1
 800aa24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa28:	f846 1b04 	str.w	r1, [r6], #4
 800aa2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa30:	e7dd      	b.n	800a9ee <__mdiff+0xd6>
 800aa32:	3f01      	subs	r7, #1
 800aa34:	e7e7      	b.n	800aa06 <__mdiff+0xee>
 800aa36:	bf00      	nop
 800aa38:	0800ce1d 	.word	0x0800ce1d
 800aa3c:	0800ce2e 	.word	0x0800ce2e

0800aa40 <__ulp>:
 800aa40:	b082      	sub	sp, #8
 800aa42:	ed8d 0b00 	vstr	d0, [sp]
 800aa46:	9a01      	ldr	r2, [sp, #4]
 800aa48:	4b0f      	ldr	r3, [pc, #60]	@ (800aa88 <__ulp+0x48>)
 800aa4a:	4013      	ands	r3, r2
 800aa4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dc08      	bgt.n	800aa66 <__ulp+0x26>
 800aa54:	425b      	negs	r3, r3
 800aa56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aa5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aa5e:	da04      	bge.n	800aa6a <__ulp+0x2a>
 800aa60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aa64:	4113      	asrs	r3, r2
 800aa66:	2200      	movs	r2, #0
 800aa68:	e008      	b.n	800aa7c <__ulp+0x3c>
 800aa6a:	f1a2 0314 	sub.w	r3, r2, #20
 800aa6e:	2b1e      	cmp	r3, #30
 800aa70:	bfda      	itte	le
 800aa72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aa76:	40da      	lsrle	r2, r3
 800aa78:	2201      	movgt	r2, #1
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4610      	mov	r0, r2
 800aa80:	ec41 0b10 	vmov	d0, r0, r1
 800aa84:	b002      	add	sp, #8
 800aa86:	4770      	bx	lr
 800aa88:	7ff00000 	.word	0x7ff00000

0800aa8c <__b2d>:
 800aa8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa90:	6906      	ldr	r6, [r0, #16]
 800aa92:	f100 0814 	add.w	r8, r0, #20
 800aa96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa9a:	1f37      	subs	r7, r6, #4
 800aa9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7ff fd53 	bl	800a54c <__hi0bits>
 800aaa6:	f1c0 0320 	rsb	r3, r0, #32
 800aaaa:	280a      	cmp	r0, #10
 800aaac:	600b      	str	r3, [r1, #0]
 800aaae:	491b      	ldr	r1, [pc, #108]	@ (800ab1c <__b2d+0x90>)
 800aab0:	dc15      	bgt.n	800aade <__b2d+0x52>
 800aab2:	f1c0 0c0b 	rsb	ip, r0, #11
 800aab6:	fa22 f30c 	lsr.w	r3, r2, ip
 800aaba:	45b8      	cmp	r8, r7
 800aabc:	ea43 0501 	orr.w	r5, r3, r1
 800aac0:	bf34      	ite	cc
 800aac2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aac6:	2300      	movcs	r3, #0
 800aac8:	3015      	adds	r0, #21
 800aaca:	fa02 f000 	lsl.w	r0, r2, r0
 800aace:	fa23 f30c 	lsr.w	r3, r3, ip
 800aad2:	4303      	orrs	r3, r0
 800aad4:	461c      	mov	r4, r3
 800aad6:	ec45 4b10 	vmov	d0, r4, r5
 800aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aade:	45b8      	cmp	r8, r7
 800aae0:	bf3a      	itte	cc
 800aae2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aae6:	f1a6 0708 	subcc.w	r7, r6, #8
 800aaea:	2300      	movcs	r3, #0
 800aaec:	380b      	subs	r0, #11
 800aaee:	d012      	beq.n	800ab16 <__b2d+0x8a>
 800aaf0:	f1c0 0120 	rsb	r1, r0, #32
 800aaf4:	fa23 f401 	lsr.w	r4, r3, r1
 800aaf8:	4082      	lsls	r2, r0
 800aafa:	4322      	orrs	r2, r4
 800aafc:	4547      	cmp	r7, r8
 800aafe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab02:	bf8c      	ite	hi
 800ab04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab08:	2200      	movls	r2, #0
 800ab0a:	4083      	lsls	r3, r0
 800ab0c:	40ca      	lsrs	r2, r1
 800ab0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab12:	4313      	orrs	r3, r2
 800ab14:	e7de      	b.n	800aad4 <__b2d+0x48>
 800ab16:	ea42 0501 	orr.w	r5, r2, r1
 800ab1a:	e7db      	b.n	800aad4 <__b2d+0x48>
 800ab1c:	3ff00000 	.word	0x3ff00000

0800ab20 <__d2b>:
 800ab20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	460f      	mov	r7, r1
 800ab26:	2101      	movs	r1, #1
 800ab28:	ec59 8b10 	vmov	r8, r9, d0
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	f7ff fc1b 	bl	800a368 <_Balloc>
 800ab32:	4604      	mov	r4, r0
 800ab34:	b930      	cbnz	r0, 800ab44 <__d2b+0x24>
 800ab36:	4602      	mov	r2, r0
 800ab38:	4b23      	ldr	r3, [pc, #140]	@ (800abc8 <__d2b+0xa8>)
 800ab3a:	4824      	ldr	r0, [pc, #144]	@ (800abcc <__d2b+0xac>)
 800ab3c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab40:	f001 fb4e 	bl	800c1e0 <__assert_func>
 800ab44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab4c:	b10d      	cbz	r5, 800ab52 <__d2b+0x32>
 800ab4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	f1b8 0300 	subs.w	r3, r8, #0
 800ab58:	d023      	beq.n	800aba2 <__d2b+0x82>
 800ab5a:	4668      	mov	r0, sp
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f7ff fd14 	bl	800a58a <__lo0bits>
 800ab62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ab66:	b1d0      	cbz	r0, 800ab9e <__d2b+0x7e>
 800ab68:	f1c0 0320 	rsb	r3, r0, #32
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	430b      	orrs	r3, r1
 800ab72:	40c2      	lsrs	r2, r0
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	9201      	str	r2, [sp, #4]
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	61a3      	str	r3, [r4, #24]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf0c      	ite	eq
 800ab80:	2201      	moveq	r2, #1
 800ab82:	2202      	movne	r2, #2
 800ab84:	6122      	str	r2, [r4, #16]
 800ab86:	b1a5      	cbz	r5, 800abb2 <__d2b+0x92>
 800ab88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab8c:	4405      	add	r5, r0
 800ab8e:	603d      	str	r5, [r7, #0]
 800ab90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab94:	6030      	str	r0, [r6, #0]
 800ab96:	4620      	mov	r0, r4
 800ab98:	b003      	add	sp, #12
 800ab9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	6161      	str	r1, [r4, #20]
 800aba0:	e7ea      	b.n	800ab78 <__d2b+0x58>
 800aba2:	a801      	add	r0, sp, #4
 800aba4:	f7ff fcf1 	bl	800a58a <__lo0bits>
 800aba8:	9b01      	ldr	r3, [sp, #4]
 800abaa:	6163      	str	r3, [r4, #20]
 800abac:	3020      	adds	r0, #32
 800abae:	2201      	movs	r2, #1
 800abb0:	e7e8      	b.n	800ab84 <__d2b+0x64>
 800abb2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abb6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800abba:	6038      	str	r0, [r7, #0]
 800abbc:	6918      	ldr	r0, [r3, #16]
 800abbe:	f7ff fcc5 	bl	800a54c <__hi0bits>
 800abc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abc6:	e7e5      	b.n	800ab94 <__d2b+0x74>
 800abc8:	0800ce1d 	.word	0x0800ce1d
 800abcc:	0800ce2e 	.word	0x0800ce2e

0800abd0 <__ratio>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	b085      	sub	sp, #20
 800abd6:	e9cd 1000 	strd	r1, r0, [sp]
 800abda:	a902      	add	r1, sp, #8
 800abdc:	f7ff ff56 	bl	800aa8c <__b2d>
 800abe0:	9800      	ldr	r0, [sp, #0]
 800abe2:	a903      	add	r1, sp, #12
 800abe4:	ec55 4b10 	vmov	r4, r5, d0
 800abe8:	f7ff ff50 	bl	800aa8c <__b2d>
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	6919      	ldr	r1, [r3, #16]
 800abf0:	9b00      	ldr	r3, [sp, #0]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	1ac9      	subs	r1, r1, r3
 800abf6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	ec5b ab10 	vmov	sl, fp, d0
 800ac00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	bfce      	itee	gt
 800ac08:	462a      	movgt	r2, r5
 800ac0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac0e:	465a      	movle	r2, fp
 800ac10:	462f      	mov	r7, r5
 800ac12:	46d9      	mov	r9, fp
 800ac14:	bfcc      	ite	gt
 800ac16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac1e:	464b      	mov	r3, r9
 800ac20:	4652      	mov	r2, sl
 800ac22:	4620      	mov	r0, r4
 800ac24:	4639      	mov	r1, r7
 800ac26:	f7f5 fe11 	bl	800084c <__aeabi_ddiv>
 800ac2a:	ec41 0b10 	vmov	d0, r0, r1
 800ac2e:	b005      	add	sp, #20
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac34 <__copybits>:
 800ac34:	3901      	subs	r1, #1
 800ac36:	b570      	push	{r4, r5, r6, lr}
 800ac38:	1149      	asrs	r1, r1, #5
 800ac3a:	6914      	ldr	r4, [r2, #16]
 800ac3c:	3101      	adds	r1, #1
 800ac3e:	f102 0314 	add.w	r3, r2, #20
 800ac42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac4a:	1f05      	subs	r5, r0, #4
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d30c      	bcc.n	800ac6a <__copybits+0x36>
 800ac50:	1aa3      	subs	r3, r4, r2
 800ac52:	3b11      	subs	r3, #17
 800ac54:	f023 0303 	bic.w	r3, r3, #3
 800ac58:	3211      	adds	r2, #17
 800ac5a:	42a2      	cmp	r2, r4
 800ac5c:	bf88      	it	hi
 800ac5e:	2300      	movhi	r3, #0
 800ac60:	4418      	add	r0, r3
 800ac62:	2300      	movs	r3, #0
 800ac64:	4288      	cmp	r0, r1
 800ac66:	d305      	bcc.n	800ac74 <__copybits+0x40>
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac6e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac72:	e7eb      	b.n	800ac4c <__copybits+0x18>
 800ac74:	f840 3b04 	str.w	r3, [r0], #4
 800ac78:	e7f4      	b.n	800ac64 <__copybits+0x30>

0800ac7a <__any_on>:
 800ac7a:	f100 0214 	add.w	r2, r0, #20
 800ac7e:	6900      	ldr	r0, [r0, #16]
 800ac80:	114b      	asrs	r3, r1, #5
 800ac82:	4298      	cmp	r0, r3
 800ac84:	b510      	push	{r4, lr}
 800ac86:	db11      	blt.n	800acac <__any_on+0x32>
 800ac88:	dd0a      	ble.n	800aca0 <__any_on+0x26>
 800ac8a:	f011 011f 	ands.w	r1, r1, #31
 800ac8e:	d007      	beq.n	800aca0 <__any_on+0x26>
 800ac90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac94:	fa24 f001 	lsr.w	r0, r4, r1
 800ac98:	fa00 f101 	lsl.w	r1, r0, r1
 800ac9c:	428c      	cmp	r4, r1
 800ac9e:	d10b      	bne.n	800acb8 <__any_on+0x3e>
 800aca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d803      	bhi.n	800acb0 <__any_on+0x36>
 800aca8:	2000      	movs	r0, #0
 800acaa:	bd10      	pop	{r4, pc}
 800acac:	4603      	mov	r3, r0
 800acae:	e7f7      	b.n	800aca0 <__any_on+0x26>
 800acb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acb4:	2900      	cmp	r1, #0
 800acb6:	d0f5      	beq.n	800aca4 <__any_on+0x2a>
 800acb8:	2001      	movs	r0, #1
 800acba:	e7f6      	b.n	800acaa <__any_on+0x30>

0800acbc <sulp>:
 800acbc:	b570      	push	{r4, r5, r6, lr}
 800acbe:	4604      	mov	r4, r0
 800acc0:	460d      	mov	r5, r1
 800acc2:	ec45 4b10 	vmov	d0, r4, r5
 800acc6:	4616      	mov	r6, r2
 800acc8:	f7ff feba 	bl	800aa40 <__ulp>
 800accc:	ec51 0b10 	vmov	r0, r1, d0
 800acd0:	b17e      	cbz	r6, 800acf2 <sulp+0x36>
 800acd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acd6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acda:	2b00      	cmp	r3, #0
 800acdc:	dd09      	ble.n	800acf2 <sulp+0x36>
 800acde:	051b      	lsls	r3, r3, #20
 800ace0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ace4:	2400      	movs	r4, #0
 800ace6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800acea:	4622      	mov	r2, r4
 800acec:	462b      	mov	r3, r5
 800acee:	f7f5 fc83 	bl	80005f8 <__aeabi_dmul>
 800acf2:	ec41 0b10 	vmov	d0, r0, r1
 800acf6:	bd70      	pop	{r4, r5, r6, pc}

0800acf8 <_strtod_l>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	b09f      	sub	sp, #124	@ 0x7c
 800acfe:	460c      	mov	r4, r1
 800ad00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad02:	2200      	movs	r2, #0
 800ad04:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad06:	9005      	str	r0, [sp, #20]
 800ad08:	f04f 0a00 	mov.w	sl, #0
 800ad0c:	f04f 0b00 	mov.w	fp, #0
 800ad10:	460a      	mov	r2, r1
 800ad12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad14:	7811      	ldrb	r1, [r2, #0]
 800ad16:	292b      	cmp	r1, #43	@ 0x2b
 800ad18:	d04a      	beq.n	800adb0 <_strtod_l+0xb8>
 800ad1a:	d838      	bhi.n	800ad8e <_strtod_l+0x96>
 800ad1c:	290d      	cmp	r1, #13
 800ad1e:	d832      	bhi.n	800ad86 <_strtod_l+0x8e>
 800ad20:	2908      	cmp	r1, #8
 800ad22:	d832      	bhi.n	800ad8a <_strtod_l+0x92>
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d03b      	beq.n	800ada0 <_strtod_l+0xa8>
 800ad28:	2200      	movs	r2, #0
 800ad2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ad2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad2e:	782a      	ldrb	r2, [r5, #0]
 800ad30:	2a30      	cmp	r2, #48	@ 0x30
 800ad32:	f040 80b2 	bne.w	800ae9a <_strtod_l+0x1a2>
 800ad36:	786a      	ldrb	r2, [r5, #1]
 800ad38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad3c:	2a58      	cmp	r2, #88	@ 0x58
 800ad3e:	d16e      	bne.n	800ae1e <_strtod_l+0x126>
 800ad40:	9302      	str	r3, [sp, #8]
 800ad42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	4a8f      	ldr	r2, [pc, #572]	@ (800af88 <_strtod_l+0x290>)
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad50:	a919      	add	r1, sp, #100	@ 0x64
 800ad52:	f001 fadf 	bl	800c314 <__gethex>
 800ad56:	f010 060f 	ands.w	r6, r0, #15
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	d005      	beq.n	800ad6a <_strtod_l+0x72>
 800ad5e:	2e06      	cmp	r6, #6
 800ad60:	d128      	bne.n	800adb4 <_strtod_l+0xbc>
 800ad62:	3501      	adds	r5, #1
 800ad64:	2300      	movs	r3, #0
 800ad66:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad68:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f040 858e 	bne.w	800b88e <_strtod_l+0xb96>
 800ad72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad74:	b1cb      	cbz	r3, 800adaa <_strtod_l+0xb2>
 800ad76:	4652      	mov	r2, sl
 800ad78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad7c:	ec43 2b10 	vmov	d0, r2, r3
 800ad80:	b01f      	add	sp, #124	@ 0x7c
 800ad82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad86:	2920      	cmp	r1, #32
 800ad88:	d1ce      	bne.n	800ad28 <_strtod_l+0x30>
 800ad8a:	3201      	adds	r2, #1
 800ad8c:	e7c1      	b.n	800ad12 <_strtod_l+0x1a>
 800ad8e:	292d      	cmp	r1, #45	@ 0x2d
 800ad90:	d1ca      	bne.n	800ad28 <_strtod_l+0x30>
 800ad92:	2101      	movs	r1, #1
 800ad94:	910e      	str	r1, [sp, #56]	@ 0x38
 800ad96:	1c51      	adds	r1, r2, #1
 800ad98:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad9a:	7852      	ldrb	r2, [r2, #1]
 800ad9c:	2a00      	cmp	r2, #0
 800ad9e:	d1c5      	bne.n	800ad2c <_strtod_l+0x34>
 800ada0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ada2:	9419      	str	r4, [sp, #100]	@ 0x64
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 8570 	bne.w	800b88a <_strtod_l+0xb92>
 800adaa:	4652      	mov	r2, sl
 800adac:	465b      	mov	r3, fp
 800adae:	e7e5      	b.n	800ad7c <_strtod_l+0x84>
 800adb0:	2100      	movs	r1, #0
 800adb2:	e7ef      	b.n	800ad94 <_strtod_l+0x9c>
 800adb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800adb6:	b13a      	cbz	r2, 800adc8 <_strtod_l+0xd0>
 800adb8:	2135      	movs	r1, #53	@ 0x35
 800adba:	a81c      	add	r0, sp, #112	@ 0x70
 800adbc:	f7ff ff3a 	bl	800ac34 <__copybits>
 800adc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adc2:	9805      	ldr	r0, [sp, #20]
 800adc4:	f7ff fb10 	bl	800a3e8 <_Bfree>
 800adc8:	3e01      	subs	r6, #1
 800adca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800adcc:	2e04      	cmp	r6, #4
 800adce:	d806      	bhi.n	800adde <_strtod_l+0xe6>
 800add0:	e8df f006 	tbb	[pc, r6]
 800add4:	201d0314 	.word	0x201d0314
 800add8:	14          	.byte	0x14
 800add9:	00          	.byte	0x00
 800adda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800adde:	05e1      	lsls	r1, r4, #23
 800ade0:	bf48      	it	mi
 800ade2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ade6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adea:	0d1b      	lsrs	r3, r3, #20
 800adec:	051b      	lsls	r3, r3, #20
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1bb      	bne.n	800ad6a <_strtod_l+0x72>
 800adf2:	f7fe fb1d 	bl	8009430 <__errno>
 800adf6:	2322      	movs	r3, #34	@ 0x22
 800adf8:	6003      	str	r3, [r0, #0]
 800adfa:	e7b6      	b.n	800ad6a <_strtod_l+0x72>
 800adfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae0c:	e7e7      	b.n	800adde <_strtod_l+0xe6>
 800ae0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800af90 <_strtod_l+0x298>
 800ae12:	e7e4      	b.n	800adde <_strtod_l+0xe6>
 800ae14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae18:	f04f 3aff 	mov.w	sl, #4294967295
 800ae1c:	e7df      	b.n	800adde <_strtod_l+0xe6>
 800ae1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	2b30      	cmp	r3, #48	@ 0x30
 800ae28:	d0f9      	beq.n	800ae1e <_strtod_l+0x126>
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d09d      	beq.n	800ad6a <_strtod_l+0x72>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	2700      	movs	r7, #0
 800ae32:	9308      	str	r3, [sp, #32]
 800ae34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae36:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae38:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ae3a:	46b9      	mov	r9, r7
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae40:	7805      	ldrb	r5, [r0, #0]
 800ae42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae46:	b2d9      	uxtb	r1, r3
 800ae48:	2909      	cmp	r1, #9
 800ae4a:	d928      	bls.n	800ae9e <_strtod_l+0x1a6>
 800ae4c:	494f      	ldr	r1, [pc, #316]	@ (800af8c <_strtod_l+0x294>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	f001 f97a 	bl	800c148 <strncmp>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d032      	beq.n	800aebe <_strtod_l+0x1c6>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae5e:	464d      	mov	r5, r9
 800ae60:	4603      	mov	r3, r0
 800ae62:	2a65      	cmp	r2, #101	@ 0x65
 800ae64:	d001      	beq.n	800ae6a <_strtod_l+0x172>
 800ae66:	2a45      	cmp	r2, #69	@ 0x45
 800ae68:	d114      	bne.n	800ae94 <_strtod_l+0x19c>
 800ae6a:	b91d      	cbnz	r5, 800ae74 <_strtod_l+0x17c>
 800ae6c:	9a08      	ldr	r2, [sp, #32]
 800ae6e:	4302      	orrs	r2, r0
 800ae70:	d096      	beq.n	800ada0 <_strtod_l+0xa8>
 800ae72:	2500      	movs	r5, #0
 800ae74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae76:	1c62      	adds	r2, r4, #1
 800ae78:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae7a:	7862      	ldrb	r2, [r4, #1]
 800ae7c:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae7e:	d07a      	beq.n	800af76 <_strtod_l+0x27e>
 800ae80:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae82:	d07e      	beq.n	800af82 <_strtod_l+0x28a>
 800ae84:	f04f 0c00 	mov.w	ip, #0
 800ae88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae8c:	2909      	cmp	r1, #9
 800ae8e:	f240 8085 	bls.w	800af9c <_strtod_l+0x2a4>
 800ae92:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae94:	f04f 0800 	mov.w	r8, #0
 800ae98:	e0a5      	b.n	800afe6 <_strtod_l+0x2ee>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e7c8      	b.n	800ae30 <_strtod_l+0x138>
 800ae9e:	f1b9 0f08 	cmp.w	r9, #8
 800aea2:	bfd8      	it	le
 800aea4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800aea6:	f100 0001 	add.w	r0, r0, #1
 800aeaa:	bfda      	itte	le
 800aeac:	fb02 3301 	mlale	r3, r2, r1, r3
 800aeb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800aeb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800aeb6:	f109 0901 	add.w	r9, r9, #1
 800aeba:	9019      	str	r0, [sp, #100]	@ 0x64
 800aebc:	e7bf      	b.n	800ae3e <_strtod_l+0x146>
 800aebe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aec4:	785a      	ldrb	r2, [r3, #1]
 800aec6:	f1b9 0f00 	cmp.w	r9, #0
 800aeca:	d03b      	beq.n	800af44 <_strtod_l+0x24c>
 800aecc:	900a      	str	r0, [sp, #40]	@ 0x28
 800aece:	464d      	mov	r5, r9
 800aed0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aed4:	2b09      	cmp	r3, #9
 800aed6:	d912      	bls.n	800aefe <_strtod_l+0x206>
 800aed8:	2301      	movs	r3, #1
 800aeda:	e7c2      	b.n	800ae62 <_strtod_l+0x16a>
 800aedc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	9219      	str	r2, [sp, #100]	@ 0x64
 800aee2:	785a      	ldrb	r2, [r3, #1]
 800aee4:	3001      	adds	r0, #1
 800aee6:	2a30      	cmp	r2, #48	@ 0x30
 800aee8:	d0f8      	beq.n	800aedc <_strtod_l+0x1e4>
 800aeea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aeee:	2b08      	cmp	r3, #8
 800aef0:	f200 84d2 	bhi.w	800b898 <_strtod_l+0xba0>
 800aef4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aef6:	900a      	str	r0, [sp, #40]	@ 0x28
 800aef8:	2000      	movs	r0, #0
 800aefa:	930c      	str	r3, [sp, #48]	@ 0x30
 800aefc:	4605      	mov	r5, r0
 800aefe:	3a30      	subs	r2, #48	@ 0x30
 800af00:	f100 0301 	add.w	r3, r0, #1
 800af04:	d018      	beq.n	800af38 <_strtod_l+0x240>
 800af06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af08:	4419      	add	r1, r3
 800af0a:	910a      	str	r1, [sp, #40]	@ 0x28
 800af0c:	462e      	mov	r6, r5
 800af0e:	f04f 0e0a 	mov.w	lr, #10
 800af12:	1c71      	adds	r1, r6, #1
 800af14:	eba1 0c05 	sub.w	ip, r1, r5
 800af18:	4563      	cmp	r3, ip
 800af1a:	dc15      	bgt.n	800af48 <_strtod_l+0x250>
 800af1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800af20:	182b      	adds	r3, r5, r0
 800af22:	2b08      	cmp	r3, #8
 800af24:	f105 0501 	add.w	r5, r5, #1
 800af28:	4405      	add	r5, r0
 800af2a:	dc1a      	bgt.n	800af62 <_strtod_l+0x26a>
 800af2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af2e:	230a      	movs	r3, #10
 800af30:	fb03 2301 	mla	r3, r3, r1, r2
 800af34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af36:	2300      	movs	r3, #0
 800af38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af3a:	1c51      	adds	r1, r2, #1
 800af3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800af3e:	7852      	ldrb	r2, [r2, #1]
 800af40:	4618      	mov	r0, r3
 800af42:	e7c5      	b.n	800aed0 <_strtod_l+0x1d8>
 800af44:	4648      	mov	r0, r9
 800af46:	e7ce      	b.n	800aee6 <_strtod_l+0x1ee>
 800af48:	2e08      	cmp	r6, #8
 800af4a:	dc05      	bgt.n	800af58 <_strtod_l+0x260>
 800af4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800af4e:	fb0e f606 	mul.w	r6, lr, r6
 800af52:	960b      	str	r6, [sp, #44]	@ 0x2c
 800af54:	460e      	mov	r6, r1
 800af56:	e7dc      	b.n	800af12 <_strtod_l+0x21a>
 800af58:	2910      	cmp	r1, #16
 800af5a:	bfd8      	it	le
 800af5c:	fb0e f707 	mulle.w	r7, lr, r7
 800af60:	e7f8      	b.n	800af54 <_strtod_l+0x25c>
 800af62:	2b0f      	cmp	r3, #15
 800af64:	bfdc      	itt	le
 800af66:	230a      	movle	r3, #10
 800af68:	fb03 2707 	mlale	r7, r3, r7, r2
 800af6c:	e7e3      	b.n	800af36 <_strtod_l+0x23e>
 800af6e:	2300      	movs	r3, #0
 800af70:	930a      	str	r3, [sp, #40]	@ 0x28
 800af72:	2301      	movs	r3, #1
 800af74:	e77a      	b.n	800ae6c <_strtod_l+0x174>
 800af76:	f04f 0c00 	mov.w	ip, #0
 800af7a:	1ca2      	adds	r2, r4, #2
 800af7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800af7e:	78a2      	ldrb	r2, [r4, #2]
 800af80:	e782      	b.n	800ae88 <_strtod_l+0x190>
 800af82:	f04f 0c01 	mov.w	ip, #1
 800af86:	e7f8      	b.n	800af7a <_strtod_l+0x282>
 800af88:	0800d054 	.word	0x0800d054
 800af8c:	0800ce87 	.word	0x0800ce87
 800af90:	7ff00000 	.word	0x7ff00000
 800af94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af96:	1c51      	adds	r1, r2, #1
 800af98:	9119      	str	r1, [sp, #100]	@ 0x64
 800af9a:	7852      	ldrb	r2, [r2, #1]
 800af9c:	2a30      	cmp	r2, #48	@ 0x30
 800af9e:	d0f9      	beq.n	800af94 <_strtod_l+0x29c>
 800afa0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800afa4:	2908      	cmp	r1, #8
 800afa6:	f63f af75 	bhi.w	800ae94 <_strtod_l+0x19c>
 800afaa:	3a30      	subs	r2, #48	@ 0x30
 800afac:	9209      	str	r2, [sp, #36]	@ 0x24
 800afae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800afb2:	f04f 080a 	mov.w	r8, #10
 800afb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afb8:	1c56      	adds	r6, r2, #1
 800afba:	9619      	str	r6, [sp, #100]	@ 0x64
 800afbc:	7852      	ldrb	r2, [r2, #1]
 800afbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afc2:	f1be 0f09 	cmp.w	lr, #9
 800afc6:	d939      	bls.n	800b03c <_strtod_l+0x344>
 800afc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afca:	1a76      	subs	r6, r6, r1
 800afcc:	2e08      	cmp	r6, #8
 800afce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afd2:	dc03      	bgt.n	800afdc <_strtod_l+0x2e4>
 800afd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afd6:	4588      	cmp	r8, r1
 800afd8:	bfa8      	it	ge
 800afda:	4688      	movge	r8, r1
 800afdc:	f1bc 0f00 	cmp.w	ip, #0
 800afe0:	d001      	beq.n	800afe6 <_strtod_l+0x2ee>
 800afe2:	f1c8 0800 	rsb	r8, r8, #0
 800afe6:	2d00      	cmp	r5, #0
 800afe8:	d14e      	bne.n	800b088 <_strtod_l+0x390>
 800afea:	9908      	ldr	r1, [sp, #32]
 800afec:	4308      	orrs	r0, r1
 800afee:	f47f aebc 	bne.w	800ad6a <_strtod_l+0x72>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f47f aed4 	bne.w	800ada0 <_strtod_l+0xa8>
 800aff8:	2a69      	cmp	r2, #105	@ 0x69
 800affa:	d028      	beq.n	800b04e <_strtod_l+0x356>
 800affc:	dc25      	bgt.n	800b04a <_strtod_l+0x352>
 800affe:	2a49      	cmp	r2, #73	@ 0x49
 800b000:	d025      	beq.n	800b04e <_strtod_l+0x356>
 800b002:	2a4e      	cmp	r2, #78	@ 0x4e
 800b004:	f47f aecc 	bne.w	800ada0 <_strtod_l+0xa8>
 800b008:	499a      	ldr	r1, [pc, #616]	@ (800b274 <_strtod_l+0x57c>)
 800b00a:	a819      	add	r0, sp, #100	@ 0x64
 800b00c:	f001 fba4 	bl	800c758 <__match>
 800b010:	2800      	cmp	r0, #0
 800b012:	f43f aec5 	beq.w	800ada0 <_strtod_l+0xa8>
 800b016:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	2b28      	cmp	r3, #40	@ 0x28
 800b01c:	d12e      	bne.n	800b07c <_strtod_l+0x384>
 800b01e:	4996      	ldr	r1, [pc, #600]	@ (800b278 <_strtod_l+0x580>)
 800b020:	aa1c      	add	r2, sp, #112	@ 0x70
 800b022:	a819      	add	r0, sp, #100	@ 0x64
 800b024:	f001 fbac 	bl	800c780 <__hexnan>
 800b028:	2805      	cmp	r0, #5
 800b02a:	d127      	bne.n	800b07c <_strtod_l+0x384>
 800b02c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b02e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b032:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b036:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b03a:	e696      	b.n	800ad6a <_strtod_l+0x72>
 800b03c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b03e:	fb08 2101 	mla	r1, r8, r1, r2
 800b042:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b046:	9209      	str	r2, [sp, #36]	@ 0x24
 800b048:	e7b5      	b.n	800afb6 <_strtod_l+0x2be>
 800b04a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b04c:	e7da      	b.n	800b004 <_strtod_l+0x30c>
 800b04e:	498b      	ldr	r1, [pc, #556]	@ (800b27c <_strtod_l+0x584>)
 800b050:	a819      	add	r0, sp, #100	@ 0x64
 800b052:	f001 fb81 	bl	800c758 <__match>
 800b056:	2800      	cmp	r0, #0
 800b058:	f43f aea2 	beq.w	800ada0 <_strtod_l+0xa8>
 800b05c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b05e:	4988      	ldr	r1, [pc, #544]	@ (800b280 <_strtod_l+0x588>)
 800b060:	3b01      	subs	r3, #1
 800b062:	a819      	add	r0, sp, #100	@ 0x64
 800b064:	9319      	str	r3, [sp, #100]	@ 0x64
 800b066:	f001 fb77 	bl	800c758 <__match>
 800b06a:	b910      	cbnz	r0, 800b072 <_strtod_l+0x37a>
 800b06c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b06e:	3301      	adds	r3, #1
 800b070:	9319      	str	r3, [sp, #100]	@ 0x64
 800b072:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b290 <_strtod_l+0x598>
 800b076:	f04f 0a00 	mov.w	sl, #0
 800b07a:	e676      	b.n	800ad6a <_strtod_l+0x72>
 800b07c:	4881      	ldr	r0, [pc, #516]	@ (800b284 <_strtod_l+0x58c>)
 800b07e:	f001 f8a7 	bl	800c1d0 <nan>
 800b082:	ec5b ab10 	vmov	sl, fp, d0
 800b086:	e670      	b.n	800ad6a <_strtod_l+0x72>
 800b088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b08a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b08c:	eba8 0303 	sub.w	r3, r8, r3
 800b090:	f1b9 0f00 	cmp.w	r9, #0
 800b094:	bf08      	it	eq
 800b096:	46a9      	moveq	r9, r5
 800b098:	2d10      	cmp	r5, #16
 800b09a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09c:	462c      	mov	r4, r5
 800b09e:	bfa8      	it	ge
 800b0a0:	2410      	movge	r4, #16
 800b0a2:	f7f5 fa2f 	bl	8000504 <__aeabi_ui2d>
 800b0a6:	2d09      	cmp	r5, #9
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	468b      	mov	fp, r1
 800b0ac:	dc13      	bgt.n	800b0d6 <_strtod_l+0x3de>
 800b0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f43f ae5a 	beq.w	800ad6a <_strtod_l+0x72>
 800b0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0b8:	dd78      	ble.n	800b1ac <_strtod_l+0x4b4>
 800b0ba:	2b16      	cmp	r3, #22
 800b0bc:	dc5f      	bgt.n	800b17e <_strtod_l+0x486>
 800b0be:	4972      	ldr	r1, [pc, #456]	@ (800b288 <_strtod_l+0x590>)
 800b0c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c8:	4652      	mov	r2, sl
 800b0ca:	465b      	mov	r3, fp
 800b0cc:	f7f5 fa94 	bl	80005f8 <__aeabi_dmul>
 800b0d0:	4682      	mov	sl, r0
 800b0d2:	468b      	mov	fp, r1
 800b0d4:	e649      	b.n	800ad6a <_strtod_l+0x72>
 800b0d6:	4b6c      	ldr	r3, [pc, #432]	@ (800b288 <_strtod_l+0x590>)
 800b0d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0e0:	f7f5 fa8a 	bl	80005f8 <__aeabi_dmul>
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	468b      	mov	fp, r1
 800b0ea:	f7f5 fa0b 	bl	8000504 <__aeabi_ui2d>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4659      	mov	r1, fp
 800b0f6:	f7f5 f8c9 	bl	800028c <__adddf3>
 800b0fa:	2d0f      	cmp	r5, #15
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	468b      	mov	fp, r1
 800b100:	ddd5      	ble.n	800b0ae <_strtod_l+0x3b6>
 800b102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b104:	1b2c      	subs	r4, r5, r4
 800b106:	441c      	add	r4, r3
 800b108:	2c00      	cmp	r4, #0
 800b10a:	f340 8093 	ble.w	800b234 <_strtod_l+0x53c>
 800b10e:	f014 030f 	ands.w	r3, r4, #15
 800b112:	d00a      	beq.n	800b12a <_strtod_l+0x432>
 800b114:	495c      	ldr	r1, [pc, #368]	@ (800b288 <_strtod_l+0x590>)
 800b116:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b11a:	4652      	mov	r2, sl
 800b11c:	465b      	mov	r3, fp
 800b11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b122:	f7f5 fa69 	bl	80005f8 <__aeabi_dmul>
 800b126:	4682      	mov	sl, r0
 800b128:	468b      	mov	fp, r1
 800b12a:	f034 040f 	bics.w	r4, r4, #15
 800b12e:	d073      	beq.n	800b218 <_strtod_l+0x520>
 800b130:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b134:	dd49      	ble.n	800b1ca <_strtod_l+0x4d2>
 800b136:	2400      	movs	r4, #0
 800b138:	46a0      	mov	r8, r4
 800b13a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b13c:	46a1      	mov	r9, r4
 800b13e:	9a05      	ldr	r2, [sp, #20]
 800b140:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b290 <_strtod_l+0x598>
 800b144:	2322      	movs	r3, #34	@ 0x22
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	f04f 0a00 	mov.w	sl, #0
 800b14c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b14e:	2b00      	cmp	r3, #0
 800b150:	f43f ae0b 	beq.w	800ad6a <_strtod_l+0x72>
 800b154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b156:	9805      	ldr	r0, [sp, #20]
 800b158:	f7ff f946 	bl	800a3e8 <_Bfree>
 800b15c:	9805      	ldr	r0, [sp, #20]
 800b15e:	4649      	mov	r1, r9
 800b160:	f7ff f942 	bl	800a3e8 <_Bfree>
 800b164:	9805      	ldr	r0, [sp, #20]
 800b166:	4641      	mov	r1, r8
 800b168:	f7ff f93e 	bl	800a3e8 <_Bfree>
 800b16c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b16e:	9805      	ldr	r0, [sp, #20]
 800b170:	f7ff f93a 	bl	800a3e8 <_Bfree>
 800b174:	9805      	ldr	r0, [sp, #20]
 800b176:	4621      	mov	r1, r4
 800b178:	f7ff f936 	bl	800a3e8 <_Bfree>
 800b17c:	e5f5      	b.n	800ad6a <_strtod_l+0x72>
 800b17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b180:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b184:	4293      	cmp	r3, r2
 800b186:	dbbc      	blt.n	800b102 <_strtod_l+0x40a>
 800b188:	4c3f      	ldr	r4, [pc, #252]	@ (800b288 <_strtod_l+0x590>)
 800b18a:	f1c5 050f 	rsb	r5, r5, #15
 800b18e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19a:	f7f5 fa2d 	bl	80005f8 <__aeabi_dmul>
 800b19e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1a0:	1b5d      	subs	r5, r3, r5
 800b1a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b1a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1aa:	e78f      	b.n	800b0cc <_strtod_l+0x3d4>
 800b1ac:	3316      	adds	r3, #22
 800b1ae:	dba8      	blt.n	800b102 <_strtod_l+0x40a>
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b2:	eba3 0808 	sub.w	r8, r3, r8
 800b1b6:	4b34      	ldr	r3, [pc, #208]	@ (800b288 <_strtod_l+0x590>)
 800b1b8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b1bc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	f7f5 fb42 	bl	800084c <__aeabi_ddiv>
 800b1c8:	e782      	b.n	800b0d0 <_strtod_l+0x3d8>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	4f2f      	ldr	r7, [pc, #188]	@ (800b28c <_strtod_l+0x594>)
 800b1ce:	1124      	asrs	r4, r4, #4
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	4659      	mov	r1, fp
 800b1d4:	461e      	mov	r6, r3
 800b1d6:	2c01      	cmp	r4, #1
 800b1d8:	dc21      	bgt.n	800b21e <_strtod_l+0x526>
 800b1da:	b10b      	cbz	r3, 800b1e0 <_strtod_l+0x4e8>
 800b1dc:	4682      	mov	sl, r0
 800b1de:	468b      	mov	fp, r1
 800b1e0:	492a      	ldr	r1, [pc, #168]	@ (800b28c <_strtod_l+0x594>)
 800b1e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1ea:	4652      	mov	r2, sl
 800b1ec:	465b      	mov	r3, fp
 800b1ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f2:	f7f5 fa01 	bl	80005f8 <__aeabi_dmul>
 800b1f6:	4b26      	ldr	r3, [pc, #152]	@ (800b290 <_strtod_l+0x598>)
 800b1f8:	460a      	mov	r2, r1
 800b1fa:	400b      	ands	r3, r1
 800b1fc:	4925      	ldr	r1, [pc, #148]	@ (800b294 <_strtod_l+0x59c>)
 800b1fe:	428b      	cmp	r3, r1
 800b200:	4682      	mov	sl, r0
 800b202:	d898      	bhi.n	800b136 <_strtod_l+0x43e>
 800b204:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf86      	itte	hi
 800b20c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b298 <_strtod_l+0x5a0>
 800b210:	f04f 3aff 	movhi.w	sl, #4294967295
 800b214:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b218:	2300      	movs	r3, #0
 800b21a:	9308      	str	r3, [sp, #32]
 800b21c:	e076      	b.n	800b30c <_strtod_l+0x614>
 800b21e:	07e2      	lsls	r2, r4, #31
 800b220:	d504      	bpl.n	800b22c <_strtod_l+0x534>
 800b222:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b226:	f7f5 f9e7 	bl	80005f8 <__aeabi_dmul>
 800b22a:	2301      	movs	r3, #1
 800b22c:	3601      	adds	r6, #1
 800b22e:	1064      	asrs	r4, r4, #1
 800b230:	3708      	adds	r7, #8
 800b232:	e7d0      	b.n	800b1d6 <_strtod_l+0x4de>
 800b234:	d0f0      	beq.n	800b218 <_strtod_l+0x520>
 800b236:	4264      	negs	r4, r4
 800b238:	f014 020f 	ands.w	r2, r4, #15
 800b23c:	d00a      	beq.n	800b254 <_strtod_l+0x55c>
 800b23e:	4b12      	ldr	r3, [pc, #72]	@ (800b288 <_strtod_l+0x590>)
 800b240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b244:	4650      	mov	r0, sl
 800b246:	4659      	mov	r1, fp
 800b248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24c:	f7f5 fafe 	bl	800084c <__aeabi_ddiv>
 800b250:	4682      	mov	sl, r0
 800b252:	468b      	mov	fp, r1
 800b254:	1124      	asrs	r4, r4, #4
 800b256:	d0df      	beq.n	800b218 <_strtod_l+0x520>
 800b258:	2c1f      	cmp	r4, #31
 800b25a:	dd1f      	ble.n	800b29c <_strtod_l+0x5a4>
 800b25c:	2400      	movs	r4, #0
 800b25e:	46a0      	mov	r8, r4
 800b260:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b262:	46a1      	mov	r9, r4
 800b264:	9a05      	ldr	r2, [sp, #20]
 800b266:	2322      	movs	r3, #34	@ 0x22
 800b268:	f04f 0a00 	mov.w	sl, #0
 800b26c:	f04f 0b00 	mov.w	fp, #0
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e76b      	b.n	800b14c <_strtod_l+0x454>
 800b274:	0800cd75 	.word	0x0800cd75
 800b278:	0800d040 	.word	0x0800d040
 800b27c:	0800cd6d 	.word	0x0800cd6d
 800b280:	0800cda4 	.word	0x0800cda4
 800b284:	0800cedd 	.word	0x0800cedd
 800b288:	0800cf78 	.word	0x0800cf78
 800b28c:	0800cf50 	.word	0x0800cf50
 800b290:	7ff00000 	.word	0x7ff00000
 800b294:	7ca00000 	.word	0x7ca00000
 800b298:	7fefffff 	.word	0x7fefffff
 800b29c:	f014 0310 	ands.w	r3, r4, #16
 800b2a0:	bf18      	it	ne
 800b2a2:	236a      	movne	r3, #106	@ 0x6a
 800b2a4:	4ea9      	ldr	r6, [pc, #676]	@ (800b54c <_strtod_l+0x854>)
 800b2a6:	9308      	str	r3, [sp, #32]
 800b2a8:	4650      	mov	r0, sl
 800b2aa:	4659      	mov	r1, fp
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	07e7      	lsls	r7, r4, #31
 800b2b0:	d504      	bpl.n	800b2bc <_strtod_l+0x5c4>
 800b2b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2b6:	f7f5 f99f 	bl	80005f8 <__aeabi_dmul>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	1064      	asrs	r4, r4, #1
 800b2be:	f106 0608 	add.w	r6, r6, #8
 800b2c2:	d1f4      	bne.n	800b2ae <_strtod_l+0x5b6>
 800b2c4:	b10b      	cbz	r3, 800b2ca <_strtod_l+0x5d2>
 800b2c6:	4682      	mov	sl, r0
 800b2c8:	468b      	mov	fp, r1
 800b2ca:	9b08      	ldr	r3, [sp, #32]
 800b2cc:	b1b3      	cbz	r3, 800b2fc <_strtod_l+0x604>
 800b2ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	4659      	mov	r1, fp
 800b2da:	dd0f      	ble.n	800b2fc <_strtod_l+0x604>
 800b2dc:	2b1f      	cmp	r3, #31
 800b2de:	dd56      	ble.n	800b38e <_strtod_l+0x696>
 800b2e0:	2b34      	cmp	r3, #52	@ 0x34
 800b2e2:	bfde      	ittt	le
 800b2e4:	f04f 33ff 	movle.w	r3, #4294967295
 800b2e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b2ec:	4093      	lslle	r3, r2
 800b2ee:	f04f 0a00 	mov.w	sl, #0
 800b2f2:	bfcc      	ite	gt
 800b2f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b2f8:	ea03 0b01 	andle.w	fp, r3, r1
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	4650      	mov	r0, sl
 800b302:	4659      	mov	r1, fp
 800b304:	f7f5 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1a7      	bne.n	800b25c <_strtod_l+0x564>
 800b30c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b312:	9805      	ldr	r0, [sp, #20]
 800b314:	462b      	mov	r3, r5
 800b316:	464a      	mov	r2, r9
 800b318:	f7ff f8ce 	bl	800a4b8 <__s2b>
 800b31c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b31e:	2800      	cmp	r0, #0
 800b320:	f43f af09 	beq.w	800b136 <_strtod_l+0x43e>
 800b324:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b328:	2a00      	cmp	r2, #0
 800b32a:	eba3 0308 	sub.w	r3, r3, r8
 800b32e:	bfa8      	it	ge
 800b330:	2300      	movge	r3, #0
 800b332:	9312      	str	r3, [sp, #72]	@ 0x48
 800b334:	2400      	movs	r4, #0
 800b336:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b33a:	9316      	str	r3, [sp, #88]	@ 0x58
 800b33c:	46a0      	mov	r8, r4
 800b33e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b340:	9805      	ldr	r0, [sp, #20]
 800b342:	6859      	ldr	r1, [r3, #4]
 800b344:	f7ff f810 	bl	800a368 <_Balloc>
 800b348:	4681      	mov	r9, r0
 800b34a:	2800      	cmp	r0, #0
 800b34c:	f43f aef7 	beq.w	800b13e <_strtod_l+0x446>
 800b350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b352:	691a      	ldr	r2, [r3, #16]
 800b354:	3202      	adds	r2, #2
 800b356:	f103 010c 	add.w	r1, r3, #12
 800b35a:	0092      	lsls	r2, r2, #2
 800b35c:	300c      	adds	r0, #12
 800b35e:	f7fe f894 	bl	800948a <memcpy>
 800b362:	ec4b ab10 	vmov	d0, sl, fp
 800b366:	9805      	ldr	r0, [sp, #20]
 800b368:	aa1c      	add	r2, sp, #112	@ 0x70
 800b36a:	a91b      	add	r1, sp, #108	@ 0x6c
 800b36c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b370:	f7ff fbd6 	bl	800ab20 <__d2b>
 800b374:	901a      	str	r0, [sp, #104]	@ 0x68
 800b376:	2800      	cmp	r0, #0
 800b378:	f43f aee1 	beq.w	800b13e <_strtod_l+0x446>
 800b37c:	9805      	ldr	r0, [sp, #20]
 800b37e:	2101      	movs	r1, #1
 800b380:	f7ff f930 	bl	800a5e4 <__i2b>
 800b384:	4680      	mov	r8, r0
 800b386:	b948      	cbnz	r0, 800b39c <_strtod_l+0x6a4>
 800b388:	f04f 0800 	mov.w	r8, #0
 800b38c:	e6d7      	b.n	800b13e <_strtod_l+0x446>
 800b38e:	f04f 32ff 	mov.w	r2, #4294967295
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	ea03 0a0a 	and.w	sl, r3, sl
 800b39a:	e7af      	b.n	800b2fc <_strtod_l+0x604>
 800b39c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b39e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b3a0:	2d00      	cmp	r5, #0
 800b3a2:	bfab      	itete	ge
 800b3a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b3a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b3a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b3aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b3ac:	bfac      	ite	ge
 800b3ae:	18ef      	addge	r7, r5, r3
 800b3b0:	1b5e      	sublt	r6, r3, r5
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	1aed      	subs	r5, r5, r3
 800b3b6:	4415      	add	r5, r2
 800b3b8:	4b65      	ldr	r3, [pc, #404]	@ (800b550 <_strtod_l+0x858>)
 800b3ba:	3d01      	subs	r5, #1
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3c2:	da50      	bge.n	800b466 <_strtod_l+0x76e>
 800b3c4:	1b5b      	subs	r3, r3, r5
 800b3c6:	2b1f      	cmp	r3, #31
 800b3c8:	eba2 0203 	sub.w	r2, r2, r3
 800b3cc:	f04f 0101 	mov.w	r1, #1
 800b3d0:	dc3d      	bgt.n	800b44e <_strtod_l+0x756>
 800b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3d8:	2300      	movs	r3, #0
 800b3da:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3dc:	18bd      	adds	r5, r7, r2
 800b3de:	9b08      	ldr	r3, [sp, #32]
 800b3e0:	42af      	cmp	r7, r5
 800b3e2:	4416      	add	r6, r2
 800b3e4:	441e      	add	r6, r3
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	bfa8      	it	ge
 800b3ea:	462b      	movge	r3, r5
 800b3ec:	42b3      	cmp	r3, r6
 800b3ee:	bfa8      	it	ge
 800b3f0:	4633      	movge	r3, r6
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bfc2      	ittt	gt
 800b3f6:	1aed      	subgt	r5, r5, r3
 800b3f8:	1af6      	subgt	r6, r6, r3
 800b3fa:	1aff      	subgt	r7, r7, r3
 800b3fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd16      	ble.n	800b430 <_strtod_l+0x738>
 800b402:	4641      	mov	r1, r8
 800b404:	9805      	ldr	r0, [sp, #20]
 800b406:	461a      	mov	r2, r3
 800b408:	f7ff f9a4 	bl	800a754 <__pow5mult>
 800b40c:	4680      	mov	r8, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0ba      	beq.n	800b388 <_strtod_l+0x690>
 800b412:	4601      	mov	r1, r0
 800b414:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b416:	9805      	ldr	r0, [sp, #20]
 800b418:	f7ff f8fa 	bl	800a610 <__multiply>
 800b41c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b41e:	2800      	cmp	r0, #0
 800b420:	f43f ae8d 	beq.w	800b13e <_strtod_l+0x446>
 800b424:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b426:	9805      	ldr	r0, [sp, #20]
 800b428:	f7fe ffde 	bl	800a3e8 <_Bfree>
 800b42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b42e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b430:	2d00      	cmp	r5, #0
 800b432:	dc1d      	bgt.n	800b470 <_strtod_l+0x778>
 800b434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b436:	2b00      	cmp	r3, #0
 800b438:	dd23      	ble.n	800b482 <_strtod_l+0x78a>
 800b43a:	4649      	mov	r1, r9
 800b43c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b43e:	9805      	ldr	r0, [sp, #20]
 800b440:	f7ff f988 	bl	800a754 <__pow5mult>
 800b444:	4681      	mov	r9, r0
 800b446:	b9e0      	cbnz	r0, 800b482 <_strtod_l+0x78a>
 800b448:	f04f 0900 	mov.w	r9, #0
 800b44c:	e677      	b.n	800b13e <_strtod_l+0x446>
 800b44e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b452:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b456:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b45a:	35e2      	adds	r5, #226	@ 0xe2
 800b45c:	fa01 f305 	lsl.w	r3, r1, r5
 800b460:	9310      	str	r3, [sp, #64]	@ 0x40
 800b462:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b464:	e7ba      	b.n	800b3dc <_strtod_l+0x6e4>
 800b466:	2300      	movs	r3, #0
 800b468:	9310      	str	r3, [sp, #64]	@ 0x40
 800b46a:	2301      	movs	r3, #1
 800b46c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b46e:	e7b5      	b.n	800b3dc <_strtod_l+0x6e4>
 800b470:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b472:	9805      	ldr	r0, [sp, #20]
 800b474:	462a      	mov	r2, r5
 800b476:	f7ff f9c7 	bl	800a808 <__lshift>
 800b47a:	901a      	str	r0, [sp, #104]	@ 0x68
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d1d9      	bne.n	800b434 <_strtod_l+0x73c>
 800b480:	e65d      	b.n	800b13e <_strtod_l+0x446>
 800b482:	2e00      	cmp	r6, #0
 800b484:	dd07      	ble.n	800b496 <_strtod_l+0x79e>
 800b486:	4649      	mov	r1, r9
 800b488:	9805      	ldr	r0, [sp, #20]
 800b48a:	4632      	mov	r2, r6
 800b48c:	f7ff f9bc 	bl	800a808 <__lshift>
 800b490:	4681      	mov	r9, r0
 800b492:	2800      	cmp	r0, #0
 800b494:	d0d8      	beq.n	800b448 <_strtod_l+0x750>
 800b496:	2f00      	cmp	r7, #0
 800b498:	dd08      	ble.n	800b4ac <_strtod_l+0x7b4>
 800b49a:	4641      	mov	r1, r8
 800b49c:	9805      	ldr	r0, [sp, #20]
 800b49e:	463a      	mov	r2, r7
 800b4a0:	f7ff f9b2 	bl	800a808 <__lshift>
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f ae49 	beq.w	800b13e <_strtod_l+0x446>
 800b4ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4ae:	9805      	ldr	r0, [sp, #20]
 800b4b0:	464a      	mov	r2, r9
 800b4b2:	f7ff fa31 	bl	800a918 <__mdiff>
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	f43f ae40 	beq.w	800b13e <_strtod_l+0x446>
 800b4be:	68c3      	ldr	r3, [r0, #12]
 800b4c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60c3      	str	r3, [r0, #12]
 800b4c6:	4641      	mov	r1, r8
 800b4c8:	f7ff fa0a 	bl	800a8e0 <__mcmp>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	da45      	bge.n	800b55c <_strtod_l+0x864>
 800b4d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4d2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4d6:	d16b      	bne.n	800b5b0 <_strtod_l+0x8b8>
 800b4d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d167      	bne.n	800b5b0 <_strtod_l+0x8b8>
 800b4e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4e4:	0d1b      	lsrs	r3, r3, #20
 800b4e6:	051b      	lsls	r3, r3, #20
 800b4e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4ec:	d960      	bls.n	800b5b0 <_strtod_l+0x8b8>
 800b4ee:	6963      	ldr	r3, [r4, #20]
 800b4f0:	b913      	cbnz	r3, 800b4f8 <_strtod_l+0x800>
 800b4f2:	6923      	ldr	r3, [r4, #16]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	dd5b      	ble.n	800b5b0 <_strtod_l+0x8b8>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	9805      	ldr	r0, [sp, #20]
 800b4fe:	f7ff f983 	bl	800a808 <__lshift>
 800b502:	4641      	mov	r1, r8
 800b504:	4604      	mov	r4, r0
 800b506:	f7ff f9eb 	bl	800a8e0 <__mcmp>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	dd50      	ble.n	800b5b0 <_strtod_l+0x8b8>
 800b50e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b512:	9a08      	ldr	r2, [sp, #32]
 800b514:	0d1b      	lsrs	r3, r3, #20
 800b516:	051b      	lsls	r3, r3, #20
 800b518:	2a00      	cmp	r2, #0
 800b51a:	d06a      	beq.n	800b5f2 <_strtod_l+0x8fa>
 800b51c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b520:	d867      	bhi.n	800b5f2 <_strtod_l+0x8fa>
 800b522:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b526:	f67f ae9d 	bls.w	800b264 <_strtod_l+0x56c>
 800b52a:	4b0a      	ldr	r3, [pc, #40]	@ (800b554 <_strtod_l+0x85c>)
 800b52c:	4650      	mov	r0, sl
 800b52e:	4659      	mov	r1, fp
 800b530:	2200      	movs	r2, #0
 800b532:	f7f5 f861 	bl	80005f8 <__aeabi_dmul>
 800b536:	4b08      	ldr	r3, [pc, #32]	@ (800b558 <_strtod_l+0x860>)
 800b538:	400b      	ands	r3, r1
 800b53a:	4682      	mov	sl, r0
 800b53c:	468b      	mov	fp, r1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f47f ae08 	bne.w	800b154 <_strtod_l+0x45c>
 800b544:	9a05      	ldr	r2, [sp, #20]
 800b546:	2322      	movs	r3, #34	@ 0x22
 800b548:	6013      	str	r3, [r2, #0]
 800b54a:	e603      	b.n	800b154 <_strtod_l+0x45c>
 800b54c:	0800d068 	.word	0x0800d068
 800b550:	fffffc02 	.word	0xfffffc02
 800b554:	39500000 	.word	0x39500000
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b560:	d165      	bne.n	800b62e <_strtod_l+0x936>
 800b562:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b564:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b568:	b35a      	cbz	r2, 800b5c2 <_strtod_l+0x8ca>
 800b56a:	4a9f      	ldr	r2, [pc, #636]	@ (800b7e8 <_strtod_l+0xaf0>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d12b      	bne.n	800b5c8 <_strtod_l+0x8d0>
 800b570:	9b08      	ldr	r3, [sp, #32]
 800b572:	4651      	mov	r1, sl
 800b574:	b303      	cbz	r3, 800b5b8 <_strtod_l+0x8c0>
 800b576:	4b9d      	ldr	r3, [pc, #628]	@ (800b7ec <_strtod_l+0xaf4>)
 800b578:	465a      	mov	r2, fp
 800b57a:	4013      	ands	r3, r2
 800b57c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b580:	f04f 32ff 	mov.w	r2, #4294967295
 800b584:	d81b      	bhi.n	800b5be <_strtod_l+0x8c6>
 800b586:	0d1b      	lsrs	r3, r3, #20
 800b588:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b58c:	fa02 f303 	lsl.w	r3, r2, r3
 800b590:	4299      	cmp	r1, r3
 800b592:	d119      	bne.n	800b5c8 <_strtod_l+0x8d0>
 800b594:	4b96      	ldr	r3, [pc, #600]	@ (800b7f0 <_strtod_l+0xaf8>)
 800b596:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b598:	429a      	cmp	r2, r3
 800b59a:	d102      	bne.n	800b5a2 <_strtod_l+0x8aa>
 800b59c:	3101      	adds	r1, #1
 800b59e:	f43f adce 	beq.w	800b13e <_strtod_l+0x446>
 800b5a2:	4b92      	ldr	r3, [pc, #584]	@ (800b7ec <_strtod_l+0xaf4>)
 800b5a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5a6:	401a      	ands	r2, r3
 800b5a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b5ac:	f04f 0a00 	mov.w	sl, #0
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1b9      	bne.n	800b52a <_strtod_l+0x832>
 800b5b6:	e5cd      	b.n	800b154 <_strtod_l+0x45c>
 800b5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5bc:	e7e8      	b.n	800b590 <_strtod_l+0x898>
 800b5be:	4613      	mov	r3, r2
 800b5c0:	e7e6      	b.n	800b590 <_strtod_l+0x898>
 800b5c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b5c6:	d0a2      	beq.n	800b50e <_strtod_l+0x816>
 800b5c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5ca:	b1db      	cbz	r3, 800b604 <_strtod_l+0x90c>
 800b5cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5ce:	4213      	tst	r3, r2
 800b5d0:	d0ee      	beq.n	800b5b0 <_strtod_l+0x8b8>
 800b5d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d4:	9a08      	ldr	r2, [sp, #32]
 800b5d6:	4650      	mov	r0, sl
 800b5d8:	4659      	mov	r1, fp
 800b5da:	b1bb      	cbz	r3, 800b60c <_strtod_l+0x914>
 800b5dc:	f7ff fb6e 	bl	800acbc <sulp>
 800b5e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5e4:	ec53 2b10 	vmov	r2, r3, d0
 800b5e8:	f7f4 fe50 	bl	800028c <__adddf3>
 800b5ec:	4682      	mov	sl, r0
 800b5ee:	468b      	mov	fp, r1
 800b5f0:	e7de      	b.n	800b5b0 <_strtod_l+0x8b8>
 800b5f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b5f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5fe:	f04f 3aff 	mov.w	sl, #4294967295
 800b602:	e7d5      	b.n	800b5b0 <_strtod_l+0x8b8>
 800b604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b606:	ea13 0f0a 	tst.w	r3, sl
 800b60a:	e7e1      	b.n	800b5d0 <_strtod_l+0x8d8>
 800b60c:	f7ff fb56 	bl	800acbc <sulp>
 800b610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b614:	ec53 2b10 	vmov	r2, r3, d0
 800b618:	f7f4 fe36 	bl	8000288 <__aeabi_dsub>
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	4682      	mov	sl, r0
 800b622:	468b      	mov	fp, r1
 800b624:	f7f5 fa50 	bl	8000ac8 <__aeabi_dcmpeq>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d0c1      	beq.n	800b5b0 <_strtod_l+0x8b8>
 800b62c:	e61a      	b.n	800b264 <_strtod_l+0x56c>
 800b62e:	4641      	mov	r1, r8
 800b630:	4620      	mov	r0, r4
 800b632:	f7ff facd 	bl	800abd0 <__ratio>
 800b636:	ec57 6b10 	vmov	r6, r7, d0
 800b63a:	2200      	movs	r2, #0
 800b63c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b640:	4630      	mov	r0, r6
 800b642:	4639      	mov	r1, r7
 800b644:	f7f5 fa54 	bl	8000af0 <__aeabi_dcmple>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d06f      	beq.n	800b72c <_strtod_l+0xa34>
 800b64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d17a      	bne.n	800b748 <_strtod_l+0xa50>
 800b652:	f1ba 0f00 	cmp.w	sl, #0
 800b656:	d158      	bne.n	800b70a <_strtod_l+0xa12>
 800b658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b65a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d15a      	bne.n	800b718 <_strtod_l+0xa20>
 800b662:	4b64      	ldr	r3, [pc, #400]	@ (800b7f4 <_strtod_l+0xafc>)
 800b664:	2200      	movs	r2, #0
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 fa37 	bl	8000adc <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d159      	bne.n	800b726 <_strtod_l+0xa2e>
 800b672:	4630      	mov	r0, r6
 800b674:	4639      	mov	r1, r7
 800b676:	4b60      	ldr	r3, [pc, #384]	@ (800b7f8 <_strtod_l+0xb00>)
 800b678:	2200      	movs	r2, #0
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b686:	9606      	str	r6, [sp, #24]
 800b688:	9307      	str	r3, [sp, #28]
 800b68a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b68e:	4d57      	ldr	r5, [pc, #348]	@ (800b7ec <_strtod_l+0xaf4>)
 800b690:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b694:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b696:	401d      	ands	r5, r3
 800b698:	4b58      	ldr	r3, [pc, #352]	@ (800b7fc <_strtod_l+0xb04>)
 800b69a:	429d      	cmp	r5, r3
 800b69c:	f040 80b2 	bne.w	800b804 <_strtod_l+0xb0c>
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b6a6:	ec4b ab10 	vmov	d0, sl, fp
 800b6aa:	f7ff f9c9 	bl	800aa40 <__ulp>
 800b6ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6b2:	ec51 0b10 	vmov	r0, r1, d0
 800b6b6:	f7f4 ff9f 	bl	80005f8 <__aeabi_dmul>
 800b6ba:	4652      	mov	r2, sl
 800b6bc:	465b      	mov	r3, fp
 800b6be:	f7f4 fde5 	bl	800028c <__adddf3>
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4949      	ldr	r1, [pc, #292]	@ (800b7ec <_strtod_l+0xaf4>)
 800b6c6:	4a4e      	ldr	r2, [pc, #312]	@ (800b800 <_strtod_l+0xb08>)
 800b6c8:	4019      	ands	r1, r3
 800b6ca:	4291      	cmp	r1, r2
 800b6cc:	4682      	mov	sl, r0
 800b6ce:	d942      	bls.n	800b756 <_strtod_l+0xa5e>
 800b6d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6d2:	4b47      	ldr	r3, [pc, #284]	@ (800b7f0 <_strtod_l+0xaf8>)
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d103      	bne.n	800b6e0 <_strtod_l+0x9e8>
 800b6d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6da:	3301      	adds	r3, #1
 800b6dc:	f43f ad2f 	beq.w	800b13e <_strtod_l+0x446>
 800b6e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b7f0 <_strtod_l+0xaf8>
 800b6e4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6ea:	9805      	ldr	r0, [sp, #20]
 800b6ec:	f7fe fe7c 	bl	800a3e8 <_Bfree>
 800b6f0:	9805      	ldr	r0, [sp, #20]
 800b6f2:	4649      	mov	r1, r9
 800b6f4:	f7fe fe78 	bl	800a3e8 <_Bfree>
 800b6f8:	9805      	ldr	r0, [sp, #20]
 800b6fa:	4641      	mov	r1, r8
 800b6fc:	f7fe fe74 	bl	800a3e8 <_Bfree>
 800b700:	9805      	ldr	r0, [sp, #20]
 800b702:	4621      	mov	r1, r4
 800b704:	f7fe fe70 	bl	800a3e8 <_Bfree>
 800b708:	e619      	b.n	800b33e <_strtod_l+0x646>
 800b70a:	f1ba 0f01 	cmp.w	sl, #1
 800b70e:	d103      	bne.n	800b718 <_strtod_l+0xa20>
 800b710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b712:	2b00      	cmp	r3, #0
 800b714:	f43f ada6 	beq.w	800b264 <_strtod_l+0x56c>
 800b718:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7c8 <_strtod_l+0xad0>
 800b71c:	4f35      	ldr	r7, [pc, #212]	@ (800b7f4 <_strtod_l+0xafc>)
 800b71e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b722:	2600      	movs	r6, #0
 800b724:	e7b1      	b.n	800b68a <_strtod_l+0x992>
 800b726:	4f34      	ldr	r7, [pc, #208]	@ (800b7f8 <_strtod_l+0xb00>)
 800b728:	2600      	movs	r6, #0
 800b72a:	e7aa      	b.n	800b682 <_strtod_l+0x98a>
 800b72c:	4b32      	ldr	r3, [pc, #200]	@ (800b7f8 <_strtod_l+0xb00>)
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d09f      	beq.n	800b682 <_strtod_l+0x98a>
 800b742:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b746:	e7a0      	b.n	800b68a <_strtod_l+0x992>
 800b748:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7d0 <_strtod_l+0xad8>
 800b74c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b750:	ec57 6b17 	vmov	r6, r7, d7
 800b754:	e799      	b.n	800b68a <_strtod_l+0x992>
 800b756:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b75a:	9b08      	ldr	r3, [sp, #32]
 800b75c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b760:	2b00      	cmp	r3, #0
 800b762:	d1c1      	bne.n	800b6e8 <_strtod_l+0x9f0>
 800b764:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b768:	0d1b      	lsrs	r3, r3, #20
 800b76a:	051b      	lsls	r3, r3, #20
 800b76c:	429d      	cmp	r5, r3
 800b76e:	d1bb      	bne.n	800b6e8 <_strtod_l+0x9f0>
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 faa0 	bl	8000cb8 <__aeabi_d2lz>
 800b778:	f7f4 ff10 	bl	800059c <__aeabi_l2d>
 800b77c:	4602      	mov	r2, r0
 800b77e:	460b      	mov	r3, r1
 800b780:	4630      	mov	r0, r6
 800b782:	4639      	mov	r1, r7
 800b784:	f7f4 fd80 	bl	8000288 <__aeabi_dsub>
 800b788:	460b      	mov	r3, r1
 800b78a:	4602      	mov	r2, r0
 800b78c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b790:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b796:	ea46 060a 	orr.w	r6, r6, sl
 800b79a:	431e      	orrs	r6, r3
 800b79c:	d06f      	beq.n	800b87e <_strtod_l+0xb86>
 800b79e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7d8 <_strtod_l+0xae0>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f7f5 f99a 	bl	8000adc <__aeabi_dcmplt>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	f47f acd3 	bne.w	800b154 <_strtod_l+0x45c>
 800b7ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7e0 <_strtod_l+0xae8>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7b8:	f7f5 f9ae 	bl	8000b18 <__aeabi_dcmpgt>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d093      	beq.n	800b6e8 <_strtod_l+0x9f0>
 800b7c0:	e4c8      	b.n	800b154 <_strtod_l+0x45c>
 800b7c2:	bf00      	nop
 800b7c4:	f3af 8000 	nop.w
 800b7c8:	00000000 	.word	0x00000000
 800b7cc:	bff00000 	.word	0xbff00000
 800b7d0:	00000000 	.word	0x00000000
 800b7d4:	3ff00000 	.word	0x3ff00000
 800b7d8:	94a03595 	.word	0x94a03595
 800b7dc:	3fdfffff 	.word	0x3fdfffff
 800b7e0:	35afe535 	.word	0x35afe535
 800b7e4:	3fe00000 	.word	0x3fe00000
 800b7e8:	000fffff 	.word	0x000fffff
 800b7ec:	7ff00000 	.word	0x7ff00000
 800b7f0:	7fefffff 	.word	0x7fefffff
 800b7f4:	3ff00000 	.word	0x3ff00000
 800b7f8:	3fe00000 	.word	0x3fe00000
 800b7fc:	7fe00000 	.word	0x7fe00000
 800b800:	7c9fffff 	.word	0x7c9fffff
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	b323      	cbz	r3, 800b852 <_strtod_l+0xb5a>
 800b808:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b80c:	d821      	bhi.n	800b852 <_strtod_l+0xb5a>
 800b80e:	a328      	add	r3, pc, #160	@ (adr r3, 800b8b0 <_strtod_l+0xbb8>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f5 f96a 	bl	8000af0 <__aeabi_dcmple>
 800b81c:	b1a0      	cbz	r0, 800b848 <_strtod_l+0xb50>
 800b81e:	4639      	mov	r1, r7
 800b820:	4630      	mov	r0, r6
 800b822:	f7f5 f9c1 	bl	8000ba8 <__aeabi_d2uiz>
 800b826:	2801      	cmp	r0, #1
 800b828:	bf38      	it	cc
 800b82a:	2001      	movcc	r0, #1
 800b82c:	f7f4 fe6a 	bl	8000504 <__aeabi_ui2d>
 800b830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b832:	4606      	mov	r6, r0
 800b834:	460f      	mov	r7, r1
 800b836:	b9fb      	cbnz	r3, 800b878 <_strtod_l+0xb80>
 800b838:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b83c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b83e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b840:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b844:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b848:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b84a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b84e:	1b5b      	subs	r3, r3, r5
 800b850:	9311      	str	r3, [sp, #68]	@ 0x44
 800b852:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b856:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b85a:	f7ff f8f1 	bl	800aa40 <__ulp>
 800b85e:	4650      	mov	r0, sl
 800b860:	ec53 2b10 	vmov	r2, r3, d0
 800b864:	4659      	mov	r1, fp
 800b866:	f7f4 fec7 	bl	80005f8 <__aeabi_dmul>
 800b86a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b86e:	f7f4 fd0d 	bl	800028c <__adddf3>
 800b872:	4682      	mov	sl, r0
 800b874:	468b      	mov	fp, r1
 800b876:	e770      	b.n	800b75a <_strtod_l+0xa62>
 800b878:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b87c:	e7e0      	b.n	800b840 <_strtod_l+0xb48>
 800b87e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8b8 <_strtod_l+0xbc0>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	f7f5 f92a 	bl	8000adc <__aeabi_dcmplt>
 800b888:	e798      	b.n	800b7bc <_strtod_l+0xac4>
 800b88a:	2300      	movs	r3, #0
 800b88c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b88e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	f7ff ba6d 	b.w	800ad72 <_strtod_l+0x7a>
 800b898:	2a65      	cmp	r2, #101	@ 0x65
 800b89a:	f43f ab68 	beq.w	800af6e <_strtod_l+0x276>
 800b89e:	2a45      	cmp	r2, #69	@ 0x45
 800b8a0:	f43f ab65 	beq.w	800af6e <_strtod_l+0x276>
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f7ff bba0 	b.w	800afea <_strtod_l+0x2f2>
 800b8aa:	bf00      	nop
 800b8ac:	f3af 8000 	nop.w
 800b8b0:	ffc00000 	.word	0xffc00000
 800b8b4:	41dfffff 	.word	0x41dfffff
 800b8b8:	94a03595 	.word	0x94a03595
 800b8bc:	3fcfffff 	.word	0x3fcfffff

0800b8c0 <_strtod_r>:
 800b8c0:	4b01      	ldr	r3, [pc, #4]	@ (800b8c8 <_strtod_r+0x8>)
 800b8c2:	f7ff ba19 	b.w	800acf8 <_strtod_l>
 800b8c6:	bf00      	nop
 800b8c8:	20000074 	.word	0x20000074

0800b8cc <_strtol_l.isra.0>:
 800b8cc:	2b24      	cmp	r3, #36	@ 0x24
 800b8ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d2:	4686      	mov	lr, r0
 800b8d4:	4690      	mov	r8, r2
 800b8d6:	d801      	bhi.n	800b8dc <_strtol_l.isra.0+0x10>
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d106      	bne.n	800b8ea <_strtol_l.isra.0+0x1e>
 800b8dc:	f7fd fda8 	bl	8009430 <__errno>
 800b8e0:	2316      	movs	r3, #22
 800b8e2:	6003      	str	r3, [r0, #0]
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	4834      	ldr	r0, [pc, #208]	@ (800b9bc <_strtol_l.isra.0+0xf0>)
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	462a      	mov	r2, r5
 800b8f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8f4:	5d06      	ldrb	r6, [r0, r4]
 800b8f6:	f016 0608 	ands.w	r6, r6, #8
 800b8fa:	d1f8      	bne.n	800b8ee <_strtol_l.isra.0+0x22>
 800b8fc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b8fe:	d110      	bne.n	800b922 <_strtol_l.isra.0+0x56>
 800b900:	782c      	ldrb	r4, [r5, #0]
 800b902:	2601      	movs	r6, #1
 800b904:	1c95      	adds	r5, r2, #2
 800b906:	f033 0210 	bics.w	r2, r3, #16
 800b90a:	d115      	bne.n	800b938 <_strtol_l.isra.0+0x6c>
 800b90c:	2c30      	cmp	r4, #48	@ 0x30
 800b90e:	d10d      	bne.n	800b92c <_strtol_l.isra.0+0x60>
 800b910:	782a      	ldrb	r2, [r5, #0]
 800b912:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b916:	2a58      	cmp	r2, #88	@ 0x58
 800b918:	d108      	bne.n	800b92c <_strtol_l.isra.0+0x60>
 800b91a:	786c      	ldrb	r4, [r5, #1]
 800b91c:	3502      	adds	r5, #2
 800b91e:	2310      	movs	r3, #16
 800b920:	e00a      	b.n	800b938 <_strtol_l.isra.0+0x6c>
 800b922:	2c2b      	cmp	r4, #43	@ 0x2b
 800b924:	bf04      	itt	eq
 800b926:	782c      	ldrbeq	r4, [r5, #0]
 800b928:	1c95      	addeq	r5, r2, #2
 800b92a:	e7ec      	b.n	800b906 <_strtol_l.isra.0+0x3a>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f6      	bne.n	800b91e <_strtol_l.isra.0+0x52>
 800b930:	2c30      	cmp	r4, #48	@ 0x30
 800b932:	bf14      	ite	ne
 800b934:	230a      	movne	r3, #10
 800b936:	2308      	moveq	r3, #8
 800b938:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b93c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b940:	2200      	movs	r2, #0
 800b942:	fbbc f9f3 	udiv	r9, ip, r3
 800b946:	4610      	mov	r0, r2
 800b948:	fb03 ca19 	mls	sl, r3, r9, ip
 800b94c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b950:	2f09      	cmp	r7, #9
 800b952:	d80f      	bhi.n	800b974 <_strtol_l.isra.0+0xa8>
 800b954:	463c      	mov	r4, r7
 800b956:	42a3      	cmp	r3, r4
 800b958:	dd1b      	ble.n	800b992 <_strtol_l.isra.0+0xc6>
 800b95a:	1c57      	adds	r7, r2, #1
 800b95c:	d007      	beq.n	800b96e <_strtol_l.isra.0+0xa2>
 800b95e:	4581      	cmp	r9, r0
 800b960:	d314      	bcc.n	800b98c <_strtol_l.isra.0+0xc0>
 800b962:	d101      	bne.n	800b968 <_strtol_l.isra.0+0x9c>
 800b964:	45a2      	cmp	sl, r4
 800b966:	db11      	blt.n	800b98c <_strtol_l.isra.0+0xc0>
 800b968:	fb00 4003 	mla	r0, r0, r3, r4
 800b96c:	2201      	movs	r2, #1
 800b96e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b972:	e7eb      	b.n	800b94c <_strtol_l.isra.0+0x80>
 800b974:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b978:	2f19      	cmp	r7, #25
 800b97a:	d801      	bhi.n	800b980 <_strtol_l.isra.0+0xb4>
 800b97c:	3c37      	subs	r4, #55	@ 0x37
 800b97e:	e7ea      	b.n	800b956 <_strtol_l.isra.0+0x8a>
 800b980:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b984:	2f19      	cmp	r7, #25
 800b986:	d804      	bhi.n	800b992 <_strtol_l.isra.0+0xc6>
 800b988:	3c57      	subs	r4, #87	@ 0x57
 800b98a:	e7e4      	b.n	800b956 <_strtol_l.isra.0+0x8a>
 800b98c:	f04f 32ff 	mov.w	r2, #4294967295
 800b990:	e7ed      	b.n	800b96e <_strtol_l.isra.0+0xa2>
 800b992:	1c53      	adds	r3, r2, #1
 800b994:	d108      	bne.n	800b9a8 <_strtol_l.isra.0+0xdc>
 800b996:	2322      	movs	r3, #34	@ 0x22
 800b998:	f8ce 3000 	str.w	r3, [lr]
 800b99c:	4660      	mov	r0, ip
 800b99e:	f1b8 0f00 	cmp.w	r8, #0
 800b9a2:	d0a0      	beq.n	800b8e6 <_strtol_l.isra.0+0x1a>
 800b9a4:	1e69      	subs	r1, r5, #1
 800b9a6:	e006      	b.n	800b9b6 <_strtol_l.isra.0+0xea>
 800b9a8:	b106      	cbz	r6, 800b9ac <_strtol_l.isra.0+0xe0>
 800b9aa:	4240      	negs	r0, r0
 800b9ac:	f1b8 0f00 	cmp.w	r8, #0
 800b9b0:	d099      	beq.n	800b8e6 <_strtol_l.isra.0+0x1a>
 800b9b2:	2a00      	cmp	r2, #0
 800b9b4:	d1f6      	bne.n	800b9a4 <_strtol_l.isra.0+0xd8>
 800b9b6:	f8c8 1000 	str.w	r1, [r8]
 800b9ba:	e794      	b.n	800b8e6 <_strtol_l.isra.0+0x1a>
 800b9bc:	0800d091 	.word	0x0800d091

0800b9c0 <_strtol_r>:
 800b9c0:	f7ff bf84 	b.w	800b8cc <_strtol_l.isra.0>

0800b9c4 <__ssputs_r>:
 800b9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9c8:	688e      	ldr	r6, [r1, #8]
 800b9ca:	461f      	mov	r7, r3
 800b9cc:	42be      	cmp	r6, r7
 800b9ce:	680b      	ldr	r3, [r1, #0]
 800b9d0:	4682      	mov	sl, r0
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	4690      	mov	r8, r2
 800b9d6:	d82d      	bhi.n	800ba34 <__ssputs_r+0x70>
 800b9d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9e0:	d026      	beq.n	800ba30 <__ssputs_r+0x6c>
 800b9e2:	6965      	ldr	r5, [r4, #20]
 800b9e4:	6909      	ldr	r1, [r1, #16]
 800b9e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9ea:	eba3 0901 	sub.w	r9, r3, r1
 800b9ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9f2:	1c7b      	adds	r3, r7, #1
 800b9f4:	444b      	add	r3, r9
 800b9f6:	106d      	asrs	r5, r5, #1
 800b9f8:	429d      	cmp	r5, r3
 800b9fa:	bf38      	it	cc
 800b9fc:	461d      	movcc	r5, r3
 800b9fe:	0553      	lsls	r3, r2, #21
 800ba00:	d527      	bpl.n	800ba52 <__ssputs_r+0x8e>
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7fe fc24 	bl	800a250 <_malloc_r>
 800ba08:	4606      	mov	r6, r0
 800ba0a:	b360      	cbz	r0, 800ba66 <__ssputs_r+0xa2>
 800ba0c:	6921      	ldr	r1, [r4, #16]
 800ba0e:	464a      	mov	r2, r9
 800ba10:	f7fd fd3b 	bl	800948a <memcpy>
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba1e:	81a3      	strh	r3, [r4, #12]
 800ba20:	6126      	str	r6, [r4, #16]
 800ba22:	6165      	str	r5, [r4, #20]
 800ba24:	444e      	add	r6, r9
 800ba26:	eba5 0509 	sub.w	r5, r5, r9
 800ba2a:	6026      	str	r6, [r4, #0]
 800ba2c:	60a5      	str	r5, [r4, #8]
 800ba2e:	463e      	mov	r6, r7
 800ba30:	42be      	cmp	r6, r7
 800ba32:	d900      	bls.n	800ba36 <__ssputs_r+0x72>
 800ba34:	463e      	mov	r6, r7
 800ba36:	6820      	ldr	r0, [r4, #0]
 800ba38:	4632      	mov	r2, r6
 800ba3a:	4641      	mov	r1, r8
 800ba3c:	f000 fb6a 	bl	800c114 <memmove>
 800ba40:	68a3      	ldr	r3, [r4, #8]
 800ba42:	1b9b      	subs	r3, r3, r6
 800ba44:	60a3      	str	r3, [r4, #8]
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	4433      	add	r3, r6
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	462a      	mov	r2, r5
 800ba54:	f000 ff41 	bl	800c8da <_realloc_r>
 800ba58:	4606      	mov	r6, r0
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d1e0      	bne.n	800ba20 <__ssputs_r+0x5c>
 800ba5e:	6921      	ldr	r1, [r4, #16]
 800ba60:	4650      	mov	r0, sl
 800ba62:	f7fe fb81 	bl	800a168 <_free_r>
 800ba66:	230c      	movs	r3, #12
 800ba68:	f8ca 3000 	str.w	r3, [sl]
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	e7e9      	b.n	800ba4e <__ssputs_r+0x8a>
	...

0800ba7c <_svfiprintf_r>:
 800ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	4698      	mov	r8, r3
 800ba82:	898b      	ldrh	r3, [r1, #12]
 800ba84:	061b      	lsls	r3, r3, #24
 800ba86:	b09d      	sub	sp, #116	@ 0x74
 800ba88:	4607      	mov	r7, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	4614      	mov	r4, r2
 800ba8e:	d510      	bpl.n	800bab2 <_svfiprintf_r+0x36>
 800ba90:	690b      	ldr	r3, [r1, #16]
 800ba92:	b973      	cbnz	r3, 800bab2 <_svfiprintf_r+0x36>
 800ba94:	2140      	movs	r1, #64	@ 0x40
 800ba96:	f7fe fbdb 	bl	800a250 <_malloc_r>
 800ba9a:	6028      	str	r0, [r5, #0]
 800ba9c:	6128      	str	r0, [r5, #16]
 800ba9e:	b930      	cbnz	r0, 800baae <_svfiprintf_r+0x32>
 800baa0:	230c      	movs	r3, #12
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	f04f 30ff 	mov.w	r0, #4294967295
 800baa8:	b01d      	add	sp, #116	@ 0x74
 800baaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baae:	2340      	movs	r3, #64	@ 0x40
 800bab0:	616b      	str	r3, [r5, #20]
 800bab2:	2300      	movs	r3, #0
 800bab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab6:	2320      	movs	r3, #32
 800bab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800babc:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac0:	2330      	movs	r3, #48	@ 0x30
 800bac2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc60 <_svfiprintf_r+0x1e4>
 800bac6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800baca:	f04f 0901 	mov.w	r9, #1
 800bace:	4623      	mov	r3, r4
 800bad0:	469a      	mov	sl, r3
 800bad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bad6:	b10a      	cbz	r2, 800badc <_svfiprintf_r+0x60>
 800bad8:	2a25      	cmp	r2, #37	@ 0x25
 800bada:	d1f9      	bne.n	800bad0 <_svfiprintf_r+0x54>
 800badc:	ebba 0b04 	subs.w	fp, sl, r4
 800bae0:	d00b      	beq.n	800bafa <_svfiprintf_r+0x7e>
 800bae2:	465b      	mov	r3, fp
 800bae4:	4622      	mov	r2, r4
 800bae6:	4629      	mov	r1, r5
 800bae8:	4638      	mov	r0, r7
 800baea:	f7ff ff6b 	bl	800b9c4 <__ssputs_r>
 800baee:	3001      	adds	r0, #1
 800baf0:	f000 80a7 	beq.w	800bc42 <_svfiprintf_r+0x1c6>
 800baf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baf6:	445a      	add	r2, fp
 800baf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bafa:	f89a 3000 	ldrb.w	r3, [sl]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 809f 	beq.w	800bc42 <_svfiprintf_r+0x1c6>
 800bb04:	2300      	movs	r3, #0
 800bb06:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb0e:	f10a 0a01 	add.w	sl, sl, #1
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	9307      	str	r3, [sp, #28]
 800bb16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb1a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb1c:	4654      	mov	r4, sl
 800bb1e:	2205      	movs	r2, #5
 800bb20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb24:	484e      	ldr	r0, [pc, #312]	@ (800bc60 <_svfiprintf_r+0x1e4>)
 800bb26:	f7f4 fb53 	bl	80001d0 <memchr>
 800bb2a:	9a04      	ldr	r2, [sp, #16]
 800bb2c:	b9d8      	cbnz	r0, 800bb66 <_svfiprintf_r+0xea>
 800bb2e:	06d0      	lsls	r0, r2, #27
 800bb30:	bf44      	itt	mi
 800bb32:	2320      	movmi	r3, #32
 800bb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb38:	0711      	lsls	r1, r2, #28
 800bb3a:	bf44      	itt	mi
 800bb3c:	232b      	movmi	r3, #43	@ 0x2b
 800bb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb42:	f89a 3000 	ldrb.w	r3, [sl]
 800bb46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb48:	d015      	beq.n	800bb76 <_svfiprintf_r+0xfa>
 800bb4a:	9a07      	ldr	r2, [sp, #28]
 800bb4c:	4654      	mov	r4, sl
 800bb4e:	2000      	movs	r0, #0
 800bb50:	f04f 0c0a 	mov.w	ip, #10
 800bb54:	4621      	mov	r1, r4
 800bb56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb5a:	3b30      	subs	r3, #48	@ 0x30
 800bb5c:	2b09      	cmp	r3, #9
 800bb5e:	d94b      	bls.n	800bbf8 <_svfiprintf_r+0x17c>
 800bb60:	b1b0      	cbz	r0, 800bb90 <_svfiprintf_r+0x114>
 800bb62:	9207      	str	r2, [sp, #28]
 800bb64:	e014      	b.n	800bb90 <_svfiprintf_r+0x114>
 800bb66:	eba0 0308 	sub.w	r3, r0, r8
 800bb6a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	9304      	str	r3, [sp, #16]
 800bb72:	46a2      	mov	sl, r4
 800bb74:	e7d2      	b.n	800bb1c <_svfiprintf_r+0xa0>
 800bb76:	9b03      	ldr	r3, [sp, #12]
 800bb78:	1d19      	adds	r1, r3, #4
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	9103      	str	r1, [sp, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	bfbb      	ittet	lt
 800bb82:	425b      	neglt	r3, r3
 800bb84:	f042 0202 	orrlt.w	r2, r2, #2
 800bb88:	9307      	strge	r3, [sp, #28]
 800bb8a:	9307      	strlt	r3, [sp, #28]
 800bb8c:	bfb8      	it	lt
 800bb8e:	9204      	strlt	r2, [sp, #16]
 800bb90:	7823      	ldrb	r3, [r4, #0]
 800bb92:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb94:	d10a      	bne.n	800bbac <_svfiprintf_r+0x130>
 800bb96:	7863      	ldrb	r3, [r4, #1]
 800bb98:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb9a:	d132      	bne.n	800bc02 <_svfiprintf_r+0x186>
 800bb9c:	9b03      	ldr	r3, [sp, #12]
 800bb9e:	1d1a      	adds	r2, r3, #4
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	9203      	str	r2, [sp, #12]
 800bba4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bba8:	3402      	adds	r4, #2
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc70 <_svfiprintf_r+0x1f4>
 800bbb0:	7821      	ldrb	r1, [r4, #0]
 800bbb2:	2203      	movs	r2, #3
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	f7f4 fb0b 	bl	80001d0 <memchr>
 800bbba:	b138      	cbz	r0, 800bbcc <_svfiprintf_r+0x150>
 800bbbc:	9b04      	ldr	r3, [sp, #16]
 800bbbe:	eba0 000a 	sub.w	r0, r0, sl
 800bbc2:	2240      	movs	r2, #64	@ 0x40
 800bbc4:	4082      	lsls	r2, r0
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	3401      	adds	r4, #1
 800bbca:	9304      	str	r3, [sp, #16]
 800bbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd0:	4824      	ldr	r0, [pc, #144]	@ (800bc64 <_svfiprintf_r+0x1e8>)
 800bbd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbd6:	2206      	movs	r2, #6
 800bbd8:	f7f4 fafa 	bl	80001d0 <memchr>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	d036      	beq.n	800bc4e <_svfiprintf_r+0x1d2>
 800bbe0:	4b21      	ldr	r3, [pc, #132]	@ (800bc68 <_svfiprintf_r+0x1ec>)
 800bbe2:	bb1b      	cbnz	r3, 800bc2c <_svfiprintf_r+0x1b0>
 800bbe4:	9b03      	ldr	r3, [sp, #12]
 800bbe6:	3307      	adds	r3, #7
 800bbe8:	f023 0307 	bic.w	r3, r3, #7
 800bbec:	3308      	adds	r3, #8
 800bbee:	9303      	str	r3, [sp, #12]
 800bbf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf2:	4433      	add	r3, r6
 800bbf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbf6:	e76a      	b.n	800bace <_svfiprintf_r+0x52>
 800bbf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	2001      	movs	r0, #1
 800bc00:	e7a8      	b.n	800bb54 <_svfiprintf_r+0xd8>
 800bc02:	2300      	movs	r3, #0
 800bc04:	3401      	adds	r4, #1
 800bc06:	9305      	str	r3, [sp, #20]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	f04f 0c0a 	mov.w	ip, #10
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc14:	3a30      	subs	r2, #48	@ 0x30
 800bc16:	2a09      	cmp	r2, #9
 800bc18:	d903      	bls.n	800bc22 <_svfiprintf_r+0x1a6>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d0c6      	beq.n	800bbac <_svfiprintf_r+0x130>
 800bc1e:	9105      	str	r1, [sp, #20]
 800bc20:	e7c4      	b.n	800bbac <_svfiprintf_r+0x130>
 800bc22:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc26:	4604      	mov	r4, r0
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e7f0      	b.n	800bc0e <_svfiprintf_r+0x192>
 800bc2c:	ab03      	add	r3, sp, #12
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	462a      	mov	r2, r5
 800bc32:	4b0e      	ldr	r3, [pc, #56]	@ (800bc6c <_svfiprintf_r+0x1f0>)
 800bc34:	a904      	add	r1, sp, #16
 800bc36:	4638      	mov	r0, r7
 800bc38:	f7fc fbb8 	bl	80083ac <_printf_float>
 800bc3c:	1c42      	adds	r2, r0, #1
 800bc3e:	4606      	mov	r6, r0
 800bc40:	d1d6      	bne.n	800bbf0 <_svfiprintf_r+0x174>
 800bc42:	89ab      	ldrh	r3, [r5, #12]
 800bc44:	065b      	lsls	r3, r3, #25
 800bc46:	f53f af2d 	bmi.w	800baa4 <_svfiprintf_r+0x28>
 800bc4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc4c:	e72c      	b.n	800baa8 <_svfiprintf_r+0x2c>
 800bc4e:	ab03      	add	r3, sp, #12
 800bc50:	9300      	str	r3, [sp, #0]
 800bc52:	462a      	mov	r2, r5
 800bc54:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <_svfiprintf_r+0x1f0>)
 800bc56:	a904      	add	r1, sp, #16
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7fc fe3f 	bl	80088dc <_printf_i>
 800bc5e:	e7ed      	b.n	800bc3c <_svfiprintf_r+0x1c0>
 800bc60:	0800ce89 	.word	0x0800ce89
 800bc64:	0800ce93 	.word	0x0800ce93
 800bc68:	080083ad 	.word	0x080083ad
 800bc6c:	0800b9c5 	.word	0x0800b9c5
 800bc70:	0800ce8f 	.word	0x0800ce8f

0800bc74 <__sfputc_r>:
 800bc74:	6893      	ldr	r3, [r2, #8]
 800bc76:	3b01      	subs	r3, #1
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	b410      	push	{r4}
 800bc7c:	6093      	str	r3, [r2, #8]
 800bc7e:	da08      	bge.n	800bc92 <__sfputc_r+0x1e>
 800bc80:	6994      	ldr	r4, [r2, #24]
 800bc82:	42a3      	cmp	r3, r4
 800bc84:	db01      	blt.n	800bc8a <__sfputc_r+0x16>
 800bc86:	290a      	cmp	r1, #10
 800bc88:	d103      	bne.n	800bc92 <__sfputc_r+0x1e>
 800bc8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8e:	f7fd bae8 	b.w	8009262 <__swbuf_r>
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	1c58      	adds	r0, r3, #1
 800bc96:	6010      	str	r0, [r2, #0]
 800bc98:	7019      	strb	r1, [r3, #0]
 800bc9a:	4608      	mov	r0, r1
 800bc9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca0:	4770      	bx	lr

0800bca2 <__sfputs_r>:
 800bca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca4:	4606      	mov	r6, r0
 800bca6:	460f      	mov	r7, r1
 800bca8:	4614      	mov	r4, r2
 800bcaa:	18d5      	adds	r5, r2, r3
 800bcac:	42ac      	cmp	r4, r5
 800bcae:	d101      	bne.n	800bcb4 <__sfputs_r+0x12>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	e007      	b.n	800bcc4 <__sfputs_r+0x22>
 800bcb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb8:	463a      	mov	r2, r7
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ffda 	bl	800bc74 <__sfputc_r>
 800bcc0:	1c43      	adds	r3, r0, #1
 800bcc2:	d1f3      	bne.n	800bcac <__sfputs_r+0xa>
 800bcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcc8 <_vfiprintf_r>:
 800bcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bccc:	460d      	mov	r5, r1
 800bcce:	b09d      	sub	sp, #116	@ 0x74
 800bcd0:	4614      	mov	r4, r2
 800bcd2:	4698      	mov	r8, r3
 800bcd4:	4606      	mov	r6, r0
 800bcd6:	b118      	cbz	r0, 800bce0 <_vfiprintf_r+0x18>
 800bcd8:	6a03      	ldr	r3, [r0, #32]
 800bcda:	b90b      	cbnz	r3, 800bce0 <_vfiprintf_r+0x18>
 800bcdc:	f7fd f9b6 	bl	800904c <__sinit>
 800bce0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bce2:	07d9      	lsls	r1, r3, #31
 800bce4:	d405      	bmi.n	800bcf2 <_vfiprintf_r+0x2a>
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	059a      	lsls	r2, r3, #22
 800bcea:	d402      	bmi.n	800bcf2 <_vfiprintf_r+0x2a>
 800bcec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcee:	f7fd fbca 	bl	8009486 <__retarget_lock_acquire_recursive>
 800bcf2:	89ab      	ldrh	r3, [r5, #12]
 800bcf4:	071b      	lsls	r3, r3, #28
 800bcf6:	d501      	bpl.n	800bcfc <_vfiprintf_r+0x34>
 800bcf8:	692b      	ldr	r3, [r5, #16]
 800bcfa:	b99b      	cbnz	r3, 800bd24 <_vfiprintf_r+0x5c>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7fd faee 	bl	80092e0 <__swsetup_r>
 800bd04:	b170      	cbz	r0, 800bd24 <_vfiprintf_r+0x5c>
 800bd06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd08:	07dc      	lsls	r4, r3, #31
 800bd0a:	d504      	bpl.n	800bd16 <_vfiprintf_r+0x4e>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	b01d      	add	sp, #116	@ 0x74
 800bd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	0598      	lsls	r0, r3, #22
 800bd1a:	d4f7      	bmi.n	800bd0c <_vfiprintf_r+0x44>
 800bd1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd1e:	f7fd fbb3 	bl	8009488 <__retarget_lock_release_recursive>
 800bd22:	e7f3      	b.n	800bd0c <_vfiprintf_r+0x44>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd32:	2330      	movs	r3, #48	@ 0x30
 800bd34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bee4 <_vfiprintf_r+0x21c>
 800bd38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd3c:	f04f 0901 	mov.w	r9, #1
 800bd40:	4623      	mov	r3, r4
 800bd42:	469a      	mov	sl, r3
 800bd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd48:	b10a      	cbz	r2, 800bd4e <_vfiprintf_r+0x86>
 800bd4a:	2a25      	cmp	r2, #37	@ 0x25
 800bd4c:	d1f9      	bne.n	800bd42 <_vfiprintf_r+0x7a>
 800bd4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd52:	d00b      	beq.n	800bd6c <_vfiprintf_r+0xa4>
 800bd54:	465b      	mov	r3, fp
 800bd56:	4622      	mov	r2, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7ff ffa1 	bl	800bca2 <__sfputs_r>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f000 80a7 	beq.w	800beb4 <_vfiprintf_r+0x1ec>
 800bd66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd68:	445a      	add	r2, fp
 800bd6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 809f 	beq.w	800beb4 <_vfiprintf_r+0x1ec>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd80:	f10a 0a01 	add.w	sl, sl, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd8e:	4654      	mov	r4, sl
 800bd90:	2205      	movs	r2, #5
 800bd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd96:	4853      	ldr	r0, [pc, #332]	@ (800bee4 <_vfiprintf_r+0x21c>)
 800bd98:	f7f4 fa1a 	bl	80001d0 <memchr>
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	b9d8      	cbnz	r0, 800bdd8 <_vfiprintf_r+0x110>
 800bda0:	06d1      	lsls	r1, r2, #27
 800bda2:	bf44      	itt	mi
 800bda4:	2320      	movmi	r3, #32
 800bda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdaa:	0713      	lsls	r3, r2, #28
 800bdac:	bf44      	itt	mi
 800bdae:	232b      	movmi	r3, #43	@ 0x2b
 800bdb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdba:	d015      	beq.n	800bde8 <_vfiprintf_r+0x120>
 800bdbc:	9a07      	ldr	r2, [sp, #28]
 800bdbe:	4654      	mov	r4, sl
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f04f 0c0a 	mov.w	ip, #10
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdcc:	3b30      	subs	r3, #48	@ 0x30
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d94b      	bls.n	800be6a <_vfiprintf_r+0x1a2>
 800bdd2:	b1b0      	cbz	r0, 800be02 <_vfiprintf_r+0x13a>
 800bdd4:	9207      	str	r2, [sp, #28]
 800bdd6:	e014      	b.n	800be02 <_vfiprintf_r+0x13a>
 800bdd8:	eba0 0308 	sub.w	r3, r0, r8
 800bddc:	fa09 f303 	lsl.w	r3, r9, r3
 800bde0:	4313      	orrs	r3, r2
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	46a2      	mov	sl, r4
 800bde6:	e7d2      	b.n	800bd8e <_vfiprintf_r+0xc6>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	1d19      	adds	r1, r3, #4
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	9103      	str	r1, [sp, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	bfbb      	ittet	lt
 800bdf4:	425b      	neglt	r3, r3
 800bdf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdfa:	9307      	strge	r3, [sp, #28]
 800bdfc:	9307      	strlt	r3, [sp, #28]
 800bdfe:	bfb8      	it	lt
 800be00:	9204      	strlt	r2, [sp, #16]
 800be02:	7823      	ldrb	r3, [r4, #0]
 800be04:	2b2e      	cmp	r3, #46	@ 0x2e
 800be06:	d10a      	bne.n	800be1e <_vfiprintf_r+0x156>
 800be08:	7863      	ldrb	r3, [r4, #1]
 800be0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be0c:	d132      	bne.n	800be74 <_vfiprintf_r+0x1ac>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	1d1a      	adds	r2, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9203      	str	r2, [sp, #12]
 800be16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be1a:	3402      	adds	r4, #2
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bef4 <_vfiprintf_r+0x22c>
 800be22:	7821      	ldrb	r1, [r4, #0]
 800be24:	2203      	movs	r2, #3
 800be26:	4650      	mov	r0, sl
 800be28:	f7f4 f9d2 	bl	80001d0 <memchr>
 800be2c:	b138      	cbz	r0, 800be3e <_vfiprintf_r+0x176>
 800be2e:	9b04      	ldr	r3, [sp, #16]
 800be30:	eba0 000a 	sub.w	r0, r0, sl
 800be34:	2240      	movs	r2, #64	@ 0x40
 800be36:	4082      	lsls	r2, r0
 800be38:	4313      	orrs	r3, r2
 800be3a:	3401      	adds	r4, #1
 800be3c:	9304      	str	r3, [sp, #16]
 800be3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be42:	4829      	ldr	r0, [pc, #164]	@ (800bee8 <_vfiprintf_r+0x220>)
 800be44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be48:	2206      	movs	r2, #6
 800be4a:	f7f4 f9c1 	bl	80001d0 <memchr>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d03f      	beq.n	800bed2 <_vfiprintf_r+0x20a>
 800be52:	4b26      	ldr	r3, [pc, #152]	@ (800beec <_vfiprintf_r+0x224>)
 800be54:	bb1b      	cbnz	r3, 800be9e <_vfiprintf_r+0x1d6>
 800be56:	9b03      	ldr	r3, [sp, #12]
 800be58:	3307      	adds	r3, #7
 800be5a:	f023 0307 	bic.w	r3, r3, #7
 800be5e:	3308      	adds	r3, #8
 800be60:	9303      	str	r3, [sp, #12]
 800be62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be64:	443b      	add	r3, r7
 800be66:	9309      	str	r3, [sp, #36]	@ 0x24
 800be68:	e76a      	b.n	800bd40 <_vfiprintf_r+0x78>
 800be6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be6e:	460c      	mov	r4, r1
 800be70:	2001      	movs	r0, #1
 800be72:	e7a8      	b.n	800bdc6 <_vfiprintf_r+0xfe>
 800be74:	2300      	movs	r3, #0
 800be76:	3401      	adds	r4, #1
 800be78:	9305      	str	r3, [sp, #20]
 800be7a:	4619      	mov	r1, r3
 800be7c:	f04f 0c0a 	mov.w	ip, #10
 800be80:	4620      	mov	r0, r4
 800be82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be86:	3a30      	subs	r2, #48	@ 0x30
 800be88:	2a09      	cmp	r2, #9
 800be8a:	d903      	bls.n	800be94 <_vfiprintf_r+0x1cc>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0c6      	beq.n	800be1e <_vfiprintf_r+0x156>
 800be90:	9105      	str	r1, [sp, #20]
 800be92:	e7c4      	b.n	800be1e <_vfiprintf_r+0x156>
 800be94:	fb0c 2101 	mla	r1, ip, r1, r2
 800be98:	4604      	mov	r4, r0
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7f0      	b.n	800be80 <_vfiprintf_r+0x1b8>
 800be9e:	ab03      	add	r3, sp, #12
 800bea0:	9300      	str	r3, [sp, #0]
 800bea2:	462a      	mov	r2, r5
 800bea4:	4b12      	ldr	r3, [pc, #72]	@ (800bef0 <_vfiprintf_r+0x228>)
 800bea6:	a904      	add	r1, sp, #16
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7fc fa7f 	bl	80083ac <_printf_float>
 800beae:	4607      	mov	r7, r0
 800beb0:	1c78      	adds	r0, r7, #1
 800beb2:	d1d6      	bne.n	800be62 <_vfiprintf_r+0x19a>
 800beb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beb6:	07d9      	lsls	r1, r3, #31
 800beb8:	d405      	bmi.n	800bec6 <_vfiprintf_r+0x1fe>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	059a      	lsls	r2, r3, #22
 800bebe:	d402      	bmi.n	800bec6 <_vfiprintf_r+0x1fe>
 800bec0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bec2:	f7fd fae1 	bl	8009488 <__retarget_lock_release_recursive>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	065b      	lsls	r3, r3, #25
 800beca:	f53f af1f 	bmi.w	800bd0c <_vfiprintf_r+0x44>
 800bece:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bed0:	e71e      	b.n	800bd10 <_vfiprintf_r+0x48>
 800bed2:	ab03      	add	r3, sp, #12
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	462a      	mov	r2, r5
 800bed8:	4b05      	ldr	r3, [pc, #20]	@ (800bef0 <_vfiprintf_r+0x228>)
 800beda:	a904      	add	r1, sp, #16
 800bedc:	4630      	mov	r0, r6
 800bede:	f7fc fcfd 	bl	80088dc <_printf_i>
 800bee2:	e7e4      	b.n	800beae <_vfiprintf_r+0x1e6>
 800bee4:	0800ce89 	.word	0x0800ce89
 800bee8:	0800ce93 	.word	0x0800ce93
 800beec:	080083ad 	.word	0x080083ad
 800bef0:	0800bca3 	.word	0x0800bca3
 800bef4:	0800ce8f 	.word	0x0800ce8f

0800bef8 <__sflush_r>:
 800bef8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	0716      	lsls	r6, r2, #28
 800bf02:	4605      	mov	r5, r0
 800bf04:	460c      	mov	r4, r1
 800bf06:	d454      	bmi.n	800bfb2 <__sflush_r+0xba>
 800bf08:	684b      	ldr	r3, [r1, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dc02      	bgt.n	800bf14 <__sflush_r+0x1c>
 800bf0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	dd48      	ble.n	800bfa6 <__sflush_r+0xae>
 800bf14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf16:	2e00      	cmp	r6, #0
 800bf18:	d045      	beq.n	800bfa6 <__sflush_r+0xae>
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf20:	682f      	ldr	r7, [r5, #0]
 800bf22:	6a21      	ldr	r1, [r4, #32]
 800bf24:	602b      	str	r3, [r5, #0]
 800bf26:	d030      	beq.n	800bf8a <__sflush_r+0x92>
 800bf28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	0759      	lsls	r1, r3, #29
 800bf2e:	d505      	bpl.n	800bf3c <__sflush_r+0x44>
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	1ad2      	subs	r2, r2, r3
 800bf34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf36:	b10b      	cbz	r3, 800bf3c <__sflush_r+0x44>
 800bf38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf3a:	1ad2      	subs	r2, r2, r3
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf40:	6a21      	ldr	r1, [r4, #32]
 800bf42:	4628      	mov	r0, r5
 800bf44:	47b0      	blx	r6
 800bf46:	1c43      	adds	r3, r0, #1
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	d106      	bne.n	800bf5a <__sflush_r+0x62>
 800bf4c:	6829      	ldr	r1, [r5, #0]
 800bf4e:	291d      	cmp	r1, #29
 800bf50:	d82b      	bhi.n	800bfaa <__sflush_r+0xb2>
 800bf52:	4a2a      	ldr	r2, [pc, #168]	@ (800bffc <__sflush_r+0x104>)
 800bf54:	40ca      	lsrs	r2, r1
 800bf56:	07d6      	lsls	r6, r2, #31
 800bf58:	d527      	bpl.n	800bfaa <__sflush_r+0xb2>
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	6062      	str	r2, [r4, #4]
 800bf5e:	04d9      	lsls	r1, r3, #19
 800bf60:	6922      	ldr	r2, [r4, #16]
 800bf62:	6022      	str	r2, [r4, #0]
 800bf64:	d504      	bpl.n	800bf70 <__sflush_r+0x78>
 800bf66:	1c42      	adds	r2, r0, #1
 800bf68:	d101      	bne.n	800bf6e <__sflush_r+0x76>
 800bf6a:	682b      	ldr	r3, [r5, #0]
 800bf6c:	b903      	cbnz	r3, 800bf70 <__sflush_r+0x78>
 800bf6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf72:	602f      	str	r7, [r5, #0]
 800bf74:	b1b9      	cbz	r1, 800bfa6 <__sflush_r+0xae>
 800bf76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf7a:	4299      	cmp	r1, r3
 800bf7c:	d002      	beq.n	800bf84 <__sflush_r+0x8c>
 800bf7e:	4628      	mov	r0, r5
 800bf80:	f7fe f8f2 	bl	800a168 <_free_r>
 800bf84:	2300      	movs	r3, #0
 800bf86:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf88:	e00d      	b.n	800bfa6 <__sflush_r+0xae>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b0      	blx	r6
 800bf90:	4602      	mov	r2, r0
 800bf92:	1c50      	adds	r0, r2, #1
 800bf94:	d1c9      	bne.n	800bf2a <__sflush_r+0x32>
 800bf96:	682b      	ldr	r3, [r5, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0c6      	beq.n	800bf2a <__sflush_r+0x32>
 800bf9c:	2b1d      	cmp	r3, #29
 800bf9e:	d001      	beq.n	800bfa4 <__sflush_r+0xac>
 800bfa0:	2b16      	cmp	r3, #22
 800bfa2:	d11e      	bne.n	800bfe2 <__sflush_r+0xea>
 800bfa4:	602f      	str	r7, [r5, #0]
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	e022      	b.n	800bff0 <__sflush_r+0xf8>
 800bfaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfae:	b21b      	sxth	r3, r3
 800bfb0:	e01b      	b.n	800bfea <__sflush_r+0xf2>
 800bfb2:	690f      	ldr	r7, [r1, #16]
 800bfb4:	2f00      	cmp	r7, #0
 800bfb6:	d0f6      	beq.n	800bfa6 <__sflush_r+0xae>
 800bfb8:	0793      	lsls	r3, r2, #30
 800bfba:	680e      	ldr	r6, [r1, #0]
 800bfbc:	bf08      	it	eq
 800bfbe:	694b      	ldreq	r3, [r1, #20]
 800bfc0:	600f      	str	r7, [r1, #0]
 800bfc2:	bf18      	it	ne
 800bfc4:	2300      	movne	r3, #0
 800bfc6:	eba6 0807 	sub.w	r8, r6, r7
 800bfca:	608b      	str	r3, [r1, #8]
 800bfcc:	f1b8 0f00 	cmp.w	r8, #0
 800bfd0:	dde9      	ble.n	800bfa6 <__sflush_r+0xae>
 800bfd2:	6a21      	ldr	r1, [r4, #32]
 800bfd4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfd6:	4643      	mov	r3, r8
 800bfd8:	463a      	mov	r2, r7
 800bfda:	4628      	mov	r0, r5
 800bfdc:	47b0      	blx	r6
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	dc08      	bgt.n	800bff4 <__sflush_r+0xfc>
 800bfe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfea:	81a3      	strh	r3, [r4, #12]
 800bfec:	f04f 30ff 	mov.w	r0, #4294967295
 800bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff4:	4407      	add	r7, r0
 800bff6:	eba8 0800 	sub.w	r8, r8, r0
 800bffa:	e7e7      	b.n	800bfcc <__sflush_r+0xd4>
 800bffc:	20400001 	.word	0x20400001

0800c000 <_fflush_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	690b      	ldr	r3, [r1, #16]
 800c004:	4605      	mov	r5, r0
 800c006:	460c      	mov	r4, r1
 800c008:	b913      	cbnz	r3, 800c010 <_fflush_r+0x10>
 800c00a:	2500      	movs	r5, #0
 800c00c:	4628      	mov	r0, r5
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	b118      	cbz	r0, 800c01a <_fflush_r+0x1a>
 800c012:	6a03      	ldr	r3, [r0, #32]
 800c014:	b90b      	cbnz	r3, 800c01a <_fflush_r+0x1a>
 800c016:	f7fd f819 	bl	800904c <__sinit>
 800c01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0f3      	beq.n	800c00a <_fflush_r+0xa>
 800c022:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c024:	07d0      	lsls	r0, r2, #31
 800c026:	d404      	bmi.n	800c032 <_fflush_r+0x32>
 800c028:	0599      	lsls	r1, r3, #22
 800c02a:	d402      	bmi.n	800c032 <_fflush_r+0x32>
 800c02c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c02e:	f7fd fa2a 	bl	8009486 <__retarget_lock_acquire_recursive>
 800c032:	4628      	mov	r0, r5
 800c034:	4621      	mov	r1, r4
 800c036:	f7ff ff5f 	bl	800bef8 <__sflush_r>
 800c03a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c03c:	07da      	lsls	r2, r3, #31
 800c03e:	4605      	mov	r5, r0
 800c040:	d4e4      	bmi.n	800c00c <_fflush_r+0xc>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	059b      	lsls	r3, r3, #22
 800c046:	d4e1      	bmi.n	800c00c <_fflush_r+0xc>
 800c048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c04a:	f7fd fa1d 	bl	8009488 <__retarget_lock_release_recursive>
 800c04e:	e7dd      	b.n	800c00c <_fflush_r+0xc>

0800c050 <__swhatbuf_r>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	460c      	mov	r4, r1
 800c054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c058:	2900      	cmp	r1, #0
 800c05a:	b096      	sub	sp, #88	@ 0x58
 800c05c:	4615      	mov	r5, r2
 800c05e:	461e      	mov	r6, r3
 800c060:	da0d      	bge.n	800c07e <__swhatbuf_r+0x2e>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c068:	f04f 0100 	mov.w	r1, #0
 800c06c:	bf14      	ite	ne
 800c06e:	2340      	movne	r3, #64	@ 0x40
 800c070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c074:	2000      	movs	r0, #0
 800c076:	6031      	str	r1, [r6, #0]
 800c078:	602b      	str	r3, [r5, #0]
 800c07a:	b016      	add	sp, #88	@ 0x58
 800c07c:	bd70      	pop	{r4, r5, r6, pc}
 800c07e:	466a      	mov	r2, sp
 800c080:	f000 f874 	bl	800c16c <_fstat_r>
 800c084:	2800      	cmp	r0, #0
 800c086:	dbec      	blt.n	800c062 <__swhatbuf_r+0x12>
 800c088:	9901      	ldr	r1, [sp, #4]
 800c08a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c08e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c092:	4259      	negs	r1, r3
 800c094:	4159      	adcs	r1, r3
 800c096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c09a:	e7eb      	b.n	800c074 <__swhatbuf_r+0x24>

0800c09c <__smakebuf_r>:
 800c09c:	898b      	ldrh	r3, [r1, #12]
 800c09e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a0:	079d      	lsls	r5, r3, #30
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	d507      	bpl.n	800c0b8 <__smakebuf_r+0x1c>
 800c0a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	6123      	str	r3, [r4, #16]
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	6163      	str	r3, [r4, #20]
 800c0b4:	b003      	add	sp, #12
 800c0b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b8:	ab01      	add	r3, sp, #4
 800c0ba:	466a      	mov	r2, sp
 800c0bc:	f7ff ffc8 	bl	800c050 <__swhatbuf_r>
 800c0c0:	9f00      	ldr	r7, [sp, #0]
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	f7fe f8c2 	bl	800a250 <_malloc_r>
 800c0cc:	b948      	cbnz	r0, 800c0e2 <__smakebuf_r+0x46>
 800c0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d2:	059a      	lsls	r2, r3, #22
 800c0d4:	d4ee      	bmi.n	800c0b4 <__smakebuf_r+0x18>
 800c0d6:	f023 0303 	bic.w	r3, r3, #3
 800c0da:	f043 0302 	orr.w	r3, r3, #2
 800c0de:	81a3      	strh	r3, [r4, #12]
 800c0e0:	e7e2      	b.n	800c0a8 <__smakebuf_r+0xc>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	6020      	str	r0, [r4, #0]
 800c0e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	9b01      	ldr	r3, [sp, #4]
 800c0ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c0f2:	b15b      	cbz	r3, 800c10c <__smakebuf_r+0x70>
 800c0f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f000 f849 	bl	800c190 <_isatty_r>
 800c0fe:	b128      	cbz	r0, 800c10c <__smakebuf_r+0x70>
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	f023 0303 	bic.w	r3, r3, #3
 800c106:	f043 0301 	orr.w	r3, r3, #1
 800c10a:	81a3      	strh	r3, [r4, #12]
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	431d      	orrs	r5, r3
 800c110:	81a5      	strh	r5, [r4, #12]
 800c112:	e7cf      	b.n	800c0b4 <__smakebuf_r+0x18>

0800c114 <memmove>:
 800c114:	4288      	cmp	r0, r1
 800c116:	b510      	push	{r4, lr}
 800c118:	eb01 0402 	add.w	r4, r1, r2
 800c11c:	d902      	bls.n	800c124 <memmove+0x10>
 800c11e:	4284      	cmp	r4, r0
 800c120:	4623      	mov	r3, r4
 800c122:	d807      	bhi.n	800c134 <memmove+0x20>
 800c124:	1e43      	subs	r3, r0, #1
 800c126:	42a1      	cmp	r1, r4
 800c128:	d008      	beq.n	800c13c <memmove+0x28>
 800c12a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c12e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c132:	e7f8      	b.n	800c126 <memmove+0x12>
 800c134:	4402      	add	r2, r0
 800c136:	4601      	mov	r1, r0
 800c138:	428a      	cmp	r2, r1
 800c13a:	d100      	bne.n	800c13e <memmove+0x2a>
 800c13c:	bd10      	pop	{r4, pc}
 800c13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c142:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c146:	e7f7      	b.n	800c138 <memmove+0x24>

0800c148 <strncmp>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	b16a      	cbz	r2, 800c168 <strncmp+0x20>
 800c14c:	3901      	subs	r1, #1
 800c14e:	1884      	adds	r4, r0, r2
 800c150:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c154:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c158:	429a      	cmp	r2, r3
 800c15a:	d103      	bne.n	800c164 <strncmp+0x1c>
 800c15c:	42a0      	cmp	r0, r4
 800c15e:	d001      	beq.n	800c164 <strncmp+0x1c>
 800c160:	2a00      	cmp	r2, #0
 800c162:	d1f5      	bne.n	800c150 <strncmp+0x8>
 800c164:	1ad0      	subs	r0, r2, r3
 800c166:	bd10      	pop	{r4, pc}
 800c168:	4610      	mov	r0, r2
 800c16a:	e7fc      	b.n	800c166 <strncmp+0x1e>

0800c16c <_fstat_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	@ (800c18c <_fstat_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7f5 fb5b 	bl	8001834 <_fstat>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_fstat_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_fstat_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	20000650 	.word	0x20000650

0800c190 <_isatty_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d06      	ldr	r5, [pc, #24]	@ (800c1ac <_isatty_r+0x1c>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	602b      	str	r3, [r5, #0]
 800c19c:	f7f5 fb5a 	bl	8001854 <_isatty>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d102      	bne.n	800c1aa <_isatty_r+0x1a>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	b103      	cbz	r3, 800c1aa <_isatty_r+0x1a>
 800c1a8:	6023      	str	r3, [r4, #0]
 800c1aa:	bd38      	pop	{r3, r4, r5, pc}
 800c1ac:	20000650 	.word	0x20000650

0800c1b0 <_sbrk_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4d06      	ldr	r5, [pc, #24]	@ (800c1cc <_sbrk_r+0x1c>)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	602b      	str	r3, [r5, #0]
 800c1bc:	f000 fc2e 	bl	800ca1c <_sbrk>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_sbrk_r+0x1a>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_sbrk_r+0x1a>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	20000650 	.word	0x20000650

0800c1d0 <nan>:
 800c1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c1d8 <nan+0x8>
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	00000000 	.word	0x00000000
 800c1dc:	7ff80000 	.word	0x7ff80000

0800c1e0 <__assert_func>:
 800c1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4b09      	ldr	r3, [pc, #36]	@ (800c20c <__assert_func+0x2c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	68d8      	ldr	r0, [r3, #12]
 800c1ee:	b14c      	cbz	r4, 800c204 <__assert_func+0x24>
 800c1f0:	4b07      	ldr	r3, [pc, #28]	@ (800c210 <__assert_func+0x30>)
 800c1f2:	9100      	str	r1, [sp, #0]
 800c1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1f8:	4906      	ldr	r1, [pc, #24]	@ (800c214 <__assert_func+0x34>)
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f000 fba8 	bl	800c950 <fiprintf>
 800c200:	f000 fbb8 	bl	800c974 <abort>
 800c204:	4b04      	ldr	r3, [pc, #16]	@ (800c218 <__assert_func+0x38>)
 800c206:	461c      	mov	r4, r3
 800c208:	e7f3      	b.n	800c1f2 <__assert_func+0x12>
 800c20a:	bf00      	nop
 800c20c:	20000024 	.word	0x20000024
 800c210:	0800cea2 	.word	0x0800cea2
 800c214:	0800ceaf 	.word	0x0800ceaf
 800c218:	0800cedd 	.word	0x0800cedd

0800c21c <_calloc_r>:
 800c21c:	b570      	push	{r4, r5, r6, lr}
 800c21e:	fba1 5402 	umull	r5, r4, r1, r2
 800c222:	b934      	cbnz	r4, 800c232 <_calloc_r+0x16>
 800c224:	4629      	mov	r1, r5
 800c226:	f7fe f813 	bl	800a250 <_malloc_r>
 800c22a:	4606      	mov	r6, r0
 800c22c:	b928      	cbnz	r0, 800c23a <_calloc_r+0x1e>
 800c22e:	4630      	mov	r0, r6
 800c230:	bd70      	pop	{r4, r5, r6, pc}
 800c232:	220c      	movs	r2, #12
 800c234:	6002      	str	r2, [r0, #0]
 800c236:	2600      	movs	r6, #0
 800c238:	e7f9      	b.n	800c22e <_calloc_r+0x12>
 800c23a:	462a      	mov	r2, r5
 800c23c:	4621      	mov	r1, r4
 800c23e:	f7fd f8a5 	bl	800938c <memset>
 800c242:	e7f4      	b.n	800c22e <_calloc_r+0x12>

0800c244 <rshift>:
 800c244:	6903      	ldr	r3, [r0, #16]
 800c246:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c24a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c24e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c252:	f100 0414 	add.w	r4, r0, #20
 800c256:	dd45      	ble.n	800c2e4 <rshift+0xa0>
 800c258:	f011 011f 	ands.w	r1, r1, #31
 800c25c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c264:	d10c      	bne.n	800c280 <rshift+0x3c>
 800c266:	f100 0710 	add.w	r7, r0, #16
 800c26a:	4629      	mov	r1, r5
 800c26c:	42b1      	cmp	r1, r6
 800c26e:	d334      	bcc.n	800c2da <rshift+0x96>
 800c270:	1a9b      	subs	r3, r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	1eea      	subs	r2, r5, #3
 800c276:	4296      	cmp	r6, r2
 800c278:	bf38      	it	cc
 800c27a:	2300      	movcc	r3, #0
 800c27c:	4423      	add	r3, r4
 800c27e:	e015      	b.n	800c2ac <rshift+0x68>
 800c280:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c284:	f1c1 0820 	rsb	r8, r1, #32
 800c288:	40cf      	lsrs	r7, r1
 800c28a:	f105 0e04 	add.w	lr, r5, #4
 800c28e:	46a1      	mov	r9, r4
 800c290:	4576      	cmp	r6, lr
 800c292:	46f4      	mov	ip, lr
 800c294:	d815      	bhi.n	800c2c2 <rshift+0x7e>
 800c296:	1a9a      	subs	r2, r3, r2
 800c298:	0092      	lsls	r2, r2, #2
 800c29a:	3a04      	subs	r2, #4
 800c29c:	3501      	adds	r5, #1
 800c29e:	42ae      	cmp	r6, r5
 800c2a0:	bf38      	it	cc
 800c2a2:	2200      	movcc	r2, #0
 800c2a4:	18a3      	adds	r3, r4, r2
 800c2a6:	50a7      	str	r7, [r4, r2]
 800c2a8:	b107      	cbz	r7, 800c2ac <rshift+0x68>
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	1b1a      	subs	r2, r3, r4
 800c2ae:	42a3      	cmp	r3, r4
 800c2b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2b4:	bf08      	it	eq
 800c2b6:	2300      	moveq	r3, #0
 800c2b8:	6102      	str	r2, [r0, #16]
 800c2ba:	bf08      	it	eq
 800c2bc:	6143      	streq	r3, [r0, #20]
 800c2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	f8dc c000 	ldr.w	ip, [ip]
 800c2c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2ca:	ea4c 0707 	orr.w	r7, ip, r7
 800c2ce:	f849 7b04 	str.w	r7, [r9], #4
 800c2d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2d6:	40cf      	lsrs	r7, r1
 800c2d8:	e7da      	b.n	800c290 <rshift+0x4c>
 800c2da:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2de:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2e2:	e7c3      	b.n	800c26c <rshift+0x28>
 800c2e4:	4623      	mov	r3, r4
 800c2e6:	e7e1      	b.n	800c2ac <rshift+0x68>

0800c2e8 <__hexdig_fun>:
 800c2e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	d802      	bhi.n	800c2f6 <__hexdig_fun+0xe>
 800c2f0:	3820      	subs	r0, #32
 800c2f2:	b2c0      	uxtb	r0, r0
 800c2f4:	4770      	bx	lr
 800c2f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c2fa:	2b05      	cmp	r3, #5
 800c2fc:	d801      	bhi.n	800c302 <__hexdig_fun+0x1a>
 800c2fe:	3847      	subs	r0, #71	@ 0x47
 800c300:	e7f7      	b.n	800c2f2 <__hexdig_fun+0xa>
 800c302:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c306:	2b05      	cmp	r3, #5
 800c308:	d801      	bhi.n	800c30e <__hexdig_fun+0x26>
 800c30a:	3827      	subs	r0, #39	@ 0x27
 800c30c:	e7f1      	b.n	800c2f2 <__hexdig_fun+0xa>
 800c30e:	2000      	movs	r0, #0
 800c310:	4770      	bx	lr
	...

0800c314 <__gethex>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	b085      	sub	sp, #20
 800c31a:	468a      	mov	sl, r1
 800c31c:	9302      	str	r3, [sp, #8]
 800c31e:	680b      	ldr	r3, [r1, #0]
 800c320:	9001      	str	r0, [sp, #4]
 800c322:	4690      	mov	r8, r2
 800c324:	1c9c      	adds	r4, r3, #2
 800c326:	46a1      	mov	r9, r4
 800c328:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c32c:	2830      	cmp	r0, #48	@ 0x30
 800c32e:	d0fa      	beq.n	800c326 <__gethex+0x12>
 800c330:	eba9 0303 	sub.w	r3, r9, r3
 800c334:	f1a3 0b02 	sub.w	fp, r3, #2
 800c338:	f7ff ffd6 	bl	800c2e8 <__hexdig_fun>
 800c33c:	4605      	mov	r5, r0
 800c33e:	2800      	cmp	r0, #0
 800c340:	d168      	bne.n	800c414 <__gethex+0x100>
 800c342:	49a0      	ldr	r1, [pc, #640]	@ (800c5c4 <__gethex+0x2b0>)
 800c344:	2201      	movs	r2, #1
 800c346:	4648      	mov	r0, r9
 800c348:	f7ff fefe 	bl	800c148 <strncmp>
 800c34c:	4607      	mov	r7, r0
 800c34e:	2800      	cmp	r0, #0
 800c350:	d167      	bne.n	800c422 <__gethex+0x10e>
 800c352:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c356:	4626      	mov	r6, r4
 800c358:	f7ff ffc6 	bl	800c2e8 <__hexdig_fun>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d062      	beq.n	800c426 <__gethex+0x112>
 800c360:	4623      	mov	r3, r4
 800c362:	7818      	ldrb	r0, [r3, #0]
 800c364:	2830      	cmp	r0, #48	@ 0x30
 800c366:	4699      	mov	r9, r3
 800c368:	f103 0301 	add.w	r3, r3, #1
 800c36c:	d0f9      	beq.n	800c362 <__gethex+0x4e>
 800c36e:	f7ff ffbb 	bl	800c2e8 <__hexdig_fun>
 800c372:	fab0 f580 	clz	r5, r0
 800c376:	096d      	lsrs	r5, r5, #5
 800c378:	f04f 0b01 	mov.w	fp, #1
 800c37c:	464a      	mov	r2, r9
 800c37e:	4616      	mov	r6, r2
 800c380:	3201      	adds	r2, #1
 800c382:	7830      	ldrb	r0, [r6, #0]
 800c384:	f7ff ffb0 	bl	800c2e8 <__hexdig_fun>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d1f8      	bne.n	800c37e <__gethex+0x6a>
 800c38c:	498d      	ldr	r1, [pc, #564]	@ (800c5c4 <__gethex+0x2b0>)
 800c38e:	2201      	movs	r2, #1
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff fed9 	bl	800c148 <strncmp>
 800c396:	2800      	cmp	r0, #0
 800c398:	d13f      	bne.n	800c41a <__gethex+0x106>
 800c39a:	b944      	cbnz	r4, 800c3ae <__gethex+0x9a>
 800c39c:	1c74      	adds	r4, r6, #1
 800c39e:	4622      	mov	r2, r4
 800c3a0:	4616      	mov	r6, r2
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	7830      	ldrb	r0, [r6, #0]
 800c3a6:	f7ff ff9f 	bl	800c2e8 <__hexdig_fun>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d1f8      	bne.n	800c3a0 <__gethex+0x8c>
 800c3ae:	1ba4      	subs	r4, r4, r6
 800c3b0:	00a7      	lsls	r7, r4, #2
 800c3b2:	7833      	ldrb	r3, [r6, #0]
 800c3b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c3b8:	2b50      	cmp	r3, #80	@ 0x50
 800c3ba:	d13e      	bne.n	800c43a <__gethex+0x126>
 800c3bc:	7873      	ldrb	r3, [r6, #1]
 800c3be:	2b2b      	cmp	r3, #43	@ 0x2b
 800c3c0:	d033      	beq.n	800c42a <__gethex+0x116>
 800c3c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c3c4:	d034      	beq.n	800c430 <__gethex+0x11c>
 800c3c6:	1c71      	adds	r1, r6, #1
 800c3c8:	2400      	movs	r4, #0
 800c3ca:	7808      	ldrb	r0, [r1, #0]
 800c3cc:	f7ff ff8c 	bl	800c2e8 <__hexdig_fun>
 800c3d0:	1e43      	subs	r3, r0, #1
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2b18      	cmp	r3, #24
 800c3d6:	d830      	bhi.n	800c43a <__gethex+0x126>
 800c3d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c3dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c3e0:	f7ff ff82 	bl	800c2e8 <__hexdig_fun>
 800c3e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c3e8:	fa5f fc8c 	uxtb.w	ip, ip
 800c3ec:	f1bc 0f18 	cmp.w	ip, #24
 800c3f0:	f04f 030a 	mov.w	r3, #10
 800c3f4:	d91e      	bls.n	800c434 <__gethex+0x120>
 800c3f6:	b104      	cbz	r4, 800c3fa <__gethex+0xe6>
 800c3f8:	4252      	negs	r2, r2
 800c3fa:	4417      	add	r7, r2
 800c3fc:	f8ca 1000 	str.w	r1, [sl]
 800c400:	b1ed      	cbz	r5, 800c43e <__gethex+0x12a>
 800c402:	f1bb 0f00 	cmp.w	fp, #0
 800c406:	bf0c      	ite	eq
 800c408:	2506      	moveq	r5, #6
 800c40a:	2500      	movne	r5, #0
 800c40c:	4628      	mov	r0, r5
 800c40e:	b005      	add	sp, #20
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	2500      	movs	r5, #0
 800c416:	462c      	mov	r4, r5
 800c418:	e7b0      	b.n	800c37c <__gethex+0x68>
 800c41a:	2c00      	cmp	r4, #0
 800c41c:	d1c7      	bne.n	800c3ae <__gethex+0x9a>
 800c41e:	4627      	mov	r7, r4
 800c420:	e7c7      	b.n	800c3b2 <__gethex+0x9e>
 800c422:	464e      	mov	r6, r9
 800c424:	462f      	mov	r7, r5
 800c426:	2501      	movs	r5, #1
 800c428:	e7c3      	b.n	800c3b2 <__gethex+0x9e>
 800c42a:	2400      	movs	r4, #0
 800c42c:	1cb1      	adds	r1, r6, #2
 800c42e:	e7cc      	b.n	800c3ca <__gethex+0xb6>
 800c430:	2401      	movs	r4, #1
 800c432:	e7fb      	b.n	800c42c <__gethex+0x118>
 800c434:	fb03 0002 	mla	r0, r3, r2, r0
 800c438:	e7ce      	b.n	800c3d8 <__gethex+0xc4>
 800c43a:	4631      	mov	r1, r6
 800c43c:	e7de      	b.n	800c3fc <__gethex+0xe8>
 800c43e:	eba6 0309 	sub.w	r3, r6, r9
 800c442:	3b01      	subs	r3, #1
 800c444:	4629      	mov	r1, r5
 800c446:	2b07      	cmp	r3, #7
 800c448:	dc0a      	bgt.n	800c460 <__gethex+0x14c>
 800c44a:	9801      	ldr	r0, [sp, #4]
 800c44c:	f7fd ff8c 	bl	800a368 <_Balloc>
 800c450:	4604      	mov	r4, r0
 800c452:	b940      	cbnz	r0, 800c466 <__gethex+0x152>
 800c454:	4b5c      	ldr	r3, [pc, #368]	@ (800c5c8 <__gethex+0x2b4>)
 800c456:	4602      	mov	r2, r0
 800c458:	21e4      	movs	r1, #228	@ 0xe4
 800c45a:	485c      	ldr	r0, [pc, #368]	@ (800c5cc <__gethex+0x2b8>)
 800c45c:	f7ff fec0 	bl	800c1e0 <__assert_func>
 800c460:	3101      	adds	r1, #1
 800c462:	105b      	asrs	r3, r3, #1
 800c464:	e7ef      	b.n	800c446 <__gethex+0x132>
 800c466:	f100 0a14 	add.w	sl, r0, #20
 800c46a:	2300      	movs	r3, #0
 800c46c:	4655      	mov	r5, sl
 800c46e:	469b      	mov	fp, r3
 800c470:	45b1      	cmp	r9, r6
 800c472:	d337      	bcc.n	800c4e4 <__gethex+0x1d0>
 800c474:	f845 bb04 	str.w	fp, [r5], #4
 800c478:	eba5 050a 	sub.w	r5, r5, sl
 800c47c:	10ad      	asrs	r5, r5, #2
 800c47e:	6125      	str	r5, [r4, #16]
 800c480:	4658      	mov	r0, fp
 800c482:	f7fe f863 	bl	800a54c <__hi0bits>
 800c486:	016d      	lsls	r5, r5, #5
 800c488:	f8d8 6000 	ldr.w	r6, [r8]
 800c48c:	1a2d      	subs	r5, r5, r0
 800c48e:	42b5      	cmp	r5, r6
 800c490:	dd54      	ble.n	800c53c <__gethex+0x228>
 800c492:	1bad      	subs	r5, r5, r6
 800c494:	4629      	mov	r1, r5
 800c496:	4620      	mov	r0, r4
 800c498:	f7fe fbef 	bl	800ac7a <__any_on>
 800c49c:	4681      	mov	r9, r0
 800c49e:	b178      	cbz	r0, 800c4c0 <__gethex+0x1ac>
 800c4a0:	1e6b      	subs	r3, r5, #1
 800c4a2:	1159      	asrs	r1, r3, #5
 800c4a4:	f003 021f 	and.w	r2, r3, #31
 800c4a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c4ac:	f04f 0901 	mov.w	r9, #1
 800c4b0:	fa09 f202 	lsl.w	r2, r9, r2
 800c4b4:	420a      	tst	r2, r1
 800c4b6:	d003      	beq.n	800c4c0 <__gethex+0x1ac>
 800c4b8:	454b      	cmp	r3, r9
 800c4ba:	dc36      	bgt.n	800c52a <__gethex+0x216>
 800c4bc:	f04f 0902 	mov.w	r9, #2
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	f7ff febe 	bl	800c244 <rshift>
 800c4c8:	442f      	add	r7, r5
 800c4ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4ce:	42bb      	cmp	r3, r7
 800c4d0:	da42      	bge.n	800c558 <__gethex+0x244>
 800c4d2:	9801      	ldr	r0, [sp, #4]
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	f7fd ff87 	bl	800a3e8 <_Bfree>
 800c4da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c4dc:	2300      	movs	r3, #0
 800c4de:	6013      	str	r3, [r2, #0]
 800c4e0:	25a3      	movs	r5, #163	@ 0xa3
 800c4e2:	e793      	b.n	800c40c <__gethex+0xf8>
 800c4e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c4e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c4ea:	d012      	beq.n	800c512 <__gethex+0x1fe>
 800c4ec:	2b20      	cmp	r3, #32
 800c4ee:	d104      	bne.n	800c4fa <__gethex+0x1e6>
 800c4f0:	f845 bb04 	str.w	fp, [r5], #4
 800c4f4:	f04f 0b00 	mov.w	fp, #0
 800c4f8:	465b      	mov	r3, fp
 800c4fa:	7830      	ldrb	r0, [r6, #0]
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	f7ff fef3 	bl	800c2e8 <__hexdig_fun>
 800c502:	9b03      	ldr	r3, [sp, #12]
 800c504:	f000 000f 	and.w	r0, r0, #15
 800c508:	4098      	lsls	r0, r3
 800c50a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c50e:	3304      	adds	r3, #4
 800c510:	e7ae      	b.n	800c470 <__gethex+0x15c>
 800c512:	45b1      	cmp	r9, r6
 800c514:	d8ea      	bhi.n	800c4ec <__gethex+0x1d8>
 800c516:	492b      	ldr	r1, [pc, #172]	@ (800c5c4 <__gethex+0x2b0>)
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	2201      	movs	r2, #1
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff fe13 	bl	800c148 <strncmp>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	2800      	cmp	r0, #0
 800c526:	d1e1      	bne.n	800c4ec <__gethex+0x1d8>
 800c528:	e7a2      	b.n	800c470 <__gethex+0x15c>
 800c52a:	1ea9      	subs	r1, r5, #2
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7fe fba4 	bl	800ac7a <__any_on>
 800c532:	2800      	cmp	r0, #0
 800c534:	d0c2      	beq.n	800c4bc <__gethex+0x1a8>
 800c536:	f04f 0903 	mov.w	r9, #3
 800c53a:	e7c1      	b.n	800c4c0 <__gethex+0x1ac>
 800c53c:	da09      	bge.n	800c552 <__gethex+0x23e>
 800c53e:	1b75      	subs	r5, r6, r5
 800c540:	4621      	mov	r1, r4
 800c542:	9801      	ldr	r0, [sp, #4]
 800c544:	462a      	mov	r2, r5
 800c546:	f7fe f95f 	bl	800a808 <__lshift>
 800c54a:	1b7f      	subs	r7, r7, r5
 800c54c:	4604      	mov	r4, r0
 800c54e:	f100 0a14 	add.w	sl, r0, #20
 800c552:	f04f 0900 	mov.w	r9, #0
 800c556:	e7b8      	b.n	800c4ca <__gethex+0x1b6>
 800c558:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c55c:	42bd      	cmp	r5, r7
 800c55e:	dd6f      	ble.n	800c640 <__gethex+0x32c>
 800c560:	1bed      	subs	r5, r5, r7
 800c562:	42ae      	cmp	r6, r5
 800c564:	dc34      	bgt.n	800c5d0 <__gethex+0x2bc>
 800c566:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	d022      	beq.n	800c5b4 <__gethex+0x2a0>
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d024      	beq.n	800c5bc <__gethex+0x2a8>
 800c572:	2b01      	cmp	r3, #1
 800c574:	d115      	bne.n	800c5a2 <__gethex+0x28e>
 800c576:	42ae      	cmp	r6, r5
 800c578:	d113      	bne.n	800c5a2 <__gethex+0x28e>
 800c57a:	2e01      	cmp	r6, #1
 800c57c:	d10b      	bne.n	800c596 <__gethex+0x282>
 800c57e:	9a02      	ldr	r2, [sp, #8]
 800c580:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	2301      	movs	r3, #1
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	f8ca 3000 	str.w	r3, [sl]
 800c58e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c590:	2562      	movs	r5, #98	@ 0x62
 800c592:	601c      	str	r4, [r3, #0]
 800c594:	e73a      	b.n	800c40c <__gethex+0xf8>
 800c596:	1e71      	subs	r1, r6, #1
 800c598:	4620      	mov	r0, r4
 800c59a:	f7fe fb6e 	bl	800ac7a <__any_on>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d1ed      	bne.n	800c57e <__gethex+0x26a>
 800c5a2:	9801      	ldr	r0, [sp, #4]
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	f7fd ff1f 	bl	800a3e8 <_Bfree>
 800c5aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6013      	str	r3, [r2, #0]
 800c5b0:	2550      	movs	r5, #80	@ 0x50
 800c5b2:	e72b      	b.n	800c40c <__gethex+0xf8>
 800c5b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1f3      	bne.n	800c5a2 <__gethex+0x28e>
 800c5ba:	e7e0      	b.n	800c57e <__gethex+0x26a>
 800c5bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1dd      	bne.n	800c57e <__gethex+0x26a>
 800c5c2:	e7ee      	b.n	800c5a2 <__gethex+0x28e>
 800c5c4:	0800ce87 	.word	0x0800ce87
 800c5c8:	0800ce1d 	.word	0x0800ce1d
 800c5cc:	0800cede 	.word	0x0800cede
 800c5d0:	1e6f      	subs	r7, r5, #1
 800c5d2:	f1b9 0f00 	cmp.w	r9, #0
 800c5d6:	d130      	bne.n	800c63a <__gethex+0x326>
 800c5d8:	b127      	cbz	r7, 800c5e4 <__gethex+0x2d0>
 800c5da:	4639      	mov	r1, r7
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f7fe fb4c 	bl	800ac7a <__any_on>
 800c5e2:	4681      	mov	r9, r0
 800c5e4:	117a      	asrs	r2, r7, #5
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c5ec:	f007 071f 	and.w	r7, r7, #31
 800c5f0:	40bb      	lsls	r3, r7
 800c5f2:	4213      	tst	r3, r2
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	bf18      	it	ne
 800c5fa:	f049 0902 	orrne.w	r9, r9, #2
 800c5fe:	f7ff fe21 	bl	800c244 <rshift>
 800c602:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c606:	1b76      	subs	r6, r6, r5
 800c608:	2502      	movs	r5, #2
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	d047      	beq.n	800c6a0 <__gethex+0x38c>
 800c610:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c614:	2b02      	cmp	r3, #2
 800c616:	d015      	beq.n	800c644 <__gethex+0x330>
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d017      	beq.n	800c64c <__gethex+0x338>
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d109      	bne.n	800c634 <__gethex+0x320>
 800c620:	f019 0f02 	tst.w	r9, #2
 800c624:	d006      	beq.n	800c634 <__gethex+0x320>
 800c626:	f8da 3000 	ldr.w	r3, [sl]
 800c62a:	ea49 0903 	orr.w	r9, r9, r3
 800c62e:	f019 0f01 	tst.w	r9, #1
 800c632:	d10e      	bne.n	800c652 <__gethex+0x33e>
 800c634:	f045 0510 	orr.w	r5, r5, #16
 800c638:	e032      	b.n	800c6a0 <__gethex+0x38c>
 800c63a:	f04f 0901 	mov.w	r9, #1
 800c63e:	e7d1      	b.n	800c5e4 <__gethex+0x2d0>
 800c640:	2501      	movs	r5, #1
 800c642:	e7e2      	b.n	800c60a <__gethex+0x2f6>
 800c644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c646:	f1c3 0301 	rsb	r3, r3, #1
 800c64a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0f0      	beq.n	800c634 <__gethex+0x320>
 800c652:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c656:	f104 0314 	add.w	r3, r4, #20
 800c65a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c65e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c662:	f04f 0c00 	mov.w	ip, #0
 800c666:	4618      	mov	r0, r3
 800c668:	f853 2b04 	ldr.w	r2, [r3], #4
 800c66c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c670:	d01b      	beq.n	800c6aa <__gethex+0x396>
 800c672:	3201      	adds	r2, #1
 800c674:	6002      	str	r2, [r0, #0]
 800c676:	2d02      	cmp	r5, #2
 800c678:	f104 0314 	add.w	r3, r4, #20
 800c67c:	d13c      	bne.n	800c6f8 <__gethex+0x3e4>
 800c67e:	f8d8 2000 	ldr.w	r2, [r8]
 800c682:	3a01      	subs	r2, #1
 800c684:	42b2      	cmp	r2, r6
 800c686:	d109      	bne.n	800c69c <__gethex+0x388>
 800c688:	1171      	asrs	r1, r6, #5
 800c68a:	2201      	movs	r2, #1
 800c68c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c690:	f006 061f 	and.w	r6, r6, #31
 800c694:	fa02 f606 	lsl.w	r6, r2, r6
 800c698:	421e      	tst	r6, r3
 800c69a:	d13a      	bne.n	800c712 <__gethex+0x3fe>
 800c69c:	f045 0520 	orr.w	r5, r5, #32
 800c6a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6a2:	601c      	str	r4, [r3, #0]
 800c6a4:	9b02      	ldr	r3, [sp, #8]
 800c6a6:	601f      	str	r7, [r3, #0]
 800c6a8:	e6b0      	b.n	800c40c <__gethex+0xf8>
 800c6aa:	4299      	cmp	r1, r3
 800c6ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6b0:	d8d9      	bhi.n	800c666 <__gethex+0x352>
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	459b      	cmp	fp, r3
 800c6b6:	db17      	blt.n	800c6e8 <__gethex+0x3d4>
 800c6b8:	6861      	ldr	r1, [r4, #4]
 800c6ba:	9801      	ldr	r0, [sp, #4]
 800c6bc:	3101      	adds	r1, #1
 800c6be:	f7fd fe53 	bl	800a368 <_Balloc>
 800c6c2:	4681      	mov	r9, r0
 800c6c4:	b918      	cbnz	r0, 800c6ce <__gethex+0x3ba>
 800c6c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c730 <__gethex+0x41c>)
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	2184      	movs	r1, #132	@ 0x84
 800c6cc:	e6c5      	b.n	800c45a <__gethex+0x146>
 800c6ce:	6922      	ldr	r2, [r4, #16]
 800c6d0:	3202      	adds	r2, #2
 800c6d2:	f104 010c 	add.w	r1, r4, #12
 800c6d6:	0092      	lsls	r2, r2, #2
 800c6d8:	300c      	adds	r0, #12
 800c6da:	f7fc fed6 	bl	800948a <memcpy>
 800c6de:	4621      	mov	r1, r4
 800c6e0:	9801      	ldr	r0, [sp, #4]
 800c6e2:	f7fd fe81 	bl	800a3e8 <_Bfree>
 800c6e6:	464c      	mov	r4, r9
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c6f0:	6122      	str	r2, [r4, #16]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	615a      	str	r2, [r3, #20]
 800c6f6:	e7be      	b.n	800c676 <__gethex+0x362>
 800c6f8:	6922      	ldr	r2, [r4, #16]
 800c6fa:	455a      	cmp	r2, fp
 800c6fc:	dd0b      	ble.n	800c716 <__gethex+0x402>
 800c6fe:	2101      	movs	r1, #1
 800c700:	4620      	mov	r0, r4
 800c702:	f7ff fd9f 	bl	800c244 <rshift>
 800c706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c70a:	3701      	adds	r7, #1
 800c70c:	42bb      	cmp	r3, r7
 800c70e:	f6ff aee0 	blt.w	800c4d2 <__gethex+0x1be>
 800c712:	2501      	movs	r5, #1
 800c714:	e7c2      	b.n	800c69c <__gethex+0x388>
 800c716:	f016 061f 	ands.w	r6, r6, #31
 800c71a:	d0fa      	beq.n	800c712 <__gethex+0x3fe>
 800c71c:	4453      	add	r3, sl
 800c71e:	f1c6 0620 	rsb	r6, r6, #32
 800c722:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c726:	f7fd ff11 	bl	800a54c <__hi0bits>
 800c72a:	42b0      	cmp	r0, r6
 800c72c:	dbe7      	blt.n	800c6fe <__gethex+0x3ea>
 800c72e:	e7f0      	b.n	800c712 <__gethex+0x3fe>
 800c730:	0800ce1d 	.word	0x0800ce1d

0800c734 <L_shift>:
 800c734:	f1c2 0208 	rsb	r2, r2, #8
 800c738:	0092      	lsls	r2, r2, #2
 800c73a:	b570      	push	{r4, r5, r6, lr}
 800c73c:	f1c2 0620 	rsb	r6, r2, #32
 800c740:	6843      	ldr	r3, [r0, #4]
 800c742:	6804      	ldr	r4, [r0, #0]
 800c744:	fa03 f506 	lsl.w	r5, r3, r6
 800c748:	432c      	orrs	r4, r5
 800c74a:	40d3      	lsrs	r3, r2
 800c74c:	6004      	str	r4, [r0, #0]
 800c74e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c752:	4288      	cmp	r0, r1
 800c754:	d3f4      	bcc.n	800c740 <L_shift+0xc>
 800c756:	bd70      	pop	{r4, r5, r6, pc}

0800c758 <__match>:
 800c758:	b530      	push	{r4, r5, lr}
 800c75a:	6803      	ldr	r3, [r0, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c762:	b914      	cbnz	r4, 800c76a <__match+0x12>
 800c764:	6003      	str	r3, [r0, #0]
 800c766:	2001      	movs	r0, #1
 800c768:	bd30      	pop	{r4, r5, pc}
 800c76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c772:	2d19      	cmp	r5, #25
 800c774:	bf98      	it	ls
 800c776:	3220      	addls	r2, #32
 800c778:	42a2      	cmp	r2, r4
 800c77a:	d0f0      	beq.n	800c75e <__match+0x6>
 800c77c:	2000      	movs	r0, #0
 800c77e:	e7f3      	b.n	800c768 <__match+0x10>

0800c780 <__hexnan>:
 800c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c784:	680b      	ldr	r3, [r1, #0]
 800c786:	6801      	ldr	r1, [r0, #0]
 800c788:	115e      	asrs	r6, r3, #5
 800c78a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c78e:	f013 031f 	ands.w	r3, r3, #31
 800c792:	b087      	sub	sp, #28
 800c794:	bf18      	it	ne
 800c796:	3604      	addne	r6, #4
 800c798:	2500      	movs	r5, #0
 800c79a:	1f37      	subs	r7, r6, #4
 800c79c:	4682      	mov	sl, r0
 800c79e:	4690      	mov	r8, r2
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7a6:	46b9      	mov	r9, r7
 800c7a8:	463c      	mov	r4, r7
 800c7aa:	9502      	str	r5, [sp, #8]
 800c7ac:	46ab      	mov	fp, r5
 800c7ae:	784a      	ldrb	r2, [r1, #1]
 800c7b0:	1c4b      	adds	r3, r1, #1
 800c7b2:	9303      	str	r3, [sp, #12]
 800c7b4:	b342      	cbz	r2, 800c808 <__hexnan+0x88>
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	9105      	str	r1, [sp, #20]
 800c7ba:	9204      	str	r2, [sp, #16]
 800c7bc:	f7ff fd94 	bl	800c2e8 <__hexdig_fun>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d151      	bne.n	800c868 <__hexnan+0xe8>
 800c7c4:	9a04      	ldr	r2, [sp, #16]
 800c7c6:	9905      	ldr	r1, [sp, #20]
 800c7c8:	2a20      	cmp	r2, #32
 800c7ca:	d818      	bhi.n	800c7fe <__hexnan+0x7e>
 800c7cc:	9b02      	ldr	r3, [sp, #8]
 800c7ce:	459b      	cmp	fp, r3
 800c7d0:	dd13      	ble.n	800c7fa <__hexnan+0x7a>
 800c7d2:	454c      	cmp	r4, r9
 800c7d4:	d206      	bcs.n	800c7e4 <__hexnan+0x64>
 800c7d6:	2d07      	cmp	r5, #7
 800c7d8:	dc04      	bgt.n	800c7e4 <__hexnan+0x64>
 800c7da:	462a      	mov	r2, r5
 800c7dc:	4649      	mov	r1, r9
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f7ff ffa8 	bl	800c734 <L_shift>
 800c7e4:	4544      	cmp	r4, r8
 800c7e6:	d952      	bls.n	800c88e <__hexnan+0x10e>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f1a4 0904 	sub.w	r9, r4, #4
 800c7ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7f2:	f8cd b008 	str.w	fp, [sp, #8]
 800c7f6:	464c      	mov	r4, r9
 800c7f8:	461d      	mov	r5, r3
 800c7fa:	9903      	ldr	r1, [sp, #12]
 800c7fc:	e7d7      	b.n	800c7ae <__hexnan+0x2e>
 800c7fe:	2a29      	cmp	r2, #41	@ 0x29
 800c800:	d157      	bne.n	800c8b2 <__hexnan+0x132>
 800c802:	3102      	adds	r1, #2
 800c804:	f8ca 1000 	str.w	r1, [sl]
 800c808:	f1bb 0f00 	cmp.w	fp, #0
 800c80c:	d051      	beq.n	800c8b2 <__hexnan+0x132>
 800c80e:	454c      	cmp	r4, r9
 800c810:	d206      	bcs.n	800c820 <__hexnan+0xa0>
 800c812:	2d07      	cmp	r5, #7
 800c814:	dc04      	bgt.n	800c820 <__hexnan+0xa0>
 800c816:	462a      	mov	r2, r5
 800c818:	4649      	mov	r1, r9
 800c81a:	4620      	mov	r0, r4
 800c81c:	f7ff ff8a 	bl	800c734 <L_shift>
 800c820:	4544      	cmp	r4, r8
 800c822:	d936      	bls.n	800c892 <__hexnan+0x112>
 800c824:	f1a8 0204 	sub.w	r2, r8, #4
 800c828:	4623      	mov	r3, r4
 800c82a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c82e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c832:	429f      	cmp	r7, r3
 800c834:	d2f9      	bcs.n	800c82a <__hexnan+0xaa>
 800c836:	1b3b      	subs	r3, r7, r4
 800c838:	f023 0303 	bic.w	r3, r3, #3
 800c83c:	3304      	adds	r3, #4
 800c83e:	3401      	adds	r4, #1
 800c840:	3e03      	subs	r6, #3
 800c842:	42b4      	cmp	r4, r6
 800c844:	bf88      	it	hi
 800c846:	2304      	movhi	r3, #4
 800c848:	4443      	add	r3, r8
 800c84a:	2200      	movs	r2, #0
 800c84c:	f843 2b04 	str.w	r2, [r3], #4
 800c850:	429f      	cmp	r7, r3
 800c852:	d2fb      	bcs.n	800c84c <__hexnan+0xcc>
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	b91b      	cbnz	r3, 800c860 <__hexnan+0xe0>
 800c858:	4547      	cmp	r7, r8
 800c85a:	d128      	bne.n	800c8ae <__hexnan+0x12e>
 800c85c:	2301      	movs	r3, #1
 800c85e:	603b      	str	r3, [r7, #0]
 800c860:	2005      	movs	r0, #5
 800c862:	b007      	add	sp, #28
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	3501      	adds	r5, #1
 800c86a:	2d08      	cmp	r5, #8
 800c86c:	f10b 0b01 	add.w	fp, fp, #1
 800c870:	dd06      	ble.n	800c880 <__hexnan+0x100>
 800c872:	4544      	cmp	r4, r8
 800c874:	d9c1      	bls.n	800c7fa <__hexnan+0x7a>
 800c876:	2300      	movs	r3, #0
 800c878:	f844 3c04 	str.w	r3, [r4, #-4]
 800c87c:	2501      	movs	r5, #1
 800c87e:	3c04      	subs	r4, #4
 800c880:	6822      	ldr	r2, [r4, #0]
 800c882:	f000 000f 	and.w	r0, r0, #15
 800c886:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c88a:	6020      	str	r0, [r4, #0]
 800c88c:	e7b5      	b.n	800c7fa <__hexnan+0x7a>
 800c88e:	2508      	movs	r5, #8
 800c890:	e7b3      	b.n	800c7fa <__hexnan+0x7a>
 800c892:	9b01      	ldr	r3, [sp, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d0dd      	beq.n	800c854 <__hexnan+0xd4>
 800c898:	f1c3 0320 	rsb	r3, r3, #32
 800c89c:	f04f 32ff 	mov.w	r2, #4294967295
 800c8a0:	40da      	lsrs	r2, r3
 800c8a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c8ac:	e7d2      	b.n	800c854 <__hexnan+0xd4>
 800c8ae:	3f04      	subs	r7, #4
 800c8b0:	e7d0      	b.n	800c854 <__hexnan+0xd4>
 800c8b2:	2004      	movs	r0, #4
 800c8b4:	e7d5      	b.n	800c862 <__hexnan+0xe2>

0800c8b6 <__ascii_mbtowc>:
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	b901      	cbnz	r1, 800c8bc <__ascii_mbtowc+0x6>
 800c8ba:	a901      	add	r1, sp, #4
 800c8bc:	b142      	cbz	r2, 800c8d0 <__ascii_mbtowc+0x1a>
 800c8be:	b14b      	cbz	r3, 800c8d4 <__ascii_mbtowc+0x1e>
 800c8c0:	7813      	ldrb	r3, [r2, #0]
 800c8c2:	600b      	str	r3, [r1, #0]
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	1e10      	subs	r0, r2, #0
 800c8c8:	bf18      	it	ne
 800c8ca:	2001      	movne	r0, #1
 800c8cc:	b002      	add	sp, #8
 800c8ce:	4770      	bx	lr
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	e7fb      	b.n	800c8cc <__ascii_mbtowc+0x16>
 800c8d4:	f06f 0001 	mvn.w	r0, #1
 800c8d8:	e7f8      	b.n	800c8cc <__ascii_mbtowc+0x16>

0800c8da <_realloc_r>:
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	4607      	mov	r7, r0
 800c8e0:	4614      	mov	r4, r2
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	b921      	cbnz	r1, 800c8f0 <_realloc_r+0x16>
 800c8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ea:	4611      	mov	r1, r2
 800c8ec:	f7fd bcb0 	b.w	800a250 <_malloc_r>
 800c8f0:	b92a      	cbnz	r2, 800c8fe <_realloc_r+0x24>
 800c8f2:	f7fd fc39 	bl	800a168 <_free_r>
 800c8f6:	4625      	mov	r5, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8fe:	f000 f840 	bl	800c982 <_malloc_usable_size_r>
 800c902:	4284      	cmp	r4, r0
 800c904:	4606      	mov	r6, r0
 800c906:	d802      	bhi.n	800c90e <_realloc_r+0x34>
 800c908:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c90c:	d8f4      	bhi.n	800c8f8 <_realloc_r+0x1e>
 800c90e:	4621      	mov	r1, r4
 800c910:	4638      	mov	r0, r7
 800c912:	f7fd fc9d 	bl	800a250 <_malloc_r>
 800c916:	4680      	mov	r8, r0
 800c918:	b908      	cbnz	r0, 800c91e <_realloc_r+0x44>
 800c91a:	4645      	mov	r5, r8
 800c91c:	e7ec      	b.n	800c8f8 <_realloc_r+0x1e>
 800c91e:	42b4      	cmp	r4, r6
 800c920:	4622      	mov	r2, r4
 800c922:	4629      	mov	r1, r5
 800c924:	bf28      	it	cs
 800c926:	4632      	movcs	r2, r6
 800c928:	f7fc fdaf 	bl	800948a <memcpy>
 800c92c:	4629      	mov	r1, r5
 800c92e:	4638      	mov	r0, r7
 800c930:	f7fd fc1a 	bl	800a168 <_free_r>
 800c934:	e7f1      	b.n	800c91a <_realloc_r+0x40>

0800c936 <__ascii_wctomb>:
 800c936:	4603      	mov	r3, r0
 800c938:	4608      	mov	r0, r1
 800c93a:	b141      	cbz	r1, 800c94e <__ascii_wctomb+0x18>
 800c93c:	2aff      	cmp	r2, #255	@ 0xff
 800c93e:	d904      	bls.n	800c94a <__ascii_wctomb+0x14>
 800c940:	228a      	movs	r2, #138	@ 0x8a
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	4770      	bx	lr
 800c94a:	700a      	strb	r2, [r1, #0]
 800c94c:	2001      	movs	r0, #1
 800c94e:	4770      	bx	lr

0800c950 <fiprintf>:
 800c950:	b40e      	push	{r1, r2, r3}
 800c952:	b503      	push	{r0, r1, lr}
 800c954:	4601      	mov	r1, r0
 800c956:	ab03      	add	r3, sp, #12
 800c958:	4805      	ldr	r0, [pc, #20]	@ (800c970 <fiprintf+0x20>)
 800c95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c95e:	6800      	ldr	r0, [r0, #0]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	f7ff f9b1 	bl	800bcc8 <_vfiprintf_r>
 800c966:	b002      	add	sp, #8
 800c968:	f85d eb04 	ldr.w	lr, [sp], #4
 800c96c:	b003      	add	sp, #12
 800c96e:	4770      	bx	lr
 800c970:	20000024 	.word	0x20000024

0800c974 <abort>:
 800c974:	b508      	push	{r3, lr}
 800c976:	2006      	movs	r0, #6
 800c978:	f000 f834 	bl	800c9e4 <raise>
 800c97c:	2001      	movs	r0, #1
 800c97e:	f7f4 ff25 	bl	80017cc <_exit>

0800c982 <_malloc_usable_size_r>:
 800c982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c986:	1f18      	subs	r0, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	bfbc      	itt	lt
 800c98c:	580b      	ldrlt	r3, [r1, r0]
 800c98e:	18c0      	addlt	r0, r0, r3
 800c990:	4770      	bx	lr

0800c992 <_raise_r>:
 800c992:	291f      	cmp	r1, #31
 800c994:	b538      	push	{r3, r4, r5, lr}
 800c996:	4605      	mov	r5, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	d904      	bls.n	800c9a6 <_raise_r+0x14>
 800c99c:	2316      	movs	r3, #22
 800c99e:	6003      	str	r3, [r0, #0]
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	bd38      	pop	{r3, r4, r5, pc}
 800c9a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c9a8:	b112      	cbz	r2, 800c9b0 <_raise_r+0x1e>
 800c9aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9ae:	b94b      	cbnz	r3, 800c9c4 <_raise_r+0x32>
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f000 f831 	bl	800ca18 <_getpid_r>
 800c9b6:	4622      	mov	r2, r4
 800c9b8:	4601      	mov	r1, r0
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9c0:	f000 b818 	b.w	800c9f4 <_kill_r>
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d00a      	beq.n	800c9de <_raise_r+0x4c>
 800c9c8:	1c59      	adds	r1, r3, #1
 800c9ca:	d103      	bne.n	800c9d4 <_raise_r+0x42>
 800c9cc:	2316      	movs	r3, #22
 800c9ce:	6003      	str	r3, [r0, #0]
 800c9d0:	2001      	movs	r0, #1
 800c9d2:	e7e7      	b.n	800c9a4 <_raise_r+0x12>
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	4798      	blx	r3
 800c9de:	2000      	movs	r0, #0
 800c9e0:	e7e0      	b.n	800c9a4 <_raise_r+0x12>
	...

0800c9e4 <raise>:
 800c9e4:	4b02      	ldr	r3, [pc, #8]	@ (800c9f0 <raise+0xc>)
 800c9e6:	4601      	mov	r1, r0
 800c9e8:	6818      	ldr	r0, [r3, #0]
 800c9ea:	f7ff bfd2 	b.w	800c992 <_raise_r>
 800c9ee:	bf00      	nop
 800c9f0:	20000024 	.word	0x20000024

0800c9f4 <_kill_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ca14 <_kill_r+0x20>)
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f4 fed3 	bl	80017ac <_kill>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_kill_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_kill_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	20000650 	.word	0x20000650

0800ca18 <_getpid_r>:
 800ca18:	f7f4 bec0 	b.w	800179c <_getpid>

0800ca1c <_sbrk>:
 800ca1c:	4a04      	ldr	r2, [pc, #16]	@ (800ca30 <_sbrk+0x14>)
 800ca1e:	6811      	ldr	r1, [r2, #0]
 800ca20:	4603      	mov	r3, r0
 800ca22:	b909      	cbnz	r1, 800ca28 <_sbrk+0xc>
 800ca24:	4903      	ldr	r1, [pc, #12]	@ (800ca34 <_sbrk+0x18>)
 800ca26:	6011      	str	r1, [r2, #0]
 800ca28:	6810      	ldr	r0, [r2, #0]
 800ca2a:	4403      	add	r3, r0
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	4770      	bx	lr
 800ca30:	20000660 	.word	0x20000660
 800ca34:	20000668 	.word	0x20000668

0800ca38 <_init>:
 800ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3a:	bf00      	nop
 800ca3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3e:	bc08      	pop	{r3}
 800ca40:	469e      	mov	lr, r3
 800ca42:	4770      	bx	lr

0800ca44 <_fini>:
 800ca44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca46:	bf00      	nop
 800ca48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca4a:	bc08      	pop	{r3}
 800ca4c:	469e      	mov	lr, r3
 800ca4e:	4770      	bx	lr
