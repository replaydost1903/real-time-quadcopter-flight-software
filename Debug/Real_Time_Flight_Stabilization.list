
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800d018  0800d018  0000e018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d494  0800d494  0000f2d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d494  0800d494  0000e494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d49c  0800d49c  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d49c  0800d49c  0000e49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4a0  0800d4a0  0000e4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800d4a4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2d0  2**0
                  CONTENTS
 10 .bss          00001e3c  200002d0  200002d0  0000f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000210c  2000210c  0000f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a45  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003781  00000000  00000000  00026d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc7  00000000  00000000  0002b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b35  00000000  00000000  0002c90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a861  00000000  00000000  00052444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dac39  00000000  00000000  0006cca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001478de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006be8  00000000  00000000  00147924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0014e50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d000 	.word	0x0800d000

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800d000 	.word	0x0800d000

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fbb0 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f80c 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f930 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001030:	f000 f872 	bl	8001118 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001034:	f000 f8f8 	bl	8001228 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001038:	f006 ff7a 	bl	8007f30 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800103c:	f000 f89a 	bl	8001174 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <main+0x20>

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f008 fc80 	bl	8009958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b28      	ldr	r3, [pc, #160]	@ (8001110 <SystemClock_Config+0xcc>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a27      	ldr	r2, [pc, #156]	@ (8001110 <SystemClock_Config+0xcc>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b25      	ldr	r3, [pc, #148]	@ (8001110 <SystemClock_Config+0xcc>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <SystemClock_Config+0xd0>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <SystemClock_Config+0xd0>)
 800108e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <SystemClock_Config+0xd0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010b8:	23a8      	movs	r3, #168	@ 0xa8
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c4:	f107 0320 	add.w	r3, r7, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 fa51 	bl	8003570 <HAL_RCC_OscConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d4:	f000 f94a 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d8:	230f      	movs	r3, #15
 80010da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010dc:	2302      	movs	r3, #2
 80010de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2105      	movs	r1, #5
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fcb2 	bl	8003a60 <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001102:	f000 f933 	bl	800136c <Error_Handler>
  }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <MX_I2C1_Init+0x50>)
 800111e:	4a13      	ldr	r2, [pc, #76]	@ (800116c <MX_I2C1_Init+0x54>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001124:	4a12      	ldr	r2, [pc, #72]	@ (8001170 <MX_I2C1_Init+0x58>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001136:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800113a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	@ (8001168 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <MX_I2C1_Init+0x50>)
 8001156:	f000 fe75 	bl	8001e44 <HAL_I2C_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 f904 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200002ec 	.word	0x200002ec
 800116c:	40005400 	.word	0x40005400
 8001170:	000186a0 	.word	0x000186a0

08001174 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	@ 0x28
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001196:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_TIM2_Init+0xb0>)
 8001198:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800119c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011be:	4819      	ldr	r0, [pc, #100]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011c0:	f002 fea9 	bl	8003f16 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ca:	f000 f8cf 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	4619      	mov	r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <MX_TIM2_Init+0xb0>)
 80011de:	f003 fb1f 	bl	8004820 <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80011e8:	f000 f8c0 	bl	800136c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ec:	2360      	movs	r3, #96	@ 0x60
 80011ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80011f0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2204      	movs	r2, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4807      	ldr	r0, [pc, #28]	@ (8001224 <MX_TIM2_Init+0xb0>)
 8001206:	f002 ffc5 	bl	8004194 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001210:	f000 f8ac 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001214:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM2_Init+0xb0>)
 8001216:	f000 f977 	bl	8001508 <HAL_TIM_MspPostInit>

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000340 	.word	0x20000340

08001228 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122e:	463b      	mov	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001236:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <MX_TIM6_Init+0x60>)
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <MX_TIM6_Init+0x64>)
 800123a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <MX_TIM6_Init+0x60>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <MX_TIM6_Init+0x60>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <MX_TIM6_Init+0x60>)
 800124a:	22a7      	movs	r2, #167	@ 0xa7
 800124c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <MX_TIM6_Init+0x60>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <MX_TIM6_Init+0x60>)
 8001256:	f002 fe0f 	bl	8003e78 <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001260:	f000 f884 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_TIM6_Init+0x60>)
 8001272:	f003 fad5 	bl	8004820 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800127c:	f000 f876 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000388 	.word	0x20000388
 800128c:	40001000 	.word	0x40001000

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	@ 0x28
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	4a25      	ldr	r2, [pc, #148]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d2:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <MX_GPIO_Init+0xd0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <MX_GPIO_Init+0xd0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a17      	ldr	r2, [pc, #92]	@ (8001360 <MX_GPIO_Init+0xd0>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <MX_GPIO_Init+0xd0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800131c:	4811      	ldr	r0, [pc, #68]	@ (8001364 <MX_GPIO_Init+0xd4>)
 800131e:	f000 fd77 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <MX_GPIO_Init+0xd8>)
 8001336:	f000 fbcf 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800133a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	@ (8001364 <MX_GPIO_Init+0xd4>)
 8001354:	f000 fbc0 	bl	8001ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	@ 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40020000 	.word	0x40020000

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1U);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001376:	4803      	ldr	r0, [pc, #12]	@ (8001384 <Error_Handler+0x18>)
 8001378:	f000 fd4a 	bl	8001e10 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x14>
 8001384:	40020c00 	.word	0x40020c00

08001388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <HAL_MspInit+0x5c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a13      	ldr	r2, [pc, #76]	@ (80013e4 <HAL_MspInit+0x5c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_MspInit+0x5c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 fb44 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2005      	movs	r0, #5
 80013d2:	f000 fb4a 	bl	8001a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013d6:	2005      	movs	r0, #5
 80013d8:	f000 fb63 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	@ (800146c <HAL_I2C_MspInit+0x84>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12c      	bne.n	8001464 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001426:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142c:	2312      	movs	r3, #18
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001434:	2303      	movs	r3, #3
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001438:	2304      	movs	r3, #4
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <HAL_I2C_MspInit+0x8c>)
 8001444:	f000 fb48 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b08      	ldr	r3, [pc, #32]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 8001452:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_I2C_MspInit+0x88>)
 800145a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	@ 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40005400 	.word	0x40005400
 8001470:	40023800 	.word	0x40023800
 8001474:	40020400 	.word	0x40020400

08001478 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001488:	d10d      	bne.n	80014a6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	4a08      	ldr	r2, [pc, #32]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6413      	str	r3, [r2, #64]	@ 0x40
 800149a:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <HAL_TIM_PWM_MspInit+0x3c>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40023800 	.word	0x40023800

080014b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <HAL_TIM_Base_MspInit+0x48>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d115      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <HAL_TIM_Base_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2036      	movs	r0, #54	@ 0x36
 80014ec:	f000 fabd 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f0:	2036      	movs	r0, #54	@ 0x36
 80014f2:	f000 fad6 	bl	8001aa2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40001000 	.word	0x40001000
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001528:	d11d      	bne.n	8001566 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <HAL_TIM_MspPostInit+0x68>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a0f      	ldr	r2, [pc, #60]	@ (8001570 <HAL_TIM_MspPostInit+0x68>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b0d      	ldr	r3, [pc, #52]	@ (8001570 <HAL_TIM_MspPostInit+0x68>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001546:	2302      	movs	r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001556:	2301      	movs	r3, #1
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <HAL_TIM_MspPostInit+0x6c>)
 8001562:	f000 fab9 	bl	8001ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <NMI_Handler+0x4>

08001580 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <HardFault_Handler+0x4>

08001588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <MemManage_Handler+0x4>

08001590 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <UsageFault_Handler+0x4>

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b2:	f000 f93b 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}

080015ba <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <TIM6_DAC_IRQHandler+0x10>)
 80015ce:	f002 fcf1 	bl	8003fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000388 	.word	0x20000388

080015dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <OTG_FS_IRQHandler+0x10>)
 80015e2:	f000 feb7 	bl	8002354 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200018b8 	.word	0x200018b8

080015f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_kill>:

int _kill(int pid, int sig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800160a:	f008 f9f7 	bl	80099fc <__errno>
 800160e:	4603      	mov	r3, r0
 8001610:	2216      	movs	r2, #22
 8001612:	601a      	str	r2, [r3, #0]
  return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_exit>:

void _exit (int status)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe7 	bl	8001600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001632:	bf00      	nop
 8001634:	e7fd      	b.n	8001632 <_exit+0x12>

08001636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e00a      	b.n	800165e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001648:	f3af 8000 	nop.w
 800164c:	4601      	mov	r1, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	b2ca      	uxtb	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbf0      	blt.n	8001648 <_read+0x12>
  }

  return len;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e009      	b.n	8001696 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbf1      	blt.n	8001682 <_write+0x12>
  }
  return len;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_close>:

int _close(int file)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d0:	605a      	str	r2, [r3, #4]
  return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_isatty>:

int _isatty(int file)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <SystemInit+0x20>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <SystemInit+0x20>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001738:	f7ff ffea 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f008 f951 	bl	8009a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff fc5b 	bl	8001020 <main>
  bx  lr    
 800176a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800176c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8001778:	0800d4a4 	.word	0x0800d4a4
  ldr r2, =_sbss
 800177c:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 8001780:	2000210c 	.word	0x2000210c

08001784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800178c:	4b0e      	ldr	r3, [pc, #56]	@ (80017c8 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <HAL_Init+0x40>)
 8001792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001798:	4b0b      	ldr	r3, [pc, #44]	@ (80017c8 <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_Init+0x40>)
 800179e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a4:	4b08      	ldr	r3, [pc, #32]	@ (80017c8 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a07      	ldr	r2, [pc, #28]	@ (80017c8 <HAL_Init+0x40>)
 80017aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b0:	2003      	movs	r0, #3
 80017b2:	f000 f94f 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f808 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017bc:	f7ff fde4 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023c00 	.word	0x40023c00

080017cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <HAL_InitTick+0x54>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b12      	ldr	r3, [pc, #72]	@ (8001824 <HAL_InitTick+0x58>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f967 	bl	8001abe <HAL_SYSTICK_Config>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00e      	b.n	8001818 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b0f      	cmp	r3, #15
 80017fe:	d80a      	bhi.n	8001816 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001800:	2200      	movs	r2, #0
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f000 f92f 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4a06      	ldr	r2, [pc, #24]	@ (8001828 <HAL_InitTick+0x5c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000014 	.word	0x20000014
 8001828:	20000010 	.word	0x20000010

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000014 	.word	0x20000014
 8001850:	200003d0 	.word	0x200003d0

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200003d0 	.word	0x200003d0

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000014 	.word	0x20000014

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	@ (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	@ (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	@ (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	@ 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	@ 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff8e 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff29 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff3e 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff8e 	bl	80019a8 <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff31 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	@ 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
 8001af2:	e16b      	b.n	8001dcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af4:	2201      	movs	r2, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f040 815a 	bne.w	8001dc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d005      	beq.n	8001b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d130      	bne.n	8001b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 0201 	and.w	r2, r3, #1
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d017      	beq.n	8001bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d123      	bne.n	8001c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	08da      	lsrs	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3208      	adds	r2, #8
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	220f      	movs	r2, #15
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	08da      	lsrs	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3208      	adds	r2, #8
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	2203      	movs	r2, #3
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0203 	and.w	r2, r3, #3
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 80b4 	beq.w	8001dc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b60      	ldr	r3, [pc, #384]	@ (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a5f      	ldr	r2, [pc, #380]	@ (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001de4 <HAL_GPIO_Init+0x30c>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001de8 <HAL_GPIO_Init+0x310>)
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	220f      	movs	r2, #15
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a52      	ldr	r2, [pc, #328]	@ (8001dec <HAL_GPIO_Init+0x314>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d02b      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	@ (8001df0 <HAL_GPIO_Init+0x318>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d025      	beq.n	8001cfa <HAL_GPIO_Init+0x222>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	@ (8001df4 <HAL_GPIO_Init+0x31c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01f      	beq.n	8001cf6 <HAL_GPIO_Init+0x21e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001df8 <HAL_GPIO_Init+0x320>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d019      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001dfc <HAL_GPIO_Init+0x324>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0x216>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e00 <HAL_GPIO_Init+0x328>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00d      	beq.n	8001cea <HAL_GPIO_Init+0x212>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001e04 <HAL_GPIO_Init+0x32c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x20e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e08 <HAL_GPIO_Init+0x330>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_GPIO_Init+0x20a>
 8001cde:	2307      	movs	r3, #7
 8001ce0:	e00e      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	e00c      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001ce6:	2306      	movs	r3, #6
 8001ce8:	e00a      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cea:	2305      	movs	r3, #5
 8001cec:	e008      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cee:	2304      	movs	r3, #4
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x228>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	69fa      	ldr	r2, [r7, #28]
 8001d02:	f002 0203 	and.w	r2, r2, #3
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	@ (8001de8 <HAL_GPIO_Init+0x310>)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d42:	4a32      	ldr	r2, [pc, #200]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d48:	4b30      	ldr	r3, [pc, #192]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d6c:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d96:	4a1d      	ldr	r2, [pc, #116]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc0:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <HAL_GPIO_Init+0x334>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b0f      	cmp	r3, #15
 8001dd0:	f67f ae90 	bls.w	8001af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40013800 	.word	0x40013800
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	40020800 	.word	0x40020800
 8001df8:	40020c00 	.word	0x40020c00
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40021400 	.word	0x40021400
 8001e04:	40021800 	.word	0x40021800
 8001e08:	40021c00 	.word	0x40021c00
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e2c:	e003      	b.n	8001e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	041a      	lsls	r2, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e12b      	b.n	80020ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fabc 	bl	80013e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2224      	movs	r2, #36	@ 0x24
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea8:	f001 ffd2 	bl	8003e50 <HAL_RCC_GetPCLK1Freq>
 8001eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4a81      	ldr	r2, [pc, #516]	@ (80020b8 <HAL_I2C_Init+0x274>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d807      	bhi.n	8001ec8 <HAL_I2C_Init+0x84>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4a80      	ldr	r2, [pc, #512]	@ (80020bc <HAL_I2C_Init+0x278>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	bf94      	ite	ls
 8001ec0:	2301      	movls	r3, #1
 8001ec2:	2300      	movhi	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e006      	b.n	8001ed6 <HAL_I2C_Init+0x92>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a7d      	ldr	r2, [pc, #500]	@ (80020c0 <HAL_I2C_Init+0x27c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	bf94      	ite	ls
 8001ed0:	2301      	movls	r3, #1
 8001ed2:	2300      	movhi	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0e7      	b.n	80020ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4a78      	ldr	r2, [pc, #480]	@ (80020c4 <HAL_I2C_Init+0x280>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80020b8 <HAL_I2C_Init+0x274>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d802      	bhi.n	8001f18 <HAL_I2C_Init+0xd4>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3301      	adds	r3, #1
 8001f16:	e009      	b.n	8001f2c <HAL_I2C_Init+0xe8>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	4a69      	ldr	r2, [pc, #420]	@ (80020c8 <HAL_I2C_Init+0x284>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	495c      	ldr	r1, [pc, #368]	@ (80020b8 <HAL_I2C_Init+0x274>)
 8001f48:	428b      	cmp	r3, r1
 8001f4a:	d819      	bhi.n	8001f80 <HAL_I2C_Init+0x13c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	1e59      	subs	r1, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5a:	1c59      	adds	r1, r3, #1
 8001f5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f60:	400b      	ands	r3, r1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_I2C_Init+0x138>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1e59      	subs	r1, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f7a:	e051      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	e04f      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <HAL_I2C_Init+0x168>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1e58      	subs	r0, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf0c      	ite	eq
 8001fa4:	2301      	moveq	r3, #1
 8001fa6:	2300      	movne	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	e012      	b.n	8001fd2 <HAL_I2C_Init+0x18e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	0099      	lsls	r1, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Init+0x196>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e022      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10e      	bne.n	8002000 <HAL_I2C_Init+0x1bc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1e58      	subs	r0, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	440b      	add	r3, r1
 8001ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffe:	e00f      	b.n	8002020 <HAL_I2C_Init+0x1dc>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	0099      	lsls	r1, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	fbb0 f3f3 	udiv	r3, r0, r3
 8002016:	3301      	adds	r3, #1
 8002018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800201c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	6809      	ldr	r1, [r1, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800204e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6911      	ldr	r1, [r2, #16]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68d2      	ldr	r2, [r2, #12]
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	430b      	orrs	r3, r1
 8002062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2220      	movs	r2, #32
 800209a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	000186a0 	.word	0x000186a0
 80020bc:	001e847f 	.word	0x001e847f
 80020c0:	003d08ff 	.word	0x003d08ff
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	10624dd3 	.word	0x10624dd3

080020cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e101      	b.n	80022e2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d106      	bne.n	80020fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f006 f8f9 	bl	80082f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800210c:	d102      	bne.n	8002114 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 fd28 	bl	8004b6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	7c1a      	ldrb	r2, [r3, #16]
 8002126:	f88d 2000 	strb.w	r2, [sp]
 800212a:	3304      	adds	r3, #4
 800212c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212e:	f002 fc07 	bl	8004940 <USB_CoreInit>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0ce      	b.n	80022e2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fd20 	bl	8004b90 <USB_SetCurrentMode>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0bf      	b.n	80022e2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e04a      	b.n	80021fe <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3315      	adds	r3, #21
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	440b      	add	r3, r1
 800218a:	3314      	adds	r3, #20
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002190:	7bfa      	ldrb	r2, [r7, #15]
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	b298      	uxth	r0, r3
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	332e      	adds	r3, #46	@ 0x2e
 80021a4:	4602      	mov	r2, r0
 80021a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	3318      	adds	r3, #24
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	331c      	adds	r3, #28
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3320      	adds	r3, #32
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	3324      	adds	r3, #36	@ 0x24
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	3301      	adds	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	791b      	ldrb	r3, [r3, #4]
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3af      	bcc.n	8002168 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e044      	b.n	8002298 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002250:	7bfa      	ldrb	r2, [r7, #15]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800227c:	7bfa      	ldrb	r2, [r7, #15]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	3301      	adds	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3b5      	bcc.n	800220e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7c1a      	ldrb	r2, [r3, #16]
 80022aa:	f88d 2000 	strb.w	r2, [sp]
 80022ae:	3304      	adds	r3, #4
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	f002 fcb9 	bl	8004c28 <USB_DevInit>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e00c      	b.n	80022e2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fd03 	bl	8005ce6 <USB_DevDisconnect>

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_PCD_Start+0x1c>
 8002302:	2302      	movs	r3, #2
 8002304:	e022      	b.n	800234c <HAL_PCD_Start+0x62>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f002 fc0a 	bl	8004b4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fcb1 	bl	8005ca4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b08d      	sub	sp, #52	@ 0x34
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fd6f 	bl	8005e4e <USB_GetMode>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 848c 	bne.w	8002c90 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f003 fcd3 	bl	8005d28 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8482 	beq.w	8002c8e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f003 fcc0 	bl	8005d28 <USB_ReadInterrupts>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695a      	ldr	r2, [r3, #20]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f002 0202 	and.w	r2, r2, #2
 80023c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f003 fcae 	bl	8005d28 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d161      	bne.n	800249a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0210 	bic.w	r2, r2, #16
 80023e4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	3304      	adds	r3, #4
 8002404:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800240c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002410:	d124      	bne.n	800245c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002418:	4013      	ands	r3, r2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d035      	beq.n	800248a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6a38      	ldr	r0, [r7, #32]
 8002432:	f003 fae5 	bl	8005a00 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002442:	441a      	add	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002454:	441a      	add	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	e016      	b.n	800248a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002462:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002466:	d110      	bne.n	800248a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800246e:	2208      	movs	r2, #8
 8002470:	4619      	mov	r1, r3
 8002472:	6a38      	ldr	r0, [r7, #32]
 8002474:	f003 fac4 	bl	8005a00 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002484:	441a      	add	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699a      	ldr	r2, [r3, #24]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0210 	orr.w	r2, r2, #16
 8002498:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fc42 	bl	8005d28 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80024ae:	f040 80a7 	bne.w	8002600 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fc47 	bl	8005d4e <USB_ReadDevAllOutEpInterrupt>
 80024c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80024c2:	e099      	b.n	80025f8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 808e 	beq.w	80025ec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fc6b 	bl	8005db6 <USB_ReadDevOutEPInterrupt>
 80024e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00c      	beq.n	8002506 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024f8:	461a      	mov	r2, r3
 80024fa:	2301      	movs	r3, #1
 80024fc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fea3 	bl	800324c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00c      	beq.n	800252a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2308      	movs	r3, #8
 8002520:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 ff79 	bl	800341c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002540:	461a      	mov	r2, r3
 8002542:	2310      	movs	r3, #16
 8002544:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d030      	beq.n	80025b2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d109      	bne.n	8002570 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800256a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	3304      	adds	r3, #4
 8002584:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	78db      	ldrb	r3, [r3, #3]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d108      	bne.n	80025a0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f005 ffae 	bl	80084fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025ac:	461a      	mov	r2, r3
 80025ae:	2302      	movs	r3, #2
 80025b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	015a      	lsls	r2, r3, #5
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	4413      	add	r3, r2
 80025c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025c8:	461a      	mov	r2, r3
 80025ca:	2320      	movs	r3, #32
 80025cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	3301      	adds	r3, #1
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f af62 	bne.w	80024c4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fb8f 	bl	8005d28 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002610:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002614:	f040 80db 	bne.w	80027ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fbb0 	bl	8005d82 <USB_ReadDevAllInEpInterrupt>
 8002622:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002628:	e0cd      	b.n	80027c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800262a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80c2 	beq.w	80027ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f003 fbd6 	bl	8005df2 <USB_ReadDevInEPInterrupt>
 8002646:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d057      	beq.n	8002702 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	2201      	movs	r2, #1
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002666:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	69f9      	ldr	r1, [r7, #28]
 800266e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002672:	4013      	ands	r3, r2
 8002674:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002682:	461a      	mov	r2, r3
 8002684:	2301      	movs	r3, #1
 8002686:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	799b      	ldrb	r3, [r3, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d132      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3320      	adds	r3, #32
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4403      	add	r3, r0
 80026b0:	331c      	adds	r3, #28
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4419      	add	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4403      	add	r3, r0
 80026c4:	3320      	adds	r3, #32
 80026c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d113      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x3a2>
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3324      	adds	r3, #36	@ 0x24
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d108      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026ee:	461a      	mov	r2, r3
 80026f0:	2101      	movs	r1, #1
 80026f2:	f003 fbdd 	bl	8005eb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 fe78 	bl	80083f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002718:	461a      	mov	r2, r3
 800271a:	2308      	movs	r3, #8
 800271c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4413      	add	r3, r2
 8002730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002734:	461a      	mov	r2, r3
 8002736:	2310      	movs	r3, #16
 8002738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002750:	461a      	mov	r2, r3
 8002752:	2340      	movs	r3, #64	@ 0x40
 8002754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002762:	6a38      	ldr	r0, [r7, #32]
 8002764:	f002 fbc4 	bl	8004ef0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002768:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	3310      	adds	r3, #16
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	3304      	adds	r3, #4
 800277a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	78db      	ldrb	r3, [r3, #3]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d108      	bne.n	8002796 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2200      	movs	r2, #0
 8002788:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f005 fec5 	bl	8008520 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	4413      	add	r3, r2
 800279e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a2:	461a      	mov	r2, r3
 80027a4:	2302      	movs	r3, #2
 80027a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fcbd 	bl	8003134 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027bc:	3301      	adds	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f47f af2e 	bne.w	800262a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f003 faa8 	bl	8005d28 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027e2:	d122      	bne.n	800282a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	69fa      	ldr	r2, [r7, #28]
 80027ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d108      	bne.n	8002814 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fea3 	bl	8003558 <HAL_PCDEx_LPM_Callback>
 8002812:	e002      	b.n	800281a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 fe63 	bl	80084e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695a      	ldr	r2, [r3, #20]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002828:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fa7a 	bl	8005d28 <USB_ReadInterrupts>
 8002834:	4603      	mov	r3, r0
 8002836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800283a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800283e:	d112      	bne.n	8002866 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b01      	cmp	r3, #1
 800284e:	d102      	bne.n	8002856 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f005 fe1f 	bl	8008494 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002864:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f003 fa5c 	bl	8005d28 <USB_ReadInterrupts>
 8002870:	4603      	mov	r3, r0
 8002872:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800287a:	f040 80b7 	bne.w	80029ec <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800288c:	f023 0301 	bic.w	r3, r3, #1
 8002890:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2110      	movs	r1, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fb29 	bl	8004ef0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289e:	2300      	movs	r3, #0
 80028a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a2:	e046      	b.n	8002932 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028b0:	461a      	mov	r2, r3
 80028b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028b6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028c8:	0151      	lsls	r1, r2, #5
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	440a      	add	r2, r1
 80028ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80028d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80028d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80028ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	440a      	add	r2, r1
 8002902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800290a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800290c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800291c:	0151      	lsls	r1, r2, #5
 800291e:	69fa      	ldr	r2, [r7, #28]
 8002920:	440a      	add	r2, r1
 8002922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002926:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800292a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	3301      	adds	r3, #1
 8002930:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	791b      	ldrb	r3, [r3, #4]
 8002936:	461a      	mov	r2, r3
 8002938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293a:	4293      	cmp	r3, r2
 800293c:	d3b2      	bcc.n	80028a4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800294c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002950:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7bdb      	ldrb	r3, [r3, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d016      	beq.n	8002988 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800296a:	f043 030b 	orr.w	r3, r3, #11
 800296e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002980:	f043 030b 	orr.w	r3, r3, #11
 8002984:	6453      	str	r3, [r2, #68]	@ 0x44
 8002986:	e015      	b.n	80029b4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002996:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800299a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800299e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ae:	f043 030b 	orr.w	r3, r3, #11
 80029b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80029c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029d6:	461a      	mov	r2, r3
 80029d8:	f003 fa6a 	bl	8005eb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80029ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 f999 	bl	8005d28 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a00:	d123      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fa2f 	bl	8005e6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fae6 	bl	8004fe2 <USB_GetDevSpeed>
 8002a16:	4603      	mov	r3, r0
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681c      	ldr	r4, [r3, #0]
 8002a22:	f001 fa09 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8002a26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f001 ffea 	bl	8004a08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f005 fd04 	bl	8008442 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 f96a 	bl	8005d28 <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d10a      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f005 fce1 	bl	8008426 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f002 0208 	and.w	r2, r2, #8
 8002a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f003 f955 	bl	8005d28 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a84:	2b80      	cmp	r3, #128	@ 0x80
 8002a86:	d123      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a94:	2301      	movs	r3, #1
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a98:	e014      	b.n	8002ac4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fb0a 	bl	80030d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	791b      	ldrb	r3, [r3, #4]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d3e4      	bcc.n	8002a9a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f003 f927 	bl	8005d28 <USB_ReadInterrupts>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ae4:	d13c      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	e02b      	b.n	8002b44 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d115      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da12      	bge.n	8002b3e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3317      	adds	r3, #23
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 faca 	bl	80030d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	3301      	adds	r3, #1
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	791b      	ldrb	r3, [r3, #4]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d3cd      	bcc.n	8002aec <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 f8df 	bl	8005d28 <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b74:	d156      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b7a:	e045      	b.n	8002c08 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d12e      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ba4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	da2b      	bge.n	8002c02 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002bb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d121      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bfe:	6053      	str	r3, [r2, #4]
            break;
 8002c00:	e008      	b.n	8002c14 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	3301      	adds	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	791b      	ldrb	r3, [r3, #4]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d3b3      	bcc.n	8002b7c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f003 f87d 	bl	8005d28 <USB_ReadInterrupts>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c38:	d10a      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f005 fc82 	bl	8008544 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 f867 	bl	8005d28 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d115      	bne.n	8002c90 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f005 fc72 	bl	8008560 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6859      	ldr	r1, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	e000      	b.n	8002c90 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002c8e:	bf00      	nop
    }
  }
}
 8002c90:	3734      	adds	r7, #52	@ 0x34
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd90      	pop	{r4, r7, pc}

08002c96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_PCD_SetAddress+0x1a>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e012      	b.n	8002cd6 <HAL_PCD_SetAddress+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f002 ffc6 	bl	8005c58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	4608      	mov	r0, r1
 8002ce8:	4611      	mov	r1, r2
 8002cea:	461a      	mov	r2, r3
 8002cec:	4603      	mov	r3, r0
 8002cee:	70fb      	strb	r3, [r7, #3]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	803b      	strh	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	da0f      	bge.n	8002d24 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	f003 020f 	and.w	r2, r3, #15
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	3310      	adds	r3, #16
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	705a      	strb	r2, [r3, #1]
 8002d22:	e00f      	b.n	8002d44 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d50:	883b      	ldrh	r3, [r7, #0]
 8002d52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	78ba      	ldrb	r2, [r7, #2]
 8002d5e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	785b      	ldrb	r3, [r3, #1]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d72:	78bb      	ldrb	r3, [r7, #2]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d102      	bne.n	8002d7e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_PCD_EP_Open+0xae>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e00e      	b.n	8002daa <HAL_PCD_EP_Open+0xcc>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68f9      	ldr	r1, [r7, #12]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 f946 	bl	800502c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002da8:	7afb      	ldrb	r3, [r7, #11]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b084      	sub	sp, #16
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	da0f      	bge.n	8002de6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 020f 	and.w	r2, r3, #15
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3304      	adds	r3, #4
 8002ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	705a      	strb	r2, [r3, #1]
 8002de4:	e00f      	b.n	8002e06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	78fb      	ldrb	r3, [r7, #3]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e06:	78fb      	ldrb	r3, [r7, #3]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_PCD_EP_Close+0x6e>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e00e      	b.n	8002e3e <HAL_PCD_EP_Close+0x8c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f002 f984 	bl	800513c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e88:	7afb      	ldrb	r3, [r7, #11]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	799b      	ldrb	r3, [r3, #6]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	799b      	ldrb	r3, [r3, #6]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6979      	ldr	r1, [r7, #20]
 8002eae:	f002 fa21 	bl	80052f4 <USB_EPStartXfer>

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	f003 020f 	and.w	r2, r3, #15
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	3310      	adds	r3, #16
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	3304      	adds	r3, #4
 8002f12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2c:	7afb      	ldrb	r3, [r7, #11]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	799b      	ldrb	r3, [r3, #6]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	799b      	ldrb	r3, [r3, #6]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	f002 f9cf 	bl	80052f4 <USB_EPStartXfer>

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	7912      	ldrb	r2, [r2, #4]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e04f      	b.n	800301e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	da0f      	bge.n	8002fa6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3310      	adds	r3, #16
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	705a      	strb	r2, [r3, #1]
 8002fa4:	e00d      	b.n	8002fc2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3304      	adds	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_PCD_EP_SetStall+0x82>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e01d      	b.n	800301e <HAL_PCD_EP_SetStall+0xbe>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f002 fd5d 	bl	8005ab0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7999      	ldrb	r1, [r3, #6]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800300e:	461a      	mov	r2, r3
 8003010:	f002 ff4e 	bl	8005eb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b084      	sub	sp, #16
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	7912      	ldrb	r2, [r2, #4]
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e042      	b.n	80030ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da0f      	bge.n	800306c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3310      	adds	r3, #16
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	e00f      	b.n	800308c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	3304      	adds	r3, #4
 8003084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d101      	bne.n	80030ac <HAL_PCD_EP_ClrStall+0x86>
 80030a8:	2302      	movs	r3, #2
 80030aa:	e00e      	b.n	80030ca <HAL_PCD_EP_ClrStall+0xa4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68f9      	ldr	r1, [r7, #12]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f002 fd66 	bl	8005b8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da0c      	bge.n	8003100 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 020f 	and.w	r2, r3, #15
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3310      	adds	r3, #16
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	3304      	adds	r3, #4
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	e00c      	b.n	800311a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 020f 	and.w	r2, r3, #15
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	3304      	adds	r3, #4
 8003118:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f002 fb85 	bl	8005830 <USB_EPStopXfer>
 8003126:	4603      	mov	r3, r0
 8003128:	72fb      	strb	r3, [r7, #11]

  return ret;
 800312a:	7afb      	ldrb	r3, [r7, #11]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08a      	sub	sp, #40	@ 0x28
 8003138:	af02      	add	r7, sp, #8
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	3310      	adds	r3, #16
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	3304      	adds	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	429a      	cmp	r2, r3
 8003166:	d901      	bls.n	800316c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e06b      	b.n	8003244 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	429a      	cmp	r2, r3
 8003180:	d902      	bls.n	8003188 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	3303      	adds	r3, #3
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003190:	e02a      	b.n	80031e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d902      	bls.n	80031ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3303      	adds	r3, #3
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68d9      	ldr	r1, [r3, #12]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	4603      	mov	r3, r0
 80031ca:	6978      	ldr	r0, [r7, #20]
 80031cc:	f002 fbda 	bl	8005984 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	441a      	add	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d809      	bhi.n	8003212 <PCD_WriteEmptyTxFifo+0xde>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003206:	429a      	cmp	r2, r3
 8003208:	d203      	bcs.n	8003212 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1bf      	bne.n	8003192 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	429a      	cmp	r2, r3
 800321c:	d811      	bhi.n	8003242 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	2201      	movs	r2, #1
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	43db      	mvns	r3, r3
 8003238:	6939      	ldr	r1, [r7, #16]
 800323a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800323e:	4013      	ands	r3, r2
 8003240:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	333c      	adds	r3, #60	@ 0x3c
 8003264:	3304      	adds	r3, #4
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	799b      	ldrb	r3, [r3, #6]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d17b      	bne.n	800337a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	4a61      	ldr	r2, [pc, #388]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f240 80b9 	bls.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80b3 	beq.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032b4:	6093      	str	r3, [r2, #8]
 80032b6:	e0a7      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ce:	461a      	mov	r2, r3
 80032d0:	2320      	movs	r3, #32
 80032d2:	6093      	str	r3, [r2, #8]
 80032d4:	e098      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f040 8093 	bne.w	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003414 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d90f      	bls.n	800330a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003300:	461a      	mov	r2, r3
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	6093      	str	r3, [r2, #8]
 8003308:	e07e      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1a      	ldr	r2, [r3, #32]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	0159      	lsls	r1, r3, #5
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	440b      	add	r3, r1
 800332c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003336:	1ad2      	subs	r2, r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d114      	bne.n	800336c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003354:	461a      	mov	r2, r3
 8003356:	2101      	movs	r1, #1
 8003358:	f002 fdaa 	bl	8005eb0 <USB_EP0_OutStart>
 800335c:	e006      	b.n	800336c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f005 f822 	bl	80083bc <HAL_PCD_DataOutStageCallback>
 8003378:	e046      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	4a26      	ldr	r2, [pc, #152]	@ (8003418 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d124      	bne.n	80033cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003398:	461a      	mov	r2, r3
 800339a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800339e:	6093      	str	r3, [r2, #8]
 80033a0:	e032      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d008      	beq.n	80033be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	2320      	movs	r3, #32
 80033bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f004 fff9 	bl	80083bc <HAL_PCD_DataOutStageCallback>
 80033ca:	e01d      	b.n	8003408 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d114      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x1b0>
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033f4:	461a      	mov	r2, r3
 80033f6:	2100      	movs	r1, #0
 80033f8:	f002 fd5a 	bl	8005eb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 ffda 	bl	80083bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	4f54300a 	.word	0x4f54300a
 8003418:	4f54310a 	.word	0x4f54310a

0800341c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	333c      	adds	r3, #60	@ 0x3c
 8003434:	3304      	adds	r3, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a15      	ldr	r2, [pc, #84]	@ (80034a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90e      	bls.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f004 ff91 	bl	8008398 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90c      	bls.n	8003498 <PCD_EP_OutSetupPacket_int+0x7c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	799b      	ldrb	r3, [r3, #6]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003490:	461a      	mov	r2, r3
 8003492:	2101      	movs	r1, #1
 8003494:	f002 fd0c 	bl	8005eb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	4f54300a 	.word	0x4f54300a

080034a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
 80034b4:	4613      	mov	r3, r2
 80034b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d107      	bne.n	80034d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034c6:	883b      	ldrh	r3, [r7, #0]
 80034c8:	0419      	lsls	r1, r3, #16
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80034d4:	e028      	b.n	8003528 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	0c1b      	lsrs	r3, r3, #16
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4413      	add	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e00d      	b.n	8003506 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	7bfb      	ldrb	r3, [r7, #15]
 80034f0:	3340      	adds	r3, #64	@ 0x40
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	0c1b      	lsrs	r3, r3, #16
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	4413      	add	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	3301      	adds	r3, #1
 8003504:	73fb      	strb	r3, [r7, #15]
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	3b01      	subs	r3, #1
 800350c:	429a      	cmp	r2, r3
 800350e:	d3ec      	bcc.n	80034ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003510:	883b      	ldrh	r3, [r7, #0]
 8003512:	0418      	lsls	r0, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6819      	ldr	r1, [r3, #0]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	3b01      	subs	r3, #1
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	4302      	orrs	r2, r0
 8003520:	3340      	adds	r3, #64	@ 0x40
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e267      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d075      	beq.n	800367a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800358e:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b85      	ldr	r3, [pc, #532]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d112      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b82      	ldr	r3, [pc, #520]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4b7e      	ldr	r3, [pc, #504]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05b      	beq.n	8003678 <HAL_RCC_OscConfig+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d157      	bne.n	8003678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e242      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0x74>
 80035d6:	4b76      	ldr	r3, [pc, #472]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b70      	ldr	r3, [pc, #448]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6f      	ldr	r2, [pc, #444]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6d      	ldr	r3, [pc, #436]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 8003608:	4b69      	ldr	r3, [pc, #420]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b66      	ldr	r3, [pc, #408]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a65      	ldr	r2, [pc, #404]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe f914 	bl	8001854 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe f910 	bl	8001854 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	@ 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e207      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xc0>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fe f900 	bl	8001854 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe f8fc 	bl	8001854 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	@ 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1f3      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b51      	ldr	r3, [pc, #324]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0xe8>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003686:	4b4a      	ldr	r3, [pc, #296]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fe f8b5 	bl	8001854 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fe f8b1 	bl	8001854 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a8      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe f894 	bl	8001854 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003730:	f7fe f890 	bl	8001854 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e187      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fe f874 	bl	8001854 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe f870 	bl	8001854 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e167      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x200>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe f85d 	bl	8001854 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379e:	f7fe f859 	bl	8001854 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e150      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b81      	ldr	r3, [pc, #516]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7d      	ldr	r3, [pc, #500]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ee:	4a7c      	ldr	r2, [pc, #496]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f6:	4b7a      	ldr	r3, [pc, #488]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b77      	ldr	r3, [pc, #476]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b74      	ldr	r3, [pc, #464]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a73      	ldr	r2, [pc, #460]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fe f819 	bl	8001854 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fe f815 	bl	8001854 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e10c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6a      	ldr	r3, [pc, #424]	@ (80039e4 <HAL_RCC_OscConfig+0x474>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x2ea>
 800384c:	4b64      	ldr	r3, [pc, #400]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	4a63      	ldr	r2, [pc, #396]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	@ 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x30c>
 8003862:	4b5f      	ldr	r3, [pc, #380]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	4a5e      	ldr	r2, [pc, #376]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	@ 0x70
 800386e:	4b5c      	ldr	r3, [pc, #368]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003872:	4a5b      	ldr	r2, [pc, #364]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	@ 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800387c:	4b58      	ldr	r3, [pc, #352]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a57      	ldr	r2, [pc, #348]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	4b55      	ldr	r3, [pc, #340]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388c:	4a54      	ldr	r2, [pc, #336]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd ffda 	bl	8001854 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd ffd6 	bl	8001854 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b49      	ldr	r3, [pc, #292]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x334>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fd ffc4 	bl	8001854 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd ffc0 	bl	8001854 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0b5      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b3e      	ldr	r3, [pc, #248]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	4a38      	ldr	r2, [pc, #224]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a1 	beq.w	8003a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b34      	ldr	r3, [pc, #208]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d05c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d141      	bne.n	80039a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd ff94 	bl	8001854 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd ff90 	bl	8001854 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e087      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	491b      	ldr	r1, [pc, #108]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fd ff69 	bl	8001854 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd ff65 	bl	8001854 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e05c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x416>
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_RCC_OscConfig+0x478>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd ff52 	bl	8001854 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd ff4e 	bl	8001854 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e045      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	@ (8003a5c <HAL_RCC_OscConfig+0x4ec>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d028      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d121      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fd fe80 	bl	8001854 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fe7c 	bl	8001854 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	@ (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	@ (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	@ (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fde0 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	0800d050 	.word	0x0800d050
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000010 	.word	0x20000010

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b094      	sub	sp, #80	@ 0x50
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	4b79      	ldr	r3, [pc, #484]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x40>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	f200 80e1 	bhi.w	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5e:	e0db      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b73      	ldr	r3, [pc, #460]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c64:	e0db      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b73      	ldr	r3, [pc, #460]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c6a:	e0d8      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c76:	4b6d      	ldr	r3, [pc, #436]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b6a      	ldr	r3, [pc, #424]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	2200      	movs	r2, #0
 8003c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	f04f 0000 	mov.w	r0, #0
 8003ca6:	f04f 0100 	mov.w	r1, #0
 8003caa:	0159      	lsls	r1, r3, #5
 8003cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb0:	0150      	lsls	r0, r2, #5
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	1a51      	subs	r1, r2, r1
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cd0:	4659      	mov	r1, fp
 8003cd2:	018b      	lsls	r3, r1, #6
 8003cd4:	4651      	mov	r1, sl
 8003cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cda:	4651      	mov	r1, sl
 8003cdc:	018a      	lsls	r2, r1, #6
 8003cde:	4651      	mov	r1, sl
 8003ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfe:	4690      	mov	r8, r2
 8003d00:	4699      	mov	r9, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	eb18 0303 	adds.w	r3, r8, r3
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	eb49 0303 	adc.w	r3, r9, r3
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d1e:	4629      	mov	r1, r5
 8003d20:	024b      	lsls	r3, r1, #9
 8003d22:	4621      	mov	r1, r4
 8003d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d28:	4621      	mov	r1, r4
 8003d2a:	024a      	lsls	r2, r1, #9
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d32:	2200      	movs	r2, #0
 8003d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d3c:	f7fc ffa4 	bl	8000c88 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4613      	mov	r3, r2
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	e058      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4a:	4b38      	ldr	r3, [pc, #224]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	099b      	lsrs	r3, r3, #6
 8003d50:	2200      	movs	r2, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	4611      	mov	r1, r2
 8003d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	f04f 0000 	mov.w	r0, #0
 8003d6c:	f04f 0100 	mov.w	r1, #0
 8003d70:	0159      	lsls	r1, r3, #5
 8003d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d76:	0150      	lsls	r0, r2, #5
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d82:	4649      	mov	r1, r9
 8003d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8003da0:	eb63 050b 	sbc.w	r5, r3, fp
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	00eb      	lsls	r3, r5, #3
 8003dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003db2:	00e2      	lsls	r2, r4, #3
 8003db4:	4614      	mov	r4, r2
 8003db6:	461d      	mov	r5, r3
 8003db8:	4643      	mov	r3, r8
 8003dba:	18e3      	adds	r3, r4, r3
 8003dbc:	603b      	str	r3, [r7, #0]
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb45 0303 	adc.w	r3, r5, r3
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	028b      	lsls	r3, r1, #10
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ddc:	4621      	mov	r1, r4
 8003dde:	028a      	lsls	r2, r1, #10
 8003de0:	4610      	mov	r0, r2
 8003de2:	4619      	mov	r1, r3
 8003de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de6:	2200      	movs	r2, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df0:	f7fc ff4a 	bl	8000c88 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e16:	e002      	b.n	8003e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3750      	adds	r7, #80	@ 0x50
 8003e24:	46bd      	mov	sp, r7
 8003e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	007a1200 	.word	0x007a1200

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	2000000c 	.word	0x2000000c

08003e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e54:	f7ff fff0 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0a9b      	lsrs	r3, r3, #10
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	@ (8003e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	0800d060 	.word	0x0800d060

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fb0a 	bl	80014b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fa56 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e041      	b.n	8003fac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fd fa9b 	bl	8001478 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2202      	movs	r2, #2
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f000 fa07 	bl	8004368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d020      	beq.n	8004018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01b      	beq.n	8004018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0202 	mvn.w	r2, #2
 8003fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f994 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f986 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f997 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01b      	beq.n	8004064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0204 	mvn.w	r2, #4
 8004034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f96e 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f960 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f971 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	d020      	beq.n	80040b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01b      	beq.n	80040b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0208 	mvn.w	r2, #8
 8004080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2204      	movs	r2, #4
 8004086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f948 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f93a 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f94b 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d020      	beq.n	80040fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 0310 	and.w	r3, r3, #16
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01b      	beq.n	80040fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0210 	mvn.w	r2, #16
 80040cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2208      	movs	r2, #8
 80040d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f922 	bl	800432c <HAL_TIM_IC_CaptureCallback>
 80040e8:	e005      	b.n	80040f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f914 	bl	8004318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f925 	bl	8004340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00c      	beq.n	8004120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0201 	mvn.w	r2, #1
 8004118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f003 feea 	bl	8007ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00c      	beq.n	8004144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fbf4 	bl	800492c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8f6 	bl	8004354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00c      	beq.n	800418c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0220 	mvn.w	r2, #32
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 fbc6 	bl	8004918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e0ae      	b.n	8004310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b0c      	cmp	r3, #12
 80041be:	f200 809f 	bhi.w	8004300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041fd 	.word	0x080041fd
 80041cc:	08004301 	.word	0x08004301
 80041d0:	08004301 	.word	0x08004301
 80041d4:	08004301 	.word	0x08004301
 80041d8:	0800423d 	.word	0x0800423d
 80041dc:	08004301 	.word	0x08004301
 80041e0:	08004301 	.word	0x08004301
 80041e4:	08004301 	.word	0x08004301
 80041e8:	0800427f 	.word	0x0800427f
 80041ec:	08004301 	.word	0x08004301
 80041f0:	08004301 	.word	0x08004301
 80041f4:	08004301 	.word	0x08004301
 80041f8:	080042bf 	.word	0x080042bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f95c 	bl	80044c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0208 	orr.w	r2, r2, #8
 8004216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6999      	ldr	r1, [r3, #24]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	619a      	str	r2, [r3, #24]
      break;
 800423a:	e064      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f9ac 	bl	80045a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6999      	ldr	r1, [r3, #24]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	021a      	lsls	r2, r3, #8
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	619a      	str	r2, [r3, #24]
      break;
 800427c:	e043      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	4618      	mov	r0, r3
 8004286:	f000 fa01 	bl	800468c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0208 	orr.w	r2, r2, #8
 8004298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69d9      	ldr	r1, [r3, #28]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]
      break;
 80042bc:	e023      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fa55 	bl	8004774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69da      	ldr	r2, [r3, #28]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	61da      	str	r2, [r3, #28]
      break;
 80042fe:	e002      	b.n	8004306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
      break;
 8004304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a46      	ldr	r2, [pc, #280]	@ (8004494 <TIM_Base_SetConfig+0x12c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d013      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004386:	d00f      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a43      	ldr	r2, [pc, #268]	@ (8004498 <TIM_Base_SetConfig+0x130>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a42      	ldr	r2, [pc, #264]	@ (800449c <TIM_Base_SetConfig+0x134>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a41      	ldr	r2, [pc, #260]	@ (80044a0 <TIM_Base_SetConfig+0x138>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x40>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a40      	ldr	r2, [pc, #256]	@ (80044a4 <TIM_Base_SetConfig+0x13c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a35      	ldr	r2, [pc, #212]	@ (8004494 <TIM_Base_SetConfig+0x12c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d02b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c8:	d027      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a32      	ldr	r2, [pc, #200]	@ (8004498 <TIM_Base_SetConfig+0x130>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d023      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a31      	ldr	r2, [pc, #196]	@ (800449c <TIM_Base_SetConfig+0x134>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d01f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a30      	ldr	r2, [pc, #192]	@ (80044a0 <TIM_Base_SetConfig+0x138>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a2f      	ldr	r2, [pc, #188]	@ (80044a4 <TIM_Base_SetConfig+0x13c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d017      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2e      	ldr	r2, [pc, #184]	@ (80044a8 <TIM_Base_SetConfig+0x140>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2d      	ldr	r2, [pc, #180]	@ (80044ac <TIM_Base_SetConfig+0x144>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a2c      	ldr	r2, [pc, #176]	@ (80044b0 <TIM_Base_SetConfig+0x148>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a2b      	ldr	r2, [pc, #172]	@ (80044b4 <TIM_Base_SetConfig+0x14c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2a      	ldr	r2, [pc, #168]	@ (80044b8 <TIM_Base_SetConfig+0x150>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a29      	ldr	r2, [pc, #164]	@ (80044bc <TIM_Base_SetConfig+0x154>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d108      	bne.n	800442c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a10      	ldr	r2, [pc, #64]	@ (8004494 <TIM_Base_SetConfig+0x12c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_Base_SetConfig+0xf8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <TIM_Base_SetConfig+0x13c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d103      	bne.n	8004468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b01      	cmp	r3, #1
 8004478:	d105      	bne.n	8004486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]
  }
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40010400 	.word	0x40010400
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	40001800 	.word	0x40001800
 80044b8:	40001c00 	.word	0x40001c00
 80044bc:	40002000 	.word	0x40002000

080044c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0201 	bic.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0303 	bic.w	r3, r3, #3
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f023 0302 	bic.w	r3, r3, #2
 8004508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a20      	ldr	r2, [pc, #128]	@ (8004598 <TIM_OC1_SetConfig+0xd8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_OC1_SetConfig+0x64>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1f      	ldr	r2, [pc, #124]	@ (800459c <TIM_OC1_SetConfig+0xdc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10c      	bne.n	800453e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0308 	bic.w	r3, r3, #8
 800452a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a15      	ldr	r2, [pc, #84]	@ (8004598 <TIM_OC1_SetConfig+0xd8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d003      	beq.n	800454e <TIM_OC1_SetConfig+0x8e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a14      	ldr	r2, [pc, #80]	@ (800459c <TIM_OC1_SetConfig+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d111      	bne.n	8004572 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800455c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	621a      	str	r2, [r3, #32]
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400

080045a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 0210 	bic.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0320 	bic.w	r3, r3, #32
 80045ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <TIM_OC2_SetConfig+0xe4>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d003      	beq.n	8004608 <TIM_OC2_SetConfig+0x68>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a21      	ldr	r2, [pc, #132]	@ (8004688 <TIM_OC2_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10d      	bne.n	8004624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <TIM_OC2_SetConfig+0xe4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC2_SetConfig+0x94>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a16      	ldr	r2, [pc, #88]	@ (8004688 <TIM_OC2_SetConfig+0xe8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d113      	bne.n	800465c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	621a      	str	r2, [r3, #32]
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40010000 	.word	0x40010000
 8004688:	40010400 	.word	0x40010400

0800468c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0303 	bic.w	r3, r3, #3
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	4313      	orrs	r3, r2
 80046e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a21      	ldr	r2, [pc, #132]	@ (800476c <TIM_OC3_SetConfig+0xe0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC3_SetConfig+0x66>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a20      	ldr	r2, [pc, #128]	@ (8004770 <TIM_OC3_SetConfig+0xe4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10d      	bne.n	800470e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800470c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a16      	ldr	r2, [pc, #88]	@ (800476c <TIM_OC3_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC3_SetConfig+0x92>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <TIM_OC3_SetConfig+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d113      	bne.n	8004746 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800472c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40010000 	.word	0x40010000
 8004770:	40010400 	.word	0x40010400

08004774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	031b      	lsls	r3, r3, #12
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <TIM_OC4_SetConfig+0xa4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_OC4_SetConfig+0x68>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a11      	ldr	r2, [pc, #68]	@ (800481c <TIM_OC4_SetConfig+0xa8>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d109      	bne.n	80047f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	019b      	lsls	r3, r3, #6
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40010000 	.word	0x40010000
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004834:	2302      	movs	r3, #2
 8004836:	e05a      	b.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d022      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004884:	d01d      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d018      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1b      	ldr	r2, [pc, #108]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1a      	ldr	r2, [pc, #104]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00e      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a18      	ldr	r2, [pc, #96]	@ (800490c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d009      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d004      	beq.n	80048c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d10c      	bne.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3714      	adds	r7, #20
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40010000 	.word	0x40010000
 8004900:	40000400 	.word	0x40000400
 8004904:	40000800 	.word	0x40000800
 8004908:	40000c00 	.word	0x40000c00
 800490c:	40010400 	.word	0x40010400
 8004910:	40014000 	.word	0x40014000
 8004914:	40001800 	.word	0x40001800

08004918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004940:	b084      	sub	sp, #16
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	f107 001c 	add.w	r0, r7, #28
 800494e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004952:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004956:	2b01      	cmp	r3, #1
 8004958:	d123      	bne.n	80049a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800496e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004982:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004986:	2b01      	cmp	r3, #1
 8004988:	d105      	bne.n	8004996 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f001 fae8 	bl	8005f6c <USB_CoreReset>
 800499c:	4603      	mov	r3, r0
 800499e:	73fb      	strb	r3, [r7, #15]
 80049a0:	e01b      	b.n	80049da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fadc 	bl	8005f6c <USB_CoreReset>
 80049b4:	4603      	mov	r3, r0
 80049b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d106      	bne.n	80049ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80049cc:	e005      	b.n	80049da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049da:	7fbb      	ldrb	r3, [r7, #30]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d10b      	bne.n	80049f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f043 0206 	orr.w	r2, r3, #6
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a04:	b004      	add	sp, #16
 8004a06:	4770      	bx	lr

08004a08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d165      	bne.n	8004ae8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4a41      	ldr	r2, [pc, #260]	@ (8004b24 <USB_SetTurnaroundTime+0x11c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d906      	bls.n	8004a32 <USB_SetTurnaroundTime+0x2a>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4a40      	ldr	r2, [pc, #256]	@ (8004b28 <USB_SetTurnaroundTime+0x120>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d202      	bcs.n	8004a32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a2c:	230f      	movs	r3, #15
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e062      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4a3c      	ldr	r2, [pc, #240]	@ (8004b28 <USB_SetTurnaroundTime+0x120>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d306      	bcc.n	8004a48 <USB_SetTurnaroundTime+0x40>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4a3b      	ldr	r2, [pc, #236]	@ (8004b2c <USB_SetTurnaroundTime+0x124>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d202      	bcs.n	8004a48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a42:	230e      	movs	r3, #14
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e057      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4a38      	ldr	r2, [pc, #224]	@ (8004b2c <USB_SetTurnaroundTime+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d306      	bcc.n	8004a5e <USB_SetTurnaroundTime+0x56>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4a37      	ldr	r2, [pc, #220]	@ (8004b30 <USB_SetTurnaroundTime+0x128>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d202      	bcs.n	8004a5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a58:	230d      	movs	r3, #13
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e04c      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	4a33      	ldr	r2, [pc, #204]	@ (8004b30 <USB_SetTurnaroundTime+0x128>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d306      	bcc.n	8004a74 <USB_SetTurnaroundTime+0x6c>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4a32      	ldr	r2, [pc, #200]	@ (8004b34 <USB_SetTurnaroundTime+0x12c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d802      	bhi.n	8004a74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a6e:	230c      	movs	r3, #12
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e041      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	@ (8004b34 <USB_SetTurnaroundTime+0x12c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d906      	bls.n	8004a8a <USB_SetTurnaroundTime+0x82>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b38 <USB_SetTurnaroundTime+0x130>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d802      	bhi.n	8004a8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a84:	230b      	movs	r3, #11
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e036      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b38 <USB_SetTurnaroundTime+0x130>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d906      	bls.n	8004aa0 <USB_SetTurnaroundTime+0x98>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <USB_SetTurnaroundTime+0x134>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d802      	bhi.n	8004aa0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e02b      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4a26      	ldr	r2, [pc, #152]	@ (8004b3c <USB_SetTurnaroundTime+0x134>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d906      	bls.n	8004ab6 <USB_SetTurnaroundTime+0xae>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	4a25      	ldr	r2, [pc, #148]	@ (8004b40 <USB_SetTurnaroundTime+0x138>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d202      	bcs.n	8004ab6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ab0:	2309      	movs	r3, #9
 8004ab2:	617b      	str	r3, [r7, #20]
 8004ab4:	e020      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	@ (8004b40 <USB_SetTurnaroundTime+0x138>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d306      	bcc.n	8004acc <USB_SetTurnaroundTime+0xc4>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	@ (8004b44 <USB_SetTurnaroundTime+0x13c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d802      	bhi.n	8004acc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	617b      	str	r3, [r7, #20]
 8004aca:	e015      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a1d      	ldr	r2, [pc, #116]	@ (8004b44 <USB_SetTurnaroundTime+0x13c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d906      	bls.n	8004ae2 <USB_SetTurnaroundTime+0xda>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8004b48 <USB_SetTurnaroundTime+0x140>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d202      	bcs.n	8004ae2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004adc:	2307      	movs	r3, #7
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	e00a      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ae2:	2306      	movs	r3, #6
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	e007      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004aee:	2309      	movs	r3, #9
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e001      	b.n	8004af8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004af4:	2309      	movs	r3, #9
 8004af6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	00d8acbf 	.word	0x00d8acbf
 8004b28:	00e4e1c0 	.word	0x00e4e1c0
 8004b2c:	00f42400 	.word	0x00f42400
 8004b30:	01067380 	.word	0x01067380
 8004b34:	011a499f 	.word	0x011a499f
 8004b38:	01312cff 	.word	0x01312cff
 8004b3c:	014ca43f 	.word	0x014ca43f
 8004b40:	016e3600 	.word	0x016e3600
 8004b44:	01a6ab1f 	.word	0x01a6ab1f
 8004b48:	01e84800 	.word	0x01e84800

08004b4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d115      	bne.n	8004bde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bbe:	200a      	movs	r0, #10
 8004bc0:	f7fc fe54 	bl	800186c <HAL_Delay>
      ms += 10U;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	330a      	adds	r3, #10
 8004bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f001 f93f 	bl	8005e4e <USB_GetMode>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d01e      	beq.n	8004c14 <USB_SetCurrentMode+0x84>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bda:	d9f0      	bls.n	8004bbe <USB_SetCurrentMode+0x2e>
 8004bdc:	e01a      	b.n	8004c14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d115      	bne.n	8004c10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004bf0:	200a      	movs	r0, #10
 8004bf2:	f7fc fe3b 	bl	800186c <HAL_Delay>
      ms += 10U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	330a      	adds	r3, #10
 8004bfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 f926 	bl	8005e4e <USB_GetMode>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <USB_SetCurrentMode+0x84>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c0c:	d9f0      	bls.n	8004bf0 <USB_SetCurrentMode+0x60>
 8004c0e:	e001      	b.n	8004c14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e005      	b.n	8004c20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c18:	d101      	bne.n	8004c1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c28:	b084      	sub	sp, #16
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c42:	2300      	movs	r3, #0
 8004c44:	613b      	str	r3, [r7, #16]
 8004c46:	e009      	b.n	8004c5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3340      	adds	r3, #64	@ 0x40
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2b0e      	cmp	r3, #14
 8004c60:	d9f2      	bls.n	8004c48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11c      	bne.n	8004ca4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c78:	f043 0302 	orr.w	r3, r3, #2
 8004c7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ca2:	e00b      	b.n	8004cbc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d10d      	bne.n	8004cec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f968 	bl	8004fb0 <USB_SetDevSpeed>
 8004ce0:	e008      	b.n	8004cf4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f963 	bl	8004fb0 <USB_SetDevSpeed>
 8004cea:	e003      	b.n	8004cf4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cec:	2103      	movs	r1, #3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f95e 	bl	8004fb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cf4:	2110      	movs	r1, #16
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8fa 	bl	8004ef0 <USB_FlushTxFifo>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f924 	bl	8004f54 <USB_FlushRxFifo>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d34:	461a      	mov	r2, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e043      	b.n	8004dc8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d56:	d118      	bne.n	8004d8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	e013      	b.n	8004d9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d80:	461a      	mov	r2, r3
 8004d82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	e008      	b.n	8004d9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da8:	461a      	mov	r2, r3
 8004daa:	2300      	movs	r3, #0
 8004dac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004dcc:	461a      	mov	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d3b5      	bcc.n	8004d40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e043      	b.n	8004e62 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004df0:	d118      	bne.n	8004e24 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e04:	461a      	mov	r2, r3
 8004e06:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	e013      	b.n	8004e36 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e008      	b.n	8004e36 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e30:	461a      	mov	r2, r3
 8004e32:	2300      	movs	r3, #0
 8004e34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	015a      	lsls	r2, r3, #5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e42:	461a      	mov	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	461a      	mov	r2, r3
 8004e56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e66:	461a      	mov	r2, r3
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d3b5      	bcc.n	8004dda <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f043 0210 	orr.w	r2, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	4b10      	ldr	r3, [pc, #64]	@ (8004eec <USB_DevInit+0x2c4>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f043 0208 	orr.w	r2, r3, #8
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ec4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ed4:	f043 0304 	orr.w	r3, r3, #4
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee8:	b004      	add	sp, #16
 8004eea:	4770      	bx	lr
 8004eec:	803c3800 	.word	0x803c3800

08004ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f0a:	d901      	bls.n	8004f10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e01b      	b.n	8004f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	daf2      	bge.n	8004efe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	019b      	lsls	r3, r3, #6
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f34:	d901      	bls.n	8004f3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e006      	b.n	8004f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d0f0      	beq.n	8004f28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f6c:	d901      	bls.n	8004f72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e018      	b.n	8004fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	daf2      	bge.n	8004f60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2210      	movs	r2, #16
 8004f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f90:	d901      	bls.n	8004f96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e006      	b.n	8004fa4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d0f0      	beq.n	8004f84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0306 	and.w	r3, r3, #6
 8004ffa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d102      	bne.n	8005008 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
 8005006:	e00a      	b.n	800501e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d002      	beq.n	8005014 <USB_GetDevSpeed+0x32>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b06      	cmp	r3, #6
 8005012:	d102      	bne.n	800501a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005014:	2302      	movs	r3, #2
 8005016:	75fb      	strb	r3, [r7, #23]
 8005018:	e001      	b.n	800501e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800501a:	230f      	movs	r3, #15
 800501c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d13a      	bne.n	80050be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	b29b      	uxth	r3, r3
 8005060:	68f9      	ldr	r1, [r7, #12]
 8005062:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005066:	4313      	orrs	r3, r2
 8005068:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d155      	bne.n	800512c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	791b      	ldrb	r3, [r3, #4]
 800509a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800509c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	059b      	lsls	r3, r3, #22
 80050a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050a4:	4313      	orrs	r3, r2
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	0151      	lsls	r1, r2, #5
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	440a      	add	r2, r1
 80050ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	e036      	b.n	800512c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c4:	69da      	ldr	r2, [r3, #28]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	2101      	movs	r1, #1
 80050d0:	fa01 f303 	lsl.w	r3, r1, r3
 80050d4:	041b      	lsls	r3, r3, #16
 80050d6:	68f9      	ldr	r1, [r7, #12]
 80050d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050dc:	4313      	orrs	r3, r2
 80050de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11a      	bne.n	800512c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	791b      	ldrb	r3, [r3, #4]
 8005110:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005112:	430b      	orrs	r3, r1
 8005114:	4313      	orrs	r3, r2
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	0151      	lsls	r1, r2, #5
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	440a      	add	r2, r1
 800511e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	785b      	ldrb	r3, [r3, #1]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d161      	bne.n	800521c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800516a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800516e:	d11f      	bne.n	80051b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800518a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800518e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	0151      	lsls	r1, r2, #5
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	440a      	add	r2, r1
 80051a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	2101      	movs	r1, #1
 80051c2:	fa01 f303 	lsl.w	r3, r1, r3
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051d0:	4013      	ands	r3, r2
 80051d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	2101      	movs	r1, #1
 80051e6:	fa01 f303 	lsl.w	r3, r1, r3
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	43db      	mvns	r3, r3
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051f4:	4013      	ands	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	0159      	lsls	r1, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	440b      	add	r3, r1
 800520e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005212:	4619      	mov	r1, r3
 8005214:	4b35      	ldr	r3, [pc, #212]	@ (80052ec <USB_DeactivateEndpoint+0x1b0>)
 8005216:	4013      	ands	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
 800521a:	e060      	b.n	80052de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800522e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005232:	d11f      	bne.n	8005274 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800524e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005252:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800526e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005272:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800527a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	f003 030f 	and.w	r3, r3, #15
 8005284:	2101      	movs	r1, #1
 8005286:	fa01 f303 	lsl.w	r3, r1, r3
 800528a:	041b      	lsls	r3, r3, #16
 800528c:	43db      	mvns	r3, r3
 800528e:	68f9      	ldr	r1, [r7, #12]
 8005290:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005294:	4013      	ands	r3, r2
 8005296:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f303 	lsl.w	r3, r1, r3
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	43db      	mvns	r3, r3
 80052b2:	68f9      	ldr	r1, [r7, #12]
 80052b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80052b8:	4013      	ands	r3, r2
 80052ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	0159      	lsls	r1, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	440b      	add	r3, r1
 80052d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052d6:	4619      	mov	r1, r3
 80052d8:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <USB_DeactivateEndpoint+0x1b4>)
 80052da:	4013      	ands	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	ec337800 	.word	0xec337800
 80052f0:	eff37800 	.word	0xeff37800

080052f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	785b      	ldrb	r3, [r3, #1]
 8005310:	2b01      	cmp	r3, #1
 8005312:	f040 817f 	bne.w	8005614 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d132      	bne.n	8005384 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	69fa      	ldr	r2, [r7, #28]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005338:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800533c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005340:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537c:	0cdb      	lsrs	r3, r3, #19
 800537e:	04db      	lsls	r3, r3, #19
 8005380:	6113      	str	r3, [r2, #16]
 8005382:	e097      	b.n	80054b4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	0151      	lsls	r1, r2, #5
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	440a      	add	r2, r1
 800539a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800539e:	0cdb      	lsrs	r3, r3, #19
 80053a0:	04db      	lsls	r3, r3, #19
 80053a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	0151      	lsls	r1, r2, #5
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	440a      	add	r2, r1
 80053ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053be:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80053c2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80053c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d11a      	bne.n	8005404 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691a      	ldr	r2, [r3, #16]
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d903      	bls.n	80053e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005400:	6113      	str	r3, [r2, #16]
 8005402:	e044      	b.n	800548e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	691a      	ldr	r2, [r3, #16]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4413      	add	r3, r2
 800540e:	1e5a      	subs	r2, r3, #1
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	015a      	lsls	r2, r3, #5
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	4413      	add	r3, r2
 8005422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	8afb      	ldrh	r3, [r7, #22]
 800542a:	04d9      	lsls	r1, r3, #19
 800542c:	4ba4      	ldr	r3, [pc, #656]	@ (80056c0 <USB_EPStartXfer+0x3cc>)
 800542e:	400b      	ands	r3, r1
 8005430:	69b9      	ldr	r1, [r7, #24]
 8005432:	0148      	lsls	r0, r1, #5
 8005434:	69f9      	ldr	r1, [r7, #28]
 8005436:	4401      	add	r1, r0
 8005438:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800543c:	4313      	orrs	r3, r2
 800543e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d122      	bne.n	800548e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005462:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005466:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005474:	691a      	ldr	r2, [r3, #16]
 8005476:	8afb      	ldrh	r3, [r7, #22]
 8005478:	075b      	lsls	r3, r3, #29
 800547a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	0148      	lsls	r0, r1, #5
 8005482:	69f9      	ldr	r1, [r7, #28]
 8005484:	4401      	add	r1, r0
 8005486:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	0148      	lsls	r0, r1, #5
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	4401      	add	r1, r0
 80054ac:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80054b0:	4313      	orrs	r3, r2
 80054b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d14b      	bne.n	8005552 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	791b      	ldrb	r3, [r3, #4]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d128      	bne.n	8005530 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d110      	bne.n	8005510 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	0151      	lsls	r1, r2, #5
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	440a      	add	r2, r1
 8005504:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e00f      	b.n	8005530 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	69fa      	ldr	r2, [r7, #28]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e166      	b.n	8005820 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005570:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	791b      	ldrb	r3, [r3, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d015      	beq.n	80055a6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 814e 	beq.w	8005820 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800558a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055a0:	4313      	orrs	r3, r2
 80055a2:	634b      	str	r3, [r1, #52]	@ 0x34
 80055a4:	e13c      	b.n	8005820 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d110      	bne.n	80055d8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e00f      	b.n	80055f8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055f6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68d9      	ldr	r1, [r3, #12]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781a      	ldrb	r2, [r3, #0]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	b298      	uxth	r0, r3
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	4603      	mov	r3, r0
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f9b9 	bl	8005984 <USB_WritePacket>
 8005612:	e105      	b.n	8005820 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562e:	0cdb      	lsrs	r3, r3, #19
 8005630:	04db      	lsls	r3, r3, #19
 8005632:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005652:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005656:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d132      	bne.n	80056c4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	689a      	ldr	r2, [r3, #8]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	4401      	add	r1, r0
 8005694:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056ba:	6113      	str	r3, [r2, #16]
 80056bc:	e062      	b.n	8005784 <USB_EPStartXfer+0x490>
 80056be:	bf00      	nop
 80056c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d123      	bne.n	8005714 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	69b9      	ldr	r1, [r7, #24]
 80056e4:	0148      	lsls	r0, r1, #5
 80056e6:	69f9      	ldr	r1, [r7, #28]
 80056e8:	4401      	add	r1, r0
 80056ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	69fa      	ldr	r2, [r7, #28]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800570c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005710:	6113      	str	r3, [r2, #16]
 8005712:	e037      	b.n	8005784 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4413      	add	r3, r2
 800571e:	1e5a      	subs	r2, r3, #1
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	8afa      	ldrh	r2, [r7, #22]
 8005730:	fb03 f202 	mul.w	r2, r3, r2
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4413      	add	r3, r2
 8005740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	8afb      	ldrh	r3, [r7, #22]
 8005748:	04d9      	lsls	r1, r3, #19
 800574a:	4b38      	ldr	r3, [pc, #224]	@ (800582c <USB_EPStartXfer+0x538>)
 800574c:	400b      	ands	r3, r1
 800574e:	69b9      	ldr	r1, [r7, #24]
 8005750:	0148      	lsls	r0, r1, #5
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	4401      	add	r1, r0
 8005756:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800575a:	4313      	orrs	r3, r2
 800575c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005774:	69b9      	ldr	r1, [r7, #24]
 8005776:	0148      	lsls	r0, r1, #5
 8005778:	69f9      	ldr	r1, [r7, #28]
 800577a:	4401      	add	r1, r0
 800577c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005780:	4313      	orrs	r3, r2
 8005782:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d10d      	bne.n	80057a6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	68d9      	ldr	r1, [r3, #12]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	460a      	mov	r2, r1
 80057a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	791b      	ldrb	r3, [r3, #4]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d128      	bne.n	8005800 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d110      	bne.n	80057e0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e00f      	b.n	8005800 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800581e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	1ff80000 	.word	0x1ff80000

08005830 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d14a      	bne.n	80058e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005866:	f040 8086 	bne.w	8005976 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	7812      	ldrb	r2, [r2, #0]
 800587e:	0151      	lsls	r1, r2, #5
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	440a      	add	r2, r1
 8005884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005888:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800588c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058be:	4293      	cmp	r3, r2
 80058c0:	d902      	bls.n	80058c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
          break;
 80058c6:	e056      	b.n	8005976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e0:	d0e7      	beq.n	80058b2 <USB_EPStopXfer+0x82>
 80058e2:	e048      	b.n	8005976 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058fc:	d13b      	bne.n	8005976 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	7812      	ldrb	r2, [r2, #0]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800591c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005920:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	0151      	lsls	r1, r2, #5
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	440a      	add	r2, r1
 800593c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005940:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005952:	4293      	cmp	r3, r2
 8005954:	d902      	bls.n	800595c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	75fb      	strb	r3, [r7, #23]
          break;
 800595a:	e00c      	b.n	8005976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005974:	d0e7      	beq.n	8005946 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	371c      	adds	r7, #28
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005984:	b480      	push	{r7}
 8005986:	b089      	sub	sp, #36	@ 0x24
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	60b9      	str	r1, [r7, #8]
 800598e:	4611      	mov	r1, r2
 8005990:	461a      	mov	r2, r3
 8005992:	460b      	mov	r3, r1
 8005994:	71fb      	strb	r3, [r7, #7]
 8005996:	4613      	mov	r3, r2
 8005998:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d123      	bne.n	80059f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059aa:	88bb      	ldrh	r3, [r7, #4]
 80059ac:	3303      	adds	r3, #3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e018      	b.n	80059ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	031a      	lsls	r2, r3, #12
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059c4:	461a      	mov	r2, r3
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	3301      	adds	r3, #1
 80059d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	3301      	adds	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	3301      	adds	r3, #1
 80059e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	3301      	adds	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d3e2      	bcc.n	80059b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3724      	adds	r7, #36	@ 0x24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b08b      	sub	sp, #44	@ 0x2c
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a16:	88fb      	ldrh	r3, [r7, #6]
 8005a18:	089b      	lsrs	r3, r3, #2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a1e:	88fb      	ldrh	r3, [r7, #6]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e014      	b.n	8005a56 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a36:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	3301      	adds	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	3301      	adds	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	3301      	adds	r3, #1
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3a      	ldr	r2, [r7, #32]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d3e6      	bcc.n	8005a2c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a5e:	8bfb      	ldrh	r3, [r7, #30]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01e      	beq.n	8005aa2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f107 0310 	add.w	r3, r7, #16
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	fa22 f303 	lsr.w	r3, r2, r3
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	701a      	strb	r2, [r3, #0]
      i++;
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	3301      	adds	r3, #1
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a96:	8bfb      	ldrh	r3, [r7, #30]
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a9c:	8bfb      	ldrh	r3, [r7, #30]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ea      	bne.n	8005a78 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	372c      	adds	r7, #44	@ 0x2c
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d12c      	bne.n	8005b26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	db12      	blt.n	8005b04 <USB_EPSetStall+0x54>
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68ba      	ldr	r2, [r7, #8]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005afe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e02b      	b.n	8005b7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	db12      	blt.n	8005b5e <USB_EPSetStall+0xae>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	0151      	lsls	r1, r2, #5
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	440a      	add	r2, r1
 8005b54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d128      	bne.n	8005bfa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	791b      	ldrb	r3, [r3, #4]
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d003      	beq.n	8005bd8 <USB_EPClearStall+0x4c>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	791b      	ldrb	r3, [r3, #4]
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d138      	bne.n	8005c4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e027      	b.n	8005c4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	791b      	ldrb	r3, [r3, #4]
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d003      	beq.n	8005c2a <USB_EPClearStall+0x9e>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d10f      	bne.n	8005c4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c76:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	78fb      	ldrb	r3, [r7, #3]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c8c:	68f9      	ldr	r1, [r7, #12]
 8005c8e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c92:	4313      	orrs	r3, r2
 8005c94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cbe:	f023 0303 	bic.w	r3, r3, #3
 8005cc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd2:	f023 0302 	bic.w	r3, r3, #2
 8005cd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d00:	f023 0303 	bic.w	r3, r3, #3
 8005d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	0c1b      	lsrs	r3, r3, #16
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	4013      	ands	r3, r2
 8005da4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	b29b      	uxth	r3, r3
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005dc6:	78fb      	ldrb	r3, [r7, #3]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	4013      	ands	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005de4:	68bb      	ldr	r3, [r7, #8]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e22:	01db      	lsls	r3, r3, #7
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e40:	68bb      	ldr	r3, [r7, #8]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	370c      	adds	r7, #12
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b085      	sub	sp, #20
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e84:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e88:	f023 0307 	bic.w	r3, r3, #7
 8005e8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	333c      	adds	r3, #60	@ 0x3c
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <USB_EP0_OutStart+0xb8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d90a      	bls.n	8005eea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ee4:	d101      	bne.n	8005eea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e037      	b.n	8005f5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f18:	f043 0318 	orr.w	r3, r3, #24
 8005f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f2c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005f30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f32:	7afb      	ldrb	r3, [r7, #11]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d10f      	bne.n	8005f58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f52:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	4f54300a 	.word	0x4f54300a

08005f6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f84:	d901      	bls.n	8005f8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e01b      	b.n	8005fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	daf2      	bge.n	8005f78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f043 0201 	orr.w	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fae:	d901      	bls.n	8005fb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e006      	b.n	8005fc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d0f0      	beq.n	8005fa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005fdc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005fe0:	f002 fc56 	bl	8008890 <USBD_static_malloc>
 8005fe4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	32b0      	adds	r2, #176	@ 0xb0
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0d4      	b.n	80061aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006000:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006004:	2100      	movs	r1, #0
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f003 fca6 	bl	8009958 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	32b0      	adds	r2, #176	@ 0xb0
 8006016:	68f9      	ldr	r1, [r7, #12]
 8006018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	32b0      	adds	r2, #176	@ 0xb0
 8006026:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	7c1b      	ldrb	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d138      	bne.n	80060aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006038:	4b5e      	ldr	r3, [pc, #376]	@ (80061b4 <USBD_CDC_Init+0x1e4>)
 800603a:	7819      	ldrb	r1, [r3, #0]
 800603c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006040:	2202      	movs	r2, #2
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f002 fb01 	bl	800864a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <USBD_CDC_Init+0x1e4>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 020f 	and.w	r2, r3, #15
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	440b      	add	r3, r1
 800605c:	3324      	adds	r3, #36	@ 0x24
 800605e:	2201      	movs	r2, #1
 8006060:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006062:	4b55      	ldr	r3, [pc, #340]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 8006064:	7819      	ldrb	r1, [r3, #0]
 8006066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800606a:	2202      	movs	r2, #2
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f002 faec 	bl	800864a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006072:	4b51      	ldr	r3, [pc, #324]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f003 020f 	and.w	r2, r3, #15
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	440b      	add	r3, r1
 8006086:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800608a:	2201      	movs	r2, #1
 800608c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800608e:	4b4b      	ldr	r3, [pc, #300]	@ (80061bc <USBD_CDC_Init+0x1ec>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	f003 020f 	and.w	r2, r3, #15
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	3326      	adds	r3, #38	@ 0x26
 80060a4:	2210      	movs	r2, #16
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e035      	b.n	8006116 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060aa:	4b42      	ldr	r3, [pc, #264]	@ (80061b4 <USBD_CDC_Init+0x1e4>)
 80060ac:	7819      	ldrb	r1, [r3, #0]
 80060ae:	2340      	movs	r3, #64	@ 0x40
 80060b0:	2202      	movs	r2, #2
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f002 fac9 	bl	800864a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80060b8:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <USBD_CDC_Init+0x1e4>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3324      	adds	r3, #36	@ 0x24
 80060ce:	2201      	movs	r2, #1
 80060d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060d2:	4b39      	ldr	r3, [pc, #228]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 80060d4:	7819      	ldrb	r1, [r3, #0]
 80060d6:	2340      	movs	r3, #64	@ 0x40
 80060d8:	2202      	movs	r2, #2
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f002 fab5 	bl	800864a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060e0:	4b35      	ldr	r3, [pc, #212]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	6879      	ldr	r1, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	440b      	add	r3, r1
 80060f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060f8:	2201      	movs	r2, #1
 80060fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060fc:	4b2f      	ldr	r3, [pc, #188]	@ (80061bc <USBD_CDC_Init+0x1ec>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	3326      	adds	r3, #38	@ 0x26
 8006112:	2210      	movs	r2, #16
 8006114:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006116:	4b29      	ldr	r3, [pc, #164]	@ (80061bc <USBD_CDC_Init+0x1ec>)
 8006118:	7819      	ldrb	r1, [r3, #0]
 800611a:	2308      	movs	r3, #8
 800611c:	2203      	movs	r2, #3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f002 fa93 	bl	800864a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006124:	4b25      	ldr	r3, [pc, #148]	@ (80061bc <USBD_CDC_Init+0x1ec>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3324      	adds	r3, #36	@ 0x24
 800613a:	2201      	movs	r2, #1
 800613c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	33b0      	adds	r3, #176	@ 0xb0
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006174:	2302      	movs	r3, #2
 8006176:	e018      	b.n	80061aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	7c1b      	ldrb	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10a      	bne.n	8006196 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006180:	4b0d      	ldr	r3, [pc, #52]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 8006182:	7819      	ldrb	r1, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800618a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 fb4a 	bl	8008828 <USBD_LL_PrepareReceive>
 8006194:	e008      	b.n	80061a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006196:	4b08      	ldr	r3, [pc, #32]	@ (80061b8 <USBD_CDC_Init+0x1e8>)
 8006198:	7819      	ldrb	r1, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80061a0:	2340      	movs	r3, #64	@ 0x40
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f002 fb40 	bl	8008828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	2000009f 	.word	0x2000009f
 80061b8:	200000a0 	.word	0x200000a0
 80061bc:	200000a1 	.word	0x200000a1

080061c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80061cc:	4b3a      	ldr	r3, [pc, #232]	@ (80062b8 <USBD_CDC_DeInit+0xf8>)
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f002 fa5f 	bl	8008696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80061d8:	4b37      	ldr	r3, [pc, #220]	@ (80062b8 <USBD_CDC_DeInit+0xf8>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	3324      	adds	r3, #36	@ 0x24
 80061ee:	2200      	movs	r2, #0
 80061f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80061f2:	4b32      	ldr	r3, [pc, #200]	@ (80062bc <USBD_CDC_DeInit+0xfc>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f002 fa4c 	bl	8008696 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061fe:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <USBD_CDC_DeInit+0xfc>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	f003 020f 	and.w	r2, r3, #15
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006216:	2200      	movs	r2, #0
 8006218:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800621a:	4b29      	ldr	r3, [pc, #164]	@ (80062c0 <USBD_CDC_DeInit+0x100>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f002 fa38 	bl	8008696 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006226:	4b26      	ldr	r3, [pc, #152]	@ (80062c0 <USBD_CDC_DeInit+0x100>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	3324      	adds	r3, #36	@ 0x24
 800623c:	2200      	movs	r2, #0
 800623e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006240:	4b1f      	ldr	r3, [pc, #124]	@ (80062c0 <USBD_CDC_DeInit+0x100>)
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	f003 020f 	and.w	r2, r3, #15
 8006248:	6879      	ldr	r1, [r7, #4]
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	3326      	adds	r3, #38	@ 0x26
 8006256:	2200      	movs	r2, #0
 8006258:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	32b0      	adds	r2, #176	@ 0xb0
 8006264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01f      	beq.n	80062ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	33b0      	adds	r3, #176	@ 0xb0
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32b0      	adds	r2, #176	@ 0xb0
 800628a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628e:	4618      	mov	r0, r3
 8006290:	f002 fb0c 	bl	80088ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	32b0      	adds	r2, #176	@ 0xb0
 800629e:	2100      	movs	r1, #0
 80062a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	2000009f 	.word	0x2000009f
 80062bc:	200000a0 	.word	0x200000a0
 80062c0:	200000a1 	.word	0x200000a1

080062c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	32b0      	adds	r2, #176	@ 0xb0
 80062d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e0bf      	b.n	8006474 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d050      	beq.n	80063a2 <USBD_CDC_Setup+0xde>
 8006300:	2b20      	cmp	r3, #32
 8006302:	f040 80af 	bne.w	8006464 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	88db      	ldrh	r3, [r3, #6]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d03a      	beq.n	8006384 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b25b      	sxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	da1b      	bge.n	8006350 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	33b0      	adds	r3, #176	@ 0xb0
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800632e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	88d2      	ldrh	r2, [r2, #6]
 8006334:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	88db      	ldrh	r3, [r3, #6]
 800633a:	2b07      	cmp	r3, #7
 800633c:	bf28      	it	cs
 800633e:	2307      	movcs	r3, #7
 8006340:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	89fa      	ldrh	r2, [r7, #14]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fd53 	bl	8007df4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800634e:	e090      	b.n	8006472 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785a      	ldrb	r2, [r3, #1]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	88db      	ldrh	r3, [r3, #6]
 800635e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006360:	d803      	bhi.n	800636a <USBD_CDC_Setup+0xa6>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	88db      	ldrh	r3, [r3, #6]
 8006366:	b2da      	uxtb	r2, r3
 8006368:	e000      	b.n	800636c <USBD_CDC_Setup+0xa8>
 800636a:	2240      	movs	r2, #64	@ 0x40
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006372:	6939      	ldr	r1, [r7, #16]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800637a:	461a      	mov	r2, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 fd65 	bl	8007e4c <USBD_CtlPrepareRx>
      break;
 8006382:	e076      	b.n	8006472 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	33b0      	adds	r3, #176	@ 0xb0
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	7850      	ldrb	r0, [r2, #1]
 800639a:	2200      	movs	r2, #0
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4798      	blx	r3
      break;
 80063a0:	e067      	b.n	8006472 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	785b      	ldrb	r3, [r3, #1]
 80063a6:	2b0b      	cmp	r3, #11
 80063a8:	d851      	bhi.n	800644e <USBD_CDC_Setup+0x18a>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <USBD_CDC_Setup+0xec>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	0800645d 	.word	0x0800645d
 80063b8:	0800644f 	.word	0x0800644f
 80063bc:	0800644f 	.word	0x0800644f
 80063c0:	0800644f 	.word	0x0800644f
 80063c4:	0800644f 	.word	0x0800644f
 80063c8:	0800644f 	.word	0x0800644f
 80063cc:	0800644f 	.word	0x0800644f
 80063d0:	0800644f 	.word	0x0800644f
 80063d4:	0800644f 	.word	0x0800644f
 80063d8:	0800640b 	.word	0x0800640b
 80063dc:	08006435 	.word	0x08006435
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d107      	bne.n	80063fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063ec:	f107 030a 	add.w	r3, r7, #10
 80063f0:	2202      	movs	r2, #2
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fcfd 	bl	8007df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063fa:	e032      	b.n	8006462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fc7b 	bl	8007cfa <USBD_CtlError>
            ret = USBD_FAIL;
 8006404:	2303      	movs	r3, #3
 8006406:	75fb      	strb	r3, [r7, #23]
          break;
 8006408:	e02b      	b.n	8006462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b03      	cmp	r3, #3
 8006414:	d107      	bne.n	8006426 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006416:	f107 030d 	add.w	r3, r7, #13
 800641a:	2201      	movs	r2, #1
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fce8 	bl	8007df4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006424:	e01d      	b.n	8006462 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 fc66 	bl	8007cfa <USBD_CtlError>
            ret = USBD_FAIL;
 800642e:	2303      	movs	r3, #3
 8006430:	75fb      	strb	r3, [r7, #23]
          break;
 8006432:	e016      	b.n	8006462 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b03      	cmp	r3, #3
 800643e:	d00f      	beq.n	8006460 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fc59 	bl	8007cfa <USBD_CtlError>
            ret = USBD_FAIL;
 8006448:	2303      	movs	r3, #3
 800644a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800644c:	e008      	b.n	8006460 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fc52 	bl	8007cfa <USBD_CtlError>
          ret = USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	75fb      	strb	r3, [r7, #23]
          break;
 800645a:	e002      	b.n	8006462 <USBD_CDC_Setup+0x19e>
          break;
 800645c:	bf00      	nop
 800645e:	e008      	b.n	8006472 <USBD_CDC_Setup+0x1ae>
          break;
 8006460:	bf00      	nop
      }
      break;
 8006462:	e006      	b.n	8006472 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fc47 	bl	8007cfa <USBD_CtlError>
      ret = USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	75fb      	strb	r3, [r7, #23]
      break;
 8006470:	bf00      	nop
  }

  return (uint8_t)ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800648e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	32b0      	adds	r2, #176	@ 0xb0
 800649a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e065      	b.n	8006572 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	32b0      	adds	r2, #176	@ 0xb0
 80064b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	3318      	adds	r3, #24
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d02f      	beq.n	8006530 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	f003 020f 	and.w	r2, r3, #15
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	3318      	adds	r3, #24
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	f003 010f 	and.w	r1, r3, #15
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	460b      	mov	r3, r1
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4403      	add	r3, r0
 80064f8:	331c      	adds	r3, #28
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006506:	2b00      	cmp	r3, #0
 8006508:	d112      	bne.n	8006530 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 020f 	and.w	r2, r3, #15
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	3318      	adds	r3, #24
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006522:	78f9      	ldrb	r1, [r7, #3]
 8006524:	2300      	movs	r3, #0
 8006526:	2200      	movs	r2, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f002 f95c 	bl	80087e6 <USBD_LL_Transmit>
 800652e:	e01f      	b.n	8006570 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	33b0      	adds	r3, #176	@ 0xb0
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d010      	beq.n	8006570 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	33b0      	adds	r3, #176	@ 0xb0
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800656c:	78fa      	ldrb	r2, [r7, #3]
 800656e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	32b0      	adds	r2, #176	@ 0xb0
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	32b0      	adds	r2, #176	@ 0xb0
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e01a      	b.n	80065e2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 f95a 	bl	800886a <USBD_LL_GetRxDataSize>
 80065b6:	4602      	mov	r2, r0
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	33b0      	adds	r3, #176	@ 0xb0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80065dc:	4611      	mov	r1, r2
 80065de:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32b0      	adds	r2, #176	@ 0xb0
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e024      	b.n	8006656 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	33b0      	adds	r3, #176	@ 0xb0
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d019      	beq.n	8006654 <USBD_CDC_EP0_RxReady+0x6a>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006626:	2bff      	cmp	r3, #255	@ 0xff
 8006628:	d014      	beq.n	8006654 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	33b0      	adds	r3, #176	@ 0xb0
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006642:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800664a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	22ff      	movs	r2, #255	@ 0xff
 8006650:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006668:	2182      	movs	r1, #130	@ 0x82
 800666a:	4818      	ldr	r0, [pc, #96]	@ (80066cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800666c:	f000 fd0f 	bl	800708e <USBD_GetEpDesc>
 8006670:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006672:	2101      	movs	r1, #1
 8006674:	4815      	ldr	r0, [pc, #84]	@ (80066cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006676:	f000 fd0a 	bl	800708e <USBD_GetEpDesc>
 800667a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800667c:	2181      	movs	r1, #129	@ 0x81
 800667e:	4813      	ldr	r0, [pc, #76]	@ (80066cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006680:	f000 fd05 	bl	800708e <USBD_GetEpDesc>
 8006684:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2210      	movs	r2, #16
 8006690:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2200      	movs	r2, #0
 800669c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066a0:	711a      	strb	r2, [r3, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d006      	beq.n	80066ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066b4:	711a      	strb	r2, [r3, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2243      	movs	r2, #67	@ 0x43
 80066be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066c0:	4b02      	ldr	r3, [pc, #8]	@ (80066cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	2000005c 	.word	0x2000005c

080066d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066d8:	2182      	movs	r1, #130	@ 0x82
 80066da:	4818      	ldr	r0, [pc, #96]	@ (800673c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066dc:	f000 fcd7 	bl	800708e <USBD_GetEpDesc>
 80066e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066e2:	2101      	movs	r1, #1
 80066e4:	4815      	ldr	r0, [pc, #84]	@ (800673c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066e6:	f000 fcd2 	bl	800708e <USBD_GetEpDesc>
 80066ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066ec:	2181      	movs	r1, #129	@ 0x81
 80066ee:	4813      	ldr	r0, [pc, #76]	@ (800673c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80066f0:	f000 fccd 	bl	800708e <USBD_GetEpDesc>
 80066f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2210      	movs	r2, #16
 8006700:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d006      	beq.n	8006716 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	2200      	movs	r2, #0
 800670c:	711a      	strb	r2, [r3, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f042 0202 	orr.w	r2, r2, #2
 8006714:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	711a      	strb	r2, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f042 0202 	orr.w	r2, r2, #2
 8006728:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2243      	movs	r2, #67	@ 0x43
 800672e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006730:	4b02      	ldr	r3, [pc, #8]	@ (800673c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	2000005c 	.word	0x2000005c

08006740 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006748:	2182      	movs	r1, #130	@ 0x82
 800674a:	4818      	ldr	r0, [pc, #96]	@ (80067ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800674c:	f000 fc9f 	bl	800708e <USBD_GetEpDesc>
 8006750:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006752:	2101      	movs	r1, #1
 8006754:	4815      	ldr	r0, [pc, #84]	@ (80067ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006756:	f000 fc9a 	bl	800708e <USBD_GetEpDesc>
 800675a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800675c:	2181      	movs	r1, #129	@ 0x81
 800675e:	4813      	ldr	r0, [pc, #76]	@ (80067ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006760:	f000 fc95 	bl	800708e <USBD_GetEpDesc>
 8006764:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2210      	movs	r2, #16
 8006770:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d006      	beq.n	8006786 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2200      	movs	r2, #0
 800677c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006780:	711a      	strb	r2, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d006      	beq.n	800679a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006794:	711a      	strb	r2, [r3, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2243      	movs	r2, #67	@ 0x43
 800679e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	@ (80067ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	2000005c 	.word	0x2000005c

080067b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	220a      	movs	r2, #10
 80067bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80067be:	4b03      	ldr	r3, [pc, #12]	@ (80067cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr
 80067cc:	20000018 	.word	0x20000018

080067d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e009      	b.n	80067f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	33b0      	adds	r3, #176	@ 0xb0
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	32b0      	adds	r2, #176	@ 0xb0
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006826:	2303      	movs	r3, #3
 8006828:	e008      	b.n	800683c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	32b0      	adds	r2, #176	@ 0xb0
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e004      	b.n	8006876 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	@ 0xb0
 8006896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	32b0      	adds	r2, #176	@ 0xb0
 80068a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e018      	b.n	80068e4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7c1b      	ldrb	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068ba:	4b0c      	ldr	r3, [pc, #48]	@ (80068ec <USBD_CDC_ReceivePacket+0x68>)
 80068bc:	7819      	ldrb	r1, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 ffad 	bl	8008828 <USBD_LL_PrepareReceive>
 80068ce:	e008      	b.n	80068e2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <USBD_CDC_ReceivePacket+0x68>)
 80068d2:	7819      	ldrb	r1, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068da:	2340      	movs	r3, #64	@ 0x40
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 ffa3 	bl	8008828 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	200000a0 	.word	0x200000a0

080068f0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	4613      	mov	r3, r2
 80068fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006904:	2303      	movs	r3, #3
 8006906:	e01f      	b.n	8006948 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	79fa      	ldrb	r2, [r7, #7]
 800693a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f001 fe1d 	bl	800857c <USBD_LL_Init>
 8006942:	4603      	mov	r3, r0
 8006944:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006964:	2303      	movs	r3, #3
 8006966:	e025      	b.n	80069b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32ae      	adds	r2, #174	@ 0xae
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00f      	beq.n	80069a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	32ae      	adds	r2, #174	@ 0xae
 800698e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006994:	f107 020e 	add.w	r2, r7, #14
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	4602      	mov	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fe25 	bl	8008614 <USBD_LL_Start>
 80069ca:	4603      	mov	r3, r0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b084      	sub	sp, #16
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	4611      	mov	r1, r2
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	4603      	mov	r3, r0
 8006a16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	4611      	mov	r1, r2
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f001 f90c 	bl	8007c86 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d01a      	beq.n	8006ac8 <USBD_LL_SetupStage+0x72>
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d822      	bhi.n	8006adc <USBD_LL_SetupStage+0x86>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <USBD_LL_SetupStage+0x4a>
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d00a      	beq.n	8006ab4 <USBD_LL_SetupStage+0x5e>
 8006a9e:	e01d      	b.n	8006adc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb63 	bl	8007174 <USBD_StdDevReq>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab2:	e020      	b.n	8006af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006aba:	4619      	mov	r1, r3
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fbcb 	bl	8007258 <USBD_StdItfReq>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac6:	e016      	b.n	8006af6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fc2d 	bl	8007330 <USBD_StdEPReq>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8006ada:	e00c      	b.n	8006af6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ae2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 fdf2 	bl	80086d4 <USBD_LL_StallEP>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
      break;
 8006af4:	bf00      	nop
  }

  return ret;
 8006af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d16e      	bne.n	8006bf6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	f040 8098 	bne.w	8006c5c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d913      	bls.n	8006b60 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	1ad2      	subs	r2, r2, r3
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bf28      	it	cs
 8006b52:	4613      	movcs	r3, r2
 8006b54:	461a      	mov	r2, r3
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f001 f994 	bl	8007e86 <USBD_CtlContinueRx>
 8006b5e:	e07d      	b.n	8006c5c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d014      	beq.n	8006b98 <USBD_LL_DataOutStage+0x98>
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d81d      	bhi.n	8006bae <USBD_LL_DataOutStage+0xae>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <USBD_LL_DataOutStage+0x7c>
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d003      	beq.n	8006b82 <USBD_LL_DataOutStage+0x82>
 8006b7a:	e018      	b.n	8006bae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b80:	e018      	b.n	8006bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 fa64 	bl	800705a <USBD_CoreFindIF>
 8006b92:	4603      	mov	r3, r0
 8006b94:	75bb      	strb	r3, [r7, #22]
            break;
 8006b96:	e00d      	b.n	8006bb4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 fa66 	bl	8007074 <USBD_CoreFindEP>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	75bb      	strb	r3, [r7, #22]
            break;
 8006bac:	e002      	b.n	8006bb4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bb2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006bb4:	7dbb      	ldrb	r3, [r7, #22]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d119      	bne.n	8006bee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d113      	bne.n	8006bee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006bc6:	7dba      	ldrb	r2, [r7, #22]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	32ae      	adds	r2, #174	@ 0xae
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00b      	beq.n	8006bee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006bd6:	7dba      	ldrb	r2, [r7, #22]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006bde:	7dba      	ldrb	r2, [r7, #22]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	32ae      	adds	r2, #174	@ 0xae
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f001 f95a 	bl	8007ea8 <USBD_CtlSendStatus>
 8006bf4:	e032      	b.n	8006c5c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006bf6:	7afb      	ldrb	r3, [r7, #11]
 8006bf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	4619      	mov	r1, r3
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fa37 	bl	8007074 <USBD_CoreFindEP>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c0a:	7dbb      	ldrb	r3, [r7, #22]
 8006c0c:	2bff      	cmp	r3, #255	@ 0xff
 8006c0e:	d025      	beq.n	8006c5c <USBD_LL_DataOutStage+0x15c>
 8006c10:	7dbb      	ldrb	r3, [r7, #22]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d122      	bne.n	8006c5c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d117      	bne.n	8006c52 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c22:	7dba      	ldrb	r2, [r7, #22]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	32ae      	adds	r2, #174	@ 0xae
 8006c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00f      	beq.n	8006c52 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c32:	7dba      	ldrb	r2, [r7, #22]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c3a:	7dba      	ldrb	r2, [r7, #22]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	32ae      	adds	r2, #174	@ 0xae
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	7afa      	ldrb	r2, [r7, #11]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	4798      	blx	r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	e000      	b.n	8006c5e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b086      	sub	sp, #24
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d16f      	bne.n	8006d5a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3314      	adds	r3, #20
 8006c7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d15a      	bne.n	8006d40 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d914      	bls.n	8006cc0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f001 f8bc 	bl	8007e2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f001 fdb5 	bl	8008828 <USBD_LL_PrepareReceive>
 8006cbe:	e03f      	b.n	8006d40 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d11c      	bne.n	8006d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d316      	bcc.n	8006d06 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d20f      	bcs.n	8006d06 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f001 f89d 	bl	8007e2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f001 fd92 	bl	8008828 <USBD_LL_PrepareReceive>
 8006d04:	e01c      	b.n	8006d40 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d10f      	bne.n	8006d32 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d32:	2180      	movs	r1, #128	@ 0x80
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f001 fccd 	bl	80086d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 f8c7 	bl	8007ece <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d03a      	beq.n	8006dc0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff fe42 	bl	80069d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d58:	e032      	b.n	8006dc0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 f985 	bl	8007074 <USBD_CoreFindEP>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2bff      	cmp	r3, #255	@ 0xff
 8006d72:	d025      	beq.n	8006dc0 <USBD_LL_DataInStage+0x15a>
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d122      	bne.n	8006dc0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d11c      	bne.n	8006dc0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d86:	7dfa      	ldrb	r2, [r7, #23]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	32ae      	adds	r2, #174	@ 0xae
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d014      	beq.n	8006dc0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d96:	7dfa      	ldrb	r2, [r7, #23]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d9e:	7dfa      	ldrb	r2, [r7, #23]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	32ae      	adds	r2, #174	@ 0xae
 8006da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	7afa      	ldrb	r2, [r7, #11]
 8006dac:	4611      	mov	r1, r2
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	4798      	blx	r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006db6:	7dbb      	ldrb	r3, [r7, #22]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006dbc:	7dbb      	ldrb	r3, [r7, #22]
 8006dbe:	e000      	b.n	8006dc2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d014      	beq.n	8006e30 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6852      	ldr	r2, [r2, #4]
 8006e1e:	b2d2      	uxtb	r2, r2
 8006e20:	4611      	mov	r1, r2
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e30:	2340      	movs	r3, #64	@ 0x40
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fc07 	bl	800864a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2240      	movs	r2, #64	@ 0x40
 8006e48:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e4c:	2340      	movs	r3, #64	@ 0x40
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	@ 0x80
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fbf9 	bl	800864a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2240      	movs	r2, #64	@ 0x40
 8006e62:	621a      	str	r2, [r3, #32]

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	460b      	mov	r3, r1
 8006e78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	370c      	adds	r7, #12
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d006      	beq.n	8006eb0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2204      	movs	r2, #4
 8006eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d106      	bne.n	8006ee8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d110      	bne.n	8006f2c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32ae      	adds	r2, #174	@ 0xae
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e01c      	b.n	8006f92 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b03      	cmp	r3, #3
 8006f62:	d115      	bne.n	8006f90 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	@ 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00b      	beq.n	8006f90 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	32ae      	adds	r2, #174	@ 0xae
 8006f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f86:	6a1b      	ldr	r3, [r3, #32]
 8006f88:	78fa      	ldrb	r2, [r7, #3]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	32ae      	adds	r2, #174	@ 0xae
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e01c      	b.n	8006ff6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d115      	bne.n	8006ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	32ae      	adds	r2, #174	@ 0xae
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	32ae      	adds	r2, #174	@ 0xae
 8006fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	78fa      	ldrb	r2, [r7, #3]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b083      	sub	sp, #12
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6852      	ldr	r2, [r2, #4]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	4611      	mov	r1, r2
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	4798      	blx	r3
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007066:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007080:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007082:	4618      	mov	r0, r3
 8007084:	370c      	adds	r7, #12
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr

0800708e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070a2:	2300      	movs	r3, #0
 80070a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	885b      	ldrh	r3, [r3, #2]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d91f      	bls.n	80070f4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070ba:	e013      	b.n	80070e4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070bc:	f107 030a 	add.w	r3, r7, #10
 80070c0:	4619      	mov	r1, r3
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f000 f81b 	bl	80070fe <USBD_GetNextDesc>
 80070c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	2b05      	cmp	r3, #5
 80070d0:	d108      	bne.n	80070e4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	789b      	ldrb	r3, [r3, #2]
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d008      	beq.n	80070f2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	885b      	ldrh	r3, [r3, #2]
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	897b      	ldrh	r3, [r7, #10]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d8e5      	bhi.n	80070bc <USBD_GetEpDesc+0x2e>
 80070f0:	e000      	b.n	80070f4 <USBD_GetEpDesc+0x66>
          break;
 80070f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80070f4:	693b      	ldr	r3, [r7, #16]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80070fe:	b480      	push	{r7}
 8007100:	b085      	sub	sp, #20
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	7812      	ldrb	r2, [r2, #0]
 8007114:	4413      	add	r3, r2
 8007116:	b29a      	uxth	r2, r3
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4413      	add	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007128:	68fb      	ldr	r3, [r7, #12]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007136:	b480      	push	{r7}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3301      	adds	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007154:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	b21a      	sxth	r2, r3
 800715c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007160:	4313      	orrs	r3, r2
 8007162:	b21b      	sxth	r3, r3
 8007164:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007166:	89fb      	ldrh	r3, [r7, #14]
}
 8007168:	4618      	mov	r0, r3
 800716a:	371c      	adds	r7, #28
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800718a:	2b40      	cmp	r3, #64	@ 0x40
 800718c:	d005      	beq.n	800719a <USBD_StdDevReq+0x26>
 800718e:	2b40      	cmp	r3, #64	@ 0x40
 8007190:	d857      	bhi.n	8007242 <USBD_StdDevReq+0xce>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00f      	beq.n	80071b6 <USBD_StdDevReq+0x42>
 8007196:	2b20      	cmp	r3, #32
 8007198:	d153      	bne.n	8007242 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	32ae      	adds	r2, #174	@ 0xae
 80071a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	4798      	blx	r3
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
      break;
 80071b4:	e04a      	b.n	800724c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b09      	cmp	r3, #9
 80071bc:	d83b      	bhi.n	8007236 <USBD_StdDevReq+0xc2>
 80071be:	a201      	add	r2, pc, #4	@ (adr r2, 80071c4 <USBD_StdDevReq+0x50>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	08007219 	.word	0x08007219
 80071c8:	0800722d 	.word	0x0800722d
 80071cc:	08007237 	.word	0x08007237
 80071d0:	08007223 	.word	0x08007223
 80071d4:	08007237 	.word	0x08007237
 80071d8:	080071f7 	.word	0x080071f7
 80071dc:	080071ed 	.word	0x080071ed
 80071e0:	08007237 	.word	0x08007237
 80071e4:	0800720f 	.word	0x0800720f
 80071e8:	08007201 	.word	0x08007201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa3c 	bl	800766c <USBD_GetDescriptor>
          break;
 80071f4:	e024      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fba1 	bl	8007940 <USBD_SetAddress>
          break;
 80071fe:	e01f      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fbe0 	bl	80079c8 <USBD_SetConfig>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]
          break;
 800720c:	e018      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc83 	bl	8007b1c <USBD_GetConfig>
          break;
 8007216:	e013      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fcb4 	bl	8007b88 <USBD_GetStatus>
          break;
 8007220:	e00e      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fce3 	bl	8007bf0 <USBD_SetFeature>
          break;
 800722a:	e009      	b.n	8007240 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fd07 	bl	8007c42 <USBD_ClrFeature>
          break;
 8007234:	e004      	b.n	8007240 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007236:	6839      	ldr	r1, [r7, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fd5e 	bl	8007cfa <USBD_CtlError>
          break;
 800723e:	bf00      	nop
      }
      break;
 8007240:	e004      	b.n	800724c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fd58 	bl	8007cfa <USBD_CtlError>
      break;
 800724a:	bf00      	nop
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop

08007258 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800726e:	2b40      	cmp	r3, #64	@ 0x40
 8007270:	d005      	beq.n	800727e <USBD_StdItfReq+0x26>
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d852      	bhi.n	800731c <USBD_StdItfReq+0xc4>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <USBD_StdItfReq+0x26>
 800727a:	2b20      	cmp	r3, #32
 800727c:	d14e      	bne.n	800731c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	2b02      	cmp	r3, #2
 800728a:	d840      	bhi.n	800730e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	889b      	ldrh	r3, [r3, #4]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b01      	cmp	r3, #1
 8007294:	d836      	bhi.n	8007304 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fedb 	bl	800705a <USBD_CoreFindIF>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2bff      	cmp	r3, #255	@ 0xff
 80072ac:	d01d      	beq.n	80072ea <USBD_StdItfReq+0x92>
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d11a      	bne.n	80072ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072b4:	7bba      	ldrb	r2, [r7, #14]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	32ae      	adds	r2, #174	@ 0xae
 80072ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00f      	beq.n	80072e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072c4:	7bba      	ldrb	r2, [r7, #14]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072cc:	7bba      	ldrb	r2, [r7, #14]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	@ 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	4798      	blx	r3
 80072de:	4603      	mov	r3, r0
 80072e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072e2:	e004      	b.n	80072ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80072e4:	2303      	movs	r3, #3
 80072e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80072e8:	e001      	b.n	80072ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80072ea:	2303      	movs	r3, #3
 80072ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	88db      	ldrh	r3, [r3, #6]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d110      	bne.n	8007318 <USBD_StdItfReq+0xc0>
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10d      	bne.n	8007318 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fdd3 	bl	8007ea8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007302:	e009      	b.n	8007318 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fcf7 	bl	8007cfa <USBD_CtlError>
          break;
 800730c:	e004      	b.n	8007318 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fcf2 	bl	8007cfa <USBD_CtlError>
          break;
 8007316:	e000      	b.n	800731a <USBD_StdItfReq+0xc2>
          break;
 8007318:	bf00      	nop
      }
      break;
 800731a:	e004      	b.n	8007326 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fceb 	bl	8007cfa <USBD_CtlError>
      break;
 8007324:	bf00      	nop
  }

  return ret;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	889b      	ldrh	r3, [r3, #4]
 8007342:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800734c:	2b40      	cmp	r3, #64	@ 0x40
 800734e:	d007      	beq.n	8007360 <USBD_StdEPReq+0x30>
 8007350:	2b40      	cmp	r3, #64	@ 0x40
 8007352:	f200 817f 	bhi.w	8007654 <USBD_StdEPReq+0x324>
 8007356:	2b00      	cmp	r3, #0
 8007358:	d02a      	beq.n	80073b0 <USBD_StdEPReq+0x80>
 800735a:	2b20      	cmp	r3, #32
 800735c:	f040 817a 	bne.w	8007654 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff fe85 	bl	8007074 <USBD_CoreFindEP>
 800736a:	4603      	mov	r3, r0
 800736c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800736e:	7b7b      	ldrb	r3, [r7, #13]
 8007370:	2bff      	cmp	r3, #255	@ 0xff
 8007372:	f000 8174 	beq.w	800765e <USBD_StdEPReq+0x32e>
 8007376:	7b7b      	ldrb	r3, [r7, #13]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 8170 	bne.w	800765e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800737e:	7b7a      	ldrb	r2, [r7, #13]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007386:	7b7a      	ldrb	r2, [r7, #13]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	32ae      	adds	r2, #174	@ 0xae
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8163 	beq.w	800765e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007398:	7b7a      	ldrb	r2, [r7, #13]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	@ 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073ae:	e156      	b.n	800765e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d008      	beq.n	80073ca <USBD_StdEPReq+0x9a>
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	f300 8145 	bgt.w	8007648 <USBD_StdEPReq+0x318>
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 809b 	beq.w	80074fa <USBD_StdEPReq+0x1ca>
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d03c      	beq.n	8007442 <USBD_StdEPReq+0x112>
 80073c8:	e13e      	b.n	8007648 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d002      	beq.n	80073dc <USBD_StdEPReq+0xac>
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d016      	beq.n	8007408 <USBD_StdEPReq+0xd8>
 80073da:	e02c      	b.n	8007436 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073dc:	7bbb      	ldrb	r3, [r7, #14]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00d      	beq.n	80073fe <USBD_StdEPReq+0xce>
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	2b80      	cmp	r3, #128	@ 0x80
 80073e6:	d00a      	beq.n	80073fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f001 f971 	bl	80086d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073f2:	2180      	movs	r1, #128	@ 0x80
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 f96d 	bl	80086d4 <USBD_LL_StallEP>
 80073fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073fc:	e020      	b.n	8007440 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80073fe:	6839      	ldr	r1, [r7, #0]
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fc7a 	bl	8007cfa <USBD_CtlError>
              break;
 8007406:	e01b      	b.n	8007440 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	885b      	ldrh	r3, [r3, #2]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10e      	bne.n	800742e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007410:	7bbb      	ldrb	r3, [r7, #14]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00b      	beq.n	800742e <USBD_StdEPReq+0xfe>
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	2b80      	cmp	r3, #128	@ 0x80
 800741a:	d008      	beq.n	800742e <USBD_StdEPReq+0xfe>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	88db      	ldrh	r3, [r3, #6]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d104      	bne.n	800742e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f001 f953 	bl	80086d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fd3a 	bl	8007ea8 <USBD_CtlSendStatus>

              break;
 8007434:	e004      	b.n	8007440 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fc5e 	bl	8007cfa <USBD_CtlError>
              break;
 800743e:	bf00      	nop
          }
          break;
 8007440:	e107      	b.n	8007652 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d002      	beq.n	8007454 <USBD_StdEPReq+0x124>
 800744e:	2b03      	cmp	r3, #3
 8007450:	d016      	beq.n	8007480 <USBD_StdEPReq+0x150>
 8007452:	e04b      	b.n	80074ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00d      	beq.n	8007476 <USBD_StdEPReq+0x146>
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b80      	cmp	r3, #128	@ 0x80
 800745e:	d00a      	beq.n	8007476 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007460:	7bbb      	ldrb	r3, [r7, #14]
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f935 	bl	80086d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800746a:	2180      	movs	r1, #128	@ 0x80
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f931 	bl	80086d4 <USBD_LL_StallEP>
 8007472:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007474:	e040      	b.n	80074f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc3e 	bl	8007cfa <USBD_CtlError>
              break;
 800747e:	e03b      	b.n	80074f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	885b      	ldrh	r3, [r3, #2]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d136      	bne.n	80074f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748e:	2b00      	cmp	r3, #0
 8007490:	d004      	beq.n	800749c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f001 f93b 	bl	8008712 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fd03 	bl	8007ea8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fde4 	bl	8007074 <USBD_CoreFindEP>
 80074ac:	4603      	mov	r3, r0
 80074ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074b0:	7b7b      	ldrb	r3, [r7, #13]
 80074b2:	2bff      	cmp	r3, #255	@ 0xff
 80074b4:	d01f      	beq.n	80074f6 <USBD_StdEPReq+0x1c6>
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d11c      	bne.n	80074f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074bc:	7b7a      	ldrb	r2, [r7, #13]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074c4:	7b7a      	ldrb	r2, [r7, #13]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	32ae      	adds	r2, #174	@ 0xae
 80074ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d010      	beq.n	80074f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074d4:	7b7a      	ldrb	r2, [r7, #13]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	32ae      	adds	r2, #174	@ 0xae
 80074da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80074ea:	e004      	b.n	80074f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fc03 	bl	8007cfa <USBD_CtlError>
              break;
 80074f4:	e000      	b.n	80074f8 <USBD_StdEPReq+0x1c8>
              break;
 80074f6:	bf00      	nop
          }
          break;
 80074f8:	e0ab      	b.n	8007652 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b02      	cmp	r3, #2
 8007504:	d002      	beq.n	800750c <USBD_StdEPReq+0x1dc>
 8007506:	2b03      	cmp	r3, #3
 8007508:	d032      	beq.n	8007570 <USBD_StdEPReq+0x240>
 800750a:	e097      	b.n	800763c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <USBD_StdEPReq+0x1f2>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b80      	cmp	r3, #128	@ 0x80
 8007516:	d004      	beq.n	8007522 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fbed 	bl	8007cfa <USBD_CtlError>
                break;
 8007520:	e091      	b.n	8007646 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007522:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007526:	2b00      	cmp	r3, #0
 8007528:	da0b      	bge.n	8007542 <USBD_StdEPReq+0x212>
 800752a:	7bbb      	ldrb	r3, [r7, #14]
 800752c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	3310      	adds	r3, #16
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	4413      	add	r3, r2
 800753e:	3304      	adds	r3, #4
 8007540:	e00b      	b.n	800755a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	4413      	add	r3, r2
 8007558:	3304      	adds	r3, #4
 800755a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2202      	movs	r2, #2
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fc43 	bl	8007df4 <USBD_CtlSendData>
              break;
 800756e:	e06a      	b.n	8007646 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	da11      	bge.n	800759c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 020f 	and.w	r2, r3, #15
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	3324      	adds	r3, #36	@ 0x24
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d117      	bne.n	80075c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fbb0 	bl	8007cfa <USBD_CtlError>
                  break;
 800759a:	e054      	b.n	8007646 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	f003 020f 	and.w	r2, r3, #15
 80075a2:	6879      	ldr	r1, [r7, #4]
 80075a4:	4613      	mov	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fb9d 	bl	8007cfa <USBD_CtlError>
                  break;
 80075c0:	e041      	b.n	8007646 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	da0b      	bge.n	80075e2 <USBD_StdEPReq+0x2b2>
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
 80075cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	3310      	adds	r3, #16
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	e00b      	b.n	80075fa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075e8:	4613      	mov	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4413      	add	r3, r2
 80075f8:	3304      	adds	r3, #4
 80075fa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <USBD_StdEPReq+0x2d8>
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b80      	cmp	r3, #128	@ 0x80
 8007606:	d103      	bne.n	8007610 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e00e      	b.n	800762e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007610:	7bbb      	ldrb	r3, [r7, #14]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f001 f89b 	bl	8008750 <USBD_LL_IsStallEP>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2201      	movs	r2, #1
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	e002      	b.n	800762e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fbdd 	bl	8007df4 <USBD_CtlSendData>
              break;
 800763a:	e004      	b.n	8007646 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fb5b 	bl	8007cfa <USBD_CtlError>
              break;
 8007644:	bf00      	nop
          }
          break;
 8007646:	e004      	b.n	8007652 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fb55 	bl	8007cfa <USBD_CtlError>
          break;
 8007650:	bf00      	nop
      }
      break;
 8007652:	e005      	b.n	8007660 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fb4f 	bl	8007cfa <USBD_CtlError>
      break;
 800765c:	e000      	b.n	8007660 <USBD_StdEPReq+0x330>
      break;
 800765e:	bf00      	nop
  }

  return ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	885b      	ldrh	r3, [r3, #2]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b29b      	uxth	r3, r3
 800768a:	3b01      	subs	r3, #1
 800768c:	2b06      	cmp	r3, #6
 800768e:	f200 8128 	bhi.w	80078e2 <USBD_GetDescriptor+0x276>
 8007692:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <USBD_GetDescriptor+0x2c>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076b5 	.word	0x080076b5
 800769c:	080076cd 	.word	0x080076cd
 80076a0:	0800770d 	.word	0x0800770d
 80076a4:	080078e3 	.word	0x080078e3
 80076a8:	080078e3 	.word	0x080078e3
 80076ac:	08007883 	.word	0x08007883
 80076b0:	080078af 	.word	0x080078af
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
      break;
 80076ca:	e112      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7c1b      	ldrb	r3, [r3, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076dc:	f107 0208 	add.w	r2, r7, #8
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3301      	adds	r3, #1
 80076ea:	2202      	movs	r2, #2
 80076ec:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076ee:	e100      	b.n	80078f2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	f107 0208 	add.w	r2, r7, #8
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	2202      	movs	r2, #2
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e0f2      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	885b      	ldrh	r3, [r3, #2]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b05      	cmp	r3, #5
 8007714:	f200 80ac 	bhi.w	8007870 <USBD_GetDescriptor+0x204>
 8007718:	a201      	add	r2, pc, #4	@ (adr r2, 8007720 <USBD_GetDescriptor+0xb4>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007739 	.word	0x08007739
 8007724:	0800776d 	.word	0x0800776d
 8007728:	080077a1 	.word	0x080077a1
 800772c:	080077d5 	.word	0x080077d5
 8007730:	08007809 	.word	0x08007809
 8007734:	0800783d 	.word	0x0800783d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	7c12      	ldrb	r2, [r2, #16]
 8007750:	f107 0108 	add.w	r1, r7, #8
 8007754:	4610      	mov	r0, r2
 8007756:	4798      	blx	r3
 8007758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800775a:	e091      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 facb 	bl	8007cfa <USBD_CtlError>
            err++;
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	3301      	adds	r3, #1
 8007768:	72fb      	strb	r3, [r7, #11]
          break;
 800776a:	e089      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e077      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fab1 	bl	8007cfa <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e06f      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e05d      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa97 	bl	8007cfa <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e055      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e043      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa7d 	bl	8007cfa <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e03b      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e029      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa63 	bl	8007cfa <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e021      	b.n	8007880 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e00f      	b.n	8007880 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa49 	bl	8007cfa <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e007      	b.n	8007880 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fa41 	bl	8007cfa <USBD_CtlError>
          err++;
 8007878:	7afb      	ldrb	r3, [r7, #11]
 800787a:	3301      	adds	r3, #1
 800787c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800787e:	bf00      	nop
      }
      break;
 8007880:	e037      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	7c1b      	ldrb	r3, [r3, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007892:	f107 0208 	add.w	r2, r7, #8
 8007896:	4610      	mov	r0, r2
 8007898:	4798      	blx	r3
 800789a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800789c:	e029      	b.n	80078f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fa2a 	bl	8007cfa <USBD_CtlError>
        err++;
 80078a6:	7afb      	ldrb	r3, [r7, #11]
 80078a8:	3301      	adds	r3, #1
 80078aa:	72fb      	strb	r3, [r7, #11]
      break;
 80078ac:	e021      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7c1b      	ldrb	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078be:	f107 0208 	add.w	r2, r7, #8
 80078c2:	4610      	mov	r0, r2
 80078c4:	4798      	blx	r3
 80078c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	2207      	movs	r2, #7
 80078ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d0:	e00f      	b.n	80078f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fa10 	bl	8007cfa <USBD_CtlError>
        err++;
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	3301      	adds	r3, #1
 80078de:	72fb      	strb	r3, [r7, #11]
      break;
 80078e0:	e007      	b.n	80078f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa08 	bl	8007cfa <USBD_CtlError>
      err++;
 80078ea:	7afb      	ldrb	r3, [r7, #11]
 80078ec:	3301      	adds	r3, #1
 80078ee:	72fb      	strb	r3, [r7, #11]
      break;
 80078f0:	bf00      	nop
  }

  if (err != 0U)
 80078f2:	7afb      	ldrb	r3, [r7, #11]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11e      	bne.n	8007936 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	88db      	ldrh	r3, [r3, #6]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007900:	893b      	ldrh	r3, [r7, #8]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00e      	beq.n	8007924 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	88da      	ldrh	r2, [r3, #6]
 800790a:	893b      	ldrh	r3, [r7, #8]
 800790c:	4293      	cmp	r3, r2
 800790e:	bf28      	it	cs
 8007910:	4613      	movcs	r3, r2
 8007912:	b29b      	uxth	r3, r3
 8007914:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007916:	893b      	ldrh	r3, [r7, #8]
 8007918:	461a      	mov	r2, r3
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa69 	bl	8007df4 <USBD_CtlSendData>
 8007922:	e009      	b.n	8007938 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9e7 	bl	8007cfa <USBD_CtlError>
 800792c:	e004      	b.n	8007938 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 faba 	bl	8007ea8 <USBD_CtlSendStatus>
 8007934:	e000      	b.n	8007938 <USBD_GetDescriptor+0x2cc>
    return;
 8007936:	bf00      	nop
  }
}
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop

08007940 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d131      	bne.n	80079b6 <USBD_SetAddress+0x76>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d12d      	bne.n	80079b6 <USBD_SetAddress+0x76>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007960:	d829      	bhi.n	80079b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b03      	cmp	r3, #3
 8007978:	d104      	bne.n	8007984 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f9bc 	bl	8007cfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007982:	e01d      	b.n	80079c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	7bfa      	ldrb	r2, [r7, #15]
 8007988:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800798c:	7bfb      	ldrb	r3, [r7, #15]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 ff09 	bl	80087a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa86 	bl	8007ea8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079aa:	e009      	b.n	80079c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b4:	e004      	b.n	80079c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f99e 	bl	8007cfa <USBD_CtlError>
  }
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	4b4e      	ldr	r3, [pc, #312]	@ (8007b18 <USBD_SetConfig+0x150>)
 80079de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007b18 <USBD_SetConfig+0x150>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d905      	bls.n	80079f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f985 	bl	8007cfa <USBD_CtlError>
    return USBD_FAIL;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e08c      	b.n	8007b0e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d002      	beq.n	8007a06 <USBD_SetConfig+0x3e>
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d029      	beq.n	8007a58 <USBD_SetConfig+0x90>
 8007a04:	e075      	b.n	8007af2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a06:	4b44      	ldr	r3, [pc, #272]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d020      	beq.n	8007a50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a0e:	4b42      	ldr	r3, [pc, #264]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a18:	4b3f      	ldr	r3, [pc, #252]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fe ffe3 	bl	80069ea <USBD_SetClassConfig>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f962 	bl	8007cfa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a3e:	e065      	b.n	8007b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fa31 	bl	8007ea8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a4e:	e05d      	b.n	8007b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa29 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007a56:	e059      	b.n	8007b0c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a58:	4b2f      	ldr	r3, [pc, #188]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d112      	bne.n	8007a86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a68:	4b2b      	ldr	r3, [pc, #172]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a72:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7fe ffd2 	bl	8006a22 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa12 	bl	8007ea8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a84:	e042      	b.n	8007b0c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a86:	4b24      	ldr	r3, [pc, #144]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d02a      	beq.n	8007aea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fe ffc0 	bl	8006a22 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007aac:	4b1a      	ldr	r3, [pc, #104]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7fe ff99 	bl	80069ea <USBD_SetClassConfig>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00f      	beq.n	8007ae2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f918 	bl	8007cfa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7fe ffa5 	bl	8006a22 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2202      	movs	r2, #2
 8007adc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ae0:	e014      	b.n	8007b0c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9e0 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007ae8:	e010      	b.n	8007b0c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9dc 	bl	8007ea8 <USBD_CtlSendStatus>
      break;
 8007af0:	e00c      	b.n	8007b0c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f900 	bl	8007cfa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007afa:	4b07      	ldr	r3, [pc, #28]	@ (8007b18 <USBD_SetConfig+0x150>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fe ff8e 	bl	8006a22 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b06:	2303      	movs	r3, #3
 8007b08:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0a:	bf00      	nop
  }

  return ret;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200003d4 	.word	0x200003d4

08007b1c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	88db      	ldrh	r3, [r3, #6]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d004      	beq.n	8007b38 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f8e2 	bl	8007cfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b36:	e023      	b.n	8007b80 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	dc02      	bgt.n	8007b4a <USBD_GetConfig+0x2e>
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	dc03      	bgt.n	8007b50 <USBD_GetConfig+0x34>
 8007b48:	e015      	b.n	8007b76 <USBD_GetConfig+0x5a>
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d00b      	beq.n	8007b66 <USBD_GetConfig+0x4a>
 8007b4e:	e012      	b.n	8007b76 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3308      	adds	r3, #8
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f948 	bl	8007df4 <USBD_CtlSendData>
        break;
 8007b64:	e00c      	b.n	8007b80 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f940 	bl	8007df4 <USBD_CtlSendData>
        break;
 8007b74:	e004      	b.n	8007b80 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8be 	bl	8007cfa <USBD_CtlError>
        break;
 8007b7e:	bf00      	nop
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d81e      	bhi.n	8007bde <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	88db      	ldrh	r3, [r3, #6]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d004      	beq.n	8007bb2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8a5 	bl	8007cfa <USBD_CtlError>
        break;
 8007bb0:	e01a      	b.n	8007be8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d005      	beq.n	8007bce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f043 0202 	orr.w	r2, r3, #2
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f90c 	bl	8007df4 <USBD_CtlSendData>
      break;
 8007bdc:	e004      	b.n	8007be8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f88a 	bl	8007cfa <USBD_CtlError>
      break;
 8007be6:	bf00      	nop
  }
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d107      	bne.n	8007c12 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f94c 	bl	8007ea8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c10:	e013      	b.n	8007c3a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d10b      	bne.n	8007c32 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	889b      	ldrh	r3, [r3, #4]
 8007c1e:	0a1b      	lsrs	r3, r3, #8
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	b2da      	uxtb	r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f93c 	bl	8007ea8 <USBD_CtlSendStatus>
}
 8007c30:	e003      	b.n	8007c3a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f860 	bl	8007cfa <USBD_CtlError>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	3b01      	subs	r3, #1
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d80b      	bhi.n	8007c72 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	885b      	ldrh	r3, [r3, #2]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d10c      	bne.n	8007c7c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f91c 	bl	8007ea8 <USBD_CtlSendStatus>
      }
      break;
 8007c70:	e004      	b.n	8007c7c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f840 	bl	8007cfa <USBD_CtlError>
      break;
 8007c7a:	e000      	b.n	8007c7e <USBD_ClrFeature+0x3c>
      break;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f7ff fa40 	bl	8007136 <SWAPBYTE>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	461a      	mov	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fa33 	bl	8007136 <SWAPBYTE>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fa26 	bl	8007136 <SWAPBYTE>
 8007cea:	4603      	mov	r3, r0
 8007cec:	461a      	mov	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	80da      	strh	r2, [r3, #6]
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d04:	2180      	movs	r1, #128	@ 0x80
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fce4 	bl	80086d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fce0 	bl	80086d4 <USBD_LL_StallEP>
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d042      	beq.n	8007db8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007d36:	6938      	ldr	r0, [r7, #16]
 8007d38:	f000 f842 	bl	8007dc0 <USBD_GetLen>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	3301      	adds	r3, #1
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d46:	d808      	bhi.n	8007d5a <USBD_GetString+0x3e>
 8007d48:	6938      	ldr	r0, [r7, #16]
 8007d4a:	f000 f839 	bl	8007dc0 <USBD_GetLen>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	3301      	adds	r3, #1
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	e001      	b.n	8007d5e <USBD_GetString+0x42>
 8007d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	4413      	add	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7812      	ldrb	r2, [r2, #0]
 8007d6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	3301      	adds	r3, #1
 8007d72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	2203      	movs	r2, #3
 8007d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	3301      	adds	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d84:	e013      	b.n	8007dae <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
    idx++;
 8007d98:	7dfb      	ldrb	r3, [r7, #23]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	4413      	add	r3, r2
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
    idx++;
 8007da8:	7dfb      	ldrb	r3, [r7, #23]
 8007daa:	3301      	adds	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e7      	bne.n	8007d86 <USBD_GetString+0x6a>
 8007db6:	e000      	b.n	8007dba <USBD_GetString+0x9e>
    return;
 8007db8:	bf00      	nop
  }
}
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dd0:	e005      	b.n	8007dde <USBD_GetLen+0x1e>
  {
    len++;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f5      	bne.n	8007dd2 <USBD_GetLen+0x12>
  }

  return len;
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	2100      	movs	r1, #0
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	f000 fce3 	bl	80087e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fcd2 	bl	80087e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	2100      	movs	r1, #0
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f000 fcd6 	bl	8008828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	60b9      	str	r1, [r7, #8]
 8007e90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	2100      	movs	r1, #0
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fcc5 	bl	8008828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fc91 	bl	80087e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b082      	sub	sp, #8
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2205      	movs	r2, #5
 8007eda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fc9f 	bl	8008828 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_TIM_PeriodElapsedCallback>:

	counter = 0U;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 8007f02:	f7f9 fa33 	bl	800136c <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b07      	ldr	r3, [pc, #28]	@ (8007f28 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 8007f14:	4b05      	ldr	r3, [pc, #20]	@ (8007f2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	4a04      	ldr	r2, [pc, #16]	@ (8007f2c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007f1c:	6013      	str	r3, [r2, #0]
	}

}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000000 	.word	0x20000000
 8007f2c:	200003d8 	.word	0x200003d8

08007f30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f34:	2200      	movs	r2, #0
 8007f36:	4912      	ldr	r1, [pc, #72]	@ (8007f80 <MX_USB_DEVICE_Init+0x50>)
 8007f38:	4812      	ldr	r0, [pc, #72]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f3a:	f7fe fcd9 	bl	80068f0 <USBD_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f44:	f7f9 fa12 	bl	800136c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f48:	490f      	ldr	r1, [pc, #60]	@ (8007f88 <MX_USB_DEVICE_Init+0x58>)
 8007f4a:	480e      	ldr	r0, [pc, #56]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f4c:	f7fe fd00 	bl	8006950 <USBD_RegisterClass>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f56:	f7f9 fa09 	bl	800136c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f5a:	490c      	ldr	r1, [pc, #48]	@ (8007f8c <MX_USB_DEVICE_Init+0x5c>)
 8007f5c:	4809      	ldr	r0, [pc, #36]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f5e:	f7fe fc37 	bl	80067d0 <USBD_CDC_RegisterInterface>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f68:	f7f9 fa00 	bl	800136c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f6c:	4805      	ldr	r0, [pc, #20]	@ (8007f84 <MX_USB_DEVICE_Init+0x54>)
 8007f6e:	f7fe fd25 	bl	80069bc <USBD_Start>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f78:	f7f9 f9f8 	bl	800136c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200000b8 	.word	0x200000b8
 8007f84:	200003dc 	.word	0x200003dc
 8007f88:	20000024 	.word	0x20000024
 8007f8c:	200000a4 	.word	0x200000a4

08007f90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f94:	2200      	movs	r2, #0
 8007f96:	4905      	ldr	r1, [pc, #20]	@ (8007fac <CDC_Init_FS+0x1c>)
 8007f98:	4805      	ldr	r0, [pc, #20]	@ (8007fb0 <CDC_Init_FS+0x20>)
 8007f9a:	f7fe fc33 	bl	8006804 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f9e:	4905      	ldr	r1, [pc, #20]	@ (8007fb4 <CDC_Init_FS+0x24>)
 8007fa0:	4803      	ldr	r0, [pc, #12]	@ (8007fb0 <CDC_Init_FS+0x20>)
 8007fa2:	f7fe fc51 	bl	8006848 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000eb8 	.word	0x20000eb8
 8007fb0:	200003dc 	.word	0x200003dc
 8007fb4:	200006b8 	.word	0x200006b8

08007fb8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fbc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	4603      	mov	r3, r0
 8007fd0:	6039      	str	r1, [r7, #0]
 8007fd2:	71fb      	strb	r3, [r7, #7]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	2b23      	cmp	r3, #35	@ 0x23
 8007fdc:	d84a      	bhi.n	8008074 <CDC_Control_FS+0xac>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <CDC_Control_FS+0x1c>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08008075 	.word	0x08008075
 8007fe8:	08008075 	.word	0x08008075
 8007fec:	08008075 	.word	0x08008075
 8007ff0:	08008075 	.word	0x08008075
 8007ff4:	08008075 	.word	0x08008075
 8007ff8:	08008075 	.word	0x08008075
 8007ffc:	08008075 	.word	0x08008075
 8008000:	08008075 	.word	0x08008075
 8008004:	08008075 	.word	0x08008075
 8008008:	08008075 	.word	0x08008075
 800800c:	08008075 	.word	0x08008075
 8008010:	08008075 	.word	0x08008075
 8008014:	08008075 	.word	0x08008075
 8008018:	08008075 	.word	0x08008075
 800801c:	08008075 	.word	0x08008075
 8008020:	08008075 	.word	0x08008075
 8008024:	08008075 	.word	0x08008075
 8008028:	08008075 	.word	0x08008075
 800802c:	08008075 	.word	0x08008075
 8008030:	08008075 	.word	0x08008075
 8008034:	08008075 	.word	0x08008075
 8008038:	08008075 	.word	0x08008075
 800803c:	08008075 	.word	0x08008075
 8008040:	08008075 	.word	0x08008075
 8008044:	08008075 	.word	0x08008075
 8008048:	08008075 	.word	0x08008075
 800804c:	08008075 	.word	0x08008075
 8008050:	08008075 	.word	0x08008075
 8008054:	08008075 	.word	0x08008075
 8008058:	08008075 	.word	0x08008075
 800805c:	08008075 	.word	0x08008075
 8008060:	08008075 	.word	0x08008075
 8008064:	08008075 	.word	0x08008075
 8008068:	08008075 	.word	0x08008075
 800806c:	08008075 	.word	0x08008075
 8008070:	08008075 	.word	0x08008075
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008074:	bf00      	nop
  }

  return (USBD_OK);
 8008076:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4805      	ldr	r0, [pc, #20]	@ (80080a8 <CDC_Receive_FS+0x24>)
 8008092:	f7fe fbd9 	bl	8006848 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008096:	4804      	ldr	r0, [pc, #16]	@ (80080a8 <CDC_Receive_FS+0x24>)
 8008098:	f7fe fbf4 	bl	8006884 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800809c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3708      	adds	r7, #8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200003dc 	.word	0x200003dc

080080ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2212      	movs	r2, #18
 80080e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080e2:	4b03      	ldr	r3, [pc, #12]	@ (80080f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	200000d4 	.word	0x200000d4

080080f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	4603      	mov	r3, r0
 80080fc:	6039      	str	r1, [r7, #0]
 80080fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2204      	movs	r2, #4
 8008104:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008106:	4b03      	ldr	r3, [pc, #12]	@ (8008114 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	200000e8 	.word	0x200000e8

08008118 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	6039      	str	r1, [r7, #0]
 8008122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008124:	79fb      	ldrb	r3, [r7, #7]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d105      	bne.n	8008136 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4907      	ldr	r1, [pc, #28]	@ (800814c <USBD_FS_ProductStrDescriptor+0x34>)
 800812e:	4808      	ldr	r0, [pc, #32]	@ (8008150 <USBD_FS_ProductStrDescriptor+0x38>)
 8008130:	f7ff fdf4 	bl	8007d1c <USBD_GetString>
 8008134:	e004      	b.n	8008140 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	4904      	ldr	r1, [pc, #16]	@ (800814c <USBD_FS_ProductStrDescriptor+0x34>)
 800813a:	4805      	ldr	r0, [pc, #20]	@ (8008150 <USBD_FS_ProductStrDescriptor+0x38>)
 800813c:	f7ff fdee 	bl	8007d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008140:	4b02      	ldr	r3, [pc, #8]	@ (800814c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	200016b8 	.word	0x200016b8
 8008150:	0800d018 	.word	0x0800d018

08008154 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	4904      	ldr	r1, [pc, #16]	@ (8008174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008164:	4804      	ldr	r0, [pc, #16]	@ (8008178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008166:	f7ff fdd9 	bl	8007d1c <USBD_GetString>
  return USBD_StrDesc;
 800816a:	4b02      	ldr	r3, [pc, #8]	@ (8008174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	200016b8 	.word	0x200016b8
 8008178:	0800d020 	.word	0x0800d020

0800817c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	221a      	movs	r2, #26
 800818c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800818e:	f000 f843 	bl	8008218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008192:	4b02      	ldr	r3, [pc, #8]	@ (800819c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008194:	4618      	mov	r0, r3
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	200000ec 	.word	0x200000ec

080081a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d105      	bne.n	80081be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4907      	ldr	r1, [pc, #28]	@ (80081d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081b6:	4808      	ldr	r0, [pc, #32]	@ (80081d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b8:	f7ff fdb0 	bl	8007d1c <USBD_GetString>
 80081bc:	e004      	b.n	80081c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	4904      	ldr	r1, [pc, #16]	@ (80081d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081c2:	4805      	ldr	r0, [pc, #20]	@ (80081d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081c4:	f7ff fdaa 	bl	8007d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200016b8 	.word	0x200016b8
 80081d8:	0800d034 	.word	0x0800d034

080081dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4907      	ldr	r1, [pc, #28]	@ (8008210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081f2:	4808      	ldr	r0, [pc, #32]	@ (8008214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f4:	f7ff fd92 	bl	8007d1c <USBD_GetString>
 80081f8:	e004      	b.n	8008204 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4904      	ldr	r1, [pc, #16]	@ (8008210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081fe:	4805      	ldr	r0, [pc, #20]	@ (8008214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008200:	f7ff fd8c 	bl	8007d1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008204:	4b02      	ldr	r3, [pc, #8]	@ (8008210 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200016b8 	.word	0x200016b8
 8008214:	0800d040 	.word	0x0800d040

08008218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800821e:	4b0f      	ldr	r3, [pc, #60]	@ (800825c <Get_SerialNum+0x44>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008224:	4b0e      	ldr	r3, [pc, #56]	@ (8008260 <Get_SerialNum+0x48>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800822a:	4b0e      	ldr	r3, [pc, #56]	@ (8008264 <Get_SerialNum+0x4c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4413      	add	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800823e:	2208      	movs	r2, #8
 8008240:	4909      	ldr	r1, [pc, #36]	@ (8008268 <Get_SerialNum+0x50>)
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f000 f814 	bl	8008270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008248:	2204      	movs	r2, #4
 800824a:	4908      	ldr	r1, [pc, #32]	@ (800826c <Get_SerialNum+0x54>)
 800824c:	68b8      	ldr	r0, [r7, #8]
 800824e:	f000 f80f 	bl	8008270 <IntToUnicode>
  }
}
 8008252:	bf00      	nop
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	1fff7a10 	.word	0x1fff7a10
 8008260:	1fff7a14 	.word	0x1fff7a14
 8008264:	1fff7a18 	.word	0x1fff7a18
 8008268:	200000ee 	.word	0x200000ee
 800826c:	200000fe 	.word	0x200000fe

08008270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008270:	b480      	push	{r7}
 8008272:	b087      	sub	sp, #28
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	4613      	mov	r3, r2
 800827c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800827e:	2300      	movs	r3, #0
 8008280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]
 8008286:	e027      	b.n	80082d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	2b09      	cmp	r3, #9
 800828e:	d80b      	bhi.n	80082a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	0f1b      	lsrs	r3, r3, #28
 8008294:	b2da      	uxtb	r2, r3
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4619      	mov	r1, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	440b      	add	r3, r1
 80082a0:	3230      	adds	r2, #48	@ 0x30
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e00a      	b.n	80082be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	0f1b      	lsrs	r3, r3, #28
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4619      	mov	r1, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	440b      	add	r3, r1
 80082b8:	3237      	adds	r2, #55	@ 0x37
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	3301      	adds	r3, #1
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	4413      	add	r3, r2
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	3301      	adds	r3, #1
 80082d6:	75fb      	strb	r3, [r7, #23]
 80082d8:	7dfa      	ldrb	r2, [r7, #23]
 80082da:	79fb      	ldrb	r3, [r7, #7]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d3d3      	bcc.n	8008288 <IntToUnicode+0x18>
  }
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
	...

080082f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b08a      	sub	sp, #40	@ 0x28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f8:	f107 0314 	add.w	r3, r7, #20
 80082fc:	2200      	movs	r2, #0
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	609a      	str	r2, [r3, #8]
 8008304:	60da      	str	r2, [r3, #12]
 8008306:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008310:	d13a      	bne.n	8008388 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	4b1e      	ldr	r3, [pc, #120]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831a:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	6313      	str	r3, [r2, #48]	@ 0x30
 8008322:	4b1b      	ldr	r3, [pc, #108]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800832e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008334:	2302      	movs	r3, #2
 8008336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008338:	2300      	movs	r3, #0
 800833a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800833c:	2303      	movs	r3, #3
 800833e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008340:	230a      	movs	r3, #10
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	4619      	mov	r1, r3
 800834a:	4812      	ldr	r0, [pc, #72]	@ (8008394 <HAL_PCD_MspInit+0xa4>)
 800834c:	f7f9 fbc4 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008350:	4b0f      	ldr	r3, [pc, #60]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008354:	4a0e      	ldr	r2, [pc, #56]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835a:	6353      	str	r3, [r2, #52]	@ 0x34
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008364:	4a0a      	ldr	r2, [pc, #40]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 8008366:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800836a:	6453      	str	r3, [r2, #68]	@ 0x44
 800836c:	4b08      	ldr	r3, [pc, #32]	@ (8008390 <HAL_PCD_MspInit+0xa0>)
 800836e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008370:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008374:	60fb      	str	r3, [r7, #12]
 8008376:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008378:	2200      	movs	r2, #0
 800837a:	2100      	movs	r1, #0
 800837c:	2043      	movs	r0, #67	@ 0x43
 800837e:	f7f9 fb74 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008382:	2043      	movs	r0, #67	@ 0x43
 8008384:	f7f9 fb8d 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008388:	bf00      	nop
 800838a:	3728      	adds	r7, #40	@ 0x28
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	40023800 	.word	0x40023800
 8008394:	40020000 	.word	0x40020000

08008398 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80083ac:	4619      	mov	r1, r3
 80083ae:	4610      	mov	r0, r2
 80083b0:	f7fe fb51 	bl	8006a56 <USBD_LL_SetupStage>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7fe fb8b 	bl	8006b00 <USBD_LL_DataOutStage>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	460b      	mov	r3, r1
 80083fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	6879      	ldr	r1, [r7, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	4413      	add	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	440b      	add	r3, r1
 8008412:	3320      	adds	r3, #32
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	4619      	mov	r1, r3
 800841a:	f7fe fc24 	bl	8006c66 <USBD_LL_DataInStage>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fd5e 	bl	8006ef6 <USBD_LL_SOF>
}
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	79db      	ldrb	r3, [r3, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d102      	bne.n	800845c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
 800845a:	e008      	b.n	800846e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	79db      	ldrb	r3, [r3, #7]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d102      	bne.n	800846a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
 8008468:	e001      	b.n	800846e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800846a:	f7f8 ff7f 	bl	800136c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008474:	7bfa      	ldrb	r2, [r7, #15]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7fe fcf8 	bl	8006e6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008484:	4618      	mov	r0, r3
 8008486:	f7fe fca0 	bl	8006dca <USBD_LL_Reset>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fe fcf3 	bl	8006e8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7adb      	ldrb	r3, [r3, #11]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084c8:	4b04      	ldr	r3, [pc, #16]	@ (80084dc <HAL_PCD_SuspendCallback+0x48>)
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	4a03      	ldr	r2, [pc, #12]	@ (80084dc <HAL_PCD_SuspendCallback+0x48>)
 80084ce:	f043 0306 	orr.w	r3, r3, #6
 80084d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	e000ed00 	.word	0xe000ed00

080084e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fce9 	bl	8006ec6 <USBD_LL_Resume>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7fe fd41 	bl	8006f9a <USBD_LL_IsoOUTIncomplete>
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	4611      	mov	r1, r2
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe fcfd 	bl	8006f36 <USBD_LL_IsoINIncomplete>
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fd53 	bl	8006ffe <USBD_LL_DevConnected>
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fd50 	bl	8007014 <USBD_LL_DevDisconnected>
}
 8008574:	bf00      	nop
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d13c      	bne.n	8008606 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800858c:	4a20      	ldr	r2, [pc, #128]	@ (8008610 <USBD_LL_Init+0x94>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a1e      	ldr	r2, [pc, #120]	@ (8008610 <USBD_LL_Init+0x94>)
 8008598:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800859c:	4b1c      	ldr	r3, [pc, #112]	@ (8008610 <USBD_LL_Init+0x94>)
 800859e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085a4:	4b1a      	ldr	r3, [pc, #104]	@ (8008610 <USBD_LL_Init+0x94>)
 80085a6:	2204      	movs	r2, #4
 80085a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085aa:	4b19      	ldr	r3, [pc, #100]	@ (8008610 <USBD_LL_Init+0x94>)
 80085ac:	2202      	movs	r2, #2
 80085ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085b0:	4b17      	ldr	r3, [pc, #92]	@ (8008610 <USBD_LL_Init+0x94>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80085b6:	4b16      	ldr	r3, [pc, #88]	@ (8008610 <USBD_LL_Init+0x94>)
 80085b8:	2202      	movs	r2, #2
 80085ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085bc:	4b14      	ldr	r3, [pc, #80]	@ (8008610 <USBD_LL_Init+0x94>)
 80085be:	2200      	movs	r2, #0
 80085c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80085c2:	4b13      	ldr	r3, [pc, #76]	@ (8008610 <USBD_LL_Init+0x94>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80085c8:	4b11      	ldr	r3, [pc, #68]	@ (8008610 <USBD_LL_Init+0x94>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80085ce:	4b10      	ldr	r3, [pc, #64]	@ (8008610 <USBD_LL_Init+0x94>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80085d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008610 <USBD_LL_Init+0x94>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80085da:	480d      	ldr	r0, [pc, #52]	@ (8008610 <USBD_LL_Init+0x94>)
 80085dc:	f7f9 fd76 	bl	80020cc <HAL_PCD_Init>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80085e6:	f7f8 fec1 	bl	800136c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80085ea:	2180      	movs	r1, #128	@ 0x80
 80085ec:	4808      	ldr	r0, [pc, #32]	@ (8008610 <USBD_LL_Init+0x94>)
 80085ee:	f7fa ffa2 	bl	8003536 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80085f2:	2240      	movs	r2, #64	@ 0x40
 80085f4:	2100      	movs	r1, #0
 80085f6:	4806      	ldr	r0, [pc, #24]	@ (8008610 <USBD_LL_Init+0x94>)
 80085f8:	f7fa ff56 	bl	80034a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80085fc:	2280      	movs	r2, #128	@ 0x80
 80085fe:	2101      	movs	r1, #1
 8008600:	4803      	ldr	r0, [pc, #12]	@ (8008610 <USBD_LL_Init+0x94>)
 8008602:	f7fa ff51 	bl	80034a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	200018b8 	.word	0x200018b8

08008614 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800862a:	4618      	mov	r0, r3
 800862c:	f7f9 fe5d 	bl	80022ea <HAL_PCD_Start>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f942 	bl	80088c0 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008640:	7bbb      	ldrb	r3, [r7, #14]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	4603      	mov	r3, r0
 800865a:	70fb      	strb	r3, [r7, #3]
 800865c:	460b      	mov	r3, r1
 800865e:	70bb      	strb	r3, [r7, #2]
 8008660:	4613      	mov	r3, r2
 8008662:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008672:	78bb      	ldrb	r3, [r7, #2]
 8008674:	883a      	ldrh	r2, [r7, #0]
 8008676:	78f9      	ldrb	r1, [r7, #3]
 8008678:	f7fa fb31 	bl	8002cde <HAL_PCD_EP_Open>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f91c 	bl	80088c0 <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7fa fb7c 	bl	8002db2 <HAL_PCD_EP_Close>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f8fd 	bl	80088c0 <USBD_Get_USB_Status>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086ee:	78fa      	ldrb	r2, [r7, #3]
 80086f0:	4611      	mov	r1, r2
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fa fc34 	bl	8002f60 <HAL_PCD_EP_SetStall>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 f8de 	bl	80088c0 <USBD_Get_USB_Status>
 8008704:	4603      	mov	r3, r0
 8008706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008708:	7bbb      	ldrb	r3, [r7, #14]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b084      	sub	sp, #16
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	460b      	mov	r3, r1
 800871c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7fa fc78 	bl	8003026 <HAL_PCD_EP_ClrStall>
 8008736:	4603      	mov	r3, r0
 8008738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f8bf 	bl	80088c0 <USBD_Get_USB_Status>
 8008742:	4603      	mov	r3, r0
 8008744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008746:	7bbb      	ldrb	r3, [r7, #14]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008762:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008768:	2b00      	cmp	r3, #0
 800876a:	da0b      	bge.n	8008784 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008772:	68f9      	ldr	r1, [r7, #12]
 8008774:	4613      	mov	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	4413      	add	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	440b      	add	r3, r1
 800877e:	3316      	adds	r3, #22
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	e00b      	b.n	800879c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800878a:	68f9      	ldr	r1, [r7, #12]
 800878c:	4613      	mov	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800879a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800879c:	4618      	mov	r0, r3
 800879e:	3714      	adds	r7, #20
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fa fa65 	bl	8002c96 <HAL_PCD_SetAddress>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f874 	bl	80088c0 <USBD_Get_USB_Status>
 80087d8:	4603      	mov	r3, r0
 80087da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	607a      	str	r2, [r7, #4]
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	460b      	mov	r3, r1
 80087f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008804:	7af9      	ldrb	r1, [r7, #11]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	f7fa fb6f 	bl	8002eec <HAL_PCD_EP_Transmit>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f853 	bl	80088c0 <USBD_Get_USB_Status>
 800881a:	4603      	mov	r3, r0
 800881c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800881e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	460b      	mov	r3, r1
 8008836:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008846:	7af9      	ldrb	r1, [r7, #11]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	f7fa fafb 	bl	8002e46 <HAL_PCD_EP_Receive>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f832 	bl	80088c0 <USBD_Get_USB_Status>
 800885c:	4603      	mov	r3, r0
 800885e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008860:	7dbb      	ldrb	r3, [r7, #22]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800887c:	78fa      	ldrb	r2, [r7, #3]
 800887e:	4611      	mov	r1, r2
 8008880:	4618      	mov	r0, r3
 8008882:	f7fa fb1b 	bl	8002ebc <HAL_PCD_EP_GetRxCount>
 8008886:	4603      	mov	r3, r0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008898:	4b03      	ldr	r3, [pc, #12]	@ (80088a8 <USBD_static_malloc+0x18>)
}
 800889a:	4618      	mov	r0, r3
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20001d9c 	.word	0x20001d9c

080088ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]

}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	4603      	mov	r3, r0
 80088c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d817      	bhi.n	8008904 <USBD_Get_USB_Status+0x44>
 80088d4:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <USBD_Get_USB_Status+0x1c>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	080088ed 	.word	0x080088ed
 80088e0:	080088f3 	.word	0x080088f3
 80088e4:	080088f9 	.word	0x080088f9
 80088e8:	080088ff 	.word	0x080088ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	73fb      	strb	r3, [r7, #15]
    break;
 80088f0:	e00b      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088f2:	2303      	movs	r3, #3
 80088f4:	73fb      	strb	r3, [r7, #15]
    break;
 80088f6:	e008      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088f8:	2301      	movs	r3, #1
 80088fa:	73fb      	strb	r3, [r7, #15]
    break;
 80088fc:	e005      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088fe:	2303      	movs	r3, #3
 8008900:	73fb      	strb	r3, [r7, #15]
    break;
 8008902:	e002      	b.n	800890a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008904:	2303      	movs	r3, #3
 8008906:	73fb      	strb	r3, [r7, #15]
    break;
 8008908:	bf00      	nop
  }
  return usb_status;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <__cvt>:
 8008918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	ec57 6b10 	vmov	r6, r7, d0
 8008920:	2f00      	cmp	r7, #0
 8008922:	460c      	mov	r4, r1
 8008924:	4619      	mov	r1, r3
 8008926:	463b      	mov	r3, r7
 8008928:	bfbb      	ittet	lt
 800892a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800892e:	461f      	movlt	r7, r3
 8008930:	2300      	movge	r3, #0
 8008932:	232d      	movlt	r3, #45	@ 0x2d
 8008934:	700b      	strb	r3, [r1, #0]
 8008936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008938:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800893c:	4691      	mov	r9, r2
 800893e:	f023 0820 	bic.w	r8, r3, #32
 8008942:	bfbc      	itt	lt
 8008944:	4632      	movlt	r2, r6
 8008946:	4616      	movlt	r6, r2
 8008948:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800894c:	d005      	beq.n	800895a <__cvt+0x42>
 800894e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008952:	d100      	bne.n	8008956 <__cvt+0x3e>
 8008954:	3401      	adds	r4, #1
 8008956:	2102      	movs	r1, #2
 8008958:	e000      	b.n	800895c <__cvt+0x44>
 800895a:	2103      	movs	r1, #3
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	ab02      	add	r3, sp, #8
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	ec47 6b10 	vmov	d0, r6, r7
 8008968:	4653      	mov	r3, sl
 800896a:	4622      	mov	r2, r4
 800896c:	f001 f910 	bl	8009b90 <_dtoa_r>
 8008970:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008974:	4605      	mov	r5, r0
 8008976:	d119      	bne.n	80089ac <__cvt+0x94>
 8008978:	f019 0f01 	tst.w	r9, #1
 800897c:	d00e      	beq.n	800899c <__cvt+0x84>
 800897e:	eb00 0904 	add.w	r9, r0, r4
 8008982:	2200      	movs	r2, #0
 8008984:	2300      	movs	r3, #0
 8008986:	4630      	mov	r0, r6
 8008988:	4639      	mov	r1, r7
 800898a:	f7f8 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800898e:	b108      	cbz	r0, 8008994 <__cvt+0x7c>
 8008990:	f8cd 900c 	str.w	r9, [sp, #12]
 8008994:	2230      	movs	r2, #48	@ 0x30
 8008996:	9b03      	ldr	r3, [sp, #12]
 8008998:	454b      	cmp	r3, r9
 800899a:	d31e      	bcc.n	80089da <__cvt+0xc2>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089a0:	1b5b      	subs	r3, r3, r5
 80089a2:	4628      	mov	r0, r5
 80089a4:	6013      	str	r3, [r2, #0]
 80089a6:	b004      	add	sp, #16
 80089a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089b0:	eb00 0904 	add.w	r9, r0, r4
 80089b4:	d1e5      	bne.n	8008982 <__cvt+0x6a>
 80089b6:	7803      	ldrb	r3, [r0, #0]
 80089b8:	2b30      	cmp	r3, #48	@ 0x30
 80089ba:	d10a      	bne.n	80089d2 <__cvt+0xba>
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f8 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c8:	b918      	cbnz	r0, 80089d2 <__cvt+0xba>
 80089ca:	f1c4 0401 	rsb	r4, r4, #1
 80089ce:	f8ca 4000 	str.w	r4, [sl]
 80089d2:	f8da 3000 	ldr.w	r3, [sl]
 80089d6:	4499      	add	r9, r3
 80089d8:	e7d3      	b.n	8008982 <__cvt+0x6a>
 80089da:	1c59      	adds	r1, r3, #1
 80089dc:	9103      	str	r1, [sp, #12]
 80089de:	701a      	strb	r2, [r3, #0]
 80089e0:	e7d9      	b.n	8008996 <__cvt+0x7e>

080089e2 <__exponent>:
 80089e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089e4:	2900      	cmp	r1, #0
 80089e6:	bfba      	itte	lt
 80089e8:	4249      	neglt	r1, r1
 80089ea:	232d      	movlt	r3, #45	@ 0x2d
 80089ec:	232b      	movge	r3, #43	@ 0x2b
 80089ee:	2909      	cmp	r1, #9
 80089f0:	7002      	strb	r2, [r0, #0]
 80089f2:	7043      	strb	r3, [r0, #1]
 80089f4:	dd29      	ble.n	8008a4a <__exponent+0x68>
 80089f6:	f10d 0307 	add.w	r3, sp, #7
 80089fa:	461d      	mov	r5, r3
 80089fc:	270a      	movs	r7, #10
 80089fe:	461a      	mov	r2, r3
 8008a00:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a04:	fb07 1416 	mls	r4, r7, r6, r1
 8008a08:	3430      	adds	r4, #48	@ 0x30
 8008a0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a0e:	460c      	mov	r4, r1
 8008a10:	2c63      	cmp	r4, #99	@ 0x63
 8008a12:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a16:	4631      	mov	r1, r6
 8008a18:	dcf1      	bgt.n	80089fe <__exponent+0x1c>
 8008a1a:	3130      	adds	r1, #48	@ 0x30
 8008a1c:	1e94      	subs	r4, r2, #2
 8008a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a22:	1c41      	adds	r1, r0, #1
 8008a24:	4623      	mov	r3, r4
 8008a26:	42ab      	cmp	r3, r5
 8008a28:	d30a      	bcc.n	8008a40 <__exponent+0x5e>
 8008a2a:	f10d 0309 	add.w	r3, sp, #9
 8008a2e:	1a9b      	subs	r3, r3, r2
 8008a30:	42ac      	cmp	r4, r5
 8008a32:	bf88      	it	hi
 8008a34:	2300      	movhi	r3, #0
 8008a36:	3302      	adds	r3, #2
 8008a38:	4403      	add	r3, r0
 8008a3a:	1a18      	subs	r0, r3, r0
 8008a3c:	b003      	add	sp, #12
 8008a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008a44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008a48:	e7ed      	b.n	8008a26 <__exponent+0x44>
 8008a4a:	2330      	movs	r3, #48	@ 0x30
 8008a4c:	3130      	adds	r1, #48	@ 0x30
 8008a4e:	7083      	strb	r3, [r0, #2]
 8008a50:	70c1      	strb	r1, [r0, #3]
 8008a52:	1d03      	adds	r3, r0, #4
 8008a54:	e7f1      	b.n	8008a3a <__exponent+0x58>
	...

08008a58 <_printf_float>:
 8008a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	b08d      	sub	sp, #52	@ 0x34
 8008a5e:	460c      	mov	r4, r1
 8008a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008a64:	4616      	mov	r6, r2
 8008a66:	461f      	mov	r7, r3
 8008a68:	4605      	mov	r5, r0
 8008a6a:	f000 ff7d 	bl	8009968 <_localeconv_r>
 8008a6e:	6803      	ldr	r3, [r0, #0]
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f7 fbfc 	bl	8000270 <strlen>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a80:	9005      	str	r0, [sp, #20]
 8008a82:	3307      	adds	r3, #7
 8008a84:	f023 0307 	bic.w	r3, r3, #7
 8008a88:	f103 0208 	add.w	r2, r3, #8
 8008a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008a90:	f8d4 b000 	ldr.w	fp, [r4]
 8008a94:	f8c8 2000 	str.w	r2, [r8]
 8008a98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008aa0:	9307      	str	r3, [sp, #28]
 8008aa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8008aa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008aae:	4b9c      	ldr	r3, [pc, #624]	@ (8008d20 <_printf_float+0x2c8>)
 8008ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab4:	f7f8 f83a 	bl	8000b2c <__aeabi_dcmpun>
 8008ab8:	bb70      	cbnz	r0, 8008b18 <_printf_float+0xc0>
 8008aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008abe:	4b98      	ldr	r3, [pc, #608]	@ (8008d20 <_printf_float+0x2c8>)
 8008ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac4:	f7f8 f814 	bl	8000af0 <__aeabi_dcmple>
 8008ac8:	bb30      	cbnz	r0, 8008b18 <_printf_float+0xc0>
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f8 f803 	bl	8000adc <__aeabi_dcmplt>
 8008ad6:	b110      	cbz	r0, 8008ade <_printf_float+0x86>
 8008ad8:	232d      	movs	r3, #45	@ 0x2d
 8008ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ade:	4a91      	ldr	r2, [pc, #580]	@ (8008d24 <_printf_float+0x2cc>)
 8008ae0:	4b91      	ldr	r3, [pc, #580]	@ (8008d28 <_printf_float+0x2d0>)
 8008ae2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ae6:	bf8c      	ite	hi
 8008ae8:	4690      	movhi	r8, r2
 8008aea:	4698      	movls	r8, r3
 8008aec:	2303      	movs	r3, #3
 8008aee:	6123      	str	r3, [r4, #16]
 8008af0:	f02b 0304 	bic.w	r3, fp, #4
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	f04f 0900 	mov.w	r9, #0
 8008afa:	9700      	str	r7, [sp, #0]
 8008afc:	4633      	mov	r3, r6
 8008afe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b00:	4621      	mov	r1, r4
 8008b02:	4628      	mov	r0, r5
 8008b04:	f000 f9d2 	bl	8008eac <_printf_common>
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f040 808d 	bne.w	8008c28 <_printf_float+0x1d0>
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	b00d      	add	sp, #52	@ 0x34
 8008b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	4649      	mov	r1, r9
 8008b20:	f7f8 f804 	bl	8000b2c <__aeabi_dcmpun>
 8008b24:	b140      	cbz	r0, 8008b38 <_printf_float+0xe0>
 8008b26:	464b      	mov	r3, r9
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bfbc      	itt	lt
 8008b2c:	232d      	movlt	r3, #45	@ 0x2d
 8008b2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b32:	4a7e      	ldr	r2, [pc, #504]	@ (8008d2c <_printf_float+0x2d4>)
 8008b34:	4b7e      	ldr	r3, [pc, #504]	@ (8008d30 <_printf_float+0x2d8>)
 8008b36:	e7d4      	b.n	8008ae2 <_printf_float+0x8a>
 8008b38:	6863      	ldr	r3, [r4, #4]
 8008b3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b3e:	9206      	str	r2, [sp, #24]
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	d13b      	bne.n	8008bbc <_printf_float+0x164>
 8008b44:	2306      	movs	r3, #6
 8008b46:	6063      	str	r3, [r4, #4]
 8008b48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	6022      	str	r2, [r4, #0]
 8008b50:	9303      	str	r3, [sp, #12]
 8008b52:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008b58:	ab09      	add	r3, sp, #36	@ 0x24
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	6861      	ldr	r1, [r4, #4]
 8008b5e:	ec49 8b10 	vmov	d0, r8, r9
 8008b62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008b66:	4628      	mov	r0, r5
 8008b68:	f7ff fed6 	bl	8008918 <__cvt>
 8008b6c:	9b06      	ldr	r3, [sp, #24]
 8008b6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b70:	2b47      	cmp	r3, #71	@ 0x47
 8008b72:	4680      	mov	r8, r0
 8008b74:	d129      	bne.n	8008bca <_printf_float+0x172>
 8008b76:	1cc8      	adds	r0, r1, #3
 8008b78:	db02      	blt.n	8008b80 <_printf_float+0x128>
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	dd41      	ble.n	8008c04 <_printf_float+0x1ac>
 8008b80:	f1aa 0a02 	sub.w	sl, sl, #2
 8008b84:	fa5f fa8a 	uxtb.w	sl, sl
 8008b88:	3901      	subs	r1, #1
 8008b8a:	4652      	mov	r2, sl
 8008b8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008b90:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b92:	f7ff ff26 	bl	80089e2 <__exponent>
 8008b96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b98:	1813      	adds	r3, r2, r0
 8008b9a:	2a01      	cmp	r2, #1
 8008b9c:	4681      	mov	r9, r0
 8008b9e:	6123      	str	r3, [r4, #16]
 8008ba0:	dc02      	bgt.n	8008ba8 <_printf_float+0x150>
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	07d2      	lsls	r2, r2, #31
 8008ba6:	d501      	bpl.n	8008bac <_printf_float+0x154>
 8008ba8:	3301      	adds	r3, #1
 8008baa:	6123      	str	r3, [r4, #16]
 8008bac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0a2      	beq.n	8008afa <_printf_float+0xa2>
 8008bb4:	232d      	movs	r3, #45	@ 0x2d
 8008bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bba:	e79e      	b.n	8008afa <_printf_float+0xa2>
 8008bbc:	9a06      	ldr	r2, [sp, #24]
 8008bbe:	2a47      	cmp	r2, #71	@ 0x47
 8008bc0:	d1c2      	bne.n	8008b48 <_printf_float+0xf0>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1c0      	bne.n	8008b48 <_printf_float+0xf0>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e7bd      	b.n	8008b46 <_printf_float+0xee>
 8008bca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008bce:	d9db      	bls.n	8008b88 <_printf_float+0x130>
 8008bd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008bd4:	d118      	bne.n	8008c08 <_printf_float+0x1b0>
 8008bd6:	2900      	cmp	r1, #0
 8008bd8:	6863      	ldr	r3, [r4, #4]
 8008bda:	dd0b      	ble.n	8008bf4 <_printf_float+0x19c>
 8008bdc:	6121      	str	r1, [r4, #16]
 8008bde:	b913      	cbnz	r3, 8008be6 <_printf_float+0x18e>
 8008be0:	6822      	ldr	r2, [r4, #0]
 8008be2:	07d0      	lsls	r0, r2, #31
 8008be4:	d502      	bpl.n	8008bec <_printf_float+0x194>
 8008be6:	3301      	adds	r3, #1
 8008be8:	440b      	add	r3, r1
 8008bea:	6123      	str	r3, [r4, #16]
 8008bec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008bee:	f04f 0900 	mov.w	r9, #0
 8008bf2:	e7db      	b.n	8008bac <_printf_float+0x154>
 8008bf4:	b913      	cbnz	r3, 8008bfc <_printf_float+0x1a4>
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	07d2      	lsls	r2, r2, #31
 8008bfa:	d501      	bpl.n	8008c00 <_printf_float+0x1a8>
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	e7f4      	b.n	8008bea <_printf_float+0x192>
 8008c00:	2301      	movs	r3, #1
 8008c02:	e7f2      	b.n	8008bea <_printf_float+0x192>
 8008c04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	db05      	blt.n	8008c1a <_printf_float+0x1c2>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	6121      	str	r1, [r4, #16]
 8008c12:	07d8      	lsls	r0, r3, #31
 8008c14:	d5ea      	bpl.n	8008bec <_printf_float+0x194>
 8008c16:	1c4b      	adds	r3, r1, #1
 8008c18:	e7e7      	b.n	8008bea <_printf_float+0x192>
 8008c1a:	2900      	cmp	r1, #0
 8008c1c:	bfd4      	ite	le
 8008c1e:	f1c1 0202 	rsble	r2, r1, #2
 8008c22:	2201      	movgt	r2, #1
 8008c24:	4413      	add	r3, r2
 8008c26:	e7e0      	b.n	8008bea <_printf_float+0x192>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	055a      	lsls	r2, r3, #21
 8008c2c:	d407      	bmi.n	8008c3e <_printf_float+0x1e6>
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	4642      	mov	r2, r8
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d12b      	bne.n	8008c94 <_printf_float+0x23c>
 8008c3c:	e767      	b.n	8008b0e <_printf_float+0xb6>
 8008c3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c42:	f240 80dd 	bls.w	8008e00 <_printf_float+0x3a8>
 8008c46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f7f7 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d033      	beq.n	8008cbe <_printf_float+0x266>
 8008c56:	4a37      	ldr	r2, [pc, #220]	@ (8008d34 <_printf_float+0x2dc>)
 8008c58:	2301      	movs	r3, #1
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f af54 	beq.w	8008b0e <_printf_float+0xb6>
 8008c66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008c6a:	4543      	cmp	r3, r8
 8008c6c:	db02      	blt.n	8008c74 <_printf_float+0x21c>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	07d8      	lsls	r0, r3, #31
 8008c72:	d50f      	bpl.n	8008c94 <_printf_float+0x23c>
 8008c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c78:	4631      	mov	r1, r6
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b8      	blx	r7
 8008c7e:	3001      	adds	r0, #1
 8008c80:	f43f af45 	beq.w	8008b0e <_printf_float+0xb6>
 8008c84:	f04f 0900 	mov.w	r9, #0
 8008c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c8c:	f104 0a1a 	add.w	sl, r4, #26
 8008c90:	45c8      	cmp	r8, r9
 8008c92:	dc09      	bgt.n	8008ca8 <_printf_float+0x250>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	079b      	lsls	r3, r3, #30
 8008c98:	f100 8103 	bmi.w	8008ea2 <_printf_float+0x44a>
 8008c9c:	68e0      	ldr	r0, [r4, #12]
 8008c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca0:	4298      	cmp	r0, r3
 8008ca2:	bfb8      	it	lt
 8008ca4:	4618      	movlt	r0, r3
 8008ca6:	e734      	b.n	8008b12 <_printf_float+0xba>
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4652      	mov	r2, sl
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f af2b 	beq.w	8008b0e <_printf_float+0xb6>
 8008cb8:	f109 0901 	add.w	r9, r9, #1
 8008cbc:	e7e8      	b.n	8008c90 <_printf_float+0x238>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dc39      	bgt.n	8008d38 <_printf_float+0x2e0>
 8008cc4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d34 <_printf_float+0x2dc>)
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4631      	mov	r1, r6
 8008cca:	4628      	mov	r0, r5
 8008ccc:	47b8      	blx	r7
 8008cce:	3001      	adds	r0, #1
 8008cd0:	f43f af1d 	beq.w	8008b0e <_printf_float+0xb6>
 8008cd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008cd8:	ea59 0303 	orrs.w	r3, r9, r3
 8008cdc:	d102      	bne.n	8008ce4 <_printf_float+0x28c>
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	07d9      	lsls	r1, r3, #31
 8008ce2:	d5d7      	bpl.n	8008c94 <_printf_float+0x23c>
 8008ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4628      	mov	r0, r5
 8008cec:	47b8      	blx	r7
 8008cee:	3001      	adds	r0, #1
 8008cf0:	f43f af0d 	beq.w	8008b0e <_printf_float+0xb6>
 8008cf4:	f04f 0a00 	mov.w	sl, #0
 8008cf8:	f104 0b1a 	add.w	fp, r4, #26
 8008cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfe:	425b      	negs	r3, r3
 8008d00:	4553      	cmp	r3, sl
 8008d02:	dc01      	bgt.n	8008d08 <_printf_float+0x2b0>
 8008d04:	464b      	mov	r3, r9
 8008d06:	e793      	b.n	8008c30 <_printf_float+0x1d8>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	465a      	mov	r2, fp
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b8      	blx	r7
 8008d12:	3001      	adds	r0, #1
 8008d14:	f43f aefb 	beq.w	8008b0e <_printf_float+0xb6>
 8008d18:	f10a 0a01 	add.w	sl, sl, #1
 8008d1c:	e7ee      	b.n	8008cfc <_printf_float+0x2a4>
 8008d1e:	bf00      	nop
 8008d20:	7fefffff 	.word	0x7fefffff
 8008d24:	0800d06c 	.word	0x0800d06c
 8008d28:	0800d068 	.word	0x0800d068
 8008d2c:	0800d074 	.word	0x0800d074
 8008d30:	0800d070 	.word	0x0800d070
 8008d34:	0800d078 	.word	0x0800d078
 8008d38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d3e:	4553      	cmp	r3, sl
 8008d40:	bfa8      	it	ge
 8008d42:	4653      	movge	r3, sl
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	4699      	mov	r9, r3
 8008d48:	dc36      	bgt.n	8008db8 <_printf_float+0x360>
 8008d4a:	f04f 0b00 	mov.w	fp, #0
 8008d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d52:	f104 021a 	add.w	r2, r4, #26
 8008d56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d58:	9306      	str	r3, [sp, #24]
 8008d5a:	eba3 0309 	sub.w	r3, r3, r9
 8008d5e:	455b      	cmp	r3, fp
 8008d60:	dc31      	bgt.n	8008dc6 <_printf_float+0x36e>
 8008d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d64:	459a      	cmp	sl, r3
 8008d66:	dc3a      	bgt.n	8008dde <_printf_float+0x386>
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	07da      	lsls	r2, r3, #31
 8008d6c:	d437      	bmi.n	8008dde <_printf_float+0x386>
 8008d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d70:	ebaa 0903 	sub.w	r9, sl, r3
 8008d74:	9b06      	ldr	r3, [sp, #24]
 8008d76:	ebaa 0303 	sub.w	r3, sl, r3
 8008d7a:	4599      	cmp	r9, r3
 8008d7c:	bfa8      	it	ge
 8008d7e:	4699      	movge	r9, r3
 8008d80:	f1b9 0f00 	cmp.w	r9, #0
 8008d84:	dc33      	bgt.n	8008dee <_printf_float+0x396>
 8008d86:	f04f 0800 	mov.w	r8, #0
 8008d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d8e:	f104 0b1a 	add.w	fp, r4, #26
 8008d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d94:	ebaa 0303 	sub.w	r3, sl, r3
 8008d98:	eba3 0309 	sub.w	r3, r3, r9
 8008d9c:	4543      	cmp	r3, r8
 8008d9e:	f77f af79 	ble.w	8008c94 <_printf_float+0x23c>
 8008da2:	2301      	movs	r3, #1
 8008da4:	465a      	mov	r2, fp
 8008da6:	4631      	mov	r1, r6
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b8      	blx	r7
 8008dac:	3001      	adds	r0, #1
 8008dae:	f43f aeae 	beq.w	8008b0e <_printf_float+0xb6>
 8008db2:	f108 0801 	add.w	r8, r8, #1
 8008db6:	e7ec      	b.n	8008d92 <_printf_float+0x33a>
 8008db8:	4642      	mov	r2, r8
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d1c2      	bne.n	8008d4a <_printf_float+0x2f2>
 8008dc4:	e6a3      	b.n	8008b0e <_printf_float+0xb6>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4631      	mov	r1, r6
 8008dca:	4628      	mov	r0, r5
 8008dcc:	9206      	str	r2, [sp, #24]
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae9c 	beq.w	8008b0e <_printf_float+0xb6>
 8008dd6:	9a06      	ldr	r2, [sp, #24]
 8008dd8:	f10b 0b01 	add.w	fp, fp, #1
 8008ddc:	e7bb      	b.n	8008d56 <_printf_float+0x2fe>
 8008dde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de2:	4631      	mov	r1, r6
 8008de4:	4628      	mov	r0, r5
 8008de6:	47b8      	blx	r7
 8008de8:	3001      	adds	r0, #1
 8008dea:	d1c0      	bne.n	8008d6e <_printf_float+0x316>
 8008dec:	e68f      	b.n	8008b0e <_printf_float+0xb6>
 8008dee:	9a06      	ldr	r2, [sp, #24]
 8008df0:	464b      	mov	r3, r9
 8008df2:	4442      	add	r2, r8
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d1c3      	bne.n	8008d86 <_printf_float+0x32e>
 8008dfe:	e686      	b.n	8008b0e <_printf_float+0xb6>
 8008e00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e04:	f1ba 0f01 	cmp.w	sl, #1
 8008e08:	dc01      	bgt.n	8008e0e <_printf_float+0x3b6>
 8008e0a:	07db      	lsls	r3, r3, #31
 8008e0c:	d536      	bpl.n	8008e7c <_printf_float+0x424>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4642      	mov	r2, r8
 8008e12:	4631      	mov	r1, r6
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b8      	blx	r7
 8008e18:	3001      	adds	r0, #1
 8008e1a:	f43f ae78 	beq.w	8008b0e <_printf_float+0xb6>
 8008e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e22:	4631      	mov	r1, r6
 8008e24:	4628      	mov	r0, r5
 8008e26:	47b8      	blx	r7
 8008e28:	3001      	adds	r0, #1
 8008e2a:	f43f ae70 	beq.w	8008b0e <_printf_float+0xb6>
 8008e2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e3a:	f7f7 fe45 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e3e:	b9c0      	cbnz	r0, 8008e72 <_printf_float+0x41a>
 8008e40:	4653      	mov	r3, sl
 8008e42:	f108 0201 	add.w	r2, r8, #1
 8008e46:	4631      	mov	r1, r6
 8008e48:	4628      	mov	r0, r5
 8008e4a:	47b8      	blx	r7
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d10c      	bne.n	8008e6a <_printf_float+0x412>
 8008e50:	e65d      	b.n	8008b0e <_printf_float+0xb6>
 8008e52:	2301      	movs	r3, #1
 8008e54:	465a      	mov	r2, fp
 8008e56:	4631      	mov	r1, r6
 8008e58:	4628      	mov	r0, r5
 8008e5a:	47b8      	blx	r7
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	f43f ae56 	beq.w	8008b0e <_printf_float+0xb6>
 8008e62:	f108 0801 	add.w	r8, r8, #1
 8008e66:	45d0      	cmp	r8, sl
 8008e68:	dbf3      	blt.n	8008e52 <_printf_float+0x3fa>
 8008e6a:	464b      	mov	r3, r9
 8008e6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008e70:	e6df      	b.n	8008c32 <_printf_float+0x1da>
 8008e72:	f04f 0800 	mov.w	r8, #0
 8008e76:	f104 0b1a 	add.w	fp, r4, #26
 8008e7a:	e7f4      	b.n	8008e66 <_printf_float+0x40e>
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	4642      	mov	r2, r8
 8008e80:	e7e1      	b.n	8008e46 <_printf_float+0x3ee>
 8008e82:	2301      	movs	r3, #1
 8008e84:	464a      	mov	r2, r9
 8008e86:	4631      	mov	r1, r6
 8008e88:	4628      	mov	r0, r5
 8008e8a:	47b8      	blx	r7
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	f43f ae3e 	beq.w	8008b0e <_printf_float+0xb6>
 8008e92:	f108 0801 	add.w	r8, r8, #1
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e9a:	1a5b      	subs	r3, r3, r1
 8008e9c:	4543      	cmp	r3, r8
 8008e9e:	dcf0      	bgt.n	8008e82 <_printf_float+0x42a>
 8008ea0:	e6fc      	b.n	8008c9c <_printf_float+0x244>
 8008ea2:	f04f 0800 	mov.w	r8, #0
 8008ea6:	f104 0919 	add.w	r9, r4, #25
 8008eaa:	e7f4      	b.n	8008e96 <_printf_float+0x43e>

08008eac <_printf_common>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	4616      	mov	r6, r2
 8008eb2:	4698      	mov	r8, r3
 8008eb4:	688a      	ldr	r2, [r1, #8]
 8008eb6:	690b      	ldr	r3, [r1, #16]
 8008eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	bfb8      	it	lt
 8008ec0:	4613      	movlt	r3, r2
 8008ec2:	6033      	str	r3, [r6, #0]
 8008ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ec8:	4607      	mov	r7, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	b10a      	cbz	r2, 8008ed2 <_printf_common+0x26>
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	0699      	lsls	r1, r3, #26
 8008ed6:	bf42      	ittt	mi
 8008ed8:	6833      	ldrmi	r3, [r6, #0]
 8008eda:	3302      	addmi	r3, #2
 8008edc:	6033      	strmi	r3, [r6, #0]
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	f015 0506 	ands.w	r5, r5, #6
 8008ee4:	d106      	bne.n	8008ef4 <_printf_common+0x48>
 8008ee6:	f104 0a19 	add.w	sl, r4, #25
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	6832      	ldr	r2, [r6, #0]
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dc26      	bgt.n	8008f42 <_printf_common+0x96>
 8008ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ef8:	6822      	ldr	r2, [r4, #0]
 8008efa:	3b00      	subs	r3, #0
 8008efc:	bf18      	it	ne
 8008efe:	2301      	movne	r3, #1
 8008f00:	0692      	lsls	r2, r2, #26
 8008f02:	d42b      	bmi.n	8008f5c <_printf_common+0xb0>
 8008f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f08:	4641      	mov	r1, r8
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	47c8      	blx	r9
 8008f0e:	3001      	adds	r0, #1
 8008f10:	d01e      	beq.n	8008f50 <_printf_common+0xa4>
 8008f12:	6823      	ldr	r3, [r4, #0]
 8008f14:	6922      	ldr	r2, [r4, #16]
 8008f16:	f003 0306 	and.w	r3, r3, #6
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	bf02      	ittt	eq
 8008f1e:	68e5      	ldreq	r5, [r4, #12]
 8008f20:	6833      	ldreq	r3, [r6, #0]
 8008f22:	1aed      	subeq	r5, r5, r3
 8008f24:	68a3      	ldr	r3, [r4, #8]
 8008f26:	bf0c      	ite	eq
 8008f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f2c:	2500      	movne	r5, #0
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	bfc4      	itt	gt
 8008f32:	1a9b      	subgt	r3, r3, r2
 8008f34:	18ed      	addgt	r5, r5, r3
 8008f36:	2600      	movs	r6, #0
 8008f38:	341a      	adds	r4, #26
 8008f3a:	42b5      	cmp	r5, r6
 8008f3c:	d11a      	bne.n	8008f74 <_printf_common+0xc8>
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e008      	b.n	8008f54 <_printf_common+0xa8>
 8008f42:	2301      	movs	r3, #1
 8008f44:	4652      	mov	r2, sl
 8008f46:	4641      	mov	r1, r8
 8008f48:	4638      	mov	r0, r7
 8008f4a:	47c8      	blx	r9
 8008f4c:	3001      	adds	r0, #1
 8008f4e:	d103      	bne.n	8008f58 <_printf_common+0xac>
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f58:	3501      	adds	r5, #1
 8008f5a:	e7c6      	b.n	8008eea <_printf_common+0x3e>
 8008f5c:	18e1      	adds	r1, r4, r3
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	2030      	movs	r0, #48	@ 0x30
 8008f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f66:	4422      	add	r2, r4
 8008f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f70:	3302      	adds	r3, #2
 8008f72:	e7c7      	b.n	8008f04 <_printf_common+0x58>
 8008f74:	2301      	movs	r3, #1
 8008f76:	4622      	mov	r2, r4
 8008f78:	4641      	mov	r1, r8
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	47c8      	blx	r9
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d0e6      	beq.n	8008f50 <_printf_common+0xa4>
 8008f82:	3601      	adds	r6, #1
 8008f84:	e7d9      	b.n	8008f3a <_printf_common+0x8e>
	...

08008f88 <_printf_i>:
 8008f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f8c:	7e0f      	ldrb	r7, [r1, #24]
 8008f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f90:	2f78      	cmp	r7, #120	@ 0x78
 8008f92:	4691      	mov	r9, r2
 8008f94:	4680      	mov	r8, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	469a      	mov	sl, r3
 8008f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f9e:	d807      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fa0:	2f62      	cmp	r7, #98	@ 0x62
 8008fa2:	d80a      	bhi.n	8008fba <_printf_i+0x32>
 8008fa4:	2f00      	cmp	r7, #0
 8008fa6:	f000 80d1 	beq.w	800914c <_printf_i+0x1c4>
 8008faa:	2f58      	cmp	r7, #88	@ 0x58
 8008fac:	f000 80b8 	beq.w	8009120 <_printf_i+0x198>
 8008fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fb8:	e03a      	b.n	8009030 <_printf_i+0xa8>
 8008fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fbe:	2b15      	cmp	r3, #21
 8008fc0:	d8f6      	bhi.n	8008fb0 <_printf_i+0x28>
 8008fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8008fc8 <_printf_i+0x40>)
 8008fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc8:	08009021 	.word	0x08009021
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08008fb1 	.word	0x08008fb1
 8008fd4:	08008fb1 	.word	0x08008fb1
 8008fd8:	08008fb1 	.word	0x08008fb1
 8008fdc:	08008fb1 	.word	0x08008fb1
 8008fe0:	08009035 	.word	0x08009035
 8008fe4:	08008fb1 	.word	0x08008fb1
 8008fe8:	08008fb1 	.word	0x08008fb1
 8008fec:	08008fb1 	.word	0x08008fb1
 8008ff0:	08008fb1 	.word	0x08008fb1
 8008ff4:	08009133 	.word	0x08009133
 8008ff8:	0800905f 	.word	0x0800905f
 8008ffc:	080090ed 	.word	0x080090ed
 8009000:	08008fb1 	.word	0x08008fb1
 8009004:	08008fb1 	.word	0x08008fb1
 8009008:	08009155 	.word	0x08009155
 800900c:	08008fb1 	.word	0x08008fb1
 8009010:	0800905f 	.word	0x0800905f
 8009014:	08008fb1 	.word	0x08008fb1
 8009018:	08008fb1 	.word	0x08008fb1
 800901c:	080090f5 	.word	0x080090f5
 8009020:	6833      	ldr	r3, [r6, #0]
 8009022:	1d1a      	adds	r2, r3, #4
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6032      	str	r2, [r6, #0]
 8009028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800902c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009030:	2301      	movs	r3, #1
 8009032:	e09c      	b.n	800916e <_printf_i+0x1e6>
 8009034:	6833      	ldr	r3, [r6, #0]
 8009036:	6820      	ldr	r0, [r4, #0]
 8009038:	1d19      	adds	r1, r3, #4
 800903a:	6031      	str	r1, [r6, #0]
 800903c:	0606      	lsls	r6, r0, #24
 800903e:	d501      	bpl.n	8009044 <_printf_i+0xbc>
 8009040:	681d      	ldr	r5, [r3, #0]
 8009042:	e003      	b.n	800904c <_printf_i+0xc4>
 8009044:	0645      	lsls	r5, r0, #25
 8009046:	d5fb      	bpl.n	8009040 <_printf_i+0xb8>
 8009048:	f9b3 5000 	ldrsh.w	r5, [r3]
 800904c:	2d00      	cmp	r5, #0
 800904e:	da03      	bge.n	8009058 <_printf_i+0xd0>
 8009050:	232d      	movs	r3, #45	@ 0x2d
 8009052:	426d      	negs	r5, r5
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009058:	4858      	ldr	r0, [pc, #352]	@ (80091bc <_printf_i+0x234>)
 800905a:	230a      	movs	r3, #10
 800905c:	e011      	b.n	8009082 <_printf_i+0xfa>
 800905e:	6821      	ldr	r1, [r4, #0]
 8009060:	6833      	ldr	r3, [r6, #0]
 8009062:	0608      	lsls	r0, r1, #24
 8009064:	f853 5b04 	ldr.w	r5, [r3], #4
 8009068:	d402      	bmi.n	8009070 <_printf_i+0xe8>
 800906a:	0649      	lsls	r1, r1, #25
 800906c:	bf48      	it	mi
 800906e:	b2ad      	uxthmi	r5, r5
 8009070:	2f6f      	cmp	r7, #111	@ 0x6f
 8009072:	4852      	ldr	r0, [pc, #328]	@ (80091bc <_printf_i+0x234>)
 8009074:	6033      	str	r3, [r6, #0]
 8009076:	bf14      	ite	ne
 8009078:	230a      	movne	r3, #10
 800907a:	2308      	moveq	r3, #8
 800907c:	2100      	movs	r1, #0
 800907e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009082:	6866      	ldr	r6, [r4, #4]
 8009084:	60a6      	str	r6, [r4, #8]
 8009086:	2e00      	cmp	r6, #0
 8009088:	db05      	blt.n	8009096 <_printf_i+0x10e>
 800908a:	6821      	ldr	r1, [r4, #0]
 800908c:	432e      	orrs	r6, r5
 800908e:	f021 0104 	bic.w	r1, r1, #4
 8009092:	6021      	str	r1, [r4, #0]
 8009094:	d04b      	beq.n	800912e <_printf_i+0x1a6>
 8009096:	4616      	mov	r6, r2
 8009098:	fbb5 f1f3 	udiv	r1, r5, r3
 800909c:	fb03 5711 	mls	r7, r3, r1, r5
 80090a0:	5dc7      	ldrb	r7, [r0, r7]
 80090a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090a6:	462f      	mov	r7, r5
 80090a8:	42bb      	cmp	r3, r7
 80090aa:	460d      	mov	r5, r1
 80090ac:	d9f4      	bls.n	8009098 <_printf_i+0x110>
 80090ae:	2b08      	cmp	r3, #8
 80090b0:	d10b      	bne.n	80090ca <_printf_i+0x142>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	07df      	lsls	r7, r3, #31
 80090b6:	d508      	bpl.n	80090ca <_printf_i+0x142>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	6861      	ldr	r1, [r4, #4]
 80090bc:	4299      	cmp	r1, r3
 80090be:	bfde      	ittt	le
 80090c0:	2330      	movle	r3, #48	@ 0x30
 80090c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090ca:	1b92      	subs	r2, r2, r6
 80090cc:	6122      	str	r2, [r4, #16]
 80090ce:	f8cd a000 	str.w	sl, [sp]
 80090d2:	464b      	mov	r3, r9
 80090d4:	aa03      	add	r2, sp, #12
 80090d6:	4621      	mov	r1, r4
 80090d8:	4640      	mov	r0, r8
 80090da:	f7ff fee7 	bl	8008eac <_printf_common>
 80090de:	3001      	adds	r0, #1
 80090e0:	d14a      	bne.n	8009178 <_printf_i+0x1f0>
 80090e2:	f04f 30ff 	mov.w	r0, #4294967295
 80090e6:	b004      	add	sp, #16
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	f043 0320 	orr.w	r3, r3, #32
 80090f2:	6023      	str	r3, [r4, #0]
 80090f4:	4832      	ldr	r0, [pc, #200]	@ (80091c0 <_printf_i+0x238>)
 80090f6:	2778      	movs	r7, #120	@ 0x78
 80090f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	6831      	ldr	r1, [r6, #0]
 8009100:	061f      	lsls	r7, r3, #24
 8009102:	f851 5b04 	ldr.w	r5, [r1], #4
 8009106:	d402      	bmi.n	800910e <_printf_i+0x186>
 8009108:	065f      	lsls	r7, r3, #25
 800910a:	bf48      	it	mi
 800910c:	b2ad      	uxthmi	r5, r5
 800910e:	6031      	str	r1, [r6, #0]
 8009110:	07d9      	lsls	r1, r3, #31
 8009112:	bf44      	itt	mi
 8009114:	f043 0320 	orrmi.w	r3, r3, #32
 8009118:	6023      	strmi	r3, [r4, #0]
 800911a:	b11d      	cbz	r5, 8009124 <_printf_i+0x19c>
 800911c:	2310      	movs	r3, #16
 800911e:	e7ad      	b.n	800907c <_printf_i+0xf4>
 8009120:	4826      	ldr	r0, [pc, #152]	@ (80091bc <_printf_i+0x234>)
 8009122:	e7e9      	b.n	80090f8 <_printf_i+0x170>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	f023 0320 	bic.w	r3, r3, #32
 800912a:	6023      	str	r3, [r4, #0]
 800912c:	e7f6      	b.n	800911c <_printf_i+0x194>
 800912e:	4616      	mov	r6, r2
 8009130:	e7bd      	b.n	80090ae <_printf_i+0x126>
 8009132:	6833      	ldr	r3, [r6, #0]
 8009134:	6825      	ldr	r5, [r4, #0]
 8009136:	6961      	ldr	r1, [r4, #20]
 8009138:	1d18      	adds	r0, r3, #4
 800913a:	6030      	str	r0, [r6, #0]
 800913c:	062e      	lsls	r6, r5, #24
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	d501      	bpl.n	8009146 <_printf_i+0x1be>
 8009142:	6019      	str	r1, [r3, #0]
 8009144:	e002      	b.n	800914c <_printf_i+0x1c4>
 8009146:	0668      	lsls	r0, r5, #25
 8009148:	d5fb      	bpl.n	8009142 <_printf_i+0x1ba>
 800914a:	8019      	strh	r1, [r3, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	6123      	str	r3, [r4, #16]
 8009150:	4616      	mov	r6, r2
 8009152:	e7bc      	b.n	80090ce <_printf_i+0x146>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	1d1a      	adds	r2, r3, #4
 8009158:	6032      	str	r2, [r6, #0]
 800915a:	681e      	ldr	r6, [r3, #0]
 800915c:	6862      	ldr	r2, [r4, #4]
 800915e:	2100      	movs	r1, #0
 8009160:	4630      	mov	r0, r6
 8009162:	f7f7 f835 	bl	80001d0 <memchr>
 8009166:	b108      	cbz	r0, 800916c <_printf_i+0x1e4>
 8009168:	1b80      	subs	r0, r0, r6
 800916a:	6060      	str	r0, [r4, #4]
 800916c:	6863      	ldr	r3, [r4, #4]
 800916e:	6123      	str	r3, [r4, #16]
 8009170:	2300      	movs	r3, #0
 8009172:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009176:	e7aa      	b.n	80090ce <_printf_i+0x146>
 8009178:	6923      	ldr	r3, [r4, #16]
 800917a:	4632      	mov	r2, r6
 800917c:	4649      	mov	r1, r9
 800917e:	4640      	mov	r0, r8
 8009180:	47d0      	blx	sl
 8009182:	3001      	adds	r0, #1
 8009184:	d0ad      	beq.n	80090e2 <_printf_i+0x15a>
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	d413      	bmi.n	80091b4 <_printf_i+0x22c>
 800918c:	68e0      	ldr	r0, [r4, #12]
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	4298      	cmp	r0, r3
 8009192:	bfb8      	it	lt
 8009194:	4618      	movlt	r0, r3
 8009196:	e7a6      	b.n	80090e6 <_printf_i+0x15e>
 8009198:	2301      	movs	r3, #1
 800919a:	4632      	mov	r2, r6
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	47d0      	blx	sl
 80091a2:	3001      	adds	r0, #1
 80091a4:	d09d      	beq.n	80090e2 <_printf_i+0x15a>
 80091a6:	3501      	adds	r5, #1
 80091a8:	68e3      	ldr	r3, [r4, #12]
 80091aa:	9903      	ldr	r1, [sp, #12]
 80091ac:	1a5b      	subs	r3, r3, r1
 80091ae:	42ab      	cmp	r3, r5
 80091b0:	dcf2      	bgt.n	8009198 <_printf_i+0x210>
 80091b2:	e7eb      	b.n	800918c <_printf_i+0x204>
 80091b4:	2500      	movs	r5, #0
 80091b6:	f104 0619 	add.w	r6, r4, #25
 80091ba:	e7f5      	b.n	80091a8 <_printf_i+0x220>
 80091bc:	0800d07a 	.word	0x0800d07a
 80091c0:	0800d08b 	.word	0x0800d08b

080091c4 <_scanf_float>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	b087      	sub	sp, #28
 80091ca:	4691      	mov	r9, r2
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	688b      	ldr	r3, [r1, #8]
 80091d0:	1e5a      	subs	r2, r3, #1
 80091d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80091d6:	bf81      	itttt	hi
 80091d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80091dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80091e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80091e4:	608b      	strhi	r3, [r1, #8]
 80091e6:	680b      	ldr	r3, [r1, #0]
 80091e8:	460a      	mov	r2, r1
 80091ea:	f04f 0500 	mov.w	r5, #0
 80091ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80091f2:	f842 3b1c 	str.w	r3, [r2], #28
 80091f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80091fa:	4680      	mov	r8, r0
 80091fc:	460c      	mov	r4, r1
 80091fe:	bf98      	it	ls
 8009200:	f04f 0b00 	movls.w	fp, #0
 8009204:	9201      	str	r2, [sp, #4]
 8009206:	4616      	mov	r6, r2
 8009208:	46aa      	mov	sl, r5
 800920a:	462f      	mov	r7, r5
 800920c:	9502      	str	r5, [sp, #8]
 800920e:	68a2      	ldr	r2, [r4, #8]
 8009210:	b15a      	cbz	r2, 800922a <_scanf_float+0x66>
 8009212:	f8d9 3000 	ldr.w	r3, [r9]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b4e      	cmp	r3, #78	@ 0x4e
 800921a:	d863      	bhi.n	80092e4 <_scanf_float+0x120>
 800921c:	2b40      	cmp	r3, #64	@ 0x40
 800921e:	d83b      	bhi.n	8009298 <_scanf_float+0xd4>
 8009220:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009224:	b2c8      	uxtb	r0, r1
 8009226:	280e      	cmp	r0, #14
 8009228:	d939      	bls.n	800929e <_scanf_float+0xda>
 800922a:	b11f      	cbz	r7, 8009234 <_scanf_float+0x70>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009238:	f1ba 0f01 	cmp.w	sl, #1
 800923c:	f200 8114 	bhi.w	8009468 <_scanf_float+0x2a4>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	429e      	cmp	r6, r3
 8009244:	f200 8105 	bhi.w	8009452 <_scanf_float+0x28e>
 8009248:	2001      	movs	r0, #1
 800924a:	b007      	add	sp, #28
 800924c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009250:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009254:	2a0d      	cmp	r2, #13
 8009256:	d8e8      	bhi.n	800922a <_scanf_float+0x66>
 8009258:	a101      	add	r1, pc, #4	@ (adr r1, 8009260 <_scanf_float+0x9c>)
 800925a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800925e:	bf00      	nop
 8009260:	080093a9 	.word	0x080093a9
 8009264:	0800922b 	.word	0x0800922b
 8009268:	0800922b 	.word	0x0800922b
 800926c:	0800922b 	.word	0x0800922b
 8009270:	08009405 	.word	0x08009405
 8009274:	080093df 	.word	0x080093df
 8009278:	0800922b 	.word	0x0800922b
 800927c:	0800922b 	.word	0x0800922b
 8009280:	080093b7 	.word	0x080093b7
 8009284:	0800922b 	.word	0x0800922b
 8009288:	0800922b 	.word	0x0800922b
 800928c:	0800922b 	.word	0x0800922b
 8009290:	0800922b 	.word	0x0800922b
 8009294:	08009373 	.word	0x08009373
 8009298:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800929c:	e7da      	b.n	8009254 <_scanf_float+0x90>
 800929e:	290e      	cmp	r1, #14
 80092a0:	d8c3      	bhi.n	800922a <_scanf_float+0x66>
 80092a2:	a001      	add	r0, pc, #4	@ (adr r0, 80092a8 <_scanf_float+0xe4>)
 80092a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80092a8:	08009363 	.word	0x08009363
 80092ac:	0800922b 	.word	0x0800922b
 80092b0:	08009363 	.word	0x08009363
 80092b4:	080093f3 	.word	0x080093f3
 80092b8:	0800922b 	.word	0x0800922b
 80092bc:	08009305 	.word	0x08009305
 80092c0:	08009349 	.word	0x08009349
 80092c4:	08009349 	.word	0x08009349
 80092c8:	08009349 	.word	0x08009349
 80092cc:	08009349 	.word	0x08009349
 80092d0:	08009349 	.word	0x08009349
 80092d4:	08009349 	.word	0x08009349
 80092d8:	08009349 	.word	0x08009349
 80092dc:	08009349 	.word	0x08009349
 80092e0:	08009349 	.word	0x08009349
 80092e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80092e6:	d809      	bhi.n	80092fc <_scanf_float+0x138>
 80092e8:	2b60      	cmp	r3, #96	@ 0x60
 80092ea:	d8b1      	bhi.n	8009250 <_scanf_float+0x8c>
 80092ec:	2b54      	cmp	r3, #84	@ 0x54
 80092ee:	d07b      	beq.n	80093e8 <_scanf_float+0x224>
 80092f0:	2b59      	cmp	r3, #89	@ 0x59
 80092f2:	d19a      	bne.n	800922a <_scanf_float+0x66>
 80092f4:	2d07      	cmp	r5, #7
 80092f6:	d198      	bne.n	800922a <_scanf_float+0x66>
 80092f8:	2508      	movs	r5, #8
 80092fa:	e02f      	b.n	800935c <_scanf_float+0x198>
 80092fc:	2b74      	cmp	r3, #116	@ 0x74
 80092fe:	d073      	beq.n	80093e8 <_scanf_float+0x224>
 8009300:	2b79      	cmp	r3, #121	@ 0x79
 8009302:	e7f6      	b.n	80092f2 <_scanf_float+0x12e>
 8009304:	6821      	ldr	r1, [r4, #0]
 8009306:	05c8      	lsls	r0, r1, #23
 8009308:	d51e      	bpl.n	8009348 <_scanf_float+0x184>
 800930a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800930e:	6021      	str	r1, [r4, #0]
 8009310:	3701      	adds	r7, #1
 8009312:	f1bb 0f00 	cmp.w	fp, #0
 8009316:	d003      	beq.n	8009320 <_scanf_float+0x15c>
 8009318:	3201      	adds	r2, #1
 800931a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800931e:	60a2      	str	r2, [r4, #8]
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	3b01      	subs	r3, #1
 8009324:	60a3      	str	r3, [r4, #8]
 8009326:	6923      	ldr	r3, [r4, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	6123      	str	r3, [r4, #16]
 800932c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009330:	3b01      	subs	r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	f8c9 3004 	str.w	r3, [r9, #4]
 8009338:	f340 8082 	ble.w	8009440 <_scanf_float+0x27c>
 800933c:	f8d9 3000 	ldr.w	r3, [r9]
 8009340:	3301      	adds	r3, #1
 8009342:	f8c9 3000 	str.w	r3, [r9]
 8009346:	e762      	b.n	800920e <_scanf_float+0x4a>
 8009348:	eb1a 0105 	adds.w	r1, sl, r5
 800934c:	f47f af6d 	bne.w	800922a <_scanf_float+0x66>
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009356:	6022      	str	r2, [r4, #0]
 8009358:	460d      	mov	r5, r1
 800935a:	468a      	mov	sl, r1
 800935c:	f806 3b01 	strb.w	r3, [r6], #1
 8009360:	e7de      	b.n	8009320 <_scanf_float+0x15c>
 8009362:	6822      	ldr	r2, [r4, #0]
 8009364:	0610      	lsls	r0, r2, #24
 8009366:	f57f af60 	bpl.w	800922a <_scanf_float+0x66>
 800936a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800936e:	6022      	str	r2, [r4, #0]
 8009370:	e7f4      	b.n	800935c <_scanf_float+0x198>
 8009372:	f1ba 0f00 	cmp.w	sl, #0
 8009376:	d10c      	bne.n	8009392 <_scanf_float+0x1ce>
 8009378:	b977      	cbnz	r7, 8009398 <_scanf_float+0x1d4>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009384:	d108      	bne.n	8009398 <_scanf_float+0x1d4>
 8009386:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800938a:	6022      	str	r2, [r4, #0]
 800938c:	f04f 0a01 	mov.w	sl, #1
 8009390:	e7e4      	b.n	800935c <_scanf_float+0x198>
 8009392:	f1ba 0f02 	cmp.w	sl, #2
 8009396:	d050      	beq.n	800943a <_scanf_float+0x276>
 8009398:	2d01      	cmp	r5, #1
 800939a:	d002      	beq.n	80093a2 <_scanf_float+0x1de>
 800939c:	2d04      	cmp	r5, #4
 800939e:	f47f af44 	bne.w	800922a <_scanf_float+0x66>
 80093a2:	3501      	adds	r5, #1
 80093a4:	b2ed      	uxtb	r5, r5
 80093a6:	e7d9      	b.n	800935c <_scanf_float+0x198>
 80093a8:	f1ba 0f01 	cmp.w	sl, #1
 80093ac:	f47f af3d 	bne.w	800922a <_scanf_float+0x66>
 80093b0:	f04f 0a02 	mov.w	sl, #2
 80093b4:	e7d2      	b.n	800935c <_scanf_float+0x198>
 80093b6:	b975      	cbnz	r5, 80093d6 <_scanf_float+0x212>
 80093b8:	2f00      	cmp	r7, #0
 80093ba:	f47f af37 	bne.w	800922c <_scanf_float+0x68>
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80093c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80093c8:	f040 8103 	bne.w	80095d2 <_scanf_float+0x40e>
 80093cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80093d0:	6022      	str	r2, [r4, #0]
 80093d2:	2501      	movs	r5, #1
 80093d4:	e7c2      	b.n	800935c <_scanf_float+0x198>
 80093d6:	2d03      	cmp	r5, #3
 80093d8:	d0e3      	beq.n	80093a2 <_scanf_float+0x1de>
 80093da:	2d05      	cmp	r5, #5
 80093dc:	e7df      	b.n	800939e <_scanf_float+0x1da>
 80093de:	2d02      	cmp	r5, #2
 80093e0:	f47f af23 	bne.w	800922a <_scanf_float+0x66>
 80093e4:	2503      	movs	r5, #3
 80093e6:	e7b9      	b.n	800935c <_scanf_float+0x198>
 80093e8:	2d06      	cmp	r5, #6
 80093ea:	f47f af1e 	bne.w	800922a <_scanf_float+0x66>
 80093ee:	2507      	movs	r5, #7
 80093f0:	e7b4      	b.n	800935c <_scanf_float+0x198>
 80093f2:	6822      	ldr	r2, [r4, #0]
 80093f4:	0591      	lsls	r1, r2, #22
 80093f6:	f57f af18 	bpl.w	800922a <_scanf_float+0x66>
 80093fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80093fe:	6022      	str	r2, [r4, #0]
 8009400:	9702      	str	r7, [sp, #8]
 8009402:	e7ab      	b.n	800935c <_scanf_float+0x198>
 8009404:	6822      	ldr	r2, [r4, #0]
 8009406:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800940a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800940e:	d005      	beq.n	800941c <_scanf_float+0x258>
 8009410:	0550      	lsls	r0, r2, #21
 8009412:	f57f af0a 	bpl.w	800922a <_scanf_float+0x66>
 8009416:	2f00      	cmp	r7, #0
 8009418:	f000 80db 	beq.w	80095d2 <_scanf_float+0x40e>
 800941c:	0591      	lsls	r1, r2, #22
 800941e:	bf58      	it	pl
 8009420:	9902      	ldrpl	r1, [sp, #8]
 8009422:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009426:	bf58      	it	pl
 8009428:	1a79      	subpl	r1, r7, r1
 800942a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800942e:	bf58      	it	pl
 8009430:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009434:	6022      	str	r2, [r4, #0]
 8009436:	2700      	movs	r7, #0
 8009438:	e790      	b.n	800935c <_scanf_float+0x198>
 800943a:	f04f 0a03 	mov.w	sl, #3
 800943e:	e78d      	b.n	800935c <_scanf_float+0x198>
 8009440:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009444:	4649      	mov	r1, r9
 8009446:	4640      	mov	r0, r8
 8009448:	4798      	blx	r3
 800944a:	2800      	cmp	r0, #0
 800944c:	f43f aedf 	beq.w	800920e <_scanf_float+0x4a>
 8009450:	e6eb      	b.n	800922a <_scanf_float+0x66>
 8009452:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009456:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800945a:	464a      	mov	r2, r9
 800945c:	4640      	mov	r0, r8
 800945e:	4798      	blx	r3
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	3b01      	subs	r3, #1
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	e6eb      	b.n	8009240 <_scanf_float+0x7c>
 8009468:	1e6b      	subs	r3, r5, #1
 800946a:	2b06      	cmp	r3, #6
 800946c:	d824      	bhi.n	80094b8 <_scanf_float+0x2f4>
 800946e:	2d02      	cmp	r5, #2
 8009470:	d836      	bhi.n	80094e0 <_scanf_float+0x31c>
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	429e      	cmp	r6, r3
 8009476:	f67f aee7 	bls.w	8009248 <_scanf_float+0x84>
 800947a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800947e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009482:	464a      	mov	r2, r9
 8009484:	4640      	mov	r0, r8
 8009486:	4798      	blx	r3
 8009488:	6923      	ldr	r3, [r4, #16]
 800948a:	3b01      	subs	r3, #1
 800948c:	6123      	str	r3, [r4, #16]
 800948e:	e7f0      	b.n	8009472 <_scanf_float+0x2ae>
 8009490:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009494:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009498:	464a      	mov	r2, r9
 800949a:	4640      	mov	r0, r8
 800949c:	4798      	blx	r3
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	6123      	str	r3, [r4, #16]
 80094a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094a8:	fa5f fa8a 	uxtb.w	sl, sl
 80094ac:	f1ba 0f02 	cmp.w	sl, #2
 80094b0:	d1ee      	bne.n	8009490 <_scanf_float+0x2cc>
 80094b2:	3d03      	subs	r5, #3
 80094b4:	b2ed      	uxtb	r5, r5
 80094b6:	1b76      	subs	r6, r6, r5
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	05da      	lsls	r2, r3, #23
 80094bc:	d530      	bpl.n	8009520 <_scanf_float+0x35c>
 80094be:	055b      	lsls	r3, r3, #21
 80094c0:	d511      	bpl.n	80094e6 <_scanf_float+0x322>
 80094c2:	9b01      	ldr	r3, [sp, #4]
 80094c4:	429e      	cmp	r6, r3
 80094c6:	f67f aebf 	bls.w	8009248 <_scanf_float+0x84>
 80094ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80094ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80094d2:	464a      	mov	r2, r9
 80094d4:	4640      	mov	r0, r8
 80094d6:	4798      	blx	r3
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	3b01      	subs	r3, #1
 80094dc:	6123      	str	r3, [r4, #16]
 80094de:	e7f0      	b.n	80094c2 <_scanf_float+0x2fe>
 80094e0:	46aa      	mov	sl, r5
 80094e2:	46b3      	mov	fp, r6
 80094e4:	e7de      	b.n	80094a4 <_scanf_float+0x2e0>
 80094e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	2965      	cmp	r1, #101	@ 0x65
 80094ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80094f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80094f6:	6123      	str	r3, [r4, #16]
 80094f8:	d00c      	beq.n	8009514 <_scanf_float+0x350>
 80094fa:	2945      	cmp	r1, #69	@ 0x45
 80094fc:	d00a      	beq.n	8009514 <_scanf_float+0x350>
 80094fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009502:	464a      	mov	r2, r9
 8009504:	4640      	mov	r0, r8
 8009506:	4798      	blx	r3
 8009508:	6923      	ldr	r3, [r4, #16]
 800950a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800950e:	3b01      	subs	r3, #1
 8009510:	1eb5      	subs	r5, r6, #2
 8009512:	6123      	str	r3, [r4, #16]
 8009514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009518:	464a      	mov	r2, r9
 800951a:	4640      	mov	r0, r8
 800951c:	4798      	blx	r3
 800951e:	462e      	mov	r6, r5
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	f012 0210 	ands.w	r2, r2, #16
 8009526:	d001      	beq.n	800952c <_scanf_float+0x368>
 8009528:	2000      	movs	r0, #0
 800952a:	e68e      	b.n	800924a <_scanf_float+0x86>
 800952c:	7032      	strb	r2, [r6, #0]
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009538:	d125      	bne.n	8009586 <_scanf_float+0x3c2>
 800953a:	9b02      	ldr	r3, [sp, #8]
 800953c:	429f      	cmp	r7, r3
 800953e:	d00a      	beq.n	8009556 <_scanf_float+0x392>
 8009540:	1bda      	subs	r2, r3, r7
 8009542:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009546:	429e      	cmp	r6, r3
 8009548:	bf28      	it	cs
 800954a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800954e:	4922      	ldr	r1, [pc, #136]	@ (80095d8 <_scanf_float+0x414>)
 8009550:	4630      	mov	r0, r6
 8009552:	f000 f907 	bl	8009764 <siprintf>
 8009556:	9901      	ldr	r1, [sp, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	4640      	mov	r0, r8
 800955c:	f002 fc94 	bl	800be88 <_strtod_r>
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	6821      	ldr	r1, [r4, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f011 0f02 	tst.w	r1, #2
 800956a:	ec57 6b10 	vmov	r6, r7, d0
 800956e:	f103 0204 	add.w	r2, r3, #4
 8009572:	d015      	beq.n	80095a0 <_scanf_float+0x3dc>
 8009574:	9903      	ldr	r1, [sp, #12]
 8009576:	600a      	str	r2, [r1, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	e9c3 6700 	strd	r6, r7, [r3]
 800957e:	68e3      	ldr	r3, [r4, #12]
 8009580:	3301      	adds	r3, #1
 8009582:	60e3      	str	r3, [r4, #12]
 8009584:	e7d0      	b.n	8009528 <_scanf_float+0x364>
 8009586:	9b04      	ldr	r3, [sp, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d0e4      	beq.n	8009556 <_scanf_float+0x392>
 800958c:	9905      	ldr	r1, [sp, #20]
 800958e:	230a      	movs	r3, #10
 8009590:	3101      	adds	r1, #1
 8009592:	4640      	mov	r0, r8
 8009594:	f002 fcf8 	bl	800bf88 <_strtol_r>
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	9e05      	ldr	r6, [sp, #20]
 800959c:	1ac2      	subs	r2, r0, r3
 800959e:	e7d0      	b.n	8009542 <_scanf_float+0x37e>
 80095a0:	f011 0f04 	tst.w	r1, #4
 80095a4:	9903      	ldr	r1, [sp, #12]
 80095a6:	600a      	str	r2, [r1, #0]
 80095a8:	d1e6      	bne.n	8009578 <_scanf_float+0x3b4>
 80095aa:	681d      	ldr	r5, [r3, #0]
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 faba 	bl	8000b2c <__aeabi_dcmpun>
 80095b8:	b128      	cbz	r0, 80095c6 <_scanf_float+0x402>
 80095ba:	4808      	ldr	r0, [pc, #32]	@ (80095dc <_scanf_float+0x418>)
 80095bc:	f000 fa5a 	bl	8009a74 <nanf>
 80095c0:	ed85 0a00 	vstr	s0, [r5]
 80095c4:	e7db      	b.n	800957e <_scanf_float+0x3ba>
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f7 fb0d 	bl	8000be8 <__aeabi_d2f>
 80095ce:	6028      	str	r0, [r5, #0]
 80095d0:	e7d5      	b.n	800957e <_scanf_float+0x3ba>
 80095d2:	2700      	movs	r7, #0
 80095d4:	e62e      	b.n	8009234 <_scanf_float+0x70>
 80095d6:	bf00      	nop
 80095d8:	0800d09c 	.word	0x0800d09c
 80095dc:	0800d1dd 	.word	0x0800d1dd

080095e0 <std>:
 80095e0:	2300      	movs	r3, #0
 80095e2:	b510      	push	{r4, lr}
 80095e4:	4604      	mov	r4, r0
 80095e6:	e9c0 3300 	strd	r3, r3, [r0]
 80095ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095ee:	6083      	str	r3, [r0, #8]
 80095f0:	8181      	strh	r1, [r0, #12]
 80095f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80095f4:	81c2      	strh	r2, [r0, #14]
 80095f6:	6183      	str	r3, [r0, #24]
 80095f8:	4619      	mov	r1, r3
 80095fa:	2208      	movs	r2, #8
 80095fc:	305c      	adds	r0, #92	@ 0x5c
 80095fe:	f000 f9ab 	bl	8009958 <memset>
 8009602:	4b0d      	ldr	r3, [pc, #52]	@ (8009638 <std+0x58>)
 8009604:	6263      	str	r3, [r4, #36]	@ 0x24
 8009606:	4b0d      	ldr	r3, [pc, #52]	@ (800963c <std+0x5c>)
 8009608:	62a3      	str	r3, [r4, #40]	@ 0x28
 800960a:	4b0d      	ldr	r3, [pc, #52]	@ (8009640 <std+0x60>)
 800960c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800960e:	4b0d      	ldr	r3, [pc, #52]	@ (8009644 <std+0x64>)
 8009610:	6323      	str	r3, [r4, #48]	@ 0x30
 8009612:	4b0d      	ldr	r3, [pc, #52]	@ (8009648 <std+0x68>)
 8009614:	6224      	str	r4, [r4, #32]
 8009616:	429c      	cmp	r4, r3
 8009618:	d006      	beq.n	8009628 <std+0x48>
 800961a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800961e:	4294      	cmp	r4, r2
 8009620:	d002      	beq.n	8009628 <std+0x48>
 8009622:	33d0      	adds	r3, #208	@ 0xd0
 8009624:	429c      	cmp	r4, r3
 8009626:	d105      	bne.n	8009634 <std+0x54>
 8009628:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800962c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009630:	f000 ba0e 	b.w	8009a50 <__retarget_lock_init_recursive>
 8009634:	bd10      	pop	{r4, pc}
 8009636:	bf00      	nop
 8009638:	080097a9 	.word	0x080097a9
 800963c:	080097cb 	.word	0x080097cb
 8009640:	08009803 	.word	0x08009803
 8009644:	08009827 	.word	0x08009827
 8009648:	20001fbc 	.word	0x20001fbc

0800964c <stdio_exit_handler>:
 800964c:	4a02      	ldr	r2, [pc, #8]	@ (8009658 <stdio_exit_handler+0xc>)
 800964e:	4903      	ldr	r1, [pc, #12]	@ (800965c <stdio_exit_handler+0x10>)
 8009650:	4803      	ldr	r0, [pc, #12]	@ (8009660 <stdio_exit_handler+0x14>)
 8009652:	f000 b869 	b.w	8009728 <_fwalk_sglue>
 8009656:	bf00      	nop
 8009658:	20000108 	.word	0x20000108
 800965c:	0800c5c9 	.word	0x0800c5c9
 8009660:	20000118 	.word	0x20000118

08009664 <cleanup_stdio>:
 8009664:	6841      	ldr	r1, [r0, #4]
 8009666:	4b0c      	ldr	r3, [pc, #48]	@ (8009698 <cleanup_stdio+0x34>)
 8009668:	4299      	cmp	r1, r3
 800966a:	b510      	push	{r4, lr}
 800966c:	4604      	mov	r4, r0
 800966e:	d001      	beq.n	8009674 <cleanup_stdio+0x10>
 8009670:	f002 ffaa 	bl	800c5c8 <_fflush_r>
 8009674:	68a1      	ldr	r1, [r4, #8]
 8009676:	4b09      	ldr	r3, [pc, #36]	@ (800969c <cleanup_stdio+0x38>)
 8009678:	4299      	cmp	r1, r3
 800967a:	d002      	beq.n	8009682 <cleanup_stdio+0x1e>
 800967c:	4620      	mov	r0, r4
 800967e:	f002 ffa3 	bl	800c5c8 <_fflush_r>
 8009682:	68e1      	ldr	r1, [r4, #12]
 8009684:	4b06      	ldr	r3, [pc, #24]	@ (80096a0 <cleanup_stdio+0x3c>)
 8009686:	4299      	cmp	r1, r3
 8009688:	d004      	beq.n	8009694 <cleanup_stdio+0x30>
 800968a:	4620      	mov	r0, r4
 800968c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009690:	f002 bf9a 	b.w	800c5c8 <_fflush_r>
 8009694:	bd10      	pop	{r4, pc}
 8009696:	bf00      	nop
 8009698:	20001fbc 	.word	0x20001fbc
 800969c:	20002024 	.word	0x20002024
 80096a0:	2000208c 	.word	0x2000208c

080096a4 <global_stdio_init.part.0>:
 80096a4:	b510      	push	{r4, lr}
 80096a6:	4b0b      	ldr	r3, [pc, #44]	@ (80096d4 <global_stdio_init.part.0+0x30>)
 80096a8:	4c0b      	ldr	r4, [pc, #44]	@ (80096d8 <global_stdio_init.part.0+0x34>)
 80096aa:	4a0c      	ldr	r2, [pc, #48]	@ (80096dc <global_stdio_init.part.0+0x38>)
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	4620      	mov	r0, r4
 80096b0:	2200      	movs	r2, #0
 80096b2:	2104      	movs	r1, #4
 80096b4:	f7ff ff94 	bl	80095e0 <std>
 80096b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80096bc:	2201      	movs	r2, #1
 80096be:	2109      	movs	r1, #9
 80096c0:	f7ff ff8e 	bl	80095e0 <std>
 80096c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80096c8:	2202      	movs	r2, #2
 80096ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ce:	2112      	movs	r1, #18
 80096d0:	f7ff bf86 	b.w	80095e0 <std>
 80096d4:	200020f4 	.word	0x200020f4
 80096d8:	20001fbc 	.word	0x20001fbc
 80096dc:	0800964d 	.word	0x0800964d

080096e0 <__sfp_lock_acquire>:
 80096e0:	4801      	ldr	r0, [pc, #4]	@ (80096e8 <__sfp_lock_acquire+0x8>)
 80096e2:	f000 b9b6 	b.w	8009a52 <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	200020fd 	.word	0x200020fd

080096ec <__sfp_lock_release>:
 80096ec:	4801      	ldr	r0, [pc, #4]	@ (80096f4 <__sfp_lock_release+0x8>)
 80096ee:	f000 b9b1 	b.w	8009a54 <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	200020fd 	.word	0x200020fd

080096f8 <__sinit>:
 80096f8:	b510      	push	{r4, lr}
 80096fa:	4604      	mov	r4, r0
 80096fc:	f7ff fff0 	bl	80096e0 <__sfp_lock_acquire>
 8009700:	6a23      	ldr	r3, [r4, #32]
 8009702:	b11b      	cbz	r3, 800970c <__sinit+0x14>
 8009704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009708:	f7ff bff0 	b.w	80096ec <__sfp_lock_release>
 800970c:	4b04      	ldr	r3, [pc, #16]	@ (8009720 <__sinit+0x28>)
 800970e:	6223      	str	r3, [r4, #32]
 8009710:	4b04      	ldr	r3, [pc, #16]	@ (8009724 <__sinit+0x2c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1f5      	bne.n	8009704 <__sinit+0xc>
 8009718:	f7ff ffc4 	bl	80096a4 <global_stdio_init.part.0>
 800971c:	e7f2      	b.n	8009704 <__sinit+0xc>
 800971e:	bf00      	nop
 8009720:	08009665 	.word	0x08009665
 8009724:	200020f4 	.word	0x200020f4

08009728 <_fwalk_sglue>:
 8009728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800972c:	4607      	mov	r7, r0
 800972e:	4688      	mov	r8, r1
 8009730:	4614      	mov	r4, r2
 8009732:	2600      	movs	r6, #0
 8009734:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009738:	f1b9 0901 	subs.w	r9, r9, #1
 800973c:	d505      	bpl.n	800974a <_fwalk_sglue+0x22>
 800973e:	6824      	ldr	r4, [r4, #0]
 8009740:	2c00      	cmp	r4, #0
 8009742:	d1f7      	bne.n	8009734 <_fwalk_sglue+0xc>
 8009744:	4630      	mov	r0, r6
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	89ab      	ldrh	r3, [r5, #12]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d907      	bls.n	8009760 <_fwalk_sglue+0x38>
 8009750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009754:	3301      	adds	r3, #1
 8009756:	d003      	beq.n	8009760 <_fwalk_sglue+0x38>
 8009758:	4629      	mov	r1, r5
 800975a:	4638      	mov	r0, r7
 800975c:	47c0      	blx	r8
 800975e:	4306      	orrs	r6, r0
 8009760:	3568      	adds	r5, #104	@ 0x68
 8009762:	e7e9      	b.n	8009738 <_fwalk_sglue+0x10>

08009764 <siprintf>:
 8009764:	b40e      	push	{r1, r2, r3}
 8009766:	b510      	push	{r4, lr}
 8009768:	b09d      	sub	sp, #116	@ 0x74
 800976a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800976c:	9002      	str	r0, [sp, #8]
 800976e:	9006      	str	r0, [sp, #24]
 8009770:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009774:	480a      	ldr	r0, [pc, #40]	@ (80097a0 <siprintf+0x3c>)
 8009776:	9107      	str	r1, [sp, #28]
 8009778:	9104      	str	r1, [sp, #16]
 800977a:	490a      	ldr	r1, [pc, #40]	@ (80097a4 <siprintf+0x40>)
 800977c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009780:	9105      	str	r1, [sp, #20]
 8009782:	2400      	movs	r4, #0
 8009784:	a902      	add	r1, sp, #8
 8009786:	6800      	ldr	r0, [r0, #0]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800978c:	f002 fc5a 	bl	800c044 <_svfiprintf_r>
 8009790:	9b02      	ldr	r3, [sp, #8]
 8009792:	701c      	strb	r4, [r3, #0]
 8009794:	b01d      	add	sp, #116	@ 0x74
 8009796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800979a:	b003      	add	sp, #12
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000114 	.word	0x20000114
 80097a4:	ffff0208 	.word	0xffff0208

080097a8 <__sread>:
 80097a8:	b510      	push	{r4, lr}
 80097aa:	460c      	mov	r4, r1
 80097ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b0:	f000 f900 	bl	80099b4 <_read_r>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	bfab      	itete	ge
 80097b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80097ba:	89a3      	ldrhlt	r3, [r4, #12]
 80097bc:	181b      	addge	r3, r3, r0
 80097be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80097c2:	bfac      	ite	ge
 80097c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80097c6:	81a3      	strhlt	r3, [r4, #12]
 80097c8:	bd10      	pop	{r4, pc}

080097ca <__swrite>:
 80097ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	461f      	mov	r7, r3
 80097d0:	898b      	ldrh	r3, [r1, #12]
 80097d2:	05db      	lsls	r3, r3, #23
 80097d4:	4605      	mov	r5, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	4616      	mov	r6, r2
 80097da:	d505      	bpl.n	80097e8 <__swrite+0x1e>
 80097dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e0:	2302      	movs	r3, #2
 80097e2:	2200      	movs	r2, #0
 80097e4:	f000 f8d4 	bl	8009990 <_lseek_r>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	4632      	mov	r2, r6
 80097f6:	463b      	mov	r3, r7
 80097f8:	4628      	mov	r0, r5
 80097fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097fe:	f000 b8eb 	b.w	80099d8 <_write_r>

08009802 <__sseek>:
 8009802:	b510      	push	{r4, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800980a:	f000 f8c1 	bl	8009990 <_lseek_r>
 800980e:	1c43      	adds	r3, r0, #1
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	bf15      	itete	ne
 8009814:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009816:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800981a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800981e:	81a3      	strheq	r3, [r4, #12]
 8009820:	bf18      	it	ne
 8009822:	81a3      	strhne	r3, [r4, #12]
 8009824:	bd10      	pop	{r4, pc}

08009826 <__sclose>:
 8009826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800982a:	f000 b8a1 	b.w	8009970 <_close_r>

0800982e <__swbuf_r>:
 800982e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009830:	460e      	mov	r6, r1
 8009832:	4614      	mov	r4, r2
 8009834:	4605      	mov	r5, r0
 8009836:	b118      	cbz	r0, 8009840 <__swbuf_r+0x12>
 8009838:	6a03      	ldr	r3, [r0, #32]
 800983a:	b90b      	cbnz	r3, 8009840 <__swbuf_r+0x12>
 800983c:	f7ff ff5c 	bl	80096f8 <__sinit>
 8009840:	69a3      	ldr	r3, [r4, #24]
 8009842:	60a3      	str	r3, [r4, #8]
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	071a      	lsls	r2, r3, #28
 8009848:	d501      	bpl.n	800984e <__swbuf_r+0x20>
 800984a:	6923      	ldr	r3, [r4, #16]
 800984c:	b943      	cbnz	r3, 8009860 <__swbuf_r+0x32>
 800984e:	4621      	mov	r1, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f000 f82b 	bl	80098ac <__swsetup_r>
 8009856:	b118      	cbz	r0, 8009860 <__swbuf_r+0x32>
 8009858:	f04f 37ff 	mov.w	r7, #4294967295
 800985c:	4638      	mov	r0, r7
 800985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009860:	6823      	ldr	r3, [r4, #0]
 8009862:	6922      	ldr	r2, [r4, #16]
 8009864:	1a98      	subs	r0, r3, r2
 8009866:	6963      	ldr	r3, [r4, #20]
 8009868:	b2f6      	uxtb	r6, r6
 800986a:	4283      	cmp	r3, r0
 800986c:	4637      	mov	r7, r6
 800986e:	dc05      	bgt.n	800987c <__swbuf_r+0x4e>
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	f002 fea8 	bl	800c5c8 <_fflush_r>
 8009878:	2800      	cmp	r0, #0
 800987a:	d1ed      	bne.n	8009858 <__swbuf_r+0x2a>
 800987c:	68a3      	ldr	r3, [r4, #8]
 800987e:	3b01      	subs	r3, #1
 8009880:	60a3      	str	r3, [r4, #8]
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	701e      	strb	r6, [r3, #0]
 800988a:	6962      	ldr	r2, [r4, #20]
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	429a      	cmp	r2, r3
 8009890:	d004      	beq.n	800989c <__swbuf_r+0x6e>
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	07db      	lsls	r3, r3, #31
 8009896:	d5e1      	bpl.n	800985c <__swbuf_r+0x2e>
 8009898:	2e0a      	cmp	r6, #10
 800989a:	d1df      	bne.n	800985c <__swbuf_r+0x2e>
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	f002 fe92 	bl	800c5c8 <_fflush_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d0d9      	beq.n	800985c <__swbuf_r+0x2e>
 80098a8:	e7d6      	b.n	8009858 <__swbuf_r+0x2a>
	...

080098ac <__swsetup_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4b29      	ldr	r3, [pc, #164]	@ (8009954 <__swsetup_r+0xa8>)
 80098b0:	4605      	mov	r5, r0
 80098b2:	6818      	ldr	r0, [r3, #0]
 80098b4:	460c      	mov	r4, r1
 80098b6:	b118      	cbz	r0, 80098c0 <__swsetup_r+0x14>
 80098b8:	6a03      	ldr	r3, [r0, #32]
 80098ba:	b90b      	cbnz	r3, 80098c0 <__swsetup_r+0x14>
 80098bc:	f7ff ff1c 	bl	80096f8 <__sinit>
 80098c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098c4:	0719      	lsls	r1, r3, #28
 80098c6:	d422      	bmi.n	800990e <__swsetup_r+0x62>
 80098c8:	06da      	lsls	r2, r3, #27
 80098ca:	d407      	bmi.n	80098dc <__swsetup_r+0x30>
 80098cc:	2209      	movs	r2, #9
 80098ce:	602a      	str	r2, [r5, #0]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	e033      	b.n	8009944 <__swsetup_r+0x98>
 80098dc:	0758      	lsls	r0, r3, #29
 80098de:	d512      	bpl.n	8009906 <__swsetup_r+0x5a>
 80098e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098e2:	b141      	cbz	r1, 80098f6 <__swsetup_r+0x4a>
 80098e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098e8:	4299      	cmp	r1, r3
 80098ea:	d002      	beq.n	80098f2 <__swsetup_r+0x46>
 80098ec:	4628      	mov	r0, r5
 80098ee:	f000 ff1f 	bl	800a730 <_free_r>
 80098f2:	2300      	movs	r3, #0
 80098f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098fc:	81a3      	strh	r3, [r4, #12]
 80098fe:	2300      	movs	r3, #0
 8009900:	6063      	str	r3, [r4, #4]
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	f043 0308 	orr.w	r3, r3, #8
 800990c:	81a3      	strh	r3, [r4, #12]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	b94b      	cbnz	r3, 8009926 <__swsetup_r+0x7a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800991c:	d003      	beq.n	8009926 <__swsetup_r+0x7a>
 800991e:	4621      	mov	r1, r4
 8009920:	4628      	mov	r0, r5
 8009922:	f002 fe9f 	bl	800c664 <__smakebuf_r>
 8009926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800992a:	f013 0201 	ands.w	r2, r3, #1
 800992e:	d00a      	beq.n	8009946 <__swsetup_r+0x9a>
 8009930:	2200      	movs	r2, #0
 8009932:	60a2      	str	r2, [r4, #8]
 8009934:	6962      	ldr	r2, [r4, #20]
 8009936:	4252      	negs	r2, r2
 8009938:	61a2      	str	r2, [r4, #24]
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	b942      	cbnz	r2, 8009950 <__swsetup_r+0xa4>
 800993e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009942:	d1c5      	bne.n	80098d0 <__swsetup_r+0x24>
 8009944:	bd38      	pop	{r3, r4, r5, pc}
 8009946:	0799      	lsls	r1, r3, #30
 8009948:	bf58      	it	pl
 800994a:	6962      	ldrpl	r2, [r4, #20]
 800994c:	60a2      	str	r2, [r4, #8]
 800994e:	e7f4      	b.n	800993a <__swsetup_r+0x8e>
 8009950:	2000      	movs	r0, #0
 8009952:	e7f7      	b.n	8009944 <__swsetup_r+0x98>
 8009954:	20000114 	.word	0x20000114

08009958 <memset>:
 8009958:	4402      	add	r2, r0
 800995a:	4603      	mov	r3, r0
 800995c:	4293      	cmp	r3, r2
 800995e:	d100      	bne.n	8009962 <memset+0xa>
 8009960:	4770      	bx	lr
 8009962:	f803 1b01 	strb.w	r1, [r3], #1
 8009966:	e7f9      	b.n	800995c <memset+0x4>

08009968 <_localeconv_r>:
 8009968:	4800      	ldr	r0, [pc, #0]	@ (800996c <_localeconv_r+0x4>)
 800996a:	4770      	bx	lr
 800996c:	20000254 	.word	0x20000254

08009970 <_close_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	@ (800998c <_close_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f7 fe94 	bl	80016a8 <_close>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_close_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_close_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	200020f8 	.word	0x200020f8

08009990 <_lseek_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	@ (80099b0 <_lseek_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f7 fea9 	bl	80016f6 <_lseek>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_lseek_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_lseek_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200020f8 	.word	0x200020f8

080099b4 <_read_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d07      	ldr	r5, [pc, #28]	@ (80099d4 <_read_r+0x20>)
 80099b8:	4604      	mov	r4, r0
 80099ba:	4608      	mov	r0, r1
 80099bc:	4611      	mov	r1, r2
 80099be:	2200      	movs	r2, #0
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f7f7 fe37 	bl	8001636 <_read>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	d102      	bne.n	80099d2 <_read_r+0x1e>
 80099cc:	682b      	ldr	r3, [r5, #0]
 80099ce:	b103      	cbz	r3, 80099d2 <_read_r+0x1e>
 80099d0:	6023      	str	r3, [r4, #0]
 80099d2:	bd38      	pop	{r3, r4, r5, pc}
 80099d4:	200020f8 	.word	0x200020f8

080099d8 <_write_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d07      	ldr	r5, [pc, #28]	@ (80099f8 <_write_r+0x20>)
 80099dc:	4604      	mov	r4, r0
 80099de:	4608      	mov	r0, r1
 80099e0:	4611      	mov	r1, r2
 80099e2:	2200      	movs	r2, #0
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f7f7 fe42 	bl	8001670 <_write>
 80099ec:	1c43      	adds	r3, r0, #1
 80099ee:	d102      	bne.n	80099f6 <_write_r+0x1e>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	b103      	cbz	r3, 80099f6 <_write_r+0x1e>
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	bd38      	pop	{r3, r4, r5, pc}
 80099f8:	200020f8 	.word	0x200020f8

080099fc <__errno>:
 80099fc:	4b01      	ldr	r3, [pc, #4]	@ (8009a04 <__errno+0x8>)
 80099fe:	6818      	ldr	r0, [r3, #0]
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20000114 	.word	0x20000114

08009a08 <__libc_init_array>:
 8009a08:	b570      	push	{r4, r5, r6, lr}
 8009a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8009a40 <__libc_init_array+0x38>)
 8009a0c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a44 <__libc_init_array+0x3c>)
 8009a0e:	1b64      	subs	r4, r4, r5
 8009a10:	10a4      	asrs	r4, r4, #2
 8009a12:	2600      	movs	r6, #0
 8009a14:	42a6      	cmp	r6, r4
 8009a16:	d109      	bne.n	8009a2c <__libc_init_array+0x24>
 8009a18:	4d0b      	ldr	r5, [pc, #44]	@ (8009a48 <__libc_init_array+0x40>)
 8009a1a:	4c0c      	ldr	r4, [pc, #48]	@ (8009a4c <__libc_init_array+0x44>)
 8009a1c:	f003 faf0 	bl	800d000 <_init>
 8009a20:	1b64      	subs	r4, r4, r5
 8009a22:	10a4      	asrs	r4, r4, #2
 8009a24:	2600      	movs	r6, #0
 8009a26:	42a6      	cmp	r6, r4
 8009a28:	d105      	bne.n	8009a36 <__libc_init_array+0x2e>
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}
 8009a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a30:	4798      	blx	r3
 8009a32:	3601      	adds	r6, #1
 8009a34:	e7ee      	b.n	8009a14 <__libc_init_array+0xc>
 8009a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a3a:	4798      	blx	r3
 8009a3c:	3601      	adds	r6, #1
 8009a3e:	e7f2      	b.n	8009a26 <__libc_init_array+0x1e>
 8009a40:	0800d49c 	.word	0x0800d49c
 8009a44:	0800d49c 	.word	0x0800d49c
 8009a48:	0800d49c 	.word	0x0800d49c
 8009a4c:	0800d4a0 	.word	0x0800d4a0

08009a50 <__retarget_lock_init_recursive>:
 8009a50:	4770      	bx	lr

08009a52 <__retarget_lock_acquire_recursive>:
 8009a52:	4770      	bx	lr

08009a54 <__retarget_lock_release_recursive>:
 8009a54:	4770      	bx	lr

08009a56 <memcpy>:
 8009a56:	440a      	add	r2, r1
 8009a58:	4291      	cmp	r1, r2
 8009a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a5e:	d100      	bne.n	8009a62 <memcpy+0xc>
 8009a60:	4770      	bx	lr
 8009a62:	b510      	push	{r4, lr}
 8009a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a6c:	4291      	cmp	r1, r2
 8009a6e:	d1f9      	bne.n	8009a64 <memcpy+0xe>
 8009a70:	bd10      	pop	{r4, pc}
	...

08009a74 <nanf>:
 8009a74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a7c <nanf+0x8>
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	7fc00000 	.word	0x7fc00000

08009a80 <quorem>:
 8009a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	6903      	ldr	r3, [r0, #16]
 8009a86:	690c      	ldr	r4, [r1, #16]
 8009a88:	42a3      	cmp	r3, r4
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	db7e      	blt.n	8009b8c <quorem+0x10c>
 8009a8e:	3c01      	subs	r4, #1
 8009a90:	f101 0814 	add.w	r8, r1, #20
 8009a94:	00a3      	lsls	r3, r4, #2
 8009a96:	f100 0514 	add.w	r5, r0, #20
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	429a      	cmp	r2, r3
 8009aae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ab2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009ab6:	d32e      	bcc.n	8009b16 <quorem+0x96>
 8009ab8:	f04f 0a00 	mov.w	sl, #0
 8009abc:	46c4      	mov	ip, r8
 8009abe:	46ae      	mov	lr, r5
 8009ac0:	46d3      	mov	fp, sl
 8009ac2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ac6:	b298      	uxth	r0, r3
 8009ac8:	fb06 a000 	mla	r0, r6, r0, sl
 8009acc:	0c02      	lsrs	r2, r0, #16
 8009ace:	0c1b      	lsrs	r3, r3, #16
 8009ad0:	fb06 2303 	mla	r3, r6, r3, r2
 8009ad4:	f8de 2000 	ldr.w	r2, [lr]
 8009ad8:	b280      	uxth	r0, r0
 8009ada:	b292      	uxth	r2, r2
 8009adc:	1a12      	subs	r2, r2, r0
 8009ade:	445a      	add	r2, fp
 8009ae0:	f8de 0000 	ldr.w	r0, [lr]
 8009ae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009aee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009af2:	b292      	uxth	r2, r2
 8009af4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009af8:	45e1      	cmp	r9, ip
 8009afa:	f84e 2b04 	str.w	r2, [lr], #4
 8009afe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009b02:	d2de      	bcs.n	8009ac2 <quorem+0x42>
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	58eb      	ldr	r3, [r5, r3]
 8009b08:	b92b      	cbnz	r3, 8009b16 <quorem+0x96>
 8009b0a:	9b01      	ldr	r3, [sp, #4]
 8009b0c:	3b04      	subs	r3, #4
 8009b0e:	429d      	cmp	r5, r3
 8009b10:	461a      	mov	r2, r3
 8009b12:	d32f      	bcc.n	8009b74 <quorem+0xf4>
 8009b14:	613c      	str	r4, [r7, #16]
 8009b16:	4638      	mov	r0, r7
 8009b18:	f001 f9c6 	bl	800aea8 <__mcmp>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	db25      	blt.n	8009b6c <quorem+0xec>
 8009b20:	4629      	mov	r1, r5
 8009b22:	2000      	movs	r0, #0
 8009b24:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b28:	f8d1 c000 	ldr.w	ip, [r1]
 8009b2c:	fa1f fe82 	uxth.w	lr, r2
 8009b30:	fa1f f38c 	uxth.w	r3, ip
 8009b34:	eba3 030e 	sub.w	r3, r3, lr
 8009b38:	4403      	add	r3, r0
 8009b3a:	0c12      	lsrs	r2, r2, #16
 8009b3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b4a:	45c1      	cmp	r9, r8
 8009b4c:	f841 3b04 	str.w	r3, [r1], #4
 8009b50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b54:	d2e6      	bcs.n	8009b24 <quorem+0xa4>
 8009b56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b5e:	b922      	cbnz	r2, 8009b6a <quorem+0xea>
 8009b60:	3b04      	subs	r3, #4
 8009b62:	429d      	cmp	r5, r3
 8009b64:	461a      	mov	r2, r3
 8009b66:	d30b      	bcc.n	8009b80 <quorem+0x100>
 8009b68:	613c      	str	r4, [r7, #16]
 8009b6a:	3601      	adds	r6, #1
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	b003      	add	sp, #12
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	6812      	ldr	r2, [r2, #0]
 8009b76:	3b04      	subs	r3, #4
 8009b78:	2a00      	cmp	r2, #0
 8009b7a:	d1cb      	bne.n	8009b14 <quorem+0x94>
 8009b7c:	3c01      	subs	r4, #1
 8009b7e:	e7c6      	b.n	8009b0e <quorem+0x8e>
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	3b04      	subs	r3, #4
 8009b84:	2a00      	cmp	r2, #0
 8009b86:	d1ef      	bne.n	8009b68 <quorem+0xe8>
 8009b88:	3c01      	subs	r4, #1
 8009b8a:	e7ea      	b.n	8009b62 <quorem+0xe2>
 8009b8c:	2000      	movs	r0, #0
 8009b8e:	e7ee      	b.n	8009b6e <quorem+0xee>

08009b90 <_dtoa_r>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	69c7      	ldr	r7, [r0, #28]
 8009b96:	b097      	sub	sp, #92	@ 0x5c
 8009b98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009b9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ba0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009ba2:	9107      	str	r1, [sp, #28]
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ba8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009baa:	b97f      	cbnz	r7, 8009bcc <_dtoa_r+0x3c>
 8009bac:	2010      	movs	r0, #16
 8009bae:	f000 fe09 	bl	800a7c4 <malloc>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8009bb8:	b920      	cbnz	r0, 8009bc4 <_dtoa_r+0x34>
 8009bba:	4ba9      	ldr	r3, [pc, #676]	@ (8009e60 <_dtoa_r+0x2d0>)
 8009bbc:	21ef      	movs	r1, #239	@ 0xef
 8009bbe:	48a9      	ldr	r0, [pc, #676]	@ (8009e64 <_dtoa_r+0x2d4>)
 8009bc0:	f002 fdf2 	bl	800c7a8 <__assert_func>
 8009bc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009bc8:	6007      	str	r7, [r0, #0]
 8009bca:	60c7      	str	r7, [r0, #12]
 8009bcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009bd0:	6819      	ldr	r1, [r3, #0]
 8009bd2:	b159      	cbz	r1, 8009bec <_dtoa_r+0x5c>
 8009bd4:	685a      	ldr	r2, [r3, #4]
 8009bd6:	604a      	str	r2, [r1, #4]
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4093      	lsls	r3, r2
 8009bdc:	608b      	str	r3, [r1, #8]
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fee6 	bl	800a9b0 <_Bfree>
 8009be4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	1e2b      	subs	r3, r5, #0
 8009bee:	bfb9      	ittee	lt
 8009bf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bf4:	9305      	strlt	r3, [sp, #20]
 8009bf6:	2300      	movge	r3, #0
 8009bf8:	6033      	strge	r3, [r6, #0]
 8009bfa:	9f05      	ldr	r7, [sp, #20]
 8009bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8009e68 <_dtoa_r+0x2d8>)
 8009bfe:	bfbc      	itt	lt
 8009c00:	2201      	movlt	r2, #1
 8009c02:	6032      	strlt	r2, [r6, #0]
 8009c04:	43bb      	bics	r3, r7
 8009c06:	d112      	bne.n	8009c2e <_dtoa_r+0x9e>
 8009c08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c14:	4323      	orrs	r3, r4
 8009c16:	f000 855a 	beq.w	800a6ce <_dtoa_r+0xb3e>
 8009c1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009e7c <_dtoa_r+0x2ec>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 855c 	beq.w	800a6de <_dtoa_r+0xb4e>
 8009c26:	f10a 0303 	add.w	r3, sl, #3
 8009c2a:	f000 bd56 	b.w	800a6da <_dtoa_r+0xb4a>
 8009c2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009c32:	2200      	movs	r2, #0
 8009c34:	ec51 0b17 	vmov	r0, r1, d7
 8009c38:	2300      	movs	r3, #0
 8009c3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009c3e:	f7f6 ff43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c42:	4680      	mov	r8, r0
 8009c44:	b158      	cbz	r0, 8009c5e <_dtoa_r+0xce>
 8009c46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009c48:	2301      	movs	r3, #1
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c4e:	b113      	cbz	r3, 8009c56 <_dtoa_r+0xc6>
 8009c50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009c52:	4b86      	ldr	r3, [pc, #536]	@ (8009e6c <_dtoa_r+0x2dc>)
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009e80 <_dtoa_r+0x2f0>
 8009c5a:	f000 bd40 	b.w	800a6de <_dtoa_r+0xb4e>
 8009c5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009c62:	aa14      	add	r2, sp, #80	@ 0x50
 8009c64:	a915      	add	r1, sp, #84	@ 0x54
 8009c66:	4648      	mov	r0, r9
 8009c68:	f001 fa3e 	bl	800b0e8 <__d2b>
 8009c6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c70:	9002      	str	r0, [sp, #8]
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d078      	beq.n	8009d68 <_dtoa_r+0x1d8>
 8009c76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009c7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c90:	4619      	mov	r1, r3
 8009c92:	2200      	movs	r2, #0
 8009c94:	4b76      	ldr	r3, [pc, #472]	@ (8009e70 <_dtoa_r+0x2e0>)
 8009c96:	f7f6 faf7 	bl	8000288 <__aeabi_dsub>
 8009c9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009e48 <_dtoa_r+0x2b8>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fcaa 	bl	80005f8 <__aeabi_dmul>
 8009ca4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009e50 <_dtoa_r+0x2c0>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 faef 	bl	800028c <__adddf3>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	f7f6 fc36 	bl	8000524 <__aeabi_i2d>
 8009cb8:	a367      	add	r3, pc, #412	@ (adr r3, 8009e58 <_dtoa_r+0x2c8>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f7f6 fc9b 	bl	80005f8 <__aeabi_dmul>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	f7f6 fadf 	bl	800028c <__adddf3>
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	f7f6 ff41 	bl	8000b58 <__aeabi_d2iz>
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	4607      	mov	r7, r0
 8009cda:	2300      	movs	r3, #0
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fefc 	bl	8000adc <__aeabi_dcmplt>
 8009ce4:	b140      	cbz	r0, 8009cf8 <_dtoa_r+0x168>
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7f6 fc1c 	bl	8000524 <__aeabi_i2d>
 8009cec:	4622      	mov	r2, r4
 8009cee:	462b      	mov	r3, r5
 8009cf0:	f7f6 feea 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cf4:	b900      	cbnz	r0, 8009cf8 <_dtoa_r+0x168>
 8009cf6:	3f01      	subs	r7, #1
 8009cf8:	2f16      	cmp	r7, #22
 8009cfa:	d852      	bhi.n	8009da2 <_dtoa_r+0x212>
 8009cfc:	4b5d      	ldr	r3, [pc, #372]	@ (8009e74 <_dtoa_r+0x2e4>)
 8009cfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009d0a:	f7f6 fee7 	bl	8000adc <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	d049      	beq.n	8009da6 <_dtoa_r+0x216>
 8009d12:	3f01      	subs	r7, #1
 8009d14:	2300      	movs	r3, #0
 8009d16:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d1a:	1b9b      	subs	r3, r3, r6
 8009d1c:	1e5a      	subs	r2, r3, #1
 8009d1e:	bf45      	ittet	mi
 8009d20:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d24:	9300      	strmi	r3, [sp, #0]
 8009d26:	2300      	movpl	r3, #0
 8009d28:	2300      	movmi	r3, #0
 8009d2a:	9206      	str	r2, [sp, #24]
 8009d2c:	bf54      	ite	pl
 8009d2e:	9300      	strpl	r3, [sp, #0]
 8009d30:	9306      	strmi	r3, [sp, #24]
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	db39      	blt.n	8009daa <_dtoa_r+0x21a>
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	970d      	str	r7, [sp, #52]	@ 0x34
 8009d3a:	443b      	add	r3, r7
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9308      	str	r3, [sp, #32]
 8009d42:	9b07      	ldr	r3, [sp, #28]
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d863      	bhi.n	8009e10 <_dtoa_r+0x280>
 8009d48:	2b05      	cmp	r3, #5
 8009d4a:	bfc4      	itt	gt
 8009d4c:	3b04      	subgt	r3, #4
 8009d4e:	9307      	strgt	r3, [sp, #28]
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	f1a3 0302 	sub.w	r3, r3, #2
 8009d56:	bfcc      	ite	gt
 8009d58:	2400      	movgt	r4, #0
 8009d5a:	2401      	movle	r4, #1
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d863      	bhi.n	8009e28 <_dtoa_r+0x298>
 8009d60:	e8df f003 	tbb	[pc, r3]
 8009d64:	2b375452 	.word	0x2b375452
 8009d68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009d6c:	441e      	add	r6, r3
 8009d6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	bfc1      	itttt	gt
 8009d76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d7a:	409f      	lslgt	r7, r3
 8009d7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d84:	bfd6      	itet	le
 8009d86:	f1c3 0320 	rsble	r3, r3, #32
 8009d8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d8e:	fa04 f003 	lslle.w	r0, r4, r3
 8009d92:	f7f6 fbb7 	bl	8000504 <__aeabi_ui2d>
 8009d96:	2201      	movs	r2, #1
 8009d98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d9c:	3e01      	subs	r6, #1
 8009d9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009da0:	e776      	b.n	8009c90 <_dtoa_r+0x100>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e7b7      	b.n	8009d16 <_dtoa_r+0x186>
 8009da6:	9010      	str	r0, [sp, #64]	@ 0x40
 8009da8:	e7b6      	b.n	8009d18 <_dtoa_r+0x188>
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	1bdb      	subs	r3, r3, r7
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	427b      	negs	r3, r7
 8009db2:	9308      	str	r3, [sp, #32]
 8009db4:	2300      	movs	r3, #0
 8009db6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009db8:	e7c3      	b.n	8009d42 <_dtoa_r+0x1b2>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dc0:	eb07 0b03 	add.w	fp, r7, r3
 8009dc4:	f10b 0301 	add.w	r3, fp, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	9303      	str	r3, [sp, #12]
 8009dcc:	bfb8      	it	lt
 8009dce:	2301      	movlt	r3, #1
 8009dd0:	e006      	b.n	8009de0 <_dtoa_r+0x250>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	dd28      	ble.n	8009e2e <_dtoa_r+0x29e>
 8009ddc:	469b      	mov	fp, r3
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009de4:	2100      	movs	r1, #0
 8009de6:	2204      	movs	r2, #4
 8009de8:	f102 0514 	add.w	r5, r2, #20
 8009dec:	429d      	cmp	r5, r3
 8009dee:	d926      	bls.n	8009e3e <_dtoa_r+0x2ae>
 8009df0:	6041      	str	r1, [r0, #4]
 8009df2:	4648      	mov	r0, r9
 8009df4:	f000 fd9c 	bl	800a930 <_Balloc>
 8009df8:	4682      	mov	sl, r0
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d142      	bne.n	8009e84 <_dtoa_r+0x2f4>
 8009dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8009e78 <_dtoa_r+0x2e8>)
 8009e00:	4602      	mov	r2, r0
 8009e02:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e06:	e6da      	b.n	8009bbe <_dtoa_r+0x2e>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e7e3      	b.n	8009dd4 <_dtoa_r+0x244>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e7d5      	b.n	8009dbc <_dtoa_r+0x22c>
 8009e10:	2401      	movs	r4, #1
 8009e12:	2300      	movs	r3, #0
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	9409      	str	r4, [sp, #36]	@ 0x24
 8009e18:	f04f 3bff 	mov.w	fp, #4294967295
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e22:	2312      	movs	r3, #18
 8009e24:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e26:	e7db      	b.n	8009de0 <_dtoa_r+0x250>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e2c:	e7f4      	b.n	8009e18 <_dtoa_r+0x288>
 8009e2e:	f04f 0b01 	mov.w	fp, #1
 8009e32:	f8cd b00c 	str.w	fp, [sp, #12]
 8009e36:	465b      	mov	r3, fp
 8009e38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009e3c:	e7d0      	b.n	8009de0 <_dtoa_r+0x250>
 8009e3e:	3101      	adds	r1, #1
 8009e40:	0052      	lsls	r2, r2, #1
 8009e42:	e7d1      	b.n	8009de8 <_dtoa_r+0x258>
 8009e44:	f3af 8000 	nop.w
 8009e48:	636f4361 	.word	0x636f4361
 8009e4c:	3fd287a7 	.word	0x3fd287a7
 8009e50:	8b60c8b3 	.word	0x8b60c8b3
 8009e54:	3fc68a28 	.word	0x3fc68a28
 8009e58:	509f79fb 	.word	0x509f79fb
 8009e5c:	3fd34413 	.word	0x3fd34413
 8009e60:	0800d0ae 	.word	0x0800d0ae
 8009e64:	0800d0c5 	.word	0x0800d0c5
 8009e68:	7ff00000 	.word	0x7ff00000
 8009e6c:	0800d079 	.word	0x0800d079
 8009e70:	3ff80000 	.word	0x3ff80000
 8009e74:	0800d278 	.word	0x0800d278
 8009e78:	0800d11d 	.word	0x0800d11d
 8009e7c:	0800d0aa 	.word	0x0800d0aa
 8009e80:	0800d078 	.word	0x0800d078
 8009e84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e88:	6018      	str	r0, [r3, #0]
 8009e8a:	9b03      	ldr	r3, [sp, #12]
 8009e8c:	2b0e      	cmp	r3, #14
 8009e8e:	f200 80a1 	bhi.w	8009fd4 <_dtoa_r+0x444>
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	f000 809e 	beq.w	8009fd4 <_dtoa_r+0x444>
 8009e98:	2f00      	cmp	r7, #0
 8009e9a:	dd33      	ble.n	8009f04 <_dtoa_r+0x374>
 8009e9c:	4b9c      	ldr	r3, [pc, #624]	@ (800a110 <_dtoa_r+0x580>)
 8009e9e:	f007 020f 	and.w	r2, r7, #15
 8009ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ea6:	ed93 7b00 	vldr	d7, [r3]
 8009eaa:	05f8      	lsls	r0, r7, #23
 8009eac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009eb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009eb4:	d516      	bpl.n	8009ee4 <_dtoa_r+0x354>
 8009eb6:	4b97      	ldr	r3, [pc, #604]	@ (800a114 <_dtoa_r+0x584>)
 8009eb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009ebc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ec0:	f7f6 fcc4 	bl	800084c <__aeabi_ddiv>
 8009ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ec8:	f004 040f 	and.w	r4, r4, #15
 8009ecc:	2603      	movs	r6, #3
 8009ece:	4d91      	ldr	r5, [pc, #580]	@ (800a114 <_dtoa_r+0x584>)
 8009ed0:	b954      	cbnz	r4, 8009ee8 <_dtoa_r+0x358>
 8009ed2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eda:	f7f6 fcb7 	bl	800084c <__aeabi_ddiv>
 8009ede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee2:	e028      	b.n	8009f36 <_dtoa_r+0x3a6>
 8009ee4:	2602      	movs	r6, #2
 8009ee6:	e7f2      	b.n	8009ece <_dtoa_r+0x33e>
 8009ee8:	07e1      	lsls	r1, r4, #31
 8009eea:	d508      	bpl.n	8009efe <_dtoa_r+0x36e>
 8009eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009ef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009efc:	3601      	adds	r6, #1
 8009efe:	1064      	asrs	r4, r4, #1
 8009f00:	3508      	adds	r5, #8
 8009f02:	e7e5      	b.n	8009ed0 <_dtoa_r+0x340>
 8009f04:	f000 80af 	beq.w	800a066 <_dtoa_r+0x4d6>
 8009f08:	427c      	negs	r4, r7
 8009f0a:	4b81      	ldr	r3, [pc, #516]	@ (800a110 <_dtoa_r+0x580>)
 8009f0c:	4d81      	ldr	r5, [pc, #516]	@ (800a114 <_dtoa_r+0x584>)
 8009f0e:	f004 020f 	and.w	r2, r4, #15
 8009f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f1e:	f7f6 fb6b 	bl	80005f8 <__aeabi_dmul>
 8009f22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f26:	1124      	asrs	r4, r4, #4
 8009f28:	2300      	movs	r3, #0
 8009f2a:	2602      	movs	r6, #2
 8009f2c:	2c00      	cmp	r4, #0
 8009f2e:	f040 808f 	bne.w	800a050 <_dtoa_r+0x4c0>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1d3      	bne.n	8009ede <_dtoa_r+0x34e>
 8009f36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 8094 	beq.w	800a06a <_dtoa_r+0x4da>
 8009f42:	4b75      	ldr	r3, [pc, #468]	@ (800a118 <_dtoa_r+0x588>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 fdc7 	bl	8000adc <__aeabi_dcmplt>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	f000 808b 	beq.w	800a06a <_dtoa_r+0x4da>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 8087 	beq.w	800a06a <_dtoa_r+0x4da>
 8009f5c:	f1bb 0f00 	cmp.w	fp, #0
 8009f60:	dd34      	ble.n	8009fcc <_dtoa_r+0x43c>
 8009f62:	4620      	mov	r0, r4
 8009f64:	4b6d      	ldr	r3, [pc, #436]	@ (800a11c <_dtoa_r+0x58c>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 fb45 	bl	80005f8 <__aeabi_dmul>
 8009f6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009f72:	f107 38ff 	add.w	r8, r7, #4294967295
 8009f76:	3601      	adds	r6, #1
 8009f78:	465c      	mov	r4, fp
 8009f7a:	4630      	mov	r0, r6
 8009f7c:	f7f6 fad2 	bl	8000524 <__aeabi_i2d>
 8009f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f84:	f7f6 fb38 	bl	80005f8 <__aeabi_dmul>
 8009f88:	4b65      	ldr	r3, [pc, #404]	@ (800a120 <_dtoa_r+0x590>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f7f6 f97e 	bl	800028c <__adddf3>
 8009f90:	4605      	mov	r5, r0
 8009f92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	d16a      	bne.n	800a070 <_dtoa_r+0x4e0>
 8009f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f9e:	4b61      	ldr	r3, [pc, #388]	@ (800a124 <_dtoa_r+0x594>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7f6 f971 	bl	8000288 <__aeabi_dsub>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	460b      	mov	r3, r1
 8009faa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4633      	mov	r3, r6
 8009fb2:	f7f6 fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f040 8298 	bne.w	800a4ec <_dtoa_r+0x95c>
 8009fbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fc6:	f7f6 fd89 	bl	8000adc <__aeabi_dcmplt>
 8009fca:	bb38      	cbnz	r0, 800a01c <_dtoa_r+0x48c>
 8009fcc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009fd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009fd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f2c0 8157 	blt.w	800a28a <_dtoa_r+0x6fa>
 8009fdc:	2f0e      	cmp	r7, #14
 8009fde:	f300 8154 	bgt.w	800a28a <_dtoa_r+0x6fa>
 8009fe2:	4b4b      	ldr	r3, [pc, #300]	@ (800a110 <_dtoa_r+0x580>)
 8009fe4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fe8:	ed93 7b00 	vldr	d7, [r3]
 8009fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	ed8d 7b00 	vstr	d7, [sp]
 8009ff4:	f280 80e5 	bge.w	800a1c2 <_dtoa_r+0x632>
 8009ff8:	9b03      	ldr	r3, [sp, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f300 80e1 	bgt.w	800a1c2 <_dtoa_r+0x632>
 800a000:	d10c      	bne.n	800a01c <_dtoa_r+0x48c>
 800a002:	4b48      	ldr	r3, [pc, #288]	@ (800a124 <_dtoa_r+0x594>)
 800a004:	2200      	movs	r2, #0
 800a006:	ec51 0b17 	vmov	r0, r1, d7
 800a00a:	f7f6 faf5 	bl	80005f8 <__aeabi_dmul>
 800a00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a012:	f7f6 fd77 	bl	8000b04 <__aeabi_dcmpge>
 800a016:	2800      	cmp	r0, #0
 800a018:	f000 8266 	beq.w	800a4e8 <_dtoa_r+0x958>
 800a01c:	2400      	movs	r4, #0
 800a01e:	4625      	mov	r5, r4
 800a020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a022:	4656      	mov	r6, sl
 800a024:	ea6f 0803 	mvn.w	r8, r3
 800a028:	2700      	movs	r7, #0
 800a02a:	4621      	mov	r1, r4
 800a02c:	4648      	mov	r0, r9
 800a02e:	f000 fcbf 	bl	800a9b0 <_Bfree>
 800a032:	2d00      	cmp	r5, #0
 800a034:	f000 80bd 	beq.w	800a1b2 <_dtoa_r+0x622>
 800a038:	b12f      	cbz	r7, 800a046 <_dtoa_r+0x4b6>
 800a03a:	42af      	cmp	r7, r5
 800a03c:	d003      	beq.n	800a046 <_dtoa_r+0x4b6>
 800a03e:	4639      	mov	r1, r7
 800a040:	4648      	mov	r0, r9
 800a042:	f000 fcb5 	bl	800a9b0 <_Bfree>
 800a046:	4629      	mov	r1, r5
 800a048:	4648      	mov	r0, r9
 800a04a:	f000 fcb1 	bl	800a9b0 <_Bfree>
 800a04e:	e0b0      	b.n	800a1b2 <_dtoa_r+0x622>
 800a050:	07e2      	lsls	r2, r4, #31
 800a052:	d505      	bpl.n	800a060 <_dtoa_r+0x4d0>
 800a054:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a058:	f7f6 face 	bl	80005f8 <__aeabi_dmul>
 800a05c:	3601      	adds	r6, #1
 800a05e:	2301      	movs	r3, #1
 800a060:	1064      	asrs	r4, r4, #1
 800a062:	3508      	adds	r5, #8
 800a064:	e762      	b.n	8009f2c <_dtoa_r+0x39c>
 800a066:	2602      	movs	r6, #2
 800a068:	e765      	b.n	8009f36 <_dtoa_r+0x3a6>
 800a06a:	9c03      	ldr	r4, [sp, #12]
 800a06c:	46b8      	mov	r8, r7
 800a06e:	e784      	b.n	8009f7a <_dtoa_r+0x3ea>
 800a070:	4b27      	ldr	r3, [pc, #156]	@ (800a110 <_dtoa_r+0x580>)
 800a072:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a074:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a07c:	4454      	add	r4, sl
 800a07e:	2900      	cmp	r1, #0
 800a080:	d054      	beq.n	800a12c <_dtoa_r+0x59c>
 800a082:	4929      	ldr	r1, [pc, #164]	@ (800a128 <_dtoa_r+0x598>)
 800a084:	2000      	movs	r0, #0
 800a086:	f7f6 fbe1 	bl	800084c <__aeabi_ddiv>
 800a08a:	4633      	mov	r3, r6
 800a08c:	462a      	mov	r2, r5
 800a08e:	f7f6 f8fb 	bl	8000288 <__aeabi_dsub>
 800a092:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a096:	4656      	mov	r6, sl
 800a098:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a09c:	f7f6 fd5c 	bl	8000b58 <__aeabi_d2iz>
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	f7f6 fa3f 	bl	8000524 <__aeabi_i2d>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0ae:	f7f6 f8eb 	bl	8000288 <__aeabi_dsub>
 800a0b2:	3530      	adds	r5, #48	@ 0x30
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a0c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0c4:	f7f6 fd0a 	bl	8000adc <__aeabi_dcmplt>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d172      	bne.n	800a1b2 <_dtoa_r+0x622>
 800a0cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0d0:	4911      	ldr	r1, [pc, #68]	@ (800a118 <_dtoa_r+0x588>)
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f7f6 f8d8 	bl	8000288 <__aeabi_dsub>
 800a0d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0dc:	f7f6 fcfe 	bl	8000adc <__aeabi_dcmplt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f040 80b4 	bne.w	800a24e <_dtoa_r+0x6be>
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	f43f af70 	beq.w	8009fcc <_dtoa_r+0x43c>
 800a0ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <_dtoa_r+0x58c>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f7f6 fa80 	bl	80005f8 <__aeabi_dmul>
 800a0f8:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <_dtoa_r+0x58c>)
 800a0fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a0fe:	2200      	movs	r2, #0
 800a100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a104:	f7f6 fa78 	bl	80005f8 <__aeabi_dmul>
 800a108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a10c:	e7c4      	b.n	800a098 <_dtoa_r+0x508>
 800a10e:	bf00      	nop
 800a110:	0800d278 	.word	0x0800d278
 800a114:	0800d250 	.word	0x0800d250
 800a118:	3ff00000 	.word	0x3ff00000
 800a11c:	40240000 	.word	0x40240000
 800a120:	401c0000 	.word	0x401c0000
 800a124:	40140000 	.word	0x40140000
 800a128:	3fe00000 	.word	0x3fe00000
 800a12c:	4631      	mov	r1, r6
 800a12e:	4628      	mov	r0, r5
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a138:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a13a:	4656      	mov	r6, sl
 800a13c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a140:	f7f6 fd0a 	bl	8000b58 <__aeabi_d2iz>
 800a144:	4605      	mov	r5, r0
 800a146:	f7f6 f9ed 	bl	8000524 <__aeabi_i2d>
 800a14a:	4602      	mov	r2, r0
 800a14c:	460b      	mov	r3, r1
 800a14e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a152:	f7f6 f899 	bl	8000288 <__aeabi_dsub>
 800a156:	3530      	adds	r5, #48	@ 0x30
 800a158:	f806 5b01 	strb.w	r5, [r6], #1
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	42a6      	cmp	r6, r4
 800a162:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a166:	f04f 0200 	mov.w	r2, #0
 800a16a:	d124      	bne.n	800a1b6 <_dtoa_r+0x626>
 800a16c:	4baf      	ldr	r3, [pc, #700]	@ (800a42c <_dtoa_r+0x89c>)
 800a16e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a172:	f7f6 f88b 	bl	800028c <__adddf3>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a17e:	f7f6 fccb 	bl	8000b18 <__aeabi_dcmpgt>
 800a182:	2800      	cmp	r0, #0
 800a184:	d163      	bne.n	800a24e <_dtoa_r+0x6be>
 800a186:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a18a:	49a8      	ldr	r1, [pc, #672]	@ (800a42c <_dtoa_r+0x89c>)
 800a18c:	2000      	movs	r0, #0
 800a18e:	f7f6 f87b 	bl	8000288 <__aeabi_dsub>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a19a:	f7f6 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	f43f af14 	beq.w	8009fcc <_dtoa_r+0x43c>
 800a1a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a1a6:	1e73      	subs	r3, r6, #1
 800a1a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1ae:	2b30      	cmp	r3, #48	@ 0x30
 800a1b0:	d0f8      	beq.n	800a1a4 <_dtoa_r+0x614>
 800a1b2:	4647      	mov	r7, r8
 800a1b4:	e03b      	b.n	800a22e <_dtoa_r+0x69e>
 800a1b6:	4b9e      	ldr	r3, [pc, #632]	@ (800a430 <_dtoa_r+0x8a0>)
 800a1b8:	f7f6 fa1e 	bl	80005f8 <__aeabi_dmul>
 800a1bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1c0:	e7bc      	b.n	800a13c <_dtoa_r+0x5ac>
 800a1c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a1c6:	4656      	mov	r6, sl
 800a1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	f7f6 fb3c 	bl	800084c <__aeabi_ddiv>
 800a1d4:	f7f6 fcc0 	bl	8000b58 <__aeabi_d2iz>
 800a1d8:	4680      	mov	r8, r0
 800a1da:	f7f6 f9a3 	bl	8000524 <__aeabi_i2d>
 800a1de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1e2:	f7f6 fa09 	bl	80005f8 <__aeabi_dmul>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1f2:	f7f6 f849 	bl	8000288 <__aeabi_dsub>
 800a1f6:	f806 4b01 	strb.w	r4, [r6], #1
 800a1fa:	9d03      	ldr	r5, [sp, #12]
 800a1fc:	eba6 040a 	sub.w	r4, r6, sl
 800a200:	42a5      	cmp	r5, r4
 800a202:	4602      	mov	r2, r0
 800a204:	460b      	mov	r3, r1
 800a206:	d133      	bne.n	800a270 <_dtoa_r+0x6e0>
 800a208:	f7f6 f840 	bl	800028c <__adddf3>
 800a20c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	f7f6 fc80 	bl	8000b18 <__aeabi_dcmpgt>
 800a218:	b9c0      	cbnz	r0, 800a24c <_dtoa_r+0x6bc>
 800a21a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a21e:	4620      	mov	r0, r4
 800a220:	4629      	mov	r1, r5
 800a222:	f7f6 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 800a226:	b110      	cbz	r0, 800a22e <_dtoa_r+0x69e>
 800a228:	f018 0f01 	tst.w	r8, #1
 800a22c:	d10e      	bne.n	800a24c <_dtoa_r+0x6bc>
 800a22e:	9902      	ldr	r1, [sp, #8]
 800a230:	4648      	mov	r0, r9
 800a232:	f000 fbbd 	bl	800a9b0 <_Bfree>
 800a236:	2300      	movs	r3, #0
 800a238:	7033      	strb	r3, [r6, #0]
 800a23a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a23c:	3701      	adds	r7, #1
 800a23e:	601f      	str	r7, [r3, #0]
 800a240:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 824b 	beq.w	800a6de <_dtoa_r+0xb4e>
 800a248:	601e      	str	r6, [r3, #0]
 800a24a:	e248      	b.n	800a6de <_dtoa_r+0xb4e>
 800a24c:	46b8      	mov	r8, r7
 800a24e:	4633      	mov	r3, r6
 800a250:	461e      	mov	r6, r3
 800a252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a256:	2a39      	cmp	r2, #57	@ 0x39
 800a258:	d106      	bne.n	800a268 <_dtoa_r+0x6d8>
 800a25a:	459a      	cmp	sl, r3
 800a25c:	d1f8      	bne.n	800a250 <_dtoa_r+0x6c0>
 800a25e:	2230      	movs	r2, #48	@ 0x30
 800a260:	f108 0801 	add.w	r8, r8, #1
 800a264:	f88a 2000 	strb.w	r2, [sl]
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	3201      	adds	r2, #1
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	e7a0      	b.n	800a1b2 <_dtoa_r+0x622>
 800a270:	4b6f      	ldr	r3, [pc, #444]	@ (800a430 <_dtoa_r+0x8a0>)
 800a272:	2200      	movs	r2, #0
 800a274:	f7f6 f9c0 	bl	80005f8 <__aeabi_dmul>
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	f7f6 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 800a284:	2800      	cmp	r0, #0
 800a286:	d09f      	beq.n	800a1c8 <_dtoa_r+0x638>
 800a288:	e7d1      	b.n	800a22e <_dtoa_r+0x69e>
 800a28a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	f000 80ea 	beq.w	800a466 <_dtoa_r+0x8d6>
 800a292:	9a07      	ldr	r2, [sp, #28]
 800a294:	2a01      	cmp	r2, #1
 800a296:	f300 80cd 	bgt.w	800a434 <_dtoa_r+0x8a4>
 800a29a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a29c:	2a00      	cmp	r2, #0
 800a29e:	f000 80c1 	beq.w	800a424 <_dtoa_r+0x894>
 800a2a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2a6:	9c08      	ldr	r4, [sp, #32]
 800a2a8:	9e00      	ldr	r6, [sp, #0]
 800a2aa:	9a00      	ldr	r2, [sp, #0]
 800a2ac:	441a      	add	r2, r3
 800a2ae:	9200      	str	r2, [sp, #0]
 800a2b0:	9a06      	ldr	r2, [sp, #24]
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	441a      	add	r2, r3
 800a2b6:	4648      	mov	r0, r9
 800a2b8:	9206      	str	r2, [sp, #24]
 800a2ba:	f000 fc77 	bl	800abac <__i2b>
 800a2be:	4605      	mov	r5, r0
 800a2c0:	b166      	cbz	r6, 800a2dc <_dtoa_r+0x74c>
 800a2c2:	9b06      	ldr	r3, [sp, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dd09      	ble.n	800a2dc <_dtoa_r+0x74c>
 800a2c8:	42b3      	cmp	r3, r6
 800a2ca:	9a00      	ldr	r2, [sp, #0]
 800a2cc:	bfa8      	it	ge
 800a2ce:	4633      	movge	r3, r6
 800a2d0:	1ad2      	subs	r2, r2, r3
 800a2d2:	9200      	str	r2, [sp, #0]
 800a2d4:	9a06      	ldr	r2, [sp, #24]
 800a2d6:	1af6      	subs	r6, r6, r3
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	9306      	str	r3, [sp, #24]
 800a2dc:	9b08      	ldr	r3, [sp, #32]
 800a2de:	b30b      	cbz	r3, 800a324 <_dtoa_r+0x794>
 800a2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 80c6 	beq.w	800a474 <_dtoa_r+0x8e4>
 800a2e8:	2c00      	cmp	r4, #0
 800a2ea:	f000 80c0 	beq.w	800a46e <_dtoa_r+0x8de>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4648      	mov	r0, r9
 800a2f4:	f000 fd12 	bl	800ad1c <__pow5mult>
 800a2f8:	9a02      	ldr	r2, [sp, #8]
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	4648      	mov	r0, r9
 800a300:	f000 fc6a 	bl	800abd8 <__multiply>
 800a304:	9902      	ldr	r1, [sp, #8]
 800a306:	4680      	mov	r8, r0
 800a308:	4648      	mov	r0, r9
 800a30a:	f000 fb51 	bl	800a9b0 <_Bfree>
 800a30e:	9b08      	ldr	r3, [sp, #32]
 800a310:	1b1b      	subs	r3, r3, r4
 800a312:	9308      	str	r3, [sp, #32]
 800a314:	f000 80b1 	beq.w	800a47a <_dtoa_r+0x8ea>
 800a318:	9a08      	ldr	r2, [sp, #32]
 800a31a:	4641      	mov	r1, r8
 800a31c:	4648      	mov	r0, r9
 800a31e:	f000 fcfd 	bl	800ad1c <__pow5mult>
 800a322:	9002      	str	r0, [sp, #8]
 800a324:	2101      	movs	r1, #1
 800a326:	4648      	mov	r0, r9
 800a328:	f000 fc40 	bl	800abac <__i2b>
 800a32c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a32e:	4604      	mov	r4, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	f000 81d8 	beq.w	800a6e6 <_dtoa_r+0xb56>
 800a336:	461a      	mov	r2, r3
 800a338:	4601      	mov	r1, r0
 800a33a:	4648      	mov	r0, r9
 800a33c:	f000 fcee 	bl	800ad1c <__pow5mult>
 800a340:	9b07      	ldr	r3, [sp, #28]
 800a342:	2b01      	cmp	r3, #1
 800a344:	4604      	mov	r4, r0
 800a346:	f300 809f 	bgt.w	800a488 <_dtoa_r+0x8f8>
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f040 8097 	bne.w	800a480 <_dtoa_r+0x8f0>
 800a352:	9b05      	ldr	r3, [sp, #20]
 800a354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f040 8093 	bne.w	800a484 <_dtoa_r+0x8f4>
 800a35e:	9b05      	ldr	r3, [sp, #20]
 800a360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a364:	0d1b      	lsrs	r3, r3, #20
 800a366:	051b      	lsls	r3, r3, #20
 800a368:	b133      	cbz	r3, 800a378 <_dtoa_r+0x7e8>
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	3301      	adds	r3, #1
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	9b06      	ldr	r3, [sp, #24]
 800a372:	3301      	adds	r3, #1
 800a374:	9306      	str	r3, [sp, #24]
 800a376:	2301      	movs	r3, #1
 800a378:	9308      	str	r3, [sp, #32]
 800a37a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 81b8 	beq.w	800a6f2 <_dtoa_r+0xb62>
 800a382:	6923      	ldr	r3, [r4, #16]
 800a384:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a388:	6918      	ldr	r0, [r3, #16]
 800a38a:	f000 fbc3 	bl	800ab14 <__hi0bits>
 800a38e:	f1c0 0020 	rsb	r0, r0, #32
 800a392:	9b06      	ldr	r3, [sp, #24]
 800a394:	4418      	add	r0, r3
 800a396:	f010 001f 	ands.w	r0, r0, #31
 800a39a:	f000 8082 	beq.w	800a4a2 <_dtoa_r+0x912>
 800a39e:	f1c0 0320 	rsb	r3, r0, #32
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	dd73      	ble.n	800a48e <_dtoa_r+0x8fe>
 800a3a6:	9b00      	ldr	r3, [sp, #0]
 800a3a8:	f1c0 001c 	rsb	r0, r0, #28
 800a3ac:	4403      	add	r3, r0
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	4403      	add	r3, r0
 800a3b4:	4406      	add	r6, r0
 800a3b6:	9306      	str	r3, [sp, #24]
 800a3b8:	9b00      	ldr	r3, [sp, #0]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dd05      	ble.n	800a3ca <_dtoa_r+0x83a>
 800a3be:	9902      	ldr	r1, [sp, #8]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4648      	mov	r0, r9
 800a3c4:	f000 fd04 	bl	800add0 <__lshift>
 800a3c8:	9002      	str	r0, [sp, #8]
 800a3ca:	9b06      	ldr	r3, [sp, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	dd05      	ble.n	800a3dc <_dtoa_r+0x84c>
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	f000 fcfb 	bl	800add0 <__lshift>
 800a3da:	4604      	mov	r4, r0
 800a3dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d061      	beq.n	800a4a6 <_dtoa_r+0x916>
 800a3e2:	9802      	ldr	r0, [sp, #8]
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	f000 fd5f 	bl	800aea8 <__mcmp>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	da5b      	bge.n	800a4a6 <_dtoa_r+0x916>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9902      	ldr	r1, [sp, #8]
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	4648      	mov	r0, r9
 800a3f6:	f000 fafd 	bl	800a9f4 <__multadd>
 800a3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fc:	9002      	str	r0, [sp, #8]
 800a3fe:	f107 38ff 	add.w	r8, r7, #4294967295
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 8177 	beq.w	800a6f6 <_dtoa_r+0xb66>
 800a408:	4629      	mov	r1, r5
 800a40a:	2300      	movs	r3, #0
 800a40c:	220a      	movs	r2, #10
 800a40e:	4648      	mov	r0, r9
 800a410:	f000 faf0 	bl	800a9f4 <__multadd>
 800a414:	f1bb 0f00 	cmp.w	fp, #0
 800a418:	4605      	mov	r5, r0
 800a41a:	dc6f      	bgt.n	800a4fc <_dtoa_r+0x96c>
 800a41c:	9b07      	ldr	r3, [sp, #28]
 800a41e:	2b02      	cmp	r3, #2
 800a420:	dc49      	bgt.n	800a4b6 <_dtoa_r+0x926>
 800a422:	e06b      	b.n	800a4fc <_dtoa_r+0x96c>
 800a424:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a426:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a42a:	e73c      	b.n	800a2a6 <_dtoa_r+0x716>
 800a42c:	3fe00000 	.word	0x3fe00000
 800a430:	40240000 	.word	0x40240000
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	1e5c      	subs	r4, r3, #1
 800a438:	9b08      	ldr	r3, [sp, #32]
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	db09      	blt.n	800a452 <_dtoa_r+0x8c2>
 800a43e:	1b1c      	subs	r4, r3, r4
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	2b00      	cmp	r3, #0
 800a444:	f6bf af30 	bge.w	800a2a8 <_dtoa_r+0x718>
 800a448:	9b00      	ldr	r3, [sp, #0]
 800a44a:	9a03      	ldr	r2, [sp, #12]
 800a44c:	1a9e      	subs	r6, r3, r2
 800a44e:	2300      	movs	r3, #0
 800a450:	e72b      	b.n	800a2aa <_dtoa_r+0x71a>
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a456:	9408      	str	r4, [sp, #32]
 800a458:	1ae3      	subs	r3, r4, r3
 800a45a:	441a      	add	r2, r3
 800a45c:	9e00      	ldr	r6, [sp, #0]
 800a45e:	9b03      	ldr	r3, [sp, #12]
 800a460:	920d      	str	r2, [sp, #52]	@ 0x34
 800a462:	2400      	movs	r4, #0
 800a464:	e721      	b.n	800a2aa <_dtoa_r+0x71a>
 800a466:	9c08      	ldr	r4, [sp, #32]
 800a468:	9e00      	ldr	r6, [sp, #0]
 800a46a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a46c:	e728      	b.n	800a2c0 <_dtoa_r+0x730>
 800a46e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a472:	e751      	b.n	800a318 <_dtoa_r+0x788>
 800a474:	9a08      	ldr	r2, [sp, #32]
 800a476:	9902      	ldr	r1, [sp, #8]
 800a478:	e750      	b.n	800a31c <_dtoa_r+0x78c>
 800a47a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a47e:	e751      	b.n	800a324 <_dtoa_r+0x794>
 800a480:	2300      	movs	r3, #0
 800a482:	e779      	b.n	800a378 <_dtoa_r+0x7e8>
 800a484:	9b04      	ldr	r3, [sp, #16]
 800a486:	e777      	b.n	800a378 <_dtoa_r+0x7e8>
 800a488:	2300      	movs	r3, #0
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	e779      	b.n	800a382 <_dtoa_r+0x7f2>
 800a48e:	d093      	beq.n	800a3b8 <_dtoa_r+0x828>
 800a490:	9a00      	ldr	r2, [sp, #0]
 800a492:	331c      	adds	r3, #28
 800a494:	441a      	add	r2, r3
 800a496:	9200      	str	r2, [sp, #0]
 800a498:	9a06      	ldr	r2, [sp, #24]
 800a49a:	441a      	add	r2, r3
 800a49c:	441e      	add	r6, r3
 800a49e:	9206      	str	r2, [sp, #24]
 800a4a0:	e78a      	b.n	800a3b8 <_dtoa_r+0x828>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	e7f4      	b.n	800a490 <_dtoa_r+0x900>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	46b8      	mov	r8, r7
 800a4ac:	dc20      	bgt.n	800a4f0 <_dtoa_r+0x960>
 800a4ae:	469b      	mov	fp, r3
 800a4b0:	9b07      	ldr	r3, [sp, #28]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	dd1e      	ble.n	800a4f4 <_dtoa_r+0x964>
 800a4b6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ba:	f47f adb1 	bne.w	800a020 <_dtoa_r+0x490>
 800a4be:	4621      	mov	r1, r4
 800a4c0:	465b      	mov	r3, fp
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	4648      	mov	r0, r9
 800a4c6:	f000 fa95 	bl	800a9f4 <__multadd>
 800a4ca:	4601      	mov	r1, r0
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	9802      	ldr	r0, [sp, #8]
 800a4d0:	f000 fcea 	bl	800aea8 <__mcmp>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f77f ada3 	ble.w	800a020 <_dtoa_r+0x490>
 800a4da:	4656      	mov	r6, sl
 800a4dc:	2331      	movs	r3, #49	@ 0x31
 800a4de:	f806 3b01 	strb.w	r3, [r6], #1
 800a4e2:	f108 0801 	add.w	r8, r8, #1
 800a4e6:	e59f      	b.n	800a028 <_dtoa_r+0x498>
 800a4e8:	9c03      	ldr	r4, [sp, #12]
 800a4ea:	46b8      	mov	r8, r7
 800a4ec:	4625      	mov	r5, r4
 800a4ee:	e7f4      	b.n	800a4da <_dtoa_r+0x94a>
 800a4f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f000 8101 	beq.w	800a6fe <_dtoa_r+0xb6e>
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	dd05      	ble.n	800a50c <_dtoa_r+0x97c>
 800a500:	4629      	mov	r1, r5
 800a502:	4632      	mov	r2, r6
 800a504:	4648      	mov	r0, r9
 800a506:	f000 fc63 	bl	800add0 <__lshift>
 800a50a:	4605      	mov	r5, r0
 800a50c:	9b08      	ldr	r3, [sp, #32]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d05c      	beq.n	800a5cc <_dtoa_r+0xa3c>
 800a512:	6869      	ldr	r1, [r5, #4]
 800a514:	4648      	mov	r0, r9
 800a516:	f000 fa0b 	bl	800a930 <_Balloc>
 800a51a:	4606      	mov	r6, r0
 800a51c:	b928      	cbnz	r0, 800a52a <_dtoa_r+0x99a>
 800a51e:	4b82      	ldr	r3, [pc, #520]	@ (800a728 <_dtoa_r+0xb98>)
 800a520:	4602      	mov	r2, r0
 800a522:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a526:	f7ff bb4a 	b.w	8009bbe <_dtoa_r+0x2e>
 800a52a:	692a      	ldr	r2, [r5, #16]
 800a52c:	3202      	adds	r2, #2
 800a52e:	0092      	lsls	r2, r2, #2
 800a530:	f105 010c 	add.w	r1, r5, #12
 800a534:	300c      	adds	r0, #12
 800a536:	f7ff fa8e 	bl	8009a56 <memcpy>
 800a53a:	2201      	movs	r2, #1
 800a53c:	4631      	mov	r1, r6
 800a53e:	4648      	mov	r0, r9
 800a540:	f000 fc46 	bl	800add0 <__lshift>
 800a544:	f10a 0301 	add.w	r3, sl, #1
 800a548:	9300      	str	r3, [sp, #0]
 800a54a:	eb0a 030b 	add.w	r3, sl, fp
 800a54e:	9308      	str	r3, [sp, #32]
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	462f      	mov	r7, r5
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	4605      	mov	r5, r0
 800a55c:	9b00      	ldr	r3, [sp, #0]
 800a55e:	9802      	ldr	r0, [sp, #8]
 800a560:	4621      	mov	r1, r4
 800a562:	f103 3bff 	add.w	fp, r3, #4294967295
 800a566:	f7ff fa8b 	bl	8009a80 <quorem>
 800a56a:	4603      	mov	r3, r0
 800a56c:	3330      	adds	r3, #48	@ 0x30
 800a56e:	9003      	str	r0, [sp, #12]
 800a570:	4639      	mov	r1, r7
 800a572:	9802      	ldr	r0, [sp, #8]
 800a574:	9309      	str	r3, [sp, #36]	@ 0x24
 800a576:	f000 fc97 	bl	800aea8 <__mcmp>
 800a57a:	462a      	mov	r2, r5
 800a57c:	9004      	str	r0, [sp, #16]
 800a57e:	4621      	mov	r1, r4
 800a580:	4648      	mov	r0, r9
 800a582:	f000 fcad 	bl	800aee0 <__mdiff>
 800a586:	68c2      	ldr	r2, [r0, #12]
 800a588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a58a:	4606      	mov	r6, r0
 800a58c:	bb02      	cbnz	r2, 800a5d0 <_dtoa_r+0xa40>
 800a58e:	4601      	mov	r1, r0
 800a590:	9802      	ldr	r0, [sp, #8]
 800a592:	f000 fc89 	bl	800aea8 <__mcmp>
 800a596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a598:	4602      	mov	r2, r0
 800a59a:	4631      	mov	r1, r6
 800a59c:	4648      	mov	r0, r9
 800a59e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a5a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a2:	f000 fa05 	bl	800a9b0 <_Bfree>
 800a5a6:	9b07      	ldr	r3, [sp, #28]
 800a5a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a5aa:	9e00      	ldr	r6, [sp, #0]
 800a5ac:	ea42 0103 	orr.w	r1, r2, r3
 800a5b0:	9b06      	ldr	r3, [sp, #24]
 800a5b2:	4319      	orrs	r1, r3
 800a5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b6:	d10d      	bne.n	800a5d4 <_dtoa_r+0xa44>
 800a5b8:	2b39      	cmp	r3, #57	@ 0x39
 800a5ba:	d027      	beq.n	800a60c <_dtoa_r+0xa7c>
 800a5bc:	9a04      	ldr	r2, [sp, #16]
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	dd01      	ble.n	800a5c6 <_dtoa_r+0xa36>
 800a5c2:	9b03      	ldr	r3, [sp, #12]
 800a5c4:	3331      	adds	r3, #49	@ 0x31
 800a5c6:	f88b 3000 	strb.w	r3, [fp]
 800a5ca:	e52e      	b.n	800a02a <_dtoa_r+0x49a>
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	e7b9      	b.n	800a544 <_dtoa_r+0x9b4>
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	e7e2      	b.n	800a59a <_dtoa_r+0xa0a>
 800a5d4:	9904      	ldr	r1, [sp, #16]
 800a5d6:	2900      	cmp	r1, #0
 800a5d8:	db04      	blt.n	800a5e4 <_dtoa_r+0xa54>
 800a5da:	9807      	ldr	r0, [sp, #28]
 800a5dc:	4301      	orrs	r1, r0
 800a5de:	9806      	ldr	r0, [sp, #24]
 800a5e0:	4301      	orrs	r1, r0
 800a5e2:	d120      	bne.n	800a626 <_dtoa_r+0xa96>
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	ddee      	ble.n	800a5c6 <_dtoa_r+0xa36>
 800a5e8:	9902      	ldr	r1, [sp, #8]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4648      	mov	r0, r9
 800a5f0:	f000 fbee 	bl	800add0 <__lshift>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	9002      	str	r0, [sp, #8]
 800a5f8:	f000 fc56 	bl	800aea8 <__mcmp>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	9b00      	ldr	r3, [sp, #0]
 800a600:	dc02      	bgt.n	800a608 <_dtoa_r+0xa78>
 800a602:	d1e0      	bne.n	800a5c6 <_dtoa_r+0xa36>
 800a604:	07da      	lsls	r2, r3, #31
 800a606:	d5de      	bpl.n	800a5c6 <_dtoa_r+0xa36>
 800a608:	2b39      	cmp	r3, #57	@ 0x39
 800a60a:	d1da      	bne.n	800a5c2 <_dtoa_r+0xa32>
 800a60c:	2339      	movs	r3, #57	@ 0x39
 800a60e:	f88b 3000 	strb.w	r3, [fp]
 800a612:	4633      	mov	r3, r6
 800a614:	461e      	mov	r6, r3
 800a616:	3b01      	subs	r3, #1
 800a618:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a61c:	2a39      	cmp	r2, #57	@ 0x39
 800a61e:	d04e      	beq.n	800a6be <_dtoa_r+0xb2e>
 800a620:	3201      	adds	r2, #1
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	e501      	b.n	800a02a <_dtoa_r+0x49a>
 800a626:	2a00      	cmp	r2, #0
 800a628:	dd03      	ble.n	800a632 <_dtoa_r+0xaa2>
 800a62a:	2b39      	cmp	r3, #57	@ 0x39
 800a62c:	d0ee      	beq.n	800a60c <_dtoa_r+0xa7c>
 800a62e:	3301      	adds	r3, #1
 800a630:	e7c9      	b.n	800a5c6 <_dtoa_r+0xa36>
 800a632:	9a00      	ldr	r2, [sp, #0]
 800a634:	9908      	ldr	r1, [sp, #32]
 800a636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a63a:	428a      	cmp	r2, r1
 800a63c:	d028      	beq.n	800a690 <_dtoa_r+0xb00>
 800a63e:	9902      	ldr	r1, [sp, #8]
 800a640:	2300      	movs	r3, #0
 800a642:	220a      	movs	r2, #10
 800a644:	4648      	mov	r0, r9
 800a646:	f000 f9d5 	bl	800a9f4 <__multadd>
 800a64a:	42af      	cmp	r7, r5
 800a64c:	9002      	str	r0, [sp, #8]
 800a64e:	f04f 0300 	mov.w	r3, #0
 800a652:	f04f 020a 	mov.w	r2, #10
 800a656:	4639      	mov	r1, r7
 800a658:	4648      	mov	r0, r9
 800a65a:	d107      	bne.n	800a66c <_dtoa_r+0xadc>
 800a65c:	f000 f9ca 	bl	800a9f4 <__multadd>
 800a660:	4607      	mov	r7, r0
 800a662:	4605      	mov	r5, r0
 800a664:	9b00      	ldr	r3, [sp, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	e777      	b.n	800a55c <_dtoa_r+0x9cc>
 800a66c:	f000 f9c2 	bl	800a9f4 <__multadd>
 800a670:	4629      	mov	r1, r5
 800a672:	4607      	mov	r7, r0
 800a674:	2300      	movs	r3, #0
 800a676:	220a      	movs	r2, #10
 800a678:	4648      	mov	r0, r9
 800a67a:	f000 f9bb 	bl	800a9f4 <__multadd>
 800a67e:	4605      	mov	r5, r0
 800a680:	e7f0      	b.n	800a664 <_dtoa_r+0xad4>
 800a682:	f1bb 0f00 	cmp.w	fp, #0
 800a686:	bfcc      	ite	gt
 800a688:	465e      	movgt	r6, fp
 800a68a:	2601      	movle	r6, #1
 800a68c:	4456      	add	r6, sl
 800a68e:	2700      	movs	r7, #0
 800a690:	9902      	ldr	r1, [sp, #8]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	2201      	movs	r2, #1
 800a696:	4648      	mov	r0, r9
 800a698:	f000 fb9a 	bl	800add0 <__lshift>
 800a69c:	4621      	mov	r1, r4
 800a69e:	9002      	str	r0, [sp, #8]
 800a6a0:	f000 fc02 	bl	800aea8 <__mcmp>
 800a6a4:	2800      	cmp	r0, #0
 800a6a6:	dcb4      	bgt.n	800a612 <_dtoa_r+0xa82>
 800a6a8:	d102      	bne.n	800a6b0 <_dtoa_r+0xb20>
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	07db      	lsls	r3, r3, #31
 800a6ae:	d4b0      	bmi.n	800a612 <_dtoa_r+0xa82>
 800a6b0:	4633      	mov	r3, r6
 800a6b2:	461e      	mov	r6, r3
 800a6b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6b8:	2a30      	cmp	r2, #48	@ 0x30
 800a6ba:	d0fa      	beq.n	800a6b2 <_dtoa_r+0xb22>
 800a6bc:	e4b5      	b.n	800a02a <_dtoa_r+0x49a>
 800a6be:	459a      	cmp	sl, r3
 800a6c0:	d1a8      	bne.n	800a614 <_dtoa_r+0xa84>
 800a6c2:	2331      	movs	r3, #49	@ 0x31
 800a6c4:	f108 0801 	add.w	r8, r8, #1
 800a6c8:	f88a 3000 	strb.w	r3, [sl]
 800a6cc:	e4ad      	b.n	800a02a <_dtoa_r+0x49a>
 800a6ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a6d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a72c <_dtoa_r+0xb9c>
 800a6d4:	b11b      	cbz	r3, 800a6de <_dtoa_r+0xb4e>
 800a6d6:	f10a 0308 	add.w	r3, sl, #8
 800a6da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	4650      	mov	r0, sl
 800a6e0:	b017      	add	sp, #92	@ 0x5c
 800a6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f77f ae2e 	ble.w	800a34a <_dtoa_r+0x7ba>
 800a6ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6f0:	9308      	str	r3, [sp, #32]
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	e64d      	b.n	800a392 <_dtoa_r+0x802>
 800a6f6:	f1bb 0f00 	cmp.w	fp, #0
 800a6fa:	f77f aed9 	ble.w	800a4b0 <_dtoa_r+0x920>
 800a6fe:	4656      	mov	r6, sl
 800a700:	9802      	ldr	r0, [sp, #8]
 800a702:	4621      	mov	r1, r4
 800a704:	f7ff f9bc 	bl	8009a80 <quorem>
 800a708:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a70c:	f806 3b01 	strb.w	r3, [r6], #1
 800a710:	eba6 020a 	sub.w	r2, r6, sl
 800a714:	4593      	cmp	fp, r2
 800a716:	ddb4      	ble.n	800a682 <_dtoa_r+0xaf2>
 800a718:	9902      	ldr	r1, [sp, #8]
 800a71a:	2300      	movs	r3, #0
 800a71c:	220a      	movs	r2, #10
 800a71e:	4648      	mov	r0, r9
 800a720:	f000 f968 	bl	800a9f4 <__multadd>
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	e7eb      	b.n	800a700 <_dtoa_r+0xb70>
 800a728:	0800d11d 	.word	0x0800d11d
 800a72c:	0800d0a1 	.word	0x0800d0a1

0800a730 <_free_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4605      	mov	r5, r0
 800a734:	2900      	cmp	r1, #0
 800a736:	d041      	beq.n	800a7bc <_free_r+0x8c>
 800a738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a73c:	1f0c      	subs	r4, r1, #4
 800a73e:	2b00      	cmp	r3, #0
 800a740:	bfb8      	it	lt
 800a742:	18e4      	addlt	r4, r4, r3
 800a744:	f000 f8e8 	bl	800a918 <__malloc_lock>
 800a748:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c0 <_free_r+0x90>)
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	b933      	cbnz	r3, 800a75c <_free_r+0x2c>
 800a74e:	6063      	str	r3, [r4, #4]
 800a750:	6014      	str	r4, [r2, #0]
 800a752:	4628      	mov	r0, r5
 800a754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a758:	f000 b8e4 	b.w	800a924 <__malloc_unlock>
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	d908      	bls.n	800a772 <_free_r+0x42>
 800a760:	6820      	ldr	r0, [r4, #0]
 800a762:	1821      	adds	r1, r4, r0
 800a764:	428b      	cmp	r3, r1
 800a766:	bf01      	itttt	eq
 800a768:	6819      	ldreq	r1, [r3, #0]
 800a76a:	685b      	ldreq	r3, [r3, #4]
 800a76c:	1809      	addeq	r1, r1, r0
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	e7ed      	b.n	800a74e <_free_r+0x1e>
 800a772:	461a      	mov	r2, r3
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	b10b      	cbz	r3, 800a77c <_free_r+0x4c>
 800a778:	42a3      	cmp	r3, r4
 800a77a:	d9fa      	bls.n	800a772 <_free_r+0x42>
 800a77c:	6811      	ldr	r1, [r2, #0]
 800a77e:	1850      	adds	r0, r2, r1
 800a780:	42a0      	cmp	r0, r4
 800a782:	d10b      	bne.n	800a79c <_free_r+0x6c>
 800a784:	6820      	ldr	r0, [r4, #0]
 800a786:	4401      	add	r1, r0
 800a788:	1850      	adds	r0, r2, r1
 800a78a:	4283      	cmp	r3, r0
 800a78c:	6011      	str	r1, [r2, #0]
 800a78e:	d1e0      	bne.n	800a752 <_free_r+0x22>
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	6053      	str	r3, [r2, #4]
 800a796:	4408      	add	r0, r1
 800a798:	6010      	str	r0, [r2, #0]
 800a79a:	e7da      	b.n	800a752 <_free_r+0x22>
 800a79c:	d902      	bls.n	800a7a4 <_free_r+0x74>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	e7d6      	b.n	800a752 <_free_r+0x22>
 800a7a4:	6820      	ldr	r0, [r4, #0]
 800a7a6:	1821      	adds	r1, r4, r0
 800a7a8:	428b      	cmp	r3, r1
 800a7aa:	bf04      	itt	eq
 800a7ac:	6819      	ldreq	r1, [r3, #0]
 800a7ae:	685b      	ldreq	r3, [r3, #4]
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	bf04      	itt	eq
 800a7b4:	1809      	addeq	r1, r1, r0
 800a7b6:	6021      	streq	r1, [r4, #0]
 800a7b8:	6054      	str	r4, [r2, #4]
 800a7ba:	e7ca      	b.n	800a752 <_free_r+0x22>
 800a7bc:	bd38      	pop	{r3, r4, r5, pc}
 800a7be:	bf00      	nop
 800a7c0:	20002104 	.word	0x20002104

0800a7c4 <malloc>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	@ (800a7d0 <malloc+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f000 b825 	b.w	800a818 <_malloc_r>
 800a7ce:	bf00      	nop
 800a7d0:	20000114 	.word	0x20000114

0800a7d4 <sbrk_aligned>:
 800a7d4:	b570      	push	{r4, r5, r6, lr}
 800a7d6:	4e0f      	ldr	r6, [pc, #60]	@ (800a814 <sbrk_aligned+0x40>)
 800a7d8:	460c      	mov	r4, r1
 800a7da:	6831      	ldr	r1, [r6, #0]
 800a7dc:	4605      	mov	r5, r0
 800a7de:	b911      	cbnz	r1, 800a7e6 <sbrk_aligned+0x12>
 800a7e0:	f001 ffca 	bl	800c778 <_sbrk_r>
 800a7e4:	6030      	str	r0, [r6, #0]
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f001 ffc5 	bl	800c778 <_sbrk_r>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d103      	bne.n	800a7fa <sbrk_aligned+0x26>
 800a7f2:	f04f 34ff 	mov.w	r4, #4294967295
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	bd70      	pop	{r4, r5, r6, pc}
 800a7fa:	1cc4      	adds	r4, r0, #3
 800a7fc:	f024 0403 	bic.w	r4, r4, #3
 800a800:	42a0      	cmp	r0, r4
 800a802:	d0f8      	beq.n	800a7f6 <sbrk_aligned+0x22>
 800a804:	1a21      	subs	r1, r4, r0
 800a806:	4628      	mov	r0, r5
 800a808:	f001 ffb6 	bl	800c778 <_sbrk_r>
 800a80c:	3001      	adds	r0, #1
 800a80e:	d1f2      	bne.n	800a7f6 <sbrk_aligned+0x22>
 800a810:	e7ef      	b.n	800a7f2 <sbrk_aligned+0x1e>
 800a812:	bf00      	nop
 800a814:	20002100 	.word	0x20002100

0800a818 <_malloc_r>:
 800a818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a81c:	1ccd      	adds	r5, r1, #3
 800a81e:	f025 0503 	bic.w	r5, r5, #3
 800a822:	3508      	adds	r5, #8
 800a824:	2d0c      	cmp	r5, #12
 800a826:	bf38      	it	cc
 800a828:	250c      	movcc	r5, #12
 800a82a:	2d00      	cmp	r5, #0
 800a82c:	4606      	mov	r6, r0
 800a82e:	db01      	blt.n	800a834 <_malloc_r+0x1c>
 800a830:	42a9      	cmp	r1, r5
 800a832:	d904      	bls.n	800a83e <_malloc_r+0x26>
 800a834:	230c      	movs	r3, #12
 800a836:	6033      	str	r3, [r6, #0]
 800a838:	2000      	movs	r0, #0
 800a83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a83e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a914 <_malloc_r+0xfc>
 800a842:	f000 f869 	bl	800a918 <__malloc_lock>
 800a846:	f8d8 3000 	ldr.w	r3, [r8]
 800a84a:	461c      	mov	r4, r3
 800a84c:	bb44      	cbnz	r4, 800a8a0 <_malloc_r+0x88>
 800a84e:	4629      	mov	r1, r5
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff ffbf 	bl	800a7d4 <sbrk_aligned>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	4604      	mov	r4, r0
 800a85a:	d158      	bne.n	800a90e <_malloc_r+0xf6>
 800a85c:	f8d8 4000 	ldr.w	r4, [r8]
 800a860:	4627      	mov	r7, r4
 800a862:	2f00      	cmp	r7, #0
 800a864:	d143      	bne.n	800a8ee <_malloc_r+0xd6>
 800a866:	2c00      	cmp	r4, #0
 800a868:	d04b      	beq.n	800a902 <_malloc_r+0xea>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	4639      	mov	r1, r7
 800a86e:	4630      	mov	r0, r6
 800a870:	eb04 0903 	add.w	r9, r4, r3
 800a874:	f001 ff80 	bl	800c778 <_sbrk_r>
 800a878:	4581      	cmp	r9, r0
 800a87a:	d142      	bne.n	800a902 <_malloc_r+0xea>
 800a87c:	6821      	ldr	r1, [r4, #0]
 800a87e:	1a6d      	subs	r5, r5, r1
 800a880:	4629      	mov	r1, r5
 800a882:	4630      	mov	r0, r6
 800a884:	f7ff ffa6 	bl	800a7d4 <sbrk_aligned>
 800a888:	3001      	adds	r0, #1
 800a88a:	d03a      	beq.n	800a902 <_malloc_r+0xea>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	442b      	add	r3, r5
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	f8d8 3000 	ldr.w	r3, [r8]
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	bb62      	cbnz	r2, 800a8f4 <_malloc_r+0xdc>
 800a89a:	f8c8 7000 	str.w	r7, [r8]
 800a89e:	e00f      	b.n	800a8c0 <_malloc_r+0xa8>
 800a8a0:	6822      	ldr	r2, [r4, #0]
 800a8a2:	1b52      	subs	r2, r2, r5
 800a8a4:	d420      	bmi.n	800a8e8 <_malloc_r+0xd0>
 800a8a6:	2a0b      	cmp	r2, #11
 800a8a8:	d917      	bls.n	800a8da <_malloc_r+0xc2>
 800a8aa:	1961      	adds	r1, r4, r5
 800a8ac:	42a3      	cmp	r3, r4
 800a8ae:	6025      	str	r5, [r4, #0]
 800a8b0:	bf18      	it	ne
 800a8b2:	6059      	strne	r1, [r3, #4]
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	bf08      	it	eq
 800a8b8:	f8c8 1000 	streq.w	r1, [r8]
 800a8bc:	5162      	str	r2, [r4, r5]
 800a8be:	604b      	str	r3, [r1, #4]
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f000 f82f 	bl	800a924 <__malloc_unlock>
 800a8c6:	f104 000b 	add.w	r0, r4, #11
 800a8ca:	1d23      	adds	r3, r4, #4
 800a8cc:	f020 0007 	bic.w	r0, r0, #7
 800a8d0:	1ac2      	subs	r2, r0, r3
 800a8d2:	bf1c      	itt	ne
 800a8d4:	1a1b      	subne	r3, r3, r0
 800a8d6:	50a3      	strne	r3, [r4, r2]
 800a8d8:	e7af      	b.n	800a83a <_malloc_r+0x22>
 800a8da:	6862      	ldr	r2, [r4, #4]
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	bf0c      	ite	eq
 800a8e0:	f8c8 2000 	streq.w	r2, [r8]
 800a8e4:	605a      	strne	r2, [r3, #4]
 800a8e6:	e7eb      	b.n	800a8c0 <_malloc_r+0xa8>
 800a8e8:	4623      	mov	r3, r4
 800a8ea:	6864      	ldr	r4, [r4, #4]
 800a8ec:	e7ae      	b.n	800a84c <_malloc_r+0x34>
 800a8ee:	463c      	mov	r4, r7
 800a8f0:	687f      	ldr	r7, [r7, #4]
 800a8f2:	e7b6      	b.n	800a862 <_malloc_r+0x4a>
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	42a3      	cmp	r3, r4
 800a8fa:	d1fb      	bne.n	800a8f4 <_malloc_r+0xdc>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	6053      	str	r3, [r2, #4]
 800a900:	e7de      	b.n	800a8c0 <_malloc_r+0xa8>
 800a902:	230c      	movs	r3, #12
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	4630      	mov	r0, r6
 800a908:	f000 f80c 	bl	800a924 <__malloc_unlock>
 800a90c:	e794      	b.n	800a838 <_malloc_r+0x20>
 800a90e:	6005      	str	r5, [r0, #0]
 800a910:	e7d6      	b.n	800a8c0 <_malloc_r+0xa8>
 800a912:	bf00      	nop
 800a914:	20002104 	.word	0x20002104

0800a918 <__malloc_lock>:
 800a918:	4801      	ldr	r0, [pc, #4]	@ (800a920 <__malloc_lock+0x8>)
 800a91a:	f7ff b89a 	b.w	8009a52 <__retarget_lock_acquire_recursive>
 800a91e:	bf00      	nop
 800a920:	200020fc 	.word	0x200020fc

0800a924 <__malloc_unlock>:
 800a924:	4801      	ldr	r0, [pc, #4]	@ (800a92c <__malloc_unlock+0x8>)
 800a926:	f7ff b895 	b.w	8009a54 <__retarget_lock_release_recursive>
 800a92a:	bf00      	nop
 800a92c:	200020fc 	.word	0x200020fc

0800a930 <_Balloc>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	69c6      	ldr	r6, [r0, #28]
 800a934:	4604      	mov	r4, r0
 800a936:	460d      	mov	r5, r1
 800a938:	b976      	cbnz	r6, 800a958 <_Balloc+0x28>
 800a93a:	2010      	movs	r0, #16
 800a93c:	f7ff ff42 	bl	800a7c4 <malloc>
 800a940:	4602      	mov	r2, r0
 800a942:	61e0      	str	r0, [r4, #28]
 800a944:	b920      	cbnz	r0, 800a950 <_Balloc+0x20>
 800a946:	4b18      	ldr	r3, [pc, #96]	@ (800a9a8 <_Balloc+0x78>)
 800a948:	4818      	ldr	r0, [pc, #96]	@ (800a9ac <_Balloc+0x7c>)
 800a94a:	216b      	movs	r1, #107	@ 0x6b
 800a94c:	f001 ff2c 	bl	800c7a8 <__assert_func>
 800a950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a954:	6006      	str	r6, [r0, #0]
 800a956:	60c6      	str	r6, [r0, #12]
 800a958:	69e6      	ldr	r6, [r4, #28]
 800a95a:	68f3      	ldr	r3, [r6, #12]
 800a95c:	b183      	cbz	r3, 800a980 <_Balloc+0x50>
 800a95e:	69e3      	ldr	r3, [r4, #28]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a966:	b9b8      	cbnz	r0, 800a998 <_Balloc+0x68>
 800a968:	2101      	movs	r1, #1
 800a96a:	fa01 f605 	lsl.w	r6, r1, r5
 800a96e:	1d72      	adds	r2, r6, #5
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	4620      	mov	r0, r4
 800a974:	f001 ff36 	bl	800c7e4 <_calloc_r>
 800a978:	b160      	cbz	r0, 800a994 <_Balloc+0x64>
 800a97a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a97e:	e00e      	b.n	800a99e <_Balloc+0x6e>
 800a980:	2221      	movs	r2, #33	@ 0x21
 800a982:	2104      	movs	r1, #4
 800a984:	4620      	mov	r0, r4
 800a986:	f001 ff2d 	bl	800c7e4 <_calloc_r>
 800a98a:	69e3      	ldr	r3, [r4, #28]
 800a98c:	60f0      	str	r0, [r6, #12]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e4      	bne.n	800a95e <_Balloc+0x2e>
 800a994:	2000      	movs	r0, #0
 800a996:	bd70      	pop	{r4, r5, r6, pc}
 800a998:	6802      	ldr	r2, [r0, #0]
 800a99a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9a4:	e7f7      	b.n	800a996 <_Balloc+0x66>
 800a9a6:	bf00      	nop
 800a9a8:	0800d0ae 	.word	0x0800d0ae
 800a9ac:	0800d12e 	.word	0x0800d12e

0800a9b0 <_Bfree>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	69c6      	ldr	r6, [r0, #28]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b976      	cbnz	r6, 800a9d8 <_Bfree+0x28>
 800a9ba:	2010      	movs	r0, #16
 800a9bc:	f7ff ff02 	bl	800a7c4 <malloc>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	61e8      	str	r0, [r5, #28]
 800a9c4:	b920      	cbnz	r0, 800a9d0 <_Bfree+0x20>
 800a9c6:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <_Bfree+0x3c>)
 800a9c8:	4809      	ldr	r0, [pc, #36]	@ (800a9f0 <_Bfree+0x40>)
 800a9ca:	218f      	movs	r1, #143	@ 0x8f
 800a9cc:	f001 feec 	bl	800c7a8 <__assert_func>
 800a9d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9d4:	6006      	str	r6, [r0, #0]
 800a9d6:	60c6      	str	r6, [r0, #12]
 800a9d8:	b13c      	cbz	r4, 800a9ea <_Bfree+0x3a>
 800a9da:	69eb      	ldr	r3, [r5, #28]
 800a9dc:	6862      	ldr	r2, [r4, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9e4:	6021      	str	r1, [r4, #0]
 800a9e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}
 800a9ec:	0800d0ae 	.word	0x0800d0ae
 800a9f0:	0800d12e 	.word	0x0800d12e

0800a9f4 <__multadd>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	690d      	ldr	r5, [r1, #16]
 800a9fa:	4607      	mov	r7, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	461e      	mov	r6, r3
 800aa00:	f101 0c14 	add.w	ip, r1, #20
 800aa04:	2000      	movs	r0, #0
 800aa06:	f8dc 3000 	ldr.w	r3, [ip]
 800aa0a:	b299      	uxth	r1, r3
 800aa0c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa10:	0c1e      	lsrs	r6, r3, #16
 800aa12:	0c0b      	lsrs	r3, r1, #16
 800aa14:	fb02 3306 	mla	r3, r2, r6, r3
 800aa18:	b289      	uxth	r1, r1
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa20:	4285      	cmp	r5, r0
 800aa22:	f84c 1b04 	str.w	r1, [ip], #4
 800aa26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa2a:	dcec      	bgt.n	800aa06 <__multadd+0x12>
 800aa2c:	b30e      	cbz	r6, 800aa72 <__multadd+0x7e>
 800aa2e:	68a3      	ldr	r3, [r4, #8]
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dc19      	bgt.n	800aa68 <__multadd+0x74>
 800aa34:	6861      	ldr	r1, [r4, #4]
 800aa36:	4638      	mov	r0, r7
 800aa38:	3101      	adds	r1, #1
 800aa3a:	f7ff ff79 	bl	800a930 <_Balloc>
 800aa3e:	4680      	mov	r8, r0
 800aa40:	b928      	cbnz	r0, 800aa4e <__multadd+0x5a>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b0c      	ldr	r3, [pc, #48]	@ (800aa78 <__multadd+0x84>)
 800aa46:	480d      	ldr	r0, [pc, #52]	@ (800aa7c <__multadd+0x88>)
 800aa48:	21ba      	movs	r1, #186	@ 0xba
 800aa4a:	f001 fead 	bl	800c7a8 <__assert_func>
 800aa4e:	6922      	ldr	r2, [r4, #16]
 800aa50:	3202      	adds	r2, #2
 800aa52:	f104 010c 	add.w	r1, r4, #12
 800aa56:	0092      	lsls	r2, r2, #2
 800aa58:	300c      	adds	r0, #12
 800aa5a:	f7fe fffc 	bl	8009a56 <memcpy>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4638      	mov	r0, r7
 800aa62:	f7ff ffa5 	bl	800a9b0 <_Bfree>
 800aa66:	4644      	mov	r4, r8
 800aa68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	615e      	str	r6, [r3, #20]
 800aa70:	6125      	str	r5, [r4, #16]
 800aa72:	4620      	mov	r0, r4
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa78:	0800d11d 	.word	0x0800d11d
 800aa7c:	0800d12e 	.word	0x0800d12e

0800aa80 <__s2b>:
 800aa80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa84:	460c      	mov	r4, r1
 800aa86:	4615      	mov	r5, r2
 800aa88:	461f      	mov	r7, r3
 800aa8a:	2209      	movs	r2, #9
 800aa8c:	3308      	adds	r3, #8
 800aa8e:	4606      	mov	r6, r0
 800aa90:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa94:	2100      	movs	r1, #0
 800aa96:	2201      	movs	r2, #1
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	db09      	blt.n	800aab0 <__s2b+0x30>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ff47 	bl	800a930 <_Balloc>
 800aaa2:	b940      	cbnz	r0, 800aab6 <__s2b+0x36>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	4b19      	ldr	r3, [pc, #100]	@ (800ab0c <__s2b+0x8c>)
 800aaa8:	4819      	ldr	r0, [pc, #100]	@ (800ab10 <__s2b+0x90>)
 800aaaa:	21d3      	movs	r1, #211	@ 0xd3
 800aaac:	f001 fe7c 	bl	800c7a8 <__assert_func>
 800aab0:	0052      	lsls	r2, r2, #1
 800aab2:	3101      	adds	r1, #1
 800aab4:	e7f0      	b.n	800aa98 <__s2b+0x18>
 800aab6:	9b08      	ldr	r3, [sp, #32]
 800aab8:	6143      	str	r3, [r0, #20]
 800aaba:	2d09      	cmp	r5, #9
 800aabc:	f04f 0301 	mov.w	r3, #1
 800aac0:	6103      	str	r3, [r0, #16]
 800aac2:	dd16      	ble.n	800aaf2 <__s2b+0x72>
 800aac4:	f104 0909 	add.w	r9, r4, #9
 800aac8:	46c8      	mov	r8, r9
 800aaca:	442c      	add	r4, r5
 800aacc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aad0:	4601      	mov	r1, r0
 800aad2:	3b30      	subs	r3, #48	@ 0x30
 800aad4:	220a      	movs	r2, #10
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ff8c 	bl	800a9f4 <__multadd>
 800aadc:	45a0      	cmp	r8, r4
 800aade:	d1f5      	bne.n	800aacc <__s2b+0x4c>
 800aae0:	f1a5 0408 	sub.w	r4, r5, #8
 800aae4:	444c      	add	r4, r9
 800aae6:	1b2d      	subs	r5, r5, r4
 800aae8:	1963      	adds	r3, r4, r5
 800aaea:	42bb      	cmp	r3, r7
 800aaec:	db04      	blt.n	800aaf8 <__s2b+0x78>
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	340a      	adds	r4, #10
 800aaf4:	2509      	movs	r5, #9
 800aaf6:	e7f6      	b.n	800aae6 <__s2b+0x66>
 800aaf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aafc:	4601      	mov	r1, r0
 800aafe:	3b30      	subs	r3, #48	@ 0x30
 800ab00:	220a      	movs	r2, #10
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ff76 	bl	800a9f4 <__multadd>
 800ab08:	e7ee      	b.n	800aae8 <__s2b+0x68>
 800ab0a:	bf00      	nop
 800ab0c:	0800d11d 	.word	0x0800d11d
 800ab10:	0800d12e 	.word	0x0800d12e

0800ab14 <__hi0bits>:
 800ab14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ab18:	4603      	mov	r3, r0
 800ab1a:	bf36      	itet	cc
 800ab1c:	0403      	lslcc	r3, r0, #16
 800ab1e:	2000      	movcs	r0, #0
 800ab20:	2010      	movcc	r0, #16
 800ab22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ab26:	bf3c      	itt	cc
 800ab28:	021b      	lslcc	r3, r3, #8
 800ab2a:	3008      	addcc	r0, #8
 800ab2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab30:	bf3c      	itt	cc
 800ab32:	011b      	lslcc	r3, r3, #4
 800ab34:	3004      	addcc	r0, #4
 800ab36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab3a:	bf3c      	itt	cc
 800ab3c:	009b      	lslcc	r3, r3, #2
 800ab3e:	3002      	addcc	r0, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	db05      	blt.n	800ab50 <__hi0bits+0x3c>
 800ab44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ab48:	f100 0001 	add.w	r0, r0, #1
 800ab4c:	bf08      	it	eq
 800ab4e:	2020      	moveq	r0, #32
 800ab50:	4770      	bx	lr

0800ab52 <__lo0bits>:
 800ab52:	6803      	ldr	r3, [r0, #0]
 800ab54:	4602      	mov	r2, r0
 800ab56:	f013 0007 	ands.w	r0, r3, #7
 800ab5a:	d00b      	beq.n	800ab74 <__lo0bits+0x22>
 800ab5c:	07d9      	lsls	r1, r3, #31
 800ab5e:	d421      	bmi.n	800aba4 <__lo0bits+0x52>
 800ab60:	0798      	lsls	r0, r3, #30
 800ab62:	bf49      	itett	mi
 800ab64:	085b      	lsrmi	r3, r3, #1
 800ab66:	089b      	lsrpl	r3, r3, #2
 800ab68:	2001      	movmi	r0, #1
 800ab6a:	6013      	strmi	r3, [r2, #0]
 800ab6c:	bf5c      	itt	pl
 800ab6e:	6013      	strpl	r3, [r2, #0]
 800ab70:	2002      	movpl	r0, #2
 800ab72:	4770      	bx	lr
 800ab74:	b299      	uxth	r1, r3
 800ab76:	b909      	cbnz	r1, 800ab7c <__lo0bits+0x2a>
 800ab78:	0c1b      	lsrs	r3, r3, #16
 800ab7a:	2010      	movs	r0, #16
 800ab7c:	b2d9      	uxtb	r1, r3
 800ab7e:	b909      	cbnz	r1, 800ab84 <__lo0bits+0x32>
 800ab80:	3008      	adds	r0, #8
 800ab82:	0a1b      	lsrs	r3, r3, #8
 800ab84:	0719      	lsls	r1, r3, #28
 800ab86:	bf04      	itt	eq
 800ab88:	091b      	lsreq	r3, r3, #4
 800ab8a:	3004      	addeq	r0, #4
 800ab8c:	0799      	lsls	r1, r3, #30
 800ab8e:	bf04      	itt	eq
 800ab90:	089b      	lsreq	r3, r3, #2
 800ab92:	3002      	addeq	r0, #2
 800ab94:	07d9      	lsls	r1, r3, #31
 800ab96:	d403      	bmi.n	800aba0 <__lo0bits+0x4e>
 800ab98:	085b      	lsrs	r3, r3, #1
 800ab9a:	f100 0001 	add.w	r0, r0, #1
 800ab9e:	d003      	beq.n	800aba8 <__lo0bits+0x56>
 800aba0:	6013      	str	r3, [r2, #0]
 800aba2:	4770      	bx	lr
 800aba4:	2000      	movs	r0, #0
 800aba6:	4770      	bx	lr
 800aba8:	2020      	movs	r0, #32
 800abaa:	4770      	bx	lr

0800abac <__i2b>:
 800abac:	b510      	push	{r4, lr}
 800abae:	460c      	mov	r4, r1
 800abb0:	2101      	movs	r1, #1
 800abb2:	f7ff febd 	bl	800a930 <_Balloc>
 800abb6:	4602      	mov	r2, r0
 800abb8:	b928      	cbnz	r0, 800abc6 <__i2b+0x1a>
 800abba:	4b05      	ldr	r3, [pc, #20]	@ (800abd0 <__i2b+0x24>)
 800abbc:	4805      	ldr	r0, [pc, #20]	@ (800abd4 <__i2b+0x28>)
 800abbe:	f240 1145 	movw	r1, #325	@ 0x145
 800abc2:	f001 fdf1 	bl	800c7a8 <__assert_func>
 800abc6:	2301      	movs	r3, #1
 800abc8:	6144      	str	r4, [r0, #20]
 800abca:	6103      	str	r3, [r0, #16]
 800abcc:	bd10      	pop	{r4, pc}
 800abce:	bf00      	nop
 800abd0:	0800d11d 	.word	0x0800d11d
 800abd4:	0800d12e 	.word	0x0800d12e

0800abd8 <__multiply>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	4617      	mov	r7, r2
 800abde:	690a      	ldr	r2, [r1, #16]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	bfa8      	it	ge
 800abe6:	463b      	movge	r3, r7
 800abe8:	4689      	mov	r9, r1
 800abea:	bfa4      	itt	ge
 800abec:	460f      	movge	r7, r1
 800abee:	4699      	movge	r9, r3
 800abf0:	693d      	ldr	r5, [r7, #16]
 800abf2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	eb05 060a 	add.w	r6, r5, sl
 800abfe:	42b3      	cmp	r3, r6
 800ac00:	b085      	sub	sp, #20
 800ac02:	bfb8      	it	lt
 800ac04:	3101      	addlt	r1, #1
 800ac06:	f7ff fe93 	bl	800a930 <_Balloc>
 800ac0a:	b930      	cbnz	r0, 800ac1a <__multiply+0x42>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	4b41      	ldr	r3, [pc, #260]	@ (800ad14 <__multiply+0x13c>)
 800ac10:	4841      	ldr	r0, [pc, #260]	@ (800ad18 <__multiply+0x140>)
 800ac12:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ac16:	f001 fdc7 	bl	800c7a8 <__assert_func>
 800ac1a:	f100 0414 	add.w	r4, r0, #20
 800ac1e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ac22:	4623      	mov	r3, r4
 800ac24:	2200      	movs	r2, #0
 800ac26:	4573      	cmp	r3, lr
 800ac28:	d320      	bcc.n	800ac6c <__multiply+0x94>
 800ac2a:	f107 0814 	add.w	r8, r7, #20
 800ac2e:	f109 0114 	add.w	r1, r9, #20
 800ac32:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ac36:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ac3a:	9302      	str	r3, [sp, #8]
 800ac3c:	1beb      	subs	r3, r5, r7
 800ac3e:	3b15      	subs	r3, #21
 800ac40:	f023 0303 	bic.w	r3, r3, #3
 800ac44:	3304      	adds	r3, #4
 800ac46:	3715      	adds	r7, #21
 800ac48:	42bd      	cmp	r5, r7
 800ac4a:	bf38      	it	cc
 800ac4c:	2304      	movcc	r3, #4
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	9103      	str	r1, [sp, #12]
 800ac54:	428b      	cmp	r3, r1
 800ac56:	d80c      	bhi.n	800ac72 <__multiply+0x9a>
 800ac58:	2e00      	cmp	r6, #0
 800ac5a:	dd03      	ble.n	800ac64 <__multiply+0x8c>
 800ac5c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d055      	beq.n	800ad10 <__multiply+0x138>
 800ac64:	6106      	str	r6, [r0, #16]
 800ac66:	b005      	add	sp, #20
 800ac68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac6c:	f843 2b04 	str.w	r2, [r3], #4
 800ac70:	e7d9      	b.n	800ac26 <__multiply+0x4e>
 800ac72:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac76:	f1ba 0f00 	cmp.w	sl, #0
 800ac7a:	d01f      	beq.n	800acbc <__multiply+0xe4>
 800ac7c:	46c4      	mov	ip, r8
 800ac7e:	46a1      	mov	r9, r4
 800ac80:	2700      	movs	r7, #0
 800ac82:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac86:	f8d9 3000 	ldr.w	r3, [r9]
 800ac8a:	fa1f fb82 	uxth.w	fp, r2
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac94:	443b      	add	r3, r7
 800ac96:	f8d9 7000 	ldr.w	r7, [r9]
 800ac9a:	0c12      	lsrs	r2, r2, #16
 800ac9c:	0c3f      	lsrs	r7, r7, #16
 800ac9e:	fb0a 7202 	mla	r2, sl, r2, r7
 800aca2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acac:	4565      	cmp	r5, ip
 800acae:	f849 3b04 	str.w	r3, [r9], #4
 800acb2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800acb6:	d8e4      	bhi.n	800ac82 <__multiply+0xaa>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	50e7      	str	r7, [r4, r3]
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800acc2:	3104      	adds	r1, #4
 800acc4:	f1b9 0f00 	cmp.w	r9, #0
 800acc8:	d020      	beq.n	800ad0c <__multiply+0x134>
 800acca:	6823      	ldr	r3, [r4, #0]
 800accc:	4647      	mov	r7, r8
 800acce:	46a4      	mov	ip, r4
 800acd0:	f04f 0a00 	mov.w	sl, #0
 800acd4:	f8b7 b000 	ldrh.w	fp, [r7]
 800acd8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800acdc:	fb09 220b 	mla	r2, r9, fp, r2
 800ace0:	4452      	add	r2, sl
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace8:	f84c 3b04 	str.w	r3, [ip], #4
 800acec:	f857 3b04 	ldr.w	r3, [r7], #4
 800acf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acf4:	f8bc 3000 	ldrh.w	r3, [ip]
 800acf8:	fb09 330a 	mla	r3, r9, sl, r3
 800acfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ad00:	42bd      	cmp	r5, r7
 800ad02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad06:	d8e5      	bhi.n	800acd4 <__multiply+0xfc>
 800ad08:	9a01      	ldr	r2, [sp, #4]
 800ad0a:	50a3      	str	r3, [r4, r2]
 800ad0c:	3404      	adds	r4, #4
 800ad0e:	e79f      	b.n	800ac50 <__multiply+0x78>
 800ad10:	3e01      	subs	r6, #1
 800ad12:	e7a1      	b.n	800ac58 <__multiply+0x80>
 800ad14:	0800d11d 	.word	0x0800d11d
 800ad18:	0800d12e 	.word	0x0800d12e

0800ad1c <__pow5mult>:
 800ad1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad20:	4615      	mov	r5, r2
 800ad22:	f012 0203 	ands.w	r2, r2, #3
 800ad26:	4607      	mov	r7, r0
 800ad28:	460e      	mov	r6, r1
 800ad2a:	d007      	beq.n	800ad3c <__pow5mult+0x20>
 800ad2c:	4c25      	ldr	r4, [pc, #148]	@ (800adc4 <__pow5mult+0xa8>)
 800ad2e:	3a01      	subs	r2, #1
 800ad30:	2300      	movs	r3, #0
 800ad32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad36:	f7ff fe5d 	bl	800a9f4 <__multadd>
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	10ad      	asrs	r5, r5, #2
 800ad3e:	d03d      	beq.n	800adbc <__pow5mult+0xa0>
 800ad40:	69fc      	ldr	r4, [r7, #28]
 800ad42:	b97c      	cbnz	r4, 800ad64 <__pow5mult+0x48>
 800ad44:	2010      	movs	r0, #16
 800ad46:	f7ff fd3d 	bl	800a7c4 <malloc>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	61f8      	str	r0, [r7, #28]
 800ad4e:	b928      	cbnz	r0, 800ad5c <__pow5mult+0x40>
 800ad50:	4b1d      	ldr	r3, [pc, #116]	@ (800adc8 <__pow5mult+0xac>)
 800ad52:	481e      	ldr	r0, [pc, #120]	@ (800adcc <__pow5mult+0xb0>)
 800ad54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad58:	f001 fd26 	bl	800c7a8 <__assert_func>
 800ad5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad60:	6004      	str	r4, [r0, #0]
 800ad62:	60c4      	str	r4, [r0, #12]
 800ad64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad6c:	b94c      	cbnz	r4, 800ad82 <__pow5mult+0x66>
 800ad6e:	f240 2171 	movw	r1, #625	@ 0x271
 800ad72:	4638      	mov	r0, r7
 800ad74:	f7ff ff1a 	bl	800abac <__i2b>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad7e:	4604      	mov	r4, r0
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	f04f 0900 	mov.w	r9, #0
 800ad86:	07eb      	lsls	r3, r5, #31
 800ad88:	d50a      	bpl.n	800ada0 <__pow5mult+0x84>
 800ad8a:	4631      	mov	r1, r6
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ff22 	bl	800abd8 <__multiply>
 800ad94:	4631      	mov	r1, r6
 800ad96:	4680      	mov	r8, r0
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff fe09 	bl	800a9b0 <_Bfree>
 800ad9e:	4646      	mov	r6, r8
 800ada0:	106d      	asrs	r5, r5, #1
 800ada2:	d00b      	beq.n	800adbc <__pow5mult+0xa0>
 800ada4:	6820      	ldr	r0, [r4, #0]
 800ada6:	b938      	cbnz	r0, 800adb8 <__pow5mult+0x9c>
 800ada8:	4622      	mov	r2, r4
 800adaa:	4621      	mov	r1, r4
 800adac:	4638      	mov	r0, r7
 800adae:	f7ff ff13 	bl	800abd8 <__multiply>
 800adb2:	6020      	str	r0, [r4, #0]
 800adb4:	f8c0 9000 	str.w	r9, [r0]
 800adb8:	4604      	mov	r4, r0
 800adba:	e7e4      	b.n	800ad86 <__pow5mult+0x6a>
 800adbc:	4630      	mov	r0, r6
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adc2:	bf00      	nop
 800adc4:	0800d240 	.word	0x0800d240
 800adc8:	0800d0ae 	.word	0x0800d0ae
 800adcc:	0800d12e 	.word	0x0800d12e

0800add0 <__lshift>:
 800add0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add4:	460c      	mov	r4, r1
 800add6:	6849      	ldr	r1, [r1, #4]
 800add8:	6923      	ldr	r3, [r4, #16]
 800adda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adde:	68a3      	ldr	r3, [r4, #8]
 800ade0:	4607      	mov	r7, r0
 800ade2:	4691      	mov	r9, r2
 800ade4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ade8:	f108 0601 	add.w	r6, r8, #1
 800adec:	42b3      	cmp	r3, r6
 800adee:	db0b      	blt.n	800ae08 <__lshift+0x38>
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff fd9d 	bl	800a930 <_Balloc>
 800adf6:	4605      	mov	r5, r0
 800adf8:	b948      	cbnz	r0, 800ae0e <__lshift+0x3e>
 800adfa:	4602      	mov	r2, r0
 800adfc:	4b28      	ldr	r3, [pc, #160]	@ (800aea0 <__lshift+0xd0>)
 800adfe:	4829      	ldr	r0, [pc, #164]	@ (800aea4 <__lshift+0xd4>)
 800ae00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ae04:	f001 fcd0 	bl	800c7a8 <__assert_func>
 800ae08:	3101      	adds	r1, #1
 800ae0a:	005b      	lsls	r3, r3, #1
 800ae0c:	e7ee      	b.n	800adec <__lshift+0x1c>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f100 0114 	add.w	r1, r0, #20
 800ae14:	f100 0210 	add.w	r2, r0, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	4553      	cmp	r3, sl
 800ae1c:	db33      	blt.n	800ae86 <__lshift+0xb6>
 800ae1e:	6920      	ldr	r0, [r4, #16]
 800ae20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae24:	f104 0314 	add.w	r3, r4, #20
 800ae28:	f019 091f 	ands.w	r9, r9, #31
 800ae2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae34:	d02b      	beq.n	800ae8e <__lshift+0xbe>
 800ae36:	f1c9 0e20 	rsb	lr, r9, #32
 800ae3a:	468a      	mov	sl, r1
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	fa00 f009 	lsl.w	r0, r0, r9
 800ae44:	4310      	orrs	r0, r2
 800ae46:	f84a 0b04 	str.w	r0, [sl], #4
 800ae4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4e:	459c      	cmp	ip, r3
 800ae50:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae54:	d8f3      	bhi.n	800ae3e <__lshift+0x6e>
 800ae56:	ebac 0304 	sub.w	r3, ip, r4
 800ae5a:	3b15      	subs	r3, #21
 800ae5c:	f023 0303 	bic.w	r3, r3, #3
 800ae60:	3304      	adds	r3, #4
 800ae62:	f104 0015 	add.w	r0, r4, #21
 800ae66:	4560      	cmp	r0, ip
 800ae68:	bf88      	it	hi
 800ae6a:	2304      	movhi	r3, #4
 800ae6c:	50ca      	str	r2, [r1, r3]
 800ae6e:	b10a      	cbz	r2, 800ae74 <__lshift+0xa4>
 800ae70:	f108 0602 	add.w	r6, r8, #2
 800ae74:	3e01      	subs	r6, #1
 800ae76:	4638      	mov	r0, r7
 800ae78:	612e      	str	r6, [r5, #16]
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	f7ff fd98 	bl	800a9b0 <_Bfree>
 800ae80:	4628      	mov	r0, r5
 800ae82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae86:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	e7c5      	b.n	800ae1a <__lshift+0x4a>
 800ae8e:	3904      	subs	r1, #4
 800ae90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae94:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae98:	459c      	cmp	ip, r3
 800ae9a:	d8f9      	bhi.n	800ae90 <__lshift+0xc0>
 800ae9c:	e7ea      	b.n	800ae74 <__lshift+0xa4>
 800ae9e:	bf00      	nop
 800aea0:	0800d11d 	.word	0x0800d11d
 800aea4:	0800d12e 	.word	0x0800d12e

0800aea8 <__mcmp>:
 800aea8:	690a      	ldr	r2, [r1, #16]
 800aeaa:	4603      	mov	r3, r0
 800aeac:	6900      	ldr	r0, [r0, #16]
 800aeae:	1a80      	subs	r0, r0, r2
 800aeb0:	b530      	push	{r4, r5, lr}
 800aeb2:	d10e      	bne.n	800aed2 <__mcmp+0x2a>
 800aeb4:	3314      	adds	r3, #20
 800aeb6:	3114      	adds	r1, #20
 800aeb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aebc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aec8:	4295      	cmp	r5, r2
 800aeca:	d003      	beq.n	800aed4 <__mcmp+0x2c>
 800aecc:	d205      	bcs.n	800aeda <__mcmp+0x32>
 800aece:	f04f 30ff 	mov.w	r0, #4294967295
 800aed2:	bd30      	pop	{r4, r5, pc}
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	d3f3      	bcc.n	800aec0 <__mcmp+0x18>
 800aed8:	e7fb      	b.n	800aed2 <__mcmp+0x2a>
 800aeda:	2001      	movs	r0, #1
 800aedc:	e7f9      	b.n	800aed2 <__mcmp+0x2a>
	...

0800aee0 <__mdiff>:
 800aee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee4:	4689      	mov	r9, r1
 800aee6:	4606      	mov	r6, r0
 800aee8:	4611      	mov	r1, r2
 800aeea:	4648      	mov	r0, r9
 800aeec:	4614      	mov	r4, r2
 800aeee:	f7ff ffdb 	bl	800aea8 <__mcmp>
 800aef2:	1e05      	subs	r5, r0, #0
 800aef4:	d112      	bne.n	800af1c <__mdiff+0x3c>
 800aef6:	4629      	mov	r1, r5
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff fd19 	bl	800a930 <_Balloc>
 800aefe:	4602      	mov	r2, r0
 800af00:	b928      	cbnz	r0, 800af0e <__mdiff+0x2e>
 800af02:	4b3f      	ldr	r3, [pc, #252]	@ (800b000 <__mdiff+0x120>)
 800af04:	f240 2137 	movw	r1, #567	@ 0x237
 800af08:	483e      	ldr	r0, [pc, #248]	@ (800b004 <__mdiff+0x124>)
 800af0a:	f001 fc4d 	bl	800c7a8 <__assert_func>
 800af0e:	2301      	movs	r3, #1
 800af10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af14:	4610      	mov	r0, r2
 800af16:	b003      	add	sp, #12
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	bfbc      	itt	lt
 800af1e:	464b      	movlt	r3, r9
 800af20:	46a1      	movlt	r9, r4
 800af22:	4630      	mov	r0, r6
 800af24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800af28:	bfba      	itte	lt
 800af2a:	461c      	movlt	r4, r3
 800af2c:	2501      	movlt	r5, #1
 800af2e:	2500      	movge	r5, #0
 800af30:	f7ff fcfe 	bl	800a930 <_Balloc>
 800af34:	4602      	mov	r2, r0
 800af36:	b918      	cbnz	r0, 800af40 <__mdiff+0x60>
 800af38:	4b31      	ldr	r3, [pc, #196]	@ (800b000 <__mdiff+0x120>)
 800af3a:	f240 2145 	movw	r1, #581	@ 0x245
 800af3e:	e7e3      	b.n	800af08 <__mdiff+0x28>
 800af40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800af44:	6926      	ldr	r6, [r4, #16]
 800af46:	60c5      	str	r5, [r0, #12]
 800af48:	f109 0310 	add.w	r3, r9, #16
 800af4c:	f109 0514 	add.w	r5, r9, #20
 800af50:	f104 0e14 	add.w	lr, r4, #20
 800af54:	f100 0b14 	add.w	fp, r0, #20
 800af58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	46d9      	mov	r9, fp
 800af64:	f04f 0c00 	mov.w	ip, #0
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af72:	9301      	str	r3, [sp, #4]
 800af74:	fa1f f38a 	uxth.w	r3, sl
 800af78:	4619      	mov	r1, r3
 800af7a:	b283      	uxth	r3, r0
 800af7c:	1acb      	subs	r3, r1, r3
 800af7e:	0c00      	lsrs	r0, r0, #16
 800af80:	4463      	add	r3, ip
 800af82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af90:	4576      	cmp	r6, lr
 800af92:	f849 3b04 	str.w	r3, [r9], #4
 800af96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af9a:	d8e5      	bhi.n	800af68 <__mdiff+0x88>
 800af9c:	1b33      	subs	r3, r6, r4
 800af9e:	3b15      	subs	r3, #21
 800afa0:	f023 0303 	bic.w	r3, r3, #3
 800afa4:	3415      	adds	r4, #21
 800afa6:	3304      	adds	r3, #4
 800afa8:	42a6      	cmp	r6, r4
 800afaa:	bf38      	it	cc
 800afac:	2304      	movcc	r3, #4
 800afae:	441d      	add	r5, r3
 800afb0:	445b      	add	r3, fp
 800afb2:	461e      	mov	r6, r3
 800afb4:	462c      	mov	r4, r5
 800afb6:	4544      	cmp	r4, r8
 800afb8:	d30e      	bcc.n	800afd8 <__mdiff+0xf8>
 800afba:	f108 0103 	add.w	r1, r8, #3
 800afbe:	1b49      	subs	r1, r1, r5
 800afc0:	f021 0103 	bic.w	r1, r1, #3
 800afc4:	3d03      	subs	r5, #3
 800afc6:	45a8      	cmp	r8, r5
 800afc8:	bf38      	it	cc
 800afca:	2100      	movcc	r1, #0
 800afcc:	440b      	add	r3, r1
 800afce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afd2:	b191      	cbz	r1, 800affa <__mdiff+0x11a>
 800afd4:	6117      	str	r7, [r2, #16]
 800afd6:	e79d      	b.n	800af14 <__mdiff+0x34>
 800afd8:	f854 1b04 	ldr.w	r1, [r4], #4
 800afdc:	46e6      	mov	lr, ip
 800afde:	0c08      	lsrs	r0, r1, #16
 800afe0:	fa1c fc81 	uxtah	ip, ip, r1
 800afe4:	4471      	add	r1, lr
 800afe6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800afea:	b289      	uxth	r1, r1
 800afec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aff0:	f846 1b04 	str.w	r1, [r6], #4
 800aff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aff8:	e7dd      	b.n	800afb6 <__mdiff+0xd6>
 800affa:	3f01      	subs	r7, #1
 800affc:	e7e7      	b.n	800afce <__mdiff+0xee>
 800affe:	bf00      	nop
 800b000:	0800d11d 	.word	0x0800d11d
 800b004:	0800d12e 	.word	0x0800d12e

0800b008 <__ulp>:
 800b008:	b082      	sub	sp, #8
 800b00a:	ed8d 0b00 	vstr	d0, [sp]
 800b00e:	9a01      	ldr	r2, [sp, #4]
 800b010:	4b0f      	ldr	r3, [pc, #60]	@ (800b050 <__ulp+0x48>)
 800b012:	4013      	ands	r3, r2
 800b014:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dc08      	bgt.n	800b02e <__ulp+0x26>
 800b01c:	425b      	negs	r3, r3
 800b01e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b022:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b026:	da04      	bge.n	800b032 <__ulp+0x2a>
 800b028:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b02c:	4113      	asrs	r3, r2
 800b02e:	2200      	movs	r2, #0
 800b030:	e008      	b.n	800b044 <__ulp+0x3c>
 800b032:	f1a2 0314 	sub.w	r3, r2, #20
 800b036:	2b1e      	cmp	r3, #30
 800b038:	bfda      	itte	le
 800b03a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b03e:	40da      	lsrle	r2, r3
 800b040:	2201      	movgt	r2, #1
 800b042:	2300      	movs	r3, #0
 800b044:	4619      	mov	r1, r3
 800b046:	4610      	mov	r0, r2
 800b048:	ec41 0b10 	vmov	d0, r0, r1
 800b04c:	b002      	add	sp, #8
 800b04e:	4770      	bx	lr
 800b050:	7ff00000 	.word	0x7ff00000

0800b054 <__b2d>:
 800b054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b058:	6906      	ldr	r6, [r0, #16]
 800b05a:	f100 0814 	add.w	r8, r0, #20
 800b05e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b062:	1f37      	subs	r7, r6, #4
 800b064:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b068:	4610      	mov	r0, r2
 800b06a:	f7ff fd53 	bl	800ab14 <__hi0bits>
 800b06e:	f1c0 0320 	rsb	r3, r0, #32
 800b072:	280a      	cmp	r0, #10
 800b074:	600b      	str	r3, [r1, #0]
 800b076:	491b      	ldr	r1, [pc, #108]	@ (800b0e4 <__b2d+0x90>)
 800b078:	dc15      	bgt.n	800b0a6 <__b2d+0x52>
 800b07a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b07e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b082:	45b8      	cmp	r8, r7
 800b084:	ea43 0501 	orr.w	r5, r3, r1
 800b088:	bf34      	ite	cc
 800b08a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b08e:	2300      	movcs	r3, #0
 800b090:	3015      	adds	r0, #21
 800b092:	fa02 f000 	lsl.w	r0, r2, r0
 800b096:	fa23 f30c 	lsr.w	r3, r3, ip
 800b09a:	4303      	orrs	r3, r0
 800b09c:	461c      	mov	r4, r3
 800b09e:	ec45 4b10 	vmov	d0, r4, r5
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	45b8      	cmp	r8, r7
 800b0a8:	bf3a      	itte	cc
 800b0aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b0ae:	f1a6 0708 	subcc.w	r7, r6, #8
 800b0b2:	2300      	movcs	r3, #0
 800b0b4:	380b      	subs	r0, #11
 800b0b6:	d012      	beq.n	800b0de <__b2d+0x8a>
 800b0b8:	f1c0 0120 	rsb	r1, r0, #32
 800b0bc:	fa23 f401 	lsr.w	r4, r3, r1
 800b0c0:	4082      	lsls	r2, r0
 800b0c2:	4322      	orrs	r2, r4
 800b0c4:	4547      	cmp	r7, r8
 800b0c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b0ca:	bf8c      	ite	hi
 800b0cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b0d0:	2200      	movls	r2, #0
 800b0d2:	4083      	lsls	r3, r0
 800b0d4:	40ca      	lsrs	r2, r1
 800b0d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	e7de      	b.n	800b09c <__b2d+0x48>
 800b0de:	ea42 0501 	orr.w	r5, r2, r1
 800b0e2:	e7db      	b.n	800b09c <__b2d+0x48>
 800b0e4:	3ff00000 	.word	0x3ff00000

0800b0e8 <__d2b>:
 800b0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	460f      	mov	r7, r1
 800b0ee:	2101      	movs	r1, #1
 800b0f0:	ec59 8b10 	vmov	r8, r9, d0
 800b0f4:	4616      	mov	r6, r2
 800b0f6:	f7ff fc1b 	bl	800a930 <_Balloc>
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	b930      	cbnz	r0, 800b10c <__d2b+0x24>
 800b0fe:	4602      	mov	r2, r0
 800b100:	4b23      	ldr	r3, [pc, #140]	@ (800b190 <__d2b+0xa8>)
 800b102:	4824      	ldr	r0, [pc, #144]	@ (800b194 <__d2b+0xac>)
 800b104:	f240 310f 	movw	r1, #783	@ 0x30f
 800b108:	f001 fb4e 	bl	800c7a8 <__assert_func>
 800b10c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b114:	b10d      	cbz	r5, 800b11a <__d2b+0x32>
 800b116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	f1b8 0300 	subs.w	r3, r8, #0
 800b120:	d023      	beq.n	800b16a <__d2b+0x82>
 800b122:	4668      	mov	r0, sp
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	f7ff fd14 	bl	800ab52 <__lo0bits>
 800b12a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b12e:	b1d0      	cbz	r0, 800b166 <__d2b+0x7e>
 800b130:	f1c0 0320 	rsb	r3, r0, #32
 800b134:	fa02 f303 	lsl.w	r3, r2, r3
 800b138:	430b      	orrs	r3, r1
 800b13a:	40c2      	lsrs	r2, r0
 800b13c:	6163      	str	r3, [r4, #20]
 800b13e:	9201      	str	r2, [sp, #4]
 800b140:	9b01      	ldr	r3, [sp, #4]
 800b142:	61a3      	str	r3, [r4, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf0c      	ite	eq
 800b148:	2201      	moveq	r2, #1
 800b14a:	2202      	movne	r2, #2
 800b14c:	6122      	str	r2, [r4, #16]
 800b14e:	b1a5      	cbz	r5, 800b17a <__d2b+0x92>
 800b150:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b154:	4405      	add	r5, r0
 800b156:	603d      	str	r5, [r7, #0]
 800b158:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b15c:	6030      	str	r0, [r6, #0]
 800b15e:	4620      	mov	r0, r4
 800b160:	b003      	add	sp, #12
 800b162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b166:	6161      	str	r1, [r4, #20]
 800b168:	e7ea      	b.n	800b140 <__d2b+0x58>
 800b16a:	a801      	add	r0, sp, #4
 800b16c:	f7ff fcf1 	bl	800ab52 <__lo0bits>
 800b170:	9b01      	ldr	r3, [sp, #4]
 800b172:	6163      	str	r3, [r4, #20]
 800b174:	3020      	adds	r0, #32
 800b176:	2201      	movs	r2, #1
 800b178:	e7e8      	b.n	800b14c <__d2b+0x64>
 800b17a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b17e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b182:	6038      	str	r0, [r7, #0]
 800b184:	6918      	ldr	r0, [r3, #16]
 800b186:	f7ff fcc5 	bl	800ab14 <__hi0bits>
 800b18a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b18e:	e7e5      	b.n	800b15c <__d2b+0x74>
 800b190:	0800d11d 	.word	0x0800d11d
 800b194:	0800d12e 	.word	0x0800d12e

0800b198 <__ratio>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	b085      	sub	sp, #20
 800b19e:	e9cd 1000 	strd	r1, r0, [sp]
 800b1a2:	a902      	add	r1, sp, #8
 800b1a4:	f7ff ff56 	bl	800b054 <__b2d>
 800b1a8:	9800      	ldr	r0, [sp, #0]
 800b1aa:	a903      	add	r1, sp, #12
 800b1ac:	ec55 4b10 	vmov	r4, r5, d0
 800b1b0:	f7ff ff50 	bl	800b054 <__b2d>
 800b1b4:	9b01      	ldr	r3, [sp, #4]
 800b1b6:	6919      	ldr	r1, [r3, #16]
 800b1b8:	9b00      	ldr	r3, [sp, #0]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	1ac9      	subs	r1, r1, r3
 800b1be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b1c2:	1a9b      	subs	r3, r3, r2
 800b1c4:	ec5b ab10 	vmov	sl, fp, d0
 800b1c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	bfce      	itee	gt
 800b1d0:	462a      	movgt	r2, r5
 800b1d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b1d6:	465a      	movle	r2, fp
 800b1d8:	462f      	mov	r7, r5
 800b1da:	46d9      	mov	r9, fp
 800b1dc:	bfcc      	ite	gt
 800b1de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	f7f5 fb2d 	bl	800084c <__aeabi_ddiv>
 800b1f2:	ec41 0b10 	vmov	d0, r0, r1
 800b1f6:	b005      	add	sp, #20
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1fc <__copybits>:
 800b1fc:	3901      	subs	r1, #1
 800b1fe:	b570      	push	{r4, r5, r6, lr}
 800b200:	1149      	asrs	r1, r1, #5
 800b202:	6914      	ldr	r4, [r2, #16]
 800b204:	3101      	adds	r1, #1
 800b206:	f102 0314 	add.w	r3, r2, #20
 800b20a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b20e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b212:	1f05      	subs	r5, r0, #4
 800b214:	42a3      	cmp	r3, r4
 800b216:	d30c      	bcc.n	800b232 <__copybits+0x36>
 800b218:	1aa3      	subs	r3, r4, r2
 800b21a:	3b11      	subs	r3, #17
 800b21c:	f023 0303 	bic.w	r3, r3, #3
 800b220:	3211      	adds	r2, #17
 800b222:	42a2      	cmp	r2, r4
 800b224:	bf88      	it	hi
 800b226:	2300      	movhi	r3, #0
 800b228:	4418      	add	r0, r3
 800b22a:	2300      	movs	r3, #0
 800b22c:	4288      	cmp	r0, r1
 800b22e:	d305      	bcc.n	800b23c <__copybits+0x40>
 800b230:	bd70      	pop	{r4, r5, r6, pc}
 800b232:	f853 6b04 	ldr.w	r6, [r3], #4
 800b236:	f845 6f04 	str.w	r6, [r5, #4]!
 800b23a:	e7eb      	b.n	800b214 <__copybits+0x18>
 800b23c:	f840 3b04 	str.w	r3, [r0], #4
 800b240:	e7f4      	b.n	800b22c <__copybits+0x30>

0800b242 <__any_on>:
 800b242:	f100 0214 	add.w	r2, r0, #20
 800b246:	6900      	ldr	r0, [r0, #16]
 800b248:	114b      	asrs	r3, r1, #5
 800b24a:	4298      	cmp	r0, r3
 800b24c:	b510      	push	{r4, lr}
 800b24e:	db11      	blt.n	800b274 <__any_on+0x32>
 800b250:	dd0a      	ble.n	800b268 <__any_on+0x26>
 800b252:	f011 011f 	ands.w	r1, r1, #31
 800b256:	d007      	beq.n	800b268 <__any_on+0x26>
 800b258:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b25c:	fa24 f001 	lsr.w	r0, r4, r1
 800b260:	fa00 f101 	lsl.w	r1, r0, r1
 800b264:	428c      	cmp	r4, r1
 800b266:	d10b      	bne.n	800b280 <__any_on+0x3e>
 800b268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d803      	bhi.n	800b278 <__any_on+0x36>
 800b270:	2000      	movs	r0, #0
 800b272:	bd10      	pop	{r4, pc}
 800b274:	4603      	mov	r3, r0
 800b276:	e7f7      	b.n	800b268 <__any_on+0x26>
 800b278:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b27c:	2900      	cmp	r1, #0
 800b27e:	d0f5      	beq.n	800b26c <__any_on+0x2a>
 800b280:	2001      	movs	r0, #1
 800b282:	e7f6      	b.n	800b272 <__any_on+0x30>

0800b284 <sulp>:
 800b284:	b570      	push	{r4, r5, r6, lr}
 800b286:	4604      	mov	r4, r0
 800b288:	460d      	mov	r5, r1
 800b28a:	ec45 4b10 	vmov	d0, r4, r5
 800b28e:	4616      	mov	r6, r2
 800b290:	f7ff feba 	bl	800b008 <__ulp>
 800b294:	ec51 0b10 	vmov	r0, r1, d0
 800b298:	b17e      	cbz	r6, 800b2ba <sulp+0x36>
 800b29a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b29e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dd09      	ble.n	800b2ba <sulp+0x36>
 800b2a6:	051b      	lsls	r3, r3, #20
 800b2a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b2ac:	2400      	movs	r4, #0
 800b2ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	462b      	mov	r3, r5
 800b2b6:	f7f5 f99f 	bl	80005f8 <__aeabi_dmul>
 800b2ba:	ec41 0b10 	vmov	d0, r0, r1
 800b2be:	bd70      	pop	{r4, r5, r6, pc}

0800b2c0 <_strtod_l>:
 800b2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c4:	b09f      	sub	sp, #124	@ 0x7c
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b2ce:	9005      	str	r0, [sp, #20]
 800b2d0:	f04f 0a00 	mov.w	sl, #0
 800b2d4:	f04f 0b00 	mov.w	fp, #0
 800b2d8:	460a      	mov	r2, r1
 800b2da:	9219      	str	r2, [sp, #100]	@ 0x64
 800b2dc:	7811      	ldrb	r1, [r2, #0]
 800b2de:	292b      	cmp	r1, #43	@ 0x2b
 800b2e0:	d04a      	beq.n	800b378 <_strtod_l+0xb8>
 800b2e2:	d838      	bhi.n	800b356 <_strtod_l+0x96>
 800b2e4:	290d      	cmp	r1, #13
 800b2e6:	d832      	bhi.n	800b34e <_strtod_l+0x8e>
 800b2e8:	2908      	cmp	r1, #8
 800b2ea:	d832      	bhi.n	800b352 <_strtod_l+0x92>
 800b2ec:	2900      	cmp	r1, #0
 800b2ee:	d03b      	beq.n	800b368 <_strtod_l+0xa8>
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b2f6:	782a      	ldrb	r2, [r5, #0]
 800b2f8:	2a30      	cmp	r2, #48	@ 0x30
 800b2fa:	f040 80b2 	bne.w	800b462 <_strtod_l+0x1a2>
 800b2fe:	786a      	ldrb	r2, [r5, #1]
 800b300:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b304:	2a58      	cmp	r2, #88	@ 0x58
 800b306:	d16e      	bne.n	800b3e6 <_strtod_l+0x126>
 800b308:	9302      	str	r3, [sp, #8]
 800b30a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	4a8f      	ldr	r2, [pc, #572]	@ (800b550 <_strtod_l+0x290>)
 800b314:	9805      	ldr	r0, [sp, #20]
 800b316:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b318:	a919      	add	r1, sp, #100	@ 0x64
 800b31a:	f001 fadf 	bl	800c8dc <__gethex>
 800b31e:	f010 060f 	ands.w	r6, r0, #15
 800b322:	4604      	mov	r4, r0
 800b324:	d005      	beq.n	800b332 <_strtod_l+0x72>
 800b326:	2e06      	cmp	r6, #6
 800b328:	d128      	bne.n	800b37c <_strtod_l+0xbc>
 800b32a:	3501      	adds	r5, #1
 800b32c:	2300      	movs	r3, #0
 800b32e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b330:	930e      	str	r3, [sp, #56]	@ 0x38
 800b332:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b334:	2b00      	cmp	r3, #0
 800b336:	f040 858e 	bne.w	800be56 <_strtod_l+0xb96>
 800b33a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b33c:	b1cb      	cbz	r3, 800b372 <_strtod_l+0xb2>
 800b33e:	4652      	mov	r2, sl
 800b340:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b344:	ec43 2b10 	vmov	d0, r2, r3
 800b348:	b01f      	add	sp, #124	@ 0x7c
 800b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34e:	2920      	cmp	r1, #32
 800b350:	d1ce      	bne.n	800b2f0 <_strtod_l+0x30>
 800b352:	3201      	adds	r2, #1
 800b354:	e7c1      	b.n	800b2da <_strtod_l+0x1a>
 800b356:	292d      	cmp	r1, #45	@ 0x2d
 800b358:	d1ca      	bne.n	800b2f0 <_strtod_l+0x30>
 800b35a:	2101      	movs	r1, #1
 800b35c:	910e      	str	r1, [sp, #56]	@ 0x38
 800b35e:	1c51      	adds	r1, r2, #1
 800b360:	9119      	str	r1, [sp, #100]	@ 0x64
 800b362:	7852      	ldrb	r2, [r2, #1]
 800b364:	2a00      	cmp	r2, #0
 800b366:	d1c5      	bne.n	800b2f4 <_strtod_l+0x34>
 800b368:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b36a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f040 8570 	bne.w	800be52 <_strtod_l+0xb92>
 800b372:	4652      	mov	r2, sl
 800b374:	465b      	mov	r3, fp
 800b376:	e7e5      	b.n	800b344 <_strtod_l+0x84>
 800b378:	2100      	movs	r1, #0
 800b37a:	e7ef      	b.n	800b35c <_strtod_l+0x9c>
 800b37c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b37e:	b13a      	cbz	r2, 800b390 <_strtod_l+0xd0>
 800b380:	2135      	movs	r1, #53	@ 0x35
 800b382:	a81c      	add	r0, sp, #112	@ 0x70
 800b384:	f7ff ff3a 	bl	800b1fc <__copybits>
 800b388:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b38a:	9805      	ldr	r0, [sp, #20]
 800b38c:	f7ff fb10 	bl	800a9b0 <_Bfree>
 800b390:	3e01      	subs	r6, #1
 800b392:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b394:	2e04      	cmp	r6, #4
 800b396:	d806      	bhi.n	800b3a6 <_strtod_l+0xe6>
 800b398:	e8df f006 	tbb	[pc, r6]
 800b39c:	201d0314 	.word	0x201d0314
 800b3a0:	14          	.byte	0x14
 800b3a1:	00          	.byte	0x00
 800b3a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b3a6:	05e1      	lsls	r1, r4, #23
 800b3a8:	bf48      	it	mi
 800b3aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b3ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b3b2:	0d1b      	lsrs	r3, r3, #20
 800b3b4:	051b      	lsls	r3, r3, #20
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1bb      	bne.n	800b332 <_strtod_l+0x72>
 800b3ba:	f7fe fb1f 	bl	80099fc <__errno>
 800b3be:	2322      	movs	r3, #34	@ 0x22
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	e7b6      	b.n	800b332 <_strtod_l+0x72>
 800b3c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b3c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b3cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b3d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b3d4:	e7e7      	b.n	800b3a6 <_strtod_l+0xe6>
 800b3d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b558 <_strtod_l+0x298>
 800b3da:	e7e4      	b.n	800b3a6 <_strtod_l+0xe6>
 800b3dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b3e0:	f04f 3aff 	mov.w	sl, #4294967295
 800b3e4:	e7df      	b.n	800b3a6 <_strtod_l+0xe6>
 800b3e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800b3ec:	785b      	ldrb	r3, [r3, #1]
 800b3ee:	2b30      	cmp	r3, #48	@ 0x30
 800b3f0:	d0f9      	beq.n	800b3e6 <_strtod_l+0x126>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d09d      	beq.n	800b332 <_strtod_l+0x72>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	2700      	movs	r7, #0
 800b3fa:	9308      	str	r3, [sp, #32]
 800b3fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b3fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b400:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b402:	46b9      	mov	r9, r7
 800b404:	220a      	movs	r2, #10
 800b406:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b408:	7805      	ldrb	r5, [r0, #0]
 800b40a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b40e:	b2d9      	uxtb	r1, r3
 800b410:	2909      	cmp	r1, #9
 800b412:	d928      	bls.n	800b466 <_strtod_l+0x1a6>
 800b414:	494f      	ldr	r1, [pc, #316]	@ (800b554 <_strtod_l+0x294>)
 800b416:	2201      	movs	r2, #1
 800b418:	f001 f97a 	bl	800c710 <strncmp>
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d032      	beq.n	800b486 <_strtod_l+0x1c6>
 800b420:	2000      	movs	r0, #0
 800b422:	462a      	mov	r2, r5
 800b424:	900a      	str	r0, [sp, #40]	@ 0x28
 800b426:	464d      	mov	r5, r9
 800b428:	4603      	mov	r3, r0
 800b42a:	2a65      	cmp	r2, #101	@ 0x65
 800b42c:	d001      	beq.n	800b432 <_strtod_l+0x172>
 800b42e:	2a45      	cmp	r2, #69	@ 0x45
 800b430:	d114      	bne.n	800b45c <_strtod_l+0x19c>
 800b432:	b91d      	cbnz	r5, 800b43c <_strtod_l+0x17c>
 800b434:	9a08      	ldr	r2, [sp, #32]
 800b436:	4302      	orrs	r2, r0
 800b438:	d096      	beq.n	800b368 <_strtod_l+0xa8>
 800b43a:	2500      	movs	r5, #0
 800b43c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b43e:	1c62      	adds	r2, r4, #1
 800b440:	9219      	str	r2, [sp, #100]	@ 0x64
 800b442:	7862      	ldrb	r2, [r4, #1]
 800b444:	2a2b      	cmp	r2, #43	@ 0x2b
 800b446:	d07a      	beq.n	800b53e <_strtod_l+0x27e>
 800b448:	2a2d      	cmp	r2, #45	@ 0x2d
 800b44a:	d07e      	beq.n	800b54a <_strtod_l+0x28a>
 800b44c:	f04f 0c00 	mov.w	ip, #0
 800b450:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b454:	2909      	cmp	r1, #9
 800b456:	f240 8085 	bls.w	800b564 <_strtod_l+0x2a4>
 800b45a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b45c:	f04f 0800 	mov.w	r8, #0
 800b460:	e0a5      	b.n	800b5ae <_strtod_l+0x2ee>
 800b462:	2300      	movs	r3, #0
 800b464:	e7c8      	b.n	800b3f8 <_strtod_l+0x138>
 800b466:	f1b9 0f08 	cmp.w	r9, #8
 800b46a:	bfd8      	it	le
 800b46c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b46e:	f100 0001 	add.w	r0, r0, #1
 800b472:	bfda      	itte	le
 800b474:	fb02 3301 	mlale	r3, r2, r1, r3
 800b478:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b47a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b47e:	f109 0901 	add.w	r9, r9, #1
 800b482:	9019      	str	r0, [sp, #100]	@ 0x64
 800b484:	e7bf      	b.n	800b406 <_strtod_l+0x146>
 800b486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b488:	1c5a      	adds	r2, r3, #1
 800b48a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b48c:	785a      	ldrb	r2, [r3, #1]
 800b48e:	f1b9 0f00 	cmp.w	r9, #0
 800b492:	d03b      	beq.n	800b50c <_strtod_l+0x24c>
 800b494:	900a      	str	r0, [sp, #40]	@ 0x28
 800b496:	464d      	mov	r5, r9
 800b498:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b49c:	2b09      	cmp	r3, #9
 800b49e:	d912      	bls.n	800b4c6 <_strtod_l+0x206>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e7c2      	b.n	800b42a <_strtod_l+0x16a>
 800b4a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4aa:	785a      	ldrb	r2, [r3, #1]
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	2a30      	cmp	r2, #48	@ 0x30
 800b4b0:	d0f8      	beq.n	800b4a4 <_strtod_l+0x1e4>
 800b4b2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b4b6:	2b08      	cmp	r3, #8
 800b4b8:	f200 84d2 	bhi.w	800be60 <_strtod_l+0xba0>
 800b4bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b4be:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	3a30      	subs	r2, #48	@ 0x30
 800b4c8:	f100 0301 	add.w	r3, r0, #1
 800b4cc:	d018      	beq.n	800b500 <_strtod_l+0x240>
 800b4ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b4d0:	4419      	add	r1, r3
 800b4d2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b4d4:	462e      	mov	r6, r5
 800b4d6:	f04f 0e0a 	mov.w	lr, #10
 800b4da:	1c71      	adds	r1, r6, #1
 800b4dc:	eba1 0c05 	sub.w	ip, r1, r5
 800b4e0:	4563      	cmp	r3, ip
 800b4e2:	dc15      	bgt.n	800b510 <_strtod_l+0x250>
 800b4e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b4e8:	182b      	adds	r3, r5, r0
 800b4ea:	2b08      	cmp	r3, #8
 800b4ec:	f105 0501 	add.w	r5, r5, #1
 800b4f0:	4405      	add	r5, r0
 800b4f2:	dc1a      	bgt.n	800b52a <_strtod_l+0x26a>
 800b4f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4f6:	230a      	movs	r3, #10
 800b4f8:	fb03 2301 	mla	r3, r3, r1, r2
 800b4fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4fe:	2300      	movs	r3, #0
 800b500:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b502:	1c51      	adds	r1, r2, #1
 800b504:	9119      	str	r1, [sp, #100]	@ 0x64
 800b506:	7852      	ldrb	r2, [r2, #1]
 800b508:	4618      	mov	r0, r3
 800b50a:	e7c5      	b.n	800b498 <_strtod_l+0x1d8>
 800b50c:	4648      	mov	r0, r9
 800b50e:	e7ce      	b.n	800b4ae <_strtod_l+0x1ee>
 800b510:	2e08      	cmp	r6, #8
 800b512:	dc05      	bgt.n	800b520 <_strtod_l+0x260>
 800b514:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b516:	fb0e f606 	mul.w	r6, lr, r6
 800b51a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b51c:	460e      	mov	r6, r1
 800b51e:	e7dc      	b.n	800b4da <_strtod_l+0x21a>
 800b520:	2910      	cmp	r1, #16
 800b522:	bfd8      	it	le
 800b524:	fb0e f707 	mulle.w	r7, lr, r7
 800b528:	e7f8      	b.n	800b51c <_strtod_l+0x25c>
 800b52a:	2b0f      	cmp	r3, #15
 800b52c:	bfdc      	itt	le
 800b52e:	230a      	movle	r3, #10
 800b530:	fb03 2707 	mlale	r7, r3, r7, r2
 800b534:	e7e3      	b.n	800b4fe <_strtod_l+0x23e>
 800b536:	2300      	movs	r3, #0
 800b538:	930a      	str	r3, [sp, #40]	@ 0x28
 800b53a:	2301      	movs	r3, #1
 800b53c:	e77a      	b.n	800b434 <_strtod_l+0x174>
 800b53e:	f04f 0c00 	mov.w	ip, #0
 800b542:	1ca2      	adds	r2, r4, #2
 800b544:	9219      	str	r2, [sp, #100]	@ 0x64
 800b546:	78a2      	ldrb	r2, [r4, #2]
 800b548:	e782      	b.n	800b450 <_strtod_l+0x190>
 800b54a:	f04f 0c01 	mov.w	ip, #1
 800b54e:	e7f8      	b.n	800b542 <_strtod_l+0x282>
 800b550:	0800d354 	.word	0x0800d354
 800b554:	0800d187 	.word	0x0800d187
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b55e:	1c51      	adds	r1, r2, #1
 800b560:	9119      	str	r1, [sp, #100]	@ 0x64
 800b562:	7852      	ldrb	r2, [r2, #1]
 800b564:	2a30      	cmp	r2, #48	@ 0x30
 800b566:	d0f9      	beq.n	800b55c <_strtod_l+0x29c>
 800b568:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b56c:	2908      	cmp	r1, #8
 800b56e:	f63f af75 	bhi.w	800b45c <_strtod_l+0x19c>
 800b572:	3a30      	subs	r2, #48	@ 0x30
 800b574:	9209      	str	r2, [sp, #36]	@ 0x24
 800b576:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b578:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b57a:	f04f 080a 	mov.w	r8, #10
 800b57e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b580:	1c56      	adds	r6, r2, #1
 800b582:	9619      	str	r6, [sp, #100]	@ 0x64
 800b584:	7852      	ldrb	r2, [r2, #1]
 800b586:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b58a:	f1be 0f09 	cmp.w	lr, #9
 800b58e:	d939      	bls.n	800b604 <_strtod_l+0x344>
 800b590:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b592:	1a76      	subs	r6, r6, r1
 800b594:	2e08      	cmp	r6, #8
 800b596:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b59a:	dc03      	bgt.n	800b5a4 <_strtod_l+0x2e4>
 800b59c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b59e:	4588      	cmp	r8, r1
 800b5a0:	bfa8      	it	ge
 800b5a2:	4688      	movge	r8, r1
 800b5a4:	f1bc 0f00 	cmp.w	ip, #0
 800b5a8:	d001      	beq.n	800b5ae <_strtod_l+0x2ee>
 800b5aa:	f1c8 0800 	rsb	r8, r8, #0
 800b5ae:	2d00      	cmp	r5, #0
 800b5b0:	d14e      	bne.n	800b650 <_strtod_l+0x390>
 800b5b2:	9908      	ldr	r1, [sp, #32]
 800b5b4:	4308      	orrs	r0, r1
 800b5b6:	f47f aebc 	bne.w	800b332 <_strtod_l+0x72>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f47f aed4 	bne.w	800b368 <_strtod_l+0xa8>
 800b5c0:	2a69      	cmp	r2, #105	@ 0x69
 800b5c2:	d028      	beq.n	800b616 <_strtod_l+0x356>
 800b5c4:	dc25      	bgt.n	800b612 <_strtod_l+0x352>
 800b5c6:	2a49      	cmp	r2, #73	@ 0x49
 800b5c8:	d025      	beq.n	800b616 <_strtod_l+0x356>
 800b5ca:	2a4e      	cmp	r2, #78	@ 0x4e
 800b5cc:	f47f aecc 	bne.w	800b368 <_strtod_l+0xa8>
 800b5d0:	499a      	ldr	r1, [pc, #616]	@ (800b83c <_strtod_l+0x57c>)
 800b5d2:	a819      	add	r0, sp, #100	@ 0x64
 800b5d4:	f001 fba4 	bl	800cd20 <__match>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	f43f aec5 	beq.w	800b368 <_strtod_l+0xa8>
 800b5de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	2b28      	cmp	r3, #40	@ 0x28
 800b5e4:	d12e      	bne.n	800b644 <_strtod_l+0x384>
 800b5e6:	4996      	ldr	r1, [pc, #600]	@ (800b840 <_strtod_l+0x580>)
 800b5e8:	aa1c      	add	r2, sp, #112	@ 0x70
 800b5ea:	a819      	add	r0, sp, #100	@ 0x64
 800b5ec:	f001 fbac 	bl	800cd48 <__hexnan>
 800b5f0:	2805      	cmp	r0, #5
 800b5f2:	d127      	bne.n	800b644 <_strtod_l+0x384>
 800b5f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5f6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b5fa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b5fe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b602:	e696      	b.n	800b332 <_strtod_l+0x72>
 800b604:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b606:	fb08 2101 	mla	r1, r8, r1, r2
 800b60a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b60e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b610:	e7b5      	b.n	800b57e <_strtod_l+0x2be>
 800b612:	2a6e      	cmp	r2, #110	@ 0x6e
 800b614:	e7da      	b.n	800b5cc <_strtod_l+0x30c>
 800b616:	498b      	ldr	r1, [pc, #556]	@ (800b844 <_strtod_l+0x584>)
 800b618:	a819      	add	r0, sp, #100	@ 0x64
 800b61a:	f001 fb81 	bl	800cd20 <__match>
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f aea2 	beq.w	800b368 <_strtod_l+0xa8>
 800b624:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b626:	4988      	ldr	r1, [pc, #544]	@ (800b848 <_strtod_l+0x588>)
 800b628:	3b01      	subs	r3, #1
 800b62a:	a819      	add	r0, sp, #100	@ 0x64
 800b62c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b62e:	f001 fb77 	bl	800cd20 <__match>
 800b632:	b910      	cbnz	r0, 800b63a <_strtod_l+0x37a>
 800b634:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b636:	3301      	adds	r3, #1
 800b638:	9319      	str	r3, [sp, #100]	@ 0x64
 800b63a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800b858 <_strtod_l+0x598>
 800b63e:	f04f 0a00 	mov.w	sl, #0
 800b642:	e676      	b.n	800b332 <_strtod_l+0x72>
 800b644:	4881      	ldr	r0, [pc, #516]	@ (800b84c <_strtod_l+0x58c>)
 800b646:	f001 f8a7 	bl	800c798 <nan>
 800b64a:	ec5b ab10 	vmov	sl, fp, d0
 800b64e:	e670      	b.n	800b332 <_strtod_l+0x72>
 800b650:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b652:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b654:	eba8 0303 	sub.w	r3, r8, r3
 800b658:	f1b9 0f00 	cmp.w	r9, #0
 800b65c:	bf08      	it	eq
 800b65e:	46a9      	moveq	r9, r5
 800b660:	2d10      	cmp	r5, #16
 800b662:	9309      	str	r3, [sp, #36]	@ 0x24
 800b664:	462c      	mov	r4, r5
 800b666:	bfa8      	it	ge
 800b668:	2410      	movge	r4, #16
 800b66a:	f7f4 ff4b 	bl	8000504 <__aeabi_ui2d>
 800b66e:	2d09      	cmp	r5, #9
 800b670:	4682      	mov	sl, r0
 800b672:	468b      	mov	fp, r1
 800b674:	dc13      	bgt.n	800b69e <_strtod_l+0x3de>
 800b676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f43f ae5a 	beq.w	800b332 <_strtod_l+0x72>
 800b67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b680:	dd78      	ble.n	800b774 <_strtod_l+0x4b4>
 800b682:	2b16      	cmp	r3, #22
 800b684:	dc5f      	bgt.n	800b746 <_strtod_l+0x486>
 800b686:	4972      	ldr	r1, [pc, #456]	@ (800b850 <_strtod_l+0x590>)
 800b688:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b68c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b690:	4652      	mov	r2, sl
 800b692:	465b      	mov	r3, fp
 800b694:	f7f4 ffb0 	bl	80005f8 <__aeabi_dmul>
 800b698:	4682      	mov	sl, r0
 800b69a:	468b      	mov	fp, r1
 800b69c:	e649      	b.n	800b332 <_strtod_l+0x72>
 800b69e:	4b6c      	ldr	r3, [pc, #432]	@ (800b850 <_strtod_l+0x590>)
 800b6a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b6a8:	f7f4 ffa6 	bl	80005f8 <__aeabi_dmul>
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	468b      	mov	fp, r1
 800b6b2:	f7f4 ff27 	bl	8000504 <__aeabi_ui2d>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	4659      	mov	r1, fp
 800b6be:	f7f4 fde5 	bl	800028c <__adddf3>
 800b6c2:	2d0f      	cmp	r5, #15
 800b6c4:	4682      	mov	sl, r0
 800b6c6:	468b      	mov	fp, r1
 800b6c8:	ddd5      	ble.n	800b676 <_strtod_l+0x3b6>
 800b6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6cc:	1b2c      	subs	r4, r5, r4
 800b6ce:	441c      	add	r4, r3
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	f340 8093 	ble.w	800b7fc <_strtod_l+0x53c>
 800b6d6:	f014 030f 	ands.w	r3, r4, #15
 800b6da:	d00a      	beq.n	800b6f2 <_strtod_l+0x432>
 800b6dc:	495c      	ldr	r1, [pc, #368]	@ (800b850 <_strtod_l+0x590>)
 800b6de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b6e2:	4652      	mov	r2, sl
 800b6e4:	465b      	mov	r3, fp
 800b6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6ea:	f7f4 ff85 	bl	80005f8 <__aeabi_dmul>
 800b6ee:	4682      	mov	sl, r0
 800b6f0:	468b      	mov	fp, r1
 800b6f2:	f034 040f 	bics.w	r4, r4, #15
 800b6f6:	d073      	beq.n	800b7e0 <_strtod_l+0x520>
 800b6f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b6fc:	dd49      	ble.n	800b792 <_strtod_l+0x4d2>
 800b6fe:	2400      	movs	r4, #0
 800b700:	46a0      	mov	r8, r4
 800b702:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b704:	46a1      	mov	r9, r4
 800b706:	9a05      	ldr	r2, [sp, #20]
 800b708:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800b858 <_strtod_l+0x598>
 800b70c:	2322      	movs	r3, #34	@ 0x22
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	f04f 0a00 	mov.w	sl, #0
 800b714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b716:	2b00      	cmp	r3, #0
 800b718:	f43f ae0b 	beq.w	800b332 <_strtod_l+0x72>
 800b71c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b71e:	9805      	ldr	r0, [sp, #20]
 800b720:	f7ff f946 	bl	800a9b0 <_Bfree>
 800b724:	9805      	ldr	r0, [sp, #20]
 800b726:	4649      	mov	r1, r9
 800b728:	f7ff f942 	bl	800a9b0 <_Bfree>
 800b72c:	9805      	ldr	r0, [sp, #20]
 800b72e:	4641      	mov	r1, r8
 800b730:	f7ff f93e 	bl	800a9b0 <_Bfree>
 800b734:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b736:	9805      	ldr	r0, [sp, #20]
 800b738:	f7ff f93a 	bl	800a9b0 <_Bfree>
 800b73c:	9805      	ldr	r0, [sp, #20]
 800b73e:	4621      	mov	r1, r4
 800b740:	f7ff f936 	bl	800a9b0 <_Bfree>
 800b744:	e5f5      	b.n	800b332 <_strtod_l+0x72>
 800b746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b748:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b74c:	4293      	cmp	r3, r2
 800b74e:	dbbc      	blt.n	800b6ca <_strtod_l+0x40a>
 800b750:	4c3f      	ldr	r4, [pc, #252]	@ (800b850 <_strtod_l+0x590>)
 800b752:	f1c5 050f 	rsb	r5, r5, #15
 800b756:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b75a:	4652      	mov	r2, sl
 800b75c:	465b      	mov	r3, fp
 800b75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b762:	f7f4 ff49 	bl	80005f8 <__aeabi_dmul>
 800b766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b768:	1b5d      	subs	r5, r3, r5
 800b76a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b76e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b772:	e78f      	b.n	800b694 <_strtod_l+0x3d4>
 800b774:	3316      	adds	r3, #22
 800b776:	dba8      	blt.n	800b6ca <_strtod_l+0x40a>
 800b778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b77a:	eba3 0808 	sub.w	r8, r3, r8
 800b77e:	4b34      	ldr	r3, [pc, #208]	@ (800b850 <_strtod_l+0x590>)
 800b780:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b784:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	f7f5 f85e 	bl	800084c <__aeabi_ddiv>
 800b790:	e782      	b.n	800b698 <_strtod_l+0x3d8>
 800b792:	2300      	movs	r3, #0
 800b794:	4f2f      	ldr	r7, [pc, #188]	@ (800b854 <_strtod_l+0x594>)
 800b796:	1124      	asrs	r4, r4, #4
 800b798:	4650      	mov	r0, sl
 800b79a:	4659      	mov	r1, fp
 800b79c:	461e      	mov	r6, r3
 800b79e:	2c01      	cmp	r4, #1
 800b7a0:	dc21      	bgt.n	800b7e6 <_strtod_l+0x526>
 800b7a2:	b10b      	cbz	r3, 800b7a8 <_strtod_l+0x4e8>
 800b7a4:	4682      	mov	sl, r0
 800b7a6:	468b      	mov	fp, r1
 800b7a8:	492a      	ldr	r1, [pc, #168]	@ (800b854 <_strtod_l+0x594>)
 800b7aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b7ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	465b      	mov	r3, fp
 800b7b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7ba:	f7f4 ff1d 	bl	80005f8 <__aeabi_dmul>
 800b7be:	4b26      	ldr	r3, [pc, #152]	@ (800b858 <_strtod_l+0x598>)
 800b7c0:	460a      	mov	r2, r1
 800b7c2:	400b      	ands	r3, r1
 800b7c4:	4925      	ldr	r1, [pc, #148]	@ (800b85c <_strtod_l+0x59c>)
 800b7c6:	428b      	cmp	r3, r1
 800b7c8:	4682      	mov	sl, r0
 800b7ca:	d898      	bhi.n	800b6fe <_strtod_l+0x43e>
 800b7cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b7d0:	428b      	cmp	r3, r1
 800b7d2:	bf86      	itte	hi
 800b7d4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800b860 <_strtod_l+0x5a0>
 800b7d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9308      	str	r3, [sp, #32]
 800b7e4:	e076      	b.n	800b8d4 <_strtod_l+0x614>
 800b7e6:	07e2      	lsls	r2, r4, #31
 800b7e8:	d504      	bpl.n	800b7f4 <_strtod_l+0x534>
 800b7ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ee:	f7f4 ff03 	bl	80005f8 <__aeabi_dmul>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	3601      	adds	r6, #1
 800b7f6:	1064      	asrs	r4, r4, #1
 800b7f8:	3708      	adds	r7, #8
 800b7fa:	e7d0      	b.n	800b79e <_strtod_l+0x4de>
 800b7fc:	d0f0      	beq.n	800b7e0 <_strtod_l+0x520>
 800b7fe:	4264      	negs	r4, r4
 800b800:	f014 020f 	ands.w	r2, r4, #15
 800b804:	d00a      	beq.n	800b81c <_strtod_l+0x55c>
 800b806:	4b12      	ldr	r3, [pc, #72]	@ (800b850 <_strtod_l+0x590>)
 800b808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b80c:	4650      	mov	r0, sl
 800b80e:	4659      	mov	r1, fp
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f5 f81a 	bl	800084c <__aeabi_ddiv>
 800b818:	4682      	mov	sl, r0
 800b81a:	468b      	mov	fp, r1
 800b81c:	1124      	asrs	r4, r4, #4
 800b81e:	d0df      	beq.n	800b7e0 <_strtod_l+0x520>
 800b820:	2c1f      	cmp	r4, #31
 800b822:	dd1f      	ble.n	800b864 <_strtod_l+0x5a4>
 800b824:	2400      	movs	r4, #0
 800b826:	46a0      	mov	r8, r4
 800b828:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b82a:	46a1      	mov	r9, r4
 800b82c:	9a05      	ldr	r2, [sp, #20]
 800b82e:	2322      	movs	r3, #34	@ 0x22
 800b830:	f04f 0a00 	mov.w	sl, #0
 800b834:	f04f 0b00 	mov.w	fp, #0
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	e76b      	b.n	800b714 <_strtod_l+0x454>
 800b83c:	0800d075 	.word	0x0800d075
 800b840:	0800d340 	.word	0x0800d340
 800b844:	0800d06d 	.word	0x0800d06d
 800b848:	0800d0a4 	.word	0x0800d0a4
 800b84c:	0800d1dd 	.word	0x0800d1dd
 800b850:	0800d278 	.word	0x0800d278
 800b854:	0800d250 	.word	0x0800d250
 800b858:	7ff00000 	.word	0x7ff00000
 800b85c:	7ca00000 	.word	0x7ca00000
 800b860:	7fefffff 	.word	0x7fefffff
 800b864:	f014 0310 	ands.w	r3, r4, #16
 800b868:	bf18      	it	ne
 800b86a:	236a      	movne	r3, #106	@ 0x6a
 800b86c:	4ea9      	ldr	r6, [pc, #676]	@ (800bb14 <_strtod_l+0x854>)
 800b86e:	9308      	str	r3, [sp, #32]
 800b870:	4650      	mov	r0, sl
 800b872:	4659      	mov	r1, fp
 800b874:	2300      	movs	r3, #0
 800b876:	07e7      	lsls	r7, r4, #31
 800b878:	d504      	bpl.n	800b884 <_strtod_l+0x5c4>
 800b87a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	2301      	movs	r3, #1
 800b884:	1064      	asrs	r4, r4, #1
 800b886:	f106 0608 	add.w	r6, r6, #8
 800b88a:	d1f4      	bne.n	800b876 <_strtod_l+0x5b6>
 800b88c:	b10b      	cbz	r3, 800b892 <_strtod_l+0x5d2>
 800b88e:	4682      	mov	sl, r0
 800b890:	468b      	mov	fp, r1
 800b892:	9b08      	ldr	r3, [sp, #32]
 800b894:	b1b3      	cbz	r3, 800b8c4 <_strtod_l+0x604>
 800b896:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b89a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	dd0f      	ble.n	800b8c4 <_strtod_l+0x604>
 800b8a4:	2b1f      	cmp	r3, #31
 800b8a6:	dd56      	ble.n	800b956 <_strtod_l+0x696>
 800b8a8:	2b34      	cmp	r3, #52	@ 0x34
 800b8aa:	bfde      	ittt	le
 800b8ac:	f04f 33ff 	movle.w	r3, #4294967295
 800b8b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b8b4:	4093      	lslle	r3, r2
 800b8b6:	f04f 0a00 	mov.w	sl, #0
 800b8ba:	bfcc      	ite	gt
 800b8bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b8c0:	ea03 0b01 	andle.w	fp, r3, r1
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	4650      	mov	r0, sl
 800b8ca:	4659      	mov	r1, fp
 800b8cc:	f7f5 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d1a7      	bne.n	800b824 <_strtod_l+0x564>
 800b8d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b8da:	9805      	ldr	r0, [sp, #20]
 800b8dc:	462b      	mov	r3, r5
 800b8de:	464a      	mov	r2, r9
 800b8e0:	f7ff f8ce 	bl	800aa80 <__s2b>
 800b8e4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f43f af09 	beq.w	800b6fe <_strtod_l+0x43e>
 800b8ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	eba3 0308 	sub.w	r3, r3, r8
 800b8f6:	bfa8      	it	ge
 800b8f8:	2300      	movge	r3, #0
 800b8fa:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8fc:	2400      	movs	r4, #0
 800b8fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b902:	9316      	str	r3, [sp, #88]	@ 0x58
 800b904:	46a0      	mov	r8, r4
 800b906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b908:	9805      	ldr	r0, [sp, #20]
 800b90a:	6859      	ldr	r1, [r3, #4]
 800b90c:	f7ff f810 	bl	800a930 <_Balloc>
 800b910:	4681      	mov	r9, r0
 800b912:	2800      	cmp	r0, #0
 800b914:	f43f aef7 	beq.w	800b706 <_strtod_l+0x446>
 800b918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b91a:	691a      	ldr	r2, [r3, #16]
 800b91c:	3202      	adds	r2, #2
 800b91e:	f103 010c 	add.w	r1, r3, #12
 800b922:	0092      	lsls	r2, r2, #2
 800b924:	300c      	adds	r0, #12
 800b926:	f7fe f896 	bl	8009a56 <memcpy>
 800b92a:	ec4b ab10 	vmov	d0, sl, fp
 800b92e:	9805      	ldr	r0, [sp, #20]
 800b930:	aa1c      	add	r2, sp, #112	@ 0x70
 800b932:	a91b      	add	r1, sp, #108	@ 0x6c
 800b934:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b938:	f7ff fbd6 	bl	800b0e8 <__d2b>
 800b93c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b93e:	2800      	cmp	r0, #0
 800b940:	f43f aee1 	beq.w	800b706 <_strtod_l+0x446>
 800b944:	9805      	ldr	r0, [sp, #20]
 800b946:	2101      	movs	r1, #1
 800b948:	f7ff f930 	bl	800abac <__i2b>
 800b94c:	4680      	mov	r8, r0
 800b94e:	b948      	cbnz	r0, 800b964 <_strtod_l+0x6a4>
 800b950:	f04f 0800 	mov.w	r8, #0
 800b954:	e6d7      	b.n	800b706 <_strtod_l+0x446>
 800b956:	f04f 32ff 	mov.w	r2, #4294967295
 800b95a:	fa02 f303 	lsl.w	r3, r2, r3
 800b95e:	ea03 0a0a 	and.w	sl, r3, sl
 800b962:	e7af      	b.n	800b8c4 <_strtod_l+0x604>
 800b964:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b966:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b968:	2d00      	cmp	r5, #0
 800b96a:	bfab      	itete	ge
 800b96c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b96e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b970:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b972:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b974:	bfac      	ite	ge
 800b976:	18ef      	addge	r7, r5, r3
 800b978:	1b5e      	sublt	r6, r3, r5
 800b97a:	9b08      	ldr	r3, [sp, #32]
 800b97c:	1aed      	subs	r5, r5, r3
 800b97e:	4415      	add	r5, r2
 800b980:	4b65      	ldr	r3, [pc, #404]	@ (800bb18 <_strtod_l+0x858>)
 800b982:	3d01      	subs	r5, #1
 800b984:	429d      	cmp	r5, r3
 800b986:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b98a:	da50      	bge.n	800ba2e <_strtod_l+0x76e>
 800b98c:	1b5b      	subs	r3, r3, r5
 800b98e:	2b1f      	cmp	r3, #31
 800b990:	eba2 0203 	sub.w	r2, r2, r3
 800b994:	f04f 0101 	mov.w	r1, #1
 800b998:	dc3d      	bgt.n	800ba16 <_strtod_l+0x756>
 800b99a:	fa01 f303 	lsl.w	r3, r1, r3
 800b99e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b9a4:	18bd      	adds	r5, r7, r2
 800b9a6:	9b08      	ldr	r3, [sp, #32]
 800b9a8:	42af      	cmp	r7, r5
 800b9aa:	4416      	add	r6, r2
 800b9ac:	441e      	add	r6, r3
 800b9ae:	463b      	mov	r3, r7
 800b9b0:	bfa8      	it	ge
 800b9b2:	462b      	movge	r3, r5
 800b9b4:	42b3      	cmp	r3, r6
 800b9b6:	bfa8      	it	ge
 800b9b8:	4633      	movge	r3, r6
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	bfc2      	ittt	gt
 800b9be:	1aed      	subgt	r5, r5, r3
 800b9c0:	1af6      	subgt	r6, r6, r3
 800b9c2:	1aff      	subgt	r7, r7, r3
 800b9c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	dd16      	ble.n	800b9f8 <_strtod_l+0x738>
 800b9ca:	4641      	mov	r1, r8
 800b9cc:	9805      	ldr	r0, [sp, #20]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f7ff f9a4 	bl	800ad1c <__pow5mult>
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d0ba      	beq.n	800b950 <_strtod_l+0x690>
 800b9da:	4601      	mov	r1, r0
 800b9dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b9de:	9805      	ldr	r0, [sp, #20]
 800b9e0:	f7ff f8fa 	bl	800abd8 <__multiply>
 800b9e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	f43f ae8d 	beq.w	800b706 <_strtod_l+0x446>
 800b9ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b9ee:	9805      	ldr	r0, [sp, #20]
 800b9f0:	f7fe ffde 	bl	800a9b0 <_Bfree>
 800b9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9f8:	2d00      	cmp	r5, #0
 800b9fa:	dc1d      	bgt.n	800ba38 <_strtod_l+0x778>
 800b9fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	dd23      	ble.n	800ba4a <_strtod_l+0x78a>
 800ba02:	4649      	mov	r1, r9
 800ba04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ba06:	9805      	ldr	r0, [sp, #20]
 800ba08:	f7ff f988 	bl	800ad1c <__pow5mult>
 800ba0c:	4681      	mov	r9, r0
 800ba0e:	b9e0      	cbnz	r0, 800ba4a <_strtod_l+0x78a>
 800ba10:	f04f 0900 	mov.w	r9, #0
 800ba14:	e677      	b.n	800b706 <_strtod_l+0x446>
 800ba16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ba1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ba1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ba22:	35e2      	adds	r5, #226	@ 0xe2
 800ba24:	fa01 f305 	lsl.w	r3, r1, r5
 800ba28:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ba2c:	e7ba      	b.n	800b9a4 <_strtod_l+0x6e4>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9310      	str	r3, [sp, #64]	@ 0x40
 800ba32:	2301      	movs	r3, #1
 800ba34:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ba36:	e7b5      	b.n	800b9a4 <_strtod_l+0x6e4>
 800ba38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba3a:	9805      	ldr	r0, [sp, #20]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	f7ff f9c7 	bl	800add0 <__lshift>
 800ba42:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d1d9      	bne.n	800b9fc <_strtod_l+0x73c>
 800ba48:	e65d      	b.n	800b706 <_strtod_l+0x446>
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	dd07      	ble.n	800ba5e <_strtod_l+0x79e>
 800ba4e:	4649      	mov	r1, r9
 800ba50:	9805      	ldr	r0, [sp, #20]
 800ba52:	4632      	mov	r2, r6
 800ba54:	f7ff f9bc 	bl	800add0 <__lshift>
 800ba58:	4681      	mov	r9, r0
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d0d8      	beq.n	800ba10 <_strtod_l+0x750>
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	dd08      	ble.n	800ba74 <_strtod_l+0x7b4>
 800ba62:	4641      	mov	r1, r8
 800ba64:	9805      	ldr	r0, [sp, #20]
 800ba66:	463a      	mov	r2, r7
 800ba68:	f7ff f9b2 	bl	800add0 <__lshift>
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f43f ae49 	beq.w	800b706 <_strtod_l+0x446>
 800ba74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ba76:	9805      	ldr	r0, [sp, #20]
 800ba78:	464a      	mov	r2, r9
 800ba7a:	f7ff fa31 	bl	800aee0 <__mdiff>
 800ba7e:	4604      	mov	r4, r0
 800ba80:	2800      	cmp	r0, #0
 800ba82:	f43f ae40 	beq.w	800b706 <_strtod_l+0x446>
 800ba86:	68c3      	ldr	r3, [r0, #12]
 800ba88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60c3      	str	r3, [r0, #12]
 800ba8e:	4641      	mov	r1, r8
 800ba90:	f7ff fa0a 	bl	800aea8 <__mcmp>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	da45      	bge.n	800bb24 <_strtod_l+0x864>
 800ba98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba9a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba9e:	d16b      	bne.n	800bb78 <_strtod_l+0x8b8>
 800baa0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d167      	bne.n	800bb78 <_strtod_l+0x8b8>
 800baa8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800baac:	0d1b      	lsrs	r3, r3, #20
 800baae:	051b      	lsls	r3, r3, #20
 800bab0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bab4:	d960      	bls.n	800bb78 <_strtod_l+0x8b8>
 800bab6:	6963      	ldr	r3, [r4, #20]
 800bab8:	b913      	cbnz	r3, 800bac0 <_strtod_l+0x800>
 800baba:	6923      	ldr	r3, [r4, #16]
 800babc:	2b01      	cmp	r3, #1
 800babe:	dd5b      	ble.n	800bb78 <_strtod_l+0x8b8>
 800bac0:	4621      	mov	r1, r4
 800bac2:	2201      	movs	r2, #1
 800bac4:	9805      	ldr	r0, [sp, #20]
 800bac6:	f7ff f983 	bl	800add0 <__lshift>
 800baca:	4641      	mov	r1, r8
 800bacc:	4604      	mov	r4, r0
 800bace:	f7ff f9eb 	bl	800aea8 <__mcmp>
 800bad2:	2800      	cmp	r0, #0
 800bad4:	dd50      	ble.n	800bb78 <_strtod_l+0x8b8>
 800bad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bada:	9a08      	ldr	r2, [sp, #32]
 800badc:	0d1b      	lsrs	r3, r3, #20
 800bade:	051b      	lsls	r3, r3, #20
 800bae0:	2a00      	cmp	r2, #0
 800bae2:	d06a      	beq.n	800bbba <_strtod_l+0x8fa>
 800bae4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bae8:	d867      	bhi.n	800bbba <_strtod_l+0x8fa>
 800baea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800baee:	f67f ae9d 	bls.w	800b82c <_strtod_l+0x56c>
 800baf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bb1c <_strtod_l+0x85c>)
 800baf4:	4650      	mov	r0, sl
 800baf6:	4659      	mov	r1, fp
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7f4 fd7d 	bl	80005f8 <__aeabi_dmul>
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <_strtod_l+0x860>)
 800bb00:	400b      	ands	r3, r1
 800bb02:	4682      	mov	sl, r0
 800bb04:	468b      	mov	fp, r1
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f47f ae08 	bne.w	800b71c <_strtod_l+0x45c>
 800bb0c:	9a05      	ldr	r2, [sp, #20]
 800bb0e:	2322      	movs	r3, #34	@ 0x22
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	e603      	b.n	800b71c <_strtod_l+0x45c>
 800bb14:	0800d368 	.word	0x0800d368
 800bb18:	fffffc02 	.word	0xfffffc02
 800bb1c:	39500000 	.word	0x39500000
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bb28:	d165      	bne.n	800bbf6 <_strtod_l+0x936>
 800bb2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bb2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb30:	b35a      	cbz	r2, 800bb8a <_strtod_l+0x8ca>
 800bb32:	4a9f      	ldr	r2, [pc, #636]	@ (800bdb0 <_strtod_l+0xaf0>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d12b      	bne.n	800bb90 <_strtod_l+0x8d0>
 800bb38:	9b08      	ldr	r3, [sp, #32]
 800bb3a:	4651      	mov	r1, sl
 800bb3c:	b303      	cbz	r3, 800bb80 <_strtod_l+0x8c0>
 800bb3e:	4b9d      	ldr	r3, [pc, #628]	@ (800bdb4 <_strtod_l+0xaf4>)
 800bb40:	465a      	mov	r2, fp
 800bb42:	4013      	ands	r3, r2
 800bb44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bb48:	f04f 32ff 	mov.w	r2, #4294967295
 800bb4c:	d81b      	bhi.n	800bb86 <_strtod_l+0x8c6>
 800bb4e:	0d1b      	lsrs	r3, r3, #20
 800bb50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bb54:	fa02 f303 	lsl.w	r3, r2, r3
 800bb58:	4299      	cmp	r1, r3
 800bb5a:	d119      	bne.n	800bb90 <_strtod_l+0x8d0>
 800bb5c:	4b96      	ldr	r3, [pc, #600]	@ (800bdb8 <_strtod_l+0xaf8>)
 800bb5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d102      	bne.n	800bb6a <_strtod_l+0x8aa>
 800bb64:	3101      	adds	r1, #1
 800bb66:	f43f adce 	beq.w	800b706 <_strtod_l+0x446>
 800bb6a:	4b92      	ldr	r3, [pc, #584]	@ (800bdb4 <_strtod_l+0xaf4>)
 800bb6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb6e:	401a      	ands	r2, r3
 800bb70:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bb74:	f04f 0a00 	mov.w	sl, #0
 800bb78:	9b08      	ldr	r3, [sp, #32]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1b9      	bne.n	800baf2 <_strtod_l+0x832>
 800bb7e:	e5cd      	b.n	800b71c <_strtod_l+0x45c>
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	e7e8      	b.n	800bb58 <_strtod_l+0x898>
 800bb86:	4613      	mov	r3, r2
 800bb88:	e7e6      	b.n	800bb58 <_strtod_l+0x898>
 800bb8a:	ea53 030a 	orrs.w	r3, r3, sl
 800bb8e:	d0a2      	beq.n	800bad6 <_strtod_l+0x816>
 800bb90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb92:	b1db      	cbz	r3, 800bbcc <_strtod_l+0x90c>
 800bb94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb96:	4213      	tst	r3, r2
 800bb98:	d0ee      	beq.n	800bb78 <_strtod_l+0x8b8>
 800bb9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb9c:	9a08      	ldr	r2, [sp, #32]
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4659      	mov	r1, fp
 800bba2:	b1bb      	cbz	r3, 800bbd4 <_strtod_l+0x914>
 800bba4:	f7ff fb6e 	bl	800b284 <sulp>
 800bba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbac:	ec53 2b10 	vmov	r2, r3, d0
 800bbb0:	f7f4 fb6c 	bl	800028c <__adddf3>
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	468b      	mov	fp, r1
 800bbb8:	e7de      	b.n	800bb78 <_strtod_l+0x8b8>
 800bbba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bbbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bbc2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bbc6:	f04f 3aff 	mov.w	sl, #4294967295
 800bbca:	e7d5      	b.n	800bb78 <_strtod_l+0x8b8>
 800bbcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bbce:	ea13 0f0a 	tst.w	r3, sl
 800bbd2:	e7e1      	b.n	800bb98 <_strtod_l+0x8d8>
 800bbd4:	f7ff fb56 	bl	800b284 <sulp>
 800bbd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbdc:	ec53 2b10 	vmov	r2, r3, d0
 800bbe0:	f7f4 fb52 	bl	8000288 <__aeabi_dsub>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	4682      	mov	sl, r0
 800bbea:	468b      	mov	fp, r1
 800bbec:	f7f4 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d0c1      	beq.n	800bb78 <_strtod_l+0x8b8>
 800bbf4:	e61a      	b.n	800b82c <_strtod_l+0x56c>
 800bbf6:	4641      	mov	r1, r8
 800bbf8:	4620      	mov	r0, r4
 800bbfa:	f7ff facd 	bl	800b198 <__ratio>
 800bbfe:	ec57 6b10 	vmov	r6, r7, d0
 800bc02:	2200      	movs	r2, #0
 800bc04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 ff70 	bl	8000af0 <__aeabi_dcmple>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d06f      	beq.n	800bcf4 <_strtod_l+0xa34>
 800bc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d17a      	bne.n	800bd10 <_strtod_l+0xa50>
 800bc1a:	f1ba 0f00 	cmp.w	sl, #0
 800bc1e:	d158      	bne.n	800bcd2 <_strtod_l+0xa12>
 800bc20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d15a      	bne.n	800bce0 <_strtod_l+0xa20>
 800bc2a:	4b64      	ldr	r3, [pc, #400]	@ (800bdbc <_strtod_l+0xafc>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4630      	mov	r0, r6
 800bc30:	4639      	mov	r1, r7
 800bc32:	f7f4 ff53 	bl	8000adc <__aeabi_dcmplt>
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d159      	bne.n	800bcee <_strtod_l+0xa2e>
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4b60      	ldr	r3, [pc, #384]	@ (800bdc0 <_strtod_l+0xb00>)
 800bc40:	2200      	movs	r2, #0
 800bc42:	f7f4 fcd9 	bl	80005f8 <__aeabi_dmul>
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bc4e:	9606      	str	r6, [sp, #24]
 800bc50:	9307      	str	r3, [sp, #28]
 800bc52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc56:	4d57      	ldr	r5, [pc, #348]	@ (800bdb4 <_strtod_l+0xaf4>)
 800bc58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bc5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc5e:	401d      	ands	r5, r3
 800bc60:	4b58      	ldr	r3, [pc, #352]	@ (800bdc4 <_strtod_l+0xb04>)
 800bc62:	429d      	cmp	r5, r3
 800bc64:	f040 80b2 	bne.w	800bdcc <_strtod_l+0xb0c>
 800bc68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc6a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bc6e:	ec4b ab10 	vmov	d0, sl, fp
 800bc72:	f7ff f9c9 	bl	800b008 <__ulp>
 800bc76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc7a:	ec51 0b10 	vmov	r0, r1, d0
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	4652      	mov	r2, sl
 800bc84:	465b      	mov	r3, fp
 800bc86:	f7f4 fb01 	bl	800028c <__adddf3>
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4949      	ldr	r1, [pc, #292]	@ (800bdb4 <_strtod_l+0xaf4>)
 800bc8e:	4a4e      	ldr	r2, [pc, #312]	@ (800bdc8 <_strtod_l+0xb08>)
 800bc90:	4019      	ands	r1, r3
 800bc92:	4291      	cmp	r1, r2
 800bc94:	4682      	mov	sl, r0
 800bc96:	d942      	bls.n	800bd1e <_strtod_l+0xa5e>
 800bc98:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bc9a:	4b47      	ldr	r3, [pc, #284]	@ (800bdb8 <_strtod_l+0xaf8>)
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d103      	bne.n	800bca8 <_strtod_l+0x9e8>
 800bca0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bca2:	3301      	adds	r3, #1
 800bca4:	f43f ad2f 	beq.w	800b706 <_strtod_l+0x446>
 800bca8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bdb8 <_strtod_l+0xaf8>
 800bcac:	f04f 3aff 	mov.w	sl, #4294967295
 800bcb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bcb2:	9805      	ldr	r0, [sp, #20]
 800bcb4:	f7fe fe7c 	bl	800a9b0 <_Bfree>
 800bcb8:	9805      	ldr	r0, [sp, #20]
 800bcba:	4649      	mov	r1, r9
 800bcbc:	f7fe fe78 	bl	800a9b0 <_Bfree>
 800bcc0:	9805      	ldr	r0, [sp, #20]
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	f7fe fe74 	bl	800a9b0 <_Bfree>
 800bcc8:	9805      	ldr	r0, [sp, #20]
 800bcca:	4621      	mov	r1, r4
 800bccc:	f7fe fe70 	bl	800a9b0 <_Bfree>
 800bcd0:	e619      	b.n	800b906 <_strtod_l+0x646>
 800bcd2:	f1ba 0f01 	cmp.w	sl, #1
 800bcd6:	d103      	bne.n	800bce0 <_strtod_l+0xa20>
 800bcd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f43f ada6 	beq.w	800b82c <_strtod_l+0x56c>
 800bce0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bd90 <_strtod_l+0xad0>
 800bce4:	4f35      	ldr	r7, [pc, #212]	@ (800bdbc <_strtod_l+0xafc>)
 800bce6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bcea:	2600      	movs	r6, #0
 800bcec:	e7b1      	b.n	800bc52 <_strtod_l+0x992>
 800bcee:	4f34      	ldr	r7, [pc, #208]	@ (800bdc0 <_strtod_l+0xb00>)
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	e7aa      	b.n	800bc4a <_strtod_l+0x98a>
 800bcf4:	4b32      	ldr	r3, [pc, #200]	@ (800bdc0 <_strtod_l+0xb00>)
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d09f      	beq.n	800bc4a <_strtod_l+0x98a>
 800bd0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bd0e:	e7a0      	b.n	800bc52 <_strtod_l+0x992>
 800bd10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bd98 <_strtod_l+0xad8>
 800bd14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd18:	ec57 6b17 	vmov	r6, r7, d7
 800bd1c:	e799      	b.n	800bc52 <_strtod_l+0x992>
 800bd1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bd22:	9b08      	ldr	r3, [sp, #32]
 800bd24:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1c1      	bne.n	800bcb0 <_strtod_l+0x9f0>
 800bd2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd30:	0d1b      	lsrs	r3, r3, #20
 800bd32:	051b      	lsls	r3, r3, #20
 800bd34:	429d      	cmp	r5, r3
 800bd36:	d1bb      	bne.n	800bcb0 <_strtod_l+0x9f0>
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 ffbc 	bl	8000cb8 <__aeabi_d2lz>
 800bd40:	f7f4 fc2c 	bl	800059c <__aeabi_l2d>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4630      	mov	r0, r6
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	f7f4 fa9c 	bl	8000288 <__aeabi_dsub>
 800bd50:	460b      	mov	r3, r1
 800bd52:	4602      	mov	r2, r0
 800bd54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bd58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd5e:	ea46 060a 	orr.w	r6, r6, sl
 800bd62:	431e      	orrs	r6, r3
 800bd64:	d06f      	beq.n	800be46 <_strtod_l+0xb86>
 800bd66:	a30e      	add	r3, pc, #56	@ (adr r3, 800bda0 <_strtod_l+0xae0>)
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f7f4 feb6 	bl	8000adc <__aeabi_dcmplt>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f47f acd3 	bne.w	800b71c <_strtod_l+0x45c>
 800bd76:	a30c      	add	r3, pc, #48	@ (adr r3, 800bda8 <_strtod_l+0xae8>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd80:	f7f4 feca 	bl	8000b18 <__aeabi_dcmpgt>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	d093      	beq.n	800bcb0 <_strtod_l+0x9f0>
 800bd88:	e4c8      	b.n	800b71c <_strtod_l+0x45c>
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w
 800bd90:	00000000 	.word	0x00000000
 800bd94:	bff00000 	.word	0xbff00000
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	3ff00000 	.word	0x3ff00000
 800bda0:	94a03595 	.word	0x94a03595
 800bda4:	3fdfffff 	.word	0x3fdfffff
 800bda8:	35afe535 	.word	0x35afe535
 800bdac:	3fe00000 	.word	0x3fe00000
 800bdb0:	000fffff 	.word	0x000fffff
 800bdb4:	7ff00000 	.word	0x7ff00000
 800bdb8:	7fefffff 	.word	0x7fefffff
 800bdbc:	3ff00000 	.word	0x3ff00000
 800bdc0:	3fe00000 	.word	0x3fe00000
 800bdc4:	7fe00000 	.word	0x7fe00000
 800bdc8:	7c9fffff 	.word	0x7c9fffff
 800bdcc:	9b08      	ldr	r3, [sp, #32]
 800bdce:	b323      	cbz	r3, 800be1a <_strtod_l+0xb5a>
 800bdd0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bdd4:	d821      	bhi.n	800be1a <_strtod_l+0xb5a>
 800bdd6:	a328      	add	r3, pc, #160	@ (adr r3, 800be78 <_strtod_l+0xbb8>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4630      	mov	r0, r6
 800bdde:	4639      	mov	r1, r7
 800bde0:	f7f4 fe86 	bl	8000af0 <__aeabi_dcmple>
 800bde4:	b1a0      	cbz	r0, 800be10 <_strtod_l+0xb50>
 800bde6:	4639      	mov	r1, r7
 800bde8:	4630      	mov	r0, r6
 800bdea:	f7f4 fedd 	bl	8000ba8 <__aeabi_d2uiz>
 800bdee:	2801      	cmp	r0, #1
 800bdf0:	bf38      	it	cc
 800bdf2:	2001      	movcc	r0, #1
 800bdf4:	f7f4 fb86 	bl	8000504 <__aeabi_ui2d>
 800bdf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	b9fb      	cbnz	r3, 800be40 <_strtod_l+0xb80>
 800be00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be04:	9014      	str	r0, [sp, #80]	@ 0x50
 800be06:	9315      	str	r3, [sp, #84]	@ 0x54
 800be08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800be0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800be16:	1b5b      	subs	r3, r3, r5
 800be18:	9311      	str	r3, [sp, #68]	@ 0x44
 800be1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800be1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800be22:	f7ff f8f1 	bl	800b008 <__ulp>
 800be26:	4650      	mov	r0, sl
 800be28:	ec53 2b10 	vmov	r2, r3, d0
 800be2c:	4659      	mov	r1, fp
 800be2e:	f7f4 fbe3 	bl	80005f8 <__aeabi_dmul>
 800be32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be36:	f7f4 fa29 	bl	800028c <__adddf3>
 800be3a:	4682      	mov	sl, r0
 800be3c:	468b      	mov	fp, r1
 800be3e:	e770      	b.n	800bd22 <_strtod_l+0xa62>
 800be40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800be44:	e7e0      	b.n	800be08 <_strtod_l+0xb48>
 800be46:	a30e      	add	r3, pc, #56	@ (adr r3, 800be80 <_strtod_l+0xbc0>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f7f4 fe46 	bl	8000adc <__aeabi_dcmplt>
 800be50:	e798      	b.n	800bd84 <_strtod_l+0xac4>
 800be52:	2300      	movs	r3, #0
 800be54:	930e      	str	r3, [sp, #56]	@ 0x38
 800be56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800be58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800be5a:	6013      	str	r3, [r2, #0]
 800be5c:	f7ff ba6d 	b.w	800b33a <_strtod_l+0x7a>
 800be60:	2a65      	cmp	r2, #101	@ 0x65
 800be62:	f43f ab68 	beq.w	800b536 <_strtod_l+0x276>
 800be66:	2a45      	cmp	r2, #69	@ 0x45
 800be68:	f43f ab65 	beq.w	800b536 <_strtod_l+0x276>
 800be6c:	2301      	movs	r3, #1
 800be6e:	f7ff bba0 	b.w	800b5b2 <_strtod_l+0x2f2>
 800be72:	bf00      	nop
 800be74:	f3af 8000 	nop.w
 800be78:	ffc00000 	.word	0xffc00000
 800be7c:	41dfffff 	.word	0x41dfffff
 800be80:	94a03595 	.word	0x94a03595
 800be84:	3fcfffff 	.word	0x3fcfffff

0800be88 <_strtod_r>:
 800be88:	4b01      	ldr	r3, [pc, #4]	@ (800be90 <_strtod_r+0x8>)
 800be8a:	f7ff ba19 	b.w	800b2c0 <_strtod_l>
 800be8e:	bf00      	nop
 800be90:	20000164 	.word	0x20000164

0800be94 <_strtol_l.isra.0>:
 800be94:	2b24      	cmp	r3, #36	@ 0x24
 800be96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9a:	4686      	mov	lr, r0
 800be9c:	4690      	mov	r8, r2
 800be9e:	d801      	bhi.n	800bea4 <_strtol_l.isra.0+0x10>
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d106      	bne.n	800beb2 <_strtol_l.isra.0+0x1e>
 800bea4:	f7fd fdaa 	bl	80099fc <__errno>
 800bea8:	2316      	movs	r3, #22
 800beaa:	6003      	str	r3, [r0, #0]
 800beac:	2000      	movs	r0, #0
 800beae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb2:	4834      	ldr	r0, [pc, #208]	@ (800bf84 <_strtol_l.isra.0+0xf0>)
 800beb4:	460d      	mov	r5, r1
 800beb6:	462a      	mov	r2, r5
 800beb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bebc:	5d06      	ldrb	r6, [r0, r4]
 800bebe:	f016 0608 	ands.w	r6, r6, #8
 800bec2:	d1f8      	bne.n	800beb6 <_strtol_l.isra.0+0x22>
 800bec4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bec6:	d110      	bne.n	800beea <_strtol_l.isra.0+0x56>
 800bec8:	782c      	ldrb	r4, [r5, #0]
 800beca:	2601      	movs	r6, #1
 800becc:	1c95      	adds	r5, r2, #2
 800bece:	f033 0210 	bics.w	r2, r3, #16
 800bed2:	d115      	bne.n	800bf00 <_strtol_l.isra.0+0x6c>
 800bed4:	2c30      	cmp	r4, #48	@ 0x30
 800bed6:	d10d      	bne.n	800bef4 <_strtol_l.isra.0+0x60>
 800bed8:	782a      	ldrb	r2, [r5, #0]
 800beda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bede:	2a58      	cmp	r2, #88	@ 0x58
 800bee0:	d108      	bne.n	800bef4 <_strtol_l.isra.0+0x60>
 800bee2:	786c      	ldrb	r4, [r5, #1]
 800bee4:	3502      	adds	r5, #2
 800bee6:	2310      	movs	r3, #16
 800bee8:	e00a      	b.n	800bf00 <_strtol_l.isra.0+0x6c>
 800beea:	2c2b      	cmp	r4, #43	@ 0x2b
 800beec:	bf04      	itt	eq
 800beee:	782c      	ldrbeq	r4, [r5, #0]
 800bef0:	1c95      	addeq	r5, r2, #2
 800bef2:	e7ec      	b.n	800bece <_strtol_l.isra.0+0x3a>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1f6      	bne.n	800bee6 <_strtol_l.isra.0+0x52>
 800bef8:	2c30      	cmp	r4, #48	@ 0x30
 800befa:	bf14      	ite	ne
 800befc:	230a      	movne	r3, #10
 800befe:	2308      	moveq	r3, #8
 800bf00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bf04:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf08:	2200      	movs	r2, #0
 800bf0a:	fbbc f9f3 	udiv	r9, ip, r3
 800bf0e:	4610      	mov	r0, r2
 800bf10:	fb03 ca19 	mls	sl, r3, r9, ip
 800bf14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bf18:	2f09      	cmp	r7, #9
 800bf1a:	d80f      	bhi.n	800bf3c <_strtol_l.isra.0+0xa8>
 800bf1c:	463c      	mov	r4, r7
 800bf1e:	42a3      	cmp	r3, r4
 800bf20:	dd1b      	ble.n	800bf5a <_strtol_l.isra.0+0xc6>
 800bf22:	1c57      	adds	r7, r2, #1
 800bf24:	d007      	beq.n	800bf36 <_strtol_l.isra.0+0xa2>
 800bf26:	4581      	cmp	r9, r0
 800bf28:	d314      	bcc.n	800bf54 <_strtol_l.isra.0+0xc0>
 800bf2a:	d101      	bne.n	800bf30 <_strtol_l.isra.0+0x9c>
 800bf2c:	45a2      	cmp	sl, r4
 800bf2e:	db11      	blt.n	800bf54 <_strtol_l.isra.0+0xc0>
 800bf30:	fb00 4003 	mla	r0, r0, r3, r4
 800bf34:	2201      	movs	r2, #1
 800bf36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf3a:	e7eb      	b.n	800bf14 <_strtol_l.isra.0+0x80>
 800bf3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bf40:	2f19      	cmp	r7, #25
 800bf42:	d801      	bhi.n	800bf48 <_strtol_l.isra.0+0xb4>
 800bf44:	3c37      	subs	r4, #55	@ 0x37
 800bf46:	e7ea      	b.n	800bf1e <_strtol_l.isra.0+0x8a>
 800bf48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bf4c:	2f19      	cmp	r7, #25
 800bf4e:	d804      	bhi.n	800bf5a <_strtol_l.isra.0+0xc6>
 800bf50:	3c57      	subs	r4, #87	@ 0x57
 800bf52:	e7e4      	b.n	800bf1e <_strtol_l.isra.0+0x8a>
 800bf54:	f04f 32ff 	mov.w	r2, #4294967295
 800bf58:	e7ed      	b.n	800bf36 <_strtol_l.isra.0+0xa2>
 800bf5a:	1c53      	adds	r3, r2, #1
 800bf5c:	d108      	bne.n	800bf70 <_strtol_l.isra.0+0xdc>
 800bf5e:	2322      	movs	r3, #34	@ 0x22
 800bf60:	f8ce 3000 	str.w	r3, [lr]
 800bf64:	4660      	mov	r0, ip
 800bf66:	f1b8 0f00 	cmp.w	r8, #0
 800bf6a:	d0a0      	beq.n	800beae <_strtol_l.isra.0+0x1a>
 800bf6c:	1e69      	subs	r1, r5, #1
 800bf6e:	e006      	b.n	800bf7e <_strtol_l.isra.0+0xea>
 800bf70:	b106      	cbz	r6, 800bf74 <_strtol_l.isra.0+0xe0>
 800bf72:	4240      	negs	r0, r0
 800bf74:	f1b8 0f00 	cmp.w	r8, #0
 800bf78:	d099      	beq.n	800beae <_strtol_l.isra.0+0x1a>
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d1f6      	bne.n	800bf6c <_strtol_l.isra.0+0xd8>
 800bf7e:	f8c8 1000 	str.w	r1, [r8]
 800bf82:	e794      	b.n	800beae <_strtol_l.isra.0+0x1a>
 800bf84:	0800d391 	.word	0x0800d391

0800bf88 <_strtol_r>:
 800bf88:	f7ff bf84 	b.w	800be94 <_strtol_l.isra.0>

0800bf8c <__ssputs_r>:
 800bf8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	688e      	ldr	r6, [r1, #8]
 800bf92:	461f      	mov	r7, r3
 800bf94:	42be      	cmp	r6, r7
 800bf96:	680b      	ldr	r3, [r1, #0]
 800bf98:	4682      	mov	sl, r0
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	4690      	mov	r8, r2
 800bf9e:	d82d      	bhi.n	800bffc <__ssputs_r+0x70>
 800bfa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bfa4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bfa8:	d026      	beq.n	800bff8 <__ssputs_r+0x6c>
 800bfaa:	6965      	ldr	r5, [r4, #20]
 800bfac:	6909      	ldr	r1, [r1, #16]
 800bfae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfb2:	eba3 0901 	sub.w	r9, r3, r1
 800bfb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfba:	1c7b      	adds	r3, r7, #1
 800bfbc:	444b      	add	r3, r9
 800bfbe:	106d      	asrs	r5, r5, #1
 800bfc0:	429d      	cmp	r5, r3
 800bfc2:	bf38      	it	cc
 800bfc4:	461d      	movcc	r5, r3
 800bfc6:	0553      	lsls	r3, r2, #21
 800bfc8:	d527      	bpl.n	800c01a <__ssputs_r+0x8e>
 800bfca:	4629      	mov	r1, r5
 800bfcc:	f7fe fc24 	bl	800a818 <_malloc_r>
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	b360      	cbz	r0, 800c02e <__ssputs_r+0xa2>
 800bfd4:	6921      	ldr	r1, [r4, #16]
 800bfd6:	464a      	mov	r2, r9
 800bfd8:	f7fd fd3d 	bl	8009a56 <memcpy>
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	6126      	str	r6, [r4, #16]
 800bfea:	6165      	str	r5, [r4, #20]
 800bfec:	444e      	add	r6, r9
 800bfee:	eba5 0509 	sub.w	r5, r5, r9
 800bff2:	6026      	str	r6, [r4, #0]
 800bff4:	60a5      	str	r5, [r4, #8]
 800bff6:	463e      	mov	r6, r7
 800bff8:	42be      	cmp	r6, r7
 800bffa:	d900      	bls.n	800bffe <__ssputs_r+0x72>
 800bffc:	463e      	mov	r6, r7
 800bffe:	6820      	ldr	r0, [r4, #0]
 800c000:	4632      	mov	r2, r6
 800c002:	4641      	mov	r1, r8
 800c004:	f000 fb6a 	bl	800c6dc <memmove>
 800c008:	68a3      	ldr	r3, [r4, #8]
 800c00a:	1b9b      	subs	r3, r3, r6
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	4433      	add	r3, r6
 800c012:	6023      	str	r3, [r4, #0]
 800c014:	2000      	movs	r0, #0
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	462a      	mov	r2, r5
 800c01c:	f000 ff41 	bl	800cea2 <_realloc_r>
 800c020:	4606      	mov	r6, r0
 800c022:	2800      	cmp	r0, #0
 800c024:	d1e0      	bne.n	800bfe8 <__ssputs_r+0x5c>
 800c026:	6921      	ldr	r1, [r4, #16]
 800c028:	4650      	mov	r0, sl
 800c02a:	f7fe fb81 	bl	800a730 <_free_r>
 800c02e:	230c      	movs	r3, #12
 800c030:	f8ca 3000 	str.w	r3, [sl]
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	e7e9      	b.n	800c016 <__ssputs_r+0x8a>
	...

0800c044 <_svfiprintf_r>:
 800c044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c048:	4698      	mov	r8, r3
 800c04a:	898b      	ldrh	r3, [r1, #12]
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	b09d      	sub	sp, #116	@ 0x74
 800c050:	4607      	mov	r7, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4614      	mov	r4, r2
 800c056:	d510      	bpl.n	800c07a <_svfiprintf_r+0x36>
 800c058:	690b      	ldr	r3, [r1, #16]
 800c05a:	b973      	cbnz	r3, 800c07a <_svfiprintf_r+0x36>
 800c05c:	2140      	movs	r1, #64	@ 0x40
 800c05e:	f7fe fbdb 	bl	800a818 <_malloc_r>
 800c062:	6028      	str	r0, [r5, #0]
 800c064:	6128      	str	r0, [r5, #16]
 800c066:	b930      	cbnz	r0, 800c076 <_svfiprintf_r+0x32>
 800c068:	230c      	movs	r3, #12
 800c06a:	603b      	str	r3, [r7, #0]
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	b01d      	add	sp, #116	@ 0x74
 800c072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c076:	2340      	movs	r3, #64	@ 0x40
 800c078:	616b      	str	r3, [r5, #20]
 800c07a:	2300      	movs	r3, #0
 800c07c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07e:	2320      	movs	r3, #32
 800c080:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c084:	f8cd 800c 	str.w	r8, [sp, #12]
 800c088:	2330      	movs	r3, #48	@ 0x30
 800c08a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c228 <_svfiprintf_r+0x1e4>
 800c08e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c092:	f04f 0901 	mov.w	r9, #1
 800c096:	4623      	mov	r3, r4
 800c098:	469a      	mov	sl, r3
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	b10a      	cbz	r2, 800c0a4 <_svfiprintf_r+0x60>
 800c0a0:	2a25      	cmp	r2, #37	@ 0x25
 800c0a2:	d1f9      	bne.n	800c098 <_svfiprintf_r+0x54>
 800c0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c0a8:	d00b      	beq.n	800c0c2 <_svfiprintf_r+0x7e>
 800c0aa:	465b      	mov	r3, fp
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	f7ff ff6b 	bl	800bf8c <__ssputs_r>
 800c0b6:	3001      	adds	r0, #1
 800c0b8:	f000 80a7 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c0be:	445a      	add	r2, fp
 800c0c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 809f 	beq.w	800c20a <_svfiprintf_r+0x1c6>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0d6:	f10a 0a01 	add.w	sl, sl, #1
 800c0da:	9304      	str	r3, [sp, #16]
 800c0dc:	9307      	str	r3, [sp, #28]
 800c0de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0e4:	4654      	mov	r4, sl
 800c0e6:	2205      	movs	r2, #5
 800c0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ec:	484e      	ldr	r0, [pc, #312]	@ (800c228 <_svfiprintf_r+0x1e4>)
 800c0ee:	f7f4 f86f 	bl	80001d0 <memchr>
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	b9d8      	cbnz	r0, 800c12e <_svfiprintf_r+0xea>
 800c0f6:	06d0      	lsls	r0, r2, #27
 800c0f8:	bf44      	itt	mi
 800c0fa:	2320      	movmi	r3, #32
 800c0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c100:	0711      	lsls	r1, r2, #28
 800c102:	bf44      	itt	mi
 800c104:	232b      	movmi	r3, #43	@ 0x2b
 800c106:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c10a:	f89a 3000 	ldrb.w	r3, [sl]
 800c10e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c110:	d015      	beq.n	800c13e <_svfiprintf_r+0xfa>
 800c112:	9a07      	ldr	r2, [sp, #28]
 800c114:	4654      	mov	r4, sl
 800c116:	2000      	movs	r0, #0
 800c118:	f04f 0c0a 	mov.w	ip, #10
 800c11c:	4621      	mov	r1, r4
 800c11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c122:	3b30      	subs	r3, #48	@ 0x30
 800c124:	2b09      	cmp	r3, #9
 800c126:	d94b      	bls.n	800c1c0 <_svfiprintf_r+0x17c>
 800c128:	b1b0      	cbz	r0, 800c158 <_svfiprintf_r+0x114>
 800c12a:	9207      	str	r2, [sp, #28]
 800c12c:	e014      	b.n	800c158 <_svfiprintf_r+0x114>
 800c12e:	eba0 0308 	sub.w	r3, r0, r8
 800c132:	fa09 f303 	lsl.w	r3, r9, r3
 800c136:	4313      	orrs	r3, r2
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	46a2      	mov	sl, r4
 800c13c:	e7d2      	b.n	800c0e4 <_svfiprintf_r+0xa0>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	1d19      	adds	r1, r3, #4
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	9103      	str	r1, [sp, #12]
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfbb      	ittet	lt
 800c14a:	425b      	neglt	r3, r3
 800c14c:	f042 0202 	orrlt.w	r2, r2, #2
 800c150:	9307      	strge	r3, [sp, #28]
 800c152:	9307      	strlt	r3, [sp, #28]
 800c154:	bfb8      	it	lt
 800c156:	9204      	strlt	r2, [sp, #16]
 800c158:	7823      	ldrb	r3, [r4, #0]
 800c15a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c15c:	d10a      	bne.n	800c174 <_svfiprintf_r+0x130>
 800c15e:	7863      	ldrb	r3, [r4, #1]
 800c160:	2b2a      	cmp	r3, #42	@ 0x2a
 800c162:	d132      	bne.n	800c1ca <_svfiprintf_r+0x186>
 800c164:	9b03      	ldr	r3, [sp, #12]
 800c166:	1d1a      	adds	r2, r3, #4
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	9203      	str	r2, [sp, #12]
 800c16c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c170:	3402      	adds	r4, #2
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c238 <_svfiprintf_r+0x1f4>
 800c178:	7821      	ldrb	r1, [r4, #0]
 800c17a:	2203      	movs	r2, #3
 800c17c:	4650      	mov	r0, sl
 800c17e:	f7f4 f827 	bl	80001d0 <memchr>
 800c182:	b138      	cbz	r0, 800c194 <_svfiprintf_r+0x150>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	eba0 000a 	sub.w	r0, r0, sl
 800c18a:	2240      	movs	r2, #64	@ 0x40
 800c18c:	4082      	lsls	r2, r0
 800c18e:	4313      	orrs	r3, r2
 800c190:	3401      	adds	r4, #1
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4824      	ldr	r0, [pc, #144]	@ (800c22c <_svfiprintf_r+0x1e8>)
 800c19a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c19e:	2206      	movs	r2, #6
 800c1a0:	f7f4 f816 	bl	80001d0 <memchr>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	d036      	beq.n	800c216 <_svfiprintf_r+0x1d2>
 800c1a8:	4b21      	ldr	r3, [pc, #132]	@ (800c230 <_svfiprintf_r+0x1ec>)
 800c1aa:	bb1b      	cbnz	r3, 800c1f4 <_svfiprintf_r+0x1b0>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	3307      	adds	r3, #7
 800c1b0:	f023 0307 	bic.w	r3, r3, #7
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	9303      	str	r3, [sp, #12]
 800c1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ba:	4433      	add	r3, r6
 800c1bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1be:	e76a      	b.n	800c096 <_svfiprintf_r+0x52>
 800c1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e7a8      	b.n	800c11c <_svfiprintf_r+0xd8>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	3401      	adds	r4, #1
 800c1ce:	9305      	str	r3, [sp, #20]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	f04f 0c0a 	mov.w	ip, #10
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1dc:	3a30      	subs	r2, #48	@ 0x30
 800c1de:	2a09      	cmp	r2, #9
 800c1e0:	d903      	bls.n	800c1ea <_svfiprintf_r+0x1a6>
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c6      	beq.n	800c174 <_svfiprintf_r+0x130>
 800c1e6:	9105      	str	r1, [sp, #20]
 800c1e8:	e7c4      	b.n	800c174 <_svfiprintf_r+0x130>
 800c1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e7f0      	b.n	800c1d6 <_svfiprintf_r+0x192>
 800c1f4:	ab03      	add	r3, sp, #12
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c1fc:	a904      	add	r1, sp, #16
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7fc fc2a 	bl	8008a58 <_printf_float>
 800c204:	1c42      	adds	r2, r0, #1
 800c206:	4606      	mov	r6, r0
 800c208:	d1d6      	bne.n	800c1b8 <_svfiprintf_r+0x174>
 800c20a:	89ab      	ldrh	r3, [r5, #12]
 800c20c:	065b      	lsls	r3, r3, #25
 800c20e:	f53f af2d 	bmi.w	800c06c <_svfiprintf_r+0x28>
 800c212:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c214:	e72c      	b.n	800c070 <_svfiprintf_r+0x2c>
 800c216:	ab03      	add	r3, sp, #12
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462a      	mov	r2, r5
 800c21c:	4b05      	ldr	r3, [pc, #20]	@ (800c234 <_svfiprintf_r+0x1f0>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	4638      	mov	r0, r7
 800c222:	f7fc feb1 	bl	8008f88 <_printf_i>
 800c226:	e7ed      	b.n	800c204 <_svfiprintf_r+0x1c0>
 800c228:	0800d189 	.word	0x0800d189
 800c22c:	0800d193 	.word	0x0800d193
 800c230:	08008a59 	.word	0x08008a59
 800c234:	0800bf8d 	.word	0x0800bf8d
 800c238:	0800d18f 	.word	0x0800d18f

0800c23c <__sfputc_r>:
 800c23c:	6893      	ldr	r3, [r2, #8]
 800c23e:	3b01      	subs	r3, #1
 800c240:	2b00      	cmp	r3, #0
 800c242:	b410      	push	{r4}
 800c244:	6093      	str	r3, [r2, #8]
 800c246:	da08      	bge.n	800c25a <__sfputc_r+0x1e>
 800c248:	6994      	ldr	r4, [r2, #24]
 800c24a:	42a3      	cmp	r3, r4
 800c24c:	db01      	blt.n	800c252 <__sfputc_r+0x16>
 800c24e:	290a      	cmp	r1, #10
 800c250:	d103      	bne.n	800c25a <__sfputc_r+0x1e>
 800c252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c256:	f7fd baea 	b.w	800982e <__swbuf_r>
 800c25a:	6813      	ldr	r3, [r2, #0]
 800c25c:	1c58      	adds	r0, r3, #1
 800c25e:	6010      	str	r0, [r2, #0]
 800c260:	7019      	strb	r1, [r3, #0]
 800c262:	4608      	mov	r0, r1
 800c264:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <__sfputs_r>:
 800c26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26c:	4606      	mov	r6, r0
 800c26e:	460f      	mov	r7, r1
 800c270:	4614      	mov	r4, r2
 800c272:	18d5      	adds	r5, r2, r3
 800c274:	42ac      	cmp	r4, r5
 800c276:	d101      	bne.n	800c27c <__sfputs_r+0x12>
 800c278:	2000      	movs	r0, #0
 800c27a:	e007      	b.n	800c28c <__sfputs_r+0x22>
 800c27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c280:	463a      	mov	r2, r7
 800c282:	4630      	mov	r0, r6
 800c284:	f7ff ffda 	bl	800c23c <__sfputc_r>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d1f3      	bne.n	800c274 <__sfputs_r+0xa>
 800c28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c290 <_vfiprintf_r>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	460d      	mov	r5, r1
 800c296:	b09d      	sub	sp, #116	@ 0x74
 800c298:	4614      	mov	r4, r2
 800c29a:	4698      	mov	r8, r3
 800c29c:	4606      	mov	r6, r0
 800c29e:	b118      	cbz	r0, 800c2a8 <_vfiprintf_r+0x18>
 800c2a0:	6a03      	ldr	r3, [r0, #32]
 800c2a2:	b90b      	cbnz	r3, 800c2a8 <_vfiprintf_r+0x18>
 800c2a4:	f7fd fa28 	bl	80096f8 <__sinit>
 800c2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2aa:	07d9      	lsls	r1, r3, #31
 800c2ac:	d405      	bmi.n	800c2ba <_vfiprintf_r+0x2a>
 800c2ae:	89ab      	ldrh	r3, [r5, #12]
 800c2b0:	059a      	lsls	r2, r3, #22
 800c2b2:	d402      	bmi.n	800c2ba <_vfiprintf_r+0x2a>
 800c2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2b6:	f7fd fbcc 	bl	8009a52 <__retarget_lock_acquire_recursive>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	071b      	lsls	r3, r3, #28
 800c2be:	d501      	bpl.n	800c2c4 <_vfiprintf_r+0x34>
 800c2c0:	692b      	ldr	r3, [r5, #16]
 800c2c2:	b99b      	cbnz	r3, 800c2ec <_vfiprintf_r+0x5c>
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	f7fd faf0 	bl	80098ac <__swsetup_r>
 800c2cc:	b170      	cbz	r0, 800c2ec <_vfiprintf_r+0x5c>
 800c2ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2d0:	07dc      	lsls	r4, r3, #31
 800c2d2:	d504      	bpl.n	800c2de <_vfiprintf_r+0x4e>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	b01d      	add	sp, #116	@ 0x74
 800c2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2de:	89ab      	ldrh	r3, [r5, #12]
 800c2e0:	0598      	lsls	r0, r3, #22
 800c2e2:	d4f7      	bmi.n	800c2d4 <_vfiprintf_r+0x44>
 800c2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2e6:	f7fd fbb5 	bl	8009a54 <__retarget_lock_release_recursive>
 800c2ea:	e7f3      	b.n	800c2d4 <_vfiprintf_r+0x44>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f0:	2320      	movs	r3, #32
 800c2f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2fa:	2330      	movs	r3, #48	@ 0x30
 800c2fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c4ac <_vfiprintf_r+0x21c>
 800c300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c304:	f04f 0901 	mov.w	r9, #1
 800c308:	4623      	mov	r3, r4
 800c30a:	469a      	mov	sl, r3
 800c30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c310:	b10a      	cbz	r2, 800c316 <_vfiprintf_r+0x86>
 800c312:	2a25      	cmp	r2, #37	@ 0x25
 800c314:	d1f9      	bne.n	800c30a <_vfiprintf_r+0x7a>
 800c316:	ebba 0b04 	subs.w	fp, sl, r4
 800c31a:	d00b      	beq.n	800c334 <_vfiprintf_r+0xa4>
 800c31c:	465b      	mov	r3, fp
 800c31e:	4622      	mov	r2, r4
 800c320:	4629      	mov	r1, r5
 800c322:	4630      	mov	r0, r6
 800c324:	f7ff ffa1 	bl	800c26a <__sfputs_r>
 800c328:	3001      	adds	r0, #1
 800c32a:	f000 80a7 	beq.w	800c47c <_vfiprintf_r+0x1ec>
 800c32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c330:	445a      	add	r2, fp
 800c332:	9209      	str	r2, [sp, #36]	@ 0x24
 800c334:	f89a 3000 	ldrb.w	r3, [sl]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	f000 809f 	beq.w	800c47c <_vfiprintf_r+0x1ec>
 800c33e:	2300      	movs	r3, #0
 800c340:	f04f 32ff 	mov.w	r2, #4294967295
 800c344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c348:	f10a 0a01 	add.w	sl, sl, #1
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	9307      	str	r3, [sp, #28]
 800c350:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c354:	931a      	str	r3, [sp, #104]	@ 0x68
 800c356:	4654      	mov	r4, sl
 800c358:	2205      	movs	r2, #5
 800c35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35e:	4853      	ldr	r0, [pc, #332]	@ (800c4ac <_vfiprintf_r+0x21c>)
 800c360:	f7f3 ff36 	bl	80001d0 <memchr>
 800c364:	9a04      	ldr	r2, [sp, #16]
 800c366:	b9d8      	cbnz	r0, 800c3a0 <_vfiprintf_r+0x110>
 800c368:	06d1      	lsls	r1, r2, #27
 800c36a:	bf44      	itt	mi
 800c36c:	2320      	movmi	r3, #32
 800c36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c372:	0713      	lsls	r3, r2, #28
 800c374:	bf44      	itt	mi
 800c376:	232b      	movmi	r3, #43	@ 0x2b
 800c378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c37c:	f89a 3000 	ldrb.w	r3, [sl]
 800c380:	2b2a      	cmp	r3, #42	@ 0x2a
 800c382:	d015      	beq.n	800c3b0 <_vfiprintf_r+0x120>
 800c384:	9a07      	ldr	r2, [sp, #28]
 800c386:	4654      	mov	r4, sl
 800c388:	2000      	movs	r0, #0
 800c38a:	f04f 0c0a 	mov.w	ip, #10
 800c38e:	4621      	mov	r1, r4
 800c390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c394:	3b30      	subs	r3, #48	@ 0x30
 800c396:	2b09      	cmp	r3, #9
 800c398:	d94b      	bls.n	800c432 <_vfiprintf_r+0x1a2>
 800c39a:	b1b0      	cbz	r0, 800c3ca <_vfiprintf_r+0x13a>
 800c39c:	9207      	str	r2, [sp, #28]
 800c39e:	e014      	b.n	800c3ca <_vfiprintf_r+0x13a>
 800c3a0:	eba0 0308 	sub.w	r3, r0, r8
 800c3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	46a2      	mov	sl, r4
 800c3ae:	e7d2      	b.n	800c356 <_vfiprintf_r+0xc6>
 800c3b0:	9b03      	ldr	r3, [sp, #12]
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	9103      	str	r1, [sp, #12]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	bfbb      	ittet	lt
 800c3bc:	425b      	neglt	r3, r3
 800c3be:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c2:	9307      	strge	r3, [sp, #28]
 800c3c4:	9307      	strlt	r3, [sp, #28]
 800c3c6:	bfb8      	it	lt
 800c3c8:	9204      	strlt	r2, [sp, #16]
 800c3ca:	7823      	ldrb	r3, [r4, #0]
 800c3cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3ce:	d10a      	bne.n	800c3e6 <_vfiprintf_r+0x156>
 800c3d0:	7863      	ldrb	r3, [r4, #1]
 800c3d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3d4:	d132      	bne.n	800c43c <_vfiprintf_r+0x1ac>
 800c3d6:	9b03      	ldr	r3, [sp, #12]
 800c3d8:	1d1a      	adds	r2, r3, #4
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	9203      	str	r2, [sp, #12]
 800c3de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3e2:	3402      	adds	r4, #2
 800c3e4:	9305      	str	r3, [sp, #20]
 800c3e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4bc <_vfiprintf_r+0x22c>
 800c3ea:	7821      	ldrb	r1, [r4, #0]
 800c3ec:	2203      	movs	r2, #3
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	f7f3 feee 	bl	80001d0 <memchr>
 800c3f4:	b138      	cbz	r0, 800c406 <_vfiprintf_r+0x176>
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	eba0 000a 	sub.w	r0, r0, sl
 800c3fc:	2240      	movs	r2, #64	@ 0x40
 800c3fe:	4082      	lsls	r2, r0
 800c400:	4313      	orrs	r3, r2
 800c402:	3401      	adds	r4, #1
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c40a:	4829      	ldr	r0, [pc, #164]	@ (800c4b0 <_vfiprintf_r+0x220>)
 800c40c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c410:	2206      	movs	r2, #6
 800c412:	f7f3 fedd 	bl	80001d0 <memchr>
 800c416:	2800      	cmp	r0, #0
 800c418:	d03f      	beq.n	800c49a <_vfiprintf_r+0x20a>
 800c41a:	4b26      	ldr	r3, [pc, #152]	@ (800c4b4 <_vfiprintf_r+0x224>)
 800c41c:	bb1b      	cbnz	r3, 800c466 <_vfiprintf_r+0x1d6>
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	3307      	adds	r3, #7
 800c422:	f023 0307 	bic.w	r3, r3, #7
 800c426:	3308      	adds	r3, #8
 800c428:	9303      	str	r3, [sp, #12]
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	443b      	add	r3, r7
 800c42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c430:	e76a      	b.n	800c308 <_vfiprintf_r+0x78>
 800c432:	fb0c 3202 	mla	r2, ip, r2, r3
 800c436:	460c      	mov	r4, r1
 800c438:	2001      	movs	r0, #1
 800c43a:	e7a8      	b.n	800c38e <_vfiprintf_r+0xfe>
 800c43c:	2300      	movs	r3, #0
 800c43e:	3401      	adds	r4, #1
 800c440:	9305      	str	r3, [sp, #20]
 800c442:	4619      	mov	r1, r3
 800c444:	f04f 0c0a 	mov.w	ip, #10
 800c448:	4620      	mov	r0, r4
 800c44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c44e:	3a30      	subs	r2, #48	@ 0x30
 800c450:	2a09      	cmp	r2, #9
 800c452:	d903      	bls.n	800c45c <_vfiprintf_r+0x1cc>
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0c6      	beq.n	800c3e6 <_vfiprintf_r+0x156>
 800c458:	9105      	str	r1, [sp, #20]
 800c45a:	e7c4      	b.n	800c3e6 <_vfiprintf_r+0x156>
 800c45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c460:	4604      	mov	r4, r0
 800c462:	2301      	movs	r3, #1
 800c464:	e7f0      	b.n	800c448 <_vfiprintf_r+0x1b8>
 800c466:	ab03      	add	r3, sp, #12
 800c468:	9300      	str	r3, [sp, #0]
 800c46a:	462a      	mov	r2, r5
 800c46c:	4b12      	ldr	r3, [pc, #72]	@ (800c4b8 <_vfiprintf_r+0x228>)
 800c46e:	a904      	add	r1, sp, #16
 800c470:	4630      	mov	r0, r6
 800c472:	f7fc faf1 	bl	8008a58 <_printf_float>
 800c476:	4607      	mov	r7, r0
 800c478:	1c78      	adds	r0, r7, #1
 800c47a:	d1d6      	bne.n	800c42a <_vfiprintf_r+0x19a>
 800c47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c47e:	07d9      	lsls	r1, r3, #31
 800c480:	d405      	bmi.n	800c48e <_vfiprintf_r+0x1fe>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	059a      	lsls	r2, r3, #22
 800c486:	d402      	bmi.n	800c48e <_vfiprintf_r+0x1fe>
 800c488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c48a:	f7fd fae3 	bl	8009a54 <__retarget_lock_release_recursive>
 800c48e:	89ab      	ldrh	r3, [r5, #12]
 800c490:	065b      	lsls	r3, r3, #25
 800c492:	f53f af1f 	bmi.w	800c2d4 <_vfiprintf_r+0x44>
 800c496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c498:	e71e      	b.n	800c2d8 <_vfiprintf_r+0x48>
 800c49a:	ab03      	add	r3, sp, #12
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	462a      	mov	r2, r5
 800c4a0:	4b05      	ldr	r3, [pc, #20]	@ (800c4b8 <_vfiprintf_r+0x228>)
 800c4a2:	a904      	add	r1, sp, #16
 800c4a4:	4630      	mov	r0, r6
 800c4a6:	f7fc fd6f 	bl	8008f88 <_printf_i>
 800c4aa:	e7e4      	b.n	800c476 <_vfiprintf_r+0x1e6>
 800c4ac:	0800d189 	.word	0x0800d189
 800c4b0:	0800d193 	.word	0x0800d193
 800c4b4:	08008a59 	.word	0x08008a59
 800c4b8:	0800c26b 	.word	0x0800c26b
 800c4bc:	0800d18f 	.word	0x0800d18f

0800c4c0 <__sflush_r>:
 800c4c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c8:	0716      	lsls	r6, r2, #28
 800c4ca:	4605      	mov	r5, r0
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	d454      	bmi.n	800c57a <__sflush_r+0xba>
 800c4d0:	684b      	ldr	r3, [r1, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	dc02      	bgt.n	800c4dc <__sflush_r+0x1c>
 800c4d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	dd48      	ble.n	800c56e <__sflush_r+0xae>
 800c4dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4de:	2e00      	cmp	r6, #0
 800c4e0:	d045      	beq.n	800c56e <__sflush_r+0xae>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4e8:	682f      	ldr	r7, [r5, #0]
 800c4ea:	6a21      	ldr	r1, [r4, #32]
 800c4ec:	602b      	str	r3, [r5, #0]
 800c4ee:	d030      	beq.n	800c552 <__sflush_r+0x92>
 800c4f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	0759      	lsls	r1, r3, #29
 800c4f6:	d505      	bpl.n	800c504 <__sflush_r+0x44>
 800c4f8:	6863      	ldr	r3, [r4, #4]
 800c4fa:	1ad2      	subs	r2, r2, r3
 800c4fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4fe:	b10b      	cbz	r3, 800c504 <__sflush_r+0x44>
 800c500:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c502:	1ad2      	subs	r2, r2, r3
 800c504:	2300      	movs	r3, #0
 800c506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c508:	6a21      	ldr	r1, [r4, #32]
 800c50a:	4628      	mov	r0, r5
 800c50c:	47b0      	blx	r6
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	d106      	bne.n	800c522 <__sflush_r+0x62>
 800c514:	6829      	ldr	r1, [r5, #0]
 800c516:	291d      	cmp	r1, #29
 800c518:	d82b      	bhi.n	800c572 <__sflush_r+0xb2>
 800c51a:	4a2a      	ldr	r2, [pc, #168]	@ (800c5c4 <__sflush_r+0x104>)
 800c51c:	40ca      	lsrs	r2, r1
 800c51e:	07d6      	lsls	r6, r2, #31
 800c520:	d527      	bpl.n	800c572 <__sflush_r+0xb2>
 800c522:	2200      	movs	r2, #0
 800c524:	6062      	str	r2, [r4, #4]
 800c526:	04d9      	lsls	r1, r3, #19
 800c528:	6922      	ldr	r2, [r4, #16]
 800c52a:	6022      	str	r2, [r4, #0]
 800c52c:	d504      	bpl.n	800c538 <__sflush_r+0x78>
 800c52e:	1c42      	adds	r2, r0, #1
 800c530:	d101      	bne.n	800c536 <__sflush_r+0x76>
 800c532:	682b      	ldr	r3, [r5, #0]
 800c534:	b903      	cbnz	r3, 800c538 <__sflush_r+0x78>
 800c536:	6560      	str	r0, [r4, #84]	@ 0x54
 800c538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c53a:	602f      	str	r7, [r5, #0]
 800c53c:	b1b9      	cbz	r1, 800c56e <__sflush_r+0xae>
 800c53e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c542:	4299      	cmp	r1, r3
 800c544:	d002      	beq.n	800c54c <__sflush_r+0x8c>
 800c546:	4628      	mov	r0, r5
 800c548:	f7fe f8f2 	bl	800a730 <_free_r>
 800c54c:	2300      	movs	r3, #0
 800c54e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c550:	e00d      	b.n	800c56e <__sflush_r+0xae>
 800c552:	2301      	movs	r3, #1
 800c554:	4628      	mov	r0, r5
 800c556:	47b0      	blx	r6
 800c558:	4602      	mov	r2, r0
 800c55a:	1c50      	adds	r0, r2, #1
 800c55c:	d1c9      	bne.n	800c4f2 <__sflush_r+0x32>
 800c55e:	682b      	ldr	r3, [r5, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0c6      	beq.n	800c4f2 <__sflush_r+0x32>
 800c564:	2b1d      	cmp	r3, #29
 800c566:	d001      	beq.n	800c56c <__sflush_r+0xac>
 800c568:	2b16      	cmp	r3, #22
 800c56a:	d11e      	bne.n	800c5aa <__sflush_r+0xea>
 800c56c:	602f      	str	r7, [r5, #0]
 800c56e:	2000      	movs	r0, #0
 800c570:	e022      	b.n	800c5b8 <__sflush_r+0xf8>
 800c572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c576:	b21b      	sxth	r3, r3
 800c578:	e01b      	b.n	800c5b2 <__sflush_r+0xf2>
 800c57a:	690f      	ldr	r7, [r1, #16]
 800c57c:	2f00      	cmp	r7, #0
 800c57e:	d0f6      	beq.n	800c56e <__sflush_r+0xae>
 800c580:	0793      	lsls	r3, r2, #30
 800c582:	680e      	ldr	r6, [r1, #0]
 800c584:	bf08      	it	eq
 800c586:	694b      	ldreq	r3, [r1, #20]
 800c588:	600f      	str	r7, [r1, #0]
 800c58a:	bf18      	it	ne
 800c58c:	2300      	movne	r3, #0
 800c58e:	eba6 0807 	sub.w	r8, r6, r7
 800c592:	608b      	str	r3, [r1, #8]
 800c594:	f1b8 0f00 	cmp.w	r8, #0
 800c598:	dde9      	ble.n	800c56e <__sflush_r+0xae>
 800c59a:	6a21      	ldr	r1, [r4, #32]
 800c59c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c59e:	4643      	mov	r3, r8
 800c5a0:	463a      	mov	r2, r7
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b0      	blx	r6
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	dc08      	bgt.n	800c5bc <__sflush_r+0xfc>
 800c5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5b2:	81a3      	strh	r3, [r4, #12]
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5bc:	4407      	add	r7, r0
 800c5be:	eba8 0800 	sub.w	r8, r8, r0
 800c5c2:	e7e7      	b.n	800c594 <__sflush_r+0xd4>
 800c5c4:	20400001 	.word	0x20400001

0800c5c8 <_fflush_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	690b      	ldr	r3, [r1, #16]
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	b913      	cbnz	r3, 800c5d8 <_fflush_r+0x10>
 800c5d2:	2500      	movs	r5, #0
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	b118      	cbz	r0, 800c5e2 <_fflush_r+0x1a>
 800c5da:	6a03      	ldr	r3, [r0, #32]
 800c5dc:	b90b      	cbnz	r3, 800c5e2 <_fflush_r+0x1a>
 800c5de:	f7fd f88b 	bl	80096f8 <__sinit>
 800c5e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d0f3      	beq.n	800c5d2 <_fflush_r+0xa>
 800c5ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5ec:	07d0      	lsls	r0, r2, #31
 800c5ee:	d404      	bmi.n	800c5fa <_fflush_r+0x32>
 800c5f0:	0599      	lsls	r1, r3, #22
 800c5f2:	d402      	bmi.n	800c5fa <_fflush_r+0x32>
 800c5f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5f6:	f7fd fa2c 	bl	8009a52 <__retarget_lock_acquire_recursive>
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	f7ff ff5f 	bl	800c4c0 <__sflush_r>
 800c602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c604:	07da      	lsls	r2, r3, #31
 800c606:	4605      	mov	r5, r0
 800c608:	d4e4      	bmi.n	800c5d4 <_fflush_r+0xc>
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	059b      	lsls	r3, r3, #22
 800c60e:	d4e1      	bmi.n	800c5d4 <_fflush_r+0xc>
 800c610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c612:	f7fd fa1f 	bl	8009a54 <__retarget_lock_release_recursive>
 800c616:	e7dd      	b.n	800c5d4 <_fflush_r+0xc>

0800c618 <__swhatbuf_r>:
 800c618:	b570      	push	{r4, r5, r6, lr}
 800c61a:	460c      	mov	r4, r1
 800c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c620:	2900      	cmp	r1, #0
 800c622:	b096      	sub	sp, #88	@ 0x58
 800c624:	4615      	mov	r5, r2
 800c626:	461e      	mov	r6, r3
 800c628:	da0d      	bge.n	800c646 <__swhatbuf_r+0x2e>
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c630:	f04f 0100 	mov.w	r1, #0
 800c634:	bf14      	ite	ne
 800c636:	2340      	movne	r3, #64	@ 0x40
 800c638:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c63c:	2000      	movs	r0, #0
 800c63e:	6031      	str	r1, [r6, #0]
 800c640:	602b      	str	r3, [r5, #0]
 800c642:	b016      	add	sp, #88	@ 0x58
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	466a      	mov	r2, sp
 800c648:	f000 f874 	bl	800c734 <_fstat_r>
 800c64c:	2800      	cmp	r0, #0
 800c64e:	dbec      	blt.n	800c62a <__swhatbuf_r+0x12>
 800c650:	9901      	ldr	r1, [sp, #4]
 800c652:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c656:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c65a:	4259      	negs	r1, r3
 800c65c:	4159      	adcs	r1, r3
 800c65e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c662:	e7eb      	b.n	800c63c <__swhatbuf_r+0x24>

0800c664 <__smakebuf_r>:
 800c664:	898b      	ldrh	r3, [r1, #12]
 800c666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c668:	079d      	lsls	r5, r3, #30
 800c66a:	4606      	mov	r6, r0
 800c66c:	460c      	mov	r4, r1
 800c66e:	d507      	bpl.n	800c680 <__smakebuf_r+0x1c>
 800c670:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	6123      	str	r3, [r4, #16]
 800c678:	2301      	movs	r3, #1
 800c67a:	6163      	str	r3, [r4, #20]
 800c67c:	b003      	add	sp, #12
 800c67e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c680:	ab01      	add	r3, sp, #4
 800c682:	466a      	mov	r2, sp
 800c684:	f7ff ffc8 	bl	800c618 <__swhatbuf_r>
 800c688:	9f00      	ldr	r7, [sp, #0]
 800c68a:	4605      	mov	r5, r0
 800c68c:	4639      	mov	r1, r7
 800c68e:	4630      	mov	r0, r6
 800c690:	f7fe f8c2 	bl	800a818 <_malloc_r>
 800c694:	b948      	cbnz	r0, 800c6aa <__smakebuf_r+0x46>
 800c696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c69a:	059a      	lsls	r2, r3, #22
 800c69c:	d4ee      	bmi.n	800c67c <__smakebuf_r+0x18>
 800c69e:	f023 0303 	bic.w	r3, r3, #3
 800c6a2:	f043 0302 	orr.w	r3, r3, #2
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	e7e2      	b.n	800c670 <__smakebuf_r+0xc>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	6020      	str	r0, [r4, #0]
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b2:	81a3      	strh	r3, [r4, #12]
 800c6b4:	9b01      	ldr	r3, [sp, #4]
 800c6b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6ba:	b15b      	cbz	r3, 800c6d4 <__smakebuf_r+0x70>
 800c6bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f000 f849 	bl	800c758 <_isatty_r>
 800c6c6:	b128      	cbz	r0, 800c6d4 <__smakebuf_r+0x70>
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	f043 0301 	orr.w	r3, r3, #1
 800c6d2:	81a3      	strh	r3, [r4, #12]
 800c6d4:	89a3      	ldrh	r3, [r4, #12]
 800c6d6:	431d      	orrs	r5, r3
 800c6d8:	81a5      	strh	r5, [r4, #12]
 800c6da:	e7cf      	b.n	800c67c <__smakebuf_r+0x18>

0800c6dc <memmove>:
 800c6dc:	4288      	cmp	r0, r1
 800c6de:	b510      	push	{r4, lr}
 800c6e0:	eb01 0402 	add.w	r4, r1, r2
 800c6e4:	d902      	bls.n	800c6ec <memmove+0x10>
 800c6e6:	4284      	cmp	r4, r0
 800c6e8:	4623      	mov	r3, r4
 800c6ea:	d807      	bhi.n	800c6fc <memmove+0x20>
 800c6ec:	1e43      	subs	r3, r0, #1
 800c6ee:	42a1      	cmp	r1, r4
 800c6f0:	d008      	beq.n	800c704 <memmove+0x28>
 800c6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6fa:	e7f8      	b.n	800c6ee <memmove+0x12>
 800c6fc:	4402      	add	r2, r0
 800c6fe:	4601      	mov	r1, r0
 800c700:	428a      	cmp	r2, r1
 800c702:	d100      	bne.n	800c706 <memmove+0x2a>
 800c704:	bd10      	pop	{r4, pc}
 800c706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c70e:	e7f7      	b.n	800c700 <memmove+0x24>

0800c710 <strncmp>:
 800c710:	b510      	push	{r4, lr}
 800c712:	b16a      	cbz	r2, 800c730 <strncmp+0x20>
 800c714:	3901      	subs	r1, #1
 800c716:	1884      	adds	r4, r0, r2
 800c718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c71c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c720:	429a      	cmp	r2, r3
 800c722:	d103      	bne.n	800c72c <strncmp+0x1c>
 800c724:	42a0      	cmp	r0, r4
 800c726:	d001      	beq.n	800c72c <strncmp+0x1c>
 800c728:	2a00      	cmp	r2, #0
 800c72a:	d1f5      	bne.n	800c718 <strncmp+0x8>
 800c72c:	1ad0      	subs	r0, r2, r3
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	4610      	mov	r0, r2
 800c732:	e7fc      	b.n	800c72e <strncmp+0x1e>

0800c734 <_fstat_r>:
 800c734:	b538      	push	{r3, r4, r5, lr}
 800c736:	4d07      	ldr	r5, [pc, #28]	@ (800c754 <_fstat_r+0x20>)
 800c738:	2300      	movs	r3, #0
 800c73a:	4604      	mov	r4, r0
 800c73c:	4608      	mov	r0, r1
 800c73e:	4611      	mov	r1, r2
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	f7f4 ffbd 	bl	80016c0 <_fstat>
 800c746:	1c43      	adds	r3, r0, #1
 800c748:	d102      	bne.n	800c750 <_fstat_r+0x1c>
 800c74a:	682b      	ldr	r3, [r5, #0]
 800c74c:	b103      	cbz	r3, 800c750 <_fstat_r+0x1c>
 800c74e:	6023      	str	r3, [r4, #0]
 800c750:	bd38      	pop	{r3, r4, r5, pc}
 800c752:	bf00      	nop
 800c754:	200020f8 	.word	0x200020f8

0800c758 <_isatty_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4d06      	ldr	r5, [pc, #24]	@ (800c774 <_isatty_r+0x1c>)
 800c75c:	2300      	movs	r3, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	f7f4 ffbc 	bl	80016e0 <_isatty>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_isatty_r+0x1a>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_isatty_r+0x1a>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	200020f8 	.word	0x200020f8

0800c778 <_sbrk_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4d06      	ldr	r5, [pc, #24]	@ (800c794 <_sbrk_r+0x1c>)
 800c77c:	2300      	movs	r3, #0
 800c77e:	4604      	mov	r4, r0
 800c780:	4608      	mov	r0, r1
 800c782:	602b      	str	r3, [r5, #0]
 800c784:	f000 fc2e 	bl	800cfe4 <_sbrk>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_sbrk_r+0x1a>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_sbrk_r+0x1a>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	200020f8 	.word	0x200020f8

0800c798 <nan>:
 800c798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7a0 <nan+0x8>
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	00000000 	.word	0x00000000
 800c7a4:	7ff80000 	.word	0x7ff80000

0800c7a8 <__assert_func>:
 800c7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7aa:	4614      	mov	r4, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b09      	ldr	r3, [pc, #36]	@ (800c7d4 <__assert_func+0x2c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	68d8      	ldr	r0, [r3, #12]
 800c7b6:	b14c      	cbz	r4, 800c7cc <__assert_func+0x24>
 800c7b8:	4b07      	ldr	r3, [pc, #28]	@ (800c7d8 <__assert_func+0x30>)
 800c7ba:	9100      	str	r1, [sp, #0]
 800c7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7c0:	4906      	ldr	r1, [pc, #24]	@ (800c7dc <__assert_func+0x34>)
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	f000 fba8 	bl	800cf18 <fiprintf>
 800c7c8:	f000 fbb8 	bl	800cf3c <abort>
 800c7cc:	4b04      	ldr	r3, [pc, #16]	@ (800c7e0 <__assert_func+0x38>)
 800c7ce:	461c      	mov	r4, r3
 800c7d0:	e7f3      	b.n	800c7ba <__assert_func+0x12>
 800c7d2:	bf00      	nop
 800c7d4:	20000114 	.word	0x20000114
 800c7d8:	0800d1a2 	.word	0x0800d1a2
 800c7dc:	0800d1af 	.word	0x0800d1af
 800c7e0:	0800d1dd 	.word	0x0800d1dd

0800c7e4 <_calloc_r>:
 800c7e4:	b570      	push	{r4, r5, r6, lr}
 800c7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c7ea:	b934      	cbnz	r4, 800c7fa <_calloc_r+0x16>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7fe f813 	bl	800a818 <_malloc_r>
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	b928      	cbnz	r0, 800c802 <_calloc_r+0x1e>
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	bd70      	pop	{r4, r5, r6, pc}
 800c7fa:	220c      	movs	r2, #12
 800c7fc:	6002      	str	r2, [r0, #0]
 800c7fe:	2600      	movs	r6, #0
 800c800:	e7f9      	b.n	800c7f6 <_calloc_r+0x12>
 800c802:	462a      	mov	r2, r5
 800c804:	4621      	mov	r1, r4
 800c806:	f7fd f8a7 	bl	8009958 <memset>
 800c80a:	e7f4      	b.n	800c7f6 <_calloc_r+0x12>

0800c80c <rshift>:
 800c80c:	6903      	ldr	r3, [r0, #16]
 800c80e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c816:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c81a:	f100 0414 	add.w	r4, r0, #20
 800c81e:	dd45      	ble.n	800c8ac <rshift+0xa0>
 800c820:	f011 011f 	ands.w	r1, r1, #31
 800c824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c82c:	d10c      	bne.n	800c848 <rshift+0x3c>
 800c82e:	f100 0710 	add.w	r7, r0, #16
 800c832:	4629      	mov	r1, r5
 800c834:	42b1      	cmp	r1, r6
 800c836:	d334      	bcc.n	800c8a2 <rshift+0x96>
 800c838:	1a9b      	subs	r3, r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	1eea      	subs	r2, r5, #3
 800c83e:	4296      	cmp	r6, r2
 800c840:	bf38      	it	cc
 800c842:	2300      	movcc	r3, #0
 800c844:	4423      	add	r3, r4
 800c846:	e015      	b.n	800c874 <rshift+0x68>
 800c848:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c84c:	f1c1 0820 	rsb	r8, r1, #32
 800c850:	40cf      	lsrs	r7, r1
 800c852:	f105 0e04 	add.w	lr, r5, #4
 800c856:	46a1      	mov	r9, r4
 800c858:	4576      	cmp	r6, lr
 800c85a:	46f4      	mov	ip, lr
 800c85c:	d815      	bhi.n	800c88a <rshift+0x7e>
 800c85e:	1a9a      	subs	r2, r3, r2
 800c860:	0092      	lsls	r2, r2, #2
 800c862:	3a04      	subs	r2, #4
 800c864:	3501      	adds	r5, #1
 800c866:	42ae      	cmp	r6, r5
 800c868:	bf38      	it	cc
 800c86a:	2200      	movcc	r2, #0
 800c86c:	18a3      	adds	r3, r4, r2
 800c86e:	50a7      	str	r7, [r4, r2]
 800c870:	b107      	cbz	r7, 800c874 <rshift+0x68>
 800c872:	3304      	adds	r3, #4
 800c874:	1b1a      	subs	r2, r3, r4
 800c876:	42a3      	cmp	r3, r4
 800c878:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c87c:	bf08      	it	eq
 800c87e:	2300      	moveq	r3, #0
 800c880:	6102      	str	r2, [r0, #16]
 800c882:	bf08      	it	eq
 800c884:	6143      	streq	r3, [r0, #20]
 800c886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c88a:	f8dc c000 	ldr.w	ip, [ip]
 800c88e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c892:	ea4c 0707 	orr.w	r7, ip, r7
 800c896:	f849 7b04 	str.w	r7, [r9], #4
 800c89a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c89e:	40cf      	lsrs	r7, r1
 800c8a0:	e7da      	b.n	800c858 <rshift+0x4c>
 800c8a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8aa:	e7c3      	b.n	800c834 <rshift+0x28>
 800c8ac:	4623      	mov	r3, r4
 800c8ae:	e7e1      	b.n	800c874 <rshift+0x68>

0800c8b0 <__hexdig_fun>:
 800c8b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c8b4:	2b09      	cmp	r3, #9
 800c8b6:	d802      	bhi.n	800c8be <__hexdig_fun+0xe>
 800c8b8:	3820      	subs	r0, #32
 800c8ba:	b2c0      	uxtb	r0, r0
 800c8bc:	4770      	bx	lr
 800c8be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c8c2:	2b05      	cmp	r3, #5
 800c8c4:	d801      	bhi.n	800c8ca <__hexdig_fun+0x1a>
 800c8c6:	3847      	subs	r0, #71	@ 0x47
 800c8c8:	e7f7      	b.n	800c8ba <__hexdig_fun+0xa>
 800c8ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c8ce:	2b05      	cmp	r3, #5
 800c8d0:	d801      	bhi.n	800c8d6 <__hexdig_fun+0x26>
 800c8d2:	3827      	subs	r0, #39	@ 0x27
 800c8d4:	e7f1      	b.n	800c8ba <__hexdig_fun+0xa>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	4770      	bx	lr
	...

0800c8dc <__gethex>:
 800c8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	468a      	mov	sl, r1
 800c8e4:	9302      	str	r3, [sp, #8]
 800c8e6:	680b      	ldr	r3, [r1, #0]
 800c8e8:	9001      	str	r0, [sp, #4]
 800c8ea:	4690      	mov	r8, r2
 800c8ec:	1c9c      	adds	r4, r3, #2
 800c8ee:	46a1      	mov	r9, r4
 800c8f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c8f4:	2830      	cmp	r0, #48	@ 0x30
 800c8f6:	d0fa      	beq.n	800c8ee <__gethex+0x12>
 800c8f8:	eba9 0303 	sub.w	r3, r9, r3
 800c8fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c900:	f7ff ffd6 	bl	800c8b0 <__hexdig_fun>
 800c904:	4605      	mov	r5, r0
 800c906:	2800      	cmp	r0, #0
 800c908:	d168      	bne.n	800c9dc <__gethex+0x100>
 800c90a:	49a0      	ldr	r1, [pc, #640]	@ (800cb8c <__gethex+0x2b0>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	4648      	mov	r0, r9
 800c910:	f7ff fefe 	bl	800c710 <strncmp>
 800c914:	4607      	mov	r7, r0
 800c916:	2800      	cmp	r0, #0
 800c918:	d167      	bne.n	800c9ea <__gethex+0x10e>
 800c91a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c91e:	4626      	mov	r6, r4
 800c920:	f7ff ffc6 	bl	800c8b0 <__hexdig_fun>
 800c924:	2800      	cmp	r0, #0
 800c926:	d062      	beq.n	800c9ee <__gethex+0x112>
 800c928:	4623      	mov	r3, r4
 800c92a:	7818      	ldrb	r0, [r3, #0]
 800c92c:	2830      	cmp	r0, #48	@ 0x30
 800c92e:	4699      	mov	r9, r3
 800c930:	f103 0301 	add.w	r3, r3, #1
 800c934:	d0f9      	beq.n	800c92a <__gethex+0x4e>
 800c936:	f7ff ffbb 	bl	800c8b0 <__hexdig_fun>
 800c93a:	fab0 f580 	clz	r5, r0
 800c93e:	096d      	lsrs	r5, r5, #5
 800c940:	f04f 0b01 	mov.w	fp, #1
 800c944:	464a      	mov	r2, r9
 800c946:	4616      	mov	r6, r2
 800c948:	3201      	adds	r2, #1
 800c94a:	7830      	ldrb	r0, [r6, #0]
 800c94c:	f7ff ffb0 	bl	800c8b0 <__hexdig_fun>
 800c950:	2800      	cmp	r0, #0
 800c952:	d1f8      	bne.n	800c946 <__gethex+0x6a>
 800c954:	498d      	ldr	r1, [pc, #564]	@ (800cb8c <__gethex+0x2b0>)
 800c956:	2201      	movs	r2, #1
 800c958:	4630      	mov	r0, r6
 800c95a:	f7ff fed9 	bl	800c710 <strncmp>
 800c95e:	2800      	cmp	r0, #0
 800c960:	d13f      	bne.n	800c9e2 <__gethex+0x106>
 800c962:	b944      	cbnz	r4, 800c976 <__gethex+0x9a>
 800c964:	1c74      	adds	r4, r6, #1
 800c966:	4622      	mov	r2, r4
 800c968:	4616      	mov	r6, r2
 800c96a:	3201      	adds	r2, #1
 800c96c:	7830      	ldrb	r0, [r6, #0]
 800c96e:	f7ff ff9f 	bl	800c8b0 <__hexdig_fun>
 800c972:	2800      	cmp	r0, #0
 800c974:	d1f8      	bne.n	800c968 <__gethex+0x8c>
 800c976:	1ba4      	subs	r4, r4, r6
 800c978:	00a7      	lsls	r7, r4, #2
 800c97a:	7833      	ldrb	r3, [r6, #0]
 800c97c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c980:	2b50      	cmp	r3, #80	@ 0x50
 800c982:	d13e      	bne.n	800ca02 <__gethex+0x126>
 800c984:	7873      	ldrb	r3, [r6, #1]
 800c986:	2b2b      	cmp	r3, #43	@ 0x2b
 800c988:	d033      	beq.n	800c9f2 <__gethex+0x116>
 800c98a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c98c:	d034      	beq.n	800c9f8 <__gethex+0x11c>
 800c98e:	1c71      	adds	r1, r6, #1
 800c990:	2400      	movs	r4, #0
 800c992:	7808      	ldrb	r0, [r1, #0]
 800c994:	f7ff ff8c 	bl	800c8b0 <__hexdig_fun>
 800c998:	1e43      	subs	r3, r0, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b18      	cmp	r3, #24
 800c99e:	d830      	bhi.n	800ca02 <__gethex+0x126>
 800c9a0:	f1a0 0210 	sub.w	r2, r0, #16
 800c9a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9a8:	f7ff ff82 	bl	800c8b0 <__hexdig_fun>
 800c9ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800c9b0:	fa5f fc8c 	uxtb.w	ip, ip
 800c9b4:	f1bc 0f18 	cmp.w	ip, #24
 800c9b8:	f04f 030a 	mov.w	r3, #10
 800c9bc:	d91e      	bls.n	800c9fc <__gethex+0x120>
 800c9be:	b104      	cbz	r4, 800c9c2 <__gethex+0xe6>
 800c9c0:	4252      	negs	r2, r2
 800c9c2:	4417      	add	r7, r2
 800c9c4:	f8ca 1000 	str.w	r1, [sl]
 800c9c8:	b1ed      	cbz	r5, 800ca06 <__gethex+0x12a>
 800c9ca:	f1bb 0f00 	cmp.w	fp, #0
 800c9ce:	bf0c      	ite	eq
 800c9d0:	2506      	moveq	r5, #6
 800c9d2:	2500      	movne	r5, #0
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	b005      	add	sp, #20
 800c9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9dc:	2500      	movs	r5, #0
 800c9de:	462c      	mov	r4, r5
 800c9e0:	e7b0      	b.n	800c944 <__gethex+0x68>
 800c9e2:	2c00      	cmp	r4, #0
 800c9e4:	d1c7      	bne.n	800c976 <__gethex+0x9a>
 800c9e6:	4627      	mov	r7, r4
 800c9e8:	e7c7      	b.n	800c97a <__gethex+0x9e>
 800c9ea:	464e      	mov	r6, r9
 800c9ec:	462f      	mov	r7, r5
 800c9ee:	2501      	movs	r5, #1
 800c9f0:	e7c3      	b.n	800c97a <__gethex+0x9e>
 800c9f2:	2400      	movs	r4, #0
 800c9f4:	1cb1      	adds	r1, r6, #2
 800c9f6:	e7cc      	b.n	800c992 <__gethex+0xb6>
 800c9f8:	2401      	movs	r4, #1
 800c9fa:	e7fb      	b.n	800c9f4 <__gethex+0x118>
 800c9fc:	fb03 0002 	mla	r0, r3, r2, r0
 800ca00:	e7ce      	b.n	800c9a0 <__gethex+0xc4>
 800ca02:	4631      	mov	r1, r6
 800ca04:	e7de      	b.n	800c9c4 <__gethex+0xe8>
 800ca06:	eba6 0309 	sub.w	r3, r6, r9
 800ca0a:	3b01      	subs	r3, #1
 800ca0c:	4629      	mov	r1, r5
 800ca0e:	2b07      	cmp	r3, #7
 800ca10:	dc0a      	bgt.n	800ca28 <__gethex+0x14c>
 800ca12:	9801      	ldr	r0, [sp, #4]
 800ca14:	f7fd ff8c 	bl	800a930 <_Balloc>
 800ca18:	4604      	mov	r4, r0
 800ca1a:	b940      	cbnz	r0, 800ca2e <__gethex+0x152>
 800ca1c:	4b5c      	ldr	r3, [pc, #368]	@ (800cb90 <__gethex+0x2b4>)
 800ca1e:	4602      	mov	r2, r0
 800ca20:	21e4      	movs	r1, #228	@ 0xe4
 800ca22:	485c      	ldr	r0, [pc, #368]	@ (800cb94 <__gethex+0x2b8>)
 800ca24:	f7ff fec0 	bl	800c7a8 <__assert_func>
 800ca28:	3101      	adds	r1, #1
 800ca2a:	105b      	asrs	r3, r3, #1
 800ca2c:	e7ef      	b.n	800ca0e <__gethex+0x132>
 800ca2e:	f100 0a14 	add.w	sl, r0, #20
 800ca32:	2300      	movs	r3, #0
 800ca34:	4655      	mov	r5, sl
 800ca36:	469b      	mov	fp, r3
 800ca38:	45b1      	cmp	r9, r6
 800ca3a:	d337      	bcc.n	800caac <__gethex+0x1d0>
 800ca3c:	f845 bb04 	str.w	fp, [r5], #4
 800ca40:	eba5 050a 	sub.w	r5, r5, sl
 800ca44:	10ad      	asrs	r5, r5, #2
 800ca46:	6125      	str	r5, [r4, #16]
 800ca48:	4658      	mov	r0, fp
 800ca4a:	f7fe f863 	bl	800ab14 <__hi0bits>
 800ca4e:	016d      	lsls	r5, r5, #5
 800ca50:	f8d8 6000 	ldr.w	r6, [r8]
 800ca54:	1a2d      	subs	r5, r5, r0
 800ca56:	42b5      	cmp	r5, r6
 800ca58:	dd54      	ble.n	800cb04 <__gethex+0x228>
 800ca5a:	1bad      	subs	r5, r5, r6
 800ca5c:	4629      	mov	r1, r5
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7fe fbef 	bl	800b242 <__any_on>
 800ca64:	4681      	mov	r9, r0
 800ca66:	b178      	cbz	r0, 800ca88 <__gethex+0x1ac>
 800ca68:	1e6b      	subs	r3, r5, #1
 800ca6a:	1159      	asrs	r1, r3, #5
 800ca6c:	f003 021f 	and.w	r2, r3, #31
 800ca70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca74:	f04f 0901 	mov.w	r9, #1
 800ca78:	fa09 f202 	lsl.w	r2, r9, r2
 800ca7c:	420a      	tst	r2, r1
 800ca7e:	d003      	beq.n	800ca88 <__gethex+0x1ac>
 800ca80:	454b      	cmp	r3, r9
 800ca82:	dc36      	bgt.n	800caf2 <__gethex+0x216>
 800ca84:	f04f 0902 	mov.w	r9, #2
 800ca88:	4629      	mov	r1, r5
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7ff febe 	bl	800c80c <rshift>
 800ca90:	442f      	add	r7, r5
 800ca92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca96:	42bb      	cmp	r3, r7
 800ca98:	da42      	bge.n	800cb20 <__gethex+0x244>
 800ca9a:	9801      	ldr	r0, [sp, #4]
 800ca9c:	4621      	mov	r1, r4
 800ca9e:	f7fd ff87 	bl	800a9b0 <_Bfree>
 800caa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800caa4:	2300      	movs	r3, #0
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	25a3      	movs	r5, #163	@ 0xa3
 800caaa:	e793      	b.n	800c9d4 <__gethex+0xf8>
 800caac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cab0:	2a2e      	cmp	r2, #46	@ 0x2e
 800cab2:	d012      	beq.n	800cada <__gethex+0x1fe>
 800cab4:	2b20      	cmp	r3, #32
 800cab6:	d104      	bne.n	800cac2 <__gethex+0x1e6>
 800cab8:	f845 bb04 	str.w	fp, [r5], #4
 800cabc:	f04f 0b00 	mov.w	fp, #0
 800cac0:	465b      	mov	r3, fp
 800cac2:	7830      	ldrb	r0, [r6, #0]
 800cac4:	9303      	str	r3, [sp, #12]
 800cac6:	f7ff fef3 	bl	800c8b0 <__hexdig_fun>
 800caca:	9b03      	ldr	r3, [sp, #12]
 800cacc:	f000 000f 	and.w	r0, r0, #15
 800cad0:	4098      	lsls	r0, r3
 800cad2:	ea4b 0b00 	orr.w	fp, fp, r0
 800cad6:	3304      	adds	r3, #4
 800cad8:	e7ae      	b.n	800ca38 <__gethex+0x15c>
 800cada:	45b1      	cmp	r9, r6
 800cadc:	d8ea      	bhi.n	800cab4 <__gethex+0x1d8>
 800cade:	492b      	ldr	r1, [pc, #172]	@ (800cb8c <__gethex+0x2b0>)
 800cae0:	9303      	str	r3, [sp, #12]
 800cae2:	2201      	movs	r2, #1
 800cae4:	4630      	mov	r0, r6
 800cae6:	f7ff fe13 	bl	800c710 <strncmp>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	2800      	cmp	r0, #0
 800caee:	d1e1      	bne.n	800cab4 <__gethex+0x1d8>
 800caf0:	e7a2      	b.n	800ca38 <__gethex+0x15c>
 800caf2:	1ea9      	subs	r1, r5, #2
 800caf4:	4620      	mov	r0, r4
 800caf6:	f7fe fba4 	bl	800b242 <__any_on>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d0c2      	beq.n	800ca84 <__gethex+0x1a8>
 800cafe:	f04f 0903 	mov.w	r9, #3
 800cb02:	e7c1      	b.n	800ca88 <__gethex+0x1ac>
 800cb04:	da09      	bge.n	800cb1a <__gethex+0x23e>
 800cb06:	1b75      	subs	r5, r6, r5
 800cb08:	4621      	mov	r1, r4
 800cb0a:	9801      	ldr	r0, [sp, #4]
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	f7fe f95f 	bl	800add0 <__lshift>
 800cb12:	1b7f      	subs	r7, r7, r5
 800cb14:	4604      	mov	r4, r0
 800cb16:	f100 0a14 	add.w	sl, r0, #20
 800cb1a:	f04f 0900 	mov.w	r9, #0
 800cb1e:	e7b8      	b.n	800ca92 <__gethex+0x1b6>
 800cb20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb24:	42bd      	cmp	r5, r7
 800cb26:	dd6f      	ble.n	800cc08 <__gethex+0x32c>
 800cb28:	1bed      	subs	r5, r5, r7
 800cb2a:	42ae      	cmp	r6, r5
 800cb2c:	dc34      	bgt.n	800cb98 <__gethex+0x2bc>
 800cb2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb32:	2b02      	cmp	r3, #2
 800cb34:	d022      	beq.n	800cb7c <__gethex+0x2a0>
 800cb36:	2b03      	cmp	r3, #3
 800cb38:	d024      	beq.n	800cb84 <__gethex+0x2a8>
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d115      	bne.n	800cb6a <__gethex+0x28e>
 800cb3e:	42ae      	cmp	r6, r5
 800cb40:	d113      	bne.n	800cb6a <__gethex+0x28e>
 800cb42:	2e01      	cmp	r6, #1
 800cb44:	d10b      	bne.n	800cb5e <__gethex+0x282>
 800cb46:	9a02      	ldr	r2, [sp, #8]
 800cb48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb4c:	6013      	str	r3, [r2, #0]
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6123      	str	r3, [r4, #16]
 800cb52:	f8ca 3000 	str.w	r3, [sl]
 800cb56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb58:	2562      	movs	r5, #98	@ 0x62
 800cb5a:	601c      	str	r4, [r3, #0]
 800cb5c:	e73a      	b.n	800c9d4 <__gethex+0xf8>
 800cb5e:	1e71      	subs	r1, r6, #1
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7fe fb6e 	bl	800b242 <__any_on>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	d1ed      	bne.n	800cb46 <__gethex+0x26a>
 800cb6a:	9801      	ldr	r0, [sp, #4]
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	f7fd ff1f 	bl	800a9b0 <_Bfree>
 800cb72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb74:	2300      	movs	r3, #0
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	2550      	movs	r5, #80	@ 0x50
 800cb7a:	e72b      	b.n	800c9d4 <__gethex+0xf8>
 800cb7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1f3      	bne.n	800cb6a <__gethex+0x28e>
 800cb82:	e7e0      	b.n	800cb46 <__gethex+0x26a>
 800cb84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1dd      	bne.n	800cb46 <__gethex+0x26a>
 800cb8a:	e7ee      	b.n	800cb6a <__gethex+0x28e>
 800cb8c:	0800d187 	.word	0x0800d187
 800cb90:	0800d11d 	.word	0x0800d11d
 800cb94:	0800d1de 	.word	0x0800d1de
 800cb98:	1e6f      	subs	r7, r5, #1
 800cb9a:	f1b9 0f00 	cmp.w	r9, #0
 800cb9e:	d130      	bne.n	800cc02 <__gethex+0x326>
 800cba0:	b127      	cbz	r7, 800cbac <__gethex+0x2d0>
 800cba2:	4639      	mov	r1, r7
 800cba4:	4620      	mov	r0, r4
 800cba6:	f7fe fb4c 	bl	800b242 <__any_on>
 800cbaa:	4681      	mov	r9, r0
 800cbac:	117a      	asrs	r2, r7, #5
 800cbae:	2301      	movs	r3, #1
 800cbb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cbb4:	f007 071f 	and.w	r7, r7, #31
 800cbb8:	40bb      	lsls	r3, r7
 800cbba:	4213      	tst	r3, r2
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	bf18      	it	ne
 800cbc2:	f049 0902 	orrne.w	r9, r9, #2
 800cbc6:	f7ff fe21 	bl	800c80c <rshift>
 800cbca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cbce:	1b76      	subs	r6, r6, r5
 800cbd0:	2502      	movs	r5, #2
 800cbd2:	f1b9 0f00 	cmp.w	r9, #0
 800cbd6:	d047      	beq.n	800cc68 <__gethex+0x38c>
 800cbd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbdc:	2b02      	cmp	r3, #2
 800cbde:	d015      	beq.n	800cc0c <__gethex+0x330>
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d017      	beq.n	800cc14 <__gethex+0x338>
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d109      	bne.n	800cbfc <__gethex+0x320>
 800cbe8:	f019 0f02 	tst.w	r9, #2
 800cbec:	d006      	beq.n	800cbfc <__gethex+0x320>
 800cbee:	f8da 3000 	ldr.w	r3, [sl]
 800cbf2:	ea49 0903 	orr.w	r9, r9, r3
 800cbf6:	f019 0f01 	tst.w	r9, #1
 800cbfa:	d10e      	bne.n	800cc1a <__gethex+0x33e>
 800cbfc:	f045 0510 	orr.w	r5, r5, #16
 800cc00:	e032      	b.n	800cc68 <__gethex+0x38c>
 800cc02:	f04f 0901 	mov.w	r9, #1
 800cc06:	e7d1      	b.n	800cbac <__gethex+0x2d0>
 800cc08:	2501      	movs	r5, #1
 800cc0a:	e7e2      	b.n	800cbd2 <__gethex+0x2f6>
 800cc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc0e:	f1c3 0301 	rsb	r3, r3, #1
 800cc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0f0      	beq.n	800cbfc <__gethex+0x320>
 800cc1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc1e:	f104 0314 	add.w	r3, r4, #20
 800cc22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc2a:	f04f 0c00 	mov.w	ip, #0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc38:	d01b      	beq.n	800cc72 <__gethex+0x396>
 800cc3a:	3201      	adds	r2, #1
 800cc3c:	6002      	str	r2, [r0, #0]
 800cc3e:	2d02      	cmp	r5, #2
 800cc40:	f104 0314 	add.w	r3, r4, #20
 800cc44:	d13c      	bne.n	800ccc0 <__gethex+0x3e4>
 800cc46:	f8d8 2000 	ldr.w	r2, [r8]
 800cc4a:	3a01      	subs	r2, #1
 800cc4c:	42b2      	cmp	r2, r6
 800cc4e:	d109      	bne.n	800cc64 <__gethex+0x388>
 800cc50:	1171      	asrs	r1, r6, #5
 800cc52:	2201      	movs	r2, #1
 800cc54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc58:	f006 061f 	and.w	r6, r6, #31
 800cc5c:	fa02 f606 	lsl.w	r6, r2, r6
 800cc60:	421e      	tst	r6, r3
 800cc62:	d13a      	bne.n	800ccda <__gethex+0x3fe>
 800cc64:	f045 0520 	orr.w	r5, r5, #32
 800cc68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc6a:	601c      	str	r4, [r3, #0]
 800cc6c:	9b02      	ldr	r3, [sp, #8]
 800cc6e:	601f      	str	r7, [r3, #0]
 800cc70:	e6b0      	b.n	800c9d4 <__gethex+0xf8>
 800cc72:	4299      	cmp	r1, r3
 800cc74:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc78:	d8d9      	bhi.n	800cc2e <__gethex+0x352>
 800cc7a:	68a3      	ldr	r3, [r4, #8]
 800cc7c:	459b      	cmp	fp, r3
 800cc7e:	db17      	blt.n	800ccb0 <__gethex+0x3d4>
 800cc80:	6861      	ldr	r1, [r4, #4]
 800cc82:	9801      	ldr	r0, [sp, #4]
 800cc84:	3101      	adds	r1, #1
 800cc86:	f7fd fe53 	bl	800a930 <_Balloc>
 800cc8a:	4681      	mov	r9, r0
 800cc8c:	b918      	cbnz	r0, 800cc96 <__gethex+0x3ba>
 800cc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800ccf8 <__gethex+0x41c>)
 800cc90:	4602      	mov	r2, r0
 800cc92:	2184      	movs	r1, #132	@ 0x84
 800cc94:	e6c5      	b.n	800ca22 <__gethex+0x146>
 800cc96:	6922      	ldr	r2, [r4, #16]
 800cc98:	3202      	adds	r2, #2
 800cc9a:	f104 010c 	add.w	r1, r4, #12
 800cc9e:	0092      	lsls	r2, r2, #2
 800cca0:	300c      	adds	r0, #12
 800cca2:	f7fc fed8 	bl	8009a56 <memcpy>
 800cca6:	4621      	mov	r1, r4
 800cca8:	9801      	ldr	r0, [sp, #4]
 800ccaa:	f7fd fe81 	bl	800a9b0 <_Bfree>
 800ccae:	464c      	mov	r4, r9
 800ccb0:	6923      	ldr	r3, [r4, #16]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ccb8:	6122      	str	r2, [r4, #16]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	615a      	str	r2, [r3, #20]
 800ccbe:	e7be      	b.n	800cc3e <__gethex+0x362>
 800ccc0:	6922      	ldr	r2, [r4, #16]
 800ccc2:	455a      	cmp	r2, fp
 800ccc4:	dd0b      	ble.n	800ccde <__gethex+0x402>
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f7ff fd9f 	bl	800c80c <rshift>
 800ccce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ccd2:	3701      	adds	r7, #1
 800ccd4:	42bb      	cmp	r3, r7
 800ccd6:	f6ff aee0 	blt.w	800ca9a <__gethex+0x1be>
 800ccda:	2501      	movs	r5, #1
 800ccdc:	e7c2      	b.n	800cc64 <__gethex+0x388>
 800ccde:	f016 061f 	ands.w	r6, r6, #31
 800cce2:	d0fa      	beq.n	800ccda <__gethex+0x3fe>
 800cce4:	4453      	add	r3, sl
 800cce6:	f1c6 0620 	rsb	r6, r6, #32
 800ccea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccee:	f7fd ff11 	bl	800ab14 <__hi0bits>
 800ccf2:	42b0      	cmp	r0, r6
 800ccf4:	dbe7      	blt.n	800ccc6 <__gethex+0x3ea>
 800ccf6:	e7f0      	b.n	800ccda <__gethex+0x3fe>
 800ccf8:	0800d11d 	.word	0x0800d11d

0800ccfc <L_shift>:
 800ccfc:	f1c2 0208 	rsb	r2, r2, #8
 800cd00:	0092      	lsls	r2, r2, #2
 800cd02:	b570      	push	{r4, r5, r6, lr}
 800cd04:	f1c2 0620 	rsb	r6, r2, #32
 800cd08:	6843      	ldr	r3, [r0, #4]
 800cd0a:	6804      	ldr	r4, [r0, #0]
 800cd0c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd10:	432c      	orrs	r4, r5
 800cd12:	40d3      	lsrs	r3, r2
 800cd14:	6004      	str	r4, [r0, #0]
 800cd16:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd1a:	4288      	cmp	r0, r1
 800cd1c:	d3f4      	bcc.n	800cd08 <L_shift+0xc>
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}

0800cd20 <__match>:
 800cd20:	b530      	push	{r4, r5, lr}
 800cd22:	6803      	ldr	r3, [r0, #0]
 800cd24:	3301      	adds	r3, #1
 800cd26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd2a:	b914      	cbnz	r4, 800cd32 <__match+0x12>
 800cd2c:	6003      	str	r3, [r0, #0]
 800cd2e:	2001      	movs	r0, #1
 800cd30:	bd30      	pop	{r4, r5, pc}
 800cd32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cd3a:	2d19      	cmp	r5, #25
 800cd3c:	bf98      	it	ls
 800cd3e:	3220      	addls	r2, #32
 800cd40:	42a2      	cmp	r2, r4
 800cd42:	d0f0      	beq.n	800cd26 <__match+0x6>
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7f3      	b.n	800cd30 <__match+0x10>

0800cd48 <__hexnan>:
 800cd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd4c:	680b      	ldr	r3, [r1, #0]
 800cd4e:	6801      	ldr	r1, [r0, #0]
 800cd50:	115e      	asrs	r6, r3, #5
 800cd52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd56:	f013 031f 	ands.w	r3, r3, #31
 800cd5a:	b087      	sub	sp, #28
 800cd5c:	bf18      	it	ne
 800cd5e:	3604      	addne	r6, #4
 800cd60:	2500      	movs	r5, #0
 800cd62:	1f37      	subs	r7, r6, #4
 800cd64:	4682      	mov	sl, r0
 800cd66:	4690      	mov	r8, r2
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd6e:	46b9      	mov	r9, r7
 800cd70:	463c      	mov	r4, r7
 800cd72:	9502      	str	r5, [sp, #8]
 800cd74:	46ab      	mov	fp, r5
 800cd76:	784a      	ldrb	r2, [r1, #1]
 800cd78:	1c4b      	adds	r3, r1, #1
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	b342      	cbz	r2, 800cdd0 <__hexnan+0x88>
 800cd7e:	4610      	mov	r0, r2
 800cd80:	9105      	str	r1, [sp, #20]
 800cd82:	9204      	str	r2, [sp, #16]
 800cd84:	f7ff fd94 	bl	800c8b0 <__hexdig_fun>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	d151      	bne.n	800ce30 <__hexnan+0xe8>
 800cd8c:	9a04      	ldr	r2, [sp, #16]
 800cd8e:	9905      	ldr	r1, [sp, #20]
 800cd90:	2a20      	cmp	r2, #32
 800cd92:	d818      	bhi.n	800cdc6 <__hexnan+0x7e>
 800cd94:	9b02      	ldr	r3, [sp, #8]
 800cd96:	459b      	cmp	fp, r3
 800cd98:	dd13      	ble.n	800cdc2 <__hexnan+0x7a>
 800cd9a:	454c      	cmp	r4, r9
 800cd9c:	d206      	bcs.n	800cdac <__hexnan+0x64>
 800cd9e:	2d07      	cmp	r5, #7
 800cda0:	dc04      	bgt.n	800cdac <__hexnan+0x64>
 800cda2:	462a      	mov	r2, r5
 800cda4:	4649      	mov	r1, r9
 800cda6:	4620      	mov	r0, r4
 800cda8:	f7ff ffa8 	bl	800ccfc <L_shift>
 800cdac:	4544      	cmp	r4, r8
 800cdae:	d952      	bls.n	800ce56 <__hexnan+0x10e>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f1a4 0904 	sub.w	r9, r4, #4
 800cdb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdba:	f8cd b008 	str.w	fp, [sp, #8]
 800cdbe:	464c      	mov	r4, r9
 800cdc0:	461d      	mov	r5, r3
 800cdc2:	9903      	ldr	r1, [sp, #12]
 800cdc4:	e7d7      	b.n	800cd76 <__hexnan+0x2e>
 800cdc6:	2a29      	cmp	r2, #41	@ 0x29
 800cdc8:	d157      	bne.n	800ce7a <__hexnan+0x132>
 800cdca:	3102      	adds	r1, #2
 800cdcc:	f8ca 1000 	str.w	r1, [sl]
 800cdd0:	f1bb 0f00 	cmp.w	fp, #0
 800cdd4:	d051      	beq.n	800ce7a <__hexnan+0x132>
 800cdd6:	454c      	cmp	r4, r9
 800cdd8:	d206      	bcs.n	800cde8 <__hexnan+0xa0>
 800cdda:	2d07      	cmp	r5, #7
 800cddc:	dc04      	bgt.n	800cde8 <__hexnan+0xa0>
 800cdde:	462a      	mov	r2, r5
 800cde0:	4649      	mov	r1, r9
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7ff ff8a 	bl	800ccfc <L_shift>
 800cde8:	4544      	cmp	r4, r8
 800cdea:	d936      	bls.n	800ce5a <__hexnan+0x112>
 800cdec:	f1a8 0204 	sub.w	r2, r8, #4
 800cdf0:	4623      	mov	r3, r4
 800cdf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdfa:	429f      	cmp	r7, r3
 800cdfc:	d2f9      	bcs.n	800cdf2 <__hexnan+0xaa>
 800cdfe:	1b3b      	subs	r3, r7, r4
 800ce00:	f023 0303 	bic.w	r3, r3, #3
 800ce04:	3304      	adds	r3, #4
 800ce06:	3401      	adds	r4, #1
 800ce08:	3e03      	subs	r6, #3
 800ce0a:	42b4      	cmp	r4, r6
 800ce0c:	bf88      	it	hi
 800ce0e:	2304      	movhi	r3, #4
 800ce10:	4443      	add	r3, r8
 800ce12:	2200      	movs	r2, #0
 800ce14:	f843 2b04 	str.w	r2, [r3], #4
 800ce18:	429f      	cmp	r7, r3
 800ce1a:	d2fb      	bcs.n	800ce14 <__hexnan+0xcc>
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	b91b      	cbnz	r3, 800ce28 <__hexnan+0xe0>
 800ce20:	4547      	cmp	r7, r8
 800ce22:	d128      	bne.n	800ce76 <__hexnan+0x12e>
 800ce24:	2301      	movs	r3, #1
 800ce26:	603b      	str	r3, [r7, #0]
 800ce28:	2005      	movs	r0, #5
 800ce2a:	b007      	add	sp, #28
 800ce2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce30:	3501      	adds	r5, #1
 800ce32:	2d08      	cmp	r5, #8
 800ce34:	f10b 0b01 	add.w	fp, fp, #1
 800ce38:	dd06      	ble.n	800ce48 <__hexnan+0x100>
 800ce3a:	4544      	cmp	r4, r8
 800ce3c:	d9c1      	bls.n	800cdc2 <__hexnan+0x7a>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce44:	2501      	movs	r5, #1
 800ce46:	3c04      	subs	r4, #4
 800ce48:	6822      	ldr	r2, [r4, #0]
 800ce4a:	f000 000f 	and.w	r0, r0, #15
 800ce4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce52:	6020      	str	r0, [r4, #0]
 800ce54:	e7b5      	b.n	800cdc2 <__hexnan+0x7a>
 800ce56:	2508      	movs	r5, #8
 800ce58:	e7b3      	b.n	800cdc2 <__hexnan+0x7a>
 800ce5a:	9b01      	ldr	r3, [sp, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d0dd      	beq.n	800ce1c <__hexnan+0xd4>
 800ce60:	f1c3 0320 	rsb	r3, r3, #32
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	40da      	lsrs	r2, r3
 800ce6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce6e:	4013      	ands	r3, r2
 800ce70:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce74:	e7d2      	b.n	800ce1c <__hexnan+0xd4>
 800ce76:	3f04      	subs	r7, #4
 800ce78:	e7d0      	b.n	800ce1c <__hexnan+0xd4>
 800ce7a:	2004      	movs	r0, #4
 800ce7c:	e7d5      	b.n	800ce2a <__hexnan+0xe2>

0800ce7e <__ascii_mbtowc>:
 800ce7e:	b082      	sub	sp, #8
 800ce80:	b901      	cbnz	r1, 800ce84 <__ascii_mbtowc+0x6>
 800ce82:	a901      	add	r1, sp, #4
 800ce84:	b142      	cbz	r2, 800ce98 <__ascii_mbtowc+0x1a>
 800ce86:	b14b      	cbz	r3, 800ce9c <__ascii_mbtowc+0x1e>
 800ce88:	7813      	ldrb	r3, [r2, #0]
 800ce8a:	600b      	str	r3, [r1, #0]
 800ce8c:	7812      	ldrb	r2, [r2, #0]
 800ce8e:	1e10      	subs	r0, r2, #0
 800ce90:	bf18      	it	ne
 800ce92:	2001      	movne	r0, #1
 800ce94:	b002      	add	sp, #8
 800ce96:	4770      	bx	lr
 800ce98:	4610      	mov	r0, r2
 800ce9a:	e7fb      	b.n	800ce94 <__ascii_mbtowc+0x16>
 800ce9c:	f06f 0001 	mvn.w	r0, #1
 800cea0:	e7f8      	b.n	800ce94 <__ascii_mbtowc+0x16>

0800cea2 <_realloc_r>:
 800cea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea6:	4607      	mov	r7, r0
 800cea8:	4614      	mov	r4, r2
 800ceaa:	460d      	mov	r5, r1
 800ceac:	b921      	cbnz	r1, 800ceb8 <_realloc_r+0x16>
 800ceae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb2:	4611      	mov	r1, r2
 800ceb4:	f7fd bcb0 	b.w	800a818 <_malloc_r>
 800ceb8:	b92a      	cbnz	r2, 800cec6 <_realloc_r+0x24>
 800ceba:	f7fd fc39 	bl	800a730 <_free_r>
 800cebe:	4625      	mov	r5, r4
 800cec0:	4628      	mov	r0, r5
 800cec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec6:	f000 f840 	bl	800cf4a <_malloc_usable_size_r>
 800ceca:	4284      	cmp	r4, r0
 800cecc:	4606      	mov	r6, r0
 800cece:	d802      	bhi.n	800ced6 <_realloc_r+0x34>
 800ced0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ced4:	d8f4      	bhi.n	800cec0 <_realloc_r+0x1e>
 800ced6:	4621      	mov	r1, r4
 800ced8:	4638      	mov	r0, r7
 800ceda:	f7fd fc9d 	bl	800a818 <_malloc_r>
 800cede:	4680      	mov	r8, r0
 800cee0:	b908      	cbnz	r0, 800cee6 <_realloc_r+0x44>
 800cee2:	4645      	mov	r5, r8
 800cee4:	e7ec      	b.n	800cec0 <_realloc_r+0x1e>
 800cee6:	42b4      	cmp	r4, r6
 800cee8:	4622      	mov	r2, r4
 800ceea:	4629      	mov	r1, r5
 800ceec:	bf28      	it	cs
 800ceee:	4632      	movcs	r2, r6
 800cef0:	f7fc fdb1 	bl	8009a56 <memcpy>
 800cef4:	4629      	mov	r1, r5
 800cef6:	4638      	mov	r0, r7
 800cef8:	f7fd fc1a 	bl	800a730 <_free_r>
 800cefc:	e7f1      	b.n	800cee2 <_realloc_r+0x40>

0800cefe <__ascii_wctomb>:
 800cefe:	4603      	mov	r3, r0
 800cf00:	4608      	mov	r0, r1
 800cf02:	b141      	cbz	r1, 800cf16 <__ascii_wctomb+0x18>
 800cf04:	2aff      	cmp	r2, #255	@ 0xff
 800cf06:	d904      	bls.n	800cf12 <__ascii_wctomb+0x14>
 800cf08:	228a      	movs	r2, #138	@ 0x8a
 800cf0a:	601a      	str	r2, [r3, #0]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	4770      	bx	lr
 800cf12:	700a      	strb	r2, [r1, #0]
 800cf14:	2001      	movs	r0, #1
 800cf16:	4770      	bx	lr

0800cf18 <fiprintf>:
 800cf18:	b40e      	push	{r1, r2, r3}
 800cf1a:	b503      	push	{r0, r1, lr}
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	ab03      	add	r3, sp, #12
 800cf20:	4805      	ldr	r0, [pc, #20]	@ (800cf38 <fiprintf+0x20>)
 800cf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf26:	6800      	ldr	r0, [r0, #0]
 800cf28:	9301      	str	r3, [sp, #4]
 800cf2a:	f7ff f9b1 	bl	800c290 <_vfiprintf_r>
 800cf2e:	b002      	add	sp, #8
 800cf30:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf34:	b003      	add	sp, #12
 800cf36:	4770      	bx	lr
 800cf38:	20000114 	.word	0x20000114

0800cf3c <abort>:
 800cf3c:	b508      	push	{r3, lr}
 800cf3e:	2006      	movs	r0, #6
 800cf40:	f000 f834 	bl	800cfac <raise>
 800cf44:	2001      	movs	r0, #1
 800cf46:	f7f4 fb6b 	bl	8001620 <_exit>

0800cf4a <_malloc_usable_size_r>:
 800cf4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf4e:	1f18      	subs	r0, r3, #4
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	bfbc      	itt	lt
 800cf54:	580b      	ldrlt	r3, [r1, r0]
 800cf56:	18c0      	addlt	r0, r0, r3
 800cf58:	4770      	bx	lr

0800cf5a <_raise_r>:
 800cf5a:	291f      	cmp	r1, #31
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4605      	mov	r5, r0
 800cf60:	460c      	mov	r4, r1
 800cf62:	d904      	bls.n	800cf6e <_raise_r+0x14>
 800cf64:	2316      	movs	r3, #22
 800cf66:	6003      	str	r3, [r0, #0]
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	bd38      	pop	{r3, r4, r5, pc}
 800cf6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf70:	b112      	cbz	r2, 800cf78 <_raise_r+0x1e>
 800cf72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf76:	b94b      	cbnz	r3, 800cf8c <_raise_r+0x32>
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f000 f831 	bl	800cfe0 <_getpid_r>
 800cf7e:	4622      	mov	r2, r4
 800cf80:	4601      	mov	r1, r0
 800cf82:	4628      	mov	r0, r5
 800cf84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf88:	f000 b818 	b.w	800cfbc <_kill_r>
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d00a      	beq.n	800cfa6 <_raise_r+0x4c>
 800cf90:	1c59      	adds	r1, r3, #1
 800cf92:	d103      	bne.n	800cf9c <_raise_r+0x42>
 800cf94:	2316      	movs	r3, #22
 800cf96:	6003      	str	r3, [r0, #0]
 800cf98:	2001      	movs	r0, #1
 800cf9a:	e7e7      	b.n	800cf6c <_raise_r+0x12>
 800cf9c:	2100      	movs	r1, #0
 800cf9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4798      	blx	r3
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	e7e0      	b.n	800cf6c <_raise_r+0x12>
	...

0800cfac <raise>:
 800cfac:	4b02      	ldr	r3, [pc, #8]	@ (800cfb8 <raise+0xc>)
 800cfae:	4601      	mov	r1, r0
 800cfb0:	6818      	ldr	r0, [r3, #0]
 800cfb2:	f7ff bfd2 	b.w	800cf5a <_raise_r>
 800cfb6:	bf00      	nop
 800cfb8:	20000114 	.word	0x20000114

0800cfbc <_kill_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	4d07      	ldr	r5, [pc, #28]	@ (800cfdc <_kill_r+0x20>)
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	602b      	str	r3, [r5, #0]
 800cfca:	f7f4 fb19 	bl	8001600 <_kill>
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	d102      	bne.n	800cfd8 <_kill_r+0x1c>
 800cfd2:	682b      	ldr	r3, [r5, #0]
 800cfd4:	b103      	cbz	r3, 800cfd8 <_kill_r+0x1c>
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	bd38      	pop	{r3, r4, r5, pc}
 800cfda:	bf00      	nop
 800cfdc:	200020f8 	.word	0x200020f8

0800cfe0 <_getpid_r>:
 800cfe0:	f7f4 bb06 	b.w	80015f0 <_getpid>

0800cfe4 <_sbrk>:
 800cfe4:	4a04      	ldr	r2, [pc, #16]	@ (800cff8 <_sbrk+0x14>)
 800cfe6:	6811      	ldr	r1, [r2, #0]
 800cfe8:	4603      	mov	r3, r0
 800cfea:	b909      	cbnz	r1, 800cff0 <_sbrk+0xc>
 800cfec:	4903      	ldr	r1, [pc, #12]	@ (800cffc <_sbrk+0x18>)
 800cfee:	6011      	str	r1, [r2, #0]
 800cff0:	6810      	ldr	r0, [r2, #0]
 800cff2:	4403      	add	r3, r0
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	4770      	bx	lr
 800cff8:	20002108 	.word	0x20002108
 800cffc:	20002110 	.word	0x20002110

0800d000 <_init>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr

0800d00c <_fini>:
 800d00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00e:	bf00      	nop
 800d010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d012:	bc08      	pop	{r3}
 800d014:	469e      	mov	lr, r3
 800d016:	4770      	bx	lr
