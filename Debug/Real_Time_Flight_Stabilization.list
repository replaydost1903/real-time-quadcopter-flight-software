
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012360  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  080124f0  080124f0  000134f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d8c  08012d8c  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012d8c  08012d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d94  08012d94  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d94  08012d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012d98  08012d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08012d9c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142d4  2**0
                  CONTENTS
 10 .bss          0000243c  200002d8  200002d8  000142d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002714  20002714  000142d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020bf0  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044a3  00000000  00000000  00034ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00039398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015ce  00000000  00000000  0003af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002665b  00000000  00000000  0003c566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022267  00000000  00000000  00062bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6ef  00000000  00000000  00084e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162517  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d58  00000000  00000000  0016255c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0016b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080124d8 	.word	0x080124d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	080124d8 	.word	0x080124d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fc5e 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f884 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f9a8 	bl	8001380 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001030:	f000 f8ea 	bl	8001208 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001034:	f000 f970 	bl	8001318 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001038:	f00c f974 	bl	800d324 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800103c:	f000 f912 	bl	8001264 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /*!< FPU Full Access >!*/
  SCB->CPACR |= (0x0F << 20U);
 8001040:	4b37      	ldr	r3, [pc, #220]	@ (8001120 <main+0x100>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a36      	ldr	r2, [pc, #216]	@ (8001120 <main+0x100>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /*!< Pointer addresses of the sensor's structures are assigned to the main quadcopter data structure >!*/
  initialize_system_links();
 8001050:	f000 fa04 	bl	800145c <initialize_system_links>

  /*!< BMP388 Init and Z-Axis Calibration Process >!*/
  bmp388_interface_init(quadcopter.pBMP388,quadcopter.pHardware->pBMP388Interface);
 8001054:	4b33      	ldr	r3, [pc, #204]	@ (8001124 <main+0x104>)
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <main+0x104>)
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f00b fe83 	bl	800cd6c <bmp388_interface_init>
  bmp388_calibration(quadcopter.pBMP388, &quadcopter.pBMP388->pressure_data, 3000U);
 8001066:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <main+0x104>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <main+0x104>)
 800106c:	6892      	ldr	r2, [r2, #8]
 800106e:	4611      	mov	r1, r2
 8001070:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001074:	4618      	mov	r0, r3
 8001076:	f00b ff77 	bl	800cf68 <bmp388_calibration>

  /*!< BMI160 Init and Gyro-Acc Offset Calibration Process >!*/
  bmi160_interface_init(&bmi160);
 800107a:	482b      	ldr	r0, [pc, #172]	@ (8001128 <main+0x108>)
 800107c:	f009 ff3c 	bl	800aef8 <bmi160_interface_init>
  bmi160_calibration(quadcopter.pBMI160, 3000U);
 8001080:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <main+0x104>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001088:	4618      	mov	r0, r3
 800108a:	f00a f821 	bl	800b0d0 <bmi160_calibration>

  /*!< HMC5883L Init Process >!*/
  hmc5883l_init(quadcopter.pHMC5883L);
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <main+0x104>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f008 fa0a 	bl	80094ac <hmc5883l_init>

  /*!< Quadcopter Mathematical Model ---> Software In the Loop Test >!*/
  rtU.w1 	= 0U;
 8001098:	4924      	ldr	r1, [pc, #144]	@ (800112c <main+0x10c>)
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	e9c1 2300 	strd	r2, r3, [r1]
  rtU.w2 	= 0U;
 80010a6:	4921      	ldr	r1, [pc, #132]	@ (800112c <main+0x10c>)
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 0300 	mov.w	r3, #0
 80010b0:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtU.w3 	= 0U;
 80010b4:	491d      	ldr	r1, [pc, #116]	@ (800112c <main+0x10c>)
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	e9c1 2304 	strd	r2, r3, [r1, #16]
  rtU.w4 	= 0U;
 80010c2:	491a      	ldr	r1, [pc, #104]	@ (800112c <main+0x10c>)
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	f04f 0300 	mov.w	r3, #0
 80010cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
  rtY.pitch = 0U;
 80010d0:	4917      	ldr	r1, [pc, #92]	@ (8001130 <main+0x110>)
 80010d2:	f04f 0200 	mov.w	r2, #0
 80010d6:	f04f 0300 	mov.w	r3, #0
 80010da:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtY.roll 	= 0U;
 80010de:	4914      	ldr	r1, [pc, #80]	@ (8001130 <main+0x110>)
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
  rtY.x 	= 0U;
 80010ec:	4910      	ldr	r1, [pc, #64]	@ (8001130 <main+0x110>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	e9c1 2300 	strd	r2, r3, [r1]
  rtY.y 	= 0U;
 80010fa:	490d      	ldr	r1, [pc, #52]	@ (8001130 <main+0x110>)
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtY.z 	= 0U;
 8001108:	4909      	ldr	r1, [pc, #36]	@ (8001130 <main+0x110>)
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	e9c1 2304 	strd	r2, r3, [r1, #16]

  QuadcopterModel_initialize();
 8001116:	f008 f849 	bl	80091ac <QuadcopterModel_initialize>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800111a:	bf00      	nop
 800111c:	e7fd      	b.n	800111a <main+0xfa>
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00
 8001124:	200003d8 	.word	0x200003d8
 8001128:	200003f0 	.word	0x200003f0
 800112c:	200005d0 	.word	0x200005d0
 8001130:	200005f0 	.word	0x200005f0

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	@ 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	@ 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00d fe72 	bl	800ee2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	4a27      	ldr	r2, [pc, #156]	@ (8001200 <SystemClock_Config+0xcc>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	@ 0x40
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <SystemClock_Config+0xd0>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a8:	23a8      	movs	r3, #168	@ 0xa8
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fa95 	bl	80046e8 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c4:	f000 f980 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2105      	movs	r1, #5
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fcf6 	bl	8004bd8 <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f2:	f000 f969 	bl	80014c8 <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	@ 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	@ (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f000 feab 	bl	8001fa0 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 f93a 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200002f4 	.word	0x200002f4
 800125c:	40005400 	.word	0x40005400
 8001260:	000186a0 	.word	0x000186a0

08001264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]
 8001282:	615a      	str	r2, [r3, #20]
 8001284:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800128e:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800129a:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <MX_TIM2_Init+0xb0>)
 800129c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012ae:	4819      	ldr	r0, [pc, #100]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012b0:	f003 ff8d 	bl	80051ce <HAL_TIM_PWM_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012ba:	f000 f905 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	4619      	mov	r1, r3
 80012cc:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012ce:	f004 fc03 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012d8:	f000 f8f6 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012dc:	2360      	movs	r3, #96	@ 0x60
 80012de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80012e0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2204      	movs	r2, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4807      	ldr	r0, [pc, #28]	@ (8001314 <MX_TIM2_Init+0xb0>)
 80012f6:	f004 f8a9 	bl	800544c <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001300:	f000 f8e2 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <MX_TIM2_Init+0xb0>)
 8001306:	f000 f9ad 	bl	8001664 <HAL_TIM_MspPostInit>

}
 800130a:	bf00      	nop
 800130c:	3728      	adds	r7, #40	@ 0x28
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000348 	.word	0x20000348

08001318 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <MX_TIM6_Init+0x64>)
 800132a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_TIM6_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_TIM6_Init+0x60>)
 800133a:	22a7      	movs	r2, #167	@ 0xa7
 800133c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001346:	f003 fe53 	bl	8004ff0 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001350:	f000 f8ba 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001362:	f004 fbb9 	bl	8005ad8 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800136c:	f000 f8ac 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000390 	.word	0x20000390
 800137c:	40001000 	.word	0x40001000

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a2c      	ldr	r2, [pc, #176]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b26      	ldr	r3, [pc, #152]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a25      	ldr	r2, [pc, #148]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b1c      	ldr	r3, [pc, #112]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_GPIO_Init+0xd0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <MX_GPIO_Init+0xd4>)
 800140e:	f000 fdad 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001412:	2301      	movs	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <MX_GPIO_Init+0xd8>)
 8001426:	f000 fc05 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800142a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800142e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_GPIO_Init+0xd4>)
 8001444:	f000 fbf6 	bl	8001c34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001448:	bf00      	nop
 800144a:	3728      	adds	r7, #40	@ 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40023800 	.word	0x40023800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40020000 	.word	0x40020000

0800145c <initialize_system_links>:

/* USER CODE BEGIN 4 */
static void initialize_system_links(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  quadcopter.pBMI160   	= 	(struct bmi160_dev*)&bmi160;
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <initialize_system_links+0x54>)
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <initialize_system_links+0x58>)
 8001464:	605a      	str	r2, [r3, #4]
  quadcopter.pBMP388   	= 	(struct bmp3_dev*)&bmp388;
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <initialize_system_links+0x54>)
 8001468:	4a13      	ldr	r2, [pc, #76]	@ (80014b8 <initialize_system_links+0x5c>)
 800146a:	609a      	str	r2, [r3, #8]
  quadcopter.pHMC5883L 	=	(struct hmc5883l_dev*)&hmc5883l;
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <initialize_system_links+0x54>)
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <initialize_system_links+0x60>)
 8001470:	601a      	str	r2, [r3, #0]
  quadcopter.pHardware->pBMI160Interface->hi2c   = (I2C_HandleTypeDef*)&hi2c1;
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <initialize_system_links+0x54>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	4a11      	ldr	r2, [pc, #68]	@ (80014c0 <initialize_system_links+0x64>)
 800147a:	605a      	str	r2, [r3, #4]
  quadcopter.pHardware->pBMI160Interface->htim   = (TIM_HandleTypeDef*)&htim6;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <initialize_system_links+0x54>)
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <initialize_system_links+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  quadcopter.pHardware->pBMP388Interface->hi2c   = (I2C_HandleTypeDef*)&hi2c1;
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <initialize_system_links+0x54>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <initialize_system_links+0x64>)
 800148e:	605a      	str	r2, [r3, #4]
  quadcopter.pHardware->pBMP388Interface->htim   = (TIM_HandleTypeDef*)&htim6;
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <initialize_system_links+0x54>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <initialize_system_links+0x68>)
 8001498:	601a      	str	r2, [r3, #0]
  quadcopter.pHardware->pHMC5883LInterface->hi2c = (I2C_HandleTypeDef*)&hi2c1;
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <initialize_system_links+0x54>)
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <initialize_system_links+0x64>)
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200003d8 	.word	0x200003d8
 80014b4:	200003f0 	.word	0x200003f0
 80014b8:	20000438 	.word	0x20000438
 80014bc:	200004f8 	.word	0x200004f8
 80014c0:	200002f4 	.word	0x200002f4
 80014c4:	20000390 	.word	0x20000390

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 1U);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <Error_Handler+0x18>)
 80014d4:	f000 fd4a 	bl	8001f6c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  __disable_irq();
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <Error_Handler+0x14>
 80014e0:	40020c00 	.word	0x40020c00

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <HAL_MspInit+0x5c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_MspInit+0x5c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_MspInit+0x5c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a0c      	ldr	r2, [pc, #48]	@ (8001540 <HAL_MspInit+0x5c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_MspInit+0x5c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001522:	2007      	movs	r0, #7
 8001524:	f000 fb44 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2005      	movs	r0, #5
 800152e:	f000 fb4a 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001532:	2005      	movs	r0, #5
 8001534:	f000 fb63 	bl	8001bfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	@ 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_I2C_MspInit+0x84>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12c      	bne.n	80015c0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001588:	2312      	movs	r3, #18
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001594:	2304      	movs	r3, #4
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <HAL_I2C_MspInit+0x8c>)
 80015a0:	f000 fb48 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 80015ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_I2C_MspInit+0x88>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40005400 	.word	0x40005400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020400 	.word	0x40020400

080015d4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e4:	d10d      	bne.n	8001602 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_TIM_PWM_MspInit+0x3c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_TIM_PWM_MspInit+0x3c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_TIM_PWM_MspInit+0x3c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_TIM_Base_MspInit+0x48>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d115      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_TIM_Base_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <HAL_TIM_Base_MspInit+0x4c>)
 8001630:	f043 0310 	orr.w	r3, r3, #16
 8001634:	6413      	str	r3, [r2, #64]	@ 0x40
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_TIM_Base_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2036      	movs	r0, #54	@ 0x36
 8001648:	f000 fabd 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800164c:	2036      	movs	r0, #54	@ 0x36
 800164e:	f000 fad6 	bl	8001bfe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40001000 	.word	0x40001000
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001684:	d11d      	bne.n	80016c2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a0f      	ldr	r2, [pc, #60]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_TIM_MspPostInit+0x68>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80016a2:	2302      	movs	r3, #2
 80016a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <HAL_TIM_MspPostInit+0x6c>)
 80016be:	f000 fab9 	bl	8001c34 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016c2:	bf00      	nop
 80016c4:	3720      	adds	r7, #32
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170e:	f000 f93b 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}

08001716 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <TIM6_DAC_IRQHandler+0x10>)
 800172a:	f003 fd9f 	bl	800526c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000390 	.word	0x20000390

08001738 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <OTG_FS_IRQHandler+0x10>)
 800173e:	f001 fec5 	bl	80034cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20001ec0 	.word	0x20001ec0

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f00d fbb3 	bl	800eed0 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <_exit+0x12>

08001792 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e00a      	b.n	80017ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a4:	f3af 8000 	nop.w
 80017a8:	4601      	mov	r1, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	60ba      	str	r2, [r7, #8]
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf0      	blt.n	80017a4 <_read+0x12>
  }

  return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e009      	b.n	80017f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbf1      	blt.n	80017de <_write+0x12>
  }
  return len;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_close>:

int _close(int file)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800182c:	605a      	str	r2, [r3, #4]
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_isatty>:

int _isatty(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001894:	f7ff ffea 	bl	800186c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	@ (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f00d fb0d 	bl	800eedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff fbad 	bl	8001020 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80018d4:	08012d9c 	.word	0x08012d9c
  ldr r2, =_sbss
 80018d8:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80018dc:	20002714 	.word	0x20002714

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f94f 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fde4 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	@ (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f967 	bl	8001c1a <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f92f 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	@ (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000010 	.word	0x20000010
 8001980:	20000018 	.word	0x20000018
 8001984:	20000014 	.word	0x20000014

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	@ (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000018 	.word	0x20000018
 80019ac:	20000520 	.word	0x20000520

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	@ (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000520 	.word	0x20000520

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000018 	.word	0x20000018

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a42:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	60d3      	str	r3, [r2, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	@ (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	@ (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	@ 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	@ 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e16b      	b.n	8001f28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 815a 	bne.w	8001f22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d005      	beq.n	8001c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d130      	bne.n	8001ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	2203      	movs	r2, #3
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 0201 	and.w	r2, r3, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d017      	beq.n	8001d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	2203      	movs	r2, #3
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80b4 	beq.w	8001f22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <HAL_GPIO_Init+0x30c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f40 <HAL_GPIO_Init+0x30c>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <HAL_GPIO_Init+0x30c>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f44 <HAL_GPIO_Init+0x310>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a52      	ldr	r2, [pc, #328]	@ (8001f48 <HAL_GPIO_Init+0x314>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x226>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a51      	ldr	r2, [pc, #324]	@ (8001f4c <HAL_GPIO_Init+0x318>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d025      	beq.n	8001e56 <HAL_GPIO_Init+0x222>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a50      	ldr	r2, [pc, #320]	@ (8001f50 <HAL_GPIO_Init+0x31c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01f      	beq.n	8001e52 <HAL_GPIO_Init+0x21e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4f      	ldr	r2, [pc, #316]	@ (8001f54 <HAL_GPIO_Init+0x320>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x21a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f58 <HAL_GPIO_Init+0x324>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x216>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4d      	ldr	r2, [pc, #308]	@ (8001f5c <HAL_GPIO_Init+0x328>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x212>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f60 <HAL_GPIO_Init+0x32c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x20e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4b      	ldr	r2, [pc, #300]	@ (8001f64 <HAL_GPIO_Init+0x330>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x20a>
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e00e      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e3e:	2308      	movs	r3, #8
 8001e40:	e00c      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e42:	2306      	movs	r3, #6
 8001e44:	e00a      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e46:	2305      	movs	r3, #5
 8001e48:	e008      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	e006      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e004      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_Init+0x228>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	f002 0203 	and.w	r2, r2, #3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4093      	lsls	r3, r2
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6c:	4935      	ldr	r1, [pc, #212]	@ (8001f44 <HAL_GPIO_Init+0x310>)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9e:	4a32      	ldr	r2, [pc, #200]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea4:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec8:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ece:	4b26      	ldr	r3, [pc, #152]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1c:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_GPIO_Init+0x334>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3301      	adds	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	f67f ae90 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f30:	bf00      	nop
 8001f32:	bf00      	nop
 8001f34:	3724      	adds	r7, #36	@ 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40013800 	.word	0x40013800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020800 	.word	0x40020800
 8001f54:	40020c00 	.word	0x40020c00
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40021400 	.word	0x40021400
 8001f60:	40021800 	.word	0x40021800
 8001f64:	40021c00 	.word	0x40021c00
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e12b      	b.n	800220a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff fabc 	bl	8001544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	@ 0x24
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ff2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002002:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002004:	f002 ffe0 	bl	8004fc8 <HAL_RCC_GetPCLK1Freq>
 8002008:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4a81      	ldr	r2, [pc, #516]	@ (8002214 <HAL_I2C_Init+0x274>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d807      	bhi.n	8002024 <HAL_I2C_Init+0x84>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4a80      	ldr	r2, [pc, #512]	@ (8002218 <HAL_I2C_Init+0x278>)
 8002018:	4293      	cmp	r3, r2
 800201a:	bf94      	ite	ls
 800201c:	2301      	movls	r3, #1
 800201e:	2300      	movhi	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e006      	b.n	8002032 <HAL_I2C_Init+0x92>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a7d      	ldr	r2, [pc, #500]	@ (800221c <HAL_I2C_Init+0x27c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	bf94      	ite	ls
 800202c:	2301      	movls	r3, #1
 800202e:	2300      	movhi	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0e7      	b.n	800220a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4a78      	ldr	r2, [pc, #480]	@ (8002220 <HAL_I2C_Init+0x280>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0c9b      	lsrs	r3, r3, #18
 8002044:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	430a      	orrs	r2, r1
 8002058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_I2C_Init+0x274>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d802      	bhi.n	8002074 <HAL_I2C_Init+0xd4>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	3301      	adds	r3, #1
 8002072:	e009      	b.n	8002088 <HAL_I2C_Init+0xe8>
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	4a69      	ldr	r2, [pc, #420]	@ (8002224 <HAL_I2C_Init+0x284>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	3301      	adds	r3, #1
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	430b      	orrs	r3, r1
 800208e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800209a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	495c      	ldr	r1, [pc, #368]	@ (8002214 <HAL_I2C_Init+0x274>)
 80020a4:	428b      	cmp	r3, r1
 80020a6:	d819      	bhi.n	80020dc <HAL_I2C_Init+0x13c>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e59      	subs	r1, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020bc:	400b      	ands	r3, r1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_I2C_Init+0x138>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e59      	subs	r1, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d6:	e051      	b.n	800217c <HAL_I2C_Init+0x1dc>
 80020d8:	2304      	movs	r3, #4
 80020da:	e04f      	b.n	800217c <HAL_I2C_Init+0x1dc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <HAL_I2C_Init+0x168>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e012      	b.n	800212e <HAL_I2C_Init+0x18e>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	0099      	lsls	r1, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x196>
 8002132:	2301      	movs	r3, #1
 8002134:	e022      	b.n	800217c <HAL_I2C_Init+0x1dc>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10e      	bne.n	800215c <HAL_I2C_Init+0x1bc>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1e58      	subs	r0, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800215a:	e00f      	b.n	800217c <HAL_I2C_Init+0x1dc>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6911      	ldr	r1, [r2, #16]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68d2      	ldr	r2, [r2, #12]
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	000186a0 	.word	0x000186a0
 8002218:	001e847f 	.word	0x001e847f
 800221c:	003d08ff 	.word	0x003d08ff
 8002220:	431bde83 	.word	0x431bde83
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	461a      	mov	r2, r3
 8002236:	4603      	mov	r3, r0
 8002238:	817b      	strh	r3, [r7, #10]
 800223a:	460b      	mov	r3, r1
 800223c:	813b      	strh	r3, [r7, #8]
 800223e:	4613      	mov	r3, r2
 8002240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002242:	f7ff fbb5 	bl	80019b0 <HAL_GetTick>
 8002246:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	f040 80d9 	bne.w	8002408 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2319      	movs	r3, #25
 800225c:	2201      	movs	r2, #1
 800225e:	496d      	ldr	r1, [pc, #436]	@ (8002414 <HAL_I2C_Mem_Write+0x1ec>)
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fdb9 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800226c:	2302      	movs	r3, #2
 800226e:	e0cc      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_I2C_Mem_Write+0x56>
 800227a:	2302      	movs	r3, #2
 800227c:	e0c5      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d007      	beq.n	80022a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2221      	movs	r2, #33	@ 0x21
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2240      	movs	r2, #64	@ 0x40
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a3a      	ldr	r2, [r7, #32]
 80022ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002418 <HAL_I2C_Mem_Write+0x1f0>)
 80022e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e6:	88f8      	ldrh	r0, [r7, #6]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4603      	mov	r3, r0
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fbf0 	bl	8002adc <I2C_RequestMemoryWrite>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d052      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e081      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fe7e 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800232c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e06b      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d11b      	bne.n	80023a8 <HAL_I2C_Mem_Write+0x180>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d017      	beq.n	80023a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	3b01      	subs	r3, #1
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1aa      	bne.n	8002306 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fe71 	bl	800309c <I2C_WaitOnBTFFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e016      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	00100002 	.word	0x00100002
 8002418:	ffff0000 	.word	0xffff0000

0800241c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002436:	f7ff fabb 	bl	80019b0 <HAL_GetTick>
 800243a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	f040 8214 	bne.w	8002872 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	497b      	ldr	r1, [pc, #492]	@ (8002640 <HAL_I2C_Mem_Read+0x224>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fcbf 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
 8002462:	e207      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Mem_Read+0x56>
 800246e:	2302      	movs	r3, #2
 8002470:	e200      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d007      	beq.n	8002498 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2222      	movs	r2, #34	@ 0x22
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002644 <HAL_I2C_Mem_Read+0x228>)
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024da:	88f8      	ldrh	r0, [r7, #6]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4603      	mov	r3, r0
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb8c 	bl	8002c08 <I2C_RequestMemoryRead>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1bc      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d113      	bne.n	800252a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e190      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	2b01      	cmp	r3, #1
 8002530:	d11b      	bne.n	800256a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e170      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	2b02      	cmp	r3, #2
 8002570:	d11b      	bne.n	80025aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002580:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002590:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	e150      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025c0:	e144      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	f200 80f1 	bhi.w	80027ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d123      	bne.n	800261c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fda7 	bl	800312c <I2C_WaitOnRXNEFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e145      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800261a:	e117      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002620:	2b02      	cmp	r3, #2
 8002622:	d14e      	bne.n	80026c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800262a:	2200      	movs	r2, #0
 800262c:	4906      	ldr	r1, [pc, #24]	@ (8002648 <HAL_I2C_Mem_Read+0x22c>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fbd2 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e11a      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
 800263e:	bf00      	nop
 8002640:	00100002 	.word	0x00100002
 8002644:	ffff0000 	.word	0xffff0000
 8002648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026c0:	e0c4      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	2200      	movs	r2, #0
 80026ca:	496c      	ldr	r1, [pc, #432]	@ (800287c <HAL_I2C_Mem_Read+0x460>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fb83 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0cb      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002724:	2200      	movs	r2, #0
 8002726:	4955      	ldr	r1, [pc, #340]	@ (800287c <HAL_I2C_Mem_Read+0x460>)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fb55 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e09d      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ac:	e04e      	b.n	800284c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fcba 	bl	800312c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e058      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d124      	bne.n	800284c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	2b03      	cmp	r3, #3
 8002808:	d107      	bne.n	800281a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002818:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002842:	b29b      	uxth	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f aeb6 	bne.w	80025c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3728      	adds	r7, #40	@ 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	00010004 	.word	0x00010004

08002880 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002890:	f7ff f88e 	bl	80019b0 <HAL_GetTick>
 8002894:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 8111 	bne.w	8002aca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	4988      	ldr	r1, [pc, #544]	@ (8002ad4 <HAL_I2C_IsDeviceReady+0x254>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa90 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	e104      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2C_IsDeviceReady+0x50>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0fd      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d007      	beq.n	80028f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002904:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2224      	movs	r2, #36	@ 0x24
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a70      	ldr	r2, [pc, #448]	@ (8002ad8 <HAL_I2C_IsDeviceReady+0x258>)
 8002918:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002928:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2200      	movs	r2, #0
 8002932:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa4e 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00d      	beq.n	800295e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002950:	d103      	bne.n	800295a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002958:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0b6      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800296c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800296e:	f7ff f81f 	bl	80019b0 <HAL_GetTick>
 8002972:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029a2:	e025      	b.n	80029f0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029a4:	f7ff f804 	bl	80019b0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d302      	bcc.n	80029ba <HAL_I2C_IsDeviceReady+0x13a>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22a0      	movs	r2, #160	@ 0xa0
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2ba0      	cmp	r3, #160	@ 0xa0
 80029fa:	d005      	beq.n	8002a08 <HAL_I2C_IsDeviceReady+0x188>
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_I2C_IsDeviceReady+0x188>
 8002a02:	7dbb      	ldrb	r3, [r7, #22]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0cd      	beq.n	80029a4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d129      	bne.n	8002a72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2319      	movs	r3, #25
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4921      	ldr	r1, [pc, #132]	@ (8002ad4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f9c2 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e036      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e02c      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2319      	movs	r3, #25
 8002a92:	2201      	movs	r2, #1
 8002a94:	490f      	ldr	r1, [pc, #60]	@ (8002ad4 <HAL_I2C_IsDeviceReady+0x254>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f99e 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e012      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f4ff af32 	bcc.w	800291a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	00100002 	.word	0x00100002
 8002ad8:	ffff0000 	.word	0xffff0000

08002adc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	817b      	strh	r3, [r7, #10]
 8002aee:	460b      	mov	r3, r1
 8002af0:	813b      	strh	r3, [r7, #8]
 8002af2:	4613      	mov	r3, r2
 8002af4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f960 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00d      	beq.n	8002b3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b2c:	d103      	bne.n	8002b36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e05f      	b.n	8002bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b3a:	897b      	ldrh	r3, [r7, #10]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	6a3a      	ldr	r2, [r7, #32]
 8002b4e:	492d      	ldr	r1, [pc, #180]	@ (8002c04 <I2C_RequestMemoryWrite+0x128>)
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f9bb 	bl	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e04c      	b.n	8002bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa46 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d107      	bne.n	8002b9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e02b      	b.n	8002bfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba8:	893b      	ldrh	r3, [r7, #8]
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	611a      	str	r2, [r3, #16]
 8002bb2:	e021      	b.n	8002bf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa20 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d107      	bne.n	8002bea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e005      	b.n	8002bfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bee:	893b      	ldrh	r3, [r7, #8]
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	00010002 	.word	0x00010002

08002c08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	4608      	mov	r0, r1
 8002c12:	4611      	mov	r1, r2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	817b      	strh	r3, [r7, #10]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	813b      	strh	r3, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 f8c2 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00d      	beq.n	8002c76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c68:	d103      	bne.n	8002c72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0aa      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	4952      	ldr	r1, [pc, #328]	@ (8002dd4 <I2C_RequestMemoryRead+0x1cc>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f91d 	bl	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e097      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f9a8 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e076      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d105      	bne.n	8002cf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce4:	893b      	ldrh	r3, [r7, #8]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]
 8002cee:	e021      	b.n	8002d34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	0a1b      	lsrs	r3, r3, #8
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f982 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d107      	bne.n	8002d26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e050      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f967 	bl	800300c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e035      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f82b 	bl	8002dd8 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d96:	d103      	bne.n	8002da0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e013      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002da4:	897b      	ldrh	r3, [r7, #10]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	6a3a      	ldr	r2, [r7, #32]
 8002db8:	4906      	ldr	r1, [pc, #24]	@ (8002dd4 <I2C_RequestMemoryRead+0x1cc>)
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f886 	bl	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	00010002 	.word	0x00010002

08002dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	e048      	b.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d044      	beq.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe fddd 	bl	80019b0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d139      	bne.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	0c1b      	lsrs	r3, r3, #16
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d10d      	bne.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	e00c      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d116      	bne.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e023      	b.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10d      	bne.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	43da      	mvns	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	e00c      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d093      	beq.n	8002dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002eda:	e071      	b.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eea:	d123      	bne.n	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e067      	b.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3a:	d041      	beq.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7fe fd38 	bl	80019b0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d136      	bne.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d10c      	bne.n	8002f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	43da      	mvns	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	e00b      	b.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e021      	b.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10c      	bne.n	8002fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e00b      	b.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f af6d 	bne.w	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003018:	e034      	b.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f8e3 	bl	80031e6 <I2C_IsAcknowledgeFailed>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e034      	b.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003030:	d028      	beq.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7fe fcbd 	bl	80019b0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d302      	bcc.n	8003048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11d      	bne.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003052:	2b80      	cmp	r3, #128	@ 0x80
 8003054:	d016      	beq.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308e:	2b80      	cmp	r3, #128	@ 0x80
 8003090:	d1c3      	bne.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a8:	e034      	b.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f89b 	bl	80031e6 <I2C_IsAcknowledgeFailed>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e034      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d028      	beq.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe fc75 	bl	80019b0 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11d      	bne.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d016      	beq.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e007      	b.n	8003124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b04      	cmp	r3, #4
 8003120:	d1c3      	bne.n	80030aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003138:	e049      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	d119      	bne.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0210 	mvn.w	r2, #16
 8003150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e030      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fc18 	bl	80019b0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11d      	bne.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d016      	beq.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e007      	b.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d8:	2b40      	cmp	r3, #64	@ 0x40
 80031da:	d1ae      	bne.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fc:	d11b      	bne.n	8003236 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003206:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e101      	b.n	800345a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d106      	bne.n	8003276 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f00a fa37 	bl	800d6e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2203      	movs	r2, #3
 800327a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003284:	d102      	bne.n	800328c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f002 fdc8 	bl	8005e26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7c1a      	ldrb	r2, [r3, #16]
 800329e:	f88d 2000 	strb.w	r2, [sp]
 80032a2:	3304      	adds	r3, #4
 80032a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a6:	f002 fca7 	bl	8005bf8 <USB_CoreInit>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0ce      	b.n	800345a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fdc0 	bl	8005e48 <USB_SetCurrentMode>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0bf      	b.n	800345a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e04a      	b.n	8003376 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3315      	adds	r3, #21
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	3314      	adds	r3, #20
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003308:	7bfa      	ldrb	r2, [r7, #15]
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	b298      	uxth	r0, r3
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	332e      	adds	r3, #46	@ 0x2e
 800331c:	4602      	mov	r2, r0
 800331e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	3318      	adds	r3, #24
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	331c      	adds	r3, #28
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3320      	adds	r3, #32
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3324      	adds	r3, #36	@ 0x24
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	3301      	adds	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	791b      	ldrb	r3, [r3, #4]
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	429a      	cmp	r2, r3
 800337e:	d3af      	bcc.n	80032e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
 8003384:	e044      	b.n	8003410 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033c8:	7bfa      	ldrb	r2, [r7, #15]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	4613      	mov	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3301      	adds	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	429a      	cmp	r2, r3
 8003418:	d3b5      	bcc.n	8003386 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7c1a      	ldrb	r2, [r3, #16]
 8003422:	f88d 2000 	strb.w	r2, [sp]
 8003426:	3304      	adds	r3, #4
 8003428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342a:	f002 fd59 	bl	8005ee0 <USB_DevInit>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e00c      	b.n	800345a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fda3 	bl	8006f9e <USB_DevDisconnect>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_PCD_Start+0x1c>
 800347a:	2302      	movs	r3, #2
 800347c:	e022      	b.n	80034c4 <HAL_PCD_Start+0x62>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fcaa 	bl	8005e04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fd51 	bl	8006f5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b08d      	sub	sp, #52	@ 0x34
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fe0f 	bl	8007106 <USB_GetMode>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f040 848c 	bne.w	8003e08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fd73 	bl	8006fe0 <USB_ReadInterrupts>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 8482 	beq.w	8003e06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fd60 	bl	8006fe0 <USB_ReadInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 0202 	and.w	r2, r2, #2
 8003538:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f003 fd4e 	bl	8006fe0 <USB_ReadInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	2b10      	cmp	r3, #16
 800354c:	d161      	bne.n	8003612 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0210 	bic.w	r2, r2, #16
 800355c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003584:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003588:	d124      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003590:	4013      	ands	r3, r2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d035      	beq.n	8003602 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	6a38      	ldr	r0, [r7, #32]
 80035aa:	f003 fb85 	bl	8006cb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ba:	441a      	add	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035cc:	441a      	add	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	615a      	str	r2, [r3, #20]
 80035d2:	e016      	b.n	8003602 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80035da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035de:	d110      	bne.n	8003602 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035e6:	2208      	movs	r2, #8
 80035e8:	4619      	mov	r1, r3
 80035ea:	6a38      	ldr	r0, [r7, #32]
 80035ec:	f003 fb64 	bl	8006cb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fc:	441a      	add	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0210 	orr.w	r2, r2, #16
 8003610:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 fce2 	bl	8006fe0 <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003622:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003626:	f040 80a7 	bne.w	8003778 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fce7 	bl	8007006 <USB_ReadDevAllOutEpInterrupt>
 8003638:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800363a:	e099      	b.n	8003770 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 808e 	beq.w	8003764 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fd0b 	bl	800706e <USB_ReadDevOutEPInterrupt>
 8003658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00c      	beq.n	800367e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	2301      	movs	r3, #1
 8003674:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fea3 	bl	80043c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00c      	beq.n	80036a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	4413      	add	r3, r2
 8003690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003694:	461a      	mov	r2, r3
 8003696:	2308      	movs	r3, #8
 8003698:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800369a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 ff79 	bl	8004594 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	2310      	movs	r3, #16
 80036bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d030      	beq.n	800372a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b80      	cmp	r3, #128	@ 0x80
 80036d2:	d109      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	78db      	ldrb	r3, [r3, #3]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d108      	bne.n	8003718 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	b2db      	uxtb	r3, r3
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f00a f8ec 	bl	800d8f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	2302      	movs	r3, #2
 8003728:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003740:	461a      	mov	r2, r3
 8003742:	2320      	movs	r3, #32
 8003744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d009      	beq.n	8003764 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800375c:	461a      	mov	r2, r3
 800375e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003762:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	3301      	adds	r3, #1
 8003768:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	f47f af62 	bne.w	800363c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fc2f 	bl	8006fe0 <USB_ReadInterrupts>
 8003782:	4603      	mov	r3, r0
 8003784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800378c:	f040 80db 	bne.w	8003946 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fc50 	bl	800703a <USB_ReadDevAllInEpInterrupt>
 800379a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80037a0:	e0cd      	b.n	800393e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80c2 	beq.w	8003932 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	b2d2      	uxtb	r2, r2
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 fc76 	bl	80070aa <USB_ReadDevInEPInterrupt>
 80037be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d057      	beq.n	800387a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	2201      	movs	r2, #1
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69f9      	ldr	r1, [r7, #28]
 80037e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037ea:	4013      	ands	r3, r2
 80037ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	2301      	movs	r3, #1
 80037fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	799b      	ldrb	r3, [r3, #6]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d132      	bne.n	800386e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	3320      	adds	r3, #32
 8003818:	6819      	ldr	r1, [r3, #0]
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4403      	add	r3, r0
 8003828:	331c      	adds	r3, #28
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4419      	add	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4403      	add	r3, r0
 800383c:	3320      	adds	r3, #32
 800383e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	2b00      	cmp	r3, #0
 8003844:	d113      	bne.n	800386e <HAL_PCD_IRQHandler+0x3a2>
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3324      	adds	r3, #36	@ 0x24
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003866:	461a      	mov	r2, r3
 8003868:	2101      	movs	r1, #1
 800386a:	f003 fc7d 	bl	8007168 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	b2db      	uxtb	r3, r3
 8003872:	4619      	mov	r1, r3
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f009 ffb6 	bl	800d7e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003890:	461a      	mov	r2, r3
 8003892:	2308      	movs	r3, #8
 8003894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ac:	461a      	mov	r2, r3
 80038ae:	2310      	movs	r3, #16
 80038b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c8:	461a      	mov	r2, r3
 80038ca:	2340      	movs	r3, #64	@ 0x40
 80038cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038da:	6a38      	ldr	r0, [r7, #32]
 80038dc:	f002 fc64 	bl	80061a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	3310      	adds	r3, #16
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	3304      	adds	r3, #4
 80038f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	78db      	ldrb	r3, [r3, #3]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d108      	bne.n	800390e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	b2db      	uxtb	r3, r3
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f00a f803 	bl	800d914 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800390e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800391a:	461a      	mov	r2, r3
 800391c:	2302      	movs	r3, #2
 800391e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800392a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fcbd 	bl	80042ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	2b00      	cmp	r3, #0
 8003942:	f47f af2e 	bne.w	80037a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fb48 	bl	8006fe0 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800395a:	d122      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	69fa      	ldr	r2, [r7, #28]
 8003966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003976:	2b01      	cmp	r3, #1
 8003978:	d108      	bne.n	800398c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003982:	2100      	movs	r1, #0
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fea3 	bl	80046d0 <HAL_PCDEx_LPM_Callback>
 800398a:	e002      	b.n	8003992 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f009 ffa1 	bl	800d8d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f003 fb1a 	bl	8006fe0 <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b6:	d112      	bne.n	80039de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d102      	bne.n	80039ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f009 ff5d 	bl	800d888 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f003 fafc 	bl	8006fe0 <USB_ReadInterrupts>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039f2:	f040 80b7 	bne.w	8003b64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2110      	movs	r1, #16
 8003a10:	4618      	mov	r0, r3
 8003a12:	f002 fbc9 	bl	80061a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	e046      	b.n	8003aaa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a40:	0151      	lsls	r1, r2, #5
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	440a      	add	r2, r1
 8003a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003aa2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	791b      	ldrb	r3, [r3, #4]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d3b2      	bcc.n	8003a1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ac8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7bdb      	ldrb	r3, [r3, #15]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae2:	f043 030b 	orr.w	r3, r3, #11
 8003ae6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	69fa      	ldr	r2, [r7, #28]
 8003af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af8:	f043 030b 	orr.w	r3, r3, #11
 8003afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003afe:	e015      	b.n	8003b2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b26:	f043 030b 	orr.w	r3, r3, #11
 8003b2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b4e:	461a      	mov	r2, r3
 8003b50:	f003 fb0a 	bl	8007168 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 fa39 	bl	8006fe0 <USB_ReadInterrupts>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b78:	d123      	bne.n	8003bc2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f003 facf 	bl	8007122 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fb86 	bl	800629a <USB_GetDevSpeed>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681c      	ldr	r4, [r3, #0]
 8003b9a:	f001 fa09 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8003b9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	f002 f88a 	bl	8005cc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f009 fe42 	bl	800d836 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695a      	ldr	r2, [r3, #20]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fa0a 	bl	8006fe0 <USB_ReadInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10a      	bne.n	8003bec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f009 fe1f 	bl	800d81a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f002 0208 	and.w	r2, r2, #8
 8003bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f003 f9f5 	bl	8006fe0 <USB_ReadInterrupts>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfc:	2b80      	cmp	r3, #128	@ 0x80
 8003bfe:	d123      	bne.n	8003c48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c10:	e014      	b.n	8003c3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb0a 	bl	800424a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c38:	3301      	adds	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	791b      	ldrb	r3, [r3, #4]
 8003c40:	461a      	mov	r2, r3
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d3e4      	bcc.n	8003c12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f003 f9c7 	bl	8006fe0 <USB_ReadInterrupts>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c5c:	d13c      	bne.n	8003cd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c5e:	2301      	movs	r3, #1
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c62:	e02b      	b.n	8003cbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3318      	adds	r3, #24
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d115      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da12      	bge.n	8003cb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3317      	adds	r3, #23
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 faca 	bl	800424a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	3301      	adds	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	791b      	ldrb	r3, [r3, #4]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d3cd      	bcc.n	8003c64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 f97f 	bl	8006fe0 <USB_ReadInterrupts>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cec:	d156      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf2:	e045      	b.n	8003d80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d08:	4613      	mov	r3, r2
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d12e      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da2b      	bge.n	8003d7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d121      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d76:	6053      	str	r3, [r2, #4]
            break;
 8003d78:	e008      	b.n	8003d8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	791b      	ldrb	r3, [r3, #4]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d3b3      	bcc.n	8003cf4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 f91d 	bl	8006fe0 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db0:	d10a      	bne.n	8003dc8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f009 fdc0 	bl	800d938 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f003 f907 	bl	8006fe0 <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d115      	bne.n	8003e08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f009 fdb0 	bl	800d954 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	e000      	b.n	8003e08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003e06:	bf00      	nop
    }
  }
}
 8003e08:	3734      	adds	r7, #52	@ 0x34
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}

08003e0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_PCD_SetAddress+0x1a>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e012      	b.n	8003e4e <HAL_PCD_SetAddress+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 f866 	bl	8006f10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	4608      	mov	r0, r1
 8003e60:	4611      	mov	r1, r2
 8003e62:	461a      	mov	r2, r3
 8003e64:	4603      	mov	r3, r0
 8003e66:	70fb      	strb	r3, [r7, #3]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	803b      	strh	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da0f      	bge.n	8003e9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3310      	adds	r3, #16
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	705a      	strb	r2, [r3, #1]
 8003e9a:	e00f      	b.n	8003ebc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 020f 	and.w	r2, r3, #15
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ebc:	78fb      	ldrb	r3, [r7, #3]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ec8:	883b      	ldrh	r3, [r7, #0]
 8003eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	78ba      	ldrb	r2, [r7, #2]
 8003ed6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	785b      	ldrb	r3, [r3, #1]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d004      	beq.n	8003eea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eea:	78bb      	ldrb	r3, [r7, #2]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d102      	bne.n	8003ef6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_EP_Open+0xae>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e00e      	b.n	8003f22 <HAL_PCD_EP_Open+0xcc>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f002 f9e6 	bl	80062e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f20:	7afb      	ldrb	r3, [r7, #11]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	460b      	mov	r3, r1
 8003f34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	da0f      	bge.n	8003f5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f3e:	78fb      	ldrb	r3, [r7, #3]
 8003f40:	f003 020f 	and.w	r2, r3, #15
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	3304      	adds	r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	705a      	strb	r2, [r3, #1]
 8003f5c:	e00f      	b.n	8003f7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 020f 	and.w	r2, r3, #15
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4413      	add	r3, r2
 8003f74:	3304      	adds	r3, #4
 8003f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_PCD_EP_Close+0x6e>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e00e      	b.n	8003fb6 <HAL_PCD_EP_Close+0x8c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f002 fa24 	bl	80063f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	b2da      	uxtb	r2, r3
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	799b      	ldrb	r3, [r3, #6]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d102      	bne.n	800401a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	799b      	ldrb	r3, [r3, #6]
 8004022:	461a      	mov	r2, r3
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	f002 fac1 	bl	80065ac <USB_EPStartXfer>

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	f003 020f 	and.w	r2, r3, #15
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	460b      	mov	r3, r1
 8004072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	7afb      	ldrb	r3, [r7, #11]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3310      	adds	r3, #16
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2200      	movs	r2, #0
 800409c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2201      	movs	r2, #1
 80040a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	799b      	ldrb	r3, [r3, #6]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	799b      	ldrb	r3, [r3, #6]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6979      	ldr	r1, [r7, #20]
 80040ca:	f002 fa6f 	bl	80065ac <USB_EPStartXfer>

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	7912      	ldrb	r2, [r2, #4]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d901      	bls.n	80040f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e04f      	b.n	8004196 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da0f      	bge.n	800411e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040fe:	78fb      	ldrb	r3, [r7, #3]
 8004100:	f003 020f 	and.w	r2, r3, #15
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	3310      	adds	r3, #16
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2201      	movs	r2, #1
 800411a:	705a      	strb	r2, [r3, #1]
 800411c:	e00d      	b.n	800413a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	4413      	add	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_PCD_EP_SetStall+0x82>
 8004156:	2302      	movs	r3, #2
 8004158:	e01d      	b.n	8004196 <HAL_PCD_EP_SetStall+0xbe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	4618      	mov	r0, r3
 800416a:	f002 fdfd 	bl	8006d68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 030f 	and.w	r3, r3, #15
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7999      	ldrb	r1, [r3, #6]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004186:	461a      	mov	r2, r3
 8004188:	f002 ffee 	bl	8007168 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	7912      	ldrb	r2, [r2, #4]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e042      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da0f      	bge.n	80041e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	f003 020f 	and.w	r2, r3, #15
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	3310      	adds	r3, #16
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	705a      	strb	r2, [r3, #1]
 80041e2:	e00f      	b.n	8004204 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4413      	add	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800420a:	78fb      	ldrb	r3, [r7, #3]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	b2da      	uxtb	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_PCD_EP_ClrStall+0x86>
 8004220:	2302      	movs	r3, #2
 8004222:	e00e      	b.n	8004242 <HAL_PCD_EP_ClrStall+0xa4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	4618      	mov	r0, r3
 8004234:	f002 fe06 	bl	8006e44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b084      	sub	sp, #16
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	460b      	mov	r3, r1
 8004254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0c      	bge.n	8004278 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3310      	adds	r3, #16
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e00c      	b.n	8004292 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	3304      	adds	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	4618      	mov	r0, r3
 800429a:	f002 fc25 	bl	8006ae8 <USB_EPStopXfer>
 800429e:	4603      	mov	r3, r0
 80042a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042a2:	7afb      	ldrb	r3, [r7, #11]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	3310      	adds	r3, #16
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d901      	bls.n	80042e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e06b      	b.n	80043bc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d902      	bls.n	8004300 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	3303      	adds	r3, #3
 8004304:	089b      	lsrs	r3, r3, #2
 8004306:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004308:	e02a      	b.n	8004360 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	691a      	ldr	r2, [r3, #16]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	429a      	cmp	r2, r3
 800431e:	d902      	bls.n	8004326 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3303      	adds	r3, #3
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	68d9      	ldr	r1, [r3, #12]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4603      	mov	r3, r0
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f002 fc7a 	bl	8006c3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	441a      	add	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	441a      	add	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	429a      	cmp	r2, r3
 8004374:	d809      	bhi.n	800438a <PCD_WriteEmptyTxFifo+0xde>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800437e:	429a      	cmp	r2, r3
 8004380:	d203      	bcs.n	800438a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1bf      	bne.n	800430a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	429a      	cmp	r2, r3
 8004394:	d811      	bhi.n	80043ba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	2201      	movs	r2, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	6939      	ldr	r1, [r7, #16]
 80043b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043b6:	4013      	ands	r3, r2
 80043b8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	333c      	adds	r3, #60	@ 0x3c
 80043dc:	3304      	adds	r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	799b      	ldrb	r3, [r3, #6]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d17b      	bne.n	80044f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4a61      	ldr	r2, [pc, #388]	@ (800458c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	f240 80b9 	bls.w	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80b3 	beq.w	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004426:	461a      	mov	r2, r3
 8004428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800442c:	6093      	str	r3, [r2, #8]
 800442e:	e0a7      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d009      	beq.n	800444e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004446:	461a      	mov	r2, r3
 8004448:	2320      	movs	r3, #32
 800444a:	6093      	str	r3, [r2, #8]
 800444c:	e098      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8093 	bne.w	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a4b      	ldr	r2, [pc, #300]	@ (800458c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d90f      	bls.n	8004482 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004478:	461a      	mov	r2, r3
 800447a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	e07e      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	0159      	lsls	r1, r3, #5
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ae:	1ad2      	subs	r2, r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d114      	bne.n	80044e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d109      	bne.n	80044d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044cc:	461a      	mov	r2, r3
 80044ce:	2101      	movs	r1, #1
 80044d0:	f002 fe4a 	bl	8007168 <USB_EP0_OutStart>
 80044d4:	e006      	b.n	80044e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	4619      	mov	r1, r3
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f009 f960 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
 80044f0:	e046      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4a26      	ldr	r2, [pc, #152]	@ (8004590 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d124      	bne.n	8004544 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004510:	461a      	mov	r2, r3
 8004512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004516:	6093      	str	r3, [r2, #8]
 8004518:	e032      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d008      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	461a      	mov	r2, r3
 8004532:	2320      	movs	r3, #32
 8004534:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4619      	mov	r1, r3
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f009 f937 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
 8004542:	e01d      	b.n	8004580 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d114      	bne.n	8004574 <PCD_EP_OutXfrComplete_int+0x1b0>
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800456c:	461a      	mov	r2, r3
 800456e:	2100      	movs	r1, #0
 8004570:	f002 fdfa 	bl	8007168 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	4619      	mov	r1, r3
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f009 f918 	bl	800d7b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3720      	adds	r7, #32
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	4f54300a 	.word	0x4f54300a
 8004590:	4f54310a 	.word	0x4f54310a

08004594 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	333c      	adds	r3, #60	@ 0x3c
 80045ac:	3304      	adds	r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <PCD_EP_OutSetupPacket_int+0x88>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d90e      	bls.n	80045e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f009 f8cf 	bl	800d78c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	@ (800461c <PCD_EP_OutSetupPacket_int+0x88>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d90c      	bls.n	8004610 <PCD_EP_OutSetupPacket_int+0x7c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	799b      	ldrb	r3, [r3, #6]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d108      	bne.n	8004610 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004608:	461a      	mov	r2, r3
 800460a:	2101      	movs	r1, #1
 800460c:	f002 fdac 	bl	8007168 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	4f54300a 	.word	0x4f54300a

08004620 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
 800462c:	4613      	mov	r3, r2
 800462e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d107      	bne.n	800464e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800463e:	883b      	ldrh	r3, [r7, #0]
 8004640:	0419      	lsls	r1, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	430a      	orrs	r2, r1
 800464a:	629a      	str	r2, [r3, #40]	@ 0x28
 800464c:	e028      	b.n	80046a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004654:	0c1b      	lsrs	r3, r3, #16
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	e00d      	b.n	800467e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	3340      	adds	r3, #64	@ 0x40
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	4413      	add	r3, r2
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	3301      	adds	r3, #1
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	7bfa      	ldrb	r2, [r7, #15]
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	3b01      	subs	r3, #1
 8004684:	429a      	cmp	r2, r3
 8004686:	d3ec      	bcc.n	8004662 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004688:	883b      	ldrh	r3, [r7, #0]
 800468a:	0418      	lsls	r0, r3, #16
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6819      	ldr	r1, [r3, #0]
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	3b01      	subs	r3, #1
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4302      	orrs	r2, r0
 8004698:	3340      	adds	r3, #64	@ 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b083      	sub	sp, #12
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	887a      	ldrh	r2, [r7, #2]
 80046c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e267      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d075      	beq.n	80047f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004706:	4b88      	ldr	r3, [pc, #544]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00c      	beq.n	800472c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4b85      	ldr	r3, [pc, #532]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800471a:	2b08      	cmp	r3, #8
 800471c:	d112      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b82      	ldr	r3, [pc, #520]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800472a:	d10b      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	4b7e      	ldr	r3, [pc, #504]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05b      	beq.n	80047f0 <HAL_RCC_OscConfig+0x108>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d157      	bne.n	80047f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e242      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d106      	bne.n	800475c <HAL_RCC_OscConfig+0x74>
 800474e:	4b76      	ldr	r3, [pc, #472]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a75      	ldr	r2, [pc, #468]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x98>
 8004766:	4b70      	ldr	r3, [pc, #448]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a6f      	ldr	r2, [pc, #444]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b6d      	ldr	r3, [pc, #436]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6c      	ldr	r2, [pc, #432]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 8004780:	4b69      	ldr	r3, [pc, #420]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a68      	ldr	r2, [pc, #416]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b66      	ldr	r3, [pc, #408]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a65      	ldr	r2, [pc, #404]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fd f906 	bl	80019b0 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fd f902 	bl	80019b0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	@ 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e207      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b5b      	ldr	r3, [pc, #364]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xc0>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fd f8f2 	bl	80019b0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fd f8ee 	bl	80019b0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	@ 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1f3      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b51      	ldr	r3, [pc, #324]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0xe8>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b47      	ldr	r3, [pc, #284]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b44      	ldr	r3, [pc, #272]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b41      	ldr	r3, [pc, #260]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1c7      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b3b      	ldr	r3, [pc, #236]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4937      	ldr	r1, [pc, #220]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e03a      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b34      	ldr	r3, [pc, #208]	@ (800492c <HAL_RCC_OscConfig+0x244>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd f8a7 	bl	80019b0 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7fd f8a3 	bl	80019b0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1a8      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4925      	ldr	r1, [pc, #148]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b24      	ldr	r3, [pc, #144]	@ (800492c <HAL_RCC_OscConfig+0x244>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd f886 	bl	80019b0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fd f882 	bl	80019b0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e187      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d036      	beq.n	8004940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b15      	ldr	r3, [pc, #84]	@ (8004930 <HAL_RCC_OscConfig+0x248>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd f866 	bl	80019b0 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fd f862 	bl	80019b0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e167      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004928 <HAL_RCC_OscConfig+0x240>)
 80048fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x200>
 8004906:	e01b      	b.n	8004940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004908:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <HAL_RCC_OscConfig+0x248>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490e:	f7fd f84f 	bl	80019b0 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	e00e      	b.n	8004934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004916:	f7fd f84b 	bl	80019b0 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d907      	bls.n	8004934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e150      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
 8004928:	40023800 	.word	0x40023800
 800492c:	42470000 	.word	0x42470000
 8004930:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	4b88      	ldr	r3, [pc, #544]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ea      	bne.n	8004916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8097 	beq.w	8004a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004952:	4b81      	ldr	r3, [pc, #516]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10f      	bne.n	800497e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800495e:	2300      	movs	r3, #0
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	4b7d      	ldr	r3, [pc, #500]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004966:	4a7c      	ldr	r2, [pc, #496]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496c:	6413      	str	r3, [r2, #64]	@ 0x40
 800496e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497e:	4b77      	ldr	r3, [pc, #476]	@ (8004b5c <HAL_RCC_OscConfig+0x474>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d118      	bne.n	80049bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498a:	4b74      	ldr	r3, [pc, #464]	@ (8004b5c <HAL_RCC_OscConfig+0x474>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a73      	ldr	r2, [pc, #460]	@ (8004b5c <HAL_RCC_OscConfig+0x474>)
 8004990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004996:	f7fd f80b 	bl	80019b0 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800499e:	f7fd f807 	bl	80019b0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e10c      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b5c <HAL_RCC_OscConfig+0x474>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d106      	bne.n	80049d2 <HAL_RCC_OscConfig+0x2ea>
 80049c4:	4b64      	ldr	r3, [pc, #400]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c8:	4a63      	ldr	r2, [pc, #396]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80049d0:	e01c      	b.n	8004a0c <HAL_RCC_OscConfig+0x324>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b05      	cmp	r3, #5
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x30c>
 80049da:	4b5f      	ldr	r3, [pc, #380]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049de:	4a5e      	ldr	r2, [pc, #376]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049e0:	f043 0304 	orr.w	r3, r3, #4
 80049e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e6:	4b5c      	ldr	r3, [pc, #368]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f2:	e00b      	b.n	8004a0c <HAL_RCC_OscConfig+0x324>
 80049f4:	4b58      	ldr	r3, [pc, #352]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a57      	ldr	r2, [pc, #348]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a00:	4b55      	ldr	r3, [pc, #340]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a04:	4a54      	ldr	r2, [pc, #336]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a06:	f023 0304 	bic.w	r3, r3, #4
 8004a0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d015      	beq.n	8004a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc ffcc 	bl	80019b0 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	e00a      	b.n	8004a32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1c:	f7fc ffc8 	bl	80019b0 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e0cb      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	4b49      	ldr	r3, [pc, #292]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0ee      	beq.n	8004a1c <HAL_RCC_OscConfig+0x334>
 8004a3e:	e014      	b.n	8004a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a40:	f7fc ffb6 	bl	80019b0 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fc ffb2 	bl	80019b0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0b5      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ee      	bne.n	8004a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a70:	4b39      	ldr	r3, [pc, #228]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	4a38      	ldr	r2, [pc, #224]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80a1 	beq.w	8004bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a86:	4b34      	ldr	r3, [pc, #208]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d05c      	beq.n	8004b4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d141      	bne.n	8004b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9a:	4b31      	ldr	r3, [pc, #196]	@ (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fc ff86 	bl	80019b0 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa8:	f7fc ff82 	bl	80019b0 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e087      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	4b27      	ldr	r3, [pc, #156]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	019b      	lsls	r3, r3, #6
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	041b      	lsls	r3, r3, #16
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae8:	061b      	lsls	r3, r3, #24
 8004aea:	491b      	ldr	r1, [pc, #108]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af6:	f7fc ff5b 	bl	80019b0 <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afe:	f7fc ff57 	bl	80019b0 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e05c      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b10:	4b11      	ldr	r3, [pc, #68]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x416>
 8004b1c:	e054      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <HAL_RCC_OscConfig+0x478>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fc ff44 	bl	80019b0 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fc ff40 	bl	80019b0 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e045      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_RCC_OscConfig+0x470>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x444>
 8004b4a:	e03d      	b.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e038      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40007000 	.word	0x40007000
 8004b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b64:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd4 <HAL_RCC_OscConfig+0x4ec>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d028      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d121      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d11a      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d111      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	3b01      	subs	r3, #1
 8004bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d107      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0cc      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b68      	ldr	r3, [pc, #416]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d90c      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b65      	ldr	r3, [pc, #404]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a52      	ldr	r2, [pc, #328]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d044      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c96:	4b3f      	ldr	r3, [pc, #252]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e06f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e067      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb6:	4b37      	ldr	r3, [pc, #220]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 0203 	bic.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4934      	ldr	r1, [pc, #208]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc8:	f7fc fe72 	bl	80019b0 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fc fe6e 	bl	80019b0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e04f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 020c 	and.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d1eb      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b25      	ldr	r3, [pc, #148]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d20c      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b22      	ldr	r3, [pc, #136]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	@ (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	@ (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490a      	ldr	r1, [pc, #40]	@ (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	fa22 f303 	lsr.w	r3, r2, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	@ (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fc fdd2 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023c00 	.word	0x40023c00
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0801294c 	.word	0x0801294c
 8004d9c:	20000010 	.word	0x20000010
 8004da0:	20000014 	.word	0x20000014

08004da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b094      	sub	sp, #80	@ 0x50
 8004daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dbc:	4b79      	ldr	r3, [pc, #484]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d00d      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	f200 80e1 	bhi.w	8004f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd6:	e0db      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4b73      	ldr	r3, [pc, #460]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ddc:	e0db      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dde:	4b73      	ldr	r3, [pc, #460]	@ (8004fac <HAL_RCC_GetSysClockFreq+0x208>)
 8004de0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004de2:	e0d8      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de4:	4b6f      	ldr	r3, [pc, #444]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dee:	4b6d      	ldr	r3, [pc, #436]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d063      	beq.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	2200      	movs	r2, #0
 8004e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0e:	2300      	movs	r3, #0
 8004e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e16:	4622      	mov	r2, r4
 8004e18:	462b      	mov	r3, r5
 8004e1a:	f04f 0000 	mov.w	r0, #0
 8004e1e:	f04f 0100 	mov.w	r1, #0
 8004e22:	0159      	lsls	r1, r3, #5
 8004e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e28:	0150      	lsls	r0, r2, #5
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4621      	mov	r1, r4
 8004e30:	1a51      	subs	r1, r2, r1
 8004e32:	6139      	str	r1, [r7, #16]
 8004e34:	4629      	mov	r1, r5
 8004e36:	eb63 0301 	sbc.w	r3, r3, r1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	018b      	lsls	r3, r1, #6
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e52:	4651      	mov	r1, sl
 8004e54:	018a      	lsls	r2, r1, #6
 8004e56:	4651      	mov	r1, sl
 8004e58:	ebb2 0801 	subs.w	r8, r2, r1
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e76:	4690      	mov	r8, r2
 8004e78:	4699      	mov	r9, r3
 8004e7a:	4623      	mov	r3, r4
 8004e7c:	eb18 0303 	adds.w	r3, r8, r3
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	462b      	mov	r3, r5
 8004e84:	eb49 0303 	adc.w	r3, r9, r3
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e96:	4629      	mov	r1, r5
 8004e98:	024b      	lsls	r3, r1, #9
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	024a      	lsls	r2, r1, #9
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eaa:	2200      	movs	r2, #0
 8004eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004eb4:	f7fb fee8 	bl	8000c88 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ec0:	e058      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec2:	4b38      	ldr	r3, [pc, #224]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	099b      	lsrs	r3, r3, #6
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	4611      	mov	r1, r2
 8004ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ed2:	623b      	str	r3, [r7, #32]
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	f04f 0000 	mov.w	r0, #0
 8004ee4:	f04f 0100 	mov.w	r1, #0
 8004ee8:	0159      	lsls	r1, r3, #5
 8004eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eee:	0150      	lsls	r0, r2, #5
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004efa:	4649      	mov	r1, r9
 8004efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f14:	ebb2 040a 	subs.w	r4, r2, sl
 8004f18:	eb63 050b 	sbc.w	r5, r3, fp
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	00eb      	lsls	r3, r5, #3
 8004f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f2a:	00e2      	lsls	r2, r4, #3
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	461d      	mov	r5, r3
 8004f30:	4643      	mov	r3, r8
 8004f32:	18e3      	adds	r3, r4, r3
 8004f34:	603b      	str	r3, [r7, #0]
 8004f36:	464b      	mov	r3, r9
 8004f38:	eb45 0303 	adc.w	r3, r5, r3
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	028b      	lsls	r3, r1, #10
 8004f4e:	4621      	mov	r1, r4
 8004f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f54:	4621      	mov	r1, r4
 8004f56:	028a      	lsls	r2, r1, #10
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	61fa      	str	r2, [r7, #28]
 8004f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f68:	f7fb fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4613      	mov	r3, r2
 8004f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f74:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f8e:	e002      	b.n	8004f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3750      	adds	r7, #80	@ 0x50
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	00f42400 	.word	0x00f42400
 8004fac:	007a1200 	.word	0x007a1200

08004fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010

08004fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fcc:	f7ff fff0 	bl	8004fb0 <HAL_RCC_GetHCLKFreq>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	0a9b      	lsrs	r3, r3, #10
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	4903      	ldr	r1, [pc, #12]	@ (8004fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fde:	5ccb      	ldrb	r3, [r1, r3]
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	0801295c 	.word	0x0801295c

08004ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e041      	b.n	8005086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc fafc 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f000 faf6 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d001      	beq.n	80050a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e04e      	b.n	8005146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a23      	ldr	r2, [pc, #140]	@ (8005154 <HAL_TIM_Base_Start_IT+0xc4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d022      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d2:	d01d      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005158 <HAL_TIM_Base_Start_IT+0xc8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d018      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a1e      	ldr	r2, [pc, #120]	@ (800515c <HAL_TIM_Base_Start_IT+0xcc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d013      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005160 <HAL_TIM_Base_Start_IT+0xd0>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005164 <HAL_TIM_Base_Start_IT+0xd4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <HAL_TIM_Base_Start_IT+0xd8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a18      	ldr	r2, [pc, #96]	@ (800516c <HAL_TIM_Base_Start_IT+0xdc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d111      	bne.n	8005134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d010      	beq.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	e007      	b.n	8005144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40001800 	.word	0x40001800

08005170 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10f      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	f240 4344 	movw	r3, #1092	@ 0x444
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_Base_Stop_IT+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e041      	b.n	8005264 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fc f9ed 	bl	80015d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	4619      	mov	r1, r3
 800520c:	4610      	mov	r0, r2
 800520e:	f000 fa07 	bl	8005620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d020      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01b      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0202 	mvn.w	r2, #2
 80052a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f994 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 80052bc:	e005      	b.n	80052ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f986 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f997 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d020      	beq.n	800531c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01b      	beq.n	800531c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0204 	mvn.w	r2, #4
 80052ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f96e 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8005308:	e005      	b.n	8005316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f960 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f971 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d020      	beq.n	8005368 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0208 	mvn.w	r2, #8
 8005338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2204      	movs	r2, #4
 800533e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f948 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f93a 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f94b 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d020      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01b      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0210 	mvn.w	r2, #16
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2208      	movs	r2, #8
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f922 	bl	80055e4 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f914 	bl	80055d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f925 	bl	80055f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0201 	mvn.w	r2, #1
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f007 fcac 	bl	800cd30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fbf4 	bl	8005be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8f6 	bl	800560c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00c      	beq.n	8005444 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d007      	beq.n	8005444 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0220 	mvn.w	r2, #32
 800543c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fbc6 	bl	8005bd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005466:	2302      	movs	r3, #2
 8005468:	e0ae      	b.n	80055c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b0c      	cmp	r3, #12
 8005476:	f200 809f 	bhi.w	80055b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800547a:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080055b9 	.word	0x080055b9
 8005488:	080055b9 	.word	0x080055b9
 800548c:	080055b9 	.word	0x080055b9
 8005490:	080054f5 	.word	0x080054f5
 8005494:	080055b9 	.word	0x080055b9
 8005498:	080055b9 	.word	0x080055b9
 800549c:	080055b9 	.word	0x080055b9
 80054a0:	08005537 	.word	0x08005537
 80054a4:	080055b9 	.word	0x080055b9
 80054a8:	080055b9 	.word	0x080055b9
 80054ac:	080055b9 	.word	0x080055b9
 80054b0:	08005577 	.word	0x08005577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 f95c 	bl	8005778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0208 	orr.w	r2, r2, #8
 80054ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0204 	bic.w	r2, r2, #4
 80054de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6999      	ldr	r1, [r3, #24]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	619a      	str	r2, [r3, #24]
      break;
 80054f2:	e064      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68b9      	ldr	r1, [r7, #8]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 f9ac 	bl	8005858 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800550e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6999      	ldr	r1, [r3, #24]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	619a      	str	r2, [r3, #24]
      break;
 8005534:	e043      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fa01 	bl	8005944 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0208 	orr.w	r2, r2, #8
 8005550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0204 	bic.w	r2, r2, #4
 8005560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69d9      	ldr	r1, [r3, #28]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	61da      	str	r2, [r3, #28]
      break;
 8005574:	e023      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	4618      	mov	r0, r3
 800557e:	f000 fa55 	bl	8005a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69da      	ldr	r2, [r3, #28]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69d9      	ldr	r1, [r3, #28]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	021a      	lsls	r2, r3, #8
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	61da      	str	r2, [r3, #28]
      break;
 80055b6:	e002      	b.n	80055be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
      break;
 80055bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a46      	ldr	r2, [pc, #280]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d013      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800563e:	d00f      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a43      	ldr	r2, [pc, #268]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00b      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a42      	ldr	r2, [pc, #264]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d007      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d003      	beq.n	8005660 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a40      	ldr	r2, [pc, #256]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d108      	bne.n	8005672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a35      	ldr	r2, [pc, #212]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d02b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005680:	d027      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <TIM_Base_SetConfig+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d023      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a31      	ldr	r2, [pc, #196]	@ (8005754 <TIM_Base_SetConfig+0x134>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a30      	ldr	r2, [pc, #192]	@ (8005758 <TIM_Base_SetConfig+0x138>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d017      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005760 <TIM_Base_SetConfig+0x140>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005764 <TIM_Base_SetConfig+0x144>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005768 <TIM_Base_SetConfig+0x148>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	@ (800576c <TIM_Base_SetConfig+0x14c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <TIM_Base_SetConfig+0x150>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <TIM_Base_SetConfig+0x154>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d108      	bne.n	80056e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a10      	ldr	r2, [pc, #64]	@ (800574c <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a12      	ldr	r2, [pc, #72]	@ (800575c <TIM_Base_SetConfig+0x13c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d103      	bne.n	8005720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b01      	cmp	r3, #1
 8005730:	d105      	bne.n	800573e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f023 0201 	bic.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	611a      	str	r2, [r3, #16]
  }
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	40001800 	.word	0x40001800
 8005770:	40001c00 	.word	0x40001c00
 8005774:	40002000 	.word	0x40002000

08005778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f023 0201 	bic.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0302 	bic.w	r3, r3, #2
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a20      	ldr	r2, [pc, #128]	@ (8005850 <TIM_OC1_SetConfig+0xd8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_OC1_SetConfig+0x64>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005854 <TIM_OC1_SetConfig+0xdc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d10c      	bne.n	80057f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0308 	bic.w	r3, r3, #8
 80057e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 0304 	bic.w	r3, r3, #4
 80057f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <TIM_OC1_SetConfig+0xd8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC1_SetConfig+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a14      	ldr	r2, [pc, #80]	@ (8005854 <TIM_OC1_SetConfig+0xdc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40010000 	.word	0x40010000
 8005854:	40010400 	.word	0x40010400

08005858 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 0210 	bic.w	r2, r3, #16
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0320 	bic.w	r3, r3, #32
 80058a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a22      	ldr	r2, [pc, #136]	@ (800593c <TIM_OC2_SetConfig+0xe4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC2_SetConfig+0x68>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a21      	ldr	r2, [pc, #132]	@ (8005940 <TIM_OC2_SetConfig+0xe8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10d      	bne.n	80058dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a17      	ldr	r2, [pc, #92]	@ (800593c <TIM_OC2_SetConfig+0xe4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_OC2_SetConfig+0x94>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a16      	ldr	r2, [pc, #88]	@ (8005940 <TIM_OC2_SetConfig+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d113      	bne.n	8005914 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4313      	orrs	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400

08005944 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800598c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a21      	ldr	r2, [pc, #132]	@ (8005a24 <TIM_OC3_SetConfig+0xe0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC3_SetConfig+0x66>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a20      	ldr	r2, [pc, #128]	@ (8005a28 <TIM_OC3_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d10d      	bne.n	80059c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	@ (8005a24 <TIM_OC3_SetConfig+0xe0>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_OC3_SetConfig+0x92>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a15      	ldr	r2, [pc, #84]	@ (8005a28 <TIM_OC3_SetConfig+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d113      	bne.n	80059fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	621a      	str	r2, [r3, #32]
}
 8005a18:	bf00      	nop
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40010400 	.word	0x40010400

08005a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a12      	ldr	r2, [pc, #72]	@ (8005ad0 <TIM_OC4_SetConfig+0xa4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC4_SetConfig+0x68>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a11      	ldr	r2, [pc, #68]	@ (8005ad4 <TIM_OC4_SetConfig+0xa8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d109      	bne.n	8005aa8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400

08005ad8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d101      	bne.n	8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aec:	2302      	movs	r3, #2
 8005aee:	e05a      	b.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3c:	d01d      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a15      	ldr	r2, [pc, #84]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10c      	bne.n	8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	f107 001c 	add.w	r0, r7, #28
 8005c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d123      	bne.n	8005c5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005c26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f001 fae8 	bl	8007224 <USB_CoreReset>
 8005c54:	4603      	mov	r3, r0
 8005c56:	73fb      	strb	r3, [r7, #15]
 8005c58:	e01b      	b.n	8005c92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fadc 	bl	8007224 <USB_CoreReset>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d106      	bne.n	8005c86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c84:	e005      	b.n	8005c92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c92:	7fbb      	ldrb	r3, [r7, #30]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10b      	bne.n	8005cb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f043 0206 	orr.w	r2, r3, #6
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f043 0220 	orr.w	r2, r3, #32
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cbc:	b004      	add	sp, #16
 8005cbe:	4770      	bx	lr

08005cc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d165      	bne.n	8005da0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4a41      	ldr	r2, [pc, #260]	@ (8005ddc <USB_SetTurnaroundTime+0x11c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d906      	bls.n	8005cea <USB_SetTurnaroundTime+0x2a>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4a40      	ldr	r2, [pc, #256]	@ (8005de0 <USB_SetTurnaroundTime+0x120>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d202      	bcs.n	8005cea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005ce4:	230f      	movs	r3, #15
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e062      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	4a3c      	ldr	r2, [pc, #240]	@ (8005de0 <USB_SetTurnaroundTime+0x120>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d306      	bcc.n	8005d00 <USB_SetTurnaroundTime+0x40>
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8005de4 <USB_SetTurnaroundTime+0x124>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d202      	bcs.n	8005d00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005cfa:	230e      	movs	r3, #14
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e057      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4a38      	ldr	r2, [pc, #224]	@ (8005de4 <USB_SetTurnaroundTime+0x124>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d306      	bcc.n	8005d16 <USB_SetTurnaroundTime+0x56>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4a37      	ldr	r2, [pc, #220]	@ (8005de8 <USB_SetTurnaroundTime+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d202      	bcs.n	8005d16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005d10:	230d      	movs	r3, #13
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e04c      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a33      	ldr	r2, [pc, #204]	@ (8005de8 <USB_SetTurnaroundTime+0x128>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d306      	bcc.n	8005d2c <USB_SetTurnaroundTime+0x6c>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4a32      	ldr	r2, [pc, #200]	@ (8005dec <USB_SetTurnaroundTime+0x12c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d802      	bhi.n	8005d2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005d26:	230c      	movs	r3, #12
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e041      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8005dec <USB_SetTurnaroundTime+0x12c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d906      	bls.n	8005d42 <USB_SetTurnaroundTime+0x82>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	4a2e      	ldr	r2, [pc, #184]	@ (8005df0 <USB_SetTurnaroundTime+0x130>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d802      	bhi.n	8005d42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005d3c:	230b      	movs	r3, #11
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	e036      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4a2a      	ldr	r2, [pc, #168]	@ (8005df0 <USB_SetTurnaroundTime+0x130>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d906      	bls.n	8005d58 <USB_SetTurnaroundTime+0x98>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4a29      	ldr	r2, [pc, #164]	@ (8005df4 <USB_SetTurnaroundTime+0x134>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d802      	bhi.n	8005d58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005d52:	230a      	movs	r3, #10
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e02b      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	4a26      	ldr	r2, [pc, #152]	@ (8005df4 <USB_SetTurnaroundTime+0x134>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d906      	bls.n	8005d6e <USB_SetTurnaroundTime+0xae>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4a25      	ldr	r2, [pc, #148]	@ (8005df8 <USB_SetTurnaroundTime+0x138>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d202      	bcs.n	8005d6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d68:	2309      	movs	r3, #9
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e020      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <USB_SetTurnaroundTime+0x138>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d306      	bcc.n	8005d84 <USB_SetTurnaroundTime+0xc4>
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4a20      	ldr	r2, [pc, #128]	@ (8005dfc <USB_SetTurnaroundTime+0x13c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d802      	bhi.n	8005d84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d7e:	2308      	movs	r3, #8
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e015      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4a1d      	ldr	r2, [pc, #116]	@ (8005dfc <USB_SetTurnaroundTime+0x13c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d906      	bls.n	8005d9a <USB_SetTurnaroundTime+0xda>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e00 <USB_SetTurnaroundTime+0x140>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d202      	bcs.n	8005d9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d94:	2307      	movs	r3, #7
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	e00a      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d9a:	2306      	movs	r3, #6
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e007      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005da6:	2309      	movs	r3, #9
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e001      	b.n	8005db0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005dac:	2309      	movs	r3, #9
 8005dae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68da      	ldr	r2, [r3, #12]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	371c      	adds	r7, #28
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	00d8acbf 	.word	0x00d8acbf
 8005de0:	00e4e1c0 	.word	0x00e4e1c0
 8005de4:	00f42400 	.word	0x00f42400
 8005de8:	01067380 	.word	0x01067380
 8005dec:	011a499f 	.word	0x011a499f
 8005df0:	01312cff 	.word	0x01312cff
 8005df4:	014ca43f 	.word	0x014ca43f
 8005df8:	016e3600 	.word	0x016e3600
 8005dfc:	01a6ab1f 	.word	0x01a6ab1f
 8005e00:	01e84800 	.word	0x01e84800

08005e04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f043 0201 	orr.w	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f023 0201 	bic.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d115      	bne.n	8005e96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005e76:	200a      	movs	r0, #10
 8005e78:	f7fb fda6 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	330a      	adds	r3, #10
 8005e80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f001 f93f 	bl	8007106 <USB_GetMode>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d01e      	beq.n	8005ecc <USB_SetCurrentMode+0x84>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2bc7      	cmp	r3, #199	@ 0xc7
 8005e92:	d9f0      	bls.n	8005e76 <USB_SetCurrentMode+0x2e>
 8005e94:	e01a      	b.n	8005ecc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ea8:	200a      	movs	r0, #10
 8005eaa:	f7fb fd8d 	bl	80019c8 <HAL_Delay>
      ms += 10U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	330a      	adds	r3, #10
 8005eb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f001 f926 	bl	8007106 <USB_GetMode>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <USB_SetCurrentMode+0x84>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ec4:	d9f0      	bls.n	8005ea8 <USB_SetCurrentMode+0x60>
 8005ec6:	e001      	b.n	8005ecc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e005      	b.n	8005ed8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ed0:	d101      	bne.n	8005ed6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e000      	b.n	8005ed8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	e009      	b.n	8005f14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	3340      	adds	r3, #64	@ 0x40
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3301      	adds	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2b0e      	cmp	r3, #14
 8005f18:	d9f2      	bls.n	8005f00 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f1a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11c      	bne.n	8005f5c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f30:	f043 0302 	orr.w	r3, r3, #2
 8005f34:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f46:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f52:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f5a:	e00b      	b.n	8005f74 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f80:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10d      	bne.n	8005fa4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d104      	bne.n	8005f9a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f968 	bl	8006268 <USB_SetDevSpeed>
 8005f98:	e008      	b.n	8005fac <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f963 	bl	8006268 <USB_SetDevSpeed>
 8005fa2:	e003      	b.n	8005fac <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fa4:	2103      	movs	r1, #3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f95e 	bl	8006268 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fac:	2110      	movs	r1, #16
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8fa 	bl	80061a8 <USB_FlushTxFifo>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f924 	bl	800620c <USB_FlushRxFifo>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fec:	461a      	mov	r2, r3
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	e043      	b.n	8006080 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800600e:	d118      	bne.n	8006042 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e013      	b.n	8006054 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	461a      	mov	r2, r3
 800603a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	e008      	b.n	8006054 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800604e:	461a      	mov	r2, r3
 8006050:	2300      	movs	r3, #0
 8006052:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006072:	461a      	mov	r2, r3
 8006074:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006078:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	3301      	adds	r3, #1
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006084:	461a      	mov	r2, r3
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4293      	cmp	r3, r2
 800608a:	d3b5      	bcc.n	8005ff8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	e043      	b.n	800611a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060a8:	d118      	bne.n	80060dc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e013      	b.n	80060ee <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	e008      	b.n	80060ee <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	461a      	mov	r2, r3
 80060ea:	2300      	movs	r3, #0
 80060ec:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3301      	adds	r3, #1
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800611e:	461a      	mov	r2, r3
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	4293      	cmp	r3, r2
 8006124:	d3b5      	bcc.n	8006092 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006138:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006146:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006148:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800614c:	2b00      	cmp	r3, #0
 800614e:	d105      	bne.n	800615c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f043 0210 	orr.w	r2, r3, #16
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	4b10      	ldr	r3, [pc, #64]	@ (80061a4 <USB_DevInit+0x2c4>)
 8006162:	4313      	orrs	r3, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006168:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	f043 0208 	orr.w	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800617c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006180:	2b01      	cmp	r3, #1
 8006182:	d107      	bne.n	8006194 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a0:	b004      	add	sp, #16
 80061a2:	4770      	bx	lr
 80061a4:	803c3800 	.word	0x803c3800

080061a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c2:	d901      	bls.n	80061c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e01b      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	daf2      	bge.n	80061b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	019b      	lsls	r3, r3, #6
 80061d8:	f043 0220 	orr.w	r2, r3, #32
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ec:	d901      	bls.n	80061f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e006      	b.n	8006200 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d0f0      	beq.n	80061e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006224:	d901      	bls.n	800622a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e018      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	daf2      	bge.n	8006218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2210      	movs	r2, #16
 800623a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	3301      	adds	r3, #1
 8006240:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006248:	d901      	bls.n	800624e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e006      	b.n	800625c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b10      	cmp	r3, #16
 8006258:	d0f0      	beq.n	800623c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	68f9      	ldr	r1, [r7, #12]
 8006284:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800629a:	b480      	push	{r7}
 800629c:	b087      	sub	sp, #28
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0306 	and.w	r3, r3, #6
 80062b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75fb      	strb	r3, [r7, #23]
 80062be:	e00a      	b.n	80062d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d002      	beq.n	80062cc <USB_GetDevSpeed+0x32>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b06      	cmp	r3, #6
 80062ca:	d102      	bne.n	80062d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80062cc:	2302      	movs	r3, #2
 80062ce:	75fb      	strb	r3, [r7, #23]
 80062d0:	e001      	b.n	80062d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80062d2:	230f      	movs	r3, #15
 80062d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d13a      	bne.n	8006376 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006306:	69da      	ldr	r2, [r3, #28]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	f003 030f 	and.w	r3, r3, #15
 8006310:	2101      	movs	r1, #1
 8006312:	fa01 f303 	lsl.w	r3, r1, r3
 8006316:	b29b      	uxth	r3, r3
 8006318:	68f9      	ldr	r1, [r7, #12]
 800631a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800631e:	4313      	orrs	r3, r2
 8006320:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d155      	bne.n	80063e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	791b      	ldrb	r3, [r3, #4]
 8006352:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006354:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	059b      	lsls	r3, r3, #22
 800635a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800635c:	4313      	orrs	r3, r2
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800636a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800636e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	e036      	b.n	80063e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637c:	69da      	ldr	r2, [r3, #28]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	2101      	movs	r1, #1
 8006388:	fa01 f303 	lsl.w	r3, r1, r3
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006394:	4313      	orrs	r3, r2
 8006396:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11a      	bne.n	80063e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	791b      	ldrb	r3, [r3, #4]
 80063c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80063ca:	430b      	orrs	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	785b      	ldrb	r3, [r3, #1]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d161      	bne.n	80064d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006422:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006426:	d11f      	bne.n	8006468 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006442:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006446:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	0151      	lsls	r1, r2, #5
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	440a      	add	r2, r1
 800645e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006462:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	b29b      	uxth	r3, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006488:	4013      	ands	r3, r2
 800648a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 030f 	and.w	r3, r3, #15
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064ac:	4013      	ands	r3, r2
 80064ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0159      	lsls	r1, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	440b      	add	r3, r1
 80064c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ca:	4619      	mov	r1, r3
 80064cc:	4b35      	ldr	r3, [pc, #212]	@ (80065a4 <USB_DeactivateEndpoint+0x1b0>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]
 80064d2:	e060      	b.n	8006596 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ea:	d11f      	bne.n	800652c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006506:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800650a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	440a      	add	r2, r1
 8006522:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800652a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	041b      	lsls	r3, r3, #16
 8006544:	43db      	mvns	r3, r3
 8006546:	68f9      	ldr	r1, [r7, #12]
 8006548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800654c:	4013      	ands	r3, r2
 800654e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006556:	69da      	ldr	r2, [r3, #28]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	2101      	movs	r1, #1
 8006562:	fa01 f303 	lsl.w	r3, r1, r3
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	43db      	mvns	r3, r3
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006570:	4013      	ands	r3, r2
 8006572:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	0159      	lsls	r1, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	440b      	add	r3, r1
 800658a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800658e:	4619      	mov	r1, r3
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <USB_DeactivateEndpoint+0x1b4>)
 8006592:	4013      	ands	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	ec337800 	.word	0xec337800
 80065a8:	eff37800 	.word	0xeff37800

080065ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	f040 817f 	bne.w	80068cc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d132      	bne.n	800663c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	0151      	lsls	r1, r2, #5
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	440a      	add	r2, r1
 80065ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80065f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	015a      	lsls	r2, r3, #5
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	4413      	add	r3, r2
 8006602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	0151      	lsls	r1, r2, #5
 800660c:	69fa      	ldr	r2, [r7, #28]
 800660e:	440a      	add	r2, r1
 8006610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006618:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006634:	0cdb      	lsrs	r3, r3, #19
 8006636:	04db      	lsls	r3, r3, #19
 8006638:	6113      	str	r3, [r2, #16]
 800663a:	e097      	b.n	800676c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	69fa      	ldr	r2, [r7, #28]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006656:	0cdb      	lsrs	r3, r3, #19
 8006658:	04db      	lsls	r3, r3, #19
 800665a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006676:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800667a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800667e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d11a      	bne.n	80066bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d903      	bls.n	800669a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066b8:	6113      	str	r3, [r2, #16]
 80066ba:	e044      	b.n	8006746 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	1e5a      	subs	r2, r3, #1
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066de:	691a      	ldr	r2, [r3, #16]
 80066e0:	8afb      	ldrh	r3, [r7, #22]
 80066e2:	04d9      	lsls	r1, r3, #19
 80066e4:	4ba4      	ldr	r3, [pc, #656]	@ (8006978 <USB_EPStartXfer+0x3cc>)
 80066e6:	400b      	ands	r3, r1
 80066e8:	69b9      	ldr	r1, [r7, #24]
 80066ea:	0148      	lsls	r0, r1, #5
 80066ec:	69f9      	ldr	r1, [r7, #28]
 80066ee:	4401      	add	r1, r0
 80066f0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80066f4:	4313      	orrs	r3, r2
 80066f6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	791b      	ldrb	r3, [r3, #4]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d122      	bne.n	8006746 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800671e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	8afb      	ldrh	r3, [r7, #22]
 8006730:	075b      	lsls	r3, r3, #29
 8006732:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	0148      	lsls	r0, r1, #5
 800673a:	69f9      	ldr	r1, [r7, #28]
 800673c:	4401      	add	r1, r0
 800673e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	0148      	lsls	r0, r1, #5
 8006760:	69f9      	ldr	r1, [r7, #28]
 8006762:	4401      	add	r1, r0
 8006764:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006768:	4313      	orrs	r3, r2
 800676a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d14b      	bne.n	800680a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d009      	beq.n	800678e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006786:	461a      	mov	r2, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	791b      	ldrb	r3, [r3, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d128      	bne.n	80067e8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d110      	bne.n	80067c8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	015a      	lsls	r2, r3, #5
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4413      	add	r3, r2
 80067ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	0151      	lsls	r1, r2, #5
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	440a      	add	r2, r1
 80067bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e00f      	b.n	80067e8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006802:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006806:	6013      	str	r3, [r2, #0]
 8006808:	e166      	b.n	8006ad8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006824:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006828:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	791b      	ldrb	r3, [r3, #4]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d015      	beq.n	800685e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 814e 	beq.w	8006ad8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	69f9      	ldr	r1, [r7, #28]
 8006854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006858:	4313      	orrs	r3, r2
 800685a:	634b      	str	r3, [r1, #52]	@ 0x34
 800685c:	e13c      	b.n	8006ad8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686a:	2b00      	cmp	r3, #0
 800686c:	d110      	bne.n	8006890 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	69fa      	ldr	r2, [r7, #28]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006888:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e00f      	b.n	80068b0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69ba      	ldr	r2, [r7, #24]
 80068a0:	0151      	lsls	r1, r2, #5
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	440a      	add	r2, r1
 80068a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68d9      	ldr	r1, [r3, #12]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	b298      	uxth	r0, r3
 80068be:	79fb      	ldrb	r3, [r7, #7]
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	4603      	mov	r3, r0
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f9b9 	bl	8006c3c <USB_WritePacket>
 80068ca:	e105      	b.n	8006ad8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e6:	0cdb      	lsrs	r3, r3, #19
 80068e8:	04db      	lsls	r3, r3, #19
 80068ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006906:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800690a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800690e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d132      	bne.n	800697c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006944:	69b9      	ldr	r1, [r7, #24]
 8006946:	0148      	lsls	r0, r1, #5
 8006948:	69f9      	ldr	r1, [r7, #28]
 800694a:	4401      	add	r1, r0
 800694c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006950:	4313      	orrs	r3, r2
 8006952:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	69ba      	ldr	r2, [r7, #24]
 8006964:	0151      	lsls	r1, r2, #5
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	440a      	add	r2, r1
 800696a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800696e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006972:	6113      	str	r3, [r2, #16]
 8006974:	e062      	b.n	8006a3c <USB_EPStartXfer+0x490>
 8006976:	bf00      	nop
 8006978:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d123      	bne.n	80069cc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800699a:	69b9      	ldr	r1, [r7, #24]
 800699c:	0148      	lsls	r0, r1, #5
 800699e:	69f9      	ldr	r1, [r7, #28]
 80069a0:	4401      	add	r1, r0
 80069a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80069a6:	4313      	orrs	r3, r2
 80069a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80069c8:	6113      	str	r3, [r2, #16]
 80069ca:	e037      	b.n	8006a3c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	4413      	add	r3, r2
 80069d6:	1e5a      	subs	r2, r3, #1
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	8afa      	ldrh	r2, [r7, #22]
 80069e8:	fb03 f202 	mul.w	r2, r3, r2
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	8afb      	ldrh	r3, [r7, #22]
 8006a00:	04d9      	lsls	r1, r3, #19
 8006a02:	4b38      	ldr	r3, [pc, #224]	@ (8006ae4 <USB_EPStartXfer+0x538>)
 8006a04:	400b      	ands	r3, r1
 8006a06:	69b9      	ldr	r1, [r7, #24]
 8006a08:	0148      	lsls	r0, r1, #5
 8006a0a:	69f9      	ldr	r1, [r7, #28]
 8006a0c:	4401      	add	r1, r0
 8006a0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a12:	4313      	orrs	r3, r2
 8006a14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a2c:	69b9      	ldr	r1, [r7, #24]
 8006a2e:	0148      	lsls	r0, r1, #5
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	4401      	add	r1, r0
 8006a34:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10d      	bne.n	8006a5e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68d9      	ldr	r1, [r3, #12]
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	791b      	ldrb	r3, [r3, #4]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d128      	bne.n	8006ab8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d110      	bne.n	8006a98 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	0151      	lsls	r1, r2, #5
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	440a      	add	r2, r1
 8006a8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e00f      	b.n	8006ab8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	0151      	lsls	r1, r2, #5
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	440a      	add	r2, r1
 8006ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ad6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3720      	adds	r7, #32
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	1ff80000 	.word	0x1ff80000

08006ae8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	785b      	ldrb	r3, [r3, #1]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d14a      	bne.n	8006b9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b1e:	f040 8086 	bne.w	8006c2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	7812      	ldrb	r2, [r2, #0]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	7812      	ldrb	r2, [r2, #0]
 8006b5a:	0151      	lsls	r1, r2, #5
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	440a      	add	r2, r1
 8006b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d902      	bls.n	8006b80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b7e:	e056      	b.n	8006c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b98:	d0e7      	beq.n	8006b6a <USB_EPStopXfer+0x82>
 8006b9a:	e048      	b.n	8006c2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bb4:	d13b      	bne.n	8006c2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	7812      	ldrb	r2, [r2, #0]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d902      	bls.n	8006c14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	75fb      	strb	r3, [r7, #23]
          break;
 8006c12:	e00c      	b.n	8006c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c2c:	d0e7      	beq.n	8006bfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	371c      	adds	r7, #28
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b089      	sub	sp, #36	@ 0x24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	4611      	mov	r1, r2
 8006c48:	461a      	mov	r2, r3
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	71fb      	strb	r3, [r7, #7]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d123      	bne.n	8006caa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006c62:	88bb      	ldrh	r3, [r7, #4]
 8006c64:	3303      	adds	r3, #3
 8006c66:	089b      	lsrs	r3, r3, #2
 8006c68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	e018      	b.n	8006ca2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	031a      	lsls	r2, r3, #12
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d3e2      	bcc.n	8006c70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3724      	adds	r7, #36	@ 0x24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b08b      	sub	sp, #44	@ 0x2c
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006cd6:	88fb      	ldrh	r3, [r7, #6]
 8006cd8:	f003 0303 	and.w	r3, r3, #3
 8006cdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	623b      	str	r3, [r7, #32]
 8006ce2:	e014      	b.n	8006d0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cee:	601a      	str	r2, [r3, #0]
    pDest++;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfe:	3301      	adds	r3, #1
 8006d00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	3301      	adds	r3, #1
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	623b      	str	r3, [r7, #32]
 8006d0e:	6a3a      	ldr	r2, [r7, #32]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d3e6      	bcc.n	8006ce4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d16:	8bfb      	ldrh	r3, [r7, #30]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01e      	beq.n	8006d5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006d26:	461a      	mov	r2, r3
 8006d28:	f107 0310 	add.w	r3, r7, #16
 8006d2c:	6812      	ldr	r2, [r2, #0]
 8006d2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	701a      	strb	r2, [r3, #0]
      i++;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	3301      	adds	r3, #1
 8006d46:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006d4e:	8bfb      	ldrh	r3, [r7, #30]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d54:	8bfb      	ldrh	r3, [r7, #30]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1ea      	bne.n	8006d30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	372c      	adds	r7, #44	@ 0x2c
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	785b      	ldrb	r3, [r3, #1]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d12c      	bne.n	8006dde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	db12      	blt.n	8006dbc <USB_EPSetStall+0x54>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00f      	beq.n	8006dbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006dba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	0151      	lsls	r1, r2, #5
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	440a      	add	r2, r1
 8006dd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e02b      	b.n	8006e36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db12      	blt.n	8006e16 <USB_EPSetStall+0xae>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006e34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d128      	bne.n	8006eb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	68fa      	ldr	r2, [r7, #12]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	791b      	ldrb	r3, [r3, #4]
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d003      	beq.n	8006e90 <USB_EPClearStall+0x4c>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	791b      	ldrb	r3, [r3, #4]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d138      	bne.n	8006f02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	6013      	str	r3, [r2, #0]
 8006eb0:	e027      	b.n	8006f02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	0151      	lsls	r1, r2, #5
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	440a      	add	r2, r1
 8006ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ecc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ed0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	791b      	ldrb	r3, [r3, #4]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d003      	beq.n	8006ee2 <USB_EPClearStall+0x9e>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d10f      	bne.n	8006f02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f2e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006f32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f8a:	f023 0302 	bic.w	r3, r3, #2
 8006f8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fb8:	f023 0303 	bic.w	r3, r3, #3
 8006fbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fcc:	f043 0302 	orr.w	r3, r3, #2
 8006fd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	0c1b      	lsrs	r3, r3, #16
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800703a:	b480      	push	{r7}
 800703c:	b085      	sub	sp, #20
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800704c:	699b      	ldr	r3, [r3, #24]
 800704e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	b29b      	uxth	r3, r3
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	460b      	mov	r3, r1
 8007078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	4013      	ands	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800709c:	68bb      	ldr	r3, [r7, #8]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	460b      	mov	r3, r1
 80070b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	fa22 f303 	lsr.w	r3, r2, r3
 80070da:	01db      	lsls	r3, r3, #7
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4013      	ands	r3, r2
 80070f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070f8:	68bb      	ldr	r3, [r7, #8]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0301 	and.w	r3, r3, #1
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007140:	f023 0307 	bic.w	r3, r3, #7
 8007144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3714      	adds	r7, #20
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	460b      	mov	r3, r1
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	333c      	adds	r3, #60	@ 0x3c
 800717e:	3304      	adds	r3, #4
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	4a26      	ldr	r2, [pc, #152]	@ (8007220 <USB_EP0_OutStart+0xb8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d90a      	bls.n	80071a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007198:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800719c:	d101      	bne.n	80071a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e037      	b.n	8007212 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	461a      	mov	r2, r3
 80071aa:	2300      	movs	r3, #0
 80071ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d0:	f043 0318 	orr.w	r3, r3, #24
 80071d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071e4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80071e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d10f      	bne.n	8007210 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800720e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	4f54300a 	.word	0x4f54300a

08007224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800723c:	d901      	bls.n	8007242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e01b      	b.n	800727a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	daf2      	bge.n	8007230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f043 0201 	orr.w	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007266:	d901      	bls.n	800726c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e006      	b.n	800727a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d0f0      	beq.n	800725a <USB_CoreReset+0x36>

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3714      	adds	r7, #20
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
	...

08007288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007294:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007298:	f006 fcf4 	bl	800dc84 <USBD_static_malloc>
 800729c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	32b0      	adds	r2, #176	@ 0xb0
 80072ae:	2100      	movs	r1, #0
 80072b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80072b4:	2302      	movs	r3, #2
 80072b6:	e0d4      	b.n	8007462 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80072b8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f007 fdb4 	bl	800ee2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	32b0      	adds	r2, #176	@ 0xb0
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32b0      	adds	r2, #176	@ 0xb0
 80072de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7c1b      	ldrb	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d138      	bne.n	8007362 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072f0:	4b5e      	ldr	r3, [pc, #376]	@ (800746c <USBD_CDC_Init+0x1e4>)
 80072f2:	7819      	ldrb	r1, [r3, #0]
 80072f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072f8:	2202      	movs	r2, #2
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f006 fb9f 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007300:	4b5a      	ldr	r3, [pc, #360]	@ (800746c <USBD_CDC_Init+0x1e4>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 020f 	and.w	r2, r3, #15
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	440b      	add	r3, r1
 8007314:	3324      	adds	r3, #36	@ 0x24
 8007316:	2201      	movs	r2, #1
 8007318:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800731a:	4b55      	ldr	r3, [pc, #340]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 800731c:	7819      	ldrb	r1, [r3, #0]
 800731e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007322:	2202      	movs	r2, #2
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f006 fb8a 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800732a:	4b51      	ldr	r3, [pc, #324]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	f003 020f 	and.w	r2, r3, #15
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	4613      	mov	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	440b      	add	r3, r1
 800733e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007342:	2201      	movs	r2, #1
 8007344:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007346:	4b4b      	ldr	r3, [pc, #300]	@ (8007474 <USBD_CDC_Init+0x1ec>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f003 020f 	and.w	r2, r3, #15
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	440b      	add	r3, r1
 800735a:	3326      	adds	r3, #38	@ 0x26
 800735c:	2210      	movs	r2, #16
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e035      	b.n	80073ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007362:	4b42      	ldr	r3, [pc, #264]	@ (800746c <USBD_CDC_Init+0x1e4>)
 8007364:	7819      	ldrb	r1, [r3, #0]
 8007366:	2340      	movs	r3, #64	@ 0x40
 8007368:	2202      	movs	r2, #2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f006 fb67 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007370:	4b3e      	ldr	r3, [pc, #248]	@ (800746c <USBD_CDC_Init+0x1e4>)
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 020f 	and.w	r2, r3, #15
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	440b      	add	r3, r1
 8007384:	3324      	adds	r3, #36	@ 0x24
 8007386:	2201      	movs	r2, #1
 8007388:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800738a:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 800738c:	7819      	ldrb	r1, [r3, #0]
 800738e:	2340      	movs	r3, #64	@ 0x40
 8007390:	2202      	movs	r2, #2
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f006 fb53 	bl	800da3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007398:	4b35      	ldr	r3, [pc, #212]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073b0:	2201      	movs	r2, #1
 80073b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80073b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007474 <USBD_CDC_Init+0x1ec>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 020f 	and.w	r2, r3, #15
 80073bc:	6879      	ldr	r1, [r7, #4]
 80073be:	4613      	mov	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	3326      	adds	r3, #38	@ 0x26
 80073ca:	2210      	movs	r2, #16
 80073cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80073ce:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <USBD_CDC_Init+0x1ec>)
 80073d0:	7819      	ldrb	r1, [r3, #0]
 80073d2:	2308      	movs	r3, #8
 80073d4:	2203      	movs	r2, #3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f006 fb31 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80073dc:	4b25      	ldr	r3, [pc, #148]	@ (8007474 <USBD_CDC_Init+0x1ec>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	3324      	adds	r3, #36	@ 0x24
 80073f2:	2201      	movs	r2, #1
 80073f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	33b0      	adds	r3, #176	@ 0xb0
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800742c:	2302      	movs	r3, #2
 800742e:	e018      	b.n	8007462 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7c1b      	ldrb	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007438:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 800743a:	7819      	ldrb	r1, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f006 fbe8 	bl	800dc1c <USBD_LL_PrepareReceive>
 800744c:	e008      	b.n	8007460 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800744e:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <USBD_CDC_Init+0x1e8>)
 8007450:	7819      	ldrb	r1, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007458:	2340      	movs	r3, #64	@ 0x40
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f006 fbde 	bl	800dc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	200000a3 	.word	0x200000a3
 8007470:	200000a4 	.word	0x200000a4
 8007474:	200000a5 	.word	0x200000a5

08007478 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007484:	4b3a      	ldr	r3, [pc, #232]	@ (8007570 <USBD_CDC_DeInit+0xf8>)
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	4619      	mov	r1, r3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f006 fafd 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007490:	4b37      	ldr	r3, [pc, #220]	@ (8007570 <USBD_CDC_DeInit+0xf8>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 020f 	and.w	r2, r3, #15
 8007498:	6879      	ldr	r1, [r7, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	440b      	add	r3, r1
 80074a4:	3324      	adds	r3, #36	@ 0x24
 80074a6:	2200      	movs	r2, #0
 80074a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80074aa:	4b32      	ldr	r3, [pc, #200]	@ (8007574 <USBD_CDC_DeInit+0xfc>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f006 faea 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80074b6:	4b2f      	ldr	r3, [pc, #188]	@ (8007574 <USBD_CDC_DeInit+0xfc>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074ce:	2200      	movs	r2, #0
 80074d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80074d2:	4b29      	ldr	r3, [pc, #164]	@ (8007578 <USBD_CDC_DeInit+0x100>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f006 fad6 	bl	800da8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80074de:	4b26      	ldr	r3, [pc, #152]	@ (8007578 <USBD_CDC_DeInit+0x100>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	3324      	adds	r3, #36	@ 0x24
 80074f4:	2200      	movs	r2, #0
 80074f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80074f8:	4b1f      	ldr	r3, [pc, #124]	@ (8007578 <USBD_CDC_DeInit+0x100>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f003 020f 	and.w	r2, r3, #15
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	3326      	adds	r3, #38	@ 0x26
 800750e:	2200      	movs	r2, #0
 8007510:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	32b0      	adds	r2, #176	@ 0xb0
 800751c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d01f      	beq.n	8007564 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	33b0      	adds	r3, #176	@ 0xb0
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	32b0      	adds	r2, #176	@ 0xb0
 8007542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007546:	4618      	mov	r0, r3
 8007548:	f006 fbaa 	bl	800dca0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32b0      	adds	r2, #176	@ 0xb0
 8007556:	2100      	movs	r1, #0
 8007558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	200000a3 	.word	0x200000a3
 8007574:	200000a4 	.word	0x200000a4
 8007578:	200000a5 	.word	0x200000a5

0800757c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	32b0      	adds	r2, #176	@ 0xb0
 8007590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007594:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e0bf      	b.n	800772c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d050      	beq.n	800765a <USBD_CDC_Setup+0xde>
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	f040 80af 	bne.w	800771c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	88db      	ldrh	r3, [r3, #6]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d03a      	beq.n	800763c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da1b      	bge.n	8007608 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	33b0      	adds	r3, #176	@ 0xb0
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	4413      	add	r3, r2
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80075e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	88d2      	ldrh	r2, [r2, #6]
 80075ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	88db      	ldrh	r3, [r3, #6]
 80075f2:	2b07      	cmp	r3, #7
 80075f4:	bf28      	it	cs
 80075f6:	2307      	movcs	r3, #7
 80075f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	89fa      	ldrh	r2, [r7, #14]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fd53 	bl	80090ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007606:	e090      	b.n	800772a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	785a      	ldrb	r2, [r3, #1]
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	88db      	ldrh	r3, [r3, #6]
 8007616:	2b3f      	cmp	r3, #63	@ 0x3f
 8007618:	d803      	bhi.n	8007622 <USBD_CDC_Setup+0xa6>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	b2da      	uxtb	r2, r3
 8007620:	e000      	b.n	8007624 <USBD_CDC_Setup+0xa8>
 8007622:	2240      	movs	r2, #64	@ 0x40
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800762a:	6939      	ldr	r1, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007632:	461a      	mov	r2, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fd65 	bl	8009104 <USBD_CtlPrepareRx>
      break;
 800763a:	e076      	b.n	800772a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	33b0      	adds	r3, #176	@ 0xb0
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	7850      	ldrb	r0, [r2, #1]
 8007652:	2200      	movs	r2, #0
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4798      	blx	r3
      break;
 8007658:	e067      	b.n	800772a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	2b0b      	cmp	r3, #11
 8007660:	d851      	bhi.n	8007706 <USBD_CDC_Setup+0x18a>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <USBD_CDC_Setup+0xec>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	08007699 	.word	0x08007699
 800766c:	08007715 	.word	0x08007715
 8007670:	08007707 	.word	0x08007707
 8007674:	08007707 	.word	0x08007707
 8007678:	08007707 	.word	0x08007707
 800767c:	08007707 	.word	0x08007707
 8007680:	08007707 	.word	0x08007707
 8007684:	08007707 	.word	0x08007707
 8007688:	08007707 	.word	0x08007707
 800768c:	08007707 	.word	0x08007707
 8007690:	080076c3 	.word	0x080076c3
 8007694:	080076ed 	.word	0x080076ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d107      	bne.n	80076b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80076a4:	f107 030a 	add.w	r3, r7, #10
 80076a8:	2202      	movs	r2, #2
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f001 fcfd 	bl	80090ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076b2:	e032      	b.n	800771a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f001 fc7b 	bl	8008fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80076bc:	2303      	movs	r3, #3
 80076be:	75fb      	strb	r3, [r7, #23]
          break;
 80076c0:	e02b      	b.n	800771a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d107      	bne.n	80076de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80076ce:	f107 030d 	add.w	r3, r7, #13
 80076d2:	2201      	movs	r2, #1
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f001 fce8 	bl	80090ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80076dc:	e01d      	b.n	800771a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80076de:	6839      	ldr	r1, [r7, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fc66 	bl	8008fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ea:	e016      	b.n	800771a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d00f      	beq.n	8007718 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fc59 	bl	8008fb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007704:	e008      	b.n	8007718 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fc52 	bl	8008fb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800770e:	2303      	movs	r3, #3
 8007710:	75fb      	strb	r3, [r7, #23]
          break;
 8007712:	e002      	b.n	800771a <USBD_CDC_Setup+0x19e>
          break;
 8007714:	bf00      	nop
 8007716:	e008      	b.n	800772a <USBD_CDC_Setup+0x1ae>
          break;
 8007718:	bf00      	nop
      }
      break;
 800771a:	e006      	b.n	800772a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f001 fc47 	bl	8008fb2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007724:	2303      	movs	r3, #3
 8007726:	75fb      	strb	r3, [r7, #23]
      break;
 8007728:	bf00      	nop
  }

  return (uint8_t)ret;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007746:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	32b0      	adds	r2, #176	@ 0xb0
 8007752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800775a:	2303      	movs	r3, #3
 800775c:	e065      	b.n	800782a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	32b0      	adds	r2, #176	@ 0xb0
 8007768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	f003 020f 	and.w	r2, r3, #15
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	440b      	add	r3, r1
 8007780:	3318      	adds	r3, #24
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02f      	beq.n	80077e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	f003 020f 	and.w	r2, r3, #15
 800778e:	6879      	ldr	r1, [r7, #4]
 8007790:	4613      	mov	r3, r2
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	4413      	add	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	440b      	add	r3, r1
 800779a:	3318      	adds	r3, #24
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	f003 010f 	and.w	r1, r3, #15
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	460b      	mov	r3, r1
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4403      	add	r3, r0
 80077b0:	331c      	adds	r3, #28
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80077b8:	fb01 f303 	mul.w	r3, r1, r3
 80077bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d112      	bne.n	80077e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80077c2:	78fb      	ldrb	r3, [r7, #3]
 80077c4:	f003 020f 	and.w	r2, r3, #15
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	3318      	adds	r3, #24
 80077d6:	2200      	movs	r2, #0
 80077d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80077da:	78f9      	ldrb	r1, [r7, #3]
 80077dc:	2300      	movs	r3, #0
 80077de:	2200      	movs	r2, #0
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f006 f9fa 	bl	800dbda <USBD_LL_Transmit>
 80077e6:	e01f      	b.n	8007828 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	33b0      	adds	r3, #176	@ 0xb0
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d010      	beq.n	8007828 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	33b0      	adds	r3, #176	@ 0xb0
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32b0      	adds	r2, #176	@ 0xb0
 8007848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	32b0      	adds	r2, #176	@ 0xb0
 8007858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007860:	2303      	movs	r3, #3
 8007862:	e01a      	b.n	800789a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f006 f9f8 	bl	800dc5e <USBD_LL_GetRxDataSize>
 800786e:	4602      	mov	r2, r0
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	33b0      	adds	r3, #176	@ 0xb0
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007894:	4611      	mov	r1, r2
 8007896:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	32b0      	adds	r2, #176	@ 0xb0
 80078b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e024      	b.n	800790e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	33b0      	adds	r3, #176	@ 0xb0
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d019      	beq.n	800790c <USBD_CDC_EP0_RxReady+0x6a>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80078de:	2bff      	cmp	r3, #255	@ 0xff
 80078e0:	d014      	beq.n	800790c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	33b0      	adds	r3, #176	@ 0xb0
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80078fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007902:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	22ff      	movs	r2, #255	@ 0xff
 8007908:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007920:	2182      	movs	r1, #130	@ 0x82
 8007922:	4818      	ldr	r0, [pc, #96]	@ (8007984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007924:	f000 fd0f 	bl	8008346 <USBD_GetEpDesc>
 8007928:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800792a:	2101      	movs	r1, #1
 800792c:	4815      	ldr	r0, [pc, #84]	@ (8007984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800792e:	f000 fd0a 	bl	8008346 <USBD_GetEpDesc>
 8007932:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007934:	2181      	movs	r1, #129	@ 0x81
 8007936:	4813      	ldr	r0, [pc, #76]	@ (8007984 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007938:	f000 fd05 	bl	8008346 <USBD_GetEpDesc>
 800793c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2210      	movs	r2, #16
 8007948:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2200      	movs	r2, #0
 8007954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007958:	711a      	strb	r2, [r3, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d006      	beq.n	8007972 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800796c:	711a      	strb	r2, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2243      	movs	r2, #67	@ 0x43
 8007976:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007978:	4b02      	ldr	r3, [pc, #8]	@ (8007984 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	20000060 	.word	0x20000060

08007988 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007990:	2182      	movs	r1, #130	@ 0x82
 8007992:	4818      	ldr	r0, [pc, #96]	@ (80079f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007994:	f000 fcd7 	bl	8008346 <USBD_GetEpDesc>
 8007998:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800799a:	2101      	movs	r1, #1
 800799c:	4815      	ldr	r0, [pc, #84]	@ (80079f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800799e:	f000 fcd2 	bl	8008346 <USBD_GetEpDesc>
 80079a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80079a4:	2181      	movs	r1, #129	@ 0x81
 80079a6:	4813      	ldr	r0, [pc, #76]	@ (80079f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80079a8:	f000 fccd 	bl	8008346 <USBD_GetEpDesc>
 80079ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	2210      	movs	r2, #16
 80079b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2200      	movs	r2, #0
 80079c4:	711a      	strb	r2, [r3, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f042 0202 	orr.w	r2, r2, #2
 80079cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	711a      	strb	r2, [r3, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f042 0202 	orr.w	r2, r2, #2
 80079e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2243      	movs	r2, #67	@ 0x43
 80079e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80079e8:	4b02      	ldr	r3, [pc, #8]	@ (80079f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20000060 	.word	0x20000060

080079f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a00:	2182      	movs	r1, #130	@ 0x82
 8007a02:	4818      	ldr	r0, [pc, #96]	@ (8007a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a04:	f000 fc9f 	bl	8008346 <USBD_GetEpDesc>
 8007a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4815      	ldr	r0, [pc, #84]	@ (8007a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a0e:	f000 fc9a 	bl	8008346 <USBD_GetEpDesc>
 8007a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a14:	2181      	movs	r1, #129	@ 0x81
 8007a16:	4813      	ldr	r0, [pc, #76]	@ (8007a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007a18:	f000 fc95 	bl	8008346 <USBD_GetEpDesc>
 8007a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2210      	movs	r2, #16
 8007a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a38:	711a      	strb	r2, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d006      	beq.n	8007a52 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a4c:	711a      	strb	r2, [r3, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2243      	movs	r2, #67	@ 0x43
 8007a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a58:	4b02      	ldr	r3, [pc, #8]	@ (8007a64 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000060 	.word	0x20000060

08007a68 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	220a      	movs	r2, #10
 8007a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	@ (8007a84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	2000001c 	.word	0x2000001c

08007a88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e009      	b.n	8007ab0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	33b0      	adds	r3, #176	@ 0xb0
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	4413      	add	r3, r2
 8007aaa:	683a      	ldr	r2, [r7, #0]
 8007aac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	32b0      	adds	r2, #176	@ 0xb0
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e008      	b.n	8007af4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	32b0      	adds	r2, #176	@ 0xb0
 8007b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e004      	b.n	8007b2e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32b0      	adds	r2, #176	@ 0xb0
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32b0      	adds	r2, #176	@ 0xb0
 8007b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e018      	b.n	8007b9c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c1b      	ldrb	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ba4 <USBD_CDC_ReceivePacket+0x68>)
 8007b74:	7819      	ldrb	r1, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f006 f84b 	bl	800dc1c <USBD_LL_PrepareReceive>
 8007b86:	e008      	b.n	8007b9a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b88:	4b06      	ldr	r3, [pc, #24]	@ (8007ba4 <USBD_CDC_ReceivePacket+0x68>)
 8007b8a:	7819      	ldrb	r1, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b92:	2340      	movs	r3, #64	@ 0x40
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f006 f841 	bl	800dc1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	200000a4 	.word	0x200000a4

08007ba8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e01f      	b.n	8007c00 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	79fa      	ldrb	r2, [r7, #7]
 8007bf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f005 febb 	bl	800d970 <USBD_LL_Init>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e025      	b.n	8007c6c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	32ae      	adds	r2, #174	@ 0xae
 8007c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00f      	beq.n	8007c5c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	32ae      	adds	r2, #174	@ 0xae
 8007c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4c:	f107 020e 	add.w	r2, r7, #14
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	4602      	mov	r2, r0
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f005 fec3 	bl	800da08 <USBD_LL_Start>
 8007c82:	4603      	mov	r3, r0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d009      	beq.n	8007cd0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	78fa      	ldrb	r2, [r7, #3]
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	4798      	blx	r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007d00:	2303      	movs	r3, #3
 8007d02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f001 f90c 	bl	8008f3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d01a      	beq.n	8007d80 <USBD_LL_SetupStage+0x72>
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d822      	bhi.n	8007d94 <USBD_LL_SetupStage+0x86>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d002      	beq.n	8007d58 <USBD_LL_SetupStage+0x4a>
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d00a      	beq.n	8007d6c <USBD_LL_SetupStage+0x5e>
 8007d56:	e01d      	b.n	8007d94 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fb63 	bl	800842c <USBD_StdDevReq>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6a:	e020      	b.n	8007dae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fbcb 	bl	8008510 <USBD_StdItfReq>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d7e:	e016      	b.n	8007dae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc2d 	bl	80085e8 <USBD_StdEPReq>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	73fb      	strb	r3, [r7, #15]
      break;
 8007d92:	e00c      	b.n	8007dae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d9a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f005 fe90 	bl	800dac8 <USBD_LL_StallEP>
 8007da8:	4603      	mov	r3, r0
 8007daa:	73fb      	strb	r3, [r7, #15]
      break;
 8007dac:	bf00      	nop
  }

  return ret;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d16e      	bne.n	8007eae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007dd6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	f040 8098 	bne.w	8007f14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d913      	bls.n	8007e18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	1ad2      	subs	r2, r2, r3
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	68da      	ldr	r2, [r3, #12]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	4293      	cmp	r3, r2
 8007e08:	bf28      	it	cs
 8007e0a:	4613      	movcs	r3, r2
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f001 f994 	bl	800913e <USBD_CtlContinueRx>
 8007e16:	e07d      	b.n	8007f14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d014      	beq.n	8007e50 <USBD_LL_DataOutStage+0x98>
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d81d      	bhi.n	8007e66 <USBD_LL_DataOutStage+0xae>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <USBD_LL_DataOutStage+0x7c>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d003      	beq.n	8007e3a <USBD_LL_DataOutStage+0x82>
 8007e32:	e018      	b.n	8007e66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	75bb      	strb	r3, [r7, #22]
            break;
 8007e38:	e018      	b.n	8007e6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	4619      	mov	r1, r3
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fa64 	bl	8008312 <USBD_CoreFindIF>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	75bb      	strb	r3, [r7, #22]
            break;
 8007e4e:	e00d      	b.n	8007e6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 fa66 	bl	800832c <USBD_CoreFindEP>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75bb      	strb	r3, [r7, #22]
            break;
 8007e64:	e002      	b.n	8007e6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	75bb      	strb	r3, [r7, #22]
            break;
 8007e6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007e6c:	7dbb      	ldrb	r3, [r7, #22]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d119      	bne.n	8007ea6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d113      	bne.n	8007ea6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007e7e:	7dba      	ldrb	r2, [r7, #22]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	32ae      	adds	r2, #174	@ 0xae
 8007e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007e8e:	7dba      	ldrb	r2, [r7, #22]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007e96:	7dba      	ldrb	r2, [r7, #22]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	32ae      	adds	r2, #174	@ 0xae
 8007e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f001 f95a 	bl	8009160 <USBD_CtlSendStatus>
 8007eac:	e032      	b.n	8007f14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 fa37 	bl	800832c <USBD_CoreFindEP>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ec2:	7dbb      	ldrb	r3, [r7, #22]
 8007ec4:	2bff      	cmp	r3, #255	@ 0xff
 8007ec6:	d025      	beq.n	8007f14 <USBD_LL_DataOutStage+0x15c>
 8007ec8:	7dbb      	ldrb	r3, [r7, #22]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d122      	bne.n	8007f14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d117      	bne.n	8007f0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007eda:	7dba      	ldrb	r2, [r7, #22]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	32ae      	adds	r2, #174	@ 0xae
 8007ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00f      	beq.n	8007f0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007eea:	7dba      	ldrb	r2, [r7, #22]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ef2:	7dba      	ldrb	r2, [r7, #22]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	32ae      	adds	r2, #174	@ 0xae
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	7afa      	ldrb	r2, [r7, #11]
 8007f00:	4611      	mov	r1, r2
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	4798      	blx	r3
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007f10:	7dfb      	ldrb	r3, [r7, #23]
 8007f12:	e000      	b.n	8007f16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3718      	adds	r7, #24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b086      	sub	sp, #24
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	60f8      	str	r0, [r7, #12]
 8007f26:	460b      	mov	r3, r1
 8007f28:	607a      	str	r2, [r7, #4]
 8007f2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007f2c:	7afb      	ldrb	r3, [r7, #11]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d16f      	bne.n	8008012 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3314      	adds	r3, #20
 8007f36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d15a      	bne.n	8007ff8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d914      	bls.n	8007f78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	68f8      	ldr	r0, [r7, #12]
 8007f66:	f001 f8bc 	bl	80090e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2100      	movs	r1, #0
 8007f70:	68f8      	ldr	r0, [r7, #12]
 8007f72:	f005 fe53 	bl	800dc1c <USBD_LL_PrepareReceive>
 8007f76:	e03f      	b.n	8007ff8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d11c      	bne.n	8007fbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	685a      	ldr	r2, [r3, #4]
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d316      	bcc.n	8007fbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d20f      	bcs.n	8007fbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f001 f89d 	bl	80090e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f005 fe30 	bl	800dc1c <USBD_LL_PrepareReceive>
 8007fbc:	e01c      	b.n	8007ff8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d10f      	bne.n	8007fea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fea:	2180      	movs	r1, #128	@ 0x80
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f005 fd6b 	bl	800dac8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f001 f8c7 	bl	8009186 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d03a      	beq.n	8008078 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff fe42 	bl	8007c8c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008010:	e032      	b.n	8008078 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008018:	b2db      	uxtb	r3, r3
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f985 	bl	800832c <USBD_CoreFindEP>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2bff      	cmp	r3, #255	@ 0xff
 800802a:	d025      	beq.n	8008078 <USBD_LL_DataInStage+0x15a>
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d122      	bne.n	8008078 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b03      	cmp	r3, #3
 800803c:	d11c      	bne.n	8008078 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800803e:	7dfa      	ldrb	r2, [r7, #23]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	32ae      	adds	r2, #174	@ 0xae
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d014      	beq.n	8008078 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800804e:	7dfa      	ldrb	r2, [r7, #23]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008056:	7dfa      	ldrb	r2, [r7, #23]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	32ae      	adds	r2, #174	@ 0xae
 800805c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	7afa      	ldrb	r2, [r7, #11]
 8008064:	4611      	mov	r1, r2
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	4798      	blx	r3
 800806a:	4603      	mov	r3, r0
 800806c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800806e:	7dbb      	ldrb	r3, [r7, #22]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008074:	7dbb      	ldrb	r3, [r7, #22]
 8008076:	e000      	b.n	800807a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d014      	beq.n	80080e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00e      	beq.n	80080e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6852      	ldr	r2, [r2, #4]
 80080d6:	b2d2      	uxtb	r2, r2
 80080d8:	4611      	mov	r1, r2
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	4798      	blx	r3
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080e8:	2340      	movs	r3, #64	@ 0x40
 80080ea:	2200      	movs	r2, #0
 80080ec:	2100      	movs	r1, #0
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f005 fca5 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2240      	movs	r2, #64	@ 0x40
 8008100:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008104:	2340      	movs	r3, #64	@ 0x40
 8008106:	2200      	movs	r2, #0
 8008108:	2180      	movs	r1, #128	@ 0x80
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f005 fc97 	bl	800da3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2240      	movs	r2, #64	@ 0x40
 800811a:	621a      	str	r2, [r3, #32]

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	460b      	mov	r3, r1
 8008130:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b04      	cmp	r3, #4
 8008158:	d006      	beq.n	8008168 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008160:	b2da      	uxtb	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2204      	movs	r2, #4
 800816c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800817e:	b480      	push	{r7}
 8008180:	b083      	sub	sp, #12
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b04      	cmp	r3, #4
 8008190:	d106      	bne.n	80081a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008198:	b2da      	uxtb	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d110      	bne.n	80081e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00b      	beq.n	80081e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32ae      	adds	r2, #174	@ 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800820c:	2303      	movs	r3, #3
 800820e:	e01c      	b.n	800824a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008216:	b2db      	uxtb	r3, r3
 8008218:	2b03      	cmp	r3, #3
 800821a:	d115      	bne.n	8008248 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	32ae      	adds	r2, #174	@ 0xae
 8008226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00b      	beq.n	8008248 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32ae      	adds	r2, #174	@ 0xae
 800823a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	4611      	mov	r1, r2
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	460b      	mov	r3, r1
 800825c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	32ae      	adds	r2, #174	@ 0xae
 8008268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	e01c      	b.n	80082ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b03      	cmp	r3, #3
 800827e:	d115      	bne.n	80082ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32ae      	adds	r2, #174	@ 0xae
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32ae      	adds	r2, #174	@ 0xae
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a4:	78fa      	ldrb	r2, [r7, #3]
 80082a6:	4611      	mov	r1, r2
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00e      	beq.n	8008308 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6852      	ldr	r2, [r2, #4]
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	4611      	mov	r1, r2
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800831e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008320:	4618      	mov	r0, r3
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008338:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b086      	sub	sp, #24
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	885b      	ldrh	r3, [r3, #2]
 8008362:	b29b      	uxth	r3, r3
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	7812      	ldrb	r2, [r2, #0]
 8008368:	4293      	cmp	r3, r2
 800836a:	d91f      	bls.n	80083ac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008372:	e013      	b.n	800839c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008374:	f107 030a 	add.w	r3, r7, #10
 8008378:	4619      	mov	r1, r3
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	f000 f81b 	bl	80083b6 <USBD_GetNextDesc>
 8008380:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	2b05      	cmp	r3, #5
 8008388:	d108      	bne.n	800839c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	789b      	ldrb	r3, [r3, #2]
 8008392:	78fa      	ldrb	r2, [r7, #3]
 8008394:	429a      	cmp	r2, r3
 8008396:	d008      	beq.n	80083aa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	885b      	ldrh	r3, [r3, #2]
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	897b      	ldrh	r3, [r7, #10]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d8e5      	bhi.n	8008374 <USBD_GetEpDesc+0x2e>
 80083a8:	e000      	b.n	80083ac <USBD_GetEpDesc+0x66>
          break;
 80083aa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80083ac:	693b      	ldr	r3, [r7, #16]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	461a      	mov	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083ee:	b480      	push	{r7}
 80083f0:	b087      	sub	sp, #28
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800840c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	b21a      	sxth	r2, r3
 8008414:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008418:	4313      	orrs	r3, r2
 800841a:	b21b      	sxth	r3, r3
 800841c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800841e:	89fb      	ldrh	r3, [r7, #14]
}
 8008420:	4618      	mov	r0, r3
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008442:	2b40      	cmp	r3, #64	@ 0x40
 8008444:	d005      	beq.n	8008452 <USBD_StdDevReq+0x26>
 8008446:	2b40      	cmp	r3, #64	@ 0x40
 8008448:	d857      	bhi.n	80084fa <USBD_StdDevReq+0xce>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <USBD_StdDevReq+0x42>
 800844e:	2b20      	cmp	r3, #32
 8008450:	d153      	bne.n	80084fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	32ae      	adds	r2, #174	@ 0xae
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	4798      	blx	r3
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e04a      	b.n	8008504 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b09      	cmp	r3, #9
 8008474:	d83b      	bhi.n	80084ee <USBD_StdDevReq+0xc2>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <USBD_StdDevReq+0x50>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084d1 	.word	0x080084d1
 8008480:	080084e5 	.word	0x080084e5
 8008484:	080084ef 	.word	0x080084ef
 8008488:	080084db 	.word	0x080084db
 800848c:	080084ef 	.word	0x080084ef
 8008490:	080084af 	.word	0x080084af
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084ef 	.word	0x080084ef
 800849c:	080084c7 	.word	0x080084c7
 80084a0:	080084b9 	.word	0x080084b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa3c 	bl	8008924 <USBD_GetDescriptor>
          break;
 80084ac:	e024      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fba1 	bl	8008bf8 <USBD_SetAddress>
          break;
 80084b6:	e01f      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fbe0 	bl	8008c80 <USBD_SetConfig>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73fb      	strb	r3, [r7, #15]
          break;
 80084c4:	e018      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80084c6:	6839      	ldr	r1, [r7, #0]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fc83 	bl	8008dd4 <USBD_GetConfig>
          break;
 80084ce:	e013      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084d0:	6839      	ldr	r1, [r7, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fcb4 	bl	8008e40 <USBD_GetStatus>
          break;
 80084d8:	e00e      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fce3 	bl	8008ea8 <USBD_SetFeature>
          break;
 80084e2:	e009      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084e4:	6839      	ldr	r1, [r7, #0]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fd07 	bl	8008efa <USBD_ClrFeature>
          break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fd5e 	bl	8008fb2 <USBD_CtlError>
          break;
 80084f6:	bf00      	nop
      }
      break;
 80084f8:	e004      	b.n	8008504 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fd58 	bl	8008fb2 <USBD_CtlError>
      break;
 8008502:	bf00      	nop
  }

  return ret;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop

08008510 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	d005      	beq.n	8008536 <USBD_StdItfReq+0x26>
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d852      	bhi.n	80085d4 <USBD_StdItfReq+0xc4>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d001      	beq.n	8008536 <USBD_StdItfReq+0x26>
 8008532:	2b20      	cmp	r3, #32
 8008534:	d14e      	bne.n	80085d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800853c:	b2db      	uxtb	r3, r3
 800853e:	3b01      	subs	r3, #1
 8008540:	2b02      	cmp	r3, #2
 8008542:	d840      	bhi.n	80085c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	889b      	ldrh	r3, [r3, #4]
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b01      	cmp	r3, #1
 800854c:	d836      	bhi.n	80085bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	889b      	ldrh	r3, [r3, #4]
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4619      	mov	r1, r3
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7ff fedb 	bl	8008312 <USBD_CoreFindIF>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2bff      	cmp	r3, #255	@ 0xff
 8008564:	d01d      	beq.n	80085a2 <USBD_StdItfReq+0x92>
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d11a      	bne.n	80085a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800856c:	7bba      	ldrb	r2, [r7, #14]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32ae      	adds	r2, #174	@ 0xae
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00f      	beq.n	800859c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800857c:	7bba      	ldrb	r2, [r7, #14]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008584:	7bba      	ldrb	r2, [r7, #14]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	32ae      	adds	r2, #174	@ 0xae
 800858a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
 8008596:	4603      	mov	r3, r0
 8008598:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800859a:	e004      	b.n	80085a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80085a0:	e001      	b.n	80085a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80085a2:	2303      	movs	r3, #3
 80085a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	88db      	ldrh	r3, [r3, #6]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d110      	bne.n	80085d0 <USBD_StdItfReq+0xc0>
 80085ae:	7bfb      	ldrb	r3, [r7, #15]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f000 fdd3 	bl	8009160 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80085ba:	e009      	b.n	80085d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fcf7 	bl	8008fb2 <USBD_CtlError>
          break;
 80085c4:	e004      	b.n	80085d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80085c6:	6839      	ldr	r1, [r7, #0]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fcf2 	bl	8008fb2 <USBD_CtlError>
          break;
 80085ce:	e000      	b.n	80085d2 <USBD_StdItfReq+0xc2>
          break;
 80085d0:	bf00      	nop
      }
      break;
 80085d2:	e004      	b.n	80085de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fceb 	bl	8008fb2 <USBD_CtlError>
      break;
 80085dc:	bf00      	nop
  }

  return ret;
 80085de:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	889b      	ldrh	r3, [r3, #4]
 80085fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008604:	2b40      	cmp	r3, #64	@ 0x40
 8008606:	d007      	beq.n	8008618 <USBD_StdEPReq+0x30>
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	f200 817f 	bhi.w	800890c <USBD_StdEPReq+0x324>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d02a      	beq.n	8008668 <USBD_StdEPReq+0x80>
 8008612:	2b20      	cmp	r3, #32
 8008614:	f040 817a 	bne.w	800890c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	4619      	mov	r1, r3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7ff fe85 	bl	800832c <USBD_CoreFindEP>
 8008622:	4603      	mov	r3, r0
 8008624:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008626:	7b7b      	ldrb	r3, [r7, #13]
 8008628:	2bff      	cmp	r3, #255	@ 0xff
 800862a:	f000 8174 	beq.w	8008916 <USBD_StdEPReq+0x32e>
 800862e:	7b7b      	ldrb	r3, [r7, #13]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 8170 	bne.w	8008916 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008636:	7b7a      	ldrb	r2, [r7, #13]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800863e:	7b7a      	ldrb	r2, [r7, #13]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	32ae      	adds	r2, #174	@ 0xae
 8008644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 8163 	beq.w	8008916 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008650:	7b7a      	ldrb	r2, [r7, #13]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32ae      	adds	r2, #174	@ 0xae
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008666:	e156      	b.n	8008916 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b03      	cmp	r3, #3
 800866e:	d008      	beq.n	8008682 <USBD_StdEPReq+0x9a>
 8008670:	2b03      	cmp	r3, #3
 8008672:	f300 8145 	bgt.w	8008900 <USBD_StdEPReq+0x318>
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 809b 	beq.w	80087b2 <USBD_StdEPReq+0x1ca>
 800867c:	2b01      	cmp	r3, #1
 800867e:	d03c      	beq.n	80086fa <USBD_StdEPReq+0x112>
 8008680:	e13e      	b.n	8008900 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b02      	cmp	r3, #2
 800868c:	d002      	beq.n	8008694 <USBD_StdEPReq+0xac>
 800868e:	2b03      	cmp	r3, #3
 8008690:	d016      	beq.n	80086c0 <USBD_StdEPReq+0xd8>
 8008692:	e02c      	b.n	80086ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00d      	beq.n	80086b6 <USBD_StdEPReq+0xce>
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b80      	cmp	r3, #128	@ 0x80
 800869e:	d00a      	beq.n	80086b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f005 fa0f 	bl	800dac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80086aa:	2180      	movs	r1, #128	@ 0x80
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f005 fa0b 	bl	800dac8 <USBD_LL_StallEP>
 80086b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80086b4:	e020      	b.n	80086f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fc7a 	bl	8008fb2 <USBD_CtlError>
              break;
 80086be:	e01b      	b.n	80086f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	885b      	ldrh	r3, [r3, #2]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10e      	bne.n	80086e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00b      	beq.n	80086e6 <USBD_StdEPReq+0xfe>
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b80      	cmp	r3, #128	@ 0x80
 80086d2:	d008      	beq.n	80086e6 <USBD_StdEPReq+0xfe>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d104      	bne.n	80086e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f005 f9f1 	bl	800dac8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fd3a 	bl	8009160 <USBD_CtlSendStatus>

              break;
 80086ec:	e004      	b.n	80086f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fc5e 	bl	8008fb2 <USBD_CtlError>
              break;
 80086f6:	bf00      	nop
          }
          break;
 80086f8:	e107      	b.n	800890a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d002      	beq.n	800870c <USBD_StdEPReq+0x124>
 8008706:	2b03      	cmp	r3, #3
 8008708:	d016      	beq.n	8008738 <USBD_StdEPReq+0x150>
 800870a:	e04b      	b.n	80087a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00d      	beq.n	800872e <USBD_StdEPReq+0x146>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	2b80      	cmp	r3, #128	@ 0x80
 8008716:	d00a      	beq.n	800872e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f005 f9d3 	bl	800dac8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008722:	2180      	movs	r1, #128	@ 0x80
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f005 f9cf 	bl	800dac8 <USBD_LL_StallEP>
 800872a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800872c:	e040      	b.n	80087b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fc3e 	bl	8008fb2 <USBD_CtlError>
              break;
 8008736:	e03b      	b.n	80087b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d136      	bne.n	80087ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f005 f9d9 	bl	800db06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fd03 	bl	8009160 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	4619      	mov	r1, r3
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fde4 	bl	800832c <USBD_CoreFindEP>
 8008764:	4603      	mov	r3, r0
 8008766:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008768:	7b7b      	ldrb	r3, [r7, #13]
 800876a:	2bff      	cmp	r3, #255	@ 0xff
 800876c:	d01f      	beq.n	80087ae <USBD_StdEPReq+0x1c6>
 800876e:	7b7b      	ldrb	r3, [r7, #13]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d11c      	bne.n	80087ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008774:	7b7a      	ldrb	r2, [r7, #13]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800877c:	7b7a      	ldrb	r2, [r7, #13]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32ae      	adds	r2, #174	@ 0xae
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d010      	beq.n	80087ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800878c:	7b7a      	ldrb	r2, [r7, #13]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	32ae      	adds	r2, #174	@ 0xae
 8008792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80087a2:	e004      	b.n	80087ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fc03 	bl	8008fb2 <USBD_CtlError>
              break;
 80087ac:	e000      	b.n	80087b0 <USBD_StdEPReq+0x1c8>
              break;
 80087ae:	bf00      	nop
          }
          break;
 80087b0:	e0ab      	b.n	800890a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d002      	beq.n	80087c4 <USBD_StdEPReq+0x1dc>
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d032      	beq.n	8008828 <USBD_StdEPReq+0x240>
 80087c2:	e097      	b.n	80088f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <USBD_StdEPReq+0x1f2>
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b80      	cmp	r3, #128	@ 0x80
 80087ce:	d004      	beq.n	80087da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fbed 	bl	8008fb2 <USBD_CtlError>
                break;
 80087d8:	e091      	b.n	80088fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	da0b      	bge.n	80087fa <USBD_StdEPReq+0x212>
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087e8:	4613      	mov	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	3310      	adds	r3, #16
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	3304      	adds	r3, #4
 80087f8:	e00b      	b.n	8008812 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008800:	4613      	mov	r3, r2
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	009b      	lsls	r3, r3, #2
 8008808:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	4413      	add	r3, r2
 8008810:	3304      	adds	r3, #4
 8008812:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	2202      	movs	r2, #2
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fc43 	bl	80090ac <USBD_CtlSendData>
              break;
 8008826:	e06a      	b.n	80088fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800882c:	2b00      	cmp	r3, #0
 800882e:	da11      	bge.n	8008854 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	f003 020f 	and.w	r2, r3, #15
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3324      	adds	r3, #36	@ 0x24
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d117      	bne.n	800887a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fbb0 	bl	8008fb2 <USBD_CtlError>
                  break;
 8008852:	e054      	b.n	80088fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008854:	7bbb      	ldrb	r3, [r7, #14]
 8008856:	f003 020f 	and.w	r2, r3, #15
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fb9d 	bl	8008fb2 <USBD_CtlError>
                  break;
 8008878:	e041      	b.n	80088fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800887a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800887e:	2b00      	cmp	r3, #0
 8008880:	da0b      	bge.n	800889a <USBD_StdEPReq+0x2b2>
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008888:	4613      	mov	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	3310      	adds	r3, #16
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	e00b      	b.n	80088b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088a0:	4613      	mov	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	4413      	add	r3, r2
 80088b0:	3304      	adds	r3, #4
 80088b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <USBD_StdEPReq+0x2d8>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	@ 0x80
 80088be:	d103      	bne.n	80088c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	e00e      	b.n	80088e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f005 f939 	bl	800db44 <USBD_LL_IsStallEP>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	2201      	movs	r2, #1
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	e002      	b.n	80088e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2202      	movs	r2, #2
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fbdd 	bl	80090ac <USBD_CtlSendData>
              break;
 80088f2:	e004      	b.n	80088fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fb5b 	bl	8008fb2 <USBD_CtlError>
              break;
 80088fc:	bf00      	nop
          }
          break;
 80088fe:	e004      	b.n	800890a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008900:	6839      	ldr	r1, [r7, #0]
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 fb55 	bl	8008fb2 <USBD_CtlError>
          break;
 8008908:	bf00      	nop
      }
      break;
 800890a:	e005      	b.n	8008918 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fb4f 	bl	8008fb2 <USBD_CtlError>
      break;
 8008914:	e000      	b.n	8008918 <USBD_StdEPReq+0x330>
      break;
 8008916:	bf00      	nop
  }

  return ret;
 8008918:	7bfb      	ldrb	r3, [r7, #15]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800892e:	2300      	movs	r3, #0
 8008930:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	885b      	ldrh	r3, [r3, #2]
 800893e:	0a1b      	lsrs	r3, r3, #8
 8008940:	b29b      	uxth	r3, r3
 8008942:	3b01      	subs	r3, #1
 8008944:	2b06      	cmp	r3, #6
 8008946:	f200 8128 	bhi.w	8008b9a <USBD_GetDescriptor+0x276>
 800894a:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <USBD_GetDescriptor+0x2c>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	0800896d 	.word	0x0800896d
 8008954:	08008985 	.word	0x08008985
 8008958:	080089c5 	.word	0x080089c5
 800895c:	08008b9b 	.word	0x08008b9b
 8008960:	08008b9b 	.word	0x08008b9b
 8008964:	08008b3b 	.word	0x08008b3b
 8008968:	08008b67 	.word	0x08008b67
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	7c12      	ldrb	r2, [r2, #16]
 8008978:	f107 0108 	add.w	r1, r7, #8
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
 8008980:	60f8      	str	r0, [r7, #12]
      break;
 8008982:	e112      	b.n	8008baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	7c1b      	ldrb	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10d      	bne.n	80089a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008994:	f107 0208 	add.w	r2, r7, #8
 8008998:	4610      	mov	r0, r2
 800899a:	4798      	blx	r3
 800899c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3301      	adds	r3, #1
 80089a2:	2202      	movs	r2, #2
 80089a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80089a6:	e100      	b.n	8008baa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	f107 0208 	add.w	r2, r7, #8
 80089b4:	4610      	mov	r0, r2
 80089b6:	4798      	blx	r3
 80089b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3301      	adds	r3, #1
 80089be:	2202      	movs	r2, #2
 80089c0:	701a      	strb	r2, [r3, #0]
      break;
 80089c2:	e0f2      	b.n	8008baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	885b      	ldrh	r3, [r3, #2]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	f200 80ac 	bhi.w	8008b28 <USBD_GetDescriptor+0x204>
 80089d0:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <USBD_GetDescriptor+0xb4>)
 80089d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d6:	bf00      	nop
 80089d8:	080089f1 	.word	0x080089f1
 80089dc:	08008a25 	.word	0x08008a25
 80089e0:	08008a59 	.word	0x08008a59
 80089e4:	08008a8d 	.word	0x08008a8d
 80089e8:	08008ac1 	.word	0x08008ac1
 80089ec:	08008af5 	.word	0x08008af5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	7c12      	ldrb	r2, [r2, #16]
 8008a08:	f107 0108 	add.w	r1, r7, #8
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4798      	blx	r3
 8008a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a12:	e091      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 facb 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	72fb      	strb	r3, [r7, #11]
          break;
 8008a22:	e089      	b.n	8008b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	7c12      	ldrb	r2, [r2, #16]
 8008a3c:	f107 0108 	add.w	r1, r7, #8
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
 8008a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a46:	e077      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fab1 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008a50:	7afb      	ldrb	r3, [r7, #11]
 8008a52:	3301      	adds	r3, #1
 8008a54:	72fb      	strb	r3, [r7, #11]
          break;
 8008a56:	e06f      	b.n	8008b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	7c12      	ldrb	r2, [r2, #16]
 8008a70:	f107 0108 	add.w	r1, r7, #8
 8008a74:	4610      	mov	r0, r2
 8008a76:	4798      	blx	r3
 8008a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a7a:	e05d      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a7c:	6839      	ldr	r1, [r7, #0]
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa97 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	3301      	adds	r3, #1
 8008a88:	72fb      	strb	r3, [r7, #11]
          break;
 8008a8a:	e055      	b.n	8008b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	7c12      	ldrb	r2, [r2, #16]
 8008aa4:	f107 0108 	add.w	r1, r7, #8
 8008aa8:	4610      	mov	r0, r2
 8008aaa:	4798      	blx	r3
 8008aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008aae:	e043      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fa7d 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008ab8:	7afb      	ldrb	r3, [r7, #11]
 8008aba:	3301      	adds	r3, #1
 8008abc:	72fb      	strb	r3, [r7, #11]
          break;
 8008abe:	e03b      	b.n	8008b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00b      	beq.n	8008ae4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	7c12      	ldrb	r2, [r2, #16]
 8008ad8:	f107 0108 	add.w	r1, r7, #8
 8008adc:	4610      	mov	r0, r2
 8008ade:	4798      	blx	r3
 8008ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ae2:	e029      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fa63 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	3301      	adds	r3, #1
 8008af0:	72fb      	strb	r3, [r7, #11]
          break;
 8008af2:	e021      	b.n	8008b38 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	7c12      	ldrb	r2, [r2, #16]
 8008b0c:	f107 0108 	add.w	r1, r7, #8
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3
 8008b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b16:	e00f      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa49 	bl	8008fb2 <USBD_CtlError>
            err++;
 8008b20:	7afb      	ldrb	r3, [r7, #11]
 8008b22:	3301      	adds	r3, #1
 8008b24:	72fb      	strb	r3, [r7, #11]
          break;
 8008b26:	e007      	b.n	8008b38 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fa41 	bl	8008fb2 <USBD_CtlError>
          err++;
 8008b30:	7afb      	ldrb	r3, [r7, #11]
 8008b32:	3301      	adds	r3, #1
 8008b34:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008b36:	bf00      	nop
      }
      break;
 8008b38:	e037      	b.n	8008baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7c1b      	ldrb	r3, [r3, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d109      	bne.n	8008b56 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b4a:	f107 0208 	add.w	r2, r7, #8
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4798      	blx	r3
 8008b52:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b54:	e029      	b.n	8008baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fa2a 	bl	8008fb2 <USBD_CtlError>
        err++;
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	3301      	adds	r3, #1
 8008b62:	72fb      	strb	r3, [r7, #11]
      break;
 8008b64:	e021      	b.n	8008baa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7c1b      	ldrb	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d10d      	bne.n	8008b8a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b76:	f107 0208 	add.w	r2, r7, #8
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	4798      	blx	r3
 8008b7e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	3301      	adds	r3, #1
 8008b84:	2207      	movs	r2, #7
 8008b86:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008b88:	e00f      	b.n	8008baa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fa10 	bl	8008fb2 <USBD_CtlError>
        err++;
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	3301      	adds	r3, #1
 8008b96:	72fb      	strb	r3, [r7, #11]
      break;
 8008b98:	e007      	b.n	8008baa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008b9a:	6839      	ldr	r1, [r7, #0]
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 fa08 	bl	8008fb2 <USBD_CtlError>
      err++;
 8008ba2:	7afb      	ldrb	r3, [r7, #11]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ba8:	bf00      	nop
  }

  if (err != 0U)
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d11e      	bne.n	8008bee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	88db      	ldrh	r3, [r3, #6]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d016      	beq.n	8008be6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008bb8:	893b      	ldrh	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	88da      	ldrh	r2, [r3, #6]
 8008bc2:	893b      	ldrh	r3, [r7, #8]
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	bf28      	it	cs
 8008bc8:	4613      	movcs	r3, r2
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008bce:	893b      	ldrh	r3, [r7, #8]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa69 	bl	80090ac <USBD_CtlSendData>
 8008bda:	e009      	b.n	8008bf0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f9e7 	bl	8008fb2 <USBD_CtlError>
 8008be4:	e004      	b.n	8008bf0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 faba 	bl	8009160 <USBD_CtlSendStatus>
 8008bec:	e000      	b.n	8008bf0 <USBD_GetDescriptor+0x2cc>
    return;
 8008bee:	bf00      	nop
  }
}
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop

08008bf8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	889b      	ldrh	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d131      	bne.n	8008c6e <USBD_SetAddress+0x76>
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	88db      	ldrh	r3, [r3, #6]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d12d      	bne.n	8008c6e <USBD_SetAddress+0x76>
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	885b      	ldrh	r3, [r3, #2]
 8008c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c18:	d829      	bhi.n	8008c6e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d104      	bne.n	8008c3c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 f9bc 	bl	8008fb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	e01d      	b.n	8008c78 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7bfa      	ldrb	r2, [r7, #15]
 8008c40:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f004 ffa7 	bl	800db9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 fa86 	bl	8009160 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c62:	e009      	b.n	8008c78 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6c:	e004      	b.n	8008c78 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f99e 	bl	8008fb2 <USBD_CtlError>
  }
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	885b      	ldrh	r3, [r3, #2]
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	4b4e      	ldr	r3, [pc, #312]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008c96:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008c98:	4b4d      	ldr	r3, [pc, #308]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d905      	bls.n	8008cac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f985 	bl	8008fb2 <USBD_CtlError>
    return USBD_FAIL;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e08c      	b.n	8008dc6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d002      	beq.n	8008cbe <USBD_SetConfig+0x3e>
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d029      	beq.n	8008d10 <USBD_SetConfig+0x90>
 8008cbc:	e075      	b.n	8008daa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008cbe:	4b44      	ldr	r3, [pc, #272]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d020      	beq.n	8008d08 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008cc6:	4b42      	ldr	r3, [pc, #264]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7fe ffe3 	bl	8007ca2 <USBD_SetClassConfig>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d008      	beq.n	8008cf8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f962 	bl	8008fb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008cf6:	e065      	b.n	8008dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fa31 	bl	8009160 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2203      	movs	r2, #3
 8008d02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d06:	e05d      	b.n	8008dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa29 	bl	8009160 <USBD_CtlSendStatus>
      break;
 8008d0e:	e059      	b.n	8008dc4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008d10:	4b2f      	ldr	r3, [pc, #188]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d112      	bne.n	8008d3e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008d20:	4b2b      	ldr	r3, [pc, #172]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d2a:	4b29      	ldr	r3, [pc, #164]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7fe ffd2 	bl	8007cda <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fa12 	bl	8009160 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008d3c:	e042      	b.n	8008dc4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008d3e:	4b24      	ldr	r3, [pc, #144]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d02a      	beq.n	8008da2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7fe ffc0 	bl	8007cda <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008d64:	4b1a      	ldr	r3, [pc, #104]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7fe ff99 	bl	8007ca2 <USBD_SetClassConfig>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00f      	beq.n	8008d9a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f918 	bl	8008fb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	4619      	mov	r1, r3
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fe ffa5 	bl	8007cda <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008d98:	e014      	b.n	8008dc4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f9e0 	bl	8009160 <USBD_CtlSendStatus>
      break;
 8008da0:	e010      	b.n	8008dc4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9dc 	bl	8009160 <USBD_CtlSendStatus>
      break;
 8008da8:	e00c      	b.n	8008dc4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f900 	bl	8008fb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008db2:	4b07      	ldr	r3, [pc, #28]	@ (8008dd0 <USBD_SetConfig+0x150>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7fe ff8e 	bl	8007cda <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc2:	bf00      	nop
  }

  return ret;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000524 	.word	0x20000524

08008dd4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	88db      	ldrh	r3, [r3, #6]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d004      	beq.n	8008df0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008de6:	6839      	ldr	r1, [r7, #0]
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f8e2 	bl	8008fb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008dee:	e023      	b.n	8008e38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	dc02      	bgt.n	8008e02 <USBD_GetConfig+0x2e>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dc03      	bgt.n	8008e08 <USBD_GetConfig+0x34>
 8008e00:	e015      	b.n	8008e2e <USBD_GetConfig+0x5a>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d00b      	beq.n	8008e1e <USBD_GetConfig+0x4a>
 8008e06:	e012      	b.n	8008e2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3308      	adds	r3, #8
 8008e12:	2201      	movs	r2, #1
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f948 	bl	80090ac <USBD_CtlSendData>
        break;
 8008e1c:	e00c      	b.n	8008e38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	3304      	adds	r3, #4
 8008e22:	2201      	movs	r2, #1
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f940 	bl	80090ac <USBD_CtlSendData>
        break;
 8008e2c:	e004      	b.n	8008e38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f8be 	bl	8008fb2 <USBD_CtlError>
        break;
 8008e36:	bf00      	nop
}
 8008e38:	bf00      	nop
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d81e      	bhi.n	8008e96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	88db      	ldrh	r3, [r3, #6]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d004      	beq.n	8008e6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f8a5 	bl	8008fb2 <USBD_CtlError>
        break;
 8008e68:	e01a      	b.n	8008ea0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	f043 0202 	orr.w	r2, r3, #2
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f90c 	bl	80090ac <USBD_CtlSendData>
      break;
 8008e94:	e004      	b.n	8008ea0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f88a 	bl	8008fb2 <USBD_CtlError>
      break;
 8008e9e:	bf00      	nop
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d107      	bne.n	8008eca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f94c 	bl	8009160 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008ec8:	e013      	b.n	8008ef2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	885b      	ldrh	r3, [r3, #2]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d10b      	bne.n	8008eea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	889b      	ldrh	r3, [r3, #4]
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f93c 	bl	8009160 <USBD_CtlSendStatus>
}
 8008ee8:	e003      	b.n	8008ef2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008eea:	6839      	ldr	r1, [r7, #0]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f860 	bl	8008fb2 <USBD_CtlError>
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d80b      	bhi.n	8008f2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	885b      	ldrh	r3, [r3, #2]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10c      	bne.n	8008f34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f91c 	bl	8009160 <USBD_CtlSendStatus>
      }
      break;
 8008f28:	e004      	b.n	8008f34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008f2a:	6839      	ldr	r1, [r7, #0]
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f840 	bl	8008fb2 <USBD_CtlError>
      break;
 8008f32:	e000      	b.n	8008f36 <USBD_ClrFeature+0x3c>
      break;
 8008f34:	bf00      	nop
  }
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	781a      	ldrb	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	3301      	adds	r3, #1
 8008f58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3301      	adds	r3, #1
 8008f66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f7ff fa40 	bl	80083ee <SWAPBYTE>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f7ff fa33 	bl	80083ee <SWAPBYTE>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f7ff fa26 	bl	80083ee <SWAPBYTE>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	80da      	strh	r2, [r3, #6]
}
 8008faa:	bf00      	nop
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
 8008fba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fbc:	2180      	movs	r1, #128	@ 0x80
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f004 fd82 	bl	800dac8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f004 fd7e 	bl	800dac8 <USBD_LL_StallEP>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d042      	beq.n	8009070 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008fee:	6938      	ldr	r0, [r7, #16]
 8008ff0:	f000 f842 	bl	8009078 <USBD_GetLen>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ffe:	d808      	bhi.n	8009012 <USBD_GetString+0x3e>
 8009000:	6938      	ldr	r0, [r7, #16]
 8009002:	f000 f839 	bl	8009078 <USBD_GetLen>
 8009006:	4603      	mov	r3, r0
 8009008:	3301      	adds	r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	e001      	b.n	8009016 <USBD_GetString+0x42>
 8009012:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	4413      	add	r3, r2
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	701a      	strb	r2, [r3, #0]
  idx++;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
 8009028:	3301      	adds	r3, #1
 800902a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	2203      	movs	r2, #3
 8009034:	701a      	strb	r2, [r3, #0]
  idx++;
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	3301      	adds	r3, #1
 800903a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800903c:	e013      	b.n	8009066 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800903e:	7dfb      	ldrb	r3, [r7, #23]
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	4413      	add	r3, r2
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3301      	adds	r3, #1
 800904e:	613b      	str	r3, [r7, #16]
    idx++;
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	3301      	adds	r3, #1
 8009054:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	4413      	add	r3, r2
 800905c:	2200      	movs	r2, #0
 800905e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	3301      	adds	r3, #1
 8009064:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1e7      	bne.n	800903e <USBD_GetString+0x6a>
 800906e:	e000      	b.n	8009072 <USBD_GetString+0x9e>
    return;
 8009070:	bf00      	nop
  }
}
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009088:	e005      	b.n	8009096 <USBD_GetLen+0x1e>
  {
    len++;
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	3301      	adds	r3, #1
 800908e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3301      	adds	r3, #1
 8009094:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f5      	bne.n	800908a <USBD_GetLen+0x12>
  }

  return len;
 800909e:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	687a      	ldr	r2, [r7, #4]
 80090ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f004 fd81 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b084      	sub	sp, #16
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	2100      	movs	r1, #0
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f004 fd70 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2203      	movs	r2, #3
 8009114:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	2100      	movs	r1, #0
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f004 fd74 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	2100      	movs	r1, #0
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f004 fd63 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2204      	movs	r2, #4
 800916c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009170:	2300      	movs	r3, #0
 8009172:	2200      	movs	r2, #0
 8009174:	2100      	movs	r1, #0
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f004 fd2f 	bl	800dbda <USBD_LL_Transmit>

  return USBD_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3708      	adds	r7, #8
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b082      	sub	sp, #8
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2205      	movs	r2, #5
 8009192:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009196:	2300      	movs	r3, #0
 8009198:	2200      	movs	r2, #0
 800919a:	2100      	movs	r1, #0
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f004 fd3d 	bl	800dc1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <QuadcopterModel_initialize>:
  _rtXdot->Integrator1_CSTATE[2] = rtDW.Integrator[2];
}

/* Model initialize function */
void QuadcopterModel_initialize(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* Registration code */
  {
    /* Setup solver object */
    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);
 80091b0:	4b83      	ldr	r3, [pc, #524]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091b2:	4a83      	ldr	r2, [pc, #524]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091b4:	f503 736a 	add.w	r3, r3, #936	@ 0x3a8
 80091b8:	60d3      	str	r3, [r2, #12]
    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));
 80091ba:	4b81      	ldr	r3, [pc, #516]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091bc:	4a80      	ldr	r2, [pc, #512]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091be:	f503 736b 	add.w	r3, r3, #940	@ 0x3ac
 80091c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);
 80091c6:	4b7e      	ldr	r3, [pc, #504]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091c8:	4a7d      	ldr	r2, [pc, #500]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091ca:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 80091ce:	6293      	str	r3, [r2, #40]	@ 0x28
    rtsiSetdXPtr(&rtM->solverInfo, &rtM->derivs);
 80091d0:	4b7b      	ldr	r3, [pc, #492]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091d2:	4a7b      	ldr	r2, [pc, #492]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80091d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    rtsiSetContStatesPtr(&rtM->solverInfo, (real_T **) &rtM->contStates);
 80091dc:	4b78      	ldr	r3, [pc, #480]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091de:	4a78      	ldr	r2, [pc, #480]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091e0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80091e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    rtsiSetNumContStatesPtr(&rtM->solverInfo, &rtM->Sizes.numContStates);
 80091e8:	4b75      	ldr	r3, [pc, #468]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091ea:	4a75      	ldr	r2, [pc, #468]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091ec:	f503 735e 	add.w	r3, r3, #888	@ 0x378
 80091f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    rtsiSetNumPeriodicContStatesPtr(&rtM->solverInfo,
 80091f4:	4b72      	ldr	r3, [pc, #456]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091f6:	4a72      	ldr	r2, [pc, #456]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80091f8:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80091fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      &rtM->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&rtM->solverInfo,
 8009200:	4b6f      	ldr	r3, [pc, #444]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009202:	4a6f      	ldr	r2, [pc, #444]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009204:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8009208:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      &rtM->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&rtM->solverInfo,
 800920c:	4b6c      	ldr	r3, [pc, #432]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800920e:	4a6c      	ldr	r2, [pc, #432]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009210:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8009214:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      &rtM->periodicContStateRanges);
    rtsiSetContStateDisabledPtr(&rtM->solverInfo, (boolean_T**)
 8009218:	4b69      	ldr	r3, [pc, #420]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800921a:	4a69      	ldr	r2, [pc, #420]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800921c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8009220:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
      &rtM->contStateDisabled);
    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));
 8009224:	4a66      	ldr	r2, [pc, #408]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009226:	4b66      	ldr	r3, [pc, #408]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009228:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);
 800922c:	4b64      	ldr	r3, [pc, #400]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800922e:	4a64      	ldr	r2, [pc, #400]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009230:	609a      	str	r2, [r3, #8]
  }

  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);
 8009232:	4b63      	ldr	r3, [pc, #396]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	2201      	movs	r2, #1
 8009238:	701a      	strb	r2, [r3, #0]
  rtM->intgData.y = rtM->odeY;
 800923a:	4b61      	ldr	r3, [pc, #388]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800923c:	4a60      	ldr	r2, [pc, #384]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800923e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8009242:	f8c2 3368 	str.w	r3, [r2, #872]	@ 0x368
  rtM->intgData.f[0] = rtM->odeF[0];
 8009246:	4b5e      	ldr	r3, [pc, #376]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009248:	4a5d      	ldr	r2, [pc, #372]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800924a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800924e:	f8c2 336c 	str.w	r3, [r2, #876]	@ 0x36c
  rtM->intgData.f[1] = rtM->odeF[1];
 8009252:	4b5b      	ldr	r3, [pc, #364]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009254:	4a5a      	ldr	r2, [pc, #360]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009256:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800925a:	f8c2 3370 	str.w	r3, [r2, #880]	@ 0x370
  rtM->intgData.f[2] = rtM->odeF[2];
 800925e:	4b58      	ldr	r3, [pc, #352]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009260:	4a57      	ldr	r2, [pc, #348]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009262:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 8009266:	f8c2 3374 	str.w	r3, [r2, #884]	@ 0x374
  rtM->contStates = ((X *) &rtX);
 800926a:	4b55      	ldr	r3, [pc, #340]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800926c:	4a55      	ldr	r2, [pc, #340]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800926e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  rtM->contStateDisabled = ((XDis *) &rtXDis);
 8009272:	4b53      	ldr	r3, [pc, #332]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009274:	4a54      	ldr	r2, [pc, #336]	@ (80093c8 <QuadcopterModel_initialize+0x21c>)
 8009276:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  rtM->Timing.tStart = (0.0);
 800927a:	4951      	ldr	r1, [pc, #324]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800927c:	f04f 0200 	mov.w	r2, #0
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	e9c1 23e8 	strd	r2, r3, [r1, #928]	@ 0x3a0
  rtsiSetSolverData(&rtM->solverInfo, (void *)&rtM->intgData);
 8009288:	4b4d      	ldr	r3, [pc, #308]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800928a:	4a4d      	ldr	r2, [pc, #308]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800928c:	f503 735a 	add.w	r3, r3, #872	@ 0x368
 8009290:	6113      	str	r3, [r2, #16]
  rtsiSetIsMinorTimeStepWithModeChange(&rtM->solverInfo, false);
 8009292:	4b4b      	ldr	r3, [pc, #300]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 8009294:	2200      	movs	r2, #0
 8009296:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
  rtsiSetSolverName(&rtM->solverInfo,"ode3");
 800929a:	4b49      	ldr	r3, [pc, #292]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 800929c:	4a4b      	ldr	r2, [pc, #300]	@ (80093cc <QuadcopterModel_initialize+0x220>)
 800929e:	615a      	str	r2, [r3, #20]
  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);
 80092a0:	4b47      	ldr	r3, [pc, #284]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80092a2:	4a47      	ldr	r2, [pc, #284]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80092a4:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80092a8:	f8c2 33ac 	str.w	r3, [r2, #940]	@ 0x3ac
  rtM->Timing.stepSize0 = 1.0;
 80092ac:	4944      	ldr	r1, [pc, #272]	@ (80093c0 <QuadcopterModel_initialize+0x214>)
 80092ae:	f04f 0200 	mov.w	r2, #0
 80092b2:	4b47      	ldr	r3, [pc, #284]	@ (80093d0 <QuadcopterModel_initialize+0x224>)
 80092b4:	e9c1 23e4 	strd	r2, r3, [r1, #912]	@ 0x390

  /* InitializeConditions for Integrator: '<S2>/Integrator' */
  rtX.Integrator_CSTATE[0] = 0.0;
 80092b8:	4942      	ldr	r1, [pc, #264]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	f04f 0300 	mov.w	r3, #0
 80092c2:	e9c1 2300 	strd	r2, r3, [r1]

  /* InitializeConditions for Integrator: '<S1>/Integrator2' */
  rtX.Integrator2_CSTATE[0] = 0.0;
 80092c6:	493f      	ldr	r1, [pc, #252]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	e9c1 2306 	strd	r2, r3, [r1, #24]

  /* InitializeConditions for Integrator: '<S1>/Integrator3' */
  rtX.Integrator3_CSTATE[0] = 0.0;
 80092d4:	493b      	ldr	r1, [pc, #236]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	f04f 0300 	mov.w	r3, #0
 80092de:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

  /* InitializeConditions for Integrator: '<S1>/Integrator4' */
  rtX.Integrator4_CSTATE[0] = 0.0;
 80092e2:	4938      	ldr	r1, [pc, #224]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

  /* InitializeConditions for Integrator: '<S1>/Integrator' */
  rtX.Integrator_CSTATE_g[0] = 0.0;
 80092f0:	4934      	ldr	r1, [pc, #208]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	f04f 0300 	mov.w	r3, #0
 80092fa:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60

  /* InitializeConditions for Integrator: '<S2>/Integrator1' */
  rtX.Integrator1_CSTATE[0] = 0.0;
 80092fe:	4931      	ldr	r1, [pc, #196]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009300:	f04f 0200 	mov.w	r2, #0
 8009304:	f04f 0300 	mov.w	r3, #0
 8009308:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

  /* InitializeConditions for Integrator: '<S2>/Integrator' */
  rtX.Integrator_CSTATE[1] = 0.0;
 800930c:	492d      	ldr	r1, [pc, #180]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	f04f 0300 	mov.w	r3, #0
 8009316:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* InitializeConditions for Integrator: '<S1>/Integrator2' */
  rtX.Integrator2_CSTATE[1] = 0.0;
 800931a:	492a      	ldr	r1, [pc, #168]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	f04f 0300 	mov.w	r3, #0
 8009324:	e9c1 2308 	strd	r2, r3, [r1, #32]

  /* InitializeConditions for Integrator: '<S1>/Integrator3' */
  rtX.Integrator3_CSTATE[1] = 0.0;
 8009328:	4926      	ldr	r1, [pc, #152]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

  /* InitializeConditions for Integrator: '<S1>/Integrator4' */
  rtX.Integrator4_CSTATE[1] = 0.0;
 8009336:	4923      	ldr	r1, [pc, #140]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009338:	f04f 0200 	mov.w	r2, #0
 800933c:	f04f 0300 	mov.w	r3, #0
 8009340:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50

  /* InitializeConditions for Integrator: '<S1>/Integrator' */
  rtX.Integrator_CSTATE_g[1] = 0.0;
 8009344:	491f      	ldr	r1, [pc, #124]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f04f 0300 	mov.w	r3, #0
 800934e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

  /* InitializeConditions for Integrator: '<S2>/Integrator1' */
  rtX.Integrator1_CSTATE[1] = 0.0;
 8009352:	491c      	ldr	r1, [pc, #112]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	f04f 0300 	mov.w	r3, #0
 800935c:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

  /* InitializeConditions for Integrator: '<S2>/Integrator' */
  rtX.Integrator_CSTATE[2] = 0.0;
 8009360:	4918      	ldr	r1, [pc, #96]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* InitializeConditions for Integrator: '<S1>/Integrator2' */
  rtX.Integrator2_CSTATE[2] = 0.0;
 800936e:	4915      	ldr	r1, [pc, #84]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

  /* InitializeConditions for Integrator: '<S1>/Integrator3' */
  rtX.Integrator3_CSTATE[2] = 0.0;
 800937c:	4911      	ldr	r1, [pc, #68]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

  /* InitializeConditions for Integrator: '<S1>/Integrator4' */
  rtX.Integrator4_CSTATE[2] = 0.0;
 800938a:	490e      	ldr	r1, [pc, #56]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	f04f 0300 	mov.w	r3, #0
 8009394:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

  /* InitializeConditions for Integrator: '<S1>/Integrator' */
  rtX.Integrator_CSTATE_g[2] = 0.0;
 8009398:	490a      	ldr	r1, [pc, #40]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

  /* InitializeConditions for Integrator: '<S2>/Integrator1' */
  rtX.Integrator1_CSTATE[2] = 0.0;
 80093a6:	4907      	ldr	r1, [pc, #28]	@ (80093c4 <QuadcopterModel_initialize+0x218>)
 80093a8:	f04f 0200 	mov.w	r2, #0
 80093ac:	f04f 0300 	mov.w	r3, #0
 80093b0:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20000620 	.word	0x20000620
 80093c4:	20000528 	.word	0x20000528
 80093c8:	200005b8 	.word	0x200005b8
 80093cc:	080124f0 	.word	0x080124f0
 80093d0:	3ff00000 	.word	0x3ff00000

080093d4 <hmc5883l_read>:

static __int8_t hmc5883l_self_test(struct hmc5883l_dev *hmc5883l);


__int8_t hmc5883l_read(uint16_t regaddr,const uint8_t *pdata,uint16_t len)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af04      	add	r7, sp, #16
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	80fb      	strh	r3, [r7, #6]
 80093e0:	4613      	mov	r3, r2
 80093e2:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0U;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]

	if ( pdata == NULL )
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d104      	bne.n	80093f8 <hmc5883l_read+0x24>
	{
		printf("Null pointer error !\n");
 80093ee:	4811      	ldr	r0, [pc, #68]	@ (8009434 <hmc5883l_read+0x60>)
 80093f0:	f005 fc1a 	bl	800ec28 <puts>
		Error_Handler();
 80093f4:	f7f8 f868 	bl	80014c8 <Error_Handler>
	}

	status = HAL_I2C_Mem_Read(hmc5883l_intf.hi2c, HMC5883L_READ_ADDR,regaddr,1,(uint8_t*)pdata,len,HAL_MAX_DELAY);
 80093f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009438 <hmc5883l_read+0x64>)
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	88fa      	ldrh	r2, [r7, #6]
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	88bb      	ldrh	r3, [r7, #4]
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2301      	movs	r3, #1
 800940e:	213d      	movs	r1, #61	@ 0x3d
 8009410:	f7f9 f804 	bl	800241c <HAL_I2C_Mem_Read>
 8009414:	4603      	mov	r3, r0
 8009416:	73fb      	strb	r3, [r7, #15]

	if ( status != HAL_OK )
 8009418:	7bfb      	ldrb	r3, [r7, #15]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d004      	beq.n	8009428 <hmc5883l_read+0x54>
	{
		printf("I2C Protocol Error !\n");
 800941e:	4807      	ldr	r0, [pc, #28]	@ (800943c <hmc5883l_read+0x68>)
 8009420:	f005 fc02 	bl	800ec28 <puts>
		Error_Handler();
 8009424:	f7f8 f850 	bl	80014c8 <Error_Handler>
	}

	return ( HMC5883L_OK );
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	080124f8 	.word	0x080124f8
 8009438:	2000000c 	.word	0x2000000c
 800943c:	08012510 	.word	0x08012510

08009440 <hmc5883l_write>:
__int8_t hmc5883l_write(uint16_t regaddr,uint8_t *pdata,uint16_t len)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af04      	add	r7, sp, #16
 8009446:	4603      	mov	r3, r0
 8009448:	6039      	str	r1, [r7, #0]
 800944a:	80fb      	strh	r3, [r7, #6]
 800944c:	4613      	mov	r3, r2
 800944e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]

	if ( pdata == NULL )
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <hmc5883l_write+0x24>
	{
		printf("Null pointer error !\n");
 800945a:	4811      	ldr	r0, [pc, #68]	@ (80094a0 <hmc5883l_write+0x60>)
 800945c:	f005 fbe4 	bl	800ec28 <puts>
		Error_Handler();
 8009460:	f7f8 f832 	bl	80014c8 <Error_Handler>
	}

	status = HAL_I2C_Mem_Write(hmc5883l_intf.hi2c, HMC5883L_WRITE_ADDR,regaddr,1,pdata,len,HAL_MAX_DELAY);
 8009464:	4b0f      	ldr	r3, [pc, #60]	@ (80094a4 <hmc5883l_write+0x64>)
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	88fa      	ldrh	r2, [r7, #6]
 800946a:	f04f 33ff 	mov.w	r3, #4294967295
 800946e:	9302      	str	r3, [sp, #8]
 8009470:	88bb      	ldrh	r3, [r7, #4]
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2301      	movs	r3, #1
 800947a:	213c      	movs	r1, #60	@ 0x3c
 800947c:	f7f8 fed4 	bl	8002228 <HAL_I2C_Mem_Write>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

	if ( status != HAL_OK )
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d004      	beq.n	8009494 <hmc5883l_write+0x54>
	{
		printf("I2C Protocol Error !\n");
 800948a:	4807      	ldr	r0, [pc, #28]	@ (80094a8 <hmc5883l_write+0x68>)
 800948c:	f005 fbcc 	bl	800ec28 <puts>
		Error_Handler();
 8009490:	f7f8 f81a 	bl	80014c8 <Error_Handler>
	}

	return ( HMC5883L_OK );
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	080124f8 	.word	0x080124f8
 80094a4:	2000000c 	.word	0x2000000c
 80094a8:	08012510 	.word	0x08012510

080094ac <hmc5883l_init>:


__int8_t hmc5883l_init(struct hmc5883l_dev *hmc5883l)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	hmc5883l->intfptr = &hmc5883l_intf;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a32      	ldr	r2, [pc, #200]	@ (8009580 <hmc5883l_init+0xd4>)
 80094b8:	61da      	str	r2, [r3, #28]
	hmc5883l->read_func = hmc5883l_read;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a31      	ldr	r2, [pc, #196]	@ (8009584 <hmc5883l_init+0xd8>)
 80094be:	621a      	str	r2, [r3, #32]
	hmc5883l->write_func = hmc5883l_write;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a31      	ldr	r2, [pc, #196]	@ (8009588 <hmc5883l_init+0xdc>)
 80094c4:	625a      	str	r2, [r3, #36]	@ 0x24

	uint8_t read_data[3] = {0};
 80094c6:	f107 030c 	add.w	r3, r7, #12
 80094ca:	2100      	movs	r1, #0
 80094cc:	460a      	mov	r2, r1
 80094ce:	801a      	strh	r2, [r3, #0]
 80094d0:	460a      	mov	r2, r1
 80094d2:	709a      	strb	r2, [r3, #2]
	uint8_t temp = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]

	if ( hmc5883l == NULL )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d104      	bne.n	80094e8 <hmc5883l_init+0x3c>
	{
		printf("Null pointer error !\n");
 80094de:	482b      	ldr	r0, [pc, #172]	@ (800958c <hmc5883l_init+0xe0>)
 80094e0:	f005 fba2 	bl	800ec28 <puts>
		Error_Handler();
 80094e4:	f7f7 fff0 	bl	80014c8 <Error_Handler>
	}

	if ( hmc5883l_is_ready(hmc5883l,&hmc5883l_intf) != HMC5883L_OK)
 80094e8:	4925      	ldr	r1, [pc, #148]	@ (8009580 <hmc5883l_init+0xd4>)
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f858 	bl	80095a0 <hmc5883l_is_ready>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <hmc5883l_init+0x54>
	{
		printf("Device Not Founded !\n");
 80094f6:	4826      	ldr	r0, [pc, #152]	@ (8009590 <hmc5883l_init+0xe4>)
 80094f8:	f005 fb96 	bl	800ec28 <puts>
		Error_Handler();
 80094fc:	f7f7 ffe4 	bl	80014c8 <Error_Handler>
	}

	if ( hmc5883l->read_func(HMC5883L_ID_A_REG,(uint8_t*)read_data,3) != HMC5883L_OK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	f107 010c 	add.w	r1, r7, #12
 8009508:	2203      	movs	r2, #3
 800950a:	200a      	movs	r0, #10
 800950c:	4798      	blx	r3
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d004      	beq.n	800951e <hmc5883l_init+0x72>
	{
		printf("I2C Read Error!\n");
 8009514:	481f      	ldr	r0, [pc, #124]	@ (8009594 <hmc5883l_init+0xe8>)
 8009516:	f005 fb87 	bl	800ec28 <puts>
		Error_Handler();
 800951a:	f7f7 ffd5 	bl	80014c8 <Error_Handler>
	}

	hmc5883l->id_A = *read_data;
 800951e:	7b3a      	ldrb	r2, [r7, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	765a      	strb	r2, [r3, #25]

	hmc5883l->id_B = *(read_data + 1);
 8009524:	7b7a      	ldrb	r2, [r7, #13]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	769a      	strb	r2, [r3, #26]

	hmc5883l->id_C = *(read_data + 2);
 800952a:	7bba      	ldrb	r2, [r7, #14]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	76da      	strb	r2, [r3, #27]

	temp = (hmc5883l->id_A == HMC5883L_ID_A_REG_VAL) && (hmc5883l->id_B == HMC5883L_ID_B_REG_VAL) &&\
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7e5b      	ldrb	r3, [r3, #25]
 8009534:	2b48      	cmp	r3, #72	@ 0x48
 8009536:	d109      	bne.n	800954c <hmc5883l_init+0xa0>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	7e9b      	ldrb	r3, [r3, #26]
 800953c:	2b34      	cmp	r3, #52	@ 0x34
 800953e:	d105      	bne.n	800954c <hmc5883l_init+0xa0>
			(hmc5883l->id_C == HMC5883L_ID_C_REG_VAL);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	7edb      	ldrb	r3, [r3, #27]
	temp = (hmc5883l->id_A == HMC5883L_ID_A_REG_VAL) && (hmc5883l->id_B == HMC5883L_ID_B_REG_VAL) &&\
 8009544:	2b33      	cmp	r3, #51	@ 0x33
 8009546:	d101      	bne.n	800954c <hmc5883l_init+0xa0>
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <hmc5883l_init+0xa2>
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]

	if( !temp )
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <hmc5883l_init+0xb4>
	{
		printf("All ID Register Read Error!\n");
 8009556:	4810      	ldr	r0, [pc, #64]	@ (8009598 <hmc5883l_init+0xec>)
 8009558:	f005 fb66 	bl	800ec28 <puts>
		Error_Handler();
 800955c:	f7f7 ffb4 	bl	80014c8 <Error_Handler>
	}

	if ( hmc5883l_self_test(hmc5883l) != HMC5883L_OK)
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f85d 	bl	8009620 <hmc5883l_self_test>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <hmc5883l_init+0xca>
	{
		printf("HMC5883L self-test error !\n");
 800956c:	480b      	ldr	r0, [pc, #44]	@ (800959c <hmc5883l_init+0xf0>)
 800956e:	f005 fb5b 	bl	800ec28 <puts>
		Error_Handler();
 8009572:	f7f7 ffa9 	bl	80014c8 <Error_Handler>
	}



	return ( HMC5883L_OK );
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	2000000c 	.word	0x2000000c
 8009584:	080093d5 	.word	0x080093d5
 8009588:	08009441 	.word	0x08009441
 800958c:	080124f8 	.word	0x080124f8
 8009590:	08012528 	.word	0x08012528
 8009594:	08012540 	.word	0x08012540
 8009598:	08012550 	.word	0x08012550
 800959c:	0801256c 	.word	0x0801256c

080095a0 <hmc5883l_is_ready>:


__int8_t hmc5883l_is_ready(struct hmc5883l_dev *hmc5883l,struct hmc5883l_interface *hmc5883l_intf)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = 0U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73bb      	strb	r3, [r7, #14]
	uint8_t dev_no = 0U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]

	if ( ( hmc5883l == NULL ) || ( hmc5883l_intf == NULL ) )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <hmc5883l_is_ready+0x1e>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d120      	bne.n	8009600 <hmc5883l_is_ready+0x60>
	{
		printf("Null pointer error !\n");
 80095be:	4816      	ldr	r0, [pc, #88]	@ (8009618 <hmc5883l_is_ready+0x78>)
 80095c0:	f005 fb32 	bl	800ec28 <puts>
		Error_Handler();
 80095c4:	f7f7 ff80 	bl	80014c8 <Error_Handler>
	}

	while ( dev_no++ < MAX_I2C_DEV_NUM )
 80095c8:	e01a      	b.n	8009600 <hmc5883l_is_ready+0x60>
	{

		status = HAL_I2C_IsDeviceReady(hmc5883l_intf->hi2c,(uint16_t)(dev_no << 1U),100,HAL_MAX_DELAY);
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	b299      	uxth	r1, r3
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295
 80095da:	2264      	movs	r2, #100	@ 0x64
 80095dc:	f7f9 f950 	bl	8002880 <HAL_I2C_IsDeviceReady>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

		if ( status == HAL_OK)
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <hmc5883l_is_ready+0x60>
		{
			hmc5883l->dev_addr = (uint8_t)dev_no;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	7bfa      	ldrb	r2, [r7, #15]
 80095ee:	761a      	strb	r2, [r3, #24]

			printf("Device found address 0x%X\n",hmc5883l->dev_addr);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7e1b      	ldrb	r3, [r3, #24]
 80095f4:	4619      	mov	r1, r3
 80095f6:	4809      	ldr	r0, [pc, #36]	@ (800961c <hmc5883l_is_ready+0x7c>)
 80095f8:	f005 faae 	bl	800eb58 <iprintf>

			return ( HMC5883L_OK );
 80095fc:	2300      	movs	r3, #0
 80095fe:	e006      	b.n	800960e <hmc5883l_is_ready+0x6e>
	while ( dev_no++ < MAX_I2C_DEV_NUM )
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	73fa      	strb	r2, [r7, #15]
 8009606:	2b7e      	cmp	r3, #126	@ 0x7e
 8009608:	d9df      	bls.n	80095ca <hmc5883l_is_ready+0x2a>
		}

	}

	return ( HMC5883L_DEV_NOT_FOUND );
 800960a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	080124f8 	.word	0x080124f8
 800961c:	08012588 	.word	0x08012588

08009620 <hmc5883l_self_test>:



static __int8_t hmc5883l_self_test(struct hmc5883l_dev *hmc5883l)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	if ( hmc5883l == NULL )
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d104      	bne.n	8009638 <hmc5883l_self_test+0x18>
	{
		printf("Null pointer error !\n");
 800962e:	4843      	ldr	r0, [pc, #268]	@ (800973c <hmc5883l_self_test+0x11c>)
 8009630:	f005 fafa 	bl	800ec28 <puts>
		Error_Handler();
 8009634:	f7f7 ff48 	bl	80014c8 <Error_Handler>
	}

	uint8_t temp = 0U;
 8009638:	2300      	movs	r3, #0
 800963a:	77fb      	strb	r3, [r7, #31]
	uint8_t rx_data[6]={0};
 800963c:	f107 0310 	add.w	r3, r7, #16
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	809a      	strh	r2, [r3, #4]
	uint8_t tx_data[1]={0};
 8009646:	2300      	movs	r3, #0
 8009648:	733b      	strb	r3, [r7, #12]

	uint16_t self_test_x = 0,self_test_y = 0,self_test_z = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	83bb      	strh	r3, [r7, #28]
 800964e:	2300      	movs	r3, #0
 8009650:	837b      	strh	r3, [r7, #26]
 8009652:	2300      	movs	r3, #0
 8009654:	833b      	strh	r3, [r7, #24]

	// Write CRA (00) – send 0x3C 0x00 0x71 (8-average, 15 Hz default, positive self test measurement)
	tx_data[0] = 0x71;
 8009656:	2371      	movs	r3, #113	@ 0x71
 8009658:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_A_REG,tx_data,1U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800965e:	f107 010c 	add.w	r1, r7, #12
 8009662:	2201      	movs	r2, #1
 8009664:	2000      	movs	r0, #0
 8009666:	4798      	blx	r3

	// Write CRB (01) – send 0x3C 0x01 0xA0 (Gain=5)
	tx_data[0] = 0xC0;
 8009668:	23c0      	movs	r3, #192	@ 0xc0
 800966a:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_B_REG,tx_data,1U);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009670:	f107 010c 	add.w	r1, r7, #12
 8009674:	2201      	movs	r2, #1
 8009676:	2001      	movs	r0, #1
 8009678:	4798      	blx	r3

	// Write Mode (02) – send 0x3C 0x02 0x00 (Continuous-measurement mode)
	tx_data[0] = 0x00;
 800967a:	2300      	movs	r3, #0
 800967c:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_MODE_REG,tx_data,1U);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009682:	f107 010c 	add.w	r1, r7, #12
 8009686:	2201      	movs	r2, #1
 8009688:	2002      	movs	r0, #2
 800968a:	4798      	blx	r3

	HAL_Delay(100);
 800968c:	2064      	movs	r0, #100	@ 0x64
 800968e:	f7f8 f99b 	bl	80019c8 <HAL_Delay>

	hmc5883l->read_func(HMC5883L_DOR_X_MSB_REG,rx_data,6U);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a1b      	ldr	r3, [r3, #32]
 8009696:	f107 0110 	add.w	r1, r7, #16
 800969a:	2206      	movs	r2, #6
 800969c:	2003      	movs	r0, #3
 800969e:	4798      	blx	r3

	self_test_x = (uint16_t)(( rx_data[0] << 8U ) | rx_data[1]);
 80096a0:	7c3b      	ldrb	r3, [r7, #16]
 80096a2:	b21b      	sxth	r3, r3
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b21a      	sxth	r2, r3
 80096a8:	7c7b      	ldrb	r3, [r7, #17]
 80096aa:	b21b      	sxth	r3, r3
 80096ac:	4313      	orrs	r3, r2
 80096ae:	b21b      	sxth	r3, r3
 80096b0:	83bb      	strh	r3, [r7, #28]
	self_test_z = (uint16_t)(( rx_data[2] << 8U ) | rx_data[3]);
 80096b2:	7cbb      	ldrb	r3, [r7, #18]
 80096b4:	b21b      	sxth	r3, r3
 80096b6:	021b      	lsls	r3, r3, #8
 80096b8:	b21a      	sxth	r2, r3
 80096ba:	7cfb      	ldrb	r3, [r7, #19]
 80096bc:	b21b      	sxth	r3, r3
 80096be:	4313      	orrs	r3, r2
 80096c0:	b21b      	sxth	r3, r3
 80096c2:	833b      	strh	r3, [r7, #24]
	self_test_y = (uint16_t)(( rx_data[4] << 8U ) | rx_data[5]);
 80096c4:	7d3b      	ldrb	r3, [r7, #20]
 80096c6:	b21b      	sxth	r3, r3
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	b21a      	sxth	r2, r3
 80096cc:	7d7b      	ldrb	r3, [r7, #21]
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	4313      	orrs	r3, r2
 80096d2:	b21b      	sxth	r3, r3
 80096d4:	837b      	strh	r3, [r7, #26]

	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
		   (self_test_y >= 243) &&  (self_test_y <= 575) &&\
		   (self_test_z >= 243) &&  (self_test_z <= 575);
 80096d6:	8bbb      	ldrh	r3, [r7, #28]
 80096d8:	2bf2      	cmp	r3, #242	@ 0xf2
 80096da:	d913      	bls.n	8009704 <hmc5883l_self_test+0xe4>
	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
 80096dc:	8bbb      	ldrh	r3, [r7, #28]
 80096de:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80096e2:	d20f      	bcs.n	8009704 <hmc5883l_self_test+0xe4>
 80096e4:	8b7b      	ldrh	r3, [r7, #26]
 80096e6:	2bf2      	cmp	r3, #242	@ 0xf2
 80096e8:	d90c      	bls.n	8009704 <hmc5883l_self_test+0xe4>
		   (self_test_y >= 243) &&  (self_test_y <= 575) &&\
 80096ea:	8b7b      	ldrh	r3, [r7, #26]
 80096ec:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80096f0:	d208      	bcs.n	8009704 <hmc5883l_self_test+0xe4>
 80096f2:	8b3b      	ldrh	r3, [r7, #24]
 80096f4:	2bf2      	cmp	r3, #242	@ 0xf2
 80096f6:	d905      	bls.n	8009704 <hmc5883l_self_test+0xe4>
		   (self_test_z >= 243) &&  (self_test_z <= 575);
 80096f8:	8b3b      	ldrh	r3, [r7, #24]
 80096fa:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80096fe:	d201      	bcs.n	8009704 <hmc5883l_self_test+0xe4>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <hmc5883l_self_test+0xe6>
 8009704:	2300      	movs	r3, #0
	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
 8009706:	77fb      	strb	r3, [r7, #31]

	if ( !temp )
 8009708:	7ffb      	ldrb	r3, [r7, #31]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d104      	bne.n	8009718 <hmc5883l_self_test+0xf8>
	{
		printf("HMC5883C self-test error !\n");
 800970e:	480c      	ldr	r0, [pc, #48]	@ (8009740 <hmc5883l_self_test+0x120>)
 8009710:	f005 fa8a 	bl	800ec28 <puts>
		Error_Handler();
 8009714:	f7f7 fed8 	bl	80014c8 <Error_Handler>
	}

	printf("HMC5883C self-test successful !\n");
 8009718:	480a      	ldr	r0, [pc, #40]	@ (8009744 <hmc5883l_self_test+0x124>)
 800971a:	f005 fa85 	bl	800ec28 <puts>

	// All 3 axes pass positive self test and Exit self test mode and this procedure)
	tx_data[0] = 0x70;
 800971e:	2370      	movs	r3, #112	@ 0x70
 8009720:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_A_REG,tx_data,1U);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009726:	f107 010c 	add.w	r1, r7, #12
 800972a:	2201      	movs	r2, #1
 800972c:	2000      	movs	r0, #0
 800972e:	4798      	blx	r3

	return ( HMC5883L_OK );
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3720      	adds	r7, #32
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	080124f8 	.word	0x080124f8
 8009740:	080125a4 	.word	0x080125a4
 8009744:	080125c0 	.word	0x080125c0

08009748 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8009748:	b590      	push	{r4, r7, lr}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60b9      	str	r1, [r7, #8]
 8009750:	607b      	str	r3, [r7, #4]
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
 8009756:	4613      	mov	r3, r2
 8009758:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <bmi160_get_regs+0x24>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 800976c:	23ff      	movs	r3, #255	@ 0xff
 800976e:	75fb      	strb	r3, [r7, #23]
 8009770:	e017      	b.n	80097a2 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8009772:	89bb      	ldrh	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8009778:	23f4      	movs	r3, #244	@ 0xf4
 800977a:	75fb      	strb	r3, [r7, #23]
 800977c:	e011      	b.n	80097a2 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7e9b      	ldrb	r3, [r3, #26]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d103      	bne.n	800978e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800978c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7e58      	ldrb	r0, [r3, #25]
 8009796:	89bb      	ldrh	r3, [r7, #12]
 8009798:	7bf9      	ldrb	r1, [r7, #15]
 800979a:	68ba      	ldr	r2, [r7, #8]
 800979c:	47a0      	blx	r4
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80097a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd90      	pop	{r4, r7, pc}

080097ae <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 80097ae:	b590      	push	{r4, r7, lr}
 80097b0:	b087      	sub	sp, #28
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607b      	str	r3, [r7, #4]
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
 80097bc:	4613      	mov	r3, r2
 80097be:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <bmi160_set_regs+0x28>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 80097d6:	23ff      	movs	r3, #255	@ 0xff
 80097d8:	75fb      	strb	r3, [r7, #23]
 80097da:	e047      	b.n	800986c <bmi160_set_regs+0xbe>
    }
    else if (len == 0)
 80097dc:	89bb      	ldrh	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 80097e2:	23f4      	movs	r3, #244	@ 0xf4
 80097e4:	75fb      	strb	r3, [r7, #23]
 80097e6:	e041      	b.n	800986c <bmi160_set_regs+0xbe>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	7e9b      	ldrb	r3, [r3, #26]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d103      	bne.n	80097f8 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f6:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097fe:	2b11      	cmp	r3, #17
 8009800:	d004      	beq.n	800980c <bmi160_set_regs+0x5e>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8009808:	2b15      	cmp	r3, #21
 800980a:	d124      	bne.n	8009856 <bmi160_set_regs+0xa8>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7e58      	ldrb	r0, [r3, #25]
 8009814:	89bb      	ldrh	r3, [r7, #12]
 8009816:	7bf9      	ldrb	r1, [r7, #15]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	47a0      	blx	r4
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009824:	2001      	movs	r0, #1
 8009826:	4798      	blx	r3
 8009828:	e01a      	b.n	8009860 <bmi160_set_regs+0xb2>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	7e58      	ldrb	r0, [r3, #25]
 8009832:	7dbb      	ldrb	r3, [r7, #22]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	441a      	add	r2, r3
 8009838:	7bf9      	ldrb	r1, [r7, #15]
 800983a:	2301      	movs	r3, #1
 800983c:	47a0      	blx	r4
 800983e:	4603      	mov	r3, r0
 8009840:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	3301      	adds	r3, #1
 8009846:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984c:	2001      	movs	r0, #1
 800984e:	4798      	blx	r3
            for (; count < len; count++)
 8009850:	7dbb      	ldrb	r3, [r7, #22]
 8009852:	3301      	adds	r3, #1
 8009854:	75bb      	strb	r3, [r7, #22]
 8009856:	7dbb      	ldrb	r3, [r7, #22]
 8009858:	b29b      	uxth	r3, r3
 800985a:	89ba      	ldrh	r2, [r7, #12]
 800985c:	429a      	cmp	r2, r3
 800985e:	d8e4      	bhi.n	800982a <bmi160_set_regs+0x7c>

            }
        }

        if (rslt != BMI160_OK)
 8009860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d001      	beq.n	800986c <bmi160_set_regs+0xbe>
        {
            rslt = BMI160_E_COM_FAIL;
 8009868:	23fe      	movs	r3, #254	@ 0xfe
 800986a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800986c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	371c      	adds	r7, #28
 8009874:	46bd      	mov	sp, r7
 8009876:	bd90      	pop	{r4, r7, pc}

08009878 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8009880:	2303      	movs	r3, #3
 8009882:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fa9b 	bl	8009dc0 <null_ptr_check>
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800988e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10c      	bne.n	80098b0 <bmi160_init+0x38>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	7e9b      	ldrb	r3, [r3, #26]
 800989a:	2b01      	cmp	r3, #1
 800989c:	d108      	bne.n	80098b0 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800989e:	f107 010d 	add.w	r1, r7, #13
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	207f      	movs	r0, #127	@ 0x7f
 80098a8:	f7ff ff4e 	bl	8009748 <bmi160_get_regs>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 80098b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d129      	bne.n	800990c <bmi160_init+0x94>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	761a      	strb	r2, [r3, #24]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80098be:	e009      	b.n	80098d4 <bmi160_init+0x5c>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f103 0118 	add.w	r1, r3, #24
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	2000      	movs	r0, #0
 80098cc:	f7ff ff3c 	bl	8009748 <bmi160_get_regs>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	1e5a      	subs	r2, r3, #1
 80098d8:	73ba      	strb	r2, [r7, #14]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <bmi160_init+0x6e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7e1b      	ldrb	r3, [r3, #24]
 80098e2:	2bd1      	cmp	r3, #209	@ 0xd1
 80098e4:	d1ec      	bne.n	80098c0 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 80098e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <bmi160_init+0x90>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7e1b      	ldrb	r3, [r3, #24]
 80098f2:	2bd1      	cmp	r3, #209	@ 0xd1
 80098f4:	d108      	bne.n	8009908 <bmi160_init+0x90>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	22ff      	movs	r2, #255	@ 0xff
 80098fa:	76da      	strb	r2, [r3, #27]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f80b 	bl	8009918 <bmi160_soft_reset>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
 8009906:	e001      	b.n	800990c <bmi160_init+0x94>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8009908:	23fd      	movs	r3, #253	@ 0xfd
 800990a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800990c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8009920:	23b6      	movs	r3, #182	@ 0xb6
 8009922:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <bmi160_soft_reset+0x1a>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8009932:	23ff      	movs	r3, #255	@ 0xff
 8009934:	73fb      	strb	r3, [r7, #15]
 8009936:	e024      	b.n	8009982 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8009938:	f107 010e 	add.w	r1, r7, #14
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	207e      	movs	r0, #126	@ 0x7e
 8009942:	f7ff ff34 	bl	80097ae <bmi160_set_regs>
 8009946:	4603      	mov	r3, r0
 8009948:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800994e:	2001      	movs	r0, #1
 8009950:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8009952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10c      	bne.n	8009974 <bmi160_soft_reset+0x5c>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	7e9b      	ldrb	r3, [r3, #26]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d108      	bne.n	8009974 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8009962:	f107 010e 	add.w	r1, r7, #14
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	207f      	movs	r0, #127	@ 0x7f
 800996c:	f7ff feec 	bl	8009748 <bmi160_get_regs>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8009974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d102      	bne.n	8009982 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fa3f 	bl	8009e00 <default_param_settg>
        }
    }

    return rslt;
 8009982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b084      	sub	sp, #16
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <bmi160_set_sens_conf+0x1a>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80099a8:	23ff      	movs	r3, #255	@ 0xff
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	e01f      	b.n	80099ee <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa54 	bl	8009e5c <set_accel_conf>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80099b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d116      	bne.n	80099ee <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fb96 	bl	800a0f2 <set_gyro_conf>
 80099c6:	4603      	mov	r3, r0
 80099c8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80099ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10d      	bne.n	80099ee <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 f811 	bl	80099fa <bmi160_set_power_mode>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80099dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d104      	bne.n	80099ee <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fb4f 	bl	800a088 <check_invalid_settg>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80099ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <bmi160_set_power_mode+0x1a>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8009a14:	23ff      	movs	r3, #255	@ 0xff
 8009a16:	73fb      	strb	r3, [r7, #15]
 8009a18:	e00d      	b.n	8009a36 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc83 	bl	800a326 <set_accel_pwr>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fd15 	bl	800a45c <set_gyro_pwr>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b086      	sub	sp, #24
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
 8009a4e:	4603      	mov	r3, r0
 8009a50:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8009a56:	2300      	movs	r3, #0
 8009a58:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	f003 0307 	and.w	r3, r3, #7
 8009a60:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8009a62:	7d7b      	ldrb	r3, [r7, #21]
 8009a64:	109b      	asrs	r3, r3, #2
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8009a6e:	7d7b      	ldrb	r3, [r7, #21]
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8009a76:	7d3b      	ldrb	r3, [r7, #20]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d03c      	beq.n	8009b00 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8009a86:	7d7b      	ldrb	r3, [r7, #21]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d024      	beq.n	8009ad6 <bmi160_get_sensor_data+0x94>
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	dc34      	bgt.n	8009afa <bmi160_get_sensor_data+0xb8>
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d002      	beq.n	8009a9a <bmi160_get_sensor_data+0x58>
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d00f      	beq.n	8009ab8 <bmi160_get_sensor_data+0x76>
 8009a98:	e02f      	b.n	8009afa <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009aa0:	23ff      	movs	r3, #255	@ 0xff
 8009aa2:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8009aa4:	e02e      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8009aa6:	7dbb      	ldrb	r3, [r7, #22]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	68b9      	ldr	r1, [r7, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fd23 	bl	800a4f8 <get_accel_data>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75fb      	strb	r3, [r7, #23]
                break;
 8009ab6:	e025      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009abe:	23ff      	movs	r3, #255	@ 0xff
 8009ac0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8009ac2:	e01f      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8009ac4:	7dbb      	ldrb	r3, [r7, #22]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f000 fde0 	bl	800a690 <get_gyro_data>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	75fb      	strb	r3, [r7, #23]
                break;
 8009ad4:	e016      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <bmi160_get_sensor_data+0xa0>
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8009ae2:	23ff      	movs	r3, #255	@ 0xff
 8009ae4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8009ae6:	e00d      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8009ae8:	7db8      	ldrb	r0, [r7, #22]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	f000 ff1c 	bl	800a92c <get_accel_gyro_data>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
                break;
 8009af8:	e004      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8009afa:	23fb      	movs	r3, #251	@ 0xfb
 8009afc:	75fb      	strb	r3, [r7, #23]
                break;
 8009afe:	e001      	b.n	8009b04 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8009b00:	23ff      	movs	r3, #255	@ 0xff
 8009b02:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3718      	adds	r7, #24
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	6039      	str	r1, [r7, #0]
 8009b1a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    int8_t self_test_rslt = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009b20:	6838      	ldr	r0, [r7, #0]
 8009b22:	f000 f94d 	bl	8009dc0 <null_ptr_check>
 8009b26:	4603      	mov	r3, r0
 8009b28:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8009b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d002      	beq.n	8009b38 <bmi160_perform_self_test+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8009b32:	23ff      	movs	r3, #255	@ 0xff
 8009b34:	73fb      	strb	r3, [r7, #15]
 8009b36:	e033      	b.n	8009ba0 <bmi160_perform_self_test+0x90>
    }
    else
    {

        /* Proceed if null check is fine */
        switch (select_sensor)
 8009b38:	79fb      	ldrb	r3, [r7, #7]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d002      	beq.n	8009b44 <bmi160_perform_self_test+0x34>
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d006      	beq.n	8009b50 <bmi160_perform_self_test+0x40>
 8009b42:	e018      	b.n	8009b76 <bmi160_perform_self_test+0x66>
        {
            case BMI160_ACCEL_ONLY:
                rslt = perform_accel_self_test(dev);
 8009b44:	6838      	ldr	r0, [r7, #0]
 8009b46:	f001 f834 	bl	800abb2 <perform_accel_self_test>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	73fb      	strb	r3, [r7, #15]
                break;
 8009b4e:	e016      	b.n	8009b7e <bmi160_perform_self_test+0x6e>
            case BMI160_GYRO_ONLY:

                /* Set the power mode as normal mode */
                dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2215      	movs	r2, #21
 8009b54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
                rslt = bmi160_set_power_mode(dev);
 8009b58:	6838      	ldr	r0, [r7, #0]
 8009b5a:	f7ff ff4e 	bl	80099fa <bmi160_set_power_mode>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]

                /* Perform gyro self test */
                if (rslt == BMI160_OK)
 8009b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d108      	bne.n	8009b7c <bmi160_perform_self_test+0x6c>
                {
                    /* Perform gyro self test */
                    rslt = perform_gyro_self_test(dev);
 8009b6a:	6838      	ldr	r0, [r7, #0]
 8009b6c:	f001 f8fd 	bl	800ad6a <perform_gyro_self_test>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8009b74:	e002      	b.n	8009b7c <bmi160_perform_self_test+0x6c>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8009b76:	23fb      	movs	r3, #251	@ 0xfb
 8009b78:	73fb      	strb	r3, [r7, #15]
                break;
 8009b7a:	e000      	b.n	8009b7e <bmi160_perform_self_test+0x6e>
                break;
 8009b7c:	bf00      	nop
        }

        /* Check to ensure bus error does not occur */
        if (rslt >= BMI160_OK)
 8009b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	db06      	blt.n	8009b94 <bmi160_perform_self_test+0x84>
        {
            /* Store the status of self test result */
            self_test_rslt = rslt;
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	73bb      	strb	r3, [r7, #14]

            /* Perform soft reset */
            rslt = bmi160_soft_reset(dev);
 8009b8a:	6838      	ldr	r0, [r7, #0]
 8009b8c:	f7ff fec4 	bl	8009918 <bmi160_soft_reset>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]

        }

        /* Check to ensure bus operations are success */
        if (rslt == BMI160_OK)
 8009b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <bmi160_perform_self_test+0x90>
        {
            /* Restore self_test_rslt as return value */
            rslt = self_test_rslt;
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b088      	sub	sp, #32
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009bb6:	6838      	ldr	r0, [r7, #0]
 8009bb8:	f000 f902 	bl	8009dc0 <null_ptr_check>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8009bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8009bc8:	23ff      	movs	r3, #255	@ 0xff
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e069      	b.n	8009ca2 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8009bce:	f107 010c 	add.w	r1, r7, #12
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	2071      	movs	r0, #113	@ 0x71
 8009bd8:	f7ff fdb6 	bl	8009748 <bmi160_get_regs>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8009be0:	7b3b      	ldrb	r3, [r7, #12]
 8009be2:	b25a      	sxtb	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8009be8:	7b7b      	ldrb	r3, [r7, #13]
 8009bea:	b25a      	sxtb	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	b25a      	sxtb	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8009bf8:	7bfb      	ldrb	r3, [r7, #15]
 8009bfa:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8009bfc:	7cbb      	ldrb	r3, [r7, #18]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009c04:	7f7b      	ldrb	r3, [r7, #29]
 8009c06:	b21b      	sxth	r3, r3
 8009c08:	039b      	lsls	r3, r3, #14
 8009c0a:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009c0c:	7fbb      	ldrb	r3, [r7, #30]
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	019b      	lsls	r3, r3, #6
 8009c12:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009c14:	8b7a      	ldrh	r2, [r7, #26]
 8009c16:	8b3b      	ldrh	r3, [r7, #24]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8009c1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	da00      	bge.n	8009c26 <bmi160_get_offsets+0x7a>
 8009c24:	333f      	adds	r3, #63	@ 0x3f
 8009c26:	119b      	asrs	r3, r3, #6
 8009c28:	b21a      	sxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8009c2e:	7c3b      	ldrb	r3, [r7, #16]
 8009c30:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8009c32:	7cbb      	ldrb	r3, [r7, #18]
 8009c34:	109b      	asrs	r3, r3, #2
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009c3e:	7f7b      	ldrb	r3, [r7, #29]
 8009c40:	b21b      	sxth	r3, r3
 8009c42:	039b      	lsls	r3, r3, #14
 8009c44:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009c46:	7fbb      	ldrb	r3, [r7, #30]
 8009c48:	b21b      	sxth	r3, r3
 8009c4a:	019b      	lsls	r3, r3, #6
 8009c4c:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009c4e:	8b7a      	ldrh	r2, [r7, #26]
 8009c50:	8b3b      	ldrh	r3, [r7, #24]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8009c56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	da00      	bge.n	8009c60 <bmi160_get_offsets+0xb4>
 8009c5e:	333f      	adds	r3, #63	@ 0x3f
 8009c60:	119b      	asrs	r3, r3, #6
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8009c68:	7c7b      	ldrb	r3, [r7, #17]
 8009c6a:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8009c6c:	7cbb      	ldrb	r3, [r7, #18]
 8009c6e:	111b      	asrs	r3, r3, #4
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8009c78:	7f7b      	ldrb	r3, [r7, #29]
 8009c7a:	b21b      	sxth	r3, r3
 8009c7c:	039b      	lsls	r3, r3, #14
 8009c7e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8009c80:	7fbb      	ldrb	r3, [r7, #30]
 8009c82:	b21b      	sxth	r3, r3
 8009c84:	019b      	lsls	r3, r3, #6
 8009c86:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8009c88:	8b7a      	ldrh	r2, [r7, #26]
 8009c8a:	8b3b      	ldrh	r3, [r7, #24]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8009c90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da00      	bge.n	8009c9a <bmi160_get_offsets+0xee>
 8009c98:	333f      	adds	r3, #63	@ 0x3f
 8009c9a:	119b      	asrs	r3, r3, #6
 8009c9c:	b21a      	sxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8009ca2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <bmi160_set_offsets>:
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,
                          const struct bmi160_offsets *offset,
                          struct bmi160_dev const *dev)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b088      	sub	sp, #32
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data[7];
    uint8_t x_msb, y_msb, z_msb;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f880 	bl	8009dc0 <null_ptr_check>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8009cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <bmi160_set_offsets+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8009ccc:	23ff      	movs	r3, #255	@ 0xff
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e070      	b.n	8009db4 <bmi160_set_offsets+0x106>
    }
    else
    {
        /* Update the accel offset */
        data[0] = (uint8_t)offset->off_acc_x;
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	753b      	strb	r3, [r7, #20]
        data[1] = (uint8_t)offset->off_acc_y;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	757b      	strb	r3, [r7, #21]
        data[2] = (uint8_t)offset->off_acc_z;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	75bb      	strb	r3, [r7, #22]

        /* Update the LSB of gyro offset */
        data[3] = BMI160_GET_LSB(offset->off_gyro_x);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	75fb      	strb	r3, [r7, #23]
        data[4] = BMI160_GET_LSB(offset->off_gyro_y);
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	763b      	strb	r3, [r7, #24]
        data[5] = BMI160_GET_LSB(offset->off_gyro_z);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	767b      	strb	r3, [r7, #25]

        /* Update the MSB of gyro offset */
        x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	121b      	asrs	r3, r3, #8
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f003 0303 	and.w	r3, r3, #3
 8009d1e:	77bb      	strb	r3, [r7, #30]
        y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	121b      	asrs	r3, r3, #8
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	f003 0303 	and.w	r3, r3, #3
 8009d30:	777b      	strb	r3, [r7, #29]
        z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	121b      	asrs	r3, r3, #8
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 0303 	and.w	r3, r3, #3
 8009d42:	773b      	strb	r3, [r7, #28]
        data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
 8009d44:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009d48:	011b      	lsls	r3, r3, #4
 8009d4a:	b25a      	sxtb	r2, r3
 8009d4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	b25b      	sxtb	r3, r3
 8009d54:	4313      	orrs	r3, r2
 8009d56:	b25a      	sxtb	r2, r3
 8009d58:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b25b      	sxtb	r3, r3
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	76bb      	strb	r3, [r7, #26]

        /* Set the offset enable/disable for gyro and accel */
        data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8009d64:	7ebb      	ldrb	r3, [r7, #26]
 8009d66:	b25b      	sxtb	r3, r3
 8009d68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d6c:	b25a      	sxtb	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	795b      	ldrb	r3, [r3, #5]
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	01db      	lsls	r3, r3, #7
 8009d76:	b25b      	sxtb	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	76bb      	strb	r3, [r7, #26]
        data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8009d80:	7ebb      	ldrb	r3, [r7, #26]
 8009d82:	b25b      	sxtb	r3, r3
 8009d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d88:	b25a      	sxtb	r2, r3
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	791b      	ldrb	r3, [r3, #4]
 8009d8e:	b25b      	sxtb	r3, r3
 8009d90:	019b      	lsls	r3, r3, #6
 8009d92:	b25b      	sxtb	r3, r3
 8009d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d98:	b25b      	sxtb	r3, r3
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	b25b      	sxtb	r3, r3
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	76bb      	strb	r3, [r7, #26]

        /* Set the offset config and values in the sensor */
        rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8009da2:	f107 0114 	add.w	r1, r7, #20
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2207      	movs	r2, #7
 8009daa:	2071      	movs	r0, #113	@ 0x71
 8009dac:	f7ff fcff 	bl	80097ae <bmi160_set_regs>
 8009db0:	4603      	mov	r3, r0
 8009db2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8009db4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3720      	adds	r7, #32
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <null_ptr_check+0x26>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d007      	beq.n	8009de6 <null_ptr_check+0x26>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <null_ptr_check+0x26>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8009de6:	23ff      	movs	r3, #255	@ 0xff
 8009de8:	73fb      	strb	r3, [r7, #15]
 8009dea:	e001      	b.n	8009df0 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	77da      	strb	r2, [r3, #31]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2208      	movs	r2, #8
 8009e12:	775a      	strb	r2, [r3, #29]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2210      	movs	r2, #16
 8009e18:	771a      	strb	r2, [r3, #28]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2203      	movs	r2, #3
 8009e1e:	779a      	strb	r2, [r3, #30]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2208      	movs	r2, #8
 8009e2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2214      	movs	r2, #20
 8009e34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	69d2      	ldr	r2, [r2, #28]
 8009e46:	621a      	str	r2, [r3, #32]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009e4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8009e64:	2300      	movs	r3, #0
 8009e66:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8009e68:	f107 030c 	add.w	r3, r7, #12
 8009e6c:	6879      	ldr	r1, [r7, #4]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 f836 	bl	8009ee0 <check_accel_config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8009e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d129      	bne.n	8009ed4 <set_accel_conf+0x78>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 8009e80:	f107 010c 	add.w	r1, r7, #12
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	2040      	movs	r0, #64	@ 0x40
 8009e8a:	f7ff fc90 	bl	80097ae <bmi160_set_regs>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d11c      	bne.n	8009ed4 <set_accel_conf+0x78>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	7f5a      	ldrb	r2, [r3, #29]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	7fda      	ldrb	r2, [r3, #31]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8009eae:	f107 030c 	add.w	r3, r7, #12
 8009eb2:	1c59      	adds	r1, r3, #1
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	2041      	movs	r0, #65	@ 0x41
 8009eba:	f7ff fc78 	bl	80097ae <bmi160_set_regs>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8009ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <set_accel_conf+0x78>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7f9a      	ldrb	r2, [r3, #30]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
            }
        }
    }

    return rslt;
 8009ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	2202      	movs	r2, #2
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	2040      	movs	r0, #64	@ 0x40
 8009ef2:	f7ff fc29 	bl	8009748 <bmi160_get_regs>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8009efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d11b      	bne.n	8009f3a <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8009f02:	6839      	ldr	r1, [r7, #0]
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f81e 	bl	8009f46 <process_accel_odr>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8009f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d111      	bne.n	8009f3a <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f849 	bl	8009fb0 <process_accel_bw>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8009f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d107      	bne.n	8009f3a <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	6839      	ldr	r1, [r7, #0]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f874 	bl	800a01e <process_accel_range>
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8009f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b085      	sub	sp, #20
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8009f54:	2300      	movs	r3, #0
 8009f56:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	7f5b      	ldrb	r3, [r3, #29]
 8009f60:	2b0c      	cmp	r3, #12
 8009f62:	d81b      	bhi.n	8009f9c <process_accel_odr+0x56>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	7f5a      	ldrb	r2, [r3, #29]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d016      	beq.n	8009fa0 <process_accel_odr+0x5a>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	7f5b      	ldrb	r3, [r3, #29]
 8009f76:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f023 030f 	bic.w	r3, r3, #15
 8009f80:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8009f82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009f86:	f003 030f 	and.w	r3, r3, #15
 8009f8a:	b25a      	sxtb	r2, r3
 8009f8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	b25b      	sxtb	r3, r3
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	701a      	strb	r2, [r3, #0]
 8009f9a:	e001      	b.n	8009fa0 <process_accel_odr+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8009f9c:	23fc      	movs	r3, #252	@ 0xfc
 8009f9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8009fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	7fdb      	ldrb	r3, [r3, #31]
 8009fca:	2b07      	cmp	r3, #7
 8009fcc:	d81d      	bhi.n	800a00a <process_accel_bw+0x5a>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	7fda      	ldrb	r2, [r3, #31]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d018      	beq.n	800a00e <process_accel_bw+0x5e>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	7fdb      	ldrb	r3, [r3, #31]
 8009fe0:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fea:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8009fec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	b25b      	sxtb	r3, r3
 8009ff4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ff8:	b25a      	sxtb	r2, r3
 8009ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ffe:	4313      	orrs	r3, r2
 800a000:	b25b      	sxtb	r3, r3
 800a002:	b2da      	uxtb	r2, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	701a      	strb	r2, [r3, #0]
 800a008:	e001      	b.n	800a00e <process_accel_bw+0x5e>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a00a:	23fc      	movs	r3, #252	@ 0xfc
 800a00c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3714      	adds	r7, #20
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a01e:	b480      	push	{r7}
 800a020:	b085      	sub	sp, #20
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
 800a026:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a030:	2300      	movs	r3, #0
 800a032:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	7f9b      	ldrb	r3, [r3, #30]
 800a038:	2b0c      	cmp	r3, #12
 800a03a:	d81b      	bhi.n	800a074 <process_accel_range+0x56>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	7f9a      	ldrb	r2, [r3, #30]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800a046:	429a      	cmp	r2, r3
 800a048:	d016      	beq.n	800a078 <process_accel_range+0x5a>
        {
            range = (uint8_t)dev->accel_cfg.range;
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	7f9b      	ldrb	r3, [r3, #30]
 800a04e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	f023 030f 	bic.w	r3, r3, #15
 800a058:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 800a05a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a05e:	f003 030f 	and.w	r3, r3, #15
 800a062:	b25a      	sxtb	r2, r3
 800a064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a068:	4313      	orrs	r3, r2
 800a06a:	b25b      	sxtb	r3, r3
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e001      	b.n	800a078 <process_accel_range+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a074:	23fc      	movs	r3, #252	@ 0xfc
 800a076:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800a094:	f107 010e 	add.w	r1, r7, #14
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	2002      	movs	r0, #2
 800a09e:	f7ff fb53 	bl	8009748 <bmi160_get_regs>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	f003 030f 	and.w	r3, r3, #15
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d102      	bne.n	800a0c4 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 800a0be:	23fa      	movs	r3, #250	@ 0xfa
 800a0c0:	73fb      	strb	r3, [r7, #15]
 800a0c2:	e010      	b.n	800a0e6 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 800a0c4:	7bbb      	ldrb	r3, [r7, #14]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	d102      	bne.n	800a0d0 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800a0ca:	23f9      	movs	r3, #249	@ 0xf9
 800a0cc:	73fb      	strb	r3, [r7, #15]
 800a0ce:	e00a      	b.n	800a0e6 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 800a0d0:	7bbb      	ldrb	r3, [r7, #14]
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	d102      	bne.n	800a0dc <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 800a0d6:	23f8      	movs	r3, #248	@ 0xf8
 800a0d8:	73fb      	strb	r3, [r7, #15]
 800a0da:	e004      	b.n	800a0e6 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b07      	cmp	r3, #7
 800a0e0:	d101      	bne.n	800a0e6 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 800a0e2:	23f7      	movs	r3, #247	@ 0xf7
 800a0e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a0e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 800a0fe:	f107 030c 	add.w	r3, r7, #12
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	4618      	mov	r0, r3
 800a106:	f000 f839 	bl	800a17c <check_gyro_config>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a10e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d12c      	bne.n	800a170 <set_gyro_conf+0x7e>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 800a116:	f107 010c 	add.w	r1, r7, #12
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	2042      	movs	r0, #66	@ 0x42
 800a120:	f7ff fb45 	bl	80097ae <bmi160_set_regs>
 800a124:	4603      	mov	r3, r0
 800a126:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d11f      	bne.n	800a170 <set_gyro_conf+0x7e>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800a148:	f107 030c 	add.w	r3, r7, #12
 800a14c:	1c59      	adds	r1, r3, #1
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	2043      	movs	r0, #67	@ 0x43
 800a154:	f7ff fb2b 	bl	80097ae <bmi160_set_regs>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d105      	bne.n	800a170 <set_gyro_conf+0x7e>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
            }
        }
    }

    return rslt;
 800a170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a174:	4618      	mov	r0, r3
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2202      	movs	r2, #2
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	2042      	movs	r0, #66	@ 0x42
 800a18e:	f7ff fadb 	bl	8009748 <bmi160_get_regs>
 800a192:	4603      	mov	r3, r0
 800a194:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d11b      	bne.n	800a1d6 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f81e 	bl	800a1e2 <process_gyro_odr>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a1aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d111      	bne.n	800a1d6 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f84c 	bl	800a252 <process_gyro_bw>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d107      	bne.n	800a1d6 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f872 	bl	800a2b6 <process_gyro_range>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800a1d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a1fe:	2b0d      	cmp	r3, #13
 800a200:	d81d      	bhi.n	800a23e <process_gyro_odr+0x5c>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800a20e:	429a      	cmp	r2, r3
 800a210:	d017      	beq.n	800a242 <process_gyro_odr+0x60>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800a218:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	f023 030f 	bic.w	r3, r3, #15
 800a222:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800a224:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b25a      	sxtb	r2, r3
 800a22e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a232:	4313      	orrs	r3, r2
 800a234:	b25b      	sxtb	r3, r3
 800a236:	b2da      	uxtb	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	701a      	strb	r2, [r3, #0]
 800a23c:	e001      	b.n	800a242 <process_gyro_odr+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a23e:	23fc      	movs	r3, #252	@ 0xfc
 800a240:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 800a252:	b480      	push	{r7}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d817      	bhi.n	800a2a2 <process_gyro_bw+0x50>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a278:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a282:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800a284:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a288:	011b      	lsls	r3, r3, #4
 800a28a:	b25b      	sxtb	r3, r3
 800a28c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a290:	b25a      	sxtb	r2, r3
 800a292:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a296:	4313      	orrs	r3, r2
 800a298:	b25b      	sxtb	r3, r3
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	701a      	strb	r2, [r3, #0]
 800a2a0:	e001      	b.n	800a2a6 <process_gyro_bw+0x54>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a2a2:	23fc      	movs	r3, #252	@ 0xfc
 800a2a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a2a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d81d      	bhi.n	800a312 <process_gyro_range+0x5c>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d017      	beq.n	800a316 <process_gyro_range+0x60>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a2ec:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 800a2f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a2fc:	f003 0307 	and.w	r3, r3, #7
 800a300:	b25a      	sxtb	r2, r3
 800a302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a306:	4313      	orrs	r3, r2
 800a308:	b25b      	sxtb	r3, r3
 800a30a:	b2da      	uxtb	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	e001      	b.n	800a316 <process_gyro_range+0x60>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a312:	23fc      	movs	r3, #252	@ 0xfc
 800a314:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a32e:	2300      	movs	r3, #0
 800a330:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7f1b      	ldrb	r3, [r3, #28]
 800a33a:	2b0f      	cmp	r3, #15
 800a33c:	d92f      	bls.n	800a39e <set_accel_pwr+0x78>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7f1b      	ldrb	r3, [r3, #28]
 800a342:	2b12      	cmp	r3, #18
 800a344:	d82b      	bhi.n	800a39e <set_accel_pwr+0x78>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	7f1a      	ldrb	r2, [r3, #28]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a350:	429a      	cmp	r2, r3
 800a352:	d027      	beq.n	800a3a4 <set_accel_pwr+0x7e>
        {
            rslt = process_under_sampling(&data, dev);
 800a354:	f107 030e 	add.w	r3, r7, #14
 800a358:	6879      	ldr	r1, [r7, #4]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 f829 	bl	800a3b2 <process_under_sampling>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d11b      	bne.n	800a3a4 <set_accel_pwr+0x7e>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f103 011c 	add.w	r1, r3, #28
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	207e      	movs	r0, #126	@ 0x7e
 800a378:	f7ff fa19 	bl	80097ae <bmi160_set_regs>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a386:	2b10      	cmp	r3, #16
 800a388:	d103      	bne.n	800a392 <set_accel_pwr+0x6c>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38e:	2005      	movs	r0, #5
 800a390:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7f1a      	ldrb	r2, [r3, #28]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f883 2020 	strb.w	r2, [r3, #32]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a39c:	e002      	b.n	800a3a4 <set_accel_pwr+0x7e>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800a39e:	23f3      	movs	r3, #243	@ 0xf3
 800a3a0:	73fb      	strb	r3, [r7, #15]
 800a3a2:	e000      	b.n	800a3a6 <set_accel_pwr+0x80>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a3a4:	bf00      	nop
    }

    return rslt;
 800a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	2040      	movs	r0, #64	@ 0x40
 800a3cc:	f7ff f9bc 	bl	8009748 <bmi160_get_regs>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a3d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d139      	bne.n	800a450 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	7f1b      	ldrb	r3, [r3, #28]
 800a3e0:	2b12      	cmp	r3, #18
 800a3e2:	d120      	bne.n	800a426 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ec:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	2040      	movs	r0, #64	@ 0x40
 800a402:	f7ff f9d4 	bl	80097ae <bmi160_set_regs>
 800a406:	4603      	mov	r3, r0
 800a408:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 800a40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d11e      	bne.n	800a450 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800a412:	f107 010c 	add.w	r1, r7, #12
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2202      	movs	r2, #2
 800a41a:	2058      	movs	r0, #88	@ 0x58
 800a41c:	f7ff f9c7 	bl	80097ae <bmi160_set_regs>
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	e014      	b.n	800a450 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b25b      	sxtb	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da0f      	bge.n	800a450 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a438:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	7bba      	ldrb	r2, [r7, #14]
 800a43e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	2201      	movs	r2, #1
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	2040      	movs	r0, #64	@ 0x40
 800a448:	f7ff f9b1 	bl	80097ae <bmi160_set_regs>
 800a44c:	4603      	mov	r3, r0
 800a44e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3710      	adds	r7, #16
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a46e:	2b14      	cmp	r3, #20
 800a470:	d009      	beq.n	800a486 <set_gyro_pwr+0x2a>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a478:	2b15      	cmp	r3, #21
 800a47a:	d004      	beq.n	800a486 <set_gyro_pwr+0x2a>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800a482:	2b17      	cmp	r3, #23
 800a484:	d130      	bne.n	800a4e8 <set_gyro_pwr+0x8c>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a492:	429a      	cmp	r2, r3
 800a494:	d02a      	beq.n	800a4ec <set_gyro_pwr+0x90>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	207e      	movs	r0, #126	@ 0x7e
 800a4a2:	f7ff f984 	bl	80097ae <bmi160_set_regs>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4b0:	2b14      	cmp	r3, #20
 800a4b2:	d104      	bne.n	800a4be <set_gyro_pwr+0x62>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4b8:	2050      	movs	r0, #80	@ 0x50
 800a4ba:	4798      	blx	r3
 800a4bc:	e00d      	b.n	800a4da <set_gyro_pwr+0x7e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4c4:	2b17      	cmp	r3, #23
 800a4c6:	d108      	bne.n	800a4da <set_gyro_pwr+0x7e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800a4ce:	2b15      	cmp	r3, #21
 800a4d0:	d103      	bne.n	800a4da <set_gyro_pwr+0x7e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d6:	200a      	movs	r0, #10
 800a4d8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800a4e6:	e001      	b.n	800a4ec <set_gyro_pwr+0x90>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800a4e8:	23f3      	movs	r3, #243	@ 0xf3
 800a4ea:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08c      	sub	sp, #48	@ 0x30
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	4603      	mov	r3, r0
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a506:	2300      	movs	r3, #0
 800a508:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	605a      	str	r2, [r3, #4]
 800a516:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a522:	2300      	movs	r3, #0
 800a524:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800a526:	7bfb      	ldrb	r3, [r7, #15]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	3306      	adds	r3, #6
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	f107 0114 	add.w	r1, r7, #20
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2012      	movs	r0, #18
 800a536:	f7ff f907 	bl	8009748 <bmi160_get_regs>
 800a53a:	4603      	mov	r3, r0
 800a53c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800a540:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a544:	2b00      	cmp	r3, #0
 800a546:	f040 809a 	bne.w	800a67e <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 800a54a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a554:	3330      	adds	r3, #48	@ 0x30
 800a556:	443b      	add	r3, r7
 800a558:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a55c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a560:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a56a:	3330      	adds	r3, #48	@ 0x30
 800a56c:	443b      	add	r3, r7
 800a56e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a572:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a576:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a57a:	b21b      	sxth	r3, r3
 800a57c:	021b      	lsls	r3, r3, #8
 800a57e:	b21a      	sxth	r2, r3
 800a580:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a584:	b21b      	sxth	r3, r3
 800a586:	4313      	orrs	r3, r2
 800a588:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	8c3a      	ldrh	r2, [r7, #32]
 800a58e:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800a590:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a594:	1c5a      	adds	r2, r3, #1
 800a596:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a59a:	3330      	adds	r3, #48	@ 0x30
 800a59c:	443b      	add	r3, r7
 800a59e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a5a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a5a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5aa:	1c5a      	adds	r2, r3, #1
 800a5ac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a5b0:	3330      	adds	r3, #48	@ 0x30
 800a5b2:	443b      	add	r3, r7
 800a5b4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a5b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a5bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a5c0:	b21b      	sxth	r3, r3
 800a5c2:	021b      	lsls	r3, r3, #8
 800a5c4:	b21a      	sxth	r2, r3
 800a5c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5ca:	b21b      	sxth	r3, r3
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	8c3a      	ldrh	r2, [r7, #32]
 800a5d4:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800a5d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a5e0:	3330      	adds	r3, #48	@ 0x30
 800a5e2:	443b      	add	r3, r7
 800a5e4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a5e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a5ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a5f6:	3330      	adds	r3, #48	@ 0x30
 800a5f8:	443b      	add	r3, r7
 800a5fa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a5fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a602:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a606:	b21b      	sxth	r3, r3
 800a608:	021b      	lsls	r3, r3, #8
 800a60a:	b21a      	sxth	r2, r3
 800a60c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a610:	b21b      	sxth	r3, r3
 800a612:	4313      	orrs	r3, r2
 800a614:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	8c3a      	ldrh	r2, [r7, #32]
 800a61a:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800a61c:	7bfb      	ldrb	r3, [r7, #15]
 800a61e:	2b03      	cmp	r3, #3
 800a620:	d129      	bne.n	800a676 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 800a622:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a62c:	3330      	adds	r3, #48	@ 0x30
 800a62e:	443b      	add	r3, r7
 800a630:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a634:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800a638:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a642:	3330      	adds	r3, #48	@ 0x30
 800a644:	443b      	add	r3, r7
 800a646:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a64a:	021b      	lsls	r3, r3, #8
 800a64c:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800a64e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a652:	1c5a      	adds	r2, r3, #1
 800a654:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a658:	3330      	adds	r3, #48	@ 0x30
 800a65a:	443b      	add	r3, r7
 800a65c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800a660:	041b      	lsls	r3, r3, #16
 800a662:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800a664:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a668:	431a      	orrs	r2, r3
 800a66a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a66e:	431a      	orrs	r2, r3
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	609a      	str	r2, [r3, #8]
 800a674:	e006      	b.n	800a684 <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2200      	movs	r2, #0
 800a67a:	609a      	str	r2, [r3, #8]
 800a67c:	e002      	b.n	800a684 <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800a67e:	23fe      	movs	r3, #254	@ 0xfe
 800a680:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800a684:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3730      	adds	r7, #48	@ 0x30
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	@ 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800a6a4:	f107 0310 	add.w	r3, r7, #16
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	605a      	str	r2, [r3, #4]
 800a6ae:	609a      	str	r2, [r3, #8]
 800a6b0:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800a6c2:	7bfb      	ldrb	r3, [r7, #15]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d17e      	bne.n	800a7c6 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 800a6c8:	f107 0110 	add.w	r1, r7, #16
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2206      	movs	r2, #6
 800a6d0:	200c      	movs	r0, #12
 800a6d2:	f7ff f839 	bl	8009748 <bmi160_get_regs>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800a6dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d16c      	bne.n	800a7be <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800a6e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a6ee:	3330      	adds	r3, #48	@ 0x30
 800a6f0:	443b      	add	r3, r7
 800a6f2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a6f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a6fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a704:	3330      	adds	r3, #48	@ 0x30
 800a706:	443b      	add	r3, r7
 800a708:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a70c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a710:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a714:	b21b      	sxth	r3, r3
 800a716:	021b      	lsls	r3, r3, #8
 800a718:	b21a      	sxth	r2, r3
 800a71a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a71e:	b21b      	sxth	r3, r3
 800a720:	4313      	orrs	r3, r2
 800a722:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	8c3a      	ldrh	r2, [r7, #32]
 800a728:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800a72a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a734:	3330      	adds	r3, #48	@ 0x30
 800a736:	443b      	add	r3, r7
 800a738:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a73c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a740:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a744:	1c5a      	adds	r2, r3, #1
 800a746:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a74a:	3330      	adds	r3, #48	@ 0x30
 800a74c:	443b      	add	r3, r7
 800a74e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a752:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a756:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a75a:	b21b      	sxth	r3, r3
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	b21a      	sxth	r2, r3
 800a760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a764:	b21b      	sxth	r3, r3
 800a766:	4313      	orrs	r3, r2
 800a768:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	8c3a      	ldrh	r2, [r7, #32]
 800a76e:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800a770:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a77a:	3330      	adds	r3, #48	@ 0x30
 800a77c:	443b      	add	r3, r7
 800a77e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a790:	3330      	adds	r3, #48	@ 0x30
 800a792:	443b      	add	r3, r7
 800a794:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a79c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a7a0:	b21b      	sxth	r3, r3
 800a7a2:	021b      	lsls	r3, r3, #8
 800a7a4:	b21a      	sxth	r2, r3
 800a7a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	8c3a      	ldrh	r2, [r7, #32]
 800a7b4:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	609a      	str	r2, [r3, #8]
 800a7bc:	e0b0      	b.n	800a920 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800a7be:	23fe      	movs	r3, #254	@ 0xfe
 800a7c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a7c4:	e0ac      	b.n	800a920 <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800a7c6:	7bfb      	ldrb	r3, [r7, #15]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	330c      	adds	r3, #12
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	f107 0110 	add.w	r1, r7, #16
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	200c      	movs	r0, #12
 800a7d6:	f7fe ffb7 	bl	8009748 <bmi160_get_regs>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800a7e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f040 8098 	bne.w	800a91a <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800a7ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7ee:	1c5a      	adds	r2, r3, #1
 800a7f0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a7f4:	3330      	adds	r3, #48	@ 0x30
 800a7f6:	443b      	add	r3, r7
 800a7f8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a7fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a800:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a80a:	3330      	adds	r3, #48	@ 0x30
 800a80c:	443b      	add	r3, r7
 800a80e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a812:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a816:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a81a:	b21b      	sxth	r3, r3
 800a81c:	021b      	lsls	r3, r3, #8
 800a81e:	b21a      	sxth	r2, r3
 800a820:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a824:	b21b      	sxth	r3, r3
 800a826:	4313      	orrs	r3, r2
 800a828:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	8c3a      	ldrh	r2, [r7, #32]
 800a82e:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800a830:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a83a:	3330      	adds	r3, #48	@ 0x30
 800a83c:	443b      	add	r3, r7
 800a83e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a846:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a850:	3330      	adds	r3, #48	@ 0x30
 800a852:	443b      	add	r3, r7
 800a854:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a85c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a860:	b21b      	sxth	r3, r3
 800a862:	021b      	lsls	r3, r3, #8
 800a864:	b21a      	sxth	r2, r3
 800a866:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a86a:	b21b      	sxth	r3, r3
 800a86c:	4313      	orrs	r3, r2
 800a86e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	8c3a      	ldrh	r2, [r7, #32]
 800a874:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800a876:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a87a:	1c5a      	adds	r2, r3, #1
 800a87c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a880:	3330      	adds	r3, #48	@ 0x30
 800a882:	443b      	add	r3, r7
 800a884:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a888:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800a88c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a896:	3330      	adds	r3, #48	@ 0x30
 800a898:	443b      	add	r3, r7
 800a89a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a89e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800a8a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a8a6:	b21b      	sxth	r3, r3
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	b21a      	sxth	r2, r3
 800a8ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a8b0:	b21b      	sxth	r3, r3
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	8c3a      	ldrh	r2, [r7, #32]
 800a8ba:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 800a8bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8c0:	3306      	adds	r3, #6
 800a8c2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 800a8c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8d0:	3330      	adds	r3, #48	@ 0x30
 800a8d2:	443b      	add	r3, r7
 800a8d4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a8d8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800a8dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8e6:	3330      	adds	r3, #48	@ 0x30
 800a8e8:	443b      	add	r3, r7
 800a8ea:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a8ee:	021b      	lsls	r3, r3, #8
 800a8f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800a8f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8f6:	1c5a      	adds	r2, r3, #1
 800a8f8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a8fc:	3330      	adds	r3, #48	@ 0x30
 800a8fe:	443b      	add	r3, r7
 800a900:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a904:	041b      	lsls	r3, r3, #16
 800a906:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800a908:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90c:	431a      	orrs	r2, r3
 800a90e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a912:	431a      	orrs	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	609a      	str	r2, [r3, #8]
 800a918:	e002      	b.n	800a920 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800a91a:	23fe      	movs	r3, #254	@ 0xfe
 800a91c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800a920:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800a924:	4618      	mov	r0, r3
 800a926:	3730      	adds	r7, #48	@ 0x30
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08c      	sub	sp, #48	@ 0x30
 800a930:	af00      	add	r7, sp, #0
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800a942:	f107 0310 	add.w	r3, r7, #16
 800a946:	2200      	movs	r2, #0
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	605a      	str	r2, [r3, #4]
 800a94c:	609a      	str	r2, [r3, #8]
 800a94e:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800a960:	7bfb      	ldrb	r3, [r7, #15]
 800a962:	b29b      	uxth	r3, r3
 800a964:	330c      	adds	r3, #12
 800a966:	b29a      	uxth	r2, r3
 800a968:	f107 0110 	add.w	r1, r7, #16
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	200c      	movs	r0, #12
 800a970:	f7fe feea 	bl	8009748 <bmi160_get_regs>
 800a974:	4603      	mov	r3, r0
 800a976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800a97a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 810e 	bne.w	800aba0 <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800a984:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a98e:	3330      	adds	r3, #48	@ 0x30
 800a990:	443b      	add	r3, r7
 800a992:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a99a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a9a4:	3330      	adds	r3, #48	@ 0x30
 800a9a6:	443b      	add	r3, r7
 800a9a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a9ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a9b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a9b4:	b21b      	sxth	r3, r3
 800a9b6:	021b      	lsls	r3, r3, #8
 800a9b8:	b21a      	sxth	r2, r3
 800a9ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a9be:	b21b      	sxth	r3, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8c3a      	ldrh	r2, [r7, #32]
 800a9c8:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800a9ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a9d4:	3330      	adds	r3, #48	@ 0x30
 800a9d6:	443b      	add	r3, r7
 800a9d8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a9dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800a9e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a9e4:	1c5a      	adds	r2, r3, #1
 800a9e6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800a9ea:	3330      	adds	r3, #48	@ 0x30
 800a9ec:	443b      	add	r3, r7
 800a9ee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800a9f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800a9f6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800a9fa:	b21b      	sxth	r3, r3
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	b21a      	sxth	r2, r3
 800aa00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa04:	b21b      	sxth	r3, r3
 800aa06:	4313      	orrs	r3, r2
 800aa08:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	8c3a      	ldrh	r2, [r7, #32]
 800aa0e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800aa10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa14:	1c5a      	adds	r2, r3, #1
 800aa16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa1a:	3330      	adds	r3, #48	@ 0x30
 800aa1c:	443b      	add	r3, r7
 800aa1e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aa26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa2a:	1c5a      	adds	r2, r3, #1
 800aa2c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa30:	3330      	adds	r3, #48	@ 0x30
 800aa32:	443b      	add	r3, r7
 800aa34:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aa3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa40:	b21b      	sxth	r3, r3
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa4a:	b21b      	sxth	r3, r3
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	8c3a      	ldrh	r2, [r7, #32]
 800aa54:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800aa56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa60:	3330      	adds	r3, #48	@ 0x30
 800aa62:	443b      	add	r3, r7
 800aa64:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aa6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aa76:	3330      	adds	r3, #48	@ 0x30
 800aa78:	443b      	add	r3, r7
 800aa7a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aa7e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aa82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aa86:	b21b      	sxth	r3, r3
 800aa88:	021b      	lsls	r3, r3, #8
 800aa8a:	b21a      	sxth	r2, r3
 800aa8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa90:	b21b      	sxth	r3, r3
 800aa92:	4313      	orrs	r3, r2
 800aa94:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	8c3a      	ldrh	r2, [r7, #32]
 800aa9a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800aa9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aaa6:	3330      	adds	r3, #48	@ 0x30
 800aaa8:	443b      	add	r3, r7
 800aaaa:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aaae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aab2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aab6:	1c5a      	adds	r2, r3, #1
 800aab8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aabc:	3330      	adds	r3, #48	@ 0x30
 800aabe:	443b      	add	r3, r7
 800aac0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800aac8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aacc:	b21b      	sxth	r3, r3
 800aace:	021b      	lsls	r3, r3, #8
 800aad0:	b21a      	sxth	r2, r3
 800aad2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aad6:	b21b      	sxth	r3, r3
 800aad8:	4313      	orrs	r3, r2
 800aada:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	8c3a      	ldrh	r2, [r7, #32]
 800aae0:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800aae2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aaec:	3330      	adds	r3, #48	@ 0x30
 800aaee:	443b      	add	r3, r7
 800aaf0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aaf4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800aaf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aafc:	1c5a      	adds	r2, r3, #1
 800aafe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab02:	3330      	adds	r3, #48	@ 0x30
 800ab04:	443b      	add	r3, r7
 800ab06:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab0a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800ab0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ab12:	b21b      	sxth	r3, r3
 800ab14:	021b      	lsls	r3, r3, #8
 800ab16:	b21a      	sxth	r2, r3
 800ab18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ab1c:	b21b      	sxth	r3, r3
 800ab1e:	4313      	orrs	r3, r2
 800ab20:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	8c3a      	ldrh	r2, [r7, #32]
 800ab26:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d131      	bne.n	800ab92 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 800ab2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab38:	3330      	adds	r3, #48	@ 0x30
 800ab3a:	443b      	add	r3, r7
 800ab3c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab40:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800ab44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab48:	1c5a      	adds	r2, r3, #1
 800ab4a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab4e:	3330      	adds	r3, #48	@ 0x30
 800ab50:	443b      	add	r3, r7
 800ab52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800ab5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab5e:	1c5a      	adds	r2, r3, #1
 800ab60:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ab64:	3330      	adds	r3, #48	@ 0x30
 800ab66:	443b      	add	r3, r7
 800ab68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ab6c:	041b      	lsls	r3, r3, #16
 800ab6e:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800ab70:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	431a      	orrs	r2, r3
 800ab76:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ab7a:	431a      	orrs	r2, r3
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800ab80:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800ab82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab84:	431a      	orrs	r2, r3
 800ab86:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	609a      	str	r2, [r3, #8]
 800ab90:	e009      	b.n	800aba6 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	2200      	movs	r2, #0
 800ab96:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	609a      	str	r2, [r3, #8]
 800ab9e:	e002      	b.n	800aba6 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800aba0:	23fe      	movs	r3, #254	@ 0xfe
 800aba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800aba6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3730      	adds	r7, #48	@ 0x30
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <perform_accel_self_test>:

/*!
 * @brief This API performs the self test for accelerometer of BMI160
 */
static int8_t perform_accel_self_test(struct bmi160_dev *dev)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b08a      	sub	sp, #40	@ 0x28
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    struct bmi160_sensor_data accel_pos, accel_neg;

    /* Enable Gyro self test bit */
    rslt = enable_accel_self_test(dev);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f832 	bl	800ac24 <enable_accel_self_test>
 800abc0:	4603      	mov	r3, r0
 800abc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI160_OK)
 800abc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d124      	bne.n	800ac18 <perform_accel_self_test+0x66>
    {
        /* Perform accel self test with positive excitation */
        rslt = accel_self_test_positive_excitation(&accel_pos, dev);
 800abce:	f107 0318 	add.w	r3, r7, #24
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 f849 	bl	800ac6c <accel_self_test_positive_excitation>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI160_OK)
 800abe0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d117      	bne.n	800ac18 <perform_accel_self_test+0x66>
        {
            /* Perform accel self test with negative excitation */
            rslt = accel_self_test_negative_excitation(&accel_neg, dev);
 800abe8:	f107 030c 	add.w	r3, r7, #12
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f862 	bl	800acb8 <accel_self_test_negative_excitation>
 800abf4:	4603      	mov	r3, r0
 800abf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BMI160_OK)
 800abfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10a      	bne.n	800ac18 <perform_accel_self_test+0x66>
            {
                /* Validate the self test result */
                rslt = validate_accel_self_test(&accel_pos, &accel_neg);
 800ac02:	f107 020c 	add.w	r2, r7, #12
 800ac06:	f107 0318 	add.w	r3, r7, #24
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f879 	bl	800ad04 <validate_accel_self_test>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return rslt;
 800ac18:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3728      	adds	r7, #40	@ 0x28
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <enable_accel_self_test>:
/*!
 * @brief This API enables to perform the accel self test by setting proper
 * configurations to facilitate accel self test
 */
static int8_t enable_accel_self_test(struct bmi160_dev *dev)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Set the Accel power mode as normal mode */
    dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2211      	movs	r2, #17
 800ac30:	771a      	strb	r2, [r3, #28]

    /* Set the sensor range configuration as 8G */
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2208      	movs	r2, #8
 800ac36:	779a      	strb	r2, [r3, #30]
    rslt = bmi160_set_sens_conf(dev);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7fe fea8 	bl	800998e <bmi160_set_sens_conf>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ac42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d10a      	bne.n	800ac60 <enable_accel_self_test+0x3c>
    {
        /* Accel configurations are set to facilitate self test
         * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
        reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
 800ac4a:	232c      	movs	r3, #44	@ 0x2c
 800ac4c:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
 800ac4e:	f107 010e 	add.w	r1, r7, #14
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	2040      	movs	r0, #64	@ 0x40
 800ac58:	f7fe fda9 	bl	80097ae <bmi160_set_regs>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ac60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <accel_self_test_positive_excitation>:

/*!
 * @brief This API performs accel self test with positive excitation
 */
static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const struct bmi160_dev *dev)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with positive self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
 800ac76:	230d      	movs	r3, #13
 800ac78:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800ac7a:	f107 010e 	add.w	r1, r7, #14
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	2201      	movs	r2, #1
 800ac82:	206d      	movs	r0, #109	@ 0x6d
 800ac84:	f7fe fd93 	bl	80097ae <bmi160_set_regs>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ac8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10b      	bne.n	800acac <accel_self_test_positive_excitation+0x40>
    {
        /* Read the data after a delay of 50ms - refer datasheet  2.8.1 accel self test*/
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac98:	2032      	movs	r0, #50	@ 0x32
 800ac9a:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	2001      	movs	r0, #1
 800aca4:	f7fe fecd 	bl	8009a42 <bmi160_get_sensor_data>
 800aca8:	4603      	mov	r3, r0
 800acaa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800acac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <accel_self_test_negative_excitation>:

/*!
 * @brief This API performs accel self test with negative excitation
 */
static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const struct bmi160_dev *dev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with negative self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
 800acc2:	2309      	movs	r3, #9
 800acc4:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800acc6:	f107 010e 	add.w	r1, r7, #14
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	2201      	movs	r2, #1
 800acce:	206d      	movs	r0, #109	@ 0x6d
 800acd0:	f7fe fd6d 	bl	80097ae <bmi160_set_regs>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800acd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <accel_self_test_negative_excitation+0x40>
    {
        /* Read the data after a delay of 50ms */
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace4:	2032      	movs	r0, #50	@ 0x32
 800ace6:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	2200      	movs	r2, #0
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	2001      	movs	r0, #1
 800acf0:	f7fe fea7 	bl	8009a42 <bmi160_get_sensor_data>
 800acf4:	4603      	mov	r3, r0
 800acf6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800acf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <validate_accel_self_test>:
/*!
 * @brief This API validates the accel self test results
 */
static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,
                                       const struct bmi160_sensor_data *accel_neg)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Validate the results of self test */
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad14:	461a      	mov	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad22:	dd18      	ble.n	800ad56 <validate_accel_self_test+0x52>
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ad32:	1ad3      	subs	r3, r2, r3
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800ad34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad38:	dd0d      	ble.n	800ad56 <validate_accel_self_test+0x52>
        ((accel_neg->z - accel_pos->z) > BMI160_ACCEL_SELF_TEST_LIMIT))
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad40:	461a      	mov	r2, r3
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad48:	1ad3      	subs	r3, r2, r3
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800ad4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad4e:	dd02      	ble.n	800ad56 <validate_accel_self_test+0x52>
    {
        /* Self test pass condition */
        rslt = BMI160_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
 800ad54:	e001      	b.n	800ad5a <validate_accel_self_test+0x56>
    }
    else
    {
        rslt = BMI160_W_ACCEl_SELF_TEST_FAIL;
 800ad56:	2302      	movs	r3, #2
 800ad58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ad5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <perform_gyro_self_test>:

/*!
 * @brief This API performs the self test for gyroscope of BMI160
 */
static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Enable Gyro self test bit */
    rslt = enable_gyro_self_test(dev);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f815 	bl	800ada2 <enable_gyro_self_test>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ad7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d108      	bne.n	800ad96 <perform_gyro_self_test+0x2c>
    {
        /* Validate the gyro self test a delay of 50ms */
        dev->delay_ms(50);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad88:	2032      	movs	r0, #50	@ 0x32
 800ad8a:	4798      	blx	r3

        /* Validate the gyro self test results */
        rslt = validate_gyro_self_test(dev);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f835 	bl	800adfc <validate_gyro_self_test>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ad96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <enable_gyro_self_test>:

/*!
 * @brief This API enables the self test bit to trigger self test for Gyro
 */
static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable the Gyro self test bit to trigger the self test */
    rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800adaa:	f107 010e 	add.w	r1, r7, #14
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2201      	movs	r2, #1
 800adb2:	206d      	movs	r0, #109	@ 0x6d
 800adb4:	f7fe fcc8 	bl	8009748 <bmi160_get_regs>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800adbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d115      	bne.n	800adf0 <enable_gyro_self_test+0x4e>
    {
        reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	f043 0310 	orr.w	r3, r3, #16
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800adce:	f107 010e 	add.w	r1, r7, #14
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	206d      	movs	r0, #109	@ 0x6d
 800add8:	f7fe fce9 	bl	80097ae <bmi160_set_regs>
 800addc:	4603      	mov	r3, r0
 800adde:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800ade0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d103      	bne.n	800adf0 <enable_gyro_self_test+0x4e>
        {
            /* Delay to enable gyro self test */
            dev->delay_ms(15);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adec:	200f      	movs	r0, #15
 800adee:	4798      	blx	r3
        }
    }

    return rslt;
 800adf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <validate_gyro_self_test>:

/*!
 * @brief This API validates the self test results of Gyro
 */
static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Validate the Gyro self test result */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
 800ae04:	f107 010e 	add.w	r1, r7, #14
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	201b      	movs	r0, #27
 800ae0e:	f7fe fc9b 	bl	8009748 <bmi160_get_regs>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800ae16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10e      	bne.n	800ae3c <validate_gyro_self_test+0x40>
    {

        reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	105b      	asrs	r3, r3, #1
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f003 0301 	and.w	r3, r3, #1
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	73bb      	strb	r3, [r7, #14]
        if (reg_data == BMI160_ENABLE)
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d102      	bne.n	800ae38 <validate_gyro_self_test+0x3c>
        {
            /* Gyro self test success case */
            rslt = BMI160_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
 800ae36:	e001      	b.n	800ae3c <validate_gyro_self_test+0x40>
        }
        else
        {
            rslt = BMI160_W_GYRO_SELF_TEST_FAIL;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800ae3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <bmi160_i2c_write>:
		  Error_Handler();
	  }
}

int8_t bmi160_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af04      	add	r7, sp, #16
 800ae4e:	603a      	str	r2, [r7, #0]
 800ae50:	461a      	mov	r2, r3
 800ae52:	4603      	mov	r3, r0
 800ae54:	71fb      	strb	r3, [r7, #7]
 800ae56:	460b      	mov	r3, r1
 800ae58:	71bb      	strb	r3, [r7, #6]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	b299      	uxth	r1, r3
 800ae68:	79bb      	ldrb	r3, [r7, #6]
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae70:	9302      	str	r3, [sp, #8]
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	9300      	str	r3, [sp, #0]
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	4803      	ldr	r0, [pc, #12]	@ (800ae8c <bmi160_i2c_write+0x44>)
 800ae7e:	f7f7 f9d3 	bl	8002228 <HAL_I2C_Mem_Write>
	return ( BMI160_OK );
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	200002f4 	.word	0x200002f4

0800ae90 <bmi160_i2c_read>:
int8_t bmi160_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af04      	add	r7, sp, #16
 800ae96:	603a      	str	r2, [r7, #0]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	71fb      	strb	r3, [r7, #7]
 800ae9e:	460b      	mov	r3, r1
 800aea0:	71bb      	strb	r3, [r7, #6]
 800aea2:	4613      	mov	r3, r2
 800aea4:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	b299      	uxth	r1, r3
 800aeb6:	79bb      	ldrb	r3, [r7, #6]
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	88bb      	ldrh	r3, [r7, #4]
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	2301      	movs	r3, #1
 800aeca:	4804      	ldr	r0, [pc, #16]	@ (800aedc <bmi160_i2c_read+0x4c>)
 800aecc:	f7f7 faa6 	bl	800241c <HAL_I2C_Mem_Read>
	return ( BMI160_OK );
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	200002f4 	.word	0x200002f4

0800aee0 <delay_ms>:
void delay_ms(uint32_t period)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);		//Systick yerine TIM6 olacak
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7f6 fd6d 	bl	80019c8 <HAL_Delay>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <bmi160_interface_init>:

int8_t bmi160_interface_init(struct bmi160_dev *bmi160)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b088      	sub	sp, #32
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <bmi160_interface_init+0x12>
	{
	  Error_Handler();
 800af06:	f7f6 fadf 	bl	80014c8 <Error_Handler>

#if ( ( BMI160_I2C_INTERFACE) && ( !BMI160_SPI_INTERFACE ) )

	int8_t rslt;

	bmi160_soft_reset(bmi160);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f7fe fd04 	bl	8009918 <bmi160_soft_reset>

	bmi160->id = BMI160_DEV_ADDR;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2268      	movs	r2, #104	@ 0x68
 800af14:	765a      	strb	r2, [r3, #25]
	bmi160->intf = BMI160_I2C_INTF;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	769a      	strb	r2, [r3, #26]
	bmi160->read = bmi160_i2c_read;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a5e      	ldr	r2, [pc, #376]	@ (800b098 <bmi160_interface_init+0x1a0>)
 800af20:	635a      	str	r2, [r3, #52]	@ 0x34
	bmi160->write = bmi160_i2c_write;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a5d      	ldr	r2, [pc, #372]	@ (800b09c <bmi160_interface_init+0x1a4>)
 800af26:	639a      	str	r2, [r3, #56]	@ 0x38
	bmi160->delay_ms = delay_ms;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a5d      	ldr	r2, [pc, #372]	@ (800b0a0 <bmi160_interface_init+0x1a8>)
 800af2c:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* After sensor init introduce 200 msec sleep */
	bmi160->delay_ms(200);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af32:	20c8      	movs	r0, #200	@ 0xc8
 800af34:	4798      	blx	r3

	rslt = bmi160_init(bmi160);
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f7fe fc9e 	bl	8009878 <bmi160_init>
 800af3c:	4603      	mov	r3, r0
 800af3e:	77fb      	strb	r3, [r7, #31]

	if ( rslt != BMI160_OK )
 800af40:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d004      	beq.n	800af52 <bmi160_interface_init+0x5a>
	{
		printf("BMI160 initialization failure !\n");
 800af48:	4856      	ldr	r0, [pc, #344]	@ (800b0a4 <bmi160_interface_init+0x1ac>)
 800af4a:	f003 fe6d 	bl	800ec28 <puts>
		Error_Handler();
 800af4e:	f7f6 fabb 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 initialization success !\n");
 800af52:	4855      	ldr	r0, [pc, #340]	@ (800b0a8 <bmi160_interface_init+0x1b0>)
 800af54:	f003 fe68 	bl	800ec28 <puts>
	printf("Chip ID 0x%X\n" , bmi160->chip_id);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7e1b      	ldrb	r3, [r3, #24]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4853      	ldr	r0, [pc, #332]	@ (800b0ac <bmi160_interface_init+0x1b4>)
 800af60:	f003 fdfa 	bl	800eb58 <iprintf>

	//acceleration self-test configuration
	rslt = bmi160_perform_self_test(BMI160_ACCEL_ONLY,bmi160);
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	2001      	movs	r0, #1
 800af68:	f7fe fdd2 	bl	8009b10 <bmi160_perform_self_test>
 800af6c:	4603      	mov	r3, r0
 800af6e:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800af70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <bmi160_interface_init+0x8a>
	{
		printf("BMI160 acceleration self-test failure !\n");
 800af78:	484d      	ldr	r0, [pc, #308]	@ (800b0b0 <bmi160_interface_init+0x1b8>)
 800af7a:	f003 fe55 	bl	800ec28 <puts>
		Error_Handler();
 800af7e:	f7f6 faa3 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 acceleration self-test success !\n");
 800af82:	484c      	ldr	r0, [pc, #304]	@ (800b0b4 <bmi160_interface_init+0x1bc>)
 800af84:	f003 fe50 	bl	800ec28 <puts>

	//gyroscope self-test configuration
	rslt = bmi160_perform_self_test(BMI160_GYRO_ONLY,bmi160);
 800af88:	6879      	ldr	r1, [r7, #4]
 800af8a:	2002      	movs	r0, #2
 800af8c:	f7fe fdc0 	bl	8009b10 <bmi160_perform_self_test>
 800af90:	4603      	mov	r3, r0
 800af92:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800af94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <bmi160_interface_init+0xae>
	{
		printf("BMI160 gyroscope self-test failure !\n");
 800af9c:	4846      	ldr	r0, [pc, #280]	@ (800b0b8 <bmi160_interface_init+0x1c0>)
 800af9e:	f003 fe43 	bl	800ec28 <puts>
		Error_Handler();
 800afa2:	f7f6 fa91 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 gyroscope self-test success !\n");
 800afa6:	4845      	ldr	r0, [pc, #276]	@ (800b0bc <bmi160_interface_init+0x1c4>)
 800afa8:	f003 fe3e 	bl	800ec28 <puts>

	/* Select the Output data rate, range of accelerometer sensor */
	bmi160->accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	220c      	movs	r2, #12
 800afb0:	775a      	strb	r2, [r3, #29]
	bmi160->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2203      	movs	r2, #3
 800afb6:	779a      	strb	r2, [r3, #30]
	bmi160->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2202      	movs	r2, #2
 800afbc:	77da      	strb	r2, [r3, #31]

	/* Select the power mode of accelerometer sensor */
	bmi160->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2211      	movs	r2, #17
 800afc2:	771a      	strb	r2, [r3, #28]

	/* Select the Output data rate, range of Gyroscope sensor */
	bmi160->gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	220d      	movs	r2, #13
 800afc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	bmi160->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	bmi160->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	/* Select the power mode of Gyroscope sensor */
	bmi160->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2215      	movs	r2, #21
 800afe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	/* Set the sensor configuration */
	rslt = bmi160_set_power_mode(bmi160);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7fe fd08 	bl	80099fa <bmi160_set_power_mode>
 800afea:	4603      	mov	r3, r0
 800afec:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800afee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d004      	beq.n	800b000 <bmi160_interface_init+0x108>
	{
		printf("BMI160 sensor configuration failure !\n");
 800aff6:	4832      	ldr	r0, [pc, #200]	@ (800b0c0 <bmi160_interface_init+0x1c8>)
 800aff8:	f003 fe16 	bl	800ec28 <puts>
		Error_Handler();
 800affc:	f7f6 fa64 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 sensor configuration success !\n");
 800b000:	4830      	ldr	r0, [pc, #192]	@ (800b0c4 <bmi160_interface_init+0x1cc>)
 800b002:	f003 fe11 	bl	800ec28 <puts>

	struct bmi160_offsets bmi160_offset = {0};
 800b006:	f107 0314 	add.w	r3, r7, #20
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	605a      	str	r2, [r3, #4]
 800b010:	811a      	strh	r2, [r3, #8]
	struct bmi160_foc_conf bmi160_foc = {0};
 800b012:	f107 030c 	add.w	r3, r7, #12
 800b016:	2200      	movs	r2, #0
 800b018:	601a      	str	r2, [r3, #0]
 800b01a:	809a      	strh	r2, [r3, #4]

	rslt = bmi160_get_offsets(&bmi160_offset,bmi160);
 800b01c:	f107 0314 	add.w	r3, r7, #20
 800b020:	6879      	ldr	r1, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	f7fe fdc2 	bl	8009bac <bmi160_get_offsets>
 800b028:	4603      	mov	r3, r0
 800b02a:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b02c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <bmi160_interface_init+0x146>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b034:	4824      	ldr	r0, [pc, #144]	@ (800b0c8 <bmi160_interface_init+0x1d0>)
 800b036:	f003 fdf7 	bl	800ec28 <puts>
		Error_Handler();
 800b03a:	f7f6 fa45 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b03e:	4823      	ldr	r0, [pc, #140]	@ (800b0cc <bmi160_interface_init+0x1d4>)
 800b040:	f003 fdf2 	bl	800ec28 <puts>

	bmi160_foc.acc_off_en = BMI160_ENABLE;
 800b044:	2301      	movs	r3, #1
 800b046:	743b      	strb	r3, [r7, #16]
	bmi160_foc.gyro_off_en = BMI160_ENABLE;
 800b048:	2301      	movs	r3, #1
 800b04a:	747b      	strb	r3, [r7, #17]
	bmi160_foc.foc_gyr_en = BMI160_ENABLE;
 800b04c:	2301      	movs	r3, #1
 800b04e:	733b      	strb	r3, [r7, #12]
	bmi160_foc.foc_acc_x = BMI160_FOC_ACCEL_POSITIVE_G;
 800b050:	2301      	movs	r3, #1
 800b052:	737b      	strb	r3, [r7, #13]
	bmi160_foc.foc_acc_y = BMI160_FOC_ACCEL_POSITIVE_G;
 800b054:	2301      	movs	r3, #1
 800b056:	73bb      	strb	r3, [r7, #14]
	bmi160_foc.foc_acc_z = BMI160_FOC_ACCEL_POSITIVE_G;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]

	bmi160_set_offsets(&bmi160_foc, &bmi160_offset, bmi160);
 800b05c:	f107 0114 	add.w	r1, r7, #20
 800b060:	f107 030c 	add.w	r3, r7, #12
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fe21 	bl	8009cae <bmi160_set_offsets>

	if( rslt != BMI160_OK )
 800b06c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d004      	beq.n	800b07e <bmi160_interface_init+0x186>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b074:	4814      	ldr	r0, [pc, #80]	@ (800b0c8 <bmi160_interface_init+0x1d0>)
 800b076:	f003 fdd7 	bl	800ec28 <puts>
		Error_Handler();
 800b07a:	f7f6 fa25 	bl	80014c8 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b07e:	4813      	ldr	r0, [pc, #76]	@ (800b0cc <bmi160_interface_init+0x1d4>)
 800b080:	f003 fdd2 	bl	800ec28 <puts>

	HAL_Delay(2000);
 800b084:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b088:	f7f6 fc9e 	bl	80019c8 <HAL_Delay>

	return ( BMI160_OK );
 800b08c:	2300      	movs	r3, #0

	#else
		Error_Handler();
	#endif
	return ( BMI160_E_INVALID_CONFIG );
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3720      	adds	r7, #32
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800ae91 	.word	0x0800ae91
 800b09c:	0800ae49 	.word	0x0800ae49
 800b0a0:	0800aee1 	.word	0x0800aee1
 800b0a4:	080125e0 	.word	0x080125e0
 800b0a8:	08012600 	.word	0x08012600
 800b0ac:	08012620 	.word	0x08012620
 800b0b0:	08012630 	.word	0x08012630
 800b0b4:	08012658 	.word	0x08012658
 800b0b8:	08012680 	.word	0x08012680
 800b0bc:	080126a8 	.word	0x080126a8
 800b0c0:	080126d0 	.word	0x080126d0
 800b0c4:	080126f8 	.word	0x080126f8
 800b0c8:	08012720 	.word	0x08012720
 800b0cc:	08012748 	.word	0x08012748

0800b0d0 <bmi160_calibration>:

int8_t bmi160_calibration(struct bmi160_dev *bmi160,uint32_t IterTimeMS)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b092      	sub	sp, #72	@ 0x48
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <bmi160_calibration+0x14>
	{
	   Error_Handler();
 800b0e0:	f7f6 f9f2 	bl	80014c8 <Error_Handler>
	}

	if ( IterTimeMS <= 0)
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <bmi160_calibration+0x1e>
	{
	   Error_Handler();
 800b0ea:	f7f6 f9ed 	bl	80014c8 <Error_Handler>
	}

	uint32_t sample_num = 0U , current_tick = HAL_GetTick();
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0f2:	f7f6 fc5d 	bl	80019b0 <HAL_GetTick>
 800b0f6:	60f8      	str	r0, [r7, #12]
	double acc_x_offset = 0.0f , acc_y_offset = 0.0f , acc_z_offset = 0.0f;
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800b104:	f04f 0200 	mov.w	r2, #0
 800b108:	f04f 0300 	mov.w	r3, #0
 800b10c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 800b110:	f04f 0200 	mov.w	r2, #0
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double gyr_x_offset = 0.0f , gyr_y_offset = 0.0f , gyr_z_offset = 0.0f;
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	f04f 0300 	mov.w	r3, #0
 800b124:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800b128:	f04f 0200 	mov.w	r2, #0
 800b12c:	f04f 0300 	mov.w	r3, #0
 800b130:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800b134:	f04f 0200 	mov.w	r2, #0
 800b138:	f04f 0300 	mov.w	r3, #0
 800b13c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	while( ( HAL_GetTick() - current_tick ) < IterTimeMS )
 800b140:	e072      	b.n	800b228 <bmi160_calibration+0x158>
	{

	  if( bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),&bmi160->accel_data,&bmi160->gyro_data,(struct bmi160_dev*)bmi160) != BMI160_OK)
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f103 020c 	add.w	r2, r3, #12
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2003      	movs	r0, #3
 800b14e:	f7fe fc78 	bl	8009a42 <bmi160_get_sensor_data>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <bmi160_calibration+0x92>
	  {
		  printf("BMI160 sensor data failed !\n");
 800b158:	4865      	ldr	r0, [pc, #404]	@ (800b2f0 <bmi160_calibration+0x220>)
 800b15a:	f003 fd65 	bl	800ec28 <puts>
		  Error_Handler();
 800b15e:	f7f6 f9b3 	bl	80014c8 <Error_Handler>
	  }

	  acc_x_offset += (double)bmi160->accel_data.x;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7f5 f9db 	bl	8000524 <__aeabi_i2d>
 800b16e:	4602      	mov	r2, r0
 800b170:	460b      	mov	r3, r1
 800b172:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b176:	f7f5 f889 	bl	800028c <__adddf3>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	  acc_y_offset += (double)bmi160->accel_data.y;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 f9cb 	bl	8000524 <__aeabi_i2d>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b196:	f7f5 f879 	bl	800028c <__adddf3>
 800b19a:	4602      	mov	r2, r0
 800b19c:	460b      	mov	r3, r1
 800b19e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	  acc_z_offset += (double)bmi160->accel_data.z;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7f5 f9bb 	bl	8000524 <__aeabi_i2d>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b1b6:	f7f5 f869 	bl	800028c <__adddf3>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	  gyr_x_offset += (double)bmi160->gyro_data.x;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f5 f9ab 	bl	8000524 <__aeabi_i2d>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b1d6:	f7f5 f859 	bl	800028c <__adddf3>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  gyr_y_offset += (double)bmi160->gyro_data.y;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f5 f99b 	bl	8000524 <__aeabi_i2d>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b1f6:	f7f5 f849 	bl	800028c <__adddf3>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  gyr_z_offset += (double)bmi160->gyro_data.z;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f5 f98b 	bl	8000524 <__aeabi_i2d>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b216:	f7f5 f839 	bl	800028c <__adddf3>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	  ++sample_num;
 800b222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b224:	3301      	adds	r3, #1
 800b226:	647b      	str	r3, [r7, #68]	@ 0x44
	while( ( HAL_GetTick() - current_tick ) < IterTimeMS )
 800b228:	f7f6 fbc2 	bl	80019b0 <HAL_GetTick>
 800b22c:	4602      	mov	r2, r0
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d884      	bhi.n	800b142 <bmi160_calibration+0x72>
	}

	acc_x_offset /= (double)sample_num;
 800b238:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b23a:	f7f5 f963 	bl	8000504 <__aeabi_ui2d>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800b246:	f7f5 fb01 	bl	800084c <__aeabi_ddiv>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	acc_y_offset /= (double)sample_num;
 800b252:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b254:	f7f5 f956 	bl	8000504 <__aeabi_ui2d>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800b260:	f7f5 faf4 	bl	800084c <__aeabi_ddiv>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	acc_z_offset = (acc_z_offset / (double)sample_num) - 1 ;
 800b26c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b26e:	f7f5 f949 	bl	8000504 <__aeabi_ui2d>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b27a:	f7f5 fae7 	bl	800084c <__aeabi_ddiv>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4610      	mov	r0, r2
 800b284:	4619      	mov	r1, r3
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	4b1a      	ldr	r3, [pc, #104]	@ (800b2f4 <bmi160_calibration+0x224>)
 800b28c:	f7f4 fffc 	bl	8000288 <__aeabi_dsub>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

	gyr_x_offset /= (double)sample_num;
 800b298:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b29a:	f7f5 f933 	bl	8000504 <__aeabi_ui2d>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b2a6:	f7f5 fad1 	bl	800084c <__aeabi_ddiv>
 800b2aa:	4602      	mov	r2, r0
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	gyr_y_offset /= (double)sample_num;
 800b2b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b2b4:	f7f5 f926 	bl	8000504 <__aeabi_ui2d>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b2c0:	f7f5 fac4 	bl	800084c <__aeabi_ddiv>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	gyr_z_offset /= (double)sample_num;
 800b2cc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b2ce:	f7f5 f919 	bl	8000504 <__aeabi_ui2d>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b2da:	f7f5 fab7 	bl	800084c <__aeabi_ddiv>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return ( BMI160_OK );
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3748      	adds	r7, #72	@ 0x48
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	08012770 	.word	0x08012770
 800b2f4:	3ff00000 	.word	0x3ff00000

0800b2f8 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 800b300:	2300      	movs	r3, #0
 800b302:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 fbe8 	bl	800cada <null_ptr_check>
 800b30a:	4603      	mov	r3, r0
 800b30c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 800b30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d131      	bne.n	800b37a <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7e1b      	ldrb	r3, [r3, #24]
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d003      	beq.n	800b326 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2201      	movs	r2, #1
 800b322:	769a      	strb	r2, [r3, #26]
 800b324:	e002      	b.n	800b32c <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	769a      	strb	r2, [r3, #26]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 800b32c:	f107 010e 	add.w	r1, r7, #14
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	2000      	movs	r0, #0
 800b336:	f000 f826 	bl	800b386 <bmp3_get_regs>
 800b33a:	4603      	mov	r3, r0
 800b33c:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800b33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d119      	bne.n	800b37a <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800b346:	7bbb      	ldrb	r3, [r7, #14]
 800b348:	2b50      	cmp	r3, #80	@ 0x50
 800b34a:	d002      	beq.n	800b352 <bmp3_init+0x5a>
 800b34c:	7bbb      	ldrb	r3, [r7, #14]
 800b34e:	2b60      	cmp	r3, #96	@ 0x60
 800b350:	d111      	bne.n	800b376 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 800b352:	7bba      	ldrb	r2, [r7, #14]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	741a      	strb	r2, [r3, #16]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f9b2 	bl	800b6c2 <bmp3_soft_reset>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800b362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d107      	bne.n	800b37a <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fb54 	bl	800ba18 <get_calib_data>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 800b374:	e001      	b.n	800b37a <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 800b376:	23f9      	movs	r3, #249	@ 0xf9
 800b378:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800b37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800b386:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b38a:	b08b      	sub	sp, #44	@ 0x2c
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60b9      	str	r1, [r7, #8]
 800b390:	607a      	str	r2, [r7, #4]
 800b392:	603b      	str	r3, [r7, #0]
 800b394:	4603      	mov	r3, r0
 800b396:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b398:	6838      	ldr	r0, [r7, #0]
 800b39a:	f001 fb9e 	bl	800cada <null_ptr_check>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 800b3a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d172      	bne.n	800b492 <bmp3_get_regs+0x10c>
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d06f      	beq.n	800b492 <bmp3_get_regs+0x10c>
    {
 800b3b2:	466b      	mov	r3, sp
 800b3b4:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	7e9b      	ldrb	r3, [r3, #26]
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	7e9b      	ldrb	r3, [r3, #26]
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	18d1      	adds	r1, r2, r3
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4688      	mov	r8, r1
 800b3d6:	4699      	mov	r9, r3
 800b3d8:	f04f 0200 	mov.w	r2, #0
 800b3dc:	f04f 0300 	mov.w	r3, #0
 800b3e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	461d      	mov	r5, r3
 800b3f2:	f04f 0200 	mov.w	r2, #0
 800b3f6:	f04f 0300 	mov.w	r3, #0
 800b3fa:	00eb      	lsls	r3, r5, #3
 800b3fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b400:	00e2      	lsls	r2, r4, #3
 800b402:	1dcb      	adds	r3, r1, #7
 800b404:	08db      	lsrs	r3, r3, #3
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	ebad 0d03 	sub.w	sp, sp, r3
 800b40c:	466b      	mov	r3, sp
 800b40e:	3300      	adds	r3, #0
 800b410:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	7e1b      	ldrb	r3, [r3, #24]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d025      	beq.n	800b466 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
 800b41c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b420:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	69dc      	ldr	r4, [r3, #28]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	7bf8      	ldrb	r0, [r7, #15]
 800b42c:	69fa      	ldr	r2, [r7, #28]
 800b42e:	6979      	ldr	r1, [r7, #20]
 800b430:	47a0      	blx	r4
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	765a      	strb	r2, [r3, #25]
            for (idx = 0; idx < len; idx++)
 800b43a:	2300      	movs	r3, #0
 800b43c:	623b      	str	r3, [r7, #32]
 800b43e:	e00d      	b.n	800b45c <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	7e9b      	ldrb	r3, [r3, #26]
 800b444:	461a      	mov	r2, r3
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	441a      	add	r2, r3
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	6a3b      	ldr	r3, [r7, #32]
 800b44e:	440b      	add	r3, r1
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	5c8a      	ldrb	r2, [r1, r2]
 800b454:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	3301      	adds	r3, #1
 800b45a:	623b      	str	r3, [r7, #32]
 800b45c:	6a3a      	ldr	r2, [r7, #32]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	429a      	cmp	r2, r3
 800b462:	d3ed      	bcc.n	800b440 <bmp3_get_regs+0xba>
 800b464:	e00b      	b.n	800b47e <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	69dc      	ldr	r4, [r3, #28]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	7bf8      	ldrb	r0, [r7, #15]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	47a0      	blx	r4
 800b476:	4603      	mov	r3, r0
 800b478:	461a      	mov	r2, r3
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	765a      	strb	r2, [r3, #25]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800b488:	23fe      	movs	r3, #254	@ 0xfe
 800b48a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b48e:	46b5      	mov	sp, r6
    {
 800b490:	e002      	b.n	800b498 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b492:	23ff      	movs	r3, #255	@ 0xff
 800b494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800b498:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	372c      	adds	r7, #44	@ 0x2c
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b4a6 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800b4a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4aa:	b08b      	sub	sp, #44	@ 0x2c
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	60b9      	str	r1, [r7, #8]
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	603b      	str	r3, [r7, #0]
 800b4b6:	466b      	mov	r3, sp
 800b4b8:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	0059      	lsls	r1, r3, #1
 800b4be:	460b      	mov	r3, r1
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	4688      	mov	r8, r1
 800b4c8:	4699      	mov	r9, r3
 800b4ca:	f04f 0200 	mov.w	r2, #0
 800b4ce:	f04f 0300 	mov.w	r3, #0
 800b4d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4de:	2300      	movs	r3, #0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	461d      	mov	r5, r3
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	f04f 0300 	mov.w	r3, #0
 800b4ec:	00eb      	lsls	r3, r5, #3
 800b4ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4f2:	00e2      	lsls	r2, r4, #3
 800b4f4:	1dcb      	adds	r3, r1, #7
 800b4f6:	08db      	lsrs	r3, r3, #3
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	ebad 0d03 	sub.w	sp, sp, r3
 800b4fe:	466b      	mov	r3, sp
 800b500:	3300      	adds	r3, #0
 800b502:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b504:	6838      	ldr	r0, [r7, #0]
 800b506:	f001 fae8 	bl	800cada <null_ptr_check>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800b510:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b514:	2b00      	cmp	r3, #0
 800b516:	d14e      	bne.n	800b5b6 <bmp3_set_regs+0x110>
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d04b      	beq.n	800b5b6 <bmp3_set_regs+0x110>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d048      	beq.n	800b5b6 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d041      	beq.n	800b5ae <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	781a      	ldrb	r2, [r3, #0]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	7e1b      	ldrb	r3, [r3, #24]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d114      	bne.n	800b564 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800b53a:	2300      	movs	r3, #0
 800b53c:	77fb      	strb	r3, [r7, #31]
 800b53e:	e00d      	b.n	800b55c <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800b540:	7ffb      	ldrb	r3, [r7, #31]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	781a      	ldrb	r2, [r3, #0]
 800b548:	7ffb      	ldrb	r3, [r7, #31]
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	440b      	add	r3, r1
 800b54e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b552:	b2d2      	uxtb	r2, r2
 800b554:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800b556:	7ffb      	ldrb	r3, [r7, #31]
 800b558:	3301      	adds	r3, #1
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	7ffb      	ldrb	r3, [r7, #31]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	429a      	cmp	r2, r3
 800b562:	d8ed      	bhi.n	800b540 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d909      	bls.n	800b57e <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	6979      	ldr	r1, [r7, #20]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 fa75 	bl	800ba60 <interleave_reg_addr>
                temp_len = len * 2;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	623b      	str	r3, [r7, #32]
 800b57c:	e001      	b.n	800b582 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	6a1c      	ldr	r4, [r3, #32]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	7818      	ldrb	r0, [r3, #0]
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	6a3a      	ldr	r2, [r7, #32]
 800b590:	6979      	ldr	r1, [r7, #20]
 800b592:	47a0      	blx	r4
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	765a      	strb	r2, [r3, #25]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	f993 3019 	ldrsb.w	r3, [r3, #25]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00b      	beq.n	800b5be <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 800b5a6:	23fe      	movs	r3, #254	@ 0xfe
 800b5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 800b5ac:	e007      	b.n	800b5be <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800b5ae:	23fa      	movs	r3, #250	@ 0xfa
 800b5b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 800b5b4:	e003      	b.n	800b5be <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b5b6:	23ff      	movs	r3, #255	@ 0xff
 800b5b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b5bc:	e000      	b.n	800b5c0 <bmp3_set_regs+0x11a>
        if (len != 0)
 800b5be:	bf00      	nop
    }

    return rslt;
 800b5c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b5c4:	46b5      	mov	sp, r6
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	372c      	adds	r7, #44	@ 0x2c
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b5d0 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d03a      	beq.n	800b65c <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800b5e6:	68f9      	ldr	r1, [r7, #12]
 800b5e8:	2006      	movs	r0, #6
 800b5ea:	f001 fa5e 	bl	800caaa <are_settings_changed>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f000 fa97 	bl	800bb2c <set_pwr_ctrl_settings>
 800b5fe:	4603      	mov	r3, r0
 800b600:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	20f0      	movs	r0, #240	@ 0xf0
 800b606:	f001 fa50 	bl	800caaa <are_settings_changed>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 fad8 	bl	800bbca <set_odr_filter_settings>
 800b61a:	4603      	mov	r3, r0
 800b61c:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 800b624:	f001 fa41 	bl	800caaa <are_settings_changed>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d006      	beq.n	800b63c <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	68b9      	ldr	r1, [r7, #8]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fb36 	bl	800bca4 <set_int_ctrl_settings>
 800b638:	4603      	mov	r3, r0
 800b63a:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 800b63c:	68f9      	ldr	r1, [r7, #12]
 800b63e:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800b642:	f001 fa32 	bl	800caaa <are_settings_changed>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d009      	beq.n	800b660 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	68b9      	ldr	r1, [r7, #8]
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f000 fba4 	bl	800bd9e <set_advance_settings>
 800b656:	4603      	mov	r3, r0
 800b658:	75fb      	strb	r3, [r7, #23]
 800b65a:	e001      	b.n	800b660 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b65c:	23ff      	movs	r3, #255	@ 0xff
 800b65e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800b660:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3718      	adds	r7, #24
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <bmp3_get_status>:
 * @brief This API gets the command ready, data ready for pressure and
 * temperature and interrupt (fifo watermark, fifo full, data ready) and
 * error status from the sensor.
 */
int8_t bmp3_get_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (status != NULL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01a      	beq.n	800b6b2 <bmp3_get_status+0x46>
    {
        rslt = get_sensor_status(status, dev);
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fa4f 	bl	800cb22 <get_sensor_status>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]

        /* Proceed further if the earlier operation is fine */
        if (rslt == BMP3_OK)
 800b688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d112      	bne.n	800b6b6 <bmp3_get_status+0x4a>
        {
            rslt = get_int_status(status, dev);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 fa88 	bl	800cba8 <get_int_status>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]

            /* Proceed further if the earlier operation is fine */
            if (rslt == BMP3_OK)
 800b69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d108      	bne.n	800b6b6 <bmp3_get_status+0x4a>
            {
                /* Get the error status */
                rslt = get_err_status(status, dev);
 800b6a4:	6839      	ldr	r1, [r7, #0]
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f001 faac 	bl	800cc04 <get_err_status>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	73fb      	strb	r3, [r7, #15]
 800b6b0:	e001      	b.n	800b6b6 <bmp3_get_status+0x4a>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b6b2:	23ff      	movs	r3, #255	@ 0xff
 800b6b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 800b6ca:	237e      	movs	r3, #126	@ 0x7e
 800b6cc:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 800b6ce:	23b6      	movs	r3, #182	@ 0xb6
 800b6d0:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 800b6d2:	f107 010c 	add.w	r1, r7, #12
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	2003      	movs	r0, #3
 800b6dc:	f7ff fe53 	bl	800b386 <bmp3_get_regs>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800b6e4:	7b3b      	ldrb	r3, [r7, #12]
 800b6e6:	f003 0310 	and.w	r3, r3, #16
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d02d      	beq.n	800b74a <bmp3_soft_reset+0x88>
 800b6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d129      	bne.n	800b74a <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800b6f6:	f107 010d 	add.w	r1, r7, #13
 800b6fa:	f107 000e 	add.w	r0, r7, #14
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2201      	movs	r2, #1
 800b702:	f7ff fed0 	bl	800b4a6 <bmp3_set_regs>
 800b706:	4603      	mov	r3, r0
 800b708:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 800b70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d11b      	bne.n	800b74a <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b716:	687a      	ldr	r2, [r7, #4]
 800b718:	6952      	ldr	r2, [r2, #20]
 800b71a:	4611      	mov	r1, r2
 800b71c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b720:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800b722:	f107 010b 	add.w	r1, r7, #11
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	2002      	movs	r0, #2
 800b72c:	f7ff fe2b 	bl	800b386 <bmp3_get_regs>
 800b730:	4603      	mov	r3, r0
 800b732:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800b734:	7afb      	ldrb	r3, [r7, #11]
 800b736:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <bmp3_soft_reset+0x84>
 800b73e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 800b746:	23fc      	movs	r3, #252	@ 0xfc
 800b748:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800b74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b084      	sub	sp, #16
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800b760:	6838      	ldr	r0, [r7, #0]
 800b762:	f001 f9ba 	bl	800cada <null_ptr_check>
 800b766:	4603      	mov	r3, r0
 800b768:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 800b76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d139      	bne.n	800b7e6 <bmp3_set_op_mode+0x90>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d036      	beq.n	800b7e6 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800b77e:	f107 030d 	add.w	r3, r7, #13
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	4618      	mov	r0, r3
 800b786:	f000 f838 	bl	800b7fa <bmp3_get_op_mode>
 800b78a:	4603      	mov	r3, r0
 800b78c:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800b78e:	7b7b      	ldrb	r3, [r7, #13]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d010      	beq.n	800b7b6 <bmp3_set_op_mode+0x60>
 800b794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10c      	bne.n	800b7b6 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 800b79c:	6838      	ldr	r0, [r7, #0]
 800b79e:	f000 f8f9 	bl	800b994 <put_device_to_sleep>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	6952      	ldr	r2, [r2, #20]
 800b7ae:	4611      	mov	r1, r2
 800b7b0:	f241 3088 	movw	r0, #5000	@ 0x1388
 800b7b4:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 800b7b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d116      	bne.n	800b7ec <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d106      	bne.n	800b7d2 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f87a 	bl	800b8c0 <set_normal_mode>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]
    {
 800b7d0:	e00c      	b.n	800b7ec <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 800b7d2:	7bbb      	ldrb	r3, [r7, #14]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d109      	bne.n	800b7ec <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f8a3 	bl	800b926 <write_power_mode>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
    {
 800b7e4:	e002      	b.n	800b7ec <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b7e6:	23ff      	movs	r3, #255	@ 0xff
 800b7e8:	73fb      	strb	r3, [r7, #15]
 800b7ea:	e000      	b.n	800b7ee <bmp3_set_op_mode+0x98>
    {
 800b7ec:	bf00      	nop
    }

    return rslt;
 800b7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b084      	sub	sp, #16
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d011      	beq.n	800b82e <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2201      	movs	r2, #1
 800b80e:	6879      	ldr	r1, [r7, #4]
 800b810:	201b      	movs	r0, #27
 800b812:	f7ff fdb8 	bl	800b386 <bmp3_get_regs>
 800b816:	4603      	mov	r3, r0
 800b818:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	111b      	asrs	r3, r3, #4
 800b820:	b2db      	uxtb	r3, r3
 800b822:	f003 0303 	and.w	r3, r3, #3
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	701a      	strb	r2, [r3, #0]
 800b82c:	e001      	b.n	800b832 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b82e:	23ff      	movs	r3, #255	@ 0xff
 800b830:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b08a      	sub	sp, #40	@ 0x28
 800b842:	af00      	add	r7, sp, #0
 800b844:	4603      	mov	r3, r0
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
 800b84a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 800b84c:	f107 0320 	add.w	r3, r7, #32
 800b850:	2200      	movs	r2, #0
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800b856:	f107 0310 	add.w	r3, r7, #16
 800b85a:	2200      	movs	r2, #0
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	605a      	str	r2, [r3, #4]
 800b860:	609a      	str	r2, [r3, #8]
 800b862:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d021      	beq.n	800b8ae <bmp3_get_sensor_data+0x70>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 800b86a:	f107 0120 	add.w	r1, r7, #32
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2206      	movs	r2, #6
 800b872:	2004      	movs	r0, #4
 800b874:	f7ff fd87 	bl	800b386 <bmp3_get_regs>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMP3_OK)
 800b87e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b882:	2b00      	cmp	r3, #0
 800b884:	d116      	bne.n	800b8b4 <bmp3_get_sensor_data+0x76>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 800b886:	f107 0210 	add.w	r2, r7, #16
 800b88a:	f107 0320 	add.w	r3, r7, #32
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fc75 	bl	800c180 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	3328      	adds	r3, #40	@ 0x28
 800b89a:	f107 0110 	add.w	r1, r7, #16
 800b89e:	7bf8      	ldrb	r0, [r7, #15]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	f000 fca8 	bl	800c1f6 <compensate_data>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b8ac:	e002      	b.n	800b8b4 <bmp3_get_sensor_data+0x76>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800b8ae:	23ff      	movs	r3, #255	@ 0xff
 800b8b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800b8b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3728      	adds	r7, #40	@ 0x28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f889 	bl	800b9e4 <validate_normal_mode_settings>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 800b8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d11d      	bne.n	800b91a <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 800b8de:	6839      	ldr	r1, [r7, #0]
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 f820 	bl	800b926 <write_power_mode>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d113      	bne.n	800b91a <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800b8f2:	f107 010e 	add.w	r1, r7, #14
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	2002      	movs	r0, #2
 800b8fc:	f7ff fd43 	bl	800b386 <bmp3_get_regs>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800b904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d106      	bne.n	800b91a <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 800b90c:	7bbb      	ldrb	r3, [r7, #14]
 800b90e:	f003 0304 	and.w	r3, r3, #4
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 800b916:	23fb      	movs	r3, #251	@ 0xfb
 800b918:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800b91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b084      	sub	sp, #16
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800b930:	231b      	movs	r3, #27
 800b932:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 800b93a:	7b78      	ldrb	r0, [r7, #13]
 800b93c:	f107 010c 	add.w	r1, r7, #12
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2201      	movs	r2, #1
 800b944:	f7ff fd1f 	bl	800b386 <bmp3_get_regs>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 800b94c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d119      	bne.n	800b988 <write_power_mode+0x62>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800b954:	7b3b      	ldrb	r3, [r7, #12]
 800b956:	b25b      	sxtb	r3, r3
 800b958:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b95c:	b25a      	sxtb	r2, r3
 800b95e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b962:	011b      	lsls	r3, r3, #4
 800b964:	b25b      	sxtb	r3, r3
 800b966:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b96a:	b25b      	sxtb	r3, r3
 800b96c:	4313      	orrs	r3, r2
 800b96e:	b25b      	sxtb	r3, r3
 800b970:	b2db      	uxtb	r3, r3
 800b972:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800b974:	f107 010c 	add.w	r1, r7, #12
 800b978:	f107 000d 	add.w	r0, r7, #13
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2201      	movs	r2, #1
 800b980:	f7ff fd91 	bl	800b4a6 <bmp3_set_regs>
 800b984:	4603      	mov	r3, r0
 800b986:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b988:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800b99c:	231b      	movs	r3, #27
 800b99e:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800b9a0:	f107 010d 	add.w	r1, r7, #13
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	201b      	movs	r0, #27
 800b9aa:	f7ff fcec 	bl	800b386 <bmp3_get_regs>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800b9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10e      	bne.n	800b9d8 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 800b9ba:	7b7b      	ldrb	r3, [r7, #13]
 800b9bc:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800b9c4:	f107 010d 	add.w	r1, r7, #13
 800b9c8:	f107 000e 	add.w	r0, r7, #14
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	f7ff fd69 	bl	800b4a6 <bmp3_set_regs>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fa29 	bl	800be48 <get_odr_filter_settings>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800b9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa3c 	bl	800be80 <validate_osr_and_odr_settings>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 800ba20:	2331      	movs	r3, #49	@ 0x31
 800ba22:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	2200      	movs	r2, #0
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	605a      	str	r2, [r3, #4]
 800ba2e:	609a      	str	r2, [r3, #8]
 800ba30:	60da      	str	r2, [r3, #12]
 800ba32:	611a      	str	r2, [r3, #16]
 800ba34:	751a      	strb	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800ba36:	f107 0108 	add.w	r1, r7, #8
 800ba3a:	7ff8      	ldrb	r0, [r7, #31]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2215      	movs	r2, #21
 800ba40:	f7ff fca1 	bl	800b386 <bmp3_get_regs>
 800ba44:	4603      	mov	r3, r0
 800ba46:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800ba48:	f107 0308 	add.w	r3, r7, #8
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fc44 	bl	800c2dc <parse_calib_data>

    return rslt;
 800ba54:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b087      	sub	sp, #28
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800ba6e:	2301      	movs	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
 800ba72:	e015      	b.n	800baa0 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	441a      	add	r2, r3
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	68b9      	ldr	r1, [r7, #8]
 800ba82:	440b      	add	r3, r1
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800ba88:	687a      	ldr	r2, [r7, #4]
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	441a      	add	r2, r3
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	005b      	lsls	r3, r3, #1
 800ba92:	68b9      	ldr	r1, [r7, #8]
 800ba94:	440b      	add	r3, r1
 800ba96:	7812      	ldrb	r2, [r2, #0]
 800ba98:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	697a      	ldr	r2, [r7, #20]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d3e5      	bcc.n	800ba74 <interleave_reg_addr+0x14>
    }
}
 800baa8:	bf00      	nop
 800baaa:	bf00      	nop
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	4413      	add	r3, r2
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	4413      	add	r3, r2
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	10db      	asrs	r3, r3, #3
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 0307 	and.w	r3, r3, #7
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	3301      	adds	r3, #1
 800baf0:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	4413      	add	r3, r2
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	f003 031f 	and.w	r3, r3, #31
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 800bb04:	7bfb      	ldrb	r3, [r7, #15]
 800bb06:	3302      	adds	r3, #2
 800bb08:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	4413      	add	r3, r2
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	105b      	asrs	r3, r3, #1
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	709a      	strb	r2, [r3, #2]
}
 800bb20:	bf00      	nop
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800bb38:	231b      	movs	r3, #27
 800bb3a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800bb3c:	7db8      	ldrb	r0, [r7, #22]
 800bb3e:	f107 0115 	add.w	r1, r7, #21
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	f7ff fc1e 	bl	800b386 <bmp3_get_regs>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800bb4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d133      	bne.n	800bbbe <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f003 0302 	and.w	r3, r3, #2
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00e      	beq.n	800bb7e <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 800bb60:	7d7b      	ldrb	r3, [r7, #21]
 800bb62:	b25b      	sxtb	r3, r3
 800bb64:	f023 0301 	bic.w	r3, r3, #1
 800bb68:	b25a      	sxtb	r2, r3
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	785b      	ldrb	r3, [r3, #1]
 800bb6e:	b25b      	sxtb	r3, r3
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	b25b      	sxtb	r3, r3
 800bb76:	4313      	orrs	r3, r2
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d010      	beq.n	800bbaa <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 800bb88:	7d7b      	ldrb	r3, [r7, #21]
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	f023 0302 	bic.w	r3, r3, #2
 800bb90:	b25a      	sxtb	r2, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	b25b      	sxtb	r3, r3
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	b25b      	sxtb	r3, r3
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	b25b      	sxtb	r3, r3
 800bba2:	4313      	orrs	r3, r2
 800bba4:	b25b      	sxtb	r3, r3
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800bbaa:	f107 0115 	add.w	r1, r7, #21
 800bbae:	f107 0016 	add.w	r0, r7, #22
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f7ff fc76 	bl	800b4a6 <bmp3_set_regs>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800bbbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3718      	adds	r7, #24
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b08a      	sub	sp, #40	@ 0x28
 800bbce:	af02      	add	r7, sp, #8
 800bbd0:	60f8      	str	r0, [r7, #12]
 800bbd2:	60b9      	str	r1, [r7, #8]
 800bbd4:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 800bbd6:	f107 031c 	add.w	r3, r7, #28
 800bbda:	2100      	movs	r1, #0
 800bbdc:	460a      	mov	r2, r1
 800bbde:	801a      	strh	r2, [r3, #0]
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	709a      	strb	r2, [r3, #2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800bbe8:	f107 0118 	add.w	r1, r7, #24
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2204      	movs	r2, #4
 800bbf0:	201c      	movs	r0, #28
 800bbf2:	f7ff fbc8 	bl	800b386 <bmp3_get_regs>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 800bbfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d14a      	bne.n	800bc98 <set_odr_filter_settings+0xce>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 800bc02:	68f9      	ldr	r1, [r7, #12]
 800bc04:	2030      	movs	r0, #48	@ 0x30
 800bc06:	f000 ff50 	bl	800caaa <are_settings_changed>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <set_odr_filter_settings+0x5e>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 800bc10:	f107 0017 	add.w	r0, r7, #23
 800bc14:	f107 0218 	add.w	r2, r7, #24
 800bc18:	f107 011c 	add.w	r1, r7, #28
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	4603      	mov	r3, r0
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 f9e2 	bl	800bfec <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 800bc28:	68f9      	ldr	r1, [r7, #12]
 800bc2a:	2080      	movs	r0, #128	@ 0x80
 800bc2c:	f000 ff3d 	bl	800caaa <are_settings_changed>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <set_odr_filter_settings+0x7e>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 800bc36:	f107 0217 	add.w	r2, r7, #23
 800bc3a:	f107 0118 	add.w	r1, r7, #24
 800bc3e:	f107 001c 	add.w	r0, r7, #28
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f000 fa2b 	bl	800c09e <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 800bc48:	68f9      	ldr	r1, [r7, #12]
 800bc4a:	2040      	movs	r0, #64	@ 0x40
 800bc4c:	f000 ff2d 	bl	800caaa <are_settings_changed>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d008      	beq.n	800bc68 <set_odr_filter_settings+0x9e>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 800bc56:	f107 0217 	add.w	r2, r7, #23
 800bc5a:	f107 0118 	add.w	r1, r7, #24
 800bc5e:	f107 001c 	add.w	r0, r7, #28
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f000 fa55 	bl	800c112 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b03      	cmp	r3, #3
 800bc6e:	d104      	bne.n	800bc7a <set_odr_filter_settings+0xb0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 800bc70:	68b8      	ldr	r0, [r7, #8]
 800bc72:	f000 f905 	bl	800be80 <validate_osr_and_odr_settings>
 800bc76:	4603      	mov	r3, r0
 800bc78:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 800bc7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <set_odr_filter_settings+0xce>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f107 0118 	add.w	r1, r7, #24
 800bc8a:	f107 001c 	add.w	r0, r7, #28
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f7ff fc09 	bl	800b4a6 <bmp3_set_regs>
 800bc94:	4603      	mov	r3, r0
 800bc96:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 800bc98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 800bcb0:	2319      	movs	r3, #25
 800bcb2:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800bcb4:	7d78      	ldrb	r0, [r7, #21]
 800bcb6:	f107 0116 	add.w	r1, r7, #22
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f7ff fb62 	bl	800b386 <bmp3_get_regs>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800bcc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d161      	bne.n	800bd92 <set_int_ctrl_settings+0xee>
    {
        int_settings = settings->int_settings;
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	f107 0310 	add.w	r3, r7, #16
 800bcd4:	3207      	adds	r2, #7
 800bcd6:	6810      	ldr	r0, [r2, #0]
 800bcd8:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00d      	beq.n	800bd00 <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 800bce4:	7dbb      	ldrb	r3, [r7, #22]
 800bce6:	b25b      	sxtb	r3, r3
 800bce8:	f023 0301 	bic.w	r3, r3, #1
 800bcec:	b25a      	sxtb	r2, r3
 800bcee:	7c3b      	ldrb	r3, [r7, #16]
 800bcf0:	b25b      	sxtb	r3, r3
 800bcf2:	f003 0301 	and.w	r3, r3, #1
 800bcf6:	b25b      	sxtb	r3, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	b25b      	sxtb	r3, r3
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00f      	beq.n	800bd2a <set_int_ctrl_settings+0x86>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800bd0a:	7dbb      	ldrb	r3, [r7, #22]
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	f023 0302 	bic.w	r3, r3, #2
 800bd12:	b25a      	sxtb	r2, r3
 800bd14:	7c7b      	ldrb	r3, [r7, #17]
 800bd16:	b25b      	sxtb	r3, r3
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	b25b      	sxtb	r3, r3
 800bd1c:	f003 0302 	and.w	r3, r3, #2
 800bd20:	b25b      	sxtb	r3, r3
 800bd22:	4313      	orrs	r3, r2
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	b2db      	uxtb	r3, r3
 800bd28:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00f      	beq.n	800bd54 <set_int_ctrl_settings+0xb0>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 800bd34:	7dbb      	ldrb	r3, [r7, #22]
 800bd36:	b25b      	sxtb	r3, r3
 800bd38:	f023 0304 	bic.w	r3, r3, #4
 800bd3c:	b25a      	sxtb	r2, r3
 800bd3e:	7cbb      	ldrb	r3, [r7, #18]
 800bd40:	b25b      	sxtb	r3, r3
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	b25b      	sxtb	r3, r3
 800bd46:	f003 0304 	and.w	r3, r3, #4
 800bd4a:	b25b      	sxtb	r3, r3
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f003 0308 	and.w	r3, r3, #8
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00f      	beq.n	800bd7e <set_int_ctrl_settings+0xda>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800bd5e:	7dbb      	ldrb	r3, [r7, #22]
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd66:	b25a      	sxtb	r2, r3
 800bd68:	7cfb      	ldrb	r3, [r7, #19]
 800bd6a:	b25b      	sxtb	r3, r3
 800bd6c:	019b      	lsls	r3, r3, #6
 800bd6e:	b25b      	sxtb	r3, r3
 800bd70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd74:	b25b      	sxtb	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b25b      	sxtb	r3, r3
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800bd7e:	f107 0116 	add.w	r1, r7, #22
 800bd82:	f107 0015 	add.w	r0, r7, #21
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2201      	movs	r2, #1
 800bd8a:	f7ff fb8c 	bl	800b4a6 <bmp3_set_regs>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800bd92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b086      	sub	sp, #24
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	60b9      	str	r1, [r7, #8]
 800bda8:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	f107 0310 	add.w	r3, r7, #16
 800bdb0:	320b      	adds	r2, #11
 800bdb2:	8812      	ldrh	r2, [r2, #0]
 800bdb4:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 800bdb6:	231a      	movs	r3, #26
 800bdb8:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800bdba:	7db8      	ldrb	r0, [r7, #22]
 800bdbc:	f107 0115 	add.w	r1, r7, #21
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f7ff fadf 	bl	800b386 <bmp3_get_regs>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 800bdcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d133      	bne.n	800be3c <set_advance_settings+0x9e>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00f      	beq.n	800bdfe <set_advance_settings+0x60>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 800bdde:	7d7b      	ldrb	r3, [r7, #21]
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	f023 0302 	bic.w	r3, r3, #2
 800bde6:	b25a      	sxtb	r2, r3
 800bde8:	7c3b      	ldrb	r3, [r7, #16]
 800bdea:	b25b      	sxtb	r3, r3
 800bdec:	005b      	lsls	r3, r3, #1
 800bdee:	b25b      	sxtb	r3, r3
 800bdf0:	f003 0302 	and.w	r3, r3, #2
 800bdf4:	b25b      	sxtb	r3, r3
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00f      	beq.n	800be28 <set_advance_settings+0x8a>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 800be08:	7d7b      	ldrb	r3, [r7, #21]
 800be0a:	b25b      	sxtb	r3, r3
 800be0c:	f023 0304 	bic.w	r3, r3, #4
 800be10:	b25a      	sxtb	r2, r3
 800be12:	7c7b      	ldrb	r3, [r7, #17]
 800be14:	b25b      	sxtb	r3, r3
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	f003 0304 	and.w	r3, r3, #4
 800be1e:	b25b      	sxtb	r3, r3
 800be20:	4313      	orrs	r3, r2
 800be22:	b25b      	sxtb	r3, r3
 800be24:	b2db      	uxtb	r3, r3
 800be26:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800be28:	f107 0115 	add.w	r1, r7, #21
 800be2c:	f107 0016 	add.w	r0, r7, #22
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f7ff fb37 	bl	800b4a6 <bmp3_set_regs>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800be3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 800be52:	f107 0108 	add.w	r1, r7, #8
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	2204      	movs	r2, #4
 800be5a:	201c      	movs	r0, #28
 800be5c:	f7ff fa93 	bl	800b386 <bmp3_get_regs>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	1cda      	adds	r2, r3, #3
 800be68:	f107 0308 	add.w	r3, r7, #8
 800be6c:	4611      	mov	r1, r2
 800be6e:	4618      	mov	r0, r3
 800be70:	f7ff fe21 	bl	800bab6 <parse_odr_filter_settings>

    return rslt;
 800be74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3710      	adds	r7, #16
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b098      	sub	sp, #96	@ 0x60
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 800be88:	23ea      	movs	r3, #234	@ 0xea
 800be8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t meas_t_p = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 800be90:	4a1a      	ldr	r2, [pc, #104]	@ (800befc <validate_osr_and_odr_settings+0x7c>)
 800be92:	f107 030c 	add.w	r3, r7, #12
 800be96:	4611      	mov	r1, r2
 800be98:	2248      	movs	r2, #72	@ 0x48
 800be9a:	4618      	mov	r0, r3
 800be9c:	f003 f845 	bl	800ef2a <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	785b      	ldrb	r3, [r3, #1]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d006      	beq.n	800beb6 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 f83f 	bl	800bf2c <calculate_press_meas_time>
 800beae:	4602      	mov	r2, r0
 800beb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800beb2:	4413      	add	r3, r2
 800beb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    if (settings->temp_en)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	789b      	ldrb	r3, [r3, #2]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d006      	beq.n	800becc <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f864 	bl	800bf8c <calculate_temp_meas_time>
 800bec4:	4602      	mov	r2, r0
 800bec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bec8:	4413      	add	r3, r2
 800beca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 800becc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bed0:	4413      	add	r3, r2
 800bed2:	65bb      	str	r3, [r7, #88]	@ 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	799b      	ldrb	r3, [r3, #6]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	3360      	adds	r3, #96	@ 0x60
 800bedc:	443b      	add	r3, r7
 800bede:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800bee2:	4619      	mov	r1, r3
 800bee4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bee6:	f000 f80b 	bl	800bf00 <verify_meas_time_and_odr_duration>
 800beea:	4603      	mov	r3, r0
 800beec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    return rslt;
 800bef0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3760      	adds	r7, #96	@ 0x60
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	0801278c 	.word	0x0801278c

0800bf00 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d202      	bcs.n	800bf18 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]
 800bf16:	e001      	b.n	800bf1c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 800bf18:	23fd      	movs	r3, #253	@ 0xfd
 800bf1a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800bf1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	f107 030c 	add.w	r3, r7, #12
 800bf3a:	3203      	adds	r2, #3
 800bf3c:	6810      	ldr	r0, [r2, #0]
 800bf3e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 800bf40:	f04f 0200 	mov.w	r2, #0
 800bf44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 800bf4c:	7b3b      	ldrb	r3, [r7, #12]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	ed97 0b06 	vldr	d0, [r7, #24]
 800bf54:	f000 fd84 	bl	800ca60 <pow_bmp3>
 800bf58:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 800bf5c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bf60:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800bf84 <calculate_press_meas_time+0x58>
 800bf64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf68:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800bf88 <calculate_press_meas_time+0x5c>
 800bf6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bf70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf74:	ee17 3a90 	vmov	r3, s15
 800bf78:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 800bf7a:	693b      	ldr	r3, [r7, #16]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3720      	adds	r7, #32
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	44fa0000 	.word	0x44fa0000
 800bf88:	43c40000 	.word	0x43c40000

0800bf8c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b088      	sub	sp, #32
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f107 030c 	add.w	r3, r7, #12
 800bf9a:	3203      	adds	r2, #3
 800bf9c:	6810      	ldr	r0, [r2, #0]
 800bf9e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 800bfa0:	f04f 0200 	mov.w	r2, #0
 800bfa4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfa8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 800bfac:	7b7b      	ldrb	r3, [r7, #13]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	ed97 0b06 	vldr	d0, [r7, #24]
 800bfb4:	f000 fd54 	bl	800ca60 <pow_bmp3>
 800bfb8:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 800bfbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800bfc0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800bfe4 <calculate_temp_meas_time+0x58>
 800bfc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfc8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800bfe8 <calculate_temp_meas_time+0x5c>
 800bfcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bfd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfd4:	ee17 3a90 	vmov	r3, s15
 800bfd8:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 800bfda:	693b      	ldr	r3, [r7, #16]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3720      	adds	r7, #32
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	44fa0000 	.word	0x44fa0000
 800bfe8:	439c8000 	.word	0x439c8000

0800bfec <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800bffa:	6a3a      	ldr	r2, [r7, #32]
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	3203      	adds	r2, #3
 800c002:	6810      	ldr	r0, [r2, #0]
 800c004:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d040      	beq.n	800c092 <fill_osr_data+0xa6>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f003 0310 	and.w	r3, r3, #16
 800c016:	2b00      	cmp	r3, #0
 800c018:	d013      	beq.n	800c042 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	b25b      	sxtb	r3, r3
 800c020:	f023 0307 	bic.w	r3, r3, #7
 800c024:	b25a      	sxtb	r2, r3
 800c026:	7d3b      	ldrb	r3, [r7, #20]
 800c028:	b25b      	sxtb	r3, r3
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	b25b      	sxtb	r3, r3
 800c030:	4313      	orrs	r3, r2
 800c032:	b25a      	sxtb	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	4619      	mov	r1, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	440b      	add	r3, r1
 800c03e:	b2d2      	uxtb	r2, r2
 800c040:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f003 0320 	and.w	r3, r3, #32
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d015      	beq.n	800c078 <fill_osr_data+0x8c>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	b25b      	sxtb	r3, r3
 800c052:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800c056:	b25a      	sxtb	r2, r3
 800c058:	7d7b      	ldrb	r3, [r7, #21]
 800c05a:	b25b      	sxtb	r3, r3
 800c05c:	00db      	lsls	r3, r3, #3
 800c05e:	b25b      	sxtb	r3, r3
 800c060:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c064:	b25b      	sxtb	r3, r3
 800c066:	4313      	orrs	r3, r2
 800c068:	b25a      	sxtb	r2, r3
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	4619      	mov	r1, r3
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	440b      	add	r3, r1
 800c074:	b2d2      	uxtb	r2, r2
 800c076:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	4413      	add	r3, r2
 800c082:	221c      	movs	r2, #28
 800c084:	701a      	strb	r2, [r3, #0]
        (*len)++;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	3301      	adds	r3, #1
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	701a      	strb	r2, [r3, #0]
    }
}
 800c092:	bf00      	nop
 800c094:	371c      	adds	r7, #28
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr

0800c09e <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 800c09e:	b480      	push	{r7}
 800c0a0:	b087      	sub	sp, #28
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	60f8      	str	r0, [r7, #12]
 800c0a6:	60b9      	str	r1, [r7, #8]
 800c0a8:	607a      	str	r2, [r7, #4]
 800c0aa:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	3303      	adds	r3, #3
 800c0b0:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	78db      	ldrb	r3, [r3, #3]
 800c0b6:	2b11      	cmp	r3, #17
 800c0b8:	d902      	bls.n	800c0c0 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2211      	movs	r2, #17
 800c0be:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b25b      	sxtb	r3, r3
 800c0c8:	f023 031f 	bic.w	r3, r3, #31
 800c0cc:	b25a      	sxtb	r2, r3
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	78db      	ldrb	r3, [r3, #3]
 800c0d2:	b25b      	sxtb	r3, r3
 800c0d4:	f003 031f 	and.w	r3, r3, #31
 800c0d8:	b25b      	sxtb	r3, r3
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	b25a      	sxtb	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	440b      	add	r3, r1
 800c0e8:	b2d2      	uxtb	r2, r2
 800c0ea:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	221d      	movs	r2, #29
 800c0f8:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	3301      	adds	r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	701a      	strb	r2, [r3, #0]
}
 800c106:	bf00      	nop
 800c108:	371c      	adds	r7, #28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 800c112:	b480      	push	{r7}
 800c114:	b087      	sub	sp, #28
 800c116:	af00      	add	r7, sp, #0
 800c118:	60f8      	str	r0, [r7, #12]
 800c11a:	60b9      	str	r1, [r7, #8]
 800c11c:	607a      	str	r2, [r7, #4]
 800c11e:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	f107 0314 	add.w	r3, r7, #20
 800c126:	3203      	adds	r2, #3
 800c128:	6810      	ldr	r0, [r2, #0]
 800c12a:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	3303      	adds	r3, #3
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	f023 030e 	bic.w	r3, r3, #14
 800c138:	b25a      	sxtb	r2, r3
 800c13a:	7dbb      	ldrb	r3, [r7, #22]
 800c13c:	b25b      	sxtb	r3, r3
 800c13e:	005b      	lsls	r3, r3, #1
 800c140:	b25b      	sxtb	r3, r3
 800c142:	f003 030e 	and.w	r3, r3, #14
 800c146:	b25b      	sxtb	r3, r3
 800c148:	4313      	orrs	r3, r2
 800c14a:	b25a      	sxtb	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	4619      	mov	r1, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	440b      	add	r3, r1
 800c156:	b2d2      	uxtb	r2, r2
 800c158:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4413      	add	r3, r2
 800c164:	221f      	movs	r2, #31
 800c166:	701a      	strb	r2, [r3, #0]
    (*len)++;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	3301      	adds	r3, #1
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	701a      	strb	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 800c180:	b4b0      	push	{r4, r5, r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 800c18a:	6879      	ldr	r1, [r7, #4]
 800c18c:	7809      	ldrb	r1, [r1, #0]
 800c18e:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 800c190:	6879      	ldr	r1, [r7, #4]
 800c192:	3101      	adds	r1, #1
 800c194:	7809      	ldrb	r1, [r1, #0]
 800c196:	0209      	lsls	r1, r1, #8
 800c198:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	3102      	adds	r1, #2
 800c19e:	7809      	ldrb	r1, [r1, #0]
 800c1a0:	0409      	lsls	r1, r1, #16
 800c1a2:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	6939      	ldr	r1, [r7, #16]
 800c1a8:	4308      	orrs	r0, r1
 800c1aa:	6979      	ldr	r1, [r7, #20]
 800c1ac:	4301      	orrs	r1, r0
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	4605      	mov	r5, r0
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	3103      	adds	r1, #3
 800c1be:	7809      	ldrb	r1, [r1, #0]
 800c1c0:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	3104      	adds	r1, #4
 800c1c6:	7809      	ldrb	r1, [r1, #0]
 800c1c8:	0209      	lsls	r1, r1, #8
 800c1ca:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 800c1cc:	6879      	ldr	r1, [r7, #4]
 800c1ce:	3105      	adds	r1, #5
 800c1d0:	7809      	ldrb	r1, [r1, #0]
 800c1d2:	0409      	lsls	r1, r1, #16
 800c1d4:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	6939      	ldr	r1, [r7, #16]
 800c1da:	4308      	orrs	r0, r1
 800c1dc:	6979      	ldr	r1, [r7, #20]
 800c1de:	4301      	orrs	r1, r0
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	460a      	mov	r2, r1
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 800c1ec:	bf00      	nop
 800c1ee:	371c      	adds	r7, #28
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bcb0      	pop	{r4, r5, r7}
 800c1f4:	4770      	bx	lr

0800c1f6 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 800c1f6:	b580      	push	{r7, lr}
 800c1f8:	b086      	sub	sp, #24
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
 800c202:	4603      	mov	r3, r0
 800c204:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d05a      	beq.n	800c2c6 <compensate_data+0xd0>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d057      	beq.n	800c2c6 <compensate_data+0xd0>
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d054      	beq.n	800c2c6 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d115      	bne.n	800c24e <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	68b9      	ldr	r1, [r7, #8]
 800c228:	4618      	mov	r0, r3
 800c22a:	f000 fa27 	bl	800c67c <compensate_temperature>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 800c232:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d148      	bne.n	800c2cc <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	3308      	adds	r3, #8
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	68b9      	ldr	r1, [r7, #8]
 800c242:	4618      	mov	r0, r3
 800c244:	f000 fa94 	bl	800c770 <compensate_pressure>
 800c248:	4603      	mov	r3, r0
 800c24a:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c24c:	e03e      	b.n	800c2cc <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d116      	bne.n	800c282 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	68b9      	ldr	r1, [r7, #8]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f000 fa0e 	bl	800c67c <compensate_temperature>
            comp_data->temperature = 0;
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	f04f 0200 	mov.w	r2, #0
 800c266:	f04f 0300 	mov.w	r3, #0
 800c26a:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3308      	adds	r3, #8
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fa7a 	bl	800c770 <compensate_pressure>
 800c27c:	4603      	mov	r3, r0
 800c27e:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c280:	e024      	b.n	800c2cc <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d10f      	bne.n	800c2a8 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	68b9      	ldr	r1, [r7, #8]
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 f9f4 	bl	800c67c <compensate_temperature>
 800c294:	4603      	mov	r3, r0
 800c296:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 800c298:	6879      	ldr	r1, [r7, #4]
 800c29a:	f04f 0200 	mov.w	r2, #0
 800c29e:	f04f 0300 	mov.w	r3, #0
 800c2a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c2a6:	e011      	b.n	800c2cc <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 800c2a8:	6879      	ldr	r1, [r7, #4]
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	f04f 0200 	mov.w	r2, #0
 800c2bc:	f04f 0300 	mov.w	r3, #0
 800c2c0:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c2c4:	e002      	b.n	800c2cc <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800c2c6:	23ff      	movs	r3, #255	@ 0xff
 800c2c8:	75fb      	strb	r3, [r7, #23]
 800c2ca:	e000      	b.n	800c2ce <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 800c2cc:	bf00      	nop
    }

    return rslt;
 800c2ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	33a0      	adds	r3, #160	@ 0xa0
 800c2ea:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	3328      	adds	r3, #40	@ 0x28
 800c2f0:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800c2f2:	f04f 0200 	mov.w	r2, #0
 800c2f6:	4ba4      	ldr	r3, [pc, #656]	@ (800c588 <parse_calib_data+0x2ac>)
 800c2f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	3301      	adds	r3, #1
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b21b      	sxth	r3, r3
 800c304:	021b      	lsls	r3, r3, #8
 800c306:	b21a      	sxth	r2, r3
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	b21b      	sxth	r3, r3
 800c30e:	4313      	orrs	r3, r2
 800c310:	b21b      	sxth	r3, r3
 800c312:	b29a      	uxth	r2, r3
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	881b      	ldrh	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7f4 f8f1 	bl	8000504 <__aeabi_ui2d>
 800c322:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c326:	f7f4 fa91 	bl	800084c <__aeabi_ddiv>
 800c32a:	4602      	mov	r2, r0
 800c32c:	460b      	mov	r3, r1
 800c32e:	6939      	ldr	r1, [r7, #16]
 800c330:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3303      	adds	r3, #3
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	b21b      	sxth	r3, r3
 800c33c:	021b      	lsls	r3, r3, #8
 800c33e:	b21a      	sxth	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3302      	adds	r3, #2
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	b21b      	sxth	r3, r3
 800c348:	4313      	orrs	r3, r2
 800c34a:	b21b      	sxth	r3, r3
 800c34c:	b29a      	uxth	r2, r3
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	4b8d      	ldr	r3, [pc, #564]	@ (800c58c <parse_calib_data+0x2b0>)
 800c358:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	885b      	ldrh	r3, [r3, #2]
 800c360:	4618      	mov	r0, r3
 800c362:	f7f4 f8cf 	bl	8000504 <__aeabi_ui2d>
 800c366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c36a:	f7f4 fa6f 	bl	800084c <__aeabi_ddiv>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	6939      	ldr	r1, [r7, #16]
 800c374:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	b25a      	sxtb	r2, r3
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 800c384:	f04f 0200 	mov.w	r2, #0
 800c388:	4b81      	ldr	r3, [pc, #516]	@ (800c590 <parse_calib_data+0x2b4>)
 800c38a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c394:	4618      	mov	r0, r3
 800c396:	f7f4 f8c5 	bl	8000524 <__aeabi_i2d>
 800c39a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c39e:	f7f4 fa55 	bl	800084c <__aeabi_ddiv>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	6939      	ldr	r1, [r7, #16]
 800c3a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3306      	adds	r3, #6
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	b21b      	sxth	r3, r3
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	b21a      	sxth	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	3305      	adds	r3, #5
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	b21b      	sxth	r3, r3
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	b21a      	sxth	r2, r3
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 800c3c8:	f04f 0200 	mov.w	r2, #0
 800c3cc:	4b71      	ldr	r3, [pc, #452]	@ (800c594 <parse_calib_data+0x2b8>)
 800c3ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c3d8:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7f4 f8a1 	bl	8000524 <__aeabi_i2d>
 800c3e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3e6:	f7f4 fa31 	bl	800084c <__aeabi_ddiv>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	6939      	ldr	r1, [r7, #16]
 800c3f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	b21b      	sxth	r3, r3
 800c3fc:	021b      	lsls	r3, r3, #8
 800c3fe:	b21a      	sxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3307      	adds	r3, #7
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	b21b      	sxth	r3, r3
 800c408:	4313      	orrs	r3, r2
 800c40a:	b21a      	sxth	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 800c410:	f04f 0200 	mov.w	r2, #0
 800c414:	4b60      	ldr	r3, [pc, #384]	@ (800c598 <parse_calib_data+0x2bc>)
 800c416:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c420:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c424:	4618      	mov	r0, r3
 800c426:	f7f4 f87d 	bl	8000524 <__aeabi_i2d>
 800c42a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c42e:	f7f4 fa0d 	bl	800084c <__aeabi_ddiv>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	6939      	ldr	r1, [r7, #16]
 800c438:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3309      	adds	r3, #9
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	b25a      	sxtb	r2, r3
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 800c448:	f04f 0200 	mov.w	r2, #0
 800c44c:	4b53      	ldr	r3, [pc, #332]	@ (800c59c <parse_calib_data+0x2c0>)
 800c44e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7f4 f863 	bl	8000524 <__aeabi_i2d>
 800c45e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c462:	f7f4 f9f3 	bl	800084c <__aeabi_ddiv>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	6939      	ldr	r1, [r7, #16]
 800c46c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	330a      	adds	r3, #10
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	b25a      	sxtb	r2, r3
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800c47c:	f04f 0200 	mov.w	r2, #0
 800c480:	4b47      	ldr	r3, [pc, #284]	@ (800c5a0 <parse_calib_data+0x2c4>)
 800c482:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7f4 f849 	bl	8000524 <__aeabi_i2d>
 800c492:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c496:	f7f4 f9d9 	bl	800084c <__aeabi_ddiv>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	6939      	ldr	r1, [r7, #16]
 800c4a0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b21b      	sxth	r3, r3
 800c4ac:	021b      	lsls	r3, r3, #8
 800c4ae:	b21a      	sxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	330b      	adds	r3, #11
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	b21b      	sxth	r3, r3
 800c4bc:	b29a      	uxth	r2, r3
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 800c4c2:	f04f 0200 	mov.w	r2, #0
 800c4c6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c4ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	899b      	ldrh	r3, [r3, #12]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f7f4 f816 	bl	8000504 <__aeabi_ui2d>
 800c4d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4dc:	f7f4 f9b6 	bl	800084c <__aeabi_ddiv>
 800c4e0:	4602      	mov	r2, r0
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	6939      	ldr	r1, [r7, #16]
 800c4e6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	330e      	adds	r3, #14
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b21b      	sxth	r3, r3
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b21a      	sxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	330d      	adds	r3, #13
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b21b      	sxth	r3, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	b21b      	sxth	r3, r3
 800c502:	b29a      	uxth	r2, r3
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800c508:	f04f 0200 	mov.w	r2, #0
 800c50c:	4b25      	ldr	r3, [pc, #148]	@ (800c5a4 <parse_calib_data+0x2c8>)
 800c50e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	89db      	ldrh	r3, [r3, #14]
 800c516:	4618      	mov	r0, r3
 800c518:	f7f3 fff4 	bl	8000504 <__aeabi_ui2d>
 800c51c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c520:	f7f4 f994 	bl	800084c <__aeabi_ddiv>
 800c524:	4602      	mov	r2, r0
 800c526:	460b      	mov	r3, r1
 800c528:	6939      	ldr	r1, [r7, #16]
 800c52a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	330f      	adds	r3, #15
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	b25a      	sxtb	r2, r3
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800c53a:	f04f 0200 	mov.w	r2, #0
 800c53e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5a8 <parse_calib_data+0x2cc>)
 800c540:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7f3 ffea 	bl	8000524 <__aeabi_i2d>
 800c550:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c554:	f7f4 f97a 	bl	800084c <__aeabi_ddiv>
 800c558:	4602      	mov	r2, r0
 800c55a:	460b      	mov	r3, r1
 800c55c:	6939      	ldr	r1, [r7, #16]
 800c55e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3310      	adds	r3, #16
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	b25a      	sxtb	r2, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800c56e:	f04f 0200 	mov.w	r2, #0
 800c572:	4b0e      	ldr	r3, [pc, #56]	@ (800c5ac <parse_calib_data+0x2d0>)
 800c574:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800c57e:	4618      	mov	r0, r3
 800c580:	f7f3 ffd0 	bl	8000524 <__aeabi_i2d>
 800c584:	e014      	b.n	800c5b0 <parse_calib_data+0x2d4>
 800c586:	bf00      	nop
 800c588:	3f700000 	.word	0x3f700000
 800c58c:	41d00000 	.word	0x41d00000
 800c590:	42f00000 	.word	0x42f00000
 800c594:	41300000 	.word	0x41300000
 800c598:	41c00000 	.word	0x41c00000
 800c59c:	41f00000 	.word	0x41f00000
 800c5a0:	42400000 	.word	0x42400000
 800c5a4:	40500000 	.word	0x40500000
 800c5a8:	40700000 	.word	0x40700000
 800c5ac:	40e00000 	.word	0x40e00000
 800c5b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5b4:	f7f4 f94a 	bl	800084c <__aeabi_ddiv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	6939      	ldr	r1, [r7, #16]
 800c5be:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3312      	adds	r3, #18
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	b21b      	sxth	r3, r3
 800c5ca:	021b      	lsls	r3, r3, #8
 800c5cc:	b21a      	sxth	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3311      	adds	r3, #17
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	b21b      	sxth	r3, r3
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	b21a      	sxth	r2, r3
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800c5de:	f04f 0200 	mov.w	r2, #0
 800c5e2:	4b25      	ldr	r3, [pc, #148]	@ (800c678 <parse_calib_data+0x39c>)
 800c5e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7f3 ff98 	bl	8000524 <__aeabi_i2d>
 800c5f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c5f8:	f7f4 f928 	bl	800084c <__aeabi_ddiv>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	6939      	ldr	r1, [r7, #16]
 800c602:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3313      	adds	r3, #19
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b25a      	sxtb	r2, r3
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800c612:	f04f 0200 	mov.w	r2, #0
 800c616:	4b18      	ldr	r3, [pc, #96]	@ (800c678 <parse_calib_data+0x39c>)
 800c618:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c622:	4618      	mov	r0, r3
 800c624:	f7f3 ff7e 	bl	8000524 <__aeabi_i2d>
 800c628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c62c:	f7f4 f90e 	bl	800084c <__aeabi_ddiv>
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	6939      	ldr	r1, [r7, #16]
 800c636:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3314      	adds	r3, #20
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	b25a      	sxtb	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800c646:	f04f 0200 	mov.w	r2, #0
 800c64a:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 800c64e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800c658:	4618      	mov	r0, r3
 800c65a:	f7f3 ff63 	bl	8000524 <__aeabi_i2d>
 800c65e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c662:	f7f4 f8f3 	bl	800084c <__aeabi_ddiv>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	6939      	ldr	r1, [r7, #16]
 800c66c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 800c670:	bf00      	nop
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	42f00000 	.word	0x42f00000

0800c67c <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08c      	sub	sp, #48	@ 0x30
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800c688:	2300      	movs	r3, #0
 800c68a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c694:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800c698:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c69c:	f7f3 ff7e 	bl	800059c <__aeabi_l2d>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c6b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6bc:	f7f3 ff9c 	bl	80005f8 <__aeabi_dmul>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800c6c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c6cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c6d0:	f7f3 ff92 	bl	80005f8 <__aeabi_dmul>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800c6e2:	f7f3 ff89 	bl	80005f8 <__aeabi_dmul>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6f2:	f7f3 fdcb 	bl	800028c <__adddf3>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c706:	f04f 0200 	mov.w	r2, #0
 800c70a:	4b17      	ldr	r3, [pc, #92]	@ (800c768 <compensate_temperature+0xec>)
 800c70c:	f7f4 f9e6 	bl	8000adc <__aeabi_dcmplt>
 800c710:	4603      	mov	r3, r0
 800c712:	2b00      	cmp	r3, #0
 800c714:	d008      	beq.n	800c728 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	f04f 0200 	mov.w	r2, #0
 800c71c:	4b12      	ldr	r3, [pc, #72]	@ (800c768 <compensate_temperature+0xec>)
 800c71e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MIN_TEMP;
 800c722:	2303      	movs	r3, #3
 800c724:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800c72e:	f04f 0200 	mov.w	r2, #0
 800c732:	4b0e      	ldr	r3, [pc, #56]	@ (800c76c <compensate_temperature+0xf0>)
 800c734:	f7f4 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d008      	beq.n	800c750 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800c73e:	6879      	ldr	r1, [r7, #4]
 800c740:	f04f 0200 	mov.w	r2, #0
 800c744:	4b09      	ldr	r3, [pc, #36]	@ (800c76c <compensate_temperature+0xf0>)
 800c746:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MAX_TEMP;
 800c74a:	2304      	movs	r3, #4
 800c74c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c756:	68f9      	ldr	r1, [r7, #12]
 800c758:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800c75c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c760:	4618      	mov	r0, r3
 800c762:	3730      	adds	r7, #48	@ 0x30
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	c0440000 	.word	0xc0440000
 800c76c:	40554000 	.word	0x40554000

0800c770 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 800c770:	b5b0      	push	{r4, r5, r7, lr}
 800c772:	b096      	sub	sp, #88	@ 0x58
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	647b      	str	r3, [r7, #68]	@ 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 800c786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c788:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c78c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c78e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c792:	f7f3 ff31 	bl	80005f8 <__aeabi_dmul>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800c79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a0:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 800c7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a6:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800c7aa:	2002      	movs	r0, #2
 800c7ac:	eeb0 0a47 	vmov.f32	s0, s14
 800c7b0:	eef0 0a67 	vmov.f32	s1, s15
 800c7b4:	f000 f954 	bl	800ca60 <pow_bmp3>
 800c7b8:	ee10 3a10 	vmov	r3, s0
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7f3 fec3 	bl	8000548 <__aeabi_f2d>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 ff15 	bl	80005f8 <__aeabi_dmul>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800c7d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7d8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 800c7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7de:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800c7e2:	2003      	movs	r0, #3
 800c7e4:	eeb0 0a47 	vmov.f32	s0, s14
 800c7e8:	eef0 0a67 	vmov.f32	s1, s15
 800c7ec:	f000 f938 	bl	800ca60 <pow_bmp3>
 800c7f0:	ee10 3a10 	vmov	r3, s0
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7f3 fea7 	bl	8000548 <__aeabi_f2d>
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	4620      	mov	r0, r4
 800c800:	4629      	mov	r1, r5
 800c802:	f7f3 fef9 	bl	80005f8 <__aeabi_dmul>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 800c80e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c810:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c818:	f7f3 fd38 	bl	800028c <__adddf3>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4610      	mov	r0, r2
 800c822:	4619      	mov	r1, r3
 800c824:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c828:	f7f3 fd30 	bl	800028c <__adddf3>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c834:	f7f3 fd2a 	bl	800028c <__adddf3>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 800c840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c842:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c848:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c84c:	f7f3 fed4 	bl	80005f8 <__aeabi_dmul>
 800c850:	4602      	mov	r2, r0
 800c852:	460b      	mov	r3, r1
 800c854:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800c858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c85a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800c85e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c860:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800c864:	2002      	movs	r0, #2
 800c866:	eeb0 0a47 	vmov.f32	s0, s14
 800c86a:	eef0 0a67 	vmov.f32	s1, s15
 800c86e:	f000 f8f7 	bl	800ca60 <pow_bmp3>
 800c872:	ee10 3a10 	vmov	r3, s0
 800c876:	4618      	mov	r0, r3
 800c878:	f7f3 fe66 	bl	8000548 <__aeabi_f2d>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4620      	mov	r0, r4
 800c882:	4629      	mov	r1, r5
 800c884:	f7f3 feb8 	bl	80005f8 <__aeabi_dmul>
 800c888:	4602      	mov	r2, r0
 800c88a:	460b      	mov	r3, r1
 800c88c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800c890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c892:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800c896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c898:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800c89c:	2003      	movs	r0, #3
 800c89e:	eeb0 0a47 	vmov.f32	s0, s14
 800c8a2:	eef0 0a67 	vmov.f32	s1, s15
 800c8a6:	f000 f8db 	bl	800ca60 <pow_bmp3>
 800c8aa:	ee10 3a10 	vmov	r3, s0
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f3 fe4a 	bl	8000548 <__aeabi_f2d>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 fe9c 	bl	80005f8 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out2 = uncomp_data->pressure *
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	4610      	mov	r0, r2
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f7f3 fe5b 	bl	800058c <__aeabi_ul2d>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 800c8da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8dc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c8e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c8e4:	f7f3 fcd2 	bl	800028c <__adddf3>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c8f4:	f7f3 fcca 	bl	800028c <__adddf3>
 800c8f8:	4602      	mov	r2, r0
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4619      	mov	r1, r3
 800c900:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c904:	f7f3 fcc2 	bl	800028c <__adddf3>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 800c90c:	4620      	mov	r0, r4
 800c90e:	4629      	mov	r1, r5
 800c910:	f7f3 fe72 	bl	80005f8 <__aeabi_dmul>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c922:	4610      	mov	r0, r2
 800c924:	4619      	mov	r1, r3
 800c926:	f7f3 fe31 	bl	800058c <__aeabi_ul2d>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	2002      	movs	r0, #2
 800c930:	ec43 2b10 	vmov	d0, r2, r3
 800c934:	f000 f894 	bl	800ca60 <pow_bmp3>
 800c938:	ee10 3a10 	vmov	r3, s0
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7f3 fe03 	bl	8000548 <__aeabi_f2d>
 800c942:	4602      	mov	r2, r0
 800c944:	460b      	mov	r3, r1
 800c946:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800c94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c94c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 800c950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c952:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800c956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c958:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800c95c:	f7f3 fe4c 	bl	80005f8 <__aeabi_dmul>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4620      	mov	r0, r4
 800c966:	4629      	mov	r1, r5
 800c968:	f7f3 fc90 	bl	800028c <__adddf3>
 800c96c:	4602      	mov	r2, r0
 800c96e:	460b      	mov	r3, r1
 800c970:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = partial_data1 * partial_data2;
 800c974:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800c978:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800c97c:	f7f3 fe3c 	bl	80005f8 <__aeabi_dmul>
 800c980:	4602      	mov	r2, r0
 800c982:	460b      	mov	r3, r1
 800c984:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c98e:	4610      	mov	r0, r2
 800c990:	4619      	mov	r1, r3
 800c992:	f7f3 fdfb 	bl	800058c <__aeabi_ul2d>
 800c996:	4602      	mov	r2, r0
 800c998:	460b      	mov	r3, r1
 800c99a:	2003      	movs	r0, #3
 800c99c:	ec43 2b10 	vmov	d0, r2, r3
 800c9a0:	f000 f85e 	bl	800ca60 <pow_bmp3>
 800c9a4:	ee10 3a10 	vmov	r3, s0
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7f3 fdcd 	bl	8000548 <__aeabi_f2d>
 800c9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800c9b4:	f7f3 fe20 	bl	80005f8 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800c9c0:	f7f3 fc64 	bl	800028c <__adddf3>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800c9cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c9d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c9d4:	f7f3 fc5a 	bl	800028c <__adddf3>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c9e0:	f7f3 fc54 	bl	800028c <__adddf3>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 800c9ec:	a318      	add	r3, pc, #96	@ (adr r3, 800ca50 <compensate_pressure+0x2e0>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800c9f6:	f7f4 f871 	bl	8000adc <__aeabi_dcmplt>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d007      	beq.n	800ca10 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 800ca00:	a313      	add	r3, pc, #76	@ (adr r3, 800ca50 <compensate_pressure+0x2e0>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MIN_PRES;
 800ca0a:	2305      	movs	r3, #5
 800ca0c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 800ca10:	a311      	add	r3, pc, #68	@ (adr r3, 800ca58 <compensate_pressure+0x2e8>)
 800ca12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800ca1a:	f7f4 f87d 	bl	8000b18 <__aeabi_dcmpgt>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d007      	beq.n	800ca34 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 800ca24:	a30c      	add	r3, pc, #48	@ (adr r3, 800ca58 <compensate_pressure+0x2e8>)
 800ca26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca2a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MAX_PRES;
 800ca2e:	2306      	movs	r3, #6
 800ca30:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    (*pressure) = comp_press;
 800ca34:	68f9      	ldr	r1, [r7, #12]
 800ca36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ca3a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800ca3e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3758      	adds	r7, #88	@ 0x58
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bdb0      	pop	{r4, r5, r7, pc}
 800ca4a:	bf00      	nop
 800ca4c:	f3af 8000 	nop.w
 800ca50:	00000000 	.word	0x00000000
 800ca54:	40dd4c00 	.word	0x40dd4c00
 800ca58:	00000000 	.word	0x00000000
 800ca5c:	40fe8480 	.word	0x40fe8480

0800ca60 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	ed87 0b02 	vstr	d0, [r7, #8]
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800ca6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ca72:	617b      	str	r3, [r7, #20]

    while (power != 0)
 800ca74:	e00e      	b.n	800ca94 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 800ca76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca7a:	f7f4 f8b5 	bl	8000be8 <__aeabi_d2f>
 800ca7e:	ee07 0a10 	vmov	s14, r0
 800ca82:	edd7 7a05 	vldr	s15, [r7, #20]
 800ca86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ca8a:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	3b01      	subs	r3, #1
 800ca92:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1ed      	bne.n	800ca76 <pow_bmp3+0x16>
    }

    return pow_output;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	ee07 3a90 	vmov	s15, r3
}
 800caa0:	eeb0 0a67 	vmov.f32	s0, s15
 800caa4:	3718      	adds	r7, #24
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 800cab4:	2300      	movs	r3, #0
 800cab6:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	4013      	ands	r3, r2
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800cac2:	2301      	movs	r3, #1
 800cac4:	73fb      	strb	r3, [r7, #15]
 800cac6:	e001      	b.n	800cacc <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800cac8:	2300      	movs	r3, #0
 800caca:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3714      	adds	r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800cada:	b480      	push	{r7}
 800cadc:	b085      	sub	sp, #20
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00f      	beq.n	800cb08 <null_ptr_check+0x2e>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	69db      	ldr	r3, [r3, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d00b      	beq.n	800cb08 <null_ptr_check+0x2e>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d007      	beq.n	800cb08 <null_ptr_check+0x2e>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	695b      	ldr	r3, [r3, #20]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800cb08:	23ff      	movs	r3, #255	@ 0xff
 800cb0a:	73fb      	strb	r3, [r7, #15]
 800cb0c:	e001      	b.n	800cb12 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800cb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr

0800cb22 <get_sensor_status>:
/*!
 * @brief This API gets the command ready, data ready for pressure and
 * temperature, power on reset status from the sensor.
 */
static int8_t get_sensor_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;

    reg_addr = BMP3_REG_SENS_STATUS;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800cb30:	f107 010d 	add.w	r1, r7, #13
 800cb34:	7bb8      	ldrb	r0, [r7, #14]
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	f7fe fc24 	bl	800b386 <bmp3_get_regs>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800cb42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d128      	bne.n	800cb9c <get_sensor_status+0x7a>
    {
        status->sensor.cmd_rdy = BMP3_GET_BITS(reg_data, BMP3_STATUS_CMD_RDY);
 800cb4a:	7b7b      	ldrb	r3, [r7, #13]
 800cb4c:	111b      	asrs	r3, r3, #4
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	70da      	strb	r2, [r3, #3]
        status->sensor.drdy_press = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_PRESS);
 800cb5a:	7b7b      	ldrb	r3, [r7, #13]
 800cb5c:	115b      	asrs	r3, r3, #5
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	711a      	strb	r2, [r3, #4]
        status->sensor.drdy_temp = BMP3_GET_BITS(reg_data, BMP3_STATUS_DRDY_TEMP);
 800cb6a:	7b7b      	ldrb	r3, [r7, #13]
 800cb6c:	119b      	asrs	r3, r3, #6
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	715a      	strb	r2, [r3, #5]
        reg_addr = BMP3_REG_EVENT;
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	73bb      	strb	r3, [r7, #14]
        rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800cb7e:	f107 010d 	add.w	r1, r7, #13
 800cb82:	7bb8      	ldrb	r0, [r7, #14]
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f7fe fbfd 	bl	800b386 <bmp3_get_regs>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
        status->pwr_on_rst = reg_data & 0x01;
 800cb90:	7b7b      	ldrb	r3, [r7, #13]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	725a      	strb	r2, [r3, #9]
    }

    return rslt;
 800cb9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3710      	adds	r7, #16
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <get_int_status>:
/*!
 * @brief This API gets the interrupt (fifo watermark, fifo full, data ready)
 * status from the sensor.
 */
static int8_t get_int_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_INT_STATUS, &reg_data, 1, dev);
 800cbb2:	f107 010e 	add.w	r1, r7, #14
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	2011      	movs	r0, #17
 800cbbc:	f7fe fbe3 	bl	800b386 <bmp3_get_regs>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800cbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d115      	bne.n	800cbf8 <get_int_status+0x50>
    {
        status->intr.fifo_wm = BMP3_GET_BITS_POS_0(reg_data, BMP3_INT_STATUS_FWTM);
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	b2da      	uxtb	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	701a      	strb	r2, [r3, #0]
        status->intr.fifo_full = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_FFULL);
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	105b      	asrs	r3, r3, #1
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	b2da      	uxtb	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	705a      	strb	r2, [r3, #1]
        status->intr.drdy = BMP3_GET_BITS(reg_data, BMP3_INT_STATUS_DRDY);
 800cbe8:	7bbb      	ldrb	r3, [r7, #14]
 800cbea:	10db      	asrs	r3, r3, #3
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	b2da      	uxtb	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	709a      	strb	r2, [r3, #2]
    }

    return rslt;
 800cbf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <get_err_status>:
/*!
 * @brief This API gets the fatal, command and configuration error
 * from the sensor.
 */
static int8_t get_err_status(struct bmp3_status *status, struct bmp3_dev *dev)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    rslt = bmp3_get_regs(BMP3_REG_ERR, &reg_data, 1, dev);
 800cc0e:	f107 010e 	add.w	r1, r7, #14
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	2201      	movs	r2, #1
 800cc16:	2002      	movs	r0, #2
 800cc18:	f7fe fbb5 	bl	800b386 <bmp3_get_regs>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800cc20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d115      	bne.n	800cc54 <get_err_status+0x50>
    {
        status->err.fatal = BMP3_GET_BITS_POS_0(reg_data, BMP3_ERR_FATAL);
 800cc28:	7bbb      	ldrb	r3, [r7, #14]
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	719a      	strb	r2, [r3, #6]
        status->err.cmd = BMP3_GET_BITS(reg_data, BMP3_ERR_CMD);
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
 800cc36:	105b      	asrs	r3, r3, #1
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	71da      	strb	r2, [r3, #7]
        status->err.conf = BMP3_GET_BITS(reg_data, BMP3_ERR_CONF);
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	109b      	asrs	r3, r3, #2
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	f003 0301 	and.w	r3, r3, #1
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	721a      	strb	r2, [r3, #8]
    }

    return rslt;
 800cc54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <bmp388_read>:
extern struct bmp388_interface bmp388_intf;

static volatile uint32_t counter = 0U;

BMP3_INTF_RET_TYPE bmp388_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 800cc60:	b590      	push	{r4, r7, lr}
 800cc62:	b08b      	sub	sp, #44	@ 0x2c
 800cc64:	af04      	add	r7, sp, #16
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
 800cc6a:	603b      	str	r3, [r7, #0]
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(intf->hi2c, (intf->dev_addr << 1U), reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	6858      	ldr	r0, [r3, #4]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	7a1b      	ldrb	r3, [r3, #8]
 800cc7c:	005b      	lsls	r3, r3, #1
 800cc7e:	b299      	uxth	r1, r3
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	f04f 34ff 	mov.w	r4, #4294967295
 800cc8c:	9402      	str	r4, [sp, #8]
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	2301      	movs	r3, #1
 800cc96:	f7f5 fbc1 	bl	800241c <HAL_I2C_Mem_Read>
	return ( BMP3_INTF_RET_SUCCESS );
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	371c      	adds	r7, #28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd90      	pop	{r4, r7, pc}

0800cca4 <bmp388_write>:

BMP3_INTF_RET_TYPE bmp388_write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len,void *intf_ptr)
{
 800cca4:	b590      	push	{r4, r7, lr}
 800cca6:	b08b      	sub	sp, #44	@ 0x2c
 800cca8:	af04      	add	r7, sp, #16
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	603b      	str	r3, [r7, #0]
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Write(intf->hi2c, ((intf->dev_addr << 1U) | 0x1U), reg_addr, 1U, (uint8_t*)read_data, len, HAL_MAX_DELAY);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	6858      	ldr	r0, [r3, #4]
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	7a1b      	ldrb	r3, [r3, #8]
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	f043 0301 	orr.w	r3, r3, #1
 800ccc8:	b299      	uxth	r1, r3
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	f04f 34ff 	mov.w	r4, #4294967295
 800ccd6:	9402      	str	r4, [sp, #8]
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	9300      	str	r3, [sp, #0]
 800ccde:	2301      	movs	r3, #1
 800cce0:	f7f5 faa2 	bl	8002228 <HAL_I2C_Mem_Write>
	return ( BMP3_INTF_RET_SUCCESS );
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd90      	pop	{r4, r7, pc}
	...

0800ccf0 <delay_us>:

void delay_us(uint32_t period, void *intf_ptr)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]

	HAL_TIM_Base_Start_IT(intf->htim);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7f8 f9c4 	bl	8005090 <HAL_TIM_Base_Start_IT>

	while(counter != period);
 800cd08:	bf00      	nop
 800cd0a:	4b08      	ldr	r3, [pc, #32]	@ (800cd2c <delay_us+0x3c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d1fa      	bne.n	800cd0a <delay_us+0x1a>

	HAL_TIM_Base_Stop_IT(intf->htim);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f8 fa29 	bl	8005170 <HAL_TIM_Base_Stop_IT>

	counter = 0U;
 800cd1e:	4b03      	ldr	r3, [pc, #12]	@ (800cd2c <delay_us+0x3c>)
 800cd20:	2200      	movs	r2, #0
 800cd22:	601a      	str	r2, [r3, #0]
}
 800cd24:	bf00      	nop
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	200009e0 	.word	0x200009e0

0800cd30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 800cd3e:	f7f4 fbc3 	bl	80014c8 <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4b07      	ldr	r3, [pc, #28]	@ (800cd64 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d104      	bne.n	800cd5a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 800cd50:	4b05      	ldr	r3, [pc, #20]	@ (800cd68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a04      	ldr	r2, [pc, #16]	@ (800cd68 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800cd58:	6013      	str	r3, [r2, #0]
	}

}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20000000 	.word	0x20000000
 800cd68:	200009e0 	.word	0x200009e0

0800cd6c <bmp388_interface_init>:

BMP3_INTF_RET_TYPE bmp388_interface_init(struct bmp3_dev *bmp388,struct bmp388_interface *bmp388_intf)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( bmp388_intf == NULL ) )
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <bmp388_interface_init+0x16>
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <bmp388_interface_init+0x1a>
	{
		Error_Handler();
 800cd82:	f7f4 fba1 	bl	80014c8 <Error_Handler>
	}

	struct bmp3_settings settings = { 0 };
 800cd86:	f107 030c 	add.w	r3, r7, #12
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	605a      	str	r2, [r3, #4]
 800cd90:	609a      	str	r2, [r3, #8]
 800cd92:	731a      	strb	r2, [r3, #12]
	int8_t rslt = 0U;
 800cd94:	2300      	movs	r3, #0
 800cd96:	77fb      	strb	r3, [r7, #31]
	uint16_t settings_sel = 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	83bb      	strh	r3, [r7, #28]

	bmp388->intf = BMP3_I2C_INTF;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2201      	movs	r2, #1
 800cda0:	761a      	strb	r2, [r3, #24]
	bmp388->read = bmp388_read;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	4a3a      	ldr	r2, [pc, #232]	@ (800ce90 <bmp388_interface_init+0x124>)
 800cda6:	61da      	str	r2, [r3, #28]
	bmp388->write = bmp388_write;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a3a      	ldr	r2, [pc, #232]	@ (800ce94 <bmp388_interface_init+0x128>)
 800cdac:	621a      	str	r2, [r3, #32]
	bmp388->delay_us = delay_us;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a39      	ldr	r2, [pc, #228]	@ (800ce98 <bmp388_interface_init+0x12c>)
 800cdb2:	625a      	str	r2, [r3, #36]	@ 0x24
	bmp388->intf_ptr = bmp388_intf;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	683a      	ldr	r2, [r7, #0]
 800cdb8:	615a      	str	r2, [r3, #20]

	rslt = bmp3_selftest_check(bmp388);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f94a 	bl	800d054 <bmp3_selftest_check>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800cdc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <bmp388_interface_init+0x6a>
	{
		printf("BMP388 self-test failure !\n");
 800cdcc:	4833      	ldr	r0, [pc, #204]	@ (800ce9c <bmp388_interface_init+0x130>)
 800cdce:	f001 ff2b 	bl	800ec28 <puts>
		Error_Handler();
 800cdd2:	f7f4 fb79 	bl	80014c8 <Error_Handler>
	}

	printf("BMP388 self-test success !\n");
 800cdd6:	4832      	ldr	r0, [pc, #200]	@ (800cea0 <bmp388_interface_init+0x134>)
 800cdd8:	f001 ff26 	bl	800ec28 <puts>

	rslt = bmp3_init(bmp388);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7fe fa8b 	bl	800b2f8 <bmp3_init>
 800cde2:	4603      	mov	r3, r0
 800cde4:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800cde6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <bmp388_interface_init+0x8c>
	{
		printf("BMP388 initialization failure !\n");
 800cdee:	482d      	ldr	r0, [pc, #180]	@ (800cea4 <bmp388_interface_init+0x138>)
 800cdf0:	f001 ff1a 	bl	800ec28 <puts>
		Error_Handler();
 800cdf4:	f7f4 fb68 	bl	80014c8 <Error_Handler>
	}

	printf("BMP388 initialization success !\n");
 800cdf8:	482b      	ldr	r0, [pc, #172]	@ (800cea8 <bmp388_interface_init+0x13c>)
 800cdfa:	f001 ff15 	bl	800ec28 <puts>
	printf("Chip ID 0x%X\n" , bmp388->chip_id);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1b      	ldrb	r3, [r3, #16]
 800ce02:	4619      	mov	r1, r3
 800ce04:	4829      	ldr	r0, [pc, #164]	@ (800ceac <bmp388_interface_init+0x140>)
 800ce06:	f001 fea7 	bl	800eb58 <iprintf>

	settings.press_en = BMP3_ENABLE;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	737b      	strb	r3, [r7, #13]
	settings.temp_en = BMP3_ENABLE;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	73bb      	strb	r3, [r7, #14]

	settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_63; //BMP3_IIR_FILTER_COEFF_3
 800ce12:	2306      	movs	r3, #6
 800ce14:	747b      	strb	r3, [r7, #17]
	settings.odr_filter.press_os = BMP3_OVERSAMPLING_2X;
 800ce16:	2301      	movs	r3, #1
 800ce18:	73fb      	strb	r3, [r7, #15]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	743b      	strb	r3, [r7, #16]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 800ce1e:	2302      	movs	r3, #2
 800ce20:	74bb      	strb	r3, [r7, #18]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 800ce22:	23fe      	movs	r3, #254	@ 0xfe
 800ce24:	83bb      	strh	r3, [r7, #28]
				 BMP3_SEL_DRDY_EN | BMP3_SEL_IIR_FILTER;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, bmp388);
 800ce26:	8bbb      	ldrh	r3, [r7, #28]
 800ce28:	f107 010c 	add.w	r1, r7, #12
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fbce 	bl	800b5d0 <bmp3_set_sensor_settings>
 800ce34:	4603      	mov	r3, r0
 800ce36:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800ce38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d004      	beq.n	800ce4a <bmp388_interface_init+0xde>
	{
		printf("BMP388 set sensor settings failure !\n");
 800ce40:	481b      	ldr	r0, [pc, #108]	@ (800ceb0 <bmp388_interface_init+0x144>)
 800ce42:	f001 fef1 	bl	800ec28 <puts>
		Error_Handler();
 800ce46:	f7f4 fb3f 	bl	80014c8 <Error_Handler>
	}

	printf("BMP388 set sensor settings success !\n");
 800ce4a:	481a      	ldr	r0, [pc, #104]	@ (800ceb4 <bmp388_interface_init+0x148>)
 800ce4c:	f001 feec 	bl	800ec28 <puts>

	settings.op_mode = BMP3_MODE_NORMAL;
 800ce50:	2303      	movs	r3, #3
 800ce52:	733b      	strb	r3, [r7, #12]
	rslt = bmp3_set_op_mode(&settings, bmp388);
 800ce54:	f107 030c 	add.w	r3, r7, #12
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7fe fc7b 	bl	800b756 <bmp3_set_op_mode>
 800ce60:	4603      	mov	r3, r0
 800ce62:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 800ce64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d004      	beq.n	800ce76 <bmp388_interface_init+0x10a>
	{
		printf("BMP388 sensor op mode failure !\n");
 800ce6c:	4812      	ldr	r0, [pc, #72]	@ (800ceb8 <bmp388_interface_init+0x14c>)
 800ce6e:	f001 fedb 	bl	800ec28 <puts>
		Error_Handler();
 800ce72:	f7f4 fb29 	bl	80014c8 <Error_Handler>
	}

	printf("BMP388 sensor op mode failure !\n");
 800ce76:	4810      	ldr	r0, [pc, #64]	@ (800ceb8 <bmp388_interface_init+0x14c>)
 800ce78:	f001 fed6 	bl	800ec28 <puts>

	HAL_Delay(4000);
 800ce7c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800ce80:	f7f4 fda2 	bl	80019c8 <HAL_Delay>

	return ( BMP3_INTF_RET_SUCCESS );
 800ce84:	2300      	movs	r3, #0

}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3720      	adds	r7, #32
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	0800cc61 	.word	0x0800cc61
 800ce94:	0800cca5 	.word	0x0800cca5
 800ce98:	0800ccf1 	.word	0x0800ccf1
 800ce9c:	080127d4 	.word	0x080127d4
 800cea0:	080127f0 	.word	0x080127f0
 800cea4:	0801280c 	.word	0x0801280c
 800cea8:	0801282c 	.word	0x0801282c
 800ceac:	0801284c 	.word	0x0801284c
 800ceb0:	0801285c 	.word	0x0801285c
 800ceb4:	08012884 	.word	0x08012884
 800ceb8:	080128ac 	.word	0x080128ac

0800cebc <get_bmp388_sensor_data>:

BMP3_INTF_RET_TYPE get_bmp388_sensor_data(struct bmp3_dev *bmp388,struct bmp3_data *bmp388_data)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
	if( ( bmp388 == NULL ) || ( bmp388_data == NULL ) )
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <get_bmp388_sensor_data+0x16>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <get_bmp388_sensor_data+0x1a>
	{
		Error_Handler();
 800ced2:	f7f4 faf9 	bl	80014c8 <Error_Handler>
	}

	struct bmp3_status status = { { 0 } };
 800ced6:	f107 030c 	add.w	r3, r7, #12
 800ceda:	2200      	movs	r2, #0
 800cedc:	601a      	str	r2, [r3, #0]
 800cede:	605a      	str	r2, [r3, #4]
 800cee0:	811a      	strh	r2, [r3, #8]
	int8_t rslt = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	75fb      	strb	r3, [r7, #23]

	rslt = bmp3_get_status(&status, bmp388);
 800cee6:	f107 030c 	add.w	r3, r7, #12
 800ceea:	6879      	ldr	r1, [r7, #4]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fbbd 	bl	800b66c <bmp3_get_status>
 800cef2:	4603      	mov	r3, r0
 800cef4:	75fb      	strb	r3, [r7, #23]

	if ( rslt !=  BMP3_OK )
 800cef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d004      	beq.n	800cf08 <get_bmp388_sensor_data+0x4c>
	{
		  printf("BMP388 sensor get status failure !\n");
 800cefe:	4819      	ldr	r0, [pc, #100]	@ (800cf64 <get_bmp388_sensor_data+0xa8>)
 800cf00:	f001 fe92 	bl	800ec28 <puts>
		  Error_Handler();
 800cf04:	f7f4 fae0 	bl	80014c8 <Error_Handler>
	}

	/* Read temperature and pressure data iteratively based on data ready interrupt */
	if ( (rslt == BMP3_OK) && (status.intr.drdy == BMP3_ENABLE) )
 800cf08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d123      	bne.n	800cf58 <get_bmp388_sensor_data+0x9c>
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
 800cf12:	2b01      	cmp	r3, #1
 800cf14:	d120      	bne.n	800cf58 <get_bmp388_sensor_data+0x9c>
		   * First parameter indicates the type of data to be read
		   * BMP3_PRESS_TEMP : To read pressure and temperature data
		   * BMP3_TEMP       : To read only temperature data
		   * BMP3_PRESS      : To read only pressure data
		   */
		  rslt = bmp3_get_sensor_data(BMP3_PRESS_TEMP, bmp388_data , bmp388);
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	2003      	movs	r0, #3
 800cf1c:	f7fe fc8f 	bl	800b83e <bmp3_get_sensor_data>
 800cf20:	4603      	mov	r3, r0
 800cf22:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800cf24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d004      	beq.n	800cf36 <get_bmp388_sensor_data+0x7a>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800cf2c:	480d      	ldr	r0, [pc, #52]	@ (800cf64 <get_bmp388_sensor_data+0xa8>)
 800cf2e:	f001 fe7b 	bl	800ec28 <puts>
			  Error_Handler();
 800cf32:	f7f4 fac9 	bl	80014c8 <Error_Handler>
		  }

		  /* NOTE : Read status register again to clear data ready interrupt status */
		  rslt = bmp3_get_status(&status, bmp388);
 800cf36:	f107 030c 	add.w	r3, r7, #12
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe fb95 	bl	800b66c <bmp3_get_status>
 800cf42:	4603      	mov	r3, r0
 800cf44:	75fb      	strb	r3, [r7, #23]

		  if ( rslt !=  BMP3_OK )
 800cf46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d004      	beq.n	800cf58 <get_bmp388_sensor_data+0x9c>
		  {
			  printf("BMP388 sensor get status failure !\n");
 800cf4e:	4805      	ldr	r0, [pc, #20]	@ (800cf64 <get_bmp388_sensor_data+0xa8>)
 800cf50:	f001 fe6a 	bl	800ec28 <puts>
			  Error_Handler();
 800cf54:	f7f4 fab8 	bl	80014c8 <Error_Handler>
		  }
	}

	return ( BMP3_INTF_RET_SUCCESS );
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3718      	adds	r7, #24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	080128cc 	.word	0x080128cc

0800cf68 <bmp388_calibration>:

BMP3_INTF_RET_TYPE bmp388_calibration(struct bmp3_dev *bmp388,struct bmp3_data *bmp388_data,uint32_t sample_count)
{
 800cf68:	b5b0      	push	{r4, r5, r7, lr}
 800cf6a:	b08a      	sub	sp, #40	@ 0x28
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	60f8      	str	r0, [r7, #12]
 800cf70:	60b9      	str	r1, [r7, #8]
 800cf72:	607a      	str	r2, [r7, #4]
	if( ( bmp388 == NULL ) || ( bmp388_data == NULL ) || ( sample_count <= 0U) )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d005      	beq.n	800cf86 <bmp388_calibration+0x1e>
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d002      	beq.n	800cf86 <bmp388_calibration+0x1e>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <bmp388_calibration+0x22>
	{
		Error_Handler();
 800cf86:	f7f4 fa9f 	bl	80014c8 <Error_Handler>
	}

	uint32_t iter = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	627b      	str	r3, [r7, #36]	@ 0x24
	double calibration_data = 0.0f;
 800cf8e:	f04f 0200 	mov.w	r2, #0
 800cf92:	f04f 0300 	mov.w	r3, #0
 800cf96:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double LowPassFilteredData = 0.0f;
 800cf9a:	f04f 0200 	mov.w	r2, #0
 800cf9e:	f04f 0300 	mov.w	r3, #0
 800cfa2:	e9c7 2304 	strd	r2, r3, [r7, #16]


	while ( iter++ < sample_count )
 800cfa6:	e032      	b.n	800d00e <bmp388_calibration+0xa6>
	{
		if ( get_bmp388_sensor_data(bmp388,bmp388_data) != BMP3_OK )
 800cfa8:	68b9      	ldr	r1, [r7, #8]
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f7ff ff86 	bl	800cebc <get_bmp388_sensor_data>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d004      	beq.n	800cfc0 <bmp388_calibration+0x58>
		{
			  printf("BMP388 sensor get data failure !\n");
 800cfb6:	4826      	ldr	r0, [pc, #152]	@ (800d050 <bmp388_calibration+0xe8>)
 800cfb8:	f001 fe36 	bl	800ec28 <puts>
			  Error_Handler();
 800cfbc:	f7f4 fa84 	bl	80014c8 <Error_Handler>
		}

		LowPassFilteredData = LPF_BAR_ALPHA * LowPassFilteredData + (1.0f - LPF_BAR_ALPHA) * bmp388_data->pressure;
 800cfc0:	a31f      	add	r3, pc, #124	@ (adr r3, 800d040 <bmp388_calibration+0xd8>)
 800cfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cfca:	f7f3 fb15 	bl	80005f8 <__aeabi_dmul>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4614      	mov	r4, r2
 800cfd4:	461d      	mov	r5, r3
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800cfdc:	a31a      	add	r3, pc, #104	@ (adr r3, 800d048 <bmp388_calibration+0xe0>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4620      	mov	r0, r4
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7f3 f94d 	bl	800028c <__adddf3>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	e9c7 2304 	strd	r2, r3, [r7, #16]

		calibration_data += LowPassFilteredData;
 800cffa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cffe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d002:	f7f3 f943 	bl	800028c <__adddf3>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while ( iter++ < sample_count )
 800d00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d010:	1c5a      	adds	r2, r3, #1
 800d012:	627a      	str	r2, [r7, #36]	@ 0x24
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	429a      	cmp	r2, r3
 800d018:	d8c6      	bhi.n	800cfa8 <bmp388_calibration+0x40>

	}

	calibration_data /= (double)sample_count;
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7f3 fa72 	bl	8000504 <__aeabi_ui2d>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d028:	f7f3 fc10 	bl	800084c <__aeabi_ddiv>
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//bmp388_data->altitude[1] = - (LowPassFilteredData - calibration_data) / (DENSITY_AIR_KG_M3 * GRAVITY_AIR_KG_MPS2)/1000;
	return ( BMP3_INTF_RET_SUCCESS );
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3728      	adds	r7, #40	@ 0x28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bdb0      	pop	{r4, r5, r7, pc}
 800d03e:	bf00      	nop
 800d040:	40000000 	.word	0x40000000
 800d044:	3fd33333 	.word	0x3fd33333
 800d048:	60000000 	.word	0x60000000
 800d04c:	3fe66666 	.word	0x3fe66666
 800d050:	080128f0 	.word	0x080128f0

0800d054 <bmp3_selftest_check>:

/*!
 * @brief       Self-test API for the BMP38X
 */
int8_t bmp3_selftest_check(struct bmp3_dev *dev)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08c      	sub	sp, #48	@ 0x30
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]

    /* Variable used to select the sensor component */
    uint8_t sensor_comp;

    /* Variable used to store the compensated data */
    struct bmp3_data data = { 0 };
 800d05c:	f107 0318 	add.w	r3, r7, #24
 800d060:	2200      	movs	r2, #0
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	605a      	str	r2, [r3, #4]
 800d066:	609a      	str	r2, [r3, #8]
 800d068:	60da      	str	r2, [r3, #12]

    /* Used to select the settings user needs to change */
    uint16_t settings_sel;

    /* Reset the sensor */
    rslt = bmp3_soft_reset(dev);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f7fe fb29 	bl	800b6c2 <bmp3_soft_reset>
 800d070:	4603      	mov	r3, r0
 800d072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMP3_SENSOR_OK)
 800d076:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d17a      	bne.n	800d174 <bmp3_selftest_check+0x120>
    {
        rslt = bmp3_init(dev);
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7fe f93a 	bl	800b2f8 <bmp3_init>
 800d084:	4603      	mov	r3, r0
 800d086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMP3_E_COMM_FAIL || rslt == BMP3_E_DEV_NOT_FOUND)
 800d08a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d08e:	f113 0f02 	cmn.w	r3, #2
 800d092:	d004      	beq.n	800d09e <bmp3_selftest_check+0x4a>
 800d094:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d098:	f113 0f07 	cmn.w	r3, #7
 800d09c:	d102      	bne.n	800d0a4 <bmp3_selftest_check+0x50>
        {
            rslt = BMP3_COMMUNICATION_ERROR_OR_WRONG_DEVICE;
 800d09e:	230a      	movs	r3, #10
 800d0a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (rslt == BMP3_SENSOR_OK)
 800d0a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d105      	bne.n	800d0b8 <bmp3_selftest_check+0x64>
        {
            rslt = validate_trimming_param(dev);
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 f8b5 	bl	800d21c <validate_trimming_param>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (rslt == BMP3_SENSOR_OK)
 800d0b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d13e      	bne.n	800d13e <bmp3_selftest_check+0xea>
        {
            /* Select the pressure and temperature sensor to be enabled */
        	dev_setting.press_en = BMP3_ENABLE;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	727b      	strb	r3, [r7, #9]
        	dev_setting.temp_en = BMP3_ENABLE;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	72bb      	strb	r3, [r7, #10]

            /* Select the output data rate and over sampling settings for pressure and temperature */
        	dev_setting.odr_filter.press_os = BMP3_NO_OVERSAMPLING;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	72fb      	strb	r3, [r7, #11]
        	dev_setting.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	733b      	strb	r3, [r7, #12]
        	dev_setting.odr_filter.odr = BMP3_ODR_25_HZ;
 800d0d0:	2303      	movs	r3, #3
 800d0d2:	73bb      	strb	r3, [r7, #14]

            /* Assign the settings which needs to be set in the sensor */
            settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 800d0d4:	23b6      	movs	r3, #182	@ 0xb6
 800d0d6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            rslt = bmp3_set_sensor_settings(settings_sel, &dev_setting,dev);
 800d0d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0da:	f107 0108 	add.w	r1, r7, #8
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fe fa75 	bl	800b5d0 <bmp3_set_sensor_settings>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMP3_SENSOR_OK)
 800d0ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d124      	bne.n	800d13e <bmp3_selftest_check+0xea>
            {
            	dev_setting.op_mode = BMP3_MODE_NORMAL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800d0f8:	f107 0308 	add.w	r3, r7, #8
 800d0fc:	6879      	ldr	r1, [r7, #4]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fe fb29 	bl	800b756 <bmp3_set_op_mode>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (rslt == BMP3_SENSOR_OK)
 800d10a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d115      	bne.n	800d13e <bmp3_selftest_check+0xea>
                {
                    dev->delay_us(40000, dev->intf_ptr);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	6952      	ldr	r2, [r2, #20]
 800d11a:	4611      	mov	r1, r2
 800d11c:	f649 4040 	movw	r0, #40000	@ 0x9c40
 800d120:	4798      	blx	r3

                    /* Sensor component selection */
                    sensor_comp = BMP3_PRESS | BMP3_TEMP;
 800d122:	2303      	movs	r3, #3
 800d124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                    /* Temperature and Pressure data are read and stored in the bmp3_data instance */
                    rslt = bmp3_get_sensor_data(sensor_comp, &data, dev);
 800d128:	f107 0118 	add.w	r1, r7, #24
 800d12c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	4618      	mov	r0, r3
 800d134:	f7fe fb83 	bl	800b83e <bmp3_get_sensor_data>
 800d138:	4603      	mov	r3, r0
 800d13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                }
            }
        }

        if (rslt == BMP3_SENSOR_OK)
 800d13e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d142:	2b00      	cmp	r3, #0
 800d144:	d116      	bne.n	800d174 <bmp3_selftest_check+0x120>
        {
            rslt = analyze_sensor_data(&data);
 800d146:	f107 0318 	add.w	r3, r7, #24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 f818 	bl	800d180 <analyze_sensor_data>
 800d150:	4603      	mov	r3, r0
 800d152:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /* Set the power mode to sleep mode */
            if (rslt == BMP3_SENSOR_OK)
 800d156:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d10a      	bne.n	800d174 <bmp3_selftest_check+0x120>
            {
            	dev_setting.op_mode = BMP3_MODE_SLEEP;
 800d15e:	2300      	movs	r3, #0
 800d160:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 800d162:	f107 0308 	add.w	r3, r7, #8
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	4618      	mov	r0, r3
 800d16a:	f7fe faf4 	bl	800b756 <bmp3_set_op_mode>
 800d16e:	4603      	mov	r3, r0
 800d170:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
        }
    }

    return rslt;
 800d174:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3730      	adds	r7, #48	@ 0x30
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <analyze_sensor_data>:

/*!
 * @brief  Function to analyze the sensor data
 */
static int8_t analyze_sensor_data(const struct bmp3_data *sens_data)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP3_SENSOR_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]

    if ((sens_data->temperature < BMP3_MIN_TEMPERATURE) || (sens_data->temperature > BMP3_MAX_TEMPERATURE))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d192:	f04f 0200 	mov.w	r2, #0
 800d196:	f04f 0300 	mov.w	r3, #0
 800d19a:	f7f3 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <analyze_sensor_data+0x3a>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d1aa:	f04f 0200 	mov.w	r2, #0
 800d1ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d218 <analyze_sensor_data+0x98>)
 800d1b0:	f7f3 fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <analyze_sensor_data+0x3e>
    {
        rslt = BMP3_IMPLAUSIBLE_TEMPERATURE;
 800d1ba:	2328      	movs	r3, #40	@ 0x28
 800d1bc:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMP3_SENSOR_OK)
 800d1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d117      	bne.n	800d1f6 <analyze_sensor_data+0x76>
    {
        if ((sens_data->pressure < BMP3_MIN_PRESSURE) || (sens_data->pressure > BMP3_MAX_PRESSURE))
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d1cc:	a30e      	add	r3, pc, #56	@ (adr r3, 800d208 <analyze_sensor_data+0x88>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 fc83 	bl	8000adc <__aeabi_dcmplt>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10a      	bne.n	800d1f2 <analyze_sensor_data+0x72>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d1e2:	a30b      	add	r3, pc, #44	@ (adr r3, 800d210 <analyze_sensor_data+0x90>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f3 fc96 	bl	8000b18 <__aeabi_dcmpgt>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d001      	beq.n	800d1f6 <analyze_sensor_data+0x76>
        {
            rslt = BMP3_IMPLAUSIBLE_PRESSURE;
 800d1f2:	2329      	movs	r3, #41	@ 0x29
 800d1f4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800d1f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	f3af 8000 	nop.w
 800d208:	00000000 	.word	0x00000000
 800d20c:	40f5f900 	.word	0x40f5f900
 800d210:	00000000 	.word	0x00000000
 800d214:	40fadb00 	.word	0x40fadb00
 800d218:	40af4000 	.word	0x40af4000

0800d21c <validate_trimming_param>:

/*
 * @brief Function to verify the trimming parameters
 * */
static int8_t validate_trimming_param(struct bmp3_dev *dev)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08a      	sub	sp, #40	@ 0x28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t crc = 0xFF;
 800d224:	23ff      	movs	r3, #255	@ 0xff
 800d226:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t stored_crc;
    uint8_t trim_param[21];
    uint8_t i;

    rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 800d22a:	f107 010c 	add.w	r1, r7, #12
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2215      	movs	r2, #21
 800d232:	2031      	movs	r0, #49	@ 0x31
 800d234:	f7fe f8a7 	bl	800b386 <bmp3_get_regs>
 800d238:	4603      	mov	r3, r0
 800d23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMP3_SENSOR_OK)
 800d23e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800d242:	2b00      	cmp	r3, #0
 800d244:	d133      	bne.n	800d2ae <validate_trimming_param+0x92>
    {
        for (i = 0; i < 21; i++)
 800d246:	2300      	movs	r3, #0
 800d248:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d24c:	e013      	b.n	800d276 <validate_trimming_param+0x5a>
        {
            crc = (uint8_t)cal_crc(crc, trim_param[i]);
 800d24e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d252:	3328      	adds	r3, #40	@ 0x28
 800d254:	443b      	add	r3, r7
 800d256:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 800d25a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f82a 	bl	800d2ba <cal_crc>
 800d266:	4603      	mov	r3, r0
 800d268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (i = 0; i < 21; i++)
 800d26c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d270:	3301      	adds	r3, #1
 800d272:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d276:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d27a:	2b14      	cmp	r3, #20
 800d27c:	d9e7      	bls.n	800d24e <validate_trimming_param+0x32>
        }

        crc = (crc ^ 0xFF);
 800d27e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d282:	43db      	mvns	r3, r3
 800d284:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 800d288:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	2030      	movs	r0, #48	@ 0x30
 800d292:	f7fe f878 	bl	800b386 <bmp3_get_regs>
 800d296:	4603      	mov	r3, r0
 800d298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (stored_crc != crc)
 800d29c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d002      	beq.n	800d2ae <validate_trimming_param+0x92>
        {
            rslt = BMP3_TRIMMING_DATA_OUT_OF_BOUND;
 800d2a8:	2314      	movs	r3, #20
 800d2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 800d2ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3728      	adds	r7, #40	@ 0x28
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <cal_crc>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b085      	sub	sp, #20
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	460a      	mov	r2, r1
 800d2c4:	71fb      	strb	r3, [r7, #7]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	71bb      	strb	r3, [r7, #6]
    int8_t poly = 0x1D;
 800d2ca:	231d      	movs	r3, #29
 800d2cc:	737b      	strb	r3, [r7, #13]
    int8_t var2;
    uint8_t i;

    for (i = 0; i < 8; i++)
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	73bb      	strb	r3, [r7, #14]
 800d2d2:	e01c      	b.n	800d30e <cal_crc+0x54>
    {
        if ((seed & 0x80) ^ (data & 0x80))
 800d2d4:	79fa      	ldrb	r2, [r7, #7]
 800d2d6:	79bb      	ldrb	r3, [r7, #6]
 800d2d8:	4053      	eors	r3, r2
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	b25b      	sxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	da02      	bge.n	800d2e8 <cal_crc+0x2e>
        {
            var2 = 1;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	73fb      	strb	r3, [r7, #15]
 800d2e6:	e001      	b.n	800d2ec <cal_crc+0x32>
        }
        else
        {
            var2 = 0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	73fb      	strb	r3, [r7, #15]
        }

        seed = (seed & 0x7F) << 1;
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	005b      	lsls	r3, r3, #1
 800d2f0:	71fb      	strb	r3, [r7, #7]
        data = (data & 0x7F) << 1;
 800d2f2:	79bb      	ldrb	r3, [r7, #6]
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	71bb      	strb	r3, [r7, #6]
        seed = seed ^ (uint8_t)(poly * var2);
 800d2f8:	7b7a      	ldrb	r2, [r7, #13]
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	fb12 f303 	smulbb	r3, r2, r3
 800d300:	b2da      	uxtb	r2, r3
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	4053      	eors	r3, r2
 800d306:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	3301      	adds	r3, #1
 800d30c:	73bb      	strb	r3, [r7, #14]
 800d30e:	7bbb      	ldrb	r3, [r7, #14]
 800d310:	2b07      	cmp	r3, #7
 800d312:	d9df      	bls.n	800d2d4 <cal_crc+0x1a>
    }

    return (int8_t)seed;
 800d314:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3714      	adds	r7, #20
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d328:	2200      	movs	r2, #0
 800d32a:	4912      	ldr	r1, [pc, #72]	@ (800d374 <MX_USB_DEVICE_Init+0x50>)
 800d32c:	4812      	ldr	r0, [pc, #72]	@ (800d378 <MX_USB_DEVICE_Init+0x54>)
 800d32e:	f7fa fc3b 	bl	8007ba8 <USBD_Init>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d001      	beq.n	800d33c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d338:	f7f4 f8c6 	bl	80014c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d33c:	490f      	ldr	r1, [pc, #60]	@ (800d37c <MX_USB_DEVICE_Init+0x58>)
 800d33e:	480e      	ldr	r0, [pc, #56]	@ (800d378 <MX_USB_DEVICE_Init+0x54>)
 800d340:	f7fa fc62 	bl	8007c08 <USBD_RegisterClass>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d34a:	f7f4 f8bd 	bl	80014c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d34e:	490c      	ldr	r1, [pc, #48]	@ (800d380 <MX_USB_DEVICE_Init+0x5c>)
 800d350:	4809      	ldr	r0, [pc, #36]	@ (800d378 <MX_USB_DEVICE_Init+0x54>)
 800d352:	f7fa fb99 	bl	8007a88 <USBD_CDC_RegisterInterface>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d35c:	f7f4 f8b4 	bl	80014c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d360:	4805      	ldr	r0, [pc, #20]	@ (800d378 <MX_USB_DEVICE_Init+0x54>)
 800d362:	f7fa fc87 	bl	8007c74 <USBD_Start>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d36c:	f7f4 f8ac 	bl	80014c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d370:	bf00      	nop
 800d372:	bd80      	pop	{r7, pc}
 800d374:	200000bc 	.word	0x200000bc
 800d378:	200009e4 	.word	0x200009e4
 800d37c:	20000028 	.word	0x20000028
 800d380:	200000a8 	.word	0x200000a8

0800d384 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d388:	2200      	movs	r2, #0
 800d38a:	4905      	ldr	r1, [pc, #20]	@ (800d3a0 <CDC_Init_FS+0x1c>)
 800d38c:	4805      	ldr	r0, [pc, #20]	@ (800d3a4 <CDC_Init_FS+0x20>)
 800d38e:	f7fa fb95 	bl	8007abc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d392:	4905      	ldr	r1, [pc, #20]	@ (800d3a8 <CDC_Init_FS+0x24>)
 800d394:	4803      	ldr	r0, [pc, #12]	@ (800d3a4 <CDC_Init_FS+0x20>)
 800d396:	f7fa fbb3 	bl	8007b00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d39a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	200014c0 	.word	0x200014c0
 800d3a4:	200009e4 	.word	0x200009e4
 800d3a8:	20000cc0 	.word	0x20000cc0

0800d3ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d3b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	6039      	str	r1, [r7, #0]
 800d3c6:	71fb      	strb	r3, [r7, #7]
 800d3c8:	4613      	mov	r3, r2
 800d3ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d3cc:	79fb      	ldrb	r3, [r7, #7]
 800d3ce:	2b23      	cmp	r3, #35	@ 0x23
 800d3d0:	d84a      	bhi.n	800d468 <CDC_Control_FS+0xac>
 800d3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d8 <CDC_Control_FS+0x1c>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d469 	.word	0x0800d469
 800d3dc:	0800d469 	.word	0x0800d469
 800d3e0:	0800d469 	.word	0x0800d469
 800d3e4:	0800d469 	.word	0x0800d469
 800d3e8:	0800d469 	.word	0x0800d469
 800d3ec:	0800d469 	.word	0x0800d469
 800d3f0:	0800d469 	.word	0x0800d469
 800d3f4:	0800d469 	.word	0x0800d469
 800d3f8:	0800d469 	.word	0x0800d469
 800d3fc:	0800d469 	.word	0x0800d469
 800d400:	0800d469 	.word	0x0800d469
 800d404:	0800d469 	.word	0x0800d469
 800d408:	0800d469 	.word	0x0800d469
 800d40c:	0800d469 	.word	0x0800d469
 800d410:	0800d469 	.word	0x0800d469
 800d414:	0800d469 	.word	0x0800d469
 800d418:	0800d469 	.word	0x0800d469
 800d41c:	0800d469 	.word	0x0800d469
 800d420:	0800d469 	.word	0x0800d469
 800d424:	0800d469 	.word	0x0800d469
 800d428:	0800d469 	.word	0x0800d469
 800d42c:	0800d469 	.word	0x0800d469
 800d430:	0800d469 	.word	0x0800d469
 800d434:	0800d469 	.word	0x0800d469
 800d438:	0800d469 	.word	0x0800d469
 800d43c:	0800d469 	.word	0x0800d469
 800d440:	0800d469 	.word	0x0800d469
 800d444:	0800d469 	.word	0x0800d469
 800d448:	0800d469 	.word	0x0800d469
 800d44c:	0800d469 	.word	0x0800d469
 800d450:	0800d469 	.word	0x0800d469
 800d454:	0800d469 	.word	0x0800d469
 800d458:	0800d469 	.word	0x0800d469
 800d45c:	0800d469 	.word	0x0800d469
 800d460:	0800d469 	.word	0x0800d469
 800d464:	0800d469 	.word	0x0800d469
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d468:	bf00      	nop
  }

  return (USBD_OK);
 800d46a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	4805      	ldr	r0, [pc, #20]	@ (800d49c <CDC_Receive_FS+0x24>)
 800d486:	f7fa fb3b 	bl	8007b00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d48a:	4804      	ldr	r0, [pc, #16]	@ (800d49c <CDC_Receive_FS+0x24>)
 800d48c:	f7fa fb56 	bl	8007b3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d490:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	200009e4 	.word	0x200009e4

0800d4a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b087      	sub	sp, #28
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d4b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
	...

0800d4c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	6039      	str	r1, [r7, #0]
 800d4ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2212      	movs	r2, #18
 800d4d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4d6:	4b03      	ldr	r3, [pc, #12]	@ (800d4e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	200000d8 	.word	0x200000d8

0800d4e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b083      	sub	sp, #12
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	6039      	str	r1, [r7, #0]
 800d4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2204      	movs	r2, #4
 800d4f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4fa:	4b03      	ldr	r3, [pc, #12]	@ (800d508 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	370c      	adds	r7, #12
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	200000ec 	.word	0x200000ec

0800d50c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	6039      	str	r1, [r7, #0]
 800d516:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d518:	79fb      	ldrb	r3, [r7, #7]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d51e:	683a      	ldr	r2, [r7, #0]
 800d520:	4907      	ldr	r1, [pc, #28]	@ (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
 800d522:	4808      	ldr	r0, [pc, #32]	@ (800d544 <USBD_FS_ProductStrDescriptor+0x38>)
 800d524:	f7fb fd56 	bl	8008fd4 <USBD_GetString>
 800d528:	e004      	b.n	800d534 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4904      	ldr	r1, [pc, #16]	@ (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
 800d52e:	4805      	ldr	r0, [pc, #20]	@ (800d544 <USBD_FS_ProductStrDescriptor+0x38>)
 800d530:	f7fb fd50 	bl	8008fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d534:	4b02      	ldr	r3, [pc, #8]	@ (800d540 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d536:	4618      	mov	r0, r3
 800d538:	3708      	adds	r7, #8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop
 800d540:	20001cc0 	.word	0x20001cc0
 800d544:	08012914 	.word	0x08012914

0800d548 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	6039      	str	r1, [r7, #0]
 800d552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	4904      	ldr	r1, [pc, #16]	@ (800d568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d558:	4804      	ldr	r0, [pc, #16]	@ (800d56c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d55a:	f7fb fd3b 	bl	8008fd4 <USBD_GetString>
  return USBD_StrDesc;
 800d55e:	4b02      	ldr	r3, [pc, #8]	@ (800d568 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20001cc0 	.word	0x20001cc0
 800d56c:	0801291c 	.word	0x0801291c

0800d570 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	221a      	movs	r2, #26
 800d580:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d582:	f000 f843 	bl	800d60c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d586:	4b02      	ldr	r3, [pc, #8]	@ (800d590 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	200000f0 	.word	0x200000f0

0800d594 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	6039      	str	r1, [r7, #0]
 800d59e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d105      	bne.n	800d5b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	4907      	ldr	r1, [pc, #28]	@ (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5aa:	4808      	ldr	r0, [pc, #32]	@ (800d5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5ac:	f7fb fd12 	bl	8008fd4 <USBD_GetString>
 800d5b0:	e004      	b.n	800d5bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	4904      	ldr	r1, [pc, #16]	@ (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d5b6:	4805      	ldr	r0, [pc, #20]	@ (800d5cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5b8:	f7fb fd0c 	bl	8008fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5bc:	4b02      	ldr	r3, [pc, #8]	@ (800d5c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3708      	adds	r7, #8
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20001cc0 	.word	0x20001cc0
 800d5cc:	08012930 	.word	0x08012930

0800d5d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	6039      	str	r1, [r7, #0]
 800d5da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5dc:	79fb      	ldrb	r3, [r7, #7]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d105      	bne.n	800d5ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4907      	ldr	r1, [pc, #28]	@ (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5e6:	4808      	ldr	r0, [pc, #32]	@ (800d608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5e8:	f7fb fcf4 	bl	8008fd4 <USBD_GetString>
 800d5ec:	e004      	b.n	800d5f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ee:	683a      	ldr	r2, [r7, #0]
 800d5f0:	4904      	ldr	r1, [pc, #16]	@ (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5f2:	4805      	ldr	r0, [pc, #20]	@ (800d608 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5f4:	f7fb fcee 	bl	8008fd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	@ (800d604 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	20001cc0 	.word	0x20001cc0
 800d608:	0801293c 	.word	0x0801293c

0800d60c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d612:	4b0f      	ldr	r3, [pc, #60]	@ (800d650 <Get_SerialNum+0x44>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d618:	4b0e      	ldr	r3, [pc, #56]	@ (800d654 <Get_SerialNum+0x48>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d61e:	4b0e      	ldr	r3, [pc, #56]	@ (800d658 <Get_SerialNum+0x4c>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d632:	2208      	movs	r2, #8
 800d634:	4909      	ldr	r1, [pc, #36]	@ (800d65c <Get_SerialNum+0x50>)
 800d636:	68f8      	ldr	r0, [r7, #12]
 800d638:	f000 f814 	bl	800d664 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d63c:	2204      	movs	r2, #4
 800d63e:	4908      	ldr	r1, [pc, #32]	@ (800d660 <Get_SerialNum+0x54>)
 800d640:	68b8      	ldr	r0, [r7, #8]
 800d642:	f000 f80f 	bl	800d664 <IntToUnicode>
  }
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	1fff7a10 	.word	0x1fff7a10
 800d654:	1fff7a14 	.word	0x1fff7a14
 800d658:	1fff7a18 	.word	0x1fff7a18
 800d65c:	200000f2 	.word	0x200000f2
 800d660:	20000102 	.word	0x20000102

0800d664 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d664:	b480      	push	{r7}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	4613      	mov	r3, r2
 800d670:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d676:	2300      	movs	r3, #0
 800d678:	75fb      	strb	r3, [r7, #23]
 800d67a:	e027      	b.n	800d6cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	0f1b      	lsrs	r3, r3, #28
 800d680:	2b09      	cmp	r3, #9
 800d682:	d80b      	bhi.n	800d69c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	0f1b      	lsrs	r3, r3, #28
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	4619      	mov	r1, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	440b      	add	r3, r1
 800d694:	3230      	adds	r2, #48	@ 0x30
 800d696:	b2d2      	uxtb	r2, r2
 800d698:	701a      	strb	r2, [r3, #0]
 800d69a:	e00a      	b.n	800d6b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	0f1b      	lsrs	r3, r3, #28
 800d6a0:	b2da      	uxtb	r2, r3
 800d6a2:	7dfb      	ldrb	r3, [r7, #23]
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	440b      	add	r3, r1
 800d6ac:	3237      	adds	r2, #55	@ 0x37
 800d6ae:	b2d2      	uxtb	r2, r2
 800d6b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	011b      	lsls	r3, r3, #4
 800d6b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	3301      	adds	r3, #1
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	75fb      	strb	r3, [r7, #23]
 800d6cc:	7dfa      	ldrb	r2, [r7, #23]
 800d6ce:	79fb      	ldrb	r3, [r7, #7]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d3d3      	bcc.n	800d67c <IntToUnicode+0x18>
  }
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop
 800d6d8:	371c      	adds	r7, #28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
	...

0800d6e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08a      	sub	sp, #40	@ 0x28
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6ec:	f107 0314 	add.w	r3, r7, #20
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	605a      	str	r2, [r3, #4]
 800d6f6:	609a      	str	r2, [r3, #8]
 800d6f8:	60da      	str	r2, [r3, #12]
 800d6fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d704:	d13a      	bne.n	800d77c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d706:	2300      	movs	r3, #0
 800d708:	613b      	str	r3, [r7, #16]
 800d70a:	4b1e      	ldr	r3, [pc, #120]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d70c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d70e:	4a1d      	ldr	r2, [pc, #116]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d710:	f043 0301 	orr.w	r3, r3, #1
 800d714:	6313      	str	r3, [r2, #48]	@ 0x30
 800d716:	4b1b      	ldr	r3, [pc, #108]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	613b      	str	r3, [r7, #16]
 800d720:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d722:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d728:	2302      	movs	r3, #2
 800d72a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d72c:	2300      	movs	r3, #0
 800d72e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d730:	2303      	movs	r3, #3
 800d732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d734:	230a      	movs	r3, #10
 800d736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d738:	f107 0314 	add.w	r3, r7, #20
 800d73c:	4619      	mov	r1, r3
 800d73e:	4812      	ldr	r0, [pc, #72]	@ (800d788 <HAL_PCD_MspInit+0xa4>)
 800d740:	f7f4 fa78 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d744:	4b0f      	ldr	r3, [pc, #60]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d748:	4a0e      	ldr	r2, [pc, #56]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d74a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d74e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	4b0b      	ldr	r3, [pc, #44]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d758:	4a0a      	ldr	r2, [pc, #40]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d75a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d75e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d760:	4b08      	ldr	r3, [pc, #32]	@ (800d784 <HAL_PCD_MspInit+0xa0>)
 800d762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d764:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d768:	60fb      	str	r3, [r7, #12]
 800d76a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d76c:	2200      	movs	r2, #0
 800d76e:	2100      	movs	r1, #0
 800d770:	2043      	movs	r0, #67	@ 0x43
 800d772:	f7f4 fa28 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d776:	2043      	movs	r0, #67	@ 0x43
 800d778:	f7f4 fa41 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d77c:	bf00      	nop
 800d77e:	3728      	adds	r7, #40	@ 0x28
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	40023800 	.word	0x40023800
 800d788:	40020000 	.word	0x40020000

0800d78c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	4610      	mov	r0, r2
 800d7a4:	f7fa fab3 	bl	8007d0e <USBD_LL_SetupStage>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d7c2:	78fa      	ldrb	r2, [r7, #3]
 800d7c4:	6879      	ldr	r1, [r7, #4]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	00db      	lsls	r3, r3, #3
 800d7ca:	4413      	add	r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	440b      	add	r3, r1
 800d7d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	78fb      	ldrb	r3, [r7, #3]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f7fa faed 	bl	8007db8 <USBD_LL_DataOutStage>
}
 800d7de:	bf00      	nop
 800d7e0:	3708      	adds	r7, #8
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b082      	sub	sp, #8
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d7f8:	78fa      	ldrb	r2, [r7, #3]
 800d7fa:	6879      	ldr	r1, [r7, #4]
 800d7fc:	4613      	mov	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	4413      	add	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	440b      	add	r3, r1
 800d806:	3320      	adds	r3, #32
 800d808:	681a      	ldr	r2, [r3, #0]
 800d80a:	78fb      	ldrb	r3, [r7, #3]
 800d80c:	4619      	mov	r1, r3
 800d80e:	f7fa fb86 	bl	8007f1e <USBD_LL_DataInStage>
}
 800d812:	bf00      	nop
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}

0800d81a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b082      	sub	sp, #8
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d828:	4618      	mov	r0, r3
 800d82a:	f7fa fcc0 	bl	80081ae <USBD_LL_SOF>
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d83e:	2301      	movs	r3, #1
 800d840:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	79db      	ldrb	r3, [r3, #7]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d102      	bne.n	800d850 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d84a:	2300      	movs	r3, #0
 800d84c:	73fb      	strb	r3, [r7, #15]
 800d84e:	e008      	b.n	800d862 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	79db      	ldrb	r3, [r3, #7]
 800d854:	2b02      	cmp	r3, #2
 800d856:	d102      	bne.n	800d85e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d858:	2301      	movs	r3, #1
 800d85a:	73fb      	strb	r3, [r7, #15]
 800d85c:	e001      	b.n	800d862 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d85e:	f7f3 fe33 	bl	80014c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d868:	7bfa      	ldrb	r2, [r7, #15]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fa fc5a 	bl	8008126 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fa fc02 	bl	8008082 <USBD_LL_Reset>
}
 800d87e:	bf00      	nop
 800d880:	3710      	adds	r7, #16
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
	...

0800d888 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d896:	4618      	mov	r0, r3
 800d898:	f7fa fc55 	bl	8008146 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	687a      	ldr	r2, [r7, #4]
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d8ae:	f043 0301 	orr.w	r3, r3, #1
 800d8b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7adb      	ldrb	r3, [r3, #11]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8bc:	4b04      	ldr	r3, [pc, #16]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x48>)
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	4a03      	ldr	r2, [pc, #12]	@ (800d8d0 <HAL_PCD_SuspendCallback+0x48>)
 800d8c2:	f043 0306 	orr.w	r3, r3, #6
 800d8c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8c8:	bf00      	nop
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	e000ed00 	.word	0xe000ed00

0800d8d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fa fc4b 	bl	800817e <USBD_LL_Resume>
}
 800d8e8:	bf00      	nop
 800d8ea:	3708      	adds	r7, #8
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b082      	sub	sp, #8
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7fa fca3 	bl	8008252 <USBD_LL_IsoOUTIncomplete>
}
 800d90c:	bf00      	nop
 800d90e:	3708      	adds	r7, #8
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}

0800d914 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	460b      	mov	r3, r1
 800d91e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d926:	78fa      	ldrb	r2, [r7, #3]
 800d928:	4611      	mov	r1, r2
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fa fc5f 	bl	80081ee <USBD_LL_IsoINIncomplete>
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d946:	4618      	mov	r0, r3
 800d948:	f7fa fcb5 	bl	80082b6 <USBD_LL_DevConnected>
}
 800d94c:	bf00      	nop
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d962:	4618      	mov	r0, r3
 800d964:	f7fa fcb2 	bl	80082cc <USBD_LL_DevDisconnected>
}
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d13c      	bne.n	800d9fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d980:	4a20      	ldr	r2, [pc, #128]	@ (800da04 <USBD_LL_Init+0x94>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a1e      	ldr	r2, [pc, #120]	@ (800da04 <USBD_LL_Init+0x94>)
 800d98c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d990:	4b1c      	ldr	r3, [pc, #112]	@ (800da04 <USBD_LL_Init+0x94>)
 800d992:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d998:	4b1a      	ldr	r3, [pc, #104]	@ (800da04 <USBD_LL_Init+0x94>)
 800d99a:	2204      	movs	r2, #4
 800d99c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d99e:	4b19      	ldr	r3, [pc, #100]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d9a4:	4b17      	ldr	r3, [pc, #92]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d9aa:	4b16      	ldr	r3, [pc, #88]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ac:	2202      	movs	r2, #2
 800d9ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d9b0:	4b14      	ldr	r3, [pc, #80]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d9b6:	4b13      	ldr	r3, [pc, #76]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9bc:	4b11      	ldr	r3, [pc, #68]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9c2:	4b10      	ldr	r3, [pc, #64]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9c8:	4b0e      	ldr	r3, [pc, #56]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9ce:	480d      	ldr	r0, [pc, #52]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9d0:	f7f5 fc38 	bl	8003244 <HAL_PCD_Init>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9da:	f7f3 fd75 	bl	80014c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9de:	2180      	movs	r1, #128	@ 0x80
 800d9e0:	4808      	ldr	r0, [pc, #32]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9e2:	f7f6 fe64 	bl	80046ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9e6:	2240      	movs	r2, #64	@ 0x40
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	4806      	ldr	r0, [pc, #24]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9ec:	f7f6 fe18 	bl	8004620 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9f0:	2280      	movs	r2, #128	@ 0x80
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4803      	ldr	r0, [pc, #12]	@ (800da04 <USBD_LL_Init+0x94>)
 800d9f6:	f7f6 fe13 	bl	8004620 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9fa:	2300      	movs	r3, #0
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	20001ec0 	.word	0x20001ec0

0800da08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da1e:	4618      	mov	r0, r3
 800da20:	f7f5 fd1f 	bl	8003462 <HAL_PCD_Start>
 800da24:	4603      	mov	r3, r0
 800da26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da28:	7bfb      	ldrb	r3, [r7, #15]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 f942 	bl	800dcb4 <USBD_Get_USB_Status>
 800da30:	4603      	mov	r3, r0
 800da32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da34:	7bbb      	ldrb	r3, [r7, #14]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	4608      	mov	r0, r1
 800da48:	4611      	mov	r1, r2
 800da4a:	461a      	mov	r2, r3
 800da4c:	4603      	mov	r3, r0
 800da4e:	70fb      	strb	r3, [r7, #3]
 800da50:	460b      	mov	r3, r1
 800da52:	70bb      	strb	r3, [r7, #2]
 800da54:	4613      	mov	r3, r2
 800da56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da5c:	2300      	movs	r3, #0
 800da5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da66:	78bb      	ldrb	r3, [r7, #2]
 800da68:	883a      	ldrh	r2, [r7, #0]
 800da6a:	78f9      	ldrb	r1, [r7, #3]
 800da6c:	f7f6 f9f3 	bl	8003e56 <HAL_PCD_EP_Open>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	4618      	mov	r0, r3
 800da78:	f000 f91c 	bl	800dcb4 <USBD_Get_USB_Status>
 800da7c:	4603      	mov	r3, r0
 800da7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da80:	7bbb      	ldrb	r3, [r7, #14]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3710      	adds	r7, #16
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}

0800da8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b084      	sub	sp, #16
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
 800da92:	460b      	mov	r3, r1
 800da94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da9a:	2300      	movs	r3, #0
 800da9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daa4:	78fa      	ldrb	r2, [r7, #3]
 800daa6:	4611      	mov	r1, r2
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7f6 fa3e 	bl	8003f2a <HAL_PCD_EP_Close>
 800daae:	4603      	mov	r3, r0
 800dab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 f8fd 	bl	800dcb4 <USBD_Get_USB_Status>
 800daba:	4603      	mov	r3, r0
 800dabc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dabe:	7bbb      	ldrb	r3, [r7, #14]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	460b      	mov	r3, r1
 800dad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dae2:	78fa      	ldrb	r2, [r7, #3]
 800dae4:	4611      	mov	r1, r2
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7f6 faf6 	bl	80040d8 <HAL_PCD_EP_SetStall>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f000 f8de 	bl	800dcb4 <USBD_Get_USB_Status>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
 800db0e:	460b      	mov	r3, r1
 800db10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db20:	78fa      	ldrb	r2, [r7, #3]
 800db22:	4611      	mov	r1, r2
 800db24:	4618      	mov	r0, r3
 800db26:	f7f6 fb3a 	bl	800419e <HAL_PCD_EP_ClrStall>
 800db2a:	4603      	mov	r3, r0
 800db2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	4618      	mov	r0, r3
 800db32:	f000 f8bf 	bl	800dcb4 <USBD_Get_USB_Status>
 800db36:	4603      	mov	r3, r0
 800db38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3710      	adds	r7, #16
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db44:	b480      	push	{r7}
 800db46:	b085      	sub	sp, #20
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	da0b      	bge.n	800db78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db60:	78fb      	ldrb	r3, [r7, #3]
 800db62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	4613      	mov	r3, r2
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	4413      	add	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	440b      	add	r3, r1
 800db72:	3316      	adds	r3, #22
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	e00b      	b.n	800db90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db78:	78fb      	ldrb	r3, [r7, #3]
 800db7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db7e:	68f9      	ldr	r1, [r7, #12]
 800db80:	4613      	mov	r3, r2
 800db82:	00db      	lsls	r3, r3, #3
 800db84:	4413      	add	r3, r2
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	440b      	add	r3, r1
 800db8a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800db8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db90:	4618      	mov	r0, r3
 800db92:	3714      	adds	r7, #20
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b084      	sub	sp, #16
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbb6:	78fa      	ldrb	r2, [r7, #3]
 800dbb8:	4611      	mov	r1, r2
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f6 f927 	bl	8003e0e <HAL_PCD_SetAddress>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 f874 	bl	800dcb4 <USBD_Get_USB_Status>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	60f8      	str	r0, [r7, #12]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbea:	2300      	movs	r3, #0
 800dbec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dbf8:	7af9      	ldrb	r1, [r7, #11]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	f7f6 fa31 	bl	8004064 <HAL_PCD_EP_Transmit>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 f853 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b086      	sub	sp, #24
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	607a      	str	r2, [r7, #4]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	460b      	mov	r3, r1
 800dc2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc3a:	7af9      	ldrb	r1, [r7, #11]
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	f7f6 f9bd 	bl	8003fbe <HAL_PCD_EP_Receive>
 800dc44:	4603      	mov	r3, r0
 800dc46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc48:	7dfb      	ldrb	r3, [r7, #23]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 f832 	bl	800dcb4 <USBD_Get_USB_Status>
 800dc50:	4603      	mov	r3, r0
 800dc52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc54:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3718      	adds	r7, #24
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b082      	sub	sp, #8
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
 800dc66:	460b      	mov	r3, r1
 800dc68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	4611      	mov	r1, r2
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7f6 f9dd 	bl	8004034 <HAL_PCD_EP_GetRxCount>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b083      	sub	sp, #12
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc8c:	4b03      	ldr	r3, [pc, #12]	@ (800dc9c <USBD_static_malloc+0x18>)
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	200023a4 	.word	0x200023a4

0800dca0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca0:	b480      	push	{r7}
 800dca2:	b083      	sub	sp, #12
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]

}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcb4:	b480      	push	{r7}
 800dcb6:	b085      	sub	sp, #20
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dcc2:	79fb      	ldrb	r3, [r7, #7]
 800dcc4:	2b03      	cmp	r3, #3
 800dcc6:	d817      	bhi.n	800dcf8 <USBD_Get_USB_Status+0x44>
 800dcc8:	a201      	add	r2, pc, #4	@ (adr r2, 800dcd0 <USBD_Get_USB_Status+0x1c>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dce1 	.word	0x0800dce1
 800dcd4:	0800dce7 	.word	0x0800dce7
 800dcd8:	0800dced 	.word	0x0800dced
 800dcdc:	0800dcf3 	.word	0x0800dcf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dce0:	2300      	movs	r3, #0
 800dce2:	73fb      	strb	r3, [r7, #15]
    break;
 800dce4:	e00b      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcea:	e008      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcec:	2301      	movs	r3, #1
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	e005      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcf2:	2303      	movs	r3, #3
 800dcf4:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf6:	e002      	b.n	800dcfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	73fb      	strb	r3, [r7, #15]
    break;
 800dcfc:	bf00      	nop
  }
  return usb_status;
 800dcfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <__cvt>:
 800dd0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd10:	ec57 6b10 	vmov	r6, r7, d0
 800dd14:	2f00      	cmp	r7, #0
 800dd16:	460c      	mov	r4, r1
 800dd18:	4619      	mov	r1, r3
 800dd1a:	463b      	mov	r3, r7
 800dd1c:	bfbb      	ittet	lt
 800dd1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dd22:	461f      	movlt	r7, r3
 800dd24:	2300      	movge	r3, #0
 800dd26:	232d      	movlt	r3, #45	@ 0x2d
 800dd28:	700b      	strb	r3, [r1, #0]
 800dd2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dd30:	4691      	mov	r9, r2
 800dd32:	f023 0820 	bic.w	r8, r3, #32
 800dd36:	bfbc      	itt	lt
 800dd38:	4632      	movlt	r2, r6
 800dd3a:	4616      	movlt	r6, r2
 800dd3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dd40:	d005      	beq.n	800dd4e <__cvt+0x42>
 800dd42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dd46:	d100      	bne.n	800dd4a <__cvt+0x3e>
 800dd48:	3401      	adds	r4, #1
 800dd4a:	2102      	movs	r1, #2
 800dd4c:	e000      	b.n	800dd50 <__cvt+0x44>
 800dd4e:	2103      	movs	r1, #3
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9301      	str	r3, [sp, #4]
 800dd54:	ab02      	add	r3, sp, #8
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	ec47 6b10 	vmov	d0, r6, r7
 800dd5c:	4653      	mov	r3, sl
 800dd5e:	4622      	mov	r2, r4
 800dd60:	f001 f982 	bl	800f068 <_dtoa_r>
 800dd64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dd68:	4605      	mov	r5, r0
 800dd6a:	d119      	bne.n	800dda0 <__cvt+0x94>
 800dd6c:	f019 0f01 	tst.w	r9, #1
 800dd70:	d00e      	beq.n	800dd90 <__cvt+0x84>
 800dd72:	eb00 0904 	add.w	r9, r0, r4
 800dd76:	2200      	movs	r2, #0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	f7f2 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd82:	b108      	cbz	r0, 800dd88 <__cvt+0x7c>
 800dd84:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd88:	2230      	movs	r2, #48	@ 0x30
 800dd8a:	9b03      	ldr	r3, [sp, #12]
 800dd8c:	454b      	cmp	r3, r9
 800dd8e:	d31e      	bcc.n	800ddce <__cvt+0xc2>
 800dd90:	9b03      	ldr	r3, [sp, #12]
 800dd92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd94:	1b5b      	subs	r3, r3, r5
 800dd96:	4628      	mov	r0, r5
 800dd98:	6013      	str	r3, [r2, #0]
 800dd9a:	b004      	add	sp, #16
 800dd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dda4:	eb00 0904 	add.w	r9, r0, r4
 800dda8:	d1e5      	bne.n	800dd76 <__cvt+0x6a>
 800ddaa:	7803      	ldrb	r3, [r0, #0]
 800ddac:	2b30      	cmp	r3, #48	@ 0x30
 800ddae:	d10a      	bne.n	800ddc6 <__cvt+0xba>
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	4639      	mov	r1, r7
 800ddb8:	f7f2 fe86 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddbc:	b918      	cbnz	r0, 800ddc6 <__cvt+0xba>
 800ddbe:	f1c4 0401 	rsb	r4, r4, #1
 800ddc2:	f8ca 4000 	str.w	r4, [sl]
 800ddc6:	f8da 3000 	ldr.w	r3, [sl]
 800ddca:	4499      	add	r9, r3
 800ddcc:	e7d3      	b.n	800dd76 <__cvt+0x6a>
 800ddce:	1c59      	adds	r1, r3, #1
 800ddd0:	9103      	str	r1, [sp, #12]
 800ddd2:	701a      	strb	r2, [r3, #0]
 800ddd4:	e7d9      	b.n	800dd8a <__cvt+0x7e>

0800ddd6 <__exponent>:
 800ddd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	bfba      	itte	lt
 800dddc:	4249      	neglt	r1, r1
 800ddde:	232d      	movlt	r3, #45	@ 0x2d
 800dde0:	232b      	movge	r3, #43	@ 0x2b
 800dde2:	2909      	cmp	r1, #9
 800dde4:	7002      	strb	r2, [r0, #0]
 800dde6:	7043      	strb	r3, [r0, #1]
 800dde8:	dd29      	ble.n	800de3e <__exponent+0x68>
 800ddea:	f10d 0307 	add.w	r3, sp, #7
 800ddee:	461d      	mov	r5, r3
 800ddf0:	270a      	movs	r7, #10
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ddf8:	fb07 1416 	mls	r4, r7, r6, r1
 800ddfc:	3430      	adds	r4, #48	@ 0x30
 800ddfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800de02:	460c      	mov	r4, r1
 800de04:	2c63      	cmp	r4, #99	@ 0x63
 800de06:	f103 33ff 	add.w	r3, r3, #4294967295
 800de0a:	4631      	mov	r1, r6
 800de0c:	dcf1      	bgt.n	800ddf2 <__exponent+0x1c>
 800de0e:	3130      	adds	r1, #48	@ 0x30
 800de10:	1e94      	subs	r4, r2, #2
 800de12:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de16:	1c41      	adds	r1, r0, #1
 800de18:	4623      	mov	r3, r4
 800de1a:	42ab      	cmp	r3, r5
 800de1c:	d30a      	bcc.n	800de34 <__exponent+0x5e>
 800de1e:	f10d 0309 	add.w	r3, sp, #9
 800de22:	1a9b      	subs	r3, r3, r2
 800de24:	42ac      	cmp	r4, r5
 800de26:	bf88      	it	hi
 800de28:	2300      	movhi	r3, #0
 800de2a:	3302      	adds	r3, #2
 800de2c:	4403      	add	r3, r0
 800de2e:	1a18      	subs	r0, r3, r0
 800de30:	b003      	add	sp, #12
 800de32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de34:	f813 6b01 	ldrb.w	r6, [r3], #1
 800de38:	f801 6f01 	strb.w	r6, [r1, #1]!
 800de3c:	e7ed      	b.n	800de1a <__exponent+0x44>
 800de3e:	2330      	movs	r3, #48	@ 0x30
 800de40:	3130      	adds	r1, #48	@ 0x30
 800de42:	7083      	strb	r3, [r0, #2]
 800de44:	70c1      	strb	r1, [r0, #3]
 800de46:	1d03      	adds	r3, r0, #4
 800de48:	e7f1      	b.n	800de2e <__exponent+0x58>
	...

0800de4c <_printf_float>:
 800de4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de50:	b08d      	sub	sp, #52	@ 0x34
 800de52:	460c      	mov	r4, r1
 800de54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de58:	4616      	mov	r6, r2
 800de5a:	461f      	mov	r7, r3
 800de5c:	4605      	mov	r5, r0
 800de5e:	f000 ffed 	bl	800ee3c <_localeconv_r>
 800de62:	6803      	ldr	r3, [r0, #0]
 800de64:	9304      	str	r3, [sp, #16]
 800de66:	4618      	mov	r0, r3
 800de68:	f7f2 fa02 	bl	8000270 <strlen>
 800de6c:	2300      	movs	r3, #0
 800de6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de70:	f8d8 3000 	ldr.w	r3, [r8]
 800de74:	9005      	str	r0, [sp, #20]
 800de76:	3307      	adds	r3, #7
 800de78:	f023 0307 	bic.w	r3, r3, #7
 800de7c:	f103 0208 	add.w	r2, r3, #8
 800de80:	f894 a018 	ldrb.w	sl, [r4, #24]
 800de84:	f8d4 b000 	ldr.w	fp, [r4]
 800de88:	f8c8 2000 	str.w	r2, [r8]
 800de8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	f8cd 8018 	str.w	r8, [sp, #24]
 800de9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800de9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dea2:	4b9c      	ldr	r3, [pc, #624]	@ (800e114 <_printf_float+0x2c8>)
 800dea4:	f04f 32ff 	mov.w	r2, #4294967295
 800dea8:	f7f2 fe40 	bl	8000b2c <__aeabi_dcmpun>
 800deac:	bb70      	cbnz	r0, 800df0c <_printf_float+0xc0>
 800deae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800deb2:	4b98      	ldr	r3, [pc, #608]	@ (800e114 <_printf_float+0x2c8>)
 800deb4:	f04f 32ff 	mov.w	r2, #4294967295
 800deb8:	f7f2 fe1a 	bl	8000af0 <__aeabi_dcmple>
 800debc:	bb30      	cbnz	r0, 800df0c <_printf_float+0xc0>
 800debe:	2200      	movs	r2, #0
 800dec0:	2300      	movs	r3, #0
 800dec2:	4640      	mov	r0, r8
 800dec4:	4649      	mov	r1, r9
 800dec6:	f7f2 fe09 	bl	8000adc <__aeabi_dcmplt>
 800deca:	b110      	cbz	r0, 800ded2 <_printf_float+0x86>
 800decc:	232d      	movs	r3, #45	@ 0x2d
 800dece:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ded2:	4a91      	ldr	r2, [pc, #580]	@ (800e118 <_printf_float+0x2cc>)
 800ded4:	4b91      	ldr	r3, [pc, #580]	@ (800e11c <_printf_float+0x2d0>)
 800ded6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800deda:	bf8c      	ite	hi
 800dedc:	4690      	movhi	r8, r2
 800dede:	4698      	movls	r8, r3
 800dee0:	2303      	movs	r3, #3
 800dee2:	6123      	str	r3, [r4, #16]
 800dee4:	f02b 0304 	bic.w	r3, fp, #4
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	f04f 0900 	mov.w	r9, #0
 800deee:	9700      	str	r7, [sp, #0]
 800def0:	4633      	mov	r3, r6
 800def2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800def4:	4621      	mov	r1, r4
 800def6:	4628      	mov	r0, r5
 800def8:	f000 f9d2 	bl	800e2a0 <_printf_common>
 800defc:	3001      	adds	r0, #1
 800defe:	f040 808d 	bne.w	800e01c <_printf_float+0x1d0>
 800df02:	f04f 30ff 	mov.w	r0, #4294967295
 800df06:	b00d      	add	sp, #52	@ 0x34
 800df08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0c:	4642      	mov	r2, r8
 800df0e:	464b      	mov	r3, r9
 800df10:	4640      	mov	r0, r8
 800df12:	4649      	mov	r1, r9
 800df14:	f7f2 fe0a 	bl	8000b2c <__aeabi_dcmpun>
 800df18:	b140      	cbz	r0, 800df2c <_printf_float+0xe0>
 800df1a:	464b      	mov	r3, r9
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bfbc      	itt	lt
 800df20:	232d      	movlt	r3, #45	@ 0x2d
 800df22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800df26:	4a7e      	ldr	r2, [pc, #504]	@ (800e120 <_printf_float+0x2d4>)
 800df28:	4b7e      	ldr	r3, [pc, #504]	@ (800e124 <_printf_float+0x2d8>)
 800df2a:	e7d4      	b.n	800ded6 <_printf_float+0x8a>
 800df2c:	6863      	ldr	r3, [r4, #4]
 800df2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800df32:	9206      	str	r2, [sp, #24]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	d13b      	bne.n	800dfb0 <_printf_float+0x164>
 800df38:	2306      	movs	r3, #6
 800df3a:	6063      	str	r3, [r4, #4]
 800df3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800df40:	2300      	movs	r3, #0
 800df42:	6022      	str	r2, [r4, #0]
 800df44:	9303      	str	r3, [sp, #12]
 800df46:	ab0a      	add	r3, sp, #40	@ 0x28
 800df48:	e9cd a301 	strd	sl, r3, [sp, #4]
 800df4c:	ab09      	add	r3, sp, #36	@ 0x24
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	6861      	ldr	r1, [r4, #4]
 800df52:	ec49 8b10 	vmov	d0, r8, r9
 800df56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800df5a:	4628      	mov	r0, r5
 800df5c:	f7ff fed6 	bl	800dd0c <__cvt>
 800df60:	9b06      	ldr	r3, [sp, #24]
 800df62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df64:	2b47      	cmp	r3, #71	@ 0x47
 800df66:	4680      	mov	r8, r0
 800df68:	d129      	bne.n	800dfbe <_printf_float+0x172>
 800df6a:	1cc8      	adds	r0, r1, #3
 800df6c:	db02      	blt.n	800df74 <_printf_float+0x128>
 800df6e:	6863      	ldr	r3, [r4, #4]
 800df70:	4299      	cmp	r1, r3
 800df72:	dd41      	ble.n	800dff8 <_printf_float+0x1ac>
 800df74:	f1aa 0a02 	sub.w	sl, sl, #2
 800df78:	fa5f fa8a 	uxtb.w	sl, sl
 800df7c:	3901      	subs	r1, #1
 800df7e:	4652      	mov	r2, sl
 800df80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800df84:	9109      	str	r1, [sp, #36]	@ 0x24
 800df86:	f7ff ff26 	bl	800ddd6 <__exponent>
 800df8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df8c:	1813      	adds	r3, r2, r0
 800df8e:	2a01      	cmp	r2, #1
 800df90:	4681      	mov	r9, r0
 800df92:	6123      	str	r3, [r4, #16]
 800df94:	dc02      	bgt.n	800df9c <_printf_float+0x150>
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	07d2      	lsls	r2, r2, #31
 800df9a:	d501      	bpl.n	800dfa0 <_printf_float+0x154>
 800df9c:	3301      	adds	r3, #1
 800df9e:	6123      	str	r3, [r4, #16]
 800dfa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0a2      	beq.n	800deee <_printf_float+0xa2>
 800dfa8:	232d      	movs	r3, #45	@ 0x2d
 800dfaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfae:	e79e      	b.n	800deee <_printf_float+0xa2>
 800dfb0:	9a06      	ldr	r2, [sp, #24]
 800dfb2:	2a47      	cmp	r2, #71	@ 0x47
 800dfb4:	d1c2      	bne.n	800df3c <_printf_float+0xf0>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1c0      	bne.n	800df3c <_printf_float+0xf0>
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e7bd      	b.n	800df3a <_printf_float+0xee>
 800dfbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dfc2:	d9db      	bls.n	800df7c <_printf_float+0x130>
 800dfc4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dfc8:	d118      	bne.n	800dffc <_printf_float+0x1b0>
 800dfca:	2900      	cmp	r1, #0
 800dfcc:	6863      	ldr	r3, [r4, #4]
 800dfce:	dd0b      	ble.n	800dfe8 <_printf_float+0x19c>
 800dfd0:	6121      	str	r1, [r4, #16]
 800dfd2:	b913      	cbnz	r3, 800dfda <_printf_float+0x18e>
 800dfd4:	6822      	ldr	r2, [r4, #0]
 800dfd6:	07d0      	lsls	r0, r2, #31
 800dfd8:	d502      	bpl.n	800dfe0 <_printf_float+0x194>
 800dfda:	3301      	adds	r3, #1
 800dfdc:	440b      	add	r3, r1
 800dfde:	6123      	str	r3, [r4, #16]
 800dfe0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dfe2:	f04f 0900 	mov.w	r9, #0
 800dfe6:	e7db      	b.n	800dfa0 <_printf_float+0x154>
 800dfe8:	b913      	cbnz	r3, 800dff0 <_printf_float+0x1a4>
 800dfea:	6822      	ldr	r2, [r4, #0]
 800dfec:	07d2      	lsls	r2, r2, #31
 800dfee:	d501      	bpl.n	800dff4 <_printf_float+0x1a8>
 800dff0:	3302      	adds	r3, #2
 800dff2:	e7f4      	b.n	800dfde <_printf_float+0x192>
 800dff4:	2301      	movs	r3, #1
 800dff6:	e7f2      	b.n	800dfde <_printf_float+0x192>
 800dff8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dffe:	4299      	cmp	r1, r3
 800e000:	db05      	blt.n	800e00e <_printf_float+0x1c2>
 800e002:	6823      	ldr	r3, [r4, #0]
 800e004:	6121      	str	r1, [r4, #16]
 800e006:	07d8      	lsls	r0, r3, #31
 800e008:	d5ea      	bpl.n	800dfe0 <_printf_float+0x194>
 800e00a:	1c4b      	adds	r3, r1, #1
 800e00c:	e7e7      	b.n	800dfde <_printf_float+0x192>
 800e00e:	2900      	cmp	r1, #0
 800e010:	bfd4      	ite	le
 800e012:	f1c1 0202 	rsble	r2, r1, #2
 800e016:	2201      	movgt	r2, #1
 800e018:	4413      	add	r3, r2
 800e01a:	e7e0      	b.n	800dfde <_printf_float+0x192>
 800e01c:	6823      	ldr	r3, [r4, #0]
 800e01e:	055a      	lsls	r2, r3, #21
 800e020:	d407      	bmi.n	800e032 <_printf_float+0x1e6>
 800e022:	6923      	ldr	r3, [r4, #16]
 800e024:	4642      	mov	r2, r8
 800e026:	4631      	mov	r1, r6
 800e028:	4628      	mov	r0, r5
 800e02a:	47b8      	blx	r7
 800e02c:	3001      	adds	r0, #1
 800e02e:	d12b      	bne.n	800e088 <_printf_float+0x23c>
 800e030:	e767      	b.n	800df02 <_printf_float+0xb6>
 800e032:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e036:	f240 80dd 	bls.w	800e1f4 <_printf_float+0x3a8>
 800e03a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	f7f2 fd41 	bl	8000ac8 <__aeabi_dcmpeq>
 800e046:	2800      	cmp	r0, #0
 800e048:	d033      	beq.n	800e0b2 <_printf_float+0x266>
 800e04a:	4a37      	ldr	r2, [pc, #220]	@ (800e128 <_printf_float+0x2dc>)
 800e04c:	2301      	movs	r3, #1
 800e04e:	4631      	mov	r1, r6
 800e050:	4628      	mov	r0, r5
 800e052:	47b8      	blx	r7
 800e054:	3001      	adds	r0, #1
 800e056:	f43f af54 	beq.w	800df02 <_printf_float+0xb6>
 800e05a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e05e:	4543      	cmp	r3, r8
 800e060:	db02      	blt.n	800e068 <_printf_float+0x21c>
 800e062:	6823      	ldr	r3, [r4, #0]
 800e064:	07d8      	lsls	r0, r3, #31
 800e066:	d50f      	bpl.n	800e088 <_printf_float+0x23c>
 800e068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e06c:	4631      	mov	r1, r6
 800e06e:	4628      	mov	r0, r5
 800e070:	47b8      	blx	r7
 800e072:	3001      	adds	r0, #1
 800e074:	f43f af45 	beq.w	800df02 <_printf_float+0xb6>
 800e078:	f04f 0900 	mov.w	r9, #0
 800e07c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e080:	f104 0a1a 	add.w	sl, r4, #26
 800e084:	45c8      	cmp	r8, r9
 800e086:	dc09      	bgt.n	800e09c <_printf_float+0x250>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	079b      	lsls	r3, r3, #30
 800e08c:	f100 8103 	bmi.w	800e296 <_printf_float+0x44a>
 800e090:	68e0      	ldr	r0, [r4, #12]
 800e092:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e094:	4298      	cmp	r0, r3
 800e096:	bfb8      	it	lt
 800e098:	4618      	movlt	r0, r3
 800e09a:	e734      	b.n	800df06 <_printf_float+0xba>
 800e09c:	2301      	movs	r3, #1
 800e09e:	4652      	mov	r2, sl
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	47b8      	blx	r7
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	f43f af2b 	beq.w	800df02 <_printf_float+0xb6>
 800e0ac:	f109 0901 	add.w	r9, r9, #1
 800e0b0:	e7e8      	b.n	800e084 <_printf_float+0x238>
 800e0b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dc39      	bgt.n	800e12c <_printf_float+0x2e0>
 800e0b8:	4a1b      	ldr	r2, [pc, #108]	@ (800e128 <_printf_float+0x2dc>)
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f43f af1d 	beq.w	800df02 <_printf_float+0xb6>
 800e0c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e0cc:	ea59 0303 	orrs.w	r3, r9, r3
 800e0d0:	d102      	bne.n	800e0d8 <_printf_float+0x28c>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	07d9      	lsls	r1, r3, #31
 800e0d6:	d5d7      	bpl.n	800e088 <_printf_float+0x23c>
 800e0d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0dc:	4631      	mov	r1, r6
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b8      	blx	r7
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f43f af0d 	beq.w	800df02 <_printf_float+0xb6>
 800e0e8:	f04f 0a00 	mov.w	sl, #0
 800e0ec:	f104 0b1a 	add.w	fp, r4, #26
 800e0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f2:	425b      	negs	r3, r3
 800e0f4:	4553      	cmp	r3, sl
 800e0f6:	dc01      	bgt.n	800e0fc <_printf_float+0x2b0>
 800e0f8:	464b      	mov	r3, r9
 800e0fa:	e793      	b.n	800e024 <_printf_float+0x1d8>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	465a      	mov	r2, fp
 800e100:	4631      	mov	r1, r6
 800e102:	4628      	mov	r0, r5
 800e104:	47b8      	blx	r7
 800e106:	3001      	adds	r0, #1
 800e108:	f43f aefb 	beq.w	800df02 <_printf_float+0xb6>
 800e10c:	f10a 0a01 	add.w	sl, sl, #1
 800e110:	e7ee      	b.n	800e0f0 <_printf_float+0x2a4>
 800e112:	bf00      	nop
 800e114:	7fefffff 	.word	0x7fefffff
 800e118:	08012968 	.word	0x08012968
 800e11c:	08012964 	.word	0x08012964
 800e120:	08012970 	.word	0x08012970
 800e124:	0801296c 	.word	0x0801296c
 800e128:	08012974 	.word	0x08012974
 800e12c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e12e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e132:	4553      	cmp	r3, sl
 800e134:	bfa8      	it	ge
 800e136:	4653      	movge	r3, sl
 800e138:	2b00      	cmp	r3, #0
 800e13a:	4699      	mov	r9, r3
 800e13c:	dc36      	bgt.n	800e1ac <_printf_float+0x360>
 800e13e:	f04f 0b00 	mov.w	fp, #0
 800e142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e146:	f104 021a 	add.w	r2, r4, #26
 800e14a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e14c:	9306      	str	r3, [sp, #24]
 800e14e:	eba3 0309 	sub.w	r3, r3, r9
 800e152:	455b      	cmp	r3, fp
 800e154:	dc31      	bgt.n	800e1ba <_printf_float+0x36e>
 800e156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e158:	459a      	cmp	sl, r3
 800e15a:	dc3a      	bgt.n	800e1d2 <_printf_float+0x386>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d437      	bmi.n	800e1d2 <_printf_float+0x386>
 800e162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e164:	ebaa 0903 	sub.w	r9, sl, r3
 800e168:	9b06      	ldr	r3, [sp, #24]
 800e16a:	ebaa 0303 	sub.w	r3, sl, r3
 800e16e:	4599      	cmp	r9, r3
 800e170:	bfa8      	it	ge
 800e172:	4699      	movge	r9, r3
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	dc33      	bgt.n	800e1e2 <_printf_float+0x396>
 800e17a:	f04f 0800 	mov.w	r8, #0
 800e17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e182:	f104 0b1a 	add.w	fp, r4, #26
 800e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e188:	ebaa 0303 	sub.w	r3, sl, r3
 800e18c:	eba3 0309 	sub.w	r3, r3, r9
 800e190:	4543      	cmp	r3, r8
 800e192:	f77f af79 	ble.w	800e088 <_printf_float+0x23c>
 800e196:	2301      	movs	r3, #1
 800e198:	465a      	mov	r2, fp
 800e19a:	4631      	mov	r1, r6
 800e19c:	4628      	mov	r0, r5
 800e19e:	47b8      	blx	r7
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f43f aeae 	beq.w	800df02 <_printf_float+0xb6>
 800e1a6:	f108 0801 	add.w	r8, r8, #1
 800e1aa:	e7ec      	b.n	800e186 <_printf_float+0x33a>
 800e1ac:	4642      	mov	r2, r8
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4628      	mov	r0, r5
 800e1b2:	47b8      	blx	r7
 800e1b4:	3001      	adds	r0, #1
 800e1b6:	d1c2      	bne.n	800e13e <_printf_float+0x2f2>
 800e1b8:	e6a3      	b.n	800df02 <_printf_float+0xb6>
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	4631      	mov	r1, r6
 800e1be:	4628      	mov	r0, r5
 800e1c0:	9206      	str	r2, [sp, #24]
 800e1c2:	47b8      	blx	r7
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	f43f ae9c 	beq.w	800df02 <_printf_float+0xb6>
 800e1ca:	9a06      	ldr	r2, [sp, #24]
 800e1cc:	f10b 0b01 	add.w	fp, fp, #1
 800e1d0:	e7bb      	b.n	800e14a <_printf_float+0x2fe>
 800e1d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1d6:	4631      	mov	r1, r6
 800e1d8:	4628      	mov	r0, r5
 800e1da:	47b8      	blx	r7
 800e1dc:	3001      	adds	r0, #1
 800e1de:	d1c0      	bne.n	800e162 <_printf_float+0x316>
 800e1e0:	e68f      	b.n	800df02 <_printf_float+0xb6>
 800e1e2:	9a06      	ldr	r2, [sp, #24]
 800e1e4:	464b      	mov	r3, r9
 800e1e6:	4442      	add	r2, r8
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	4628      	mov	r0, r5
 800e1ec:	47b8      	blx	r7
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	d1c3      	bne.n	800e17a <_printf_float+0x32e>
 800e1f2:	e686      	b.n	800df02 <_printf_float+0xb6>
 800e1f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e1f8:	f1ba 0f01 	cmp.w	sl, #1
 800e1fc:	dc01      	bgt.n	800e202 <_printf_float+0x3b6>
 800e1fe:	07db      	lsls	r3, r3, #31
 800e200:	d536      	bpl.n	800e270 <_printf_float+0x424>
 800e202:	2301      	movs	r3, #1
 800e204:	4642      	mov	r2, r8
 800e206:	4631      	mov	r1, r6
 800e208:	4628      	mov	r0, r5
 800e20a:	47b8      	blx	r7
 800e20c:	3001      	adds	r0, #1
 800e20e:	f43f ae78 	beq.w	800df02 <_printf_float+0xb6>
 800e212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e216:	4631      	mov	r1, r6
 800e218:	4628      	mov	r0, r5
 800e21a:	47b8      	blx	r7
 800e21c:	3001      	adds	r0, #1
 800e21e:	f43f ae70 	beq.w	800df02 <_printf_float+0xb6>
 800e222:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e226:	2200      	movs	r2, #0
 800e228:	2300      	movs	r3, #0
 800e22a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e22e:	f7f2 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e232:	b9c0      	cbnz	r0, 800e266 <_printf_float+0x41a>
 800e234:	4653      	mov	r3, sl
 800e236:	f108 0201 	add.w	r2, r8, #1
 800e23a:	4631      	mov	r1, r6
 800e23c:	4628      	mov	r0, r5
 800e23e:	47b8      	blx	r7
 800e240:	3001      	adds	r0, #1
 800e242:	d10c      	bne.n	800e25e <_printf_float+0x412>
 800e244:	e65d      	b.n	800df02 <_printf_float+0xb6>
 800e246:	2301      	movs	r3, #1
 800e248:	465a      	mov	r2, fp
 800e24a:	4631      	mov	r1, r6
 800e24c:	4628      	mov	r0, r5
 800e24e:	47b8      	blx	r7
 800e250:	3001      	adds	r0, #1
 800e252:	f43f ae56 	beq.w	800df02 <_printf_float+0xb6>
 800e256:	f108 0801 	add.w	r8, r8, #1
 800e25a:	45d0      	cmp	r8, sl
 800e25c:	dbf3      	blt.n	800e246 <_printf_float+0x3fa>
 800e25e:	464b      	mov	r3, r9
 800e260:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e264:	e6df      	b.n	800e026 <_printf_float+0x1da>
 800e266:	f04f 0800 	mov.w	r8, #0
 800e26a:	f104 0b1a 	add.w	fp, r4, #26
 800e26e:	e7f4      	b.n	800e25a <_printf_float+0x40e>
 800e270:	2301      	movs	r3, #1
 800e272:	4642      	mov	r2, r8
 800e274:	e7e1      	b.n	800e23a <_printf_float+0x3ee>
 800e276:	2301      	movs	r3, #1
 800e278:	464a      	mov	r2, r9
 800e27a:	4631      	mov	r1, r6
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b8      	blx	r7
 800e280:	3001      	adds	r0, #1
 800e282:	f43f ae3e 	beq.w	800df02 <_printf_float+0xb6>
 800e286:	f108 0801 	add.w	r8, r8, #1
 800e28a:	68e3      	ldr	r3, [r4, #12]
 800e28c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e28e:	1a5b      	subs	r3, r3, r1
 800e290:	4543      	cmp	r3, r8
 800e292:	dcf0      	bgt.n	800e276 <_printf_float+0x42a>
 800e294:	e6fc      	b.n	800e090 <_printf_float+0x244>
 800e296:	f04f 0800 	mov.w	r8, #0
 800e29a:	f104 0919 	add.w	r9, r4, #25
 800e29e:	e7f4      	b.n	800e28a <_printf_float+0x43e>

0800e2a0 <_printf_common>:
 800e2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a4:	4616      	mov	r6, r2
 800e2a6:	4698      	mov	r8, r3
 800e2a8:	688a      	ldr	r2, [r1, #8]
 800e2aa:	690b      	ldr	r3, [r1, #16]
 800e2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2b0:	4293      	cmp	r3, r2
 800e2b2:	bfb8      	it	lt
 800e2b4:	4613      	movlt	r3, r2
 800e2b6:	6033      	str	r3, [r6, #0]
 800e2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2bc:	4607      	mov	r7, r0
 800e2be:	460c      	mov	r4, r1
 800e2c0:	b10a      	cbz	r2, 800e2c6 <_printf_common+0x26>
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	6033      	str	r3, [r6, #0]
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	0699      	lsls	r1, r3, #26
 800e2ca:	bf42      	ittt	mi
 800e2cc:	6833      	ldrmi	r3, [r6, #0]
 800e2ce:	3302      	addmi	r3, #2
 800e2d0:	6033      	strmi	r3, [r6, #0]
 800e2d2:	6825      	ldr	r5, [r4, #0]
 800e2d4:	f015 0506 	ands.w	r5, r5, #6
 800e2d8:	d106      	bne.n	800e2e8 <_printf_common+0x48>
 800e2da:	f104 0a19 	add.w	sl, r4, #25
 800e2de:	68e3      	ldr	r3, [r4, #12]
 800e2e0:	6832      	ldr	r2, [r6, #0]
 800e2e2:	1a9b      	subs	r3, r3, r2
 800e2e4:	42ab      	cmp	r3, r5
 800e2e6:	dc26      	bgt.n	800e336 <_printf_common+0x96>
 800e2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2ec:	6822      	ldr	r2, [r4, #0]
 800e2ee:	3b00      	subs	r3, #0
 800e2f0:	bf18      	it	ne
 800e2f2:	2301      	movne	r3, #1
 800e2f4:	0692      	lsls	r2, r2, #26
 800e2f6:	d42b      	bmi.n	800e350 <_printf_common+0xb0>
 800e2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2fc:	4641      	mov	r1, r8
 800e2fe:	4638      	mov	r0, r7
 800e300:	47c8      	blx	r9
 800e302:	3001      	adds	r0, #1
 800e304:	d01e      	beq.n	800e344 <_printf_common+0xa4>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	6922      	ldr	r2, [r4, #16]
 800e30a:	f003 0306 	and.w	r3, r3, #6
 800e30e:	2b04      	cmp	r3, #4
 800e310:	bf02      	ittt	eq
 800e312:	68e5      	ldreq	r5, [r4, #12]
 800e314:	6833      	ldreq	r3, [r6, #0]
 800e316:	1aed      	subeq	r5, r5, r3
 800e318:	68a3      	ldr	r3, [r4, #8]
 800e31a:	bf0c      	ite	eq
 800e31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e320:	2500      	movne	r5, #0
 800e322:	4293      	cmp	r3, r2
 800e324:	bfc4      	itt	gt
 800e326:	1a9b      	subgt	r3, r3, r2
 800e328:	18ed      	addgt	r5, r5, r3
 800e32a:	2600      	movs	r6, #0
 800e32c:	341a      	adds	r4, #26
 800e32e:	42b5      	cmp	r5, r6
 800e330:	d11a      	bne.n	800e368 <_printf_common+0xc8>
 800e332:	2000      	movs	r0, #0
 800e334:	e008      	b.n	800e348 <_printf_common+0xa8>
 800e336:	2301      	movs	r3, #1
 800e338:	4652      	mov	r2, sl
 800e33a:	4641      	mov	r1, r8
 800e33c:	4638      	mov	r0, r7
 800e33e:	47c8      	blx	r9
 800e340:	3001      	adds	r0, #1
 800e342:	d103      	bne.n	800e34c <_printf_common+0xac>
 800e344:	f04f 30ff 	mov.w	r0, #4294967295
 800e348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e34c:	3501      	adds	r5, #1
 800e34e:	e7c6      	b.n	800e2de <_printf_common+0x3e>
 800e350:	18e1      	adds	r1, r4, r3
 800e352:	1c5a      	adds	r2, r3, #1
 800e354:	2030      	movs	r0, #48	@ 0x30
 800e356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e35a:	4422      	add	r2, r4
 800e35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e364:	3302      	adds	r3, #2
 800e366:	e7c7      	b.n	800e2f8 <_printf_common+0x58>
 800e368:	2301      	movs	r3, #1
 800e36a:	4622      	mov	r2, r4
 800e36c:	4641      	mov	r1, r8
 800e36e:	4638      	mov	r0, r7
 800e370:	47c8      	blx	r9
 800e372:	3001      	adds	r0, #1
 800e374:	d0e6      	beq.n	800e344 <_printf_common+0xa4>
 800e376:	3601      	adds	r6, #1
 800e378:	e7d9      	b.n	800e32e <_printf_common+0x8e>
	...

0800e37c <_printf_i>:
 800e37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e380:	7e0f      	ldrb	r7, [r1, #24]
 800e382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e384:	2f78      	cmp	r7, #120	@ 0x78
 800e386:	4691      	mov	r9, r2
 800e388:	4680      	mov	r8, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	469a      	mov	sl, r3
 800e38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e392:	d807      	bhi.n	800e3a4 <_printf_i+0x28>
 800e394:	2f62      	cmp	r7, #98	@ 0x62
 800e396:	d80a      	bhi.n	800e3ae <_printf_i+0x32>
 800e398:	2f00      	cmp	r7, #0
 800e39a:	f000 80d1 	beq.w	800e540 <_printf_i+0x1c4>
 800e39e:	2f58      	cmp	r7, #88	@ 0x58
 800e3a0:	f000 80b8 	beq.w	800e514 <_printf_i+0x198>
 800e3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3ac:	e03a      	b.n	800e424 <_printf_i+0xa8>
 800e3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3b2:	2b15      	cmp	r3, #21
 800e3b4:	d8f6      	bhi.n	800e3a4 <_printf_i+0x28>
 800e3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800e3bc <_printf_i+0x40>)
 800e3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3bc:	0800e415 	.word	0x0800e415
 800e3c0:	0800e429 	.word	0x0800e429
 800e3c4:	0800e3a5 	.word	0x0800e3a5
 800e3c8:	0800e3a5 	.word	0x0800e3a5
 800e3cc:	0800e3a5 	.word	0x0800e3a5
 800e3d0:	0800e3a5 	.word	0x0800e3a5
 800e3d4:	0800e429 	.word	0x0800e429
 800e3d8:	0800e3a5 	.word	0x0800e3a5
 800e3dc:	0800e3a5 	.word	0x0800e3a5
 800e3e0:	0800e3a5 	.word	0x0800e3a5
 800e3e4:	0800e3a5 	.word	0x0800e3a5
 800e3e8:	0800e527 	.word	0x0800e527
 800e3ec:	0800e453 	.word	0x0800e453
 800e3f0:	0800e4e1 	.word	0x0800e4e1
 800e3f4:	0800e3a5 	.word	0x0800e3a5
 800e3f8:	0800e3a5 	.word	0x0800e3a5
 800e3fc:	0800e549 	.word	0x0800e549
 800e400:	0800e3a5 	.word	0x0800e3a5
 800e404:	0800e453 	.word	0x0800e453
 800e408:	0800e3a5 	.word	0x0800e3a5
 800e40c:	0800e3a5 	.word	0x0800e3a5
 800e410:	0800e4e9 	.word	0x0800e4e9
 800e414:	6833      	ldr	r3, [r6, #0]
 800e416:	1d1a      	adds	r2, r3, #4
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	6032      	str	r2, [r6, #0]
 800e41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e424:	2301      	movs	r3, #1
 800e426:	e09c      	b.n	800e562 <_printf_i+0x1e6>
 800e428:	6833      	ldr	r3, [r6, #0]
 800e42a:	6820      	ldr	r0, [r4, #0]
 800e42c:	1d19      	adds	r1, r3, #4
 800e42e:	6031      	str	r1, [r6, #0]
 800e430:	0606      	lsls	r6, r0, #24
 800e432:	d501      	bpl.n	800e438 <_printf_i+0xbc>
 800e434:	681d      	ldr	r5, [r3, #0]
 800e436:	e003      	b.n	800e440 <_printf_i+0xc4>
 800e438:	0645      	lsls	r5, r0, #25
 800e43a:	d5fb      	bpl.n	800e434 <_printf_i+0xb8>
 800e43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e440:	2d00      	cmp	r5, #0
 800e442:	da03      	bge.n	800e44c <_printf_i+0xd0>
 800e444:	232d      	movs	r3, #45	@ 0x2d
 800e446:	426d      	negs	r5, r5
 800e448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e44c:	4858      	ldr	r0, [pc, #352]	@ (800e5b0 <_printf_i+0x234>)
 800e44e:	230a      	movs	r3, #10
 800e450:	e011      	b.n	800e476 <_printf_i+0xfa>
 800e452:	6821      	ldr	r1, [r4, #0]
 800e454:	6833      	ldr	r3, [r6, #0]
 800e456:	0608      	lsls	r0, r1, #24
 800e458:	f853 5b04 	ldr.w	r5, [r3], #4
 800e45c:	d402      	bmi.n	800e464 <_printf_i+0xe8>
 800e45e:	0649      	lsls	r1, r1, #25
 800e460:	bf48      	it	mi
 800e462:	b2ad      	uxthmi	r5, r5
 800e464:	2f6f      	cmp	r7, #111	@ 0x6f
 800e466:	4852      	ldr	r0, [pc, #328]	@ (800e5b0 <_printf_i+0x234>)
 800e468:	6033      	str	r3, [r6, #0]
 800e46a:	bf14      	ite	ne
 800e46c:	230a      	movne	r3, #10
 800e46e:	2308      	moveq	r3, #8
 800e470:	2100      	movs	r1, #0
 800e472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e476:	6866      	ldr	r6, [r4, #4]
 800e478:	60a6      	str	r6, [r4, #8]
 800e47a:	2e00      	cmp	r6, #0
 800e47c:	db05      	blt.n	800e48a <_printf_i+0x10e>
 800e47e:	6821      	ldr	r1, [r4, #0]
 800e480:	432e      	orrs	r6, r5
 800e482:	f021 0104 	bic.w	r1, r1, #4
 800e486:	6021      	str	r1, [r4, #0]
 800e488:	d04b      	beq.n	800e522 <_printf_i+0x1a6>
 800e48a:	4616      	mov	r6, r2
 800e48c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e490:	fb03 5711 	mls	r7, r3, r1, r5
 800e494:	5dc7      	ldrb	r7, [r0, r7]
 800e496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e49a:	462f      	mov	r7, r5
 800e49c:	42bb      	cmp	r3, r7
 800e49e:	460d      	mov	r5, r1
 800e4a0:	d9f4      	bls.n	800e48c <_printf_i+0x110>
 800e4a2:	2b08      	cmp	r3, #8
 800e4a4:	d10b      	bne.n	800e4be <_printf_i+0x142>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	07df      	lsls	r7, r3, #31
 800e4aa:	d508      	bpl.n	800e4be <_printf_i+0x142>
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	6861      	ldr	r1, [r4, #4]
 800e4b0:	4299      	cmp	r1, r3
 800e4b2:	bfde      	ittt	le
 800e4b4:	2330      	movle	r3, #48	@ 0x30
 800e4b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4be:	1b92      	subs	r2, r2, r6
 800e4c0:	6122      	str	r2, [r4, #16]
 800e4c2:	f8cd a000 	str.w	sl, [sp]
 800e4c6:	464b      	mov	r3, r9
 800e4c8:	aa03      	add	r2, sp, #12
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	f7ff fee7 	bl	800e2a0 <_printf_common>
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	d14a      	bne.n	800e56c <_printf_i+0x1f0>
 800e4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4da:	b004      	add	sp, #16
 800e4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e0:	6823      	ldr	r3, [r4, #0]
 800e4e2:	f043 0320 	orr.w	r3, r3, #32
 800e4e6:	6023      	str	r3, [r4, #0]
 800e4e8:	4832      	ldr	r0, [pc, #200]	@ (800e5b4 <_printf_i+0x238>)
 800e4ea:	2778      	movs	r7, #120	@ 0x78
 800e4ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	6831      	ldr	r1, [r6, #0]
 800e4f4:	061f      	lsls	r7, r3, #24
 800e4f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4fa:	d402      	bmi.n	800e502 <_printf_i+0x186>
 800e4fc:	065f      	lsls	r7, r3, #25
 800e4fe:	bf48      	it	mi
 800e500:	b2ad      	uxthmi	r5, r5
 800e502:	6031      	str	r1, [r6, #0]
 800e504:	07d9      	lsls	r1, r3, #31
 800e506:	bf44      	itt	mi
 800e508:	f043 0320 	orrmi.w	r3, r3, #32
 800e50c:	6023      	strmi	r3, [r4, #0]
 800e50e:	b11d      	cbz	r5, 800e518 <_printf_i+0x19c>
 800e510:	2310      	movs	r3, #16
 800e512:	e7ad      	b.n	800e470 <_printf_i+0xf4>
 800e514:	4826      	ldr	r0, [pc, #152]	@ (800e5b0 <_printf_i+0x234>)
 800e516:	e7e9      	b.n	800e4ec <_printf_i+0x170>
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	f023 0320 	bic.w	r3, r3, #32
 800e51e:	6023      	str	r3, [r4, #0]
 800e520:	e7f6      	b.n	800e510 <_printf_i+0x194>
 800e522:	4616      	mov	r6, r2
 800e524:	e7bd      	b.n	800e4a2 <_printf_i+0x126>
 800e526:	6833      	ldr	r3, [r6, #0]
 800e528:	6825      	ldr	r5, [r4, #0]
 800e52a:	6961      	ldr	r1, [r4, #20]
 800e52c:	1d18      	adds	r0, r3, #4
 800e52e:	6030      	str	r0, [r6, #0]
 800e530:	062e      	lsls	r6, r5, #24
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	d501      	bpl.n	800e53a <_printf_i+0x1be>
 800e536:	6019      	str	r1, [r3, #0]
 800e538:	e002      	b.n	800e540 <_printf_i+0x1c4>
 800e53a:	0668      	lsls	r0, r5, #25
 800e53c:	d5fb      	bpl.n	800e536 <_printf_i+0x1ba>
 800e53e:	8019      	strh	r1, [r3, #0]
 800e540:	2300      	movs	r3, #0
 800e542:	6123      	str	r3, [r4, #16]
 800e544:	4616      	mov	r6, r2
 800e546:	e7bc      	b.n	800e4c2 <_printf_i+0x146>
 800e548:	6833      	ldr	r3, [r6, #0]
 800e54a:	1d1a      	adds	r2, r3, #4
 800e54c:	6032      	str	r2, [r6, #0]
 800e54e:	681e      	ldr	r6, [r3, #0]
 800e550:	6862      	ldr	r2, [r4, #4]
 800e552:	2100      	movs	r1, #0
 800e554:	4630      	mov	r0, r6
 800e556:	f7f1 fe3b 	bl	80001d0 <memchr>
 800e55a:	b108      	cbz	r0, 800e560 <_printf_i+0x1e4>
 800e55c:	1b80      	subs	r0, r0, r6
 800e55e:	6060      	str	r0, [r4, #4]
 800e560:	6863      	ldr	r3, [r4, #4]
 800e562:	6123      	str	r3, [r4, #16]
 800e564:	2300      	movs	r3, #0
 800e566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e56a:	e7aa      	b.n	800e4c2 <_printf_i+0x146>
 800e56c:	6923      	ldr	r3, [r4, #16]
 800e56e:	4632      	mov	r2, r6
 800e570:	4649      	mov	r1, r9
 800e572:	4640      	mov	r0, r8
 800e574:	47d0      	blx	sl
 800e576:	3001      	adds	r0, #1
 800e578:	d0ad      	beq.n	800e4d6 <_printf_i+0x15a>
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	079b      	lsls	r3, r3, #30
 800e57e:	d413      	bmi.n	800e5a8 <_printf_i+0x22c>
 800e580:	68e0      	ldr	r0, [r4, #12]
 800e582:	9b03      	ldr	r3, [sp, #12]
 800e584:	4298      	cmp	r0, r3
 800e586:	bfb8      	it	lt
 800e588:	4618      	movlt	r0, r3
 800e58a:	e7a6      	b.n	800e4da <_printf_i+0x15e>
 800e58c:	2301      	movs	r3, #1
 800e58e:	4632      	mov	r2, r6
 800e590:	4649      	mov	r1, r9
 800e592:	4640      	mov	r0, r8
 800e594:	47d0      	blx	sl
 800e596:	3001      	adds	r0, #1
 800e598:	d09d      	beq.n	800e4d6 <_printf_i+0x15a>
 800e59a:	3501      	adds	r5, #1
 800e59c:	68e3      	ldr	r3, [r4, #12]
 800e59e:	9903      	ldr	r1, [sp, #12]
 800e5a0:	1a5b      	subs	r3, r3, r1
 800e5a2:	42ab      	cmp	r3, r5
 800e5a4:	dcf2      	bgt.n	800e58c <_printf_i+0x210>
 800e5a6:	e7eb      	b.n	800e580 <_printf_i+0x204>
 800e5a8:	2500      	movs	r5, #0
 800e5aa:	f104 0619 	add.w	r6, r4, #25
 800e5ae:	e7f5      	b.n	800e59c <_printf_i+0x220>
 800e5b0:	08012976 	.word	0x08012976
 800e5b4:	08012987 	.word	0x08012987

0800e5b8 <_scanf_float>:
 800e5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	b087      	sub	sp, #28
 800e5be:	4691      	mov	r9, r2
 800e5c0:	9303      	str	r3, [sp, #12]
 800e5c2:	688b      	ldr	r3, [r1, #8]
 800e5c4:	1e5a      	subs	r2, r3, #1
 800e5c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e5ca:	bf81      	itttt	hi
 800e5cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e5d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800e5d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e5d8:	608b      	strhi	r3, [r1, #8]
 800e5da:	680b      	ldr	r3, [r1, #0]
 800e5dc:	460a      	mov	r2, r1
 800e5de:	f04f 0500 	mov.w	r5, #0
 800e5e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e5e6:	f842 3b1c 	str.w	r3, [r2], #28
 800e5ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e5ee:	4680      	mov	r8, r0
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	bf98      	it	ls
 800e5f4:	f04f 0b00 	movls.w	fp, #0
 800e5f8:	9201      	str	r2, [sp, #4]
 800e5fa:	4616      	mov	r6, r2
 800e5fc:	46aa      	mov	sl, r5
 800e5fe:	462f      	mov	r7, r5
 800e600:	9502      	str	r5, [sp, #8]
 800e602:	68a2      	ldr	r2, [r4, #8]
 800e604:	b15a      	cbz	r2, 800e61e <_scanf_float+0x66>
 800e606:	f8d9 3000 	ldr.w	r3, [r9]
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2b4e      	cmp	r3, #78	@ 0x4e
 800e60e:	d863      	bhi.n	800e6d8 <_scanf_float+0x120>
 800e610:	2b40      	cmp	r3, #64	@ 0x40
 800e612:	d83b      	bhi.n	800e68c <_scanf_float+0xd4>
 800e614:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e618:	b2c8      	uxtb	r0, r1
 800e61a:	280e      	cmp	r0, #14
 800e61c:	d939      	bls.n	800e692 <_scanf_float+0xda>
 800e61e:	b11f      	cbz	r7, 800e628 <_scanf_float+0x70>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e626:	6023      	str	r3, [r4, #0]
 800e628:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e62c:	f1ba 0f01 	cmp.w	sl, #1
 800e630:	f200 8114 	bhi.w	800e85c <_scanf_float+0x2a4>
 800e634:	9b01      	ldr	r3, [sp, #4]
 800e636:	429e      	cmp	r6, r3
 800e638:	f200 8105 	bhi.w	800e846 <_scanf_float+0x28e>
 800e63c:	2001      	movs	r0, #1
 800e63e:	b007      	add	sp, #28
 800e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e644:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e648:	2a0d      	cmp	r2, #13
 800e64a:	d8e8      	bhi.n	800e61e <_scanf_float+0x66>
 800e64c:	a101      	add	r1, pc, #4	@ (adr r1, 800e654 <_scanf_float+0x9c>)
 800e64e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e652:	bf00      	nop
 800e654:	0800e79d 	.word	0x0800e79d
 800e658:	0800e61f 	.word	0x0800e61f
 800e65c:	0800e61f 	.word	0x0800e61f
 800e660:	0800e61f 	.word	0x0800e61f
 800e664:	0800e7f9 	.word	0x0800e7f9
 800e668:	0800e7d3 	.word	0x0800e7d3
 800e66c:	0800e61f 	.word	0x0800e61f
 800e670:	0800e61f 	.word	0x0800e61f
 800e674:	0800e7ab 	.word	0x0800e7ab
 800e678:	0800e61f 	.word	0x0800e61f
 800e67c:	0800e61f 	.word	0x0800e61f
 800e680:	0800e61f 	.word	0x0800e61f
 800e684:	0800e61f 	.word	0x0800e61f
 800e688:	0800e767 	.word	0x0800e767
 800e68c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e690:	e7da      	b.n	800e648 <_scanf_float+0x90>
 800e692:	290e      	cmp	r1, #14
 800e694:	d8c3      	bhi.n	800e61e <_scanf_float+0x66>
 800e696:	a001      	add	r0, pc, #4	@ (adr r0, 800e69c <_scanf_float+0xe4>)
 800e698:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e69c:	0800e757 	.word	0x0800e757
 800e6a0:	0800e61f 	.word	0x0800e61f
 800e6a4:	0800e757 	.word	0x0800e757
 800e6a8:	0800e7e7 	.word	0x0800e7e7
 800e6ac:	0800e61f 	.word	0x0800e61f
 800e6b0:	0800e6f9 	.word	0x0800e6f9
 800e6b4:	0800e73d 	.word	0x0800e73d
 800e6b8:	0800e73d 	.word	0x0800e73d
 800e6bc:	0800e73d 	.word	0x0800e73d
 800e6c0:	0800e73d 	.word	0x0800e73d
 800e6c4:	0800e73d 	.word	0x0800e73d
 800e6c8:	0800e73d 	.word	0x0800e73d
 800e6cc:	0800e73d 	.word	0x0800e73d
 800e6d0:	0800e73d 	.word	0x0800e73d
 800e6d4:	0800e73d 	.word	0x0800e73d
 800e6d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800e6da:	d809      	bhi.n	800e6f0 <_scanf_float+0x138>
 800e6dc:	2b60      	cmp	r3, #96	@ 0x60
 800e6de:	d8b1      	bhi.n	800e644 <_scanf_float+0x8c>
 800e6e0:	2b54      	cmp	r3, #84	@ 0x54
 800e6e2:	d07b      	beq.n	800e7dc <_scanf_float+0x224>
 800e6e4:	2b59      	cmp	r3, #89	@ 0x59
 800e6e6:	d19a      	bne.n	800e61e <_scanf_float+0x66>
 800e6e8:	2d07      	cmp	r5, #7
 800e6ea:	d198      	bne.n	800e61e <_scanf_float+0x66>
 800e6ec:	2508      	movs	r5, #8
 800e6ee:	e02f      	b.n	800e750 <_scanf_float+0x198>
 800e6f0:	2b74      	cmp	r3, #116	@ 0x74
 800e6f2:	d073      	beq.n	800e7dc <_scanf_float+0x224>
 800e6f4:	2b79      	cmp	r3, #121	@ 0x79
 800e6f6:	e7f6      	b.n	800e6e6 <_scanf_float+0x12e>
 800e6f8:	6821      	ldr	r1, [r4, #0]
 800e6fa:	05c8      	lsls	r0, r1, #23
 800e6fc:	d51e      	bpl.n	800e73c <_scanf_float+0x184>
 800e6fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e702:	6021      	str	r1, [r4, #0]
 800e704:	3701      	adds	r7, #1
 800e706:	f1bb 0f00 	cmp.w	fp, #0
 800e70a:	d003      	beq.n	800e714 <_scanf_float+0x15c>
 800e70c:	3201      	adds	r2, #1
 800e70e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e712:	60a2      	str	r2, [r4, #8]
 800e714:	68a3      	ldr	r3, [r4, #8]
 800e716:	3b01      	subs	r3, #1
 800e718:	60a3      	str	r3, [r4, #8]
 800e71a:	6923      	ldr	r3, [r4, #16]
 800e71c:	3301      	adds	r3, #1
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e724:	3b01      	subs	r3, #1
 800e726:	2b00      	cmp	r3, #0
 800e728:	f8c9 3004 	str.w	r3, [r9, #4]
 800e72c:	f340 8082 	ble.w	800e834 <_scanf_float+0x27c>
 800e730:	f8d9 3000 	ldr.w	r3, [r9]
 800e734:	3301      	adds	r3, #1
 800e736:	f8c9 3000 	str.w	r3, [r9]
 800e73a:	e762      	b.n	800e602 <_scanf_float+0x4a>
 800e73c:	eb1a 0105 	adds.w	r1, sl, r5
 800e740:	f47f af6d 	bne.w	800e61e <_scanf_float+0x66>
 800e744:	6822      	ldr	r2, [r4, #0]
 800e746:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e74a:	6022      	str	r2, [r4, #0]
 800e74c:	460d      	mov	r5, r1
 800e74e:	468a      	mov	sl, r1
 800e750:	f806 3b01 	strb.w	r3, [r6], #1
 800e754:	e7de      	b.n	800e714 <_scanf_float+0x15c>
 800e756:	6822      	ldr	r2, [r4, #0]
 800e758:	0610      	lsls	r0, r2, #24
 800e75a:	f57f af60 	bpl.w	800e61e <_scanf_float+0x66>
 800e75e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e762:	6022      	str	r2, [r4, #0]
 800e764:	e7f4      	b.n	800e750 <_scanf_float+0x198>
 800e766:	f1ba 0f00 	cmp.w	sl, #0
 800e76a:	d10c      	bne.n	800e786 <_scanf_float+0x1ce>
 800e76c:	b977      	cbnz	r7, 800e78c <_scanf_float+0x1d4>
 800e76e:	6822      	ldr	r2, [r4, #0]
 800e770:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e774:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e778:	d108      	bne.n	800e78c <_scanf_float+0x1d4>
 800e77a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e77e:	6022      	str	r2, [r4, #0]
 800e780:	f04f 0a01 	mov.w	sl, #1
 800e784:	e7e4      	b.n	800e750 <_scanf_float+0x198>
 800e786:	f1ba 0f02 	cmp.w	sl, #2
 800e78a:	d050      	beq.n	800e82e <_scanf_float+0x276>
 800e78c:	2d01      	cmp	r5, #1
 800e78e:	d002      	beq.n	800e796 <_scanf_float+0x1de>
 800e790:	2d04      	cmp	r5, #4
 800e792:	f47f af44 	bne.w	800e61e <_scanf_float+0x66>
 800e796:	3501      	adds	r5, #1
 800e798:	b2ed      	uxtb	r5, r5
 800e79a:	e7d9      	b.n	800e750 <_scanf_float+0x198>
 800e79c:	f1ba 0f01 	cmp.w	sl, #1
 800e7a0:	f47f af3d 	bne.w	800e61e <_scanf_float+0x66>
 800e7a4:	f04f 0a02 	mov.w	sl, #2
 800e7a8:	e7d2      	b.n	800e750 <_scanf_float+0x198>
 800e7aa:	b975      	cbnz	r5, 800e7ca <_scanf_float+0x212>
 800e7ac:	2f00      	cmp	r7, #0
 800e7ae:	f47f af37 	bne.w	800e620 <_scanf_float+0x68>
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e7b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e7bc:	f040 8103 	bne.w	800e9c6 <_scanf_float+0x40e>
 800e7c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e7c4:	6022      	str	r2, [r4, #0]
 800e7c6:	2501      	movs	r5, #1
 800e7c8:	e7c2      	b.n	800e750 <_scanf_float+0x198>
 800e7ca:	2d03      	cmp	r5, #3
 800e7cc:	d0e3      	beq.n	800e796 <_scanf_float+0x1de>
 800e7ce:	2d05      	cmp	r5, #5
 800e7d0:	e7df      	b.n	800e792 <_scanf_float+0x1da>
 800e7d2:	2d02      	cmp	r5, #2
 800e7d4:	f47f af23 	bne.w	800e61e <_scanf_float+0x66>
 800e7d8:	2503      	movs	r5, #3
 800e7da:	e7b9      	b.n	800e750 <_scanf_float+0x198>
 800e7dc:	2d06      	cmp	r5, #6
 800e7de:	f47f af1e 	bne.w	800e61e <_scanf_float+0x66>
 800e7e2:	2507      	movs	r5, #7
 800e7e4:	e7b4      	b.n	800e750 <_scanf_float+0x198>
 800e7e6:	6822      	ldr	r2, [r4, #0]
 800e7e8:	0591      	lsls	r1, r2, #22
 800e7ea:	f57f af18 	bpl.w	800e61e <_scanf_float+0x66>
 800e7ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e7f2:	6022      	str	r2, [r4, #0]
 800e7f4:	9702      	str	r7, [sp, #8]
 800e7f6:	e7ab      	b.n	800e750 <_scanf_float+0x198>
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e7fe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e802:	d005      	beq.n	800e810 <_scanf_float+0x258>
 800e804:	0550      	lsls	r0, r2, #21
 800e806:	f57f af0a 	bpl.w	800e61e <_scanf_float+0x66>
 800e80a:	2f00      	cmp	r7, #0
 800e80c:	f000 80db 	beq.w	800e9c6 <_scanf_float+0x40e>
 800e810:	0591      	lsls	r1, r2, #22
 800e812:	bf58      	it	pl
 800e814:	9902      	ldrpl	r1, [sp, #8]
 800e816:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e81a:	bf58      	it	pl
 800e81c:	1a79      	subpl	r1, r7, r1
 800e81e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e822:	bf58      	it	pl
 800e824:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e828:	6022      	str	r2, [r4, #0]
 800e82a:	2700      	movs	r7, #0
 800e82c:	e790      	b.n	800e750 <_scanf_float+0x198>
 800e82e:	f04f 0a03 	mov.w	sl, #3
 800e832:	e78d      	b.n	800e750 <_scanf_float+0x198>
 800e834:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e838:	4649      	mov	r1, r9
 800e83a:	4640      	mov	r0, r8
 800e83c:	4798      	blx	r3
 800e83e:	2800      	cmp	r0, #0
 800e840:	f43f aedf 	beq.w	800e602 <_scanf_float+0x4a>
 800e844:	e6eb      	b.n	800e61e <_scanf_float+0x66>
 800e846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e84a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e84e:	464a      	mov	r2, r9
 800e850:	4640      	mov	r0, r8
 800e852:	4798      	blx	r3
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	3b01      	subs	r3, #1
 800e858:	6123      	str	r3, [r4, #16]
 800e85a:	e6eb      	b.n	800e634 <_scanf_float+0x7c>
 800e85c:	1e6b      	subs	r3, r5, #1
 800e85e:	2b06      	cmp	r3, #6
 800e860:	d824      	bhi.n	800e8ac <_scanf_float+0x2f4>
 800e862:	2d02      	cmp	r5, #2
 800e864:	d836      	bhi.n	800e8d4 <_scanf_float+0x31c>
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	429e      	cmp	r6, r3
 800e86a:	f67f aee7 	bls.w	800e63c <_scanf_float+0x84>
 800e86e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e876:	464a      	mov	r2, r9
 800e878:	4640      	mov	r0, r8
 800e87a:	4798      	blx	r3
 800e87c:	6923      	ldr	r3, [r4, #16]
 800e87e:	3b01      	subs	r3, #1
 800e880:	6123      	str	r3, [r4, #16]
 800e882:	e7f0      	b.n	800e866 <_scanf_float+0x2ae>
 800e884:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e888:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e88c:	464a      	mov	r2, r9
 800e88e:	4640      	mov	r0, r8
 800e890:	4798      	blx	r3
 800e892:	6923      	ldr	r3, [r4, #16]
 800e894:	3b01      	subs	r3, #1
 800e896:	6123      	str	r3, [r4, #16]
 800e898:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e89c:	fa5f fa8a 	uxtb.w	sl, sl
 800e8a0:	f1ba 0f02 	cmp.w	sl, #2
 800e8a4:	d1ee      	bne.n	800e884 <_scanf_float+0x2cc>
 800e8a6:	3d03      	subs	r5, #3
 800e8a8:	b2ed      	uxtb	r5, r5
 800e8aa:	1b76      	subs	r6, r6, r5
 800e8ac:	6823      	ldr	r3, [r4, #0]
 800e8ae:	05da      	lsls	r2, r3, #23
 800e8b0:	d530      	bpl.n	800e914 <_scanf_float+0x35c>
 800e8b2:	055b      	lsls	r3, r3, #21
 800e8b4:	d511      	bpl.n	800e8da <_scanf_float+0x322>
 800e8b6:	9b01      	ldr	r3, [sp, #4]
 800e8b8:	429e      	cmp	r6, r3
 800e8ba:	f67f aebf 	bls.w	800e63c <_scanf_float+0x84>
 800e8be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e8c6:	464a      	mov	r2, r9
 800e8c8:	4640      	mov	r0, r8
 800e8ca:	4798      	blx	r3
 800e8cc:	6923      	ldr	r3, [r4, #16]
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	e7f0      	b.n	800e8b6 <_scanf_float+0x2fe>
 800e8d4:	46aa      	mov	sl, r5
 800e8d6:	46b3      	mov	fp, r6
 800e8d8:	e7de      	b.n	800e898 <_scanf_float+0x2e0>
 800e8da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e8de:	6923      	ldr	r3, [r4, #16]
 800e8e0:	2965      	cmp	r1, #101	@ 0x65
 800e8e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e8e6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e8ea:	6123      	str	r3, [r4, #16]
 800e8ec:	d00c      	beq.n	800e908 <_scanf_float+0x350>
 800e8ee:	2945      	cmp	r1, #69	@ 0x45
 800e8f0:	d00a      	beq.n	800e908 <_scanf_float+0x350>
 800e8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e8f6:	464a      	mov	r2, r9
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	4798      	blx	r3
 800e8fc:	6923      	ldr	r3, [r4, #16]
 800e8fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e902:	3b01      	subs	r3, #1
 800e904:	1eb5      	subs	r5, r6, #2
 800e906:	6123      	str	r3, [r4, #16]
 800e908:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e90c:	464a      	mov	r2, r9
 800e90e:	4640      	mov	r0, r8
 800e910:	4798      	blx	r3
 800e912:	462e      	mov	r6, r5
 800e914:	6822      	ldr	r2, [r4, #0]
 800e916:	f012 0210 	ands.w	r2, r2, #16
 800e91a:	d001      	beq.n	800e920 <_scanf_float+0x368>
 800e91c:	2000      	movs	r0, #0
 800e91e:	e68e      	b.n	800e63e <_scanf_float+0x86>
 800e920:	7032      	strb	r2, [r6, #0]
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e92c:	d125      	bne.n	800e97a <_scanf_float+0x3c2>
 800e92e:	9b02      	ldr	r3, [sp, #8]
 800e930:	429f      	cmp	r7, r3
 800e932:	d00a      	beq.n	800e94a <_scanf_float+0x392>
 800e934:	1bda      	subs	r2, r3, r7
 800e936:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e93a:	429e      	cmp	r6, r3
 800e93c:	bf28      	it	cs
 800e93e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e942:	4922      	ldr	r1, [pc, #136]	@ (800e9cc <_scanf_float+0x414>)
 800e944:	4630      	mov	r0, r6
 800e946:	f000 f977 	bl	800ec38 <siprintf>
 800e94a:	9901      	ldr	r1, [sp, #4]
 800e94c:	2200      	movs	r2, #0
 800e94e:	4640      	mov	r0, r8
 800e950:	f002 fd06 	bl	8011360 <_strtod_r>
 800e954:	9b03      	ldr	r3, [sp, #12]
 800e956:	6821      	ldr	r1, [r4, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f011 0f02 	tst.w	r1, #2
 800e95e:	ec57 6b10 	vmov	r6, r7, d0
 800e962:	f103 0204 	add.w	r2, r3, #4
 800e966:	d015      	beq.n	800e994 <_scanf_float+0x3dc>
 800e968:	9903      	ldr	r1, [sp, #12]
 800e96a:	600a      	str	r2, [r1, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	e9c3 6700 	strd	r6, r7, [r3]
 800e972:	68e3      	ldr	r3, [r4, #12]
 800e974:	3301      	adds	r3, #1
 800e976:	60e3      	str	r3, [r4, #12]
 800e978:	e7d0      	b.n	800e91c <_scanf_float+0x364>
 800e97a:	9b04      	ldr	r3, [sp, #16]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d0e4      	beq.n	800e94a <_scanf_float+0x392>
 800e980:	9905      	ldr	r1, [sp, #20]
 800e982:	230a      	movs	r3, #10
 800e984:	3101      	adds	r1, #1
 800e986:	4640      	mov	r0, r8
 800e988:	f002 fd6a 	bl	8011460 <_strtol_r>
 800e98c:	9b04      	ldr	r3, [sp, #16]
 800e98e:	9e05      	ldr	r6, [sp, #20]
 800e990:	1ac2      	subs	r2, r0, r3
 800e992:	e7d0      	b.n	800e936 <_scanf_float+0x37e>
 800e994:	f011 0f04 	tst.w	r1, #4
 800e998:	9903      	ldr	r1, [sp, #12]
 800e99a:	600a      	str	r2, [r1, #0]
 800e99c:	d1e6      	bne.n	800e96c <_scanf_float+0x3b4>
 800e99e:	681d      	ldr	r5, [r3, #0]
 800e9a0:	4632      	mov	r2, r6
 800e9a2:	463b      	mov	r3, r7
 800e9a4:	4630      	mov	r0, r6
 800e9a6:	4639      	mov	r1, r7
 800e9a8:	f7f2 f8c0 	bl	8000b2c <__aeabi_dcmpun>
 800e9ac:	b128      	cbz	r0, 800e9ba <_scanf_float+0x402>
 800e9ae:	4808      	ldr	r0, [pc, #32]	@ (800e9d0 <_scanf_float+0x418>)
 800e9b0:	f000 faca 	bl	800ef48 <nanf>
 800e9b4:	ed85 0a00 	vstr	s0, [r5]
 800e9b8:	e7db      	b.n	800e972 <_scanf_float+0x3ba>
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	4639      	mov	r1, r7
 800e9be:	f7f2 f913 	bl	8000be8 <__aeabi_d2f>
 800e9c2:	6028      	str	r0, [r5, #0]
 800e9c4:	e7d5      	b.n	800e972 <_scanf_float+0x3ba>
 800e9c6:	2700      	movs	r7, #0
 800e9c8:	e62e      	b.n	800e628 <_scanf_float+0x70>
 800e9ca:	bf00      	nop
 800e9cc:	08012998 	.word	0x08012998
 800e9d0:	08012ad9 	.word	0x08012ad9

0800e9d4 <std>:
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	b510      	push	{r4, lr}
 800e9d8:	4604      	mov	r4, r0
 800e9da:	e9c0 3300 	strd	r3, r3, [r0]
 800e9de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9e2:	6083      	str	r3, [r0, #8]
 800e9e4:	8181      	strh	r1, [r0, #12]
 800e9e6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e9e8:	81c2      	strh	r2, [r0, #14]
 800e9ea:	6183      	str	r3, [r0, #24]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	2208      	movs	r2, #8
 800e9f0:	305c      	adds	r0, #92	@ 0x5c
 800e9f2:	f000 fa1b 	bl	800ee2c <memset>
 800e9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ea2c <std+0x58>)
 800e9f8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e9fa:	4b0d      	ldr	r3, [pc, #52]	@ (800ea30 <std+0x5c>)
 800e9fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800ea34 <std+0x60>)
 800ea00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea02:	4b0d      	ldr	r3, [pc, #52]	@ (800ea38 <std+0x64>)
 800ea04:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea06:	4b0d      	ldr	r3, [pc, #52]	@ (800ea3c <std+0x68>)
 800ea08:	6224      	str	r4, [r4, #32]
 800ea0a:	429c      	cmp	r4, r3
 800ea0c:	d006      	beq.n	800ea1c <std+0x48>
 800ea0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea12:	4294      	cmp	r4, r2
 800ea14:	d002      	beq.n	800ea1c <std+0x48>
 800ea16:	33d0      	adds	r3, #208	@ 0xd0
 800ea18:	429c      	cmp	r4, r3
 800ea1a:	d105      	bne.n	800ea28 <std+0x54>
 800ea1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea24:	f000 ba7e 	b.w	800ef24 <__retarget_lock_init_recursive>
 800ea28:	bd10      	pop	{r4, pc}
 800ea2a:	bf00      	nop
 800ea2c:	0800ec7d 	.word	0x0800ec7d
 800ea30:	0800ec9f 	.word	0x0800ec9f
 800ea34:	0800ecd7 	.word	0x0800ecd7
 800ea38:	0800ecfb 	.word	0x0800ecfb
 800ea3c:	200025c4 	.word	0x200025c4

0800ea40 <stdio_exit_handler>:
 800ea40:	4a02      	ldr	r2, [pc, #8]	@ (800ea4c <stdio_exit_handler+0xc>)
 800ea42:	4903      	ldr	r1, [pc, #12]	@ (800ea50 <stdio_exit_handler+0x10>)
 800ea44:	4803      	ldr	r0, [pc, #12]	@ (800ea54 <stdio_exit_handler+0x14>)
 800ea46:	f000 b869 	b.w	800eb1c <_fwalk_sglue>
 800ea4a:	bf00      	nop
 800ea4c:	2000010c 	.word	0x2000010c
 800ea50:	08011aa1 	.word	0x08011aa1
 800ea54:	2000011c 	.word	0x2000011c

0800ea58 <cleanup_stdio>:
 800ea58:	6841      	ldr	r1, [r0, #4]
 800ea5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ea8c <cleanup_stdio+0x34>)
 800ea5c:	4299      	cmp	r1, r3
 800ea5e:	b510      	push	{r4, lr}
 800ea60:	4604      	mov	r4, r0
 800ea62:	d001      	beq.n	800ea68 <cleanup_stdio+0x10>
 800ea64:	f003 f81c 	bl	8011aa0 <_fflush_r>
 800ea68:	68a1      	ldr	r1, [r4, #8]
 800ea6a:	4b09      	ldr	r3, [pc, #36]	@ (800ea90 <cleanup_stdio+0x38>)
 800ea6c:	4299      	cmp	r1, r3
 800ea6e:	d002      	beq.n	800ea76 <cleanup_stdio+0x1e>
 800ea70:	4620      	mov	r0, r4
 800ea72:	f003 f815 	bl	8011aa0 <_fflush_r>
 800ea76:	68e1      	ldr	r1, [r4, #12]
 800ea78:	4b06      	ldr	r3, [pc, #24]	@ (800ea94 <cleanup_stdio+0x3c>)
 800ea7a:	4299      	cmp	r1, r3
 800ea7c:	d004      	beq.n	800ea88 <cleanup_stdio+0x30>
 800ea7e:	4620      	mov	r0, r4
 800ea80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea84:	f003 b80c 	b.w	8011aa0 <_fflush_r>
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	200025c4 	.word	0x200025c4
 800ea90:	2000262c 	.word	0x2000262c
 800ea94:	20002694 	.word	0x20002694

0800ea98 <global_stdio_init.part.0>:
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	4b0b      	ldr	r3, [pc, #44]	@ (800eac8 <global_stdio_init.part.0+0x30>)
 800ea9c:	4c0b      	ldr	r4, [pc, #44]	@ (800eacc <global_stdio_init.part.0+0x34>)
 800ea9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ead0 <global_stdio_init.part.0+0x38>)
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	2104      	movs	r1, #4
 800eaa8:	f7ff ff94 	bl	800e9d4 <std>
 800eaac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eab0:	2201      	movs	r2, #1
 800eab2:	2109      	movs	r1, #9
 800eab4:	f7ff ff8e 	bl	800e9d4 <std>
 800eab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eabc:	2202      	movs	r2, #2
 800eabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eac2:	2112      	movs	r1, #18
 800eac4:	f7ff bf86 	b.w	800e9d4 <std>
 800eac8:	200026fc 	.word	0x200026fc
 800eacc:	200025c4 	.word	0x200025c4
 800ead0:	0800ea41 	.word	0x0800ea41

0800ead4 <__sfp_lock_acquire>:
 800ead4:	4801      	ldr	r0, [pc, #4]	@ (800eadc <__sfp_lock_acquire+0x8>)
 800ead6:	f000 ba26 	b.w	800ef26 <__retarget_lock_acquire_recursive>
 800eada:	bf00      	nop
 800eadc:	20002705 	.word	0x20002705

0800eae0 <__sfp_lock_release>:
 800eae0:	4801      	ldr	r0, [pc, #4]	@ (800eae8 <__sfp_lock_release+0x8>)
 800eae2:	f000 ba21 	b.w	800ef28 <__retarget_lock_release_recursive>
 800eae6:	bf00      	nop
 800eae8:	20002705 	.word	0x20002705

0800eaec <__sinit>:
 800eaec:	b510      	push	{r4, lr}
 800eaee:	4604      	mov	r4, r0
 800eaf0:	f7ff fff0 	bl	800ead4 <__sfp_lock_acquire>
 800eaf4:	6a23      	ldr	r3, [r4, #32]
 800eaf6:	b11b      	cbz	r3, 800eb00 <__sinit+0x14>
 800eaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eafc:	f7ff bff0 	b.w	800eae0 <__sfp_lock_release>
 800eb00:	4b04      	ldr	r3, [pc, #16]	@ (800eb14 <__sinit+0x28>)
 800eb02:	6223      	str	r3, [r4, #32]
 800eb04:	4b04      	ldr	r3, [pc, #16]	@ (800eb18 <__sinit+0x2c>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1f5      	bne.n	800eaf8 <__sinit+0xc>
 800eb0c:	f7ff ffc4 	bl	800ea98 <global_stdio_init.part.0>
 800eb10:	e7f2      	b.n	800eaf8 <__sinit+0xc>
 800eb12:	bf00      	nop
 800eb14:	0800ea59 	.word	0x0800ea59
 800eb18:	200026fc 	.word	0x200026fc

0800eb1c <_fwalk_sglue>:
 800eb1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb20:	4607      	mov	r7, r0
 800eb22:	4688      	mov	r8, r1
 800eb24:	4614      	mov	r4, r2
 800eb26:	2600      	movs	r6, #0
 800eb28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb2c:	f1b9 0901 	subs.w	r9, r9, #1
 800eb30:	d505      	bpl.n	800eb3e <_fwalk_sglue+0x22>
 800eb32:	6824      	ldr	r4, [r4, #0]
 800eb34:	2c00      	cmp	r4, #0
 800eb36:	d1f7      	bne.n	800eb28 <_fwalk_sglue+0xc>
 800eb38:	4630      	mov	r0, r6
 800eb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb3e:	89ab      	ldrh	r3, [r5, #12]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d907      	bls.n	800eb54 <_fwalk_sglue+0x38>
 800eb44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb48:	3301      	adds	r3, #1
 800eb4a:	d003      	beq.n	800eb54 <_fwalk_sglue+0x38>
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	4638      	mov	r0, r7
 800eb50:	47c0      	blx	r8
 800eb52:	4306      	orrs	r6, r0
 800eb54:	3568      	adds	r5, #104	@ 0x68
 800eb56:	e7e9      	b.n	800eb2c <_fwalk_sglue+0x10>

0800eb58 <iprintf>:
 800eb58:	b40f      	push	{r0, r1, r2, r3}
 800eb5a:	b507      	push	{r0, r1, r2, lr}
 800eb5c:	4906      	ldr	r1, [pc, #24]	@ (800eb78 <iprintf+0x20>)
 800eb5e:	ab04      	add	r3, sp, #16
 800eb60:	6808      	ldr	r0, [r1, #0]
 800eb62:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb66:	6881      	ldr	r1, [r0, #8]
 800eb68:	9301      	str	r3, [sp, #4]
 800eb6a:	f002 fdfd 	bl	8011768 <_vfiprintf_r>
 800eb6e:	b003      	add	sp, #12
 800eb70:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb74:	b004      	add	sp, #16
 800eb76:	4770      	bx	lr
 800eb78:	20000118 	.word	0x20000118

0800eb7c <_puts_r>:
 800eb7c:	6a03      	ldr	r3, [r0, #32]
 800eb7e:	b570      	push	{r4, r5, r6, lr}
 800eb80:	6884      	ldr	r4, [r0, #8]
 800eb82:	4605      	mov	r5, r0
 800eb84:	460e      	mov	r6, r1
 800eb86:	b90b      	cbnz	r3, 800eb8c <_puts_r+0x10>
 800eb88:	f7ff ffb0 	bl	800eaec <__sinit>
 800eb8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb8e:	07db      	lsls	r3, r3, #31
 800eb90:	d405      	bmi.n	800eb9e <_puts_r+0x22>
 800eb92:	89a3      	ldrh	r3, [r4, #12]
 800eb94:	0598      	lsls	r0, r3, #22
 800eb96:	d402      	bmi.n	800eb9e <_puts_r+0x22>
 800eb98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb9a:	f000 f9c4 	bl	800ef26 <__retarget_lock_acquire_recursive>
 800eb9e:	89a3      	ldrh	r3, [r4, #12]
 800eba0:	0719      	lsls	r1, r3, #28
 800eba2:	d502      	bpl.n	800ebaa <_puts_r+0x2e>
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d135      	bne.n	800ec16 <_puts_r+0x9a>
 800ebaa:	4621      	mov	r1, r4
 800ebac:	4628      	mov	r0, r5
 800ebae:	f000 f8e7 	bl	800ed80 <__swsetup_r>
 800ebb2:	b380      	cbz	r0, 800ec16 <_puts_r+0x9a>
 800ebb4:	f04f 35ff 	mov.w	r5, #4294967295
 800ebb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ebba:	07da      	lsls	r2, r3, #31
 800ebbc:	d405      	bmi.n	800ebca <_puts_r+0x4e>
 800ebbe:	89a3      	ldrh	r3, [r4, #12]
 800ebc0:	059b      	lsls	r3, r3, #22
 800ebc2:	d402      	bmi.n	800ebca <_puts_r+0x4e>
 800ebc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ebc6:	f000 f9af 	bl	800ef28 <__retarget_lock_release_recursive>
 800ebca:	4628      	mov	r0, r5
 800ebcc:	bd70      	pop	{r4, r5, r6, pc}
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	da04      	bge.n	800ebdc <_puts_r+0x60>
 800ebd2:	69a2      	ldr	r2, [r4, #24]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	dc17      	bgt.n	800ec08 <_puts_r+0x8c>
 800ebd8:	290a      	cmp	r1, #10
 800ebda:	d015      	beq.n	800ec08 <_puts_r+0x8c>
 800ebdc:	6823      	ldr	r3, [r4, #0]
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	6022      	str	r2, [r4, #0]
 800ebe2:	7019      	strb	r1, [r3, #0]
 800ebe4:	68a3      	ldr	r3, [r4, #8]
 800ebe6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ebea:	3b01      	subs	r3, #1
 800ebec:	60a3      	str	r3, [r4, #8]
 800ebee:	2900      	cmp	r1, #0
 800ebf0:	d1ed      	bne.n	800ebce <_puts_r+0x52>
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	da11      	bge.n	800ec1a <_puts_r+0x9e>
 800ebf6:	4622      	mov	r2, r4
 800ebf8:	210a      	movs	r1, #10
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f000 f881 	bl	800ed02 <__swbuf_r>
 800ec00:	3001      	adds	r0, #1
 800ec02:	d0d7      	beq.n	800ebb4 <_puts_r+0x38>
 800ec04:	250a      	movs	r5, #10
 800ec06:	e7d7      	b.n	800ebb8 <_puts_r+0x3c>
 800ec08:	4622      	mov	r2, r4
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	f000 f879 	bl	800ed02 <__swbuf_r>
 800ec10:	3001      	adds	r0, #1
 800ec12:	d1e7      	bne.n	800ebe4 <_puts_r+0x68>
 800ec14:	e7ce      	b.n	800ebb4 <_puts_r+0x38>
 800ec16:	3e01      	subs	r6, #1
 800ec18:	e7e4      	b.n	800ebe4 <_puts_r+0x68>
 800ec1a:	6823      	ldr	r3, [r4, #0]
 800ec1c:	1c5a      	adds	r2, r3, #1
 800ec1e:	6022      	str	r2, [r4, #0]
 800ec20:	220a      	movs	r2, #10
 800ec22:	701a      	strb	r2, [r3, #0]
 800ec24:	e7ee      	b.n	800ec04 <_puts_r+0x88>
	...

0800ec28 <puts>:
 800ec28:	4b02      	ldr	r3, [pc, #8]	@ (800ec34 <puts+0xc>)
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	6818      	ldr	r0, [r3, #0]
 800ec2e:	f7ff bfa5 	b.w	800eb7c <_puts_r>
 800ec32:	bf00      	nop
 800ec34:	20000118 	.word	0x20000118

0800ec38 <siprintf>:
 800ec38:	b40e      	push	{r1, r2, r3}
 800ec3a:	b510      	push	{r4, lr}
 800ec3c:	b09d      	sub	sp, #116	@ 0x74
 800ec3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ec40:	9002      	str	r0, [sp, #8]
 800ec42:	9006      	str	r0, [sp, #24]
 800ec44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ec48:	480a      	ldr	r0, [pc, #40]	@ (800ec74 <siprintf+0x3c>)
 800ec4a:	9107      	str	r1, [sp, #28]
 800ec4c:	9104      	str	r1, [sp, #16]
 800ec4e:	490a      	ldr	r1, [pc, #40]	@ (800ec78 <siprintf+0x40>)
 800ec50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec54:	9105      	str	r1, [sp, #20]
 800ec56:	2400      	movs	r4, #0
 800ec58:	a902      	add	r1, sp, #8
 800ec5a:	6800      	ldr	r0, [r0, #0]
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ec60:	f002 fc5c 	bl	801151c <_svfiprintf_r>
 800ec64:	9b02      	ldr	r3, [sp, #8]
 800ec66:	701c      	strb	r4, [r3, #0]
 800ec68:	b01d      	add	sp, #116	@ 0x74
 800ec6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec6e:	b003      	add	sp, #12
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	20000118 	.word	0x20000118
 800ec78:	ffff0208 	.word	0xffff0208

0800ec7c <__sread>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	460c      	mov	r4, r1
 800ec80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec84:	f000 f900 	bl	800ee88 <_read_r>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	bfab      	itete	ge
 800ec8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ec90:	181b      	addge	r3, r3, r0
 800ec92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec96:	bfac      	ite	ge
 800ec98:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec9a:	81a3      	strhlt	r3, [r4, #12]
 800ec9c:	bd10      	pop	{r4, pc}

0800ec9e <__swrite>:
 800ec9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca2:	461f      	mov	r7, r3
 800eca4:	898b      	ldrh	r3, [r1, #12]
 800eca6:	05db      	lsls	r3, r3, #23
 800eca8:	4605      	mov	r5, r0
 800ecaa:	460c      	mov	r4, r1
 800ecac:	4616      	mov	r6, r2
 800ecae:	d505      	bpl.n	800ecbc <__swrite+0x1e>
 800ecb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	f000 f8d4 	bl	800ee64 <_lseek_r>
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecc6:	81a3      	strh	r3, [r4, #12]
 800ecc8:	4632      	mov	r2, r6
 800ecca:	463b      	mov	r3, r7
 800eccc:	4628      	mov	r0, r5
 800ecce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd2:	f000 b8eb 	b.w	800eeac <_write_r>

0800ecd6 <__sseek>:
 800ecd6:	b510      	push	{r4, lr}
 800ecd8:	460c      	mov	r4, r1
 800ecda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecde:	f000 f8c1 	bl	800ee64 <_lseek_r>
 800ece2:	1c43      	adds	r3, r0, #1
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	bf15      	itete	ne
 800ece8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ecea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ecee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ecf2:	81a3      	strheq	r3, [r4, #12]
 800ecf4:	bf18      	it	ne
 800ecf6:	81a3      	strhne	r3, [r4, #12]
 800ecf8:	bd10      	pop	{r4, pc}

0800ecfa <__sclose>:
 800ecfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecfe:	f000 b8a1 	b.w	800ee44 <_close_r>

0800ed02 <__swbuf_r>:
 800ed02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed04:	460e      	mov	r6, r1
 800ed06:	4614      	mov	r4, r2
 800ed08:	4605      	mov	r5, r0
 800ed0a:	b118      	cbz	r0, 800ed14 <__swbuf_r+0x12>
 800ed0c:	6a03      	ldr	r3, [r0, #32]
 800ed0e:	b90b      	cbnz	r3, 800ed14 <__swbuf_r+0x12>
 800ed10:	f7ff feec 	bl	800eaec <__sinit>
 800ed14:	69a3      	ldr	r3, [r4, #24]
 800ed16:	60a3      	str	r3, [r4, #8]
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	071a      	lsls	r2, r3, #28
 800ed1c:	d501      	bpl.n	800ed22 <__swbuf_r+0x20>
 800ed1e:	6923      	ldr	r3, [r4, #16]
 800ed20:	b943      	cbnz	r3, 800ed34 <__swbuf_r+0x32>
 800ed22:	4621      	mov	r1, r4
 800ed24:	4628      	mov	r0, r5
 800ed26:	f000 f82b 	bl	800ed80 <__swsetup_r>
 800ed2a:	b118      	cbz	r0, 800ed34 <__swbuf_r+0x32>
 800ed2c:	f04f 37ff 	mov.w	r7, #4294967295
 800ed30:	4638      	mov	r0, r7
 800ed32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed34:	6823      	ldr	r3, [r4, #0]
 800ed36:	6922      	ldr	r2, [r4, #16]
 800ed38:	1a98      	subs	r0, r3, r2
 800ed3a:	6963      	ldr	r3, [r4, #20]
 800ed3c:	b2f6      	uxtb	r6, r6
 800ed3e:	4283      	cmp	r3, r0
 800ed40:	4637      	mov	r7, r6
 800ed42:	dc05      	bgt.n	800ed50 <__swbuf_r+0x4e>
 800ed44:	4621      	mov	r1, r4
 800ed46:	4628      	mov	r0, r5
 800ed48:	f002 feaa 	bl	8011aa0 <_fflush_r>
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	d1ed      	bne.n	800ed2c <__swbuf_r+0x2a>
 800ed50:	68a3      	ldr	r3, [r4, #8]
 800ed52:	3b01      	subs	r3, #1
 800ed54:	60a3      	str	r3, [r4, #8]
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	6022      	str	r2, [r4, #0]
 800ed5c:	701e      	strb	r6, [r3, #0]
 800ed5e:	6962      	ldr	r2, [r4, #20]
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d004      	beq.n	800ed70 <__swbuf_r+0x6e>
 800ed66:	89a3      	ldrh	r3, [r4, #12]
 800ed68:	07db      	lsls	r3, r3, #31
 800ed6a:	d5e1      	bpl.n	800ed30 <__swbuf_r+0x2e>
 800ed6c:	2e0a      	cmp	r6, #10
 800ed6e:	d1df      	bne.n	800ed30 <__swbuf_r+0x2e>
 800ed70:	4621      	mov	r1, r4
 800ed72:	4628      	mov	r0, r5
 800ed74:	f002 fe94 	bl	8011aa0 <_fflush_r>
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d0d9      	beq.n	800ed30 <__swbuf_r+0x2e>
 800ed7c:	e7d6      	b.n	800ed2c <__swbuf_r+0x2a>
	...

0800ed80 <__swsetup_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	4b29      	ldr	r3, [pc, #164]	@ (800ee28 <__swsetup_r+0xa8>)
 800ed84:	4605      	mov	r5, r0
 800ed86:	6818      	ldr	r0, [r3, #0]
 800ed88:	460c      	mov	r4, r1
 800ed8a:	b118      	cbz	r0, 800ed94 <__swsetup_r+0x14>
 800ed8c:	6a03      	ldr	r3, [r0, #32]
 800ed8e:	b90b      	cbnz	r3, 800ed94 <__swsetup_r+0x14>
 800ed90:	f7ff feac 	bl	800eaec <__sinit>
 800ed94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed98:	0719      	lsls	r1, r3, #28
 800ed9a:	d422      	bmi.n	800ede2 <__swsetup_r+0x62>
 800ed9c:	06da      	lsls	r2, r3, #27
 800ed9e:	d407      	bmi.n	800edb0 <__swsetup_r+0x30>
 800eda0:	2209      	movs	r2, #9
 800eda2:	602a      	str	r2, [r5, #0]
 800eda4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eda8:	81a3      	strh	r3, [r4, #12]
 800edaa:	f04f 30ff 	mov.w	r0, #4294967295
 800edae:	e033      	b.n	800ee18 <__swsetup_r+0x98>
 800edb0:	0758      	lsls	r0, r3, #29
 800edb2:	d512      	bpl.n	800edda <__swsetup_r+0x5a>
 800edb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edb6:	b141      	cbz	r1, 800edca <__swsetup_r+0x4a>
 800edb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edbc:	4299      	cmp	r1, r3
 800edbe:	d002      	beq.n	800edc6 <__swsetup_r+0x46>
 800edc0:	4628      	mov	r0, r5
 800edc2:	f000 ff21 	bl	800fc08 <_free_r>
 800edc6:	2300      	movs	r3, #0
 800edc8:	6363      	str	r3, [r4, #52]	@ 0x34
 800edca:	89a3      	ldrh	r3, [r4, #12]
 800edcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800edd0:	81a3      	strh	r3, [r4, #12]
 800edd2:	2300      	movs	r3, #0
 800edd4:	6063      	str	r3, [r4, #4]
 800edd6:	6923      	ldr	r3, [r4, #16]
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	89a3      	ldrh	r3, [r4, #12]
 800eddc:	f043 0308 	orr.w	r3, r3, #8
 800ede0:	81a3      	strh	r3, [r4, #12]
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	b94b      	cbnz	r3, 800edfa <__swsetup_r+0x7a>
 800ede6:	89a3      	ldrh	r3, [r4, #12]
 800ede8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800edec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800edf0:	d003      	beq.n	800edfa <__swsetup_r+0x7a>
 800edf2:	4621      	mov	r1, r4
 800edf4:	4628      	mov	r0, r5
 800edf6:	f002 fea1 	bl	8011b3c <__smakebuf_r>
 800edfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edfe:	f013 0201 	ands.w	r2, r3, #1
 800ee02:	d00a      	beq.n	800ee1a <__swsetup_r+0x9a>
 800ee04:	2200      	movs	r2, #0
 800ee06:	60a2      	str	r2, [r4, #8]
 800ee08:	6962      	ldr	r2, [r4, #20]
 800ee0a:	4252      	negs	r2, r2
 800ee0c:	61a2      	str	r2, [r4, #24]
 800ee0e:	6922      	ldr	r2, [r4, #16]
 800ee10:	b942      	cbnz	r2, 800ee24 <__swsetup_r+0xa4>
 800ee12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ee16:	d1c5      	bne.n	800eda4 <__swsetup_r+0x24>
 800ee18:	bd38      	pop	{r3, r4, r5, pc}
 800ee1a:	0799      	lsls	r1, r3, #30
 800ee1c:	bf58      	it	pl
 800ee1e:	6962      	ldrpl	r2, [r4, #20]
 800ee20:	60a2      	str	r2, [r4, #8]
 800ee22:	e7f4      	b.n	800ee0e <__swsetup_r+0x8e>
 800ee24:	2000      	movs	r0, #0
 800ee26:	e7f7      	b.n	800ee18 <__swsetup_r+0x98>
 800ee28:	20000118 	.word	0x20000118

0800ee2c <memset>:
 800ee2c:	4402      	add	r2, r0
 800ee2e:	4603      	mov	r3, r0
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d100      	bne.n	800ee36 <memset+0xa>
 800ee34:	4770      	bx	lr
 800ee36:	f803 1b01 	strb.w	r1, [r3], #1
 800ee3a:	e7f9      	b.n	800ee30 <memset+0x4>

0800ee3c <_localeconv_r>:
 800ee3c:	4800      	ldr	r0, [pc, #0]	@ (800ee40 <_localeconv_r+0x4>)
 800ee3e:	4770      	bx	lr
 800ee40:	20000258 	.word	0x20000258

0800ee44 <_close_r>:
 800ee44:	b538      	push	{r3, r4, r5, lr}
 800ee46:	4d06      	ldr	r5, [pc, #24]	@ (800ee60 <_close_r+0x1c>)
 800ee48:	2300      	movs	r3, #0
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	4608      	mov	r0, r1
 800ee4e:	602b      	str	r3, [r5, #0]
 800ee50:	f7f2 fcd8 	bl	8001804 <_close>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_close_r+0x1a>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_close_r+0x1a>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	20002700 	.word	0x20002700

0800ee64 <_lseek_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	@ (800ee84 <_lseek_r+0x20>)
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f7f2 fced 	bl	8001852 <_lseek>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_lseek_r+0x1e>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_lseek_r+0x1e>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	20002700 	.word	0x20002700

0800ee88 <_read_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d07      	ldr	r5, [pc, #28]	@ (800eea8 <_read_r+0x20>)
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	4608      	mov	r0, r1
 800ee90:	4611      	mov	r1, r2
 800ee92:	2200      	movs	r2, #0
 800ee94:	602a      	str	r2, [r5, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	f7f2 fc7b 	bl	8001792 <_read>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d102      	bne.n	800eea6 <_read_r+0x1e>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	b103      	cbz	r3, 800eea6 <_read_r+0x1e>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	20002700 	.word	0x20002700

0800eeac <_write_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	4d07      	ldr	r5, [pc, #28]	@ (800eecc <_write_r+0x20>)
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	602a      	str	r2, [r5, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	f7f2 fc86 	bl	80017cc <_write>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_write_r+0x1e>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_write_r+0x1e>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	20002700 	.word	0x20002700

0800eed0 <__errno>:
 800eed0:	4b01      	ldr	r3, [pc, #4]	@ (800eed8 <__errno+0x8>)
 800eed2:	6818      	ldr	r0, [r3, #0]
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	20000118 	.word	0x20000118

0800eedc <__libc_init_array>:
 800eedc:	b570      	push	{r4, r5, r6, lr}
 800eede:	4d0d      	ldr	r5, [pc, #52]	@ (800ef14 <__libc_init_array+0x38>)
 800eee0:	4c0d      	ldr	r4, [pc, #52]	@ (800ef18 <__libc_init_array+0x3c>)
 800eee2:	1b64      	subs	r4, r4, r5
 800eee4:	10a4      	asrs	r4, r4, #2
 800eee6:	2600      	movs	r6, #0
 800eee8:	42a6      	cmp	r6, r4
 800eeea:	d109      	bne.n	800ef00 <__libc_init_array+0x24>
 800eeec:	4d0b      	ldr	r5, [pc, #44]	@ (800ef1c <__libc_init_array+0x40>)
 800eeee:	4c0c      	ldr	r4, [pc, #48]	@ (800ef20 <__libc_init_array+0x44>)
 800eef0:	f003 faf2 	bl	80124d8 <_init>
 800eef4:	1b64      	subs	r4, r4, r5
 800eef6:	10a4      	asrs	r4, r4, #2
 800eef8:	2600      	movs	r6, #0
 800eefa:	42a6      	cmp	r6, r4
 800eefc:	d105      	bne.n	800ef0a <__libc_init_array+0x2e>
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef04:	4798      	blx	r3
 800ef06:	3601      	adds	r6, #1
 800ef08:	e7ee      	b.n	800eee8 <__libc_init_array+0xc>
 800ef0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef0e:	4798      	blx	r3
 800ef10:	3601      	adds	r6, #1
 800ef12:	e7f2      	b.n	800eefa <__libc_init_array+0x1e>
 800ef14:	08012d94 	.word	0x08012d94
 800ef18:	08012d94 	.word	0x08012d94
 800ef1c:	08012d94 	.word	0x08012d94
 800ef20:	08012d98 	.word	0x08012d98

0800ef24 <__retarget_lock_init_recursive>:
 800ef24:	4770      	bx	lr

0800ef26 <__retarget_lock_acquire_recursive>:
 800ef26:	4770      	bx	lr

0800ef28 <__retarget_lock_release_recursive>:
 800ef28:	4770      	bx	lr

0800ef2a <memcpy>:
 800ef2a:	440a      	add	r2, r1
 800ef2c:	4291      	cmp	r1, r2
 800ef2e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef32:	d100      	bne.n	800ef36 <memcpy+0xc>
 800ef34:	4770      	bx	lr
 800ef36:	b510      	push	{r4, lr}
 800ef38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef40:	4291      	cmp	r1, r2
 800ef42:	d1f9      	bne.n	800ef38 <memcpy+0xe>
 800ef44:	bd10      	pop	{r4, pc}
	...

0800ef48 <nanf>:
 800ef48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800ef50 <nanf+0x8>
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop
 800ef50:	7fc00000 	.word	0x7fc00000

0800ef54 <quorem>:
 800ef54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef58:	6903      	ldr	r3, [r0, #16]
 800ef5a:	690c      	ldr	r4, [r1, #16]
 800ef5c:	42a3      	cmp	r3, r4
 800ef5e:	4607      	mov	r7, r0
 800ef60:	db7e      	blt.n	800f060 <quorem+0x10c>
 800ef62:	3c01      	subs	r4, #1
 800ef64:	f101 0814 	add.w	r8, r1, #20
 800ef68:	00a3      	lsls	r3, r4, #2
 800ef6a:	f100 0514 	add.w	r5, r0, #20
 800ef6e:	9300      	str	r3, [sp, #0]
 800ef70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef74:	9301      	str	r3, [sp, #4]
 800ef76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef7e:	3301      	adds	r3, #1
 800ef80:	429a      	cmp	r2, r3
 800ef82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef86:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef8a:	d32e      	bcc.n	800efea <quorem+0x96>
 800ef8c:	f04f 0a00 	mov.w	sl, #0
 800ef90:	46c4      	mov	ip, r8
 800ef92:	46ae      	mov	lr, r5
 800ef94:	46d3      	mov	fp, sl
 800ef96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef9a:	b298      	uxth	r0, r3
 800ef9c:	fb06 a000 	mla	r0, r6, r0, sl
 800efa0:	0c02      	lsrs	r2, r0, #16
 800efa2:	0c1b      	lsrs	r3, r3, #16
 800efa4:	fb06 2303 	mla	r3, r6, r3, r2
 800efa8:	f8de 2000 	ldr.w	r2, [lr]
 800efac:	b280      	uxth	r0, r0
 800efae:	b292      	uxth	r2, r2
 800efb0:	1a12      	subs	r2, r2, r0
 800efb2:	445a      	add	r2, fp
 800efb4:	f8de 0000 	ldr.w	r0, [lr]
 800efb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efbc:	b29b      	uxth	r3, r3
 800efbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800efc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800efc6:	b292      	uxth	r2, r2
 800efc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800efcc:	45e1      	cmp	r9, ip
 800efce:	f84e 2b04 	str.w	r2, [lr], #4
 800efd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800efd6:	d2de      	bcs.n	800ef96 <quorem+0x42>
 800efd8:	9b00      	ldr	r3, [sp, #0]
 800efda:	58eb      	ldr	r3, [r5, r3]
 800efdc:	b92b      	cbnz	r3, 800efea <quorem+0x96>
 800efde:	9b01      	ldr	r3, [sp, #4]
 800efe0:	3b04      	subs	r3, #4
 800efe2:	429d      	cmp	r5, r3
 800efe4:	461a      	mov	r2, r3
 800efe6:	d32f      	bcc.n	800f048 <quorem+0xf4>
 800efe8:	613c      	str	r4, [r7, #16]
 800efea:	4638      	mov	r0, r7
 800efec:	f001 f9c8 	bl	8010380 <__mcmp>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	db25      	blt.n	800f040 <quorem+0xec>
 800eff4:	4629      	mov	r1, r5
 800eff6:	2000      	movs	r0, #0
 800eff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800effc:	f8d1 c000 	ldr.w	ip, [r1]
 800f000:	fa1f fe82 	uxth.w	lr, r2
 800f004:	fa1f f38c 	uxth.w	r3, ip
 800f008:	eba3 030e 	sub.w	r3, r3, lr
 800f00c:	4403      	add	r3, r0
 800f00e:	0c12      	lsrs	r2, r2, #16
 800f010:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f014:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f018:	b29b      	uxth	r3, r3
 800f01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f01e:	45c1      	cmp	r9, r8
 800f020:	f841 3b04 	str.w	r3, [r1], #4
 800f024:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f028:	d2e6      	bcs.n	800eff8 <quorem+0xa4>
 800f02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f032:	b922      	cbnz	r2, 800f03e <quorem+0xea>
 800f034:	3b04      	subs	r3, #4
 800f036:	429d      	cmp	r5, r3
 800f038:	461a      	mov	r2, r3
 800f03a:	d30b      	bcc.n	800f054 <quorem+0x100>
 800f03c:	613c      	str	r4, [r7, #16]
 800f03e:	3601      	adds	r6, #1
 800f040:	4630      	mov	r0, r6
 800f042:	b003      	add	sp, #12
 800f044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f048:	6812      	ldr	r2, [r2, #0]
 800f04a:	3b04      	subs	r3, #4
 800f04c:	2a00      	cmp	r2, #0
 800f04e:	d1cb      	bne.n	800efe8 <quorem+0x94>
 800f050:	3c01      	subs	r4, #1
 800f052:	e7c6      	b.n	800efe2 <quorem+0x8e>
 800f054:	6812      	ldr	r2, [r2, #0]
 800f056:	3b04      	subs	r3, #4
 800f058:	2a00      	cmp	r2, #0
 800f05a:	d1ef      	bne.n	800f03c <quorem+0xe8>
 800f05c:	3c01      	subs	r4, #1
 800f05e:	e7ea      	b.n	800f036 <quorem+0xe2>
 800f060:	2000      	movs	r0, #0
 800f062:	e7ee      	b.n	800f042 <quorem+0xee>
 800f064:	0000      	movs	r0, r0
	...

0800f068 <_dtoa_r>:
 800f068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f06c:	69c7      	ldr	r7, [r0, #28]
 800f06e:	b097      	sub	sp, #92	@ 0x5c
 800f070:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f074:	ec55 4b10 	vmov	r4, r5, d0
 800f078:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f07a:	9107      	str	r1, [sp, #28]
 800f07c:	4681      	mov	r9, r0
 800f07e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f080:	9311      	str	r3, [sp, #68]	@ 0x44
 800f082:	b97f      	cbnz	r7, 800f0a4 <_dtoa_r+0x3c>
 800f084:	2010      	movs	r0, #16
 800f086:	f000 fe09 	bl	800fc9c <malloc>
 800f08a:	4602      	mov	r2, r0
 800f08c:	f8c9 001c 	str.w	r0, [r9, #28]
 800f090:	b920      	cbnz	r0, 800f09c <_dtoa_r+0x34>
 800f092:	4ba9      	ldr	r3, [pc, #676]	@ (800f338 <_dtoa_r+0x2d0>)
 800f094:	21ef      	movs	r1, #239	@ 0xef
 800f096:	48a9      	ldr	r0, [pc, #676]	@ (800f33c <_dtoa_r+0x2d4>)
 800f098:	f002 fdf2 	bl	8011c80 <__assert_func>
 800f09c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0a0:	6007      	str	r7, [r0, #0]
 800f0a2:	60c7      	str	r7, [r0, #12]
 800f0a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f0a8:	6819      	ldr	r1, [r3, #0]
 800f0aa:	b159      	cbz	r1, 800f0c4 <_dtoa_r+0x5c>
 800f0ac:	685a      	ldr	r2, [r3, #4]
 800f0ae:	604a      	str	r2, [r1, #4]
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	4093      	lsls	r3, r2
 800f0b4:	608b      	str	r3, [r1, #8]
 800f0b6:	4648      	mov	r0, r9
 800f0b8:	f000 fee6 	bl	800fe88 <_Bfree>
 800f0bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	601a      	str	r2, [r3, #0]
 800f0c4:	1e2b      	subs	r3, r5, #0
 800f0c6:	bfb9      	ittee	lt
 800f0c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f0cc:	9305      	strlt	r3, [sp, #20]
 800f0ce:	2300      	movge	r3, #0
 800f0d0:	6033      	strge	r3, [r6, #0]
 800f0d2:	9f05      	ldr	r7, [sp, #20]
 800f0d4:	4b9a      	ldr	r3, [pc, #616]	@ (800f340 <_dtoa_r+0x2d8>)
 800f0d6:	bfbc      	itt	lt
 800f0d8:	2201      	movlt	r2, #1
 800f0da:	6032      	strlt	r2, [r6, #0]
 800f0dc:	43bb      	bics	r3, r7
 800f0de:	d112      	bne.n	800f106 <_dtoa_r+0x9e>
 800f0e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f0e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0ec:	4323      	orrs	r3, r4
 800f0ee:	f000 855a 	beq.w	800fba6 <_dtoa_r+0xb3e>
 800f0f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f0f4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f354 <_dtoa_r+0x2ec>
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f000 855c 	beq.w	800fbb6 <_dtoa_r+0xb4e>
 800f0fe:	f10a 0303 	add.w	r3, sl, #3
 800f102:	f000 bd56 	b.w	800fbb2 <_dtoa_r+0xb4a>
 800f106:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f10a:	2200      	movs	r2, #0
 800f10c:	ec51 0b17 	vmov	r0, r1, d7
 800f110:	2300      	movs	r3, #0
 800f112:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f116:	f7f1 fcd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f11a:	4680      	mov	r8, r0
 800f11c:	b158      	cbz	r0, 800f136 <_dtoa_r+0xce>
 800f11e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f120:	2301      	movs	r3, #1
 800f122:	6013      	str	r3, [r2, #0]
 800f124:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f126:	b113      	cbz	r3, 800f12e <_dtoa_r+0xc6>
 800f128:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f12a:	4b86      	ldr	r3, [pc, #536]	@ (800f344 <_dtoa_r+0x2dc>)
 800f12c:	6013      	str	r3, [r2, #0]
 800f12e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f358 <_dtoa_r+0x2f0>
 800f132:	f000 bd40 	b.w	800fbb6 <_dtoa_r+0xb4e>
 800f136:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f13a:	aa14      	add	r2, sp, #80	@ 0x50
 800f13c:	a915      	add	r1, sp, #84	@ 0x54
 800f13e:	4648      	mov	r0, r9
 800f140:	f001 fa3e 	bl	80105c0 <__d2b>
 800f144:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f148:	9002      	str	r0, [sp, #8]
 800f14a:	2e00      	cmp	r6, #0
 800f14c:	d078      	beq.n	800f240 <_dtoa_r+0x1d8>
 800f14e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f150:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f15c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f160:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f164:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f168:	4619      	mov	r1, r3
 800f16a:	2200      	movs	r2, #0
 800f16c:	4b76      	ldr	r3, [pc, #472]	@ (800f348 <_dtoa_r+0x2e0>)
 800f16e:	f7f1 f88b 	bl	8000288 <__aeabi_dsub>
 800f172:	a36b      	add	r3, pc, #428	@ (adr r3, 800f320 <_dtoa_r+0x2b8>)
 800f174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f178:	f7f1 fa3e 	bl	80005f8 <__aeabi_dmul>
 800f17c:	a36a      	add	r3, pc, #424	@ (adr r3, 800f328 <_dtoa_r+0x2c0>)
 800f17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f182:	f7f1 f883 	bl	800028c <__adddf3>
 800f186:	4604      	mov	r4, r0
 800f188:	4630      	mov	r0, r6
 800f18a:	460d      	mov	r5, r1
 800f18c:	f7f1 f9ca 	bl	8000524 <__aeabi_i2d>
 800f190:	a367      	add	r3, pc, #412	@ (adr r3, 800f330 <_dtoa_r+0x2c8>)
 800f192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f196:	f7f1 fa2f 	bl	80005f8 <__aeabi_dmul>
 800f19a:	4602      	mov	r2, r0
 800f19c:	460b      	mov	r3, r1
 800f19e:	4620      	mov	r0, r4
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	f7f1 f873 	bl	800028c <__adddf3>
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	f7f1 fcd5 	bl	8000b58 <__aeabi_d2iz>
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	4607      	mov	r7, r0
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 fc90 	bl	8000adc <__aeabi_dcmplt>
 800f1bc:	b140      	cbz	r0, 800f1d0 <_dtoa_r+0x168>
 800f1be:	4638      	mov	r0, r7
 800f1c0:	f7f1 f9b0 	bl	8000524 <__aeabi_i2d>
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	f7f1 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f1cc:	b900      	cbnz	r0, 800f1d0 <_dtoa_r+0x168>
 800f1ce:	3f01      	subs	r7, #1
 800f1d0:	2f16      	cmp	r7, #22
 800f1d2:	d852      	bhi.n	800f27a <_dtoa_r+0x212>
 800f1d4:	4b5d      	ldr	r3, [pc, #372]	@ (800f34c <_dtoa_r+0x2e4>)
 800f1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f1e2:	f7f1 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d049      	beq.n	800f27e <_dtoa_r+0x216>
 800f1ea:	3f01      	subs	r7, #1
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f1f2:	1b9b      	subs	r3, r3, r6
 800f1f4:	1e5a      	subs	r2, r3, #1
 800f1f6:	bf45      	ittet	mi
 800f1f8:	f1c3 0301 	rsbmi	r3, r3, #1
 800f1fc:	9300      	strmi	r3, [sp, #0]
 800f1fe:	2300      	movpl	r3, #0
 800f200:	2300      	movmi	r3, #0
 800f202:	9206      	str	r2, [sp, #24]
 800f204:	bf54      	ite	pl
 800f206:	9300      	strpl	r3, [sp, #0]
 800f208:	9306      	strmi	r3, [sp, #24]
 800f20a:	2f00      	cmp	r7, #0
 800f20c:	db39      	blt.n	800f282 <_dtoa_r+0x21a>
 800f20e:	9b06      	ldr	r3, [sp, #24]
 800f210:	970d      	str	r7, [sp, #52]	@ 0x34
 800f212:	443b      	add	r3, r7
 800f214:	9306      	str	r3, [sp, #24]
 800f216:	2300      	movs	r3, #0
 800f218:	9308      	str	r3, [sp, #32]
 800f21a:	9b07      	ldr	r3, [sp, #28]
 800f21c:	2b09      	cmp	r3, #9
 800f21e:	d863      	bhi.n	800f2e8 <_dtoa_r+0x280>
 800f220:	2b05      	cmp	r3, #5
 800f222:	bfc4      	itt	gt
 800f224:	3b04      	subgt	r3, #4
 800f226:	9307      	strgt	r3, [sp, #28]
 800f228:	9b07      	ldr	r3, [sp, #28]
 800f22a:	f1a3 0302 	sub.w	r3, r3, #2
 800f22e:	bfcc      	ite	gt
 800f230:	2400      	movgt	r4, #0
 800f232:	2401      	movle	r4, #1
 800f234:	2b03      	cmp	r3, #3
 800f236:	d863      	bhi.n	800f300 <_dtoa_r+0x298>
 800f238:	e8df f003 	tbb	[pc, r3]
 800f23c:	2b375452 	.word	0x2b375452
 800f240:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f244:	441e      	add	r6, r3
 800f246:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f24a:	2b20      	cmp	r3, #32
 800f24c:	bfc1      	itttt	gt
 800f24e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f252:	409f      	lslgt	r7, r3
 800f254:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f258:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f25c:	bfd6      	itet	le
 800f25e:	f1c3 0320 	rsble	r3, r3, #32
 800f262:	ea47 0003 	orrgt.w	r0, r7, r3
 800f266:	fa04 f003 	lslle.w	r0, r4, r3
 800f26a:	f7f1 f94b 	bl	8000504 <__aeabi_ui2d>
 800f26e:	2201      	movs	r2, #1
 800f270:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f274:	3e01      	subs	r6, #1
 800f276:	9212      	str	r2, [sp, #72]	@ 0x48
 800f278:	e776      	b.n	800f168 <_dtoa_r+0x100>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e7b7      	b.n	800f1ee <_dtoa_r+0x186>
 800f27e:	9010      	str	r0, [sp, #64]	@ 0x40
 800f280:	e7b6      	b.n	800f1f0 <_dtoa_r+0x188>
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	1bdb      	subs	r3, r3, r7
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	427b      	negs	r3, r7
 800f28a:	9308      	str	r3, [sp, #32]
 800f28c:	2300      	movs	r3, #0
 800f28e:	930d      	str	r3, [sp, #52]	@ 0x34
 800f290:	e7c3      	b.n	800f21a <_dtoa_r+0x1b2>
 800f292:	2301      	movs	r3, #1
 800f294:	9309      	str	r3, [sp, #36]	@ 0x24
 800f296:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f298:	eb07 0b03 	add.w	fp, r7, r3
 800f29c:	f10b 0301 	add.w	r3, fp, #1
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	9303      	str	r3, [sp, #12]
 800f2a4:	bfb8      	it	lt
 800f2a6:	2301      	movlt	r3, #1
 800f2a8:	e006      	b.n	800f2b8 <_dtoa_r+0x250>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	dd28      	ble.n	800f306 <_dtoa_r+0x29e>
 800f2b4:	469b      	mov	fp, r3
 800f2b6:	9303      	str	r3, [sp, #12]
 800f2b8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f2bc:	2100      	movs	r1, #0
 800f2be:	2204      	movs	r2, #4
 800f2c0:	f102 0514 	add.w	r5, r2, #20
 800f2c4:	429d      	cmp	r5, r3
 800f2c6:	d926      	bls.n	800f316 <_dtoa_r+0x2ae>
 800f2c8:	6041      	str	r1, [r0, #4]
 800f2ca:	4648      	mov	r0, r9
 800f2cc:	f000 fd9c 	bl	800fe08 <_Balloc>
 800f2d0:	4682      	mov	sl, r0
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d142      	bne.n	800f35c <_dtoa_r+0x2f4>
 800f2d6:	4b1e      	ldr	r3, [pc, #120]	@ (800f350 <_dtoa_r+0x2e8>)
 800f2d8:	4602      	mov	r2, r0
 800f2da:	f240 11af 	movw	r1, #431	@ 0x1af
 800f2de:	e6da      	b.n	800f096 <_dtoa_r+0x2e>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	e7e3      	b.n	800f2ac <_dtoa_r+0x244>
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e7d5      	b.n	800f294 <_dtoa_r+0x22c>
 800f2e8:	2401      	movs	r4, #1
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	9307      	str	r3, [sp, #28]
 800f2ee:	9409      	str	r4, [sp, #36]	@ 0x24
 800f2f0:	f04f 3bff 	mov.w	fp, #4294967295
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	f8cd b00c 	str.w	fp, [sp, #12]
 800f2fa:	2312      	movs	r3, #18
 800f2fc:	920c      	str	r2, [sp, #48]	@ 0x30
 800f2fe:	e7db      	b.n	800f2b8 <_dtoa_r+0x250>
 800f300:	2301      	movs	r3, #1
 800f302:	9309      	str	r3, [sp, #36]	@ 0x24
 800f304:	e7f4      	b.n	800f2f0 <_dtoa_r+0x288>
 800f306:	f04f 0b01 	mov.w	fp, #1
 800f30a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f30e:	465b      	mov	r3, fp
 800f310:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f314:	e7d0      	b.n	800f2b8 <_dtoa_r+0x250>
 800f316:	3101      	adds	r1, #1
 800f318:	0052      	lsls	r2, r2, #1
 800f31a:	e7d1      	b.n	800f2c0 <_dtoa_r+0x258>
 800f31c:	f3af 8000 	nop.w
 800f320:	636f4361 	.word	0x636f4361
 800f324:	3fd287a7 	.word	0x3fd287a7
 800f328:	8b60c8b3 	.word	0x8b60c8b3
 800f32c:	3fc68a28 	.word	0x3fc68a28
 800f330:	509f79fb 	.word	0x509f79fb
 800f334:	3fd34413 	.word	0x3fd34413
 800f338:	080129aa 	.word	0x080129aa
 800f33c:	080129c1 	.word	0x080129c1
 800f340:	7ff00000 	.word	0x7ff00000
 800f344:	08012975 	.word	0x08012975
 800f348:	3ff80000 	.word	0x3ff80000
 800f34c:	08012b70 	.word	0x08012b70
 800f350:	08012a19 	.word	0x08012a19
 800f354:	080129a6 	.word	0x080129a6
 800f358:	08012974 	.word	0x08012974
 800f35c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f360:	6018      	str	r0, [r3, #0]
 800f362:	9b03      	ldr	r3, [sp, #12]
 800f364:	2b0e      	cmp	r3, #14
 800f366:	f200 80a1 	bhi.w	800f4ac <_dtoa_r+0x444>
 800f36a:	2c00      	cmp	r4, #0
 800f36c:	f000 809e 	beq.w	800f4ac <_dtoa_r+0x444>
 800f370:	2f00      	cmp	r7, #0
 800f372:	dd33      	ble.n	800f3dc <_dtoa_r+0x374>
 800f374:	4b9c      	ldr	r3, [pc, #624]	@ (800f5e8 <_dtoa_r+0x580>)
 800f376:	f007 020f 	and.w	r2, r7, #15
 800f37a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f37e:	ed93 7b00 	vldr	d7, [r3]
 800f382:	05f8      	lsls	r0, r7, #23
 800f384:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f388:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f38c:	d516      	bpl.n	800f3bc <_dtoa_r+0x354>
 800f38e:	4b97      	ldr	r3, [pc, #604]	@ (800f5ec <_dtoa_r+0x584>)
 800f390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f398:	f7f1 fa58 	bl	800084c <__aeabi_ddiv>
 800f39c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a0:	f004 040f 	and.w	r4, r4, #15
 800f3a4:	2603      	movs	r6, #3
 800f3a6:	4d91      	ldr	r5, [pc, #580]	@ (800f5ec <_dtoa_r+0x584>)
 800f3a8:	b954      	cbnz	r4, 800f3c0 <_dtoa_r+0x358>
 800f3aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f3ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3b2:	f7f1 fa4b 	bl	800084c <__aeabi_ddiv>
 800f3b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3ba:	e028      	b.n	800f40e <_dtoa_r+0x3a6>
 800f3bc:	2602      	movs	r6, #2
 800f3be:	e7f2      	b.n	800f3a6 <_dtoa_r+0x33e>
 800f3c0:	07e1      	lsls	r1, r4, #31
 800f3c2:	d508      	bpl.n	800f3d6 <_dtoa_r+0x36e>
 800f3c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f3c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f3d4:	3601      	adds	r6, #1
 800f3d6:	1064      	asrs	r4, r4, #1
 800f3d8:	3508      	adds	r5, #8
 800f3da:	e7e5      	b.n	800f3a8 <_dtoa_r+0x340>
 800f3dc:	f000 80af 	beq.w	800f53e <_dtoa_r+0x4d6>
 800f3e0:	427c      	negs	r4, r7
 800f3e2:	4b81      	ldr	r3, [pc, #516]	@ (800f5e8 <_dtoa_r+0x580>)
 800f3e4:	4d81      	ldr	r5, [pc, #516]	@ (800f5ec <_dtoa_r+0x584>)
 800f3e6:	f004 020f 	and.w	r2, r4, #15
 800f3ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f3f6:	f7f1 f8ff 	bl	80005f8 <__aeabi_dmul>
 800f3fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3fe:	1124      	asrs	r4, r4, #4
 800f400:	2300      	movs	r3, #0
 800f402:	2602      	movs	r6, #2
 800f404:	2c00      	cmp	r4, #0
 800f406:	f040 808f 	bne.w	800f528 <_dtoa_r+0x4c0>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1d3      	bne.n	800f3b6 <_dtoa_r+0x34e>
 800f40e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f410:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f414:	2b00      	cmp	r3, #0
 800f416:	f000 8094 	beq.w	800f542 <_dtoa_r+0x4da>
 800f41a:	4b75      	ldr	r3, [pc, #468]	@ (800f5f0 <_dtoa_r+0x588>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	4620      	mov	r0, r4
 800f420:	4629      	mov	r1, r5
 800f422:	f7f1 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800f426:	2800      	cmp	r0, #0
 800f428:	f000 808b 	beq.w	800f542 <_dtoa_r+0x4da>
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f000 8087 	beq.w	800f542 <_dtoa_r+0x4da>
 800f434:	f1bb 0f00 	cmp.w	fp, #0
 800f438:	dd34      	ble.n	800f4a4 <_dtoa_r+0x43c>
 800f43a:	4620      	mov	r0, r4
 800f43c:	4b6d      	ldr	r3, [pc, #436]	@ (800f5f4 <_dtoa_r+0x58c>)
 800f43e:	2200      	movs	r2, #0
 800f440:	4629      	mov	r1, r5
 800f442:	f7f1 f8d9 	bl	80005f8 <__aeabi_dmul>
 800f446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f44a:	f107 38ff 	add.w	r8, r7, #4294967295
 800f44e:	3601      	adds	r6, #1
 800f450:	465c      	mov	r4, fp
 800f452:	4630      	mov	r0, r6
 800f454:	f7f1 f866 	bl	8000524 <__aeabi_i2d>
 800f458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f45c:	f7f1 f8cc 	bl	80005f8 <__aeabi_dmul>
 800f460:	4b65      	ldr	r3, [pc, #404]	@ (800f5f8 <_dtoa_r+0x590>)
 800f462:	2200      	movs	r2, #0
 800f464:	f7f0 ff12 	bl	800028c <__adddf3>
 800f468:	4605      	mov	r5, r0
 800f46a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f46e:	2c00      	cmp	r4, #0
 800f470:	d16a      	bne.n	800f548 <_dtoa_r+0x4e0>
 800f472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f476:	4b61      	ldr	r3, [pc, #388]	@ (800f5fc <_dtoa_r+0x594>)
 800f478:	2200      	movs	r2, #0
 800f47a:	f7f0 ff05 	bl	8000288 <__aeabi_dsub>
 800f47e:	4602      	mov	r2, r0
 800f480:	460b      	mov	r3, r1
 800f482:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f486:	462a      	mov	r2, r5
 800f488:	4633      	mov	r3, r6
 800f48a:	f7f1 fb45 	bl	8000b18 <__aeabi_dcmpgt>
 800f48e:	2800      	cmp	r0, #0
 800f490:	f040 8298 	bne.w	800f9c4 <_dtoa_r+0x95c>
 800f494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f498:	462a      	mov	r2, r5
 800f49a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f49e:	f7f1 fb1d 	bl	8000adc <__aeabi_dcmplt>
 800f4a2:	bb38      	cbnz	r0, 800f4f4 <_dtoa_r+0x48c>
 800f4a4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f4a8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f4ac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f2c0 8157 	blt.w	800f762 <_dtoa_r+0x6fa>
 800f4b4:	2f0e      	cmp	r7, #14
 800f4b6:	f300 8154 	bgt.w	800f762 <_dtoa_r+0x6fa>
 800f4ba:	4b4b      	ldr	r3, [pc, #300]	@ (800f5e8 <_dtoa_r+0x580>)
 800f4bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4c0:	ed93 7b00 	vldr	d7, [r3]
 800f4c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	ed8d 7b00 	vstr	d7, [sp]
 800f4cc:	f280 80e5 	bge.w	800f69a <_dtoa_r+0x632>
 800f4d0:	9b03      	ldr	r3, [sp, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f300 80e1 	bgt.w	800f69a <_dtoa_r+0x632>
 800f4d8:	d10c      	bne.n	800f4f4 <_dtoa_r+0x48c>
 800f4da:	4b48      	ldr	r3, [pc, #288]	@ (800f5fc <_dtoa_r+0x594>)
 800f4dc:	2200      	movs	r2, #0
 800f4de:	ec51 0b17 	vmov	r0, r1, d7
 800f4e2:	f7f1 f889 	bl	80005f8 <__aeabi_dmul>
 800f4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4ea:	f7f1 fb0b 	bl	8000b04 <__aeabi_dcmpge>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f000 8266 	beq.w	800f9c0 <_dtoa_r+0x958>
 800f4f4:	2400      	movs	r4, #0
 800f4f6:	4625      	mov	r5, r4
 800f4f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4fa:	4656      	mov	r6, sl
 800f4fc:	ea6f 0803 	mvn.w	r8, r3
 800f500:	2700      	movs	r7, #0
 800f502:	4621      	mov	r1, r4
 800f504:	4648      	mov	r0, r9
 800f506:	f000 fcbf 	bl	800fe88 <_Bfree>
 800f50a:	2d00      	cmp	r5, #0
 800f50c:	f000 80bd 	beq.w	800f68a <_dtoa_r+0x622>
 800f510:	b12f      	cbz	r7, 800f51e <_dtoa_r+0x4b6>
 800f512:	42af      	cmp	r7, r5
 800f514:	d003      	beq.n	800f51e <_dtoa_r+0x4b6>
 800f516:	4639      	mov	r1, r7
 800f518:	4648      	mov	r0, r9
 800f51a:	f000 fcb5 	bl	800fe88 <_Bfree>
 800f51e:	4629      	mov	r1, r5
 800f520:	4648      	mov	r0, r9
 800f522:	f000 fcb1 	bl	800fe88 <_Bfree>
 800f526:	e0b0      	b.n	800f68a <_dtoa_r+0x622>
 800f528:	07e2      	lsls	r2, r4, #31
 800f52a:	d505      	bpl.n	800f538 <_dtoa_r+0x4d0>
 800f52c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	3601      	adds	r6, #1
 800f536:	2301      	movs	r3, #1
 800f538:	1064      	asrs	r4, r4, #1
 800f53a:	3508      	adds	r5, #8
 800f53c:	e762      	b.n	800f404 <_dtoa_r+0x39c>
 800f53e:	2602      	movs	r6, #2
 800f540:	e765      	b.n	800f40e <_dtoa_r+0x3a6>
 800f542:	9c03      	ldr	r4, [sp, #12]
 800f544:	46b8      	mov	r8, r7
 800f546:	e784      	b.n	800f452 <_dtoa_r+0x3ea>
 800f548:	4b27      	ldr	r3, [pc, #156]	@ (800f5e8 <_dtoa_r+0x580>)
 800f54a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f54c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f550:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f554:	4454      	add	r4, sl
 800f556:	2900      	cmp	r1, #0
 800f558:	d054      	beq.n	800f604 <_dtoa_r+0x59c>
 800f55a:	4929      	ldr	r1, [pc, #164]	@ (800f600 <_dtoa_r+0x598>)
 800f55c:	2000      	movs	r0, #0
 800f55e:	f7f1 f975 	bl	800084c <__aeabi_ddiv>
 800f562:	4633      	mov	r3, r6
 800f564:	462a      	mov	r2, r5
 800f566:	f7f0 fe8f 	bl	8000288 <__aeabi_dsub>
 800f56a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f56e:	4656      	mov	r6, sl
 800f570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f574:	f7f1 faf0 	bl	8000b58 <__aeabi_d2iz>
 800f578:	4605      	mov	r5, r0
 800f57a:	f7f0 ffd3 	bl	8000524 <__aeabi_i2d>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f586:	f7f0 fe7f 	bl	8000288 <__aeabi_dsub>
 800f58a:	3530      	adds	r5, #48	@ 0x30
 800f58c:	4602      	mov	r2, r0
 800f58e:	460b      	mov	r3, r1
 800f590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f594:	f806 5b01 	strb.w	r5, [r6], #1
 800f598:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f59c:	f7f1 fa9e 	bl	8000adc <__aeabi_dcmplt>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d172      	bne.n	800f68a <_dtoa_r+0x622>
 800f5a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5a8:	4911      	ldr	r1, [pc, #68]	@ (800f5f0 <_dtoa_r+0x588>)
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	f7f0 fe6c 	bl	8000288 <__aeabi_dsub>
 800f5b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f5b4:	f7f1 fa92 	bl	8000adc <__aeabi_dcmplt>
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	f040 80b4 	bne.w	800f726 <_dtoa_r+0x6be>
 800f5be:	42a6      	cmp	r6, r4
 800f5c0:	f43f af70 	beq.w	800f4a4 <_dtoa_r+0x43c>
 800f5c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800f5f4 <_dtoa_r+0x58c>)
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f7f1 f814 	bl	80005f8 <__aeabi_dmul>
 800f5d0:	4b08      	ldr	r3, [pc, #32]	@ (800f5f4 <_dtoa_r+0x58c>)
 800f5d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5dc:	f7f1 f80c 	bl	80005f8 <__aeabi_dmul>
 800f5e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5e4:	e7c4      	b.n	800f570 <_dtoa_r+0x508>
 800f5e6:	bf00      	nop
 800f5e8:	08012b70 	.word	0x08012b70
 800f5ec:	08012b48 	.word	0x08012b48
 800f5f0:	3ff00000 	.word	0x3ff00000
 800f5f4:	40240000 	.word	0x40240000
 800f5f8:	401c0000 	.word	0x401c0000
 800f5fc:	40140000 	.word	0x40140000
 800f600:	3fe00000 	.word	0x3fe00000
 800f604:	4631      	mov	r1, r6
 800f606:	4628      	mov	r0, r5
 800f608:	f7f0 fff6 	bl	80005f8 <__aeabi_dmul>
 800f60c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f610:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f612:	4656      	mov	r6, sl
 800f614:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f618:	f7f1 fa9e 	bl	8000b58 <__aeabi_d2iz>
 800f61c:	4605      	mov	r5, r0
 800f61e:	f7f0 ff81 	bl	8000524 <__aeabi_i2d>
 800f622:	4602      	mov	r2, r0
 800f624:	460b      	mov	r3, r1
 800f626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f62a:	f7f0 fe2d 	bl	8000288 <__aeabi_dsub>
 800f62e:	3530      	adds	r5, #48	@ 0x30
 800f630:	f806 5b01 	strb.w	r5, [r6], #1
 800f634:	4602      	mov	r2, r0
 800f636:	460b      	mov	r3, r1
 800f638:	42a6      	cmp	r6, r4
 800f63a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f63e:	f04f 0200 	mov.w	r2, #0
 800f642:	d124      	bne.n	800f68e <_dtoa_r+0x626>
 800f644:	4baf      	ldr	r3, [pc, #700]	@ (800f904 <_dtoa_r+0x89c>)
 800f646:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f64a:	f7f0 fe1f 	bl	800028c <__adddf3>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f656:	f7f1 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800f65a:	2800      	cmp	r0, #0
 800f65c:	d163      	bne.n	800f726 <_dtoa_r+0x6be>
 800f65e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f662:	49a8      	ldr	r1, [pc, #672]	@ (800f904 <_dtoa_r+0x89c>)
 800f664:	2000      	movs	r0, #0
 800f666:	f7f0 fe0f 	bl	8000288 <__aeabi_dsub>
 800f66a:	4602      	mov	r2, r0
 800f66c:	460b      	mov	r3, r1
 800f66e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f672:	f7f1 fa33 	bl	8000adc <__aeabi_dcmplt>
 800f676:	2800      	cmp	r0, #0
 800f678:	f43f af14 	beq.w	800f4a4 <_dtoa_r+0x43c>
 800f67c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f67e:	1e73      	subs	r3, r6, #1
 800f680:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f682:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f686:	2b30      	cmp	r3, #48	@ 0x30
 800f688:	d0f8      	beq.n	800f67c <_dtoa_r+0x614>
 800f68a:	4647      	mov	r7, r8
 800f68c:	e03b      	b.n	800f706 <_dtoa_r+0x69e>
 800f68e:	4b9e      	ldr	r3, [pc, #632]	@ (800f908 <_dtoa_r+0x8a0>)
 800f690:	f7f0 ffb2 	bl	80005f8 <__aeabi_dmul>
 800f694:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f698:	e7bc      	b.n	800f614 <_dtoa_r+0x5ac>
 800f69a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f69e:	4656      	mov	r6, sl
 800f6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	4629      	mov	r1, r5
 800f6a8:	f7f1 f8d0 	bl	800084c <__aeabi_ddiv>
 800f6ac:	f7f1 fa54 	bl	8000b58 <__aeabi_d2iz>
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	f7f0 ff37 	bl	8000524 <__aeabi_i2d>
 800f6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6ba:	f7f0 ff9d 	bl	80005f8 <__aeabi_dmul>
 800f6be:	4602      	mov	r2, r0
 800f6c0:	460b      	mov	r3, r1
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	4629      	mov	r1, r5
 800f6c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f6ca:	f7f0 fddd 	bl	8000288 <__aeabi_dsub>
 800f6ce:	f806 4b01 	strb.w	r4, [r6], #1
 800f6d2:	9d03      	ldr	r5, [sp, #12]
 800f6d4:	eba6 040a 	sub.w	r4, r6, sl
 800f6d8:	42a5      	cmp	r5, r4
 800f6da:	4602      	mov	r2, r0
 800f6dc:	460b      	mov	r3, r1
 800f6de:	d133      	bne.n	800f748 <_dtoa_r+0x6e0>
 800f6e0:	f7f0 fdd4 	bl	800028c <__adddf3>
 800f6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6e8:	4604      	mov	r4, r0
 800f6ea:	460d      	mov	r5, r1
 800f6ec:	f7f1 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 800f6f0:	b9c0      	cbnz	r0, 800f724 <_dtoa_r+0x6bc>
 800f6f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f1 f9e5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6fe:	b110      	cbz	r0, 800f706 <_dtoa_r+0x69e>
 800f700:	f018 0f01 	tst.w	r8, #1
 800f704:	d10e      	bne.n	800f724 <_dtoa_r+0x6bc>
 800f706:	9902      	ldr	r1, [sp, #8]
 800f708:	4648      	mov	r0, r9
 800f70a:	f000 fbbd 	bl	800fe88 <_Bfree>
 800f70e:	2300      	movs	r3, #0
 800f710:	7033      	strb	r3, [r6, #0]
 800f712:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f714:	3701      	adds	r7, #1
 800f716:	601f      	str	r7, [r3, #0]
 800f718:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	f000 824b 	beq.w	800fbb6 <_dtoa_r+0xb4e>
 800f720:	601e      	str	r6, [r3, #0]
 800f722:	e248      	b.n	800fbb6 <_dtoa_r+0xb4e>
 800f724:	46b8      	mov	r8, r7
 800f726:	4633      	mov	r3, r6
 800f728:	461e      	mov	r6, r3
 800f72a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f72e:	2a39      	cmp	r2, #57	@ 0x39
 800f730:	d106      	bne.n	800f740 <_dtoa_r+0x6d8>
 800f732:	459a      	cmp	sl, r3
 800f734:	d1f8      	bne.n	800f728 <_dtoa_r+0x6c0>
 800f736:	2230      	movs	r2, #48	@ 0x30
 800f738:	f108 0801 	add.w	r8, r8, #1
 800f73c:	f88a 2000 	strb.w	r2, [sl]
 800f740:	781a      	ldrb	r2, [r3, #0]
 800f742:	3201      	adds	r2, #1
 800f744:	701a      	strb	r2, [r3, #0]
 800f746:	e7a0      	b.n	800f68a <_dtoa_r+0x622>
 800f748:	4b6f      	ldr	r3, [pc, #444]	@ (800f908 <_dtoa_r+0x8a0>)
 800f74a:	2200      	movs	r2, #0
 800f74c:	f7f0 ff54 	bl	80005f8 <__aeabi_dmul>
 800f750:	2200      	movs	r2, #0
 800f752:	2300      	movs	r3, #0
 800f754:	4604      	mov	r4, r0
 800f756:	460d      	mov	r5, r1
 800f758:	f7f1 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	d09f      	beq.n	800f6a0 <_dtoa_r+0x638>
 800f760:	e7d1      	b.n	800f706 <_dtoa_r+0x69e>
 800f762:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f764:	2a00      	cmp	r2, #0
 800f766:	f000 80ea 	beq.w	800f93e <_dtoa_r+0x8d6>
 800f76a:	9a07      	ldr	r2, [sp, #28]
 800f76c:	2a01      	cmp	r2, #1
 800f76e:	f300 80cd 	bgt.w	800f90c <_dtoa_r+0x8a4>
 800f772:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f774:	2a00      	cmp	r2, #0
 800f776:	f000 80c1 	beq.w	800f8fc <_dtoa_r+0x894>
 800f77a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f77e:	9c08      	ldr	r4, [sp, #32]
 800f780:	9e00      	ldr	r6, [sp, #0]
 800f782:	9a00      	ldr	r2, [sp, #0]
 800f784:	441a      	add	r2, r3
 800f786:	9200      	str	r2, [sp, #0]
 800f788:	9a06      	ldr	r2, [sp, #24]
 800f78a:	2101      	movs	r1, #1
 800f78c:	441a      	add	r2, r3
 800f78e:	4648      	mov	r0, r9
 800f790:	9206      	str	r2, [sp, #24]
 800f792:	f000 fc77 	bl	8010084 <__i2b>
 800f796:	4605      	mov	r5, r0
 800f798:	b166      	cbz	r6, 800f7b4 <_dtoa_r+0x74c>
 800f79a:	9b06      	ldr	r3, [sp, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dd09      	ble.n	800f7b4 <_dtoa_r+0x74c>
 800f7a0:	42b3      	cmp	r3, r6
 800f7a2:	9a00      	ldr	r2, [sp, #0]
 800f7a4:	bfa8      	it	ge
 800f7a6:	4633      	movge	r3, r6
 800f7a8:	1ad2      	subs	r2, r2, r3
 800f7aa:	9200      	str	r2, [sp, #0]
 800f7ac:	9a06      	ldr	r2, [sp, #24]
 800f7ae:	1af6      	subs	r6, r6, r3
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	9306      	str	r3, [sp, #24]
 800f7b4:	9b08      	ldr	r3, [sp, #32]
 800f7b6:	b30b      	cbz	r3, 800f7fc <_dtoa_r+0x794>
 800f7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80c6 	beq.w	800f94c <_dtoa_r+0x8e4>
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	f000 80c0 	beq.w	800f946 <_dtoa_r+0x8de>
 800f7c6:	4629      	mov	r1, r5
 800f7c8:	4622      	mov	r2, r4
 800f7ca:	4648      	mov	r0, r9
 800f7cc:	f000 fd12 	bl	80101f4 <__pow5mult>
 800f7d0:	9a02      	ldr	r2, [sp, #8]
 800f7d2:	4601      	mov	r1, r0
 800f7d4:	4605      	mov	r5, r0
 800f7d6:	4648      	mov	r0, r9
 800f7d8:	f000 fc6a 	bl	80100b0 <__multiply>
 800f7dc:	9902      	ldr	r1, [sp, #8]
 800f7de:	4680      	mov	r8, r0
 800f7e0:	4648      	mov	r0, r9
 800f7e2:	f000 fb51 	bl	800fe88 <_Bfree>
 800f7e6:	9b08      	ldr	r3, [sp, #32]
 800f7e8:	1b1b      	subs	r3, r3, r4
 800f7ea:	9308      	str	r3, [sp, #32]
 800f7ec:	f000 80b1 	beq.w	800f952 <_dtoa_r+0x8ea>
 800f7f0:	9a08      	ldr	r2, [sp, #32]
 800f7f2:	4641      	mov	r1, r8
 800f7f4:	4648      	mov	r0, r9
 800f7f6:	f000 fcfd 	bl	80101f4 <__pow5mult>
 800f7fa:	9002      	str	r0, [sp, #8]
 800f7fc:	2101      	movs	r1, #1
 800f7fe:	4648      	mov	r0, r9
 800f800:	f000 fc40 	bl	8010084 <__i2b>
 800f804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f806:	4604      	mov	r4, r0
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 81d8 	beq.w	800fbbe <_dtoa_r+0xb56>
 800f80e:	461a      	mov	r2, r3
 800f810:	4601      	mov	r1, r0
 800f812:	4648      	mov	r0, r9
 800f814:	f000 fcee 	bl	80101f4 <__pow5mult>
 800f818:	9b07      	ldr	r3, [sp, #28]
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	4604      	mov	r4, r0
 800f81e:	f300 809f 	bgt.w	800f960 <_dtoa_r+0x8f8>
 800f822:	9b04      	ldr	r3, [sp, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	f040 8097 	bne.w	800f958 <_dtoa_r+0x8f0>
 800f82a:	9b05      	ldr	r3, [sp, #20]
 800f82c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f830:	2b00      	cmp	r3, #0
 800f832:	f040 8093 	bne.w	800f95c <_dtoa_r+0x8f4>
 800f836:	9b05      	ldr	r3, [sp, #20]
 800f838:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f83c:	0d1b      	lsrs	r3, r3, #20
 800f83e:	051b      	lsls	r3, r3, #20
 800f840:	b133      	cbz	r3, 800f850 <_dtoa_r+0x7e8>
 800f842:	9b00      	ldr	r3, [sp, #0]
 800f844:	3301      	adds	r3, #1
 800f846:	9300      	str	r3, [sp, #0]
 800f848:	9b06      	ldr	r3, [sp, #24]
 800f84a:	3301      	adds	r3, #1
 800f84c:	9306      	str	r3, [sp, #24]
 800f84e:	2301      	movs	r3, #1
 800f850:	9308      	str	r3, [sp, #32]
 800f852:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 81b8 	beq.w	800fbca <_dtoa_r+0xb62>
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f860:	6918      	ldr	r0, [r3, #16]
 800f862:	f000 fbc3 	bl	800ffec <__hi0bits>
 800f866:	f1c0 0020 	rsb	r0, r0, #32
 800f86a:	9b06      	ldr	r3, [sp, #24]
 800f86c:	4418      	add	r0, r3
 800f86e:	f010 001f 	ands.w	r0, r0, #31
 800f872:	f000 8082 	beq.w	800f97a <_dtoa_r+0x912>
 800f876:	f1c0 0320 	rsb	r3, r0, #32
 800f87a:	2b04      	cmp	r3, #4
 800f87c:	dd73      	ble.n	800f966 <_dtoa_r+0x8fe>
 800f87e:	9b00      	ldr	r3, [sp, #0]
 800f880:	f1c0 001c 	rsb	r0, r0, #28
 800f884:	4403      	add	r3, r0
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	9b06      	ldr	r3, [sp, #24]
 800f88a:	4403      	add	r3, r0
 800f88c:	4406      	add	r6, r0
 800f88e:	9306      	str	r3, [sp, #24]
 800f890:	9b00      	ldr	r3, [sp, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	dd05      	ble.n	800f8a2 <_dtoa_r+0x83a>
 800f896:	9902      	ldr	r1, [sp, #8]
 800f898:	461a      	mov	r2, r3
 800f89a:	4648      	mov	r0, r9
 800f89c:	f000 fd04 	bl	80102a8 <__lshift>
 800f8a0:	9002      	str	r0, [sp, #8]
 800f8a2:	9b06      	ldr	r3, [sp, #24]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	dd05      	ble.n	800f8b4 <_dtoa_r+0x84c>
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4648      	mov	r0, r9
 800f8ae:	f000 fcfb 	bl	80102a8 <__lshift>
 800f8b2:	4604      	mov	r4, r0
 800f8b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d061      	beq.n	800f97e <_dtoa_r+0x916>
 800f8ba:	9802      	ldr	r0, [sp, #8]
 800f8bc:	4621      	mov	r1, r4
 800f8be:	f000 fd5f 	bl	8010380 <__mcmp>
 800f8c2:	2800      	cmp	r0, #0
 800f8c4:	da5b      	bge.n	800f97e <_dtoa_r+0x916>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	9902      	ldr	r1, [sp, #8]
 800f8ca:	220a      	movs	r2, #10
 800f8cc:	4648      	mov	r0, r9
 800f8ce:	f000 fafd 	bl	800fecc <__multadd>
 800f8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8d4:	9002      	str	r0, [sp, #8]
 800f8d6:	f107 38ff 	add.w	r8, r7, #4294967295
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 8177 	beq.w	800fbce <_dtoa_r+0xb66>
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	220a      	movs	r2, #10
 800f8e6:	4648      	mov	r0, r9
 800f8e8:	f000 faf0 	bl	800fecc <__multadd>
 800f8ec:	f1bb 0f00 	cmp.w	fp, #0
 800f8f0:	4605      	mov	r5, r0
 800f8f2:	dc6f      	bgt.n	800f9d4 <_dtoa_r+0x96c>
 800f8f4:	9b07      	ldr	r3, [sp, #28]
 800f8f6:	2b02      	cmp	r3, #2
 800f8f8:	dc49      	bgt.n	800f98e <_dtoa_r+0x926>
 800f8fa:	e06b      	b.n	800f9d4 <_dtoa_r+0x96c>
 800f8fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f8fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f902:	e73c      	b.n	800f77e <_dtoa_r+0x716>
 800f904:	3fe00000 	.word	0x3fe00000
 800f908:	40240000 	.word	0x40240000
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	1e5c      	subs	r4, r3, #1
 800f910:	9b08      	ldr	r3, [sp, #32]
 800f912:	42a3      	cmp	r3, r4
 800f914:	db09      	blt.n	800f92a <_dtoa_r+0x8c2>
 800f916:	1b1c      	subs	r4, r3, r4
 800f918:	9b03      	ldr	r3, [sp, #12]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f6bf af30 	bge.w	800f780 <_dtoa_r+0x718>
 800f920:	9b00      	ldr	r3, [sp, #0]
 800f922:	9a03      	ldr	r2, [sp, #12]
 800f924:	1a9e      	subs	r6, r3, r2
 800f926:	2300      	movs	r3, #0
 800f928:	e72b      	b.n	800f782 <_dtoa_r+0x71a>
 800f92a:	9b08      	ldr	r3, [sp, #32]
 800f92c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f92e:	9408      	str	r4, [sp, #32]
 800f930:	1ae3      	subs	r3, r4, r3
 800f932:	441a      	add	r2, r3
 800f934:	9e00      	ldr	r6, [sp, #0]
 800f936:	9b03      	ldr	r3, [sp, #12]
 800f938:	920d      	str	r2, [sp, #52]	@ 0x34
 800f93a:	2400      	movs	r4, #0
 800f93c:	e721      	b.n	800f782 <_dtoa_r+0x71a>
 800f93e:	9c08      	ldr	r4, [sp, #32]
 800f940:	9e00      	ldr	r6, [sp, #0]
 800f942:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f944:	e728      	b.n	800f798 <_dtoa_r+0x730>
 800f946:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f94a:	e751      	b.n	800f7f0 <_dtoa_r+0x788>
 800f94c:	9a08      	ldr	r2, [sp, #32]
 800f94e:	9902      	ldr	r1, [sp, #8]
 800f950:	e750      	b.n	800f7f4 <_dtoa_r+0x78c>
 800f952:	f8cd 8008 	str.w	r8, [sp, #8]
 800f956:	e751      	b.n	800f7fc <_dtoa_r+0x794>
 800f958:	2300      	movs	r3, #0
 800f95a:	e779      	b.n	800f850 <_dtoa_r+0x7e8>
 800f95c:	9b04      	ldr	r3, [sp, #16]
 800f95e:	e777      	b.n	800f850 <_dtoa_r+0x7e8>
 800f960:	2300      	movs	r3, #0
 800f962:	9308      	str	r3, [sp, #32]
 800f964:	e779      	b.n	800f85a <_dtoa_r+0x7f2>
 800f966:	d093      	beq.n	800f890 <_dtoa_r+0x828>
 800f968:	9a00      	ldr	r2, [sp, #0]
 800f96a:	331c      	adds	r3, #28
 800f96c:	441a      	add	r2, r3
 800f96e:	9200      	str	r2, [sp, #0]
 800f970:	9a06      	ldr	r2, [sp, #24]
 800f972:	441a      	add	r2, r3
 800f974:	441e      	add	r6, r3
 800f976:	9206      	str	r2, [sp, #24]
 800f978:	e78a      	b.n	800f890 <_dtoa_r+0x828>
 800f97a:	4603      	mov	r3, r0
 800f97c:	e7f4      	b.n	800f968 <_dtoa_r+0x900>
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	2b00      	cmp	r3, #0
 800f982:	46b8      	mov	r8, r7
 800f984:	dc20      	bgt.n	800f9c8 <_dtoa_r+0x960>
 800f986:	469b      	mov	fp, r3
 800f988:	9b07      	ldr	r3, [sp, #28]
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	dd1e      	ble.n	800f9cc <_dtoa_r+0x964>
 800f98e:	f1bb 0f00 	cmp.w	fp, #0
 800f992:	f47f adb1 	bne.w	800f4f8 <_dtoa_r+0x490>
 800f996:	4621      	mov	r1, r4
 800f998:	465b      	mov	r3, fp
 800f99a:	2205      	movs	r2, #5
 800f99c:	4648      	mov	r0, r9
 800f99e:	f000 fa95 	bl	800fecc <__multadd>
 800f9a2:	4601      	mov	r1, r0
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	9802      	ldr	r0, [sp, #8]
 800f9a8:	f000 fcea 	bl	8010380 <__mcmp>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	f77f ada3 	ble.w	800f4f8 <_dtoa_r+0x490>
 800f9b2:	4656      	mov	r6, sl
 800f9b4:	2331      	movs	r3, #49	@ 0x31
 800f9b6:	f806 3b01 	strb.w	r3, [r6], #1
 800f9ba:	f108 0801 	add.w	r8, r8, #1
 800f9be:	e59f      	b.n	800f500 <_dtoa_r+0x498>
 800f9c0:	9c03      	ldr	r4, [sp, #12]
 800f9c2:	46b8      	mov	r8, r7
 800f9c4:	4625      	mov	r5, r4
 800f9c6:	e7f4      	b.n	800f9b2 <_dtoa_r+0x94a>
 800f9c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	f000 8101 	beq.w	800fbd6 <_dtoa_r+0xb6e>
 800f9d4:	2e00      	cmp	r6, #0
 800f9d6:	dd05      	ble.n	800f9e4 <_dtoa_r+0x97c>
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4632      	mov	r2, r6
 800f9dc:	4648      	mov	r0, r9
 800f9de:	f000 fc63 	bl	80102a8 <__lshift>
 800f9e2:	4605      	mov	r5, r0
 800f9e4:	9b08      	ldr	r3, [sp, #32]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d05c      	beq.n	800faa4 <_dtoa_r+0xa3c>
 800f9ea:	6869      	ldr	r1, [r5, #4]
 800f9ec:	4648      	mov	r0, r9
 800f9ee:	f000 fa0b 	bl	800fe08 <_Balloc>
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	b928      	cbnz	r0, 800fa02 <_dtoa_r+0x99a>
 800f9f6:	4b82      	ldr	r3, [pc, #520]	@ (800fc00 <_dtoa_r+0xb98>)
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f9fe:	f7ff bb4a 	b.w	800f096 <_dtoa_r+0x2e>
 800fa02:	692a      	ldr	r2, [r5, #16]
 800fa04:	3202      	adds	r2, #2
 800fa06:	0092      	lsls	r2, r2, #2
 800fa08:	f105 010c 	add.w	r1, r5, #12
 800fa0c:	300c      	adds	r0, #12
 800fa0e:	f7ff fa8c 	bl	800ef2a <memcpy>
 800fa12:	2201      	movs	r2, #1
 800fa14:	4631      	mov	r1, r6
 800fa16:	4648      	mov	r0, r9
 800fa18:	f000 fc46 	bl	80102a8 <__lshift>
 800fa1c:	f10a 0301 	add.w	r3, sl, #1
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	eb0a 030b 	add.w	r3, sl, fp
 800fa26:	9308      	str	r3, [sp, #32]
 800fa28:	9b04      	ldr	r3, [sp, #16]
 800fa2a:	f003 0301 	and.w	r3, r3, #1
 800fa2e:	462f      	mov	r7, r5
 800fa30:	9306      	str	r3, [sp, #24]
 800fa32:	4605      	mov	r5, r0
 800fa34:	9b00      	ldr	r3, [sp, #0]
 800fa36:	9802      	ldr	r0, [sp, #8]
 800fa38:	4621      	mov	r1, r4
 800fa3a:	f103 3bff 	add.w	fp, r3, #4294967295
 800fa3e:	f7ff fa89 	bl	800ef54 <quorem>
 800fa42:	4603      	mov	r3, r0
 800fa44:	3330      	adds	r3, #48	@ 0x30
 800fa46:	9003      	str	r0, [sp, #12]
 800fa48:	4639      	mov	r1, r7
 800fa4a:	9802      	ldr	r0, [sp, #8]
 800fa4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa4e:	f000 fc97 	bl	8010380 <__mcmp>
 800fa52:	462a      	mov	r2, r5
 800fa54:	9004      	str	r0, [sp, #16]
 800fa56:	4621      	mov	r1, r4
 800fa58:	4648      	mov	r0, r9
 800fa5a:	f000 fcad 	bl	80103b8 <__mdiff>
 800fa5e:	68c2      	ldr	r2, [r0, #12]
 800fa60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa62:	4606      	mov	r6, r0
 800fa64:	bb02      	cbnz	r2, 800faa8 <_dtoa_r+0xa40>
 800fa66:	4601      	mov	r1, r0
 800fa68:	9802      	ldr	r0, [sp, #8]
 800fa6a:	f000 fc89 	bl	8010380 <__mcmp>
 800fa6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa70:	4602      	mov	r2, r0
 800fa72:	4631      	mov	r1, r6
 800fa74:	4648      	mov	r0, r9
 800fa76:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa78:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa7a:	f000 fa05 	bl	800fe88 <_Bfree>
 800fa7e:	9b07      	ldr	r3, [sp, #28]
 800fa80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa82:	9e00      	ldr	r6, [sp, #0]
 800fa84:	ea42 0103 	orr.w	r1, r2, r3
 800fa88:	9b06      	ldr	r3, [sp, #24]
 800fa8a:	4319      	orrs	r1, r3
 800fa8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa8e:	d10d      	bne.n	800faac <_dtoa_r+0xa44>
 800fa90:	2b39      	cmp	r3, #57	@ 0x39
 800fa92:	d027      	beq.n	800fae4 <_dtoa_r+0xa7c>
 800fa94:	9a04      	ldr	r2, [sp, #16]
 800fa96:	2a00      	cmp	r2, #0
 800fa98:	dd01      	ble.n	800fa9e <_dtoa_r+0xa36>
 800fa9a:	9b03      	ldr	r3, [sp, #12]
 800fa9c:	3331      	adds	r3, #49	@ 0x31
 800fa9e:	f88b 3000 	strb.w	r3, [fp]
 800faa2:	e52e      	b.n	800f502 <_dtoa_r+0x49a>
 800faa4:	4628      	mov	r0, r5
 800faa6:	e7b9      	b.n	800fa1c <_dtoa_r+0x9b4>
 800faa8:	2201      	movs	r2, #1
 800faaa:	e7e2      	b.n	800fa72 <_dtoa_r+0xa0a>
 800faac:	9904      	ldr	r1, [sp, #16]
 800faae:	2900      	cmp	r1, #0
 800fab0:	db04      	blt.n	800fabc <_dtoa_r+0xa54>
 800fab2:	9807      	ldr	r0, [sp, #28]
 800fab4:	4301      	orrs	r1, r0
 800fab6:	9806      	ldr	r0, [sp, #24]
 800fab8:	4301      	orrs	r1, r0
 800faba:	d120      	bne.n	800fafe <_dtoa_r+0xa96>
 800fabc:	2a00      	cmp	r2, #0
 800fabe:	ddee      	ble.n	800fa9e <_dtoa_r+0xa36>
 800fac0:	9902      	ldr	r1, [sp, #8]
 800fac2:	9300      	str	r3, [sp, #0]
 800fac4:	2201      	movs	r2, #1
 800fac6:	4648      	mov	r0, r9
 800fac8:	f000 fbee 	bl	80102a8 <__lshift>
 800facc:	4621      	mov	r1, r4
 800face:	9002      	str	r0, [sp, #8]
 800fad0:	f000 fc56 	bl	8010380 <__mcmp>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	9b00      	ldr	r3, [sp, #0]
 800fad8:	dc02      	bgt.n	800fae0 <_dtoa_r+0xa78>
 800fada:	d1e0      	bne.n	800fa9e <_dtoa_r+0xa36>
 800fadc:	07da      	lsls	r2, r3, #31
 800fade:	d5de      	bpl.n	800fa9e <_dtoa_r+0xa36>
 800fae0:	2b39      	cmp	r3, #57	@ 0x39
 800fae2:	d1da      	bne.n	800fa9a <_dtoa_r+0xa32>
 800fae4:	2339      	movs	r3, #57	@ 0x39
 800fae6:	f88b 3000 	strb.w	r3, [fp]
 800faea:	4633      	mov	r3, r6
 800faec:	461e      	mov	r6, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800faf4:	2a39      	cmp	r2, #57	@ 0x39
 800faf6:	d04e      	beq.n	800fb96 <_dtoa_r+0xb2e>
 800faf8:	3201      	adds	r2, #1
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	e501      	b.n	800f502 <_dtoa_r+0x49a>
 800fafe:	2a00      	cmp	r2, #0
 800fb00:	dd03      	ble.n	800fb0a <_dtoa_r+0xaa2>
 800fb02:	2b39      	cmp	r3, #57	@ 0x39
 800fb04:	d0ee      	beq.n	800fae4 <_dtoa_r+0xa7c>
 800fb06:	3301      	adds	r3, #1
 800fb08:	e7c9      	b.n	800fa9e <_dtoa_r+0xa36>
 800fb0a:	9a00      	ldr	r2, [sp, #0]
 800fb0c:	9908      	ldr	r1, [sp, #32]
 800fb0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fb12:	428a      	cmp	r2, r1
 800fb14:	d028      	beq.n	800fb68 <_dtoa_r+0xb00>
 800fb16:	9902      	ldr	r1, [sp, #8]
 800fb18:	2300      	movs	r3, #0
 800fb1a:	220a      	movs	r2, #10
 800fb1c:	4648      	mov	r0, r9
 800fb1e:	f000 f9d5 	bl	800fecc <__multadd>
 800fb22:	42af      	cmp	r7, r5
 800fb24:	9002      	str	r0, [sp, #8]
 800fb26:	f04f 0300 	mov.w	r3, #0
 800fb2a:	f04f 020a 	mov.w	r2, #10
 800fb2e:	4639      	mov	r1, r7
 800fb30:	4648      	mov	r0, r9
 800fb32:	d107      	bne.n	800fb44 <_dtoa_r+0xadc>
 800fb34:	f000 f9ca 	bl	800fecc <__multadd>
 800fb38:	4607      	mov	r7, r0
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	9b00      	ldr	r3, [sp, #0]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	e777      	b.n	800fa34 <_dtoa_r+0x9cc>
 800fb44:	f000 f9c2 	bl	800fecc <__multadd>
 800fb48:	4629      	mov	r1, r5
 800fb4a:	4607      	mov	r7, r0
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	220a      	movs	r2, #10
 800fb50:	4648      	mov	r0, r9
 800fb52:	f000 f9bb 	bl	800fecc <__multadd>
 800fb56:	4605      	mov	r5, r0
 800fb58:	e7f0      	b.n	800fb3c <_dtoa_r+0xad4>
 800fb5a:	f1bb 0f00 	cmp.w	fp, #0
 800fb5e:	bfcc      	ite	gt
 800fb60:	465e      	movgt	r6, fp
 800fb62:	2601      	movle	r6, #1
 800fb64:	4456      	add	r6, sl
 800fb66:	2700      	movs	r7, #0
 800fb68:	9902      	ldr	r1, [sp, #8]
 800fb6a:	9300      	str	r3, [sp, #0]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	4648      	mov	r0, r9
 800fb70:	f000 fb9a 	bl	80102a8 <__lshift>
 800fb74:	4621      	mov	r1, r4
 800fb76:	9002      	str	r0, [sp, #8]
 800fb78:	f000 fc02 	bl	8010380 <__mcmp>
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	dcb4      	bgt.n	800faea <_dtoa_r+0xa82>
 800fb80:	d102      	bne.n	800fb88 <_dtoa_r+0xb20>
 800fb82:	9b00      	ldr	r3, [sp, #0]
 800fb84:	07db      	lsls	r3, r3, #31
 800fb86:	d4b0      	bmi.n	800faea <_dtoa_r+0xa82>
 800fb88:	4633      	mov	r3, r6
 800fb8a:	461e      	mov	r6, r3
 800fb8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb90:	2a30      	cmp	r2, #48	@ 0x30
 800fb92:	d0fa      	beq.n	800fb8a <_dtoa_r+0xb22>
 800fb94:	e4b5      	b.n	800f502 <_dtoa_r+0x49a>
 800fb96:	459a      	cmp	sl, r3
 800fb98:	d1a8      	bne.n	800faec <_dtoa_r+0xa84>
 800fb9a:	2331      	movs	r3, #49	@ 0x31
 800fb9c:	f108 0801 	add.w	r8, r8, #1
 800fba0:	f88a 3000 	strb.w	r3, [sl]
 800fba4:	e4ad      	b.n	800f502 <_dtoa_r+0x49a>
 800fba6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fba8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800fc04 <_dtoa_r+0xb9c>
 800fbac:	b11b      	cbz	r3, 800fbb6 <_dtoa_r+0xb4e>
 800fbae:	f10a 0308 	add.w	r3, sl, #8
 800fbb2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fbb4:	6013      	str	r3, [r2, #0]
 800fbb6:	4650      	mov	r0, sl
 800fbb8:	b017      	add	sp, #92	@ 0x5c
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	9b07      	ldr	r3, [sp, #28]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	f77f ae2e 	ble.w	800f822 <_dtoa_r+0x7ba>
 800fbc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fbc8:	9308      	str	r3, [sp, #32]
 800fbca:	2001      	movs	r0, #1
 800fbcc:	e64d      	b.n	800f86a <_dtoa_r+0x802>
 800fbce:	f1bb 0f00 	cmp.w	fp, #0
 800fbd2:	f77f aed9 	ble.w	800f988 <_dtoa_r+0x920>
 800fbd6:	4656      	mov	r6, sl
 800fbd8:	9802      	ldr	r0, [sp, #8]
 800fbda:	4621      	mov	r1, r4
 800fbdc:	f7ff f9ba 	bl	800ef54 <quorem>
 800fbe0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800fbe4:	f806 3b01 	strb.w	r3, [r6], #1
 800fbe8:	eba6 020a 	sub.w	r2, r6, sl
 800fbec:	4593      	cmp	fp, r2
 800fbee:	ddb4      	ble.n	800fb5a <_dtoa_r+0xaf2>
 800fbf0:	9902      	ldr	r1, [sp, #8]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	220a      	movs	r2, #10
 800fbf6:	4648      	mov	r0, r9
 800fbf8:	f000 f968 	bl	800fecc <__multadd>
 800fbfc:	9002      	str	r0, [sp, #8]
 800fbfe:	e7eb      	b.n	800fbd8 <_dtoa_r+0xb70>
 800fc00:	08012a19 	.word	0x08012a19
 800fc04:	0801299d 	.word	0x0801299d

0800fc08 <_free_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	2900      	cmp	r1, #0
 800fc0e:	d041      	beq.n	800fc94 <_free_r+0x8c>
 800fc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc14:	1f0c      	subs	r4, r1, #4
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	bfb8      	it	lt
 800fc1a:	18e4      	addlt	r4, r4, r3
 800fc1c:	f000 f8e8 	bl	800fdf0 <__malloc_lock>
 800fc20:	4a1d      	ldr	r2, [pc, #116]	@ (800fc98 <_free_r+0x90>)
 800fc22:	6813      	ldr	r3, [r2, #0]
 800fc24:	b933      	cbnz	r3, 800fc34 <_free_r+0x2c>
 800fc26:	6063      	str	r3, [r4, #4]
 800fc28:	6014      	str	r4, [r2, #0]
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc30:	f000 b8e4 	b.w	800fdfc <__malloc_unlock>
 800fc34:	42a3      	cmp	r3, r4
 800fc36:	d908      	bls.n	800fc4a <_free_r+0x42>
 800fc38:	6820      	ldr	r0, [r4, #0]
 800fc3a:	1821      	adds	r1, r4, r0
 800fc3c:	428b      	cmp	r3, r1
 800fc3e:	bf01      	itttt	eq
 800fc40:	6819      	ldreq	r1, [r3, #0]
 800fc42:	685b      	ldreq	r3, [r3, #4]
 800fc44:	1809      	addeq	r1, r1, r0
 800fc46:	6021      	streq	r1, [r4, #0]
 800fc48:	e7ed      	b.n	800fc26 <_free_r+0x1e>
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	b10b      	cbz	r3, 800fc54 <_free_r+0x4c>
 800fc50:	42a3      	cmp	r3, r4
 800fc52:	d9fa      	bls.n	800fc4a <_free_r+0x42>
 800fc54:	6811      	ldr	r1, [r2, #0]
 800fc56:	1850      	adds	r0, r2, r1
 800fc58:	42a0      	cmp	r0, r4
 800fc5a:	d10b      	bne.n	800fc74 <_free_r+0x6c>
 800fc5c:	6820      	ldr	r0, [r4, #0]
 800fc5e:	4401      	add	r1, r0
 800fc60:	1850      	adds	r0, r2, r1
 800fc62:	4283      	cmp	r3, r0
 800fc64:	6011      	str	r1, [r2, #0]
 800fc66:	d1e0      	bne.n	800fc2a <_free_r+0x22>
 800fc68:	6818      	ldr	r0, [r3, #0]
 800fc6a:	685b      	ldr	r3, [r3, #4]
 800fc6c:	6053      	str	r3, [r2, #4]
 800fc6e:	4408      	add	r0, r1
 800fc70:	6010      	str	r0, [r2, #0]
 800fc72:	e7da      	b.n	800fc2a <_free_r+0x22>
 800fc74:	d902      	bls.n	800fc7c <_free_r+0x74>
 800fc76:	230c      	movs	r3, #12
 800fc78:	602b      	str	r3, [r5, #0]
 800fc7a:	e7d6      	b.n	800fc2a <_free_r+0x22>
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	1821      	adds	r1, r4, r0
 800fc80:	428b      	cmp	r3, r1
 800fc82:	bf04      	itt	eq
 800fc84:	6819      	ldreq	r1, [r3, #0]
 800fc86:	685b      	ldreq	r3, [r3, #4]
 800fc88:	6063      	str	r3, [r4, #4]
 800fc8a:	bf04      	itt	eq
 800fc8c:	1809      	addeq	r1, r1, r0
 800fc8e:	6021      	streq	r1, [r4, #0]
 800fc90:	6054      	str	r4, [r2, #4]
 800fc92:	e7ca      	b.n	800fc2a <_free_r+0x22>
 800fc94:	bd38      	pop	{r3, r4, r5, pc}
 800fc96:	bf00      	nop
 800fc98:	2000270c 	.word	0x2000270c

0800fc9c <malloc>:
 800fc9c:	4b02      	ldr	r3, [pc, #8]	@ (800fca8 <malloc+0xc>)
 800fc9e:	4601      	mov	r1, r0
 800fca0:	6818      	ldr	r0, [r3, #0]
 800fca2:	f000 b825 	b.w	800fcf0 <_malloc_r>
 800fca6:	bf00      	nop
 800fca8:	20000118 	.word	0x20000118

0800fcac <sbrk_aligned>:
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	4e0f      	ldr	r6, [pc, #60]	@ (800fcec <sbrk_aligned+0x40>)
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	6831      	ldr	r1, [r6, #0]
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	b911      	cbnz	r1, 800fcbe <sbrk_aligned+0x12>
 800fcb8:	f001 ffca 	bl	8011c50 <_sbrk_r>
 800fcbc:	6030      	str	r0, [r6, #0]
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f001 ffc5 	bl	8011c50 <_sbrk_r>
 800fcc6:	1c43      	adds	r3, r0, #1
 800fcc8:	d103      	bne.n	800fcd2 <sbrk_aligned+0x26>
 800fcca:	f04f 34ff 	mov.w	r4, #4294967295
 800fcce:	4620      	mov	r0, r4
 800fcd0:	bd70      	pop	{r4, r5, r6, pc}
 800fcd2:	1cc4      	adds	r4, r0, #3
 800fcd4:	f024 0403 	bic.w	r4, r4, #3
 800fcd8:	42a0      	cmp	r0, r4
 800fcda:	d0f8      	beq.n	800fcce <sbrk_aligned+0x22>
 800fcdc:	1a21      	subs	r1, r4, r0
 800fcde:	4628      	mov	r0, r5
 800fce0:	f001 ffb6 	bl	8011c50 <_sbrk_r>
 800fce4:	3001      	adds	r0, #1
 800fce6:	d1f2      	bne.n	800fcce <sbrk_aligned+0x22>
 800fce8:	e7ef      	b.n	800fcca <sbrk_aligned+0x1e>
 800fcea:	bf00      	nop
 800fcec:	20002708 	.word	0x20002708

0800fcf0 <_malloc_r>:
 800fcf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf4:	1ccd      	adds	r5, r1, #3
 800fcf6:	f025 0503 	bic.w	r5, r5, #3
 800fcfa:	3508      	adds	r5, #8
 800fcfc:	2d0c      	cmp	r5, #12
 800fcfe:	bf38      	it	cc
 800fd00:	250c      	movcc	r5, #12
 800fd02:	2d00      	cmp	r5, #0
 800fd04:	4606      	mov	r6, r0
 800fd06:	db01      	blt.n	800fd0c <_malloc_r+0x1c>
 800fd08:	42a9      	cmp	r1, r5
 800fd0a:	d904      	bls.n	800fd16 <_malloc_r+0x26>
 800fd0c:	230c      	movs	r3, #12
 800fd0e:	6033      	str	r3, [r6, #0]
 800fd10:	2000      	movs	r0, #0
 800fd12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdec <_malloc_r+0xfc>
 800fd1a:	f000 f869 	bl	800fdf0 <__malloc_lock>
 800fd1e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd22:	461c      	mov	r4, r3
 800fd24:	bb44      	cbnz	r4, 800fd78 <_malloc_r+0x88>
 800fd26:	4629      	mov	r1, r5
 800fd28:	4630      	mov	r0, r6
 800fd2a:	f7ff ffbf 	bl	800fcac <sbrk_aligned>
 800fd2e:	1c43      	adds	r3, r0, #1
 800fd30:	4604      	mov	r4, r0
 800fd32:	d158      	bne.n	800fde6 <_malloc_r+0xf6>
 800fd34:	f8d8 4000 	ldr.w	r4, [r8]
 800fd38:	4627      	mov	r7, r4
 800fd3a:	2f00      	cmp	r7, #0
 800fd3c:	d143      	bne.n	800fdc6 <_malloc_r+0xd6>
 800fd3e:	2c00      	cmp	r4, #0
 800fd40:	d04b      	beq.n	800fdda <_malloc_r+0xea>
 800fd42:	6823      	ldr	r3, [r4, #0]
 800fd44:	4639      	mov	r1, r7
 800fd46:	4630      	mov	r0, r6
 800fd48:	eb04 0903 	add.w	r9, r4, r3
 800fd4c:	f001 ff80 	bl	8011c50 <_sbrk_r>
 800fd50:	4581      	cmp	r9, r0
 800fd52:	d142      	bne.n	800fdda <_malloc_r+0xea>
 800fd54:	6821      	ldr	r1, [r4, #0]
 800fd56:	1a6d      	subs	r5, r5, r1
 800fd58:	4629      	mov	r1, r5
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7ff ffa6 	bl	800fcac <sbrk_aligned>
 800fd60:	3001      	adds	r0, #1
 800fd62:	d03a      	beq.n	800fdda <_malloc_r+0xea>
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	442b      	add	r3, r5
 800fd68:	6023      	str	r3, [r4, #0]
 800fd6a:	f8d8 3000 	ldr.w	r3, [r8]
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	bb62      	cbnz	r2, 800fdcc <_malloc_r+0xdc>
 800fd72:	f8c8 7000 	str.w	r7, [r8]
 800fd76:	e00f      	b.n	800fd98 <_malloc_r+0xa8>
 800fd78:	6822      	ldr	r2, [r4, #0]
 800fd7a:	1b52      	subs	r2, r2, r5
 800fd7c:	d420      	bmi.n	800fdc0 <_malloc_r+0xd0>
 800fd7e:	2a0b      	cmp	r2, #11
 800fd80:	d917      	bls.n	800fdb2 <_malloc_r+0xc2>
 800fd82:	1961      	adds	r1, r4, r5
 800fd84:	42a3      	cmp	r3, r4
 800fd86:	6025      	str	r5, [r4, #0]
 800fd88:	bf18      	it	ne
 800fd8a:	6059      	strne	r1, [r3, #4]
 800fd8c:	6863      	ldr	r3, [r4, #4]
 800fd8e:	bf08      	it	eq
 800fd90:	f8c8 1000 	streq.w	r1, [r8]
 800fd94:	5162      	str	r2, [r4, r5]
 800fd96:	604b      	str	r3, [r1, #4]
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f000 f82f 	bl	800fdfc <__malloc_unlock>
 800fd9e:	f104 000b 	add.w	r0, r4, #11
 800fda2:	1d23      	adds	r3, r4, #4
 800fda4:	f020 0007 	bic.w	r0, r0, #7
 800fda8:	1ac2      	subs	r2, r0, r3
 800fdaa:	bf1c      	itt	ne
 800fdac:	1a1b      	subne	r3, r3, r0
 800fdae:	50a3      	strne	r3, [r4, r2]
 800fdb0:	e7af      	b.n	800fd12 <_malloc_r+0x22>
 800fdb2:	6862      	ldr	r2, [r4, #4]
 800fdb4:	42a3      	cmp	r3, r4
 800fdb6:	bf0c      	ite	eq
 800fdb8:	f8c8 2000 	streq.w	r2, [r8]
 800fdbc:	605a      	strne	r2, [r3, #4]
 800fdbe:	e7eb      	b.n	800fd98 <_malloc_r+0xa8>
 800fdc0:	4623      	mov	r3, r4
 800fdc2:	6864      	ldr	r4, [r4, #4]
 800fdc4:	e7ae      	b.n	800fd24 <_malloc_r+0x34>
 800fdc6:	463c      	mov	r4, r7
 800fdc8:	687f      	ldr	r7, [r7, #4]
 800fdca:	e7b6      	b.n	800fd3a <_malloc_r+0x4a>
 800fdcc:	461a      	mov	r2, r3
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	42a3      	cmp	r3, r4
 800fdd2:	d1fb      	bne.n	800fdcc <_malloc_r+0xdc>
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	6053      	str	r3, [r2, #4]
 800fdd8:	e7de      	b.n	800fd98 <_malloc_r+0xa8>
 800fdda:	230c      	movs	r3, #12
 800fddc:	6033      	str	r3, [r6, #0]
 800fdde:	4630      	mov	r0, r6
 800fde0:	f000 f80c 	bl	800fdfc <__malloc_unlock>
 800fde4:	e794      	b.n	800fd10 <_malloc_r+0x20>
 800fde6:	6005      	str	r5, [r0, #0]
 800fde8:	e7d6      	b.n	800fd98 <_malloc_r+0xa8>
 800fdea:	bf00      	nop
 800fdec:	2000270c 	.word	0x2000270c

0800fdf0 <__malloc_lock>:
 800fdf0:	4801      	ldr	r0, [pc, #4]	@ (800fdf8 <__malloc_lock+0x8>)
 800fdf2:	f7ff b898 	b.w	800ef26 <__retarget_lock_acquire_recursive>
 800fdf6:	bf00      	nop
 800fdf8:	20002704 	.word	0x20002704

0800fdfc <__malloc_unlock>:
 800fdfc:	4801      	ldr	r0, [pc, #4]	@ (800fe04 <__malloc_unlock+0x8>)
 800fdfe:	f7ff b893 	b.w	800ef28 <__retarget_lock_release_recursive>
 800fe02:	bf00      	nop
 800fe04:	20002704 	.word	0x20002704

0800fe08 <_Balloc>:
 800fe08:	b570      	push	{r4, r5, r6, lr}
 800fe0a:	69c6      	ldr	r6, [r0, #28]
 800fe0c:	4604      	mov	r4, r0
 800fe0e:	460d      	mov	r5, r1
 800fe10:	b976      	cbnz	r6, 800fe30 <_Balloc+0x28>
 800fe12:	2010      	movs	r0, #16
 800fe14:	f7ff ff42 	bl	800fc9c <malloc>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	61e0      	str	r0, [r4, #28]
 800fe1c:	b920      	cbnz	r0, 800fe28 <_Balloc+0x20>
 800fe1e:	4b18      	ldr	r3, [pc, #96]	@ (800fe80 <_Balloc+0x78>)
 800fe20:	4818      	ldr	r0, [pc, #96]	@ (800fe84 <_Balloc+0x7c>)
 800fe22:	216b      	movs	r1, #107	@ 0x6b
 800fe24:	f001 ff2c 	bl	8011c80 <__assert_func>
 800fe28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe2c:	6006      	str	r6, [r0, #0]
 800fe2e:	60c6      	str	r6, [r0, #12]
 800fe30:	69e6      	ldr	r6, [r4, #28]
 800fe32:	68f3      	ldr	r3, [r6, #12]
 800fe34:	b183      	cbz	r3, 800fe58 <_Balloc+0x50>
 800fe36:	69e3      	ldr	r3, [r4, #28]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe3e:	b9b8      	cbnz	r0, 800fe70 <_Balloc+0x68>
 800fe40:	2101      	movs	r1, #1
 800fe42:	fa01 f605 	lsl.w	r6, r1, r5
 800fe46:	1d72      	adds	r2, r6, #5
 800fe48:	0092      	lsls	r2, r2, #2
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f001 ff36 	bl	8011cbc <_calloc_r>
 800fe50:	b160      	cbz	r0, 800fe6c <_Balloc+0x64>
 800fe52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe56:	e00e      	b.n	800fe76 <_Balloc+0x6e>
 800fe58:	2221      	movs	r2, #33	@ 0x21
 800fe5a:	2104      	movs	r1, #4
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f001 ff2d 	bl	8011cbc <_calloc_r>
 800fe62:	69e3      	ldr	r3, [r4, #28]
 800fe64:	60f0      	str	r0, [r6, #12]
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1e4      	bne.n	800fe36 <_Balloc+0x2e>
 800fe6c:	2000      	movs	r0, #0
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}
 800fe70:	6802      	ldr	r2, [r0, #0]
 800fe72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe76:	2300      	movs	r3, #0
 800fe78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fe7c:	e7f7      	b.n	800fe6e <_Balloc+0x66>
 800fe7e:	bf00      	nop
 800fe80:	080129aa 	.word	0x080129aa
 800fe84:	08012a2a 	.word	0x08012a2a

0800fe88 <_Bfree>:
 800fe88:	b570      	push	{r4, r5, r6, lr}
 800fe8a:	69c6      	ldr	r6, [r0, #28]
 800fe8c:	4605      	mov	r5, r0
 800fe8e:	460c      	mov	r4, r1
 800fe90:	b976      	cbnz	r6, 800feb0 <_Bfree+0x28>
 800fe92:	2010      	movs	r0, #16
 800fe94:	f7ff ff02 	bl	800fc9c <malloc>
 800fe98:	4602      	mov	r2, r0
 800fe9a:	61e8      	str	r0, [r5, #28]
 800fe9c:	b920      	cbnz	r0, 800fea8 <_Bfree+0x20>
 800fe9e:	4b09      	ldr	r3, [pc, #36]	@ (800fec4 <_Bfree+0x3c>)
 800fea0:	4809      	ldr	r0, [pc, #36]	@ (800fec8 <_Bfree+0x40>)
 800fea2:	218f      	movs	r1, #143	@ 0x8f
 800fea4:	f001 feec 	bl	8011c80 <__assert_func>
 800fea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800feac:	6006      	str	r6, [r0, #0]
 800feae:	60c6      	str	r6, [r0, #12]
 800feb0:	b13c      	cbz	r4, 800fec2 <_Bfree+0x3a>
 800feb2:	69eb      	ldr	r3, [r5, #28]
 800feb4:	6862      	ldr	r2, [r4, #4]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800febc:	6021      	str	r1, [r4, #0]
 800febe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
 800fec4:	080129aa 	.word	0x080129aa
 800fec8:	08012a2a 	.word	0x08012a2a

0800fecc <__multadd>:
 800fecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed0:	690d      	ldr	r5, [r1, #16]
 800fed2:	4607      	mov	r7, r0
 800fed4:	460c      	mov	r4, r1
 800fed6:	461e      	mov	r6, r3
 800fed8:	f101 0c14 	add.w	ip, r1, #20
 800fedc:	2000      	movs	r0, #0
 800fede:	f8dc 3000 	ldr.w	r3, [ip]
 800fee2:	b299      	uxth	r1, r3
 800fee4:	fb02 6101 	mla	r1, r2, r1, r6
 800fee8:	0c1e      	lsrs	r6, r3, #16
 800feea:	0c0b      	lsrs	r3, r1, #16
 800feec:	fb02 3306 	mla	r3, r2, r6, r3
 800fef0:	b289      	uxth	r1, r1
 800fef2:	3001      	adds	r0, #1
 800fef4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fef8:	4285      	cmp	r5, r0
 800fefa:	f84c 1b04 	str.w	r1, [ip], #4
 800fefe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff02:	dcec      	bgt.n	800fede <__multadd+0x12>
 800ff04:	b30e      	cbz	r6, 800ff4a <__multadd+0x7e>
 800ff06:	68a3      	ldr	r3, [r4, #8]
 800ff08:	42ab      	cmp	r3, r5
 800ff0a:	dc19      	bgt.n	800ff40 <__multadd+0x74>
 800ff0c:	6861      	ldr	r1, [r4, #4]
 800ff0e:	4638      	mov	r0, r7
 800ff10:	3101      	adds	r1, #1
 800ff12:	f7ff ff79 	bl	800fe08 <_Balloc>
 800ff16:	4680      	mov	r8, r0
 800ff18:	b928      	cbnz	r0, 800ff26 <__multadd+0x5a>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ff50 <__multadd+0x84>)
 800ff1e:	480d      	ldr	r0, [pc, #52]	@ (800ff54 <__multadd+0x88>)
 800ff20:	21ba      	movs	r1, #186	@ 0xba
 800ff22:	f001 fead 	bl	8011c80 <__assert_func>
 800ff26:	6922      	ldr	r2, [r4, #16]
 800ff28:	3202      	adds	r2, #2
 800ff2a:	f104 010c 	add.w	r1, r4, #12
 800ff2e:	0092      	lsls	r2, r2, #2
 800ff30:	300c      	adds	r0, #12
 800ff32:	f7fe fffa 	bl	800ef2a <memcpy>
 800ff36:	4621      	mov	r1, r4
 800ff38:	4638      	mov	r0, r7
 800ff3a:	f7ff ffa5 	bl	800fe88 <_Bfree>
 800ff3e:	4644      	mov	r4, r8
 800ff40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff44:	3501      	adds	r5, #1
 800ff46:	615e      	str	r6, [r3, #20]
 800ff48:	6125      	str	r5, [r4, #16]
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff50:	08012a19 	.word	0x08012a19
 800ff54:	08012a2a 	.word	0x08012a2a

0800ff58 <__s2b>:
 800ff58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	4615      	mov	r5, r2
 800ff60:	461f      	mov	r7, r3
 800ff62:	2209      	movs	r2, #9
 800ff64:	3308      	adds	r3, #8
 800ff66:	4606      	mov	r6, r0
 800ff68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	2201      	movs	r2, #1
 800ff70:	429a      	cmp	r2, r3
 800ff72:	db09      	blt.n	800ff88 <__s2b+0x30>
 800ff74:	4630      	mov	r0, r6
 800ff76:	f7ff ff47 	bl	800fe08 <_Balloc>
 800ff7a:	b940      	cbnz	r0, 800ff8e <__s2b+0x36>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	4b19      	ldr	r3, [pc, #100]	@ (800ffe4 <__s2b+0x8c>)
 800ff80:	4819      	ldr	r0, [pc, #100]	@ (800ffe8 <__s2b+0x90>)
 800ff82:	21d3      	movs	r1, #211	@ 0xd3
 800ff84:	f001 fe7c 	bl	8011c80 <__assert_func>
 800ff88:	0052      	lsls	r2, r2, #1
 800ff8a:	3101      	adds	r1, #1
 800ff8c:	e7f0      	b.n	800ff70 <__s2b+0x18>
 800ff8e:	9b08      	ldr	r3, [sp, #32]
 800ff90:	6143      	str	r3, [r0, #20]
 800ff92:	2d09      	cmp	r5, #9
 800ff94:	f04f 0301 	mov.w	r3, #1
 800ff98:	6103      	str	r3, [r0, #16]
 800ff9a:	dd16      	ble.n	800ffca <__s2b+0x72>
 800ff9c:	f104 0909 	add.w	r9, r4, #9
 800ffa0:	46c8      	mov	r8, r9
 800ffa2:	442c      	add	r4, r5
 800ffa4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ffa8:	4601      	mov	r1, r0
 800ffaa:	3b30      	subs	r3, #48	@ 0x30
 800ffac:	220a      	movs	r2, #10
 800ffae:	4630      	mov	r0, r6
 800ffb0:	f7ff ff8c 	bl	800fecc <__multadd>
 800ffb4:	45a0      	cmp	r8, r4
 800ffb6:	d1f5      	bne.n	800ffa4 <__s2b+0x4c>
 800ffb8:	f1a5 0408 	sub.w	r4, r5, #8
 800ffbc:	444c      	add	r4, r9
 800ffbe:	1b2d      	subs	r5, r5, r4
 800ffc0:	1963      	adds	r3, r4, r5
 800ffc2:	42bb      	cmp	r3, r7
 800ffc4:	db04      	blt.n	800ffd0 <__s2b+0x78>
 800ffc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffca:	340a      	adds	r4, #10
 800ffcc:	2509      	movs	r5, #9
 800ffce:	e7f6      	b.n	800ffbe <__s2b+0x66>
 800ffd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ffd4:	4601      	mov	r1, r0
 800ffd6:	3b30      	subs	r3, #48	@ 0x30
 800ffd8:	220a      	movs	r2, #10
 800ffda:	4630      	mov	r0, r6
 800ffdc:	f7ff ff76 	bl	800fecc <__multadd>
 800ffe0:	e7ee      	b.n	800ffc0 <__s2b+0x68>
 800ffe2:	bf00      	nop
 800ffe4:	08012a19 	.word	0x08012a19
 800ffe8:	08012a2a 	.word	0x08012a2a

0800ffec <__hi0bits>:
 800ffec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fff0:	4603      	mov	r3, r0
 800fff2:	bf36      	itet	cc
 800fff4:	0403      	lslcc	r3, r0, #16
 800fff6:	2000      	movcs	r0, #0
 800fff8:	2010      	movcc	r0, #16
 800fffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fffe:	bf3c      	itt	cc
 8010000:	021b      	lslcc	r3, r3, #8
 8010002:	3008      	addcc	r0, #8
 8010004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010008:	bf3c      	itt	cc
 801000a:	011b      	lslcc	r3, r3, #4
 801000c:	3004      	addcc	r0, #4
 801000e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010012:	bf3c      	itt	cc
 8010014:	009b      	lslcc	r3, r3, #2
 8010016:	3002      	addcc	r0, #2
 8010018:	2b00      	cmp	r3, #0
 801001a:	db05      	blt.n	8010028 <__hi0bits+0x3c>
 801001c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010020:	f100 0001 	add.w	r0, r0, #1
 8010024:	bf08      	it	eq
 8010026:	2020      	moveq	r0, #32
 8010028:	4770      	bx	lr

0801002a <__lo0bits>:
 801002a:	6803      	ldr	r3, [r0, #0]
 801002c:	4602      	mov	r2, r0
 801002e:	f013 0007 	ands.w	r0, r3, #7
 8010032:	d00b      	beq.n	801004c <__lo0bits+0x22>
 8010034:	07d9      	lsls	r1, r3, #31
 8010036:	d421      	bmi.n	801007c <__lo0bits+0x52>
 8010038:	0798      	lsls	r0, r3, #30
 801003a:	bf49      	itett	mi
 801003c:	085b      	lsrmi	r3, r3, #1
 801003e:	089b      	lsrpl	r3, r3, #2
 8010040:	2001      	movmi	r0, #1
 8010042:	6013      	strmi	r3, [r2, #0]
 8010044:	bf5c      	itt	pl
 8010046:	6013      	strpl	r3, [r2, #0]
 8010048:	2002      	movpl	r0, #2
 801004a:	4770      	bx	lr
 801004c:	b299      	uxth	r1, r3
 801004e:	b909      	cbnz	r1, 8010054 <__lo0bits+0x2a>
 8010050:	0c1b      	lsrs	r3, r3, #16
 8010052:	2010      	movs	r0, #16
 8010054:	b2d9      	uxtb	r1, r3
 8010056:	b909      	cbnz	r1, 801005c <__lo0bits+0x32>
 8010058:	3008      	adds	r0, #8
 801005a:	0a1b      	lsrs	r3, r3, #8
 801005c:	0719      	lsls	r1, r3, #28
 801005e:	bf04      	itt	eq
 8010060:	091b      	lsreq	r3, r3, #4
 8010062:	3004      	addeq	r0, #4
 8010064:	0799      	lsls	r1, r3, #30
 8010066:	bf04      	itt	eq
 8010068:	089b      	lsreq	r3, r3, #2
 801006a:	3002      	addeq	r0, #2
 801006c:	07d9      	lsls	r1, r3, #31
 801006e:	d403      	bmi.n	8010078 <__lo0bits+0x4e>
 8010070:	085b      	lsrs	r3, r3, #1
 8010072:	f100 0001 	add.w	r0, r0, #1
 8010076:	d003      	beq.n	8010080 <__lo0bits+0x56>
 8010078:	6013      	str	r3, [r2, #0]
 801007a:	4770      	bx	lr
 801007c:	2000      	movs	r0, #0
 801007e:	4770      	bx	lr
 8010080:	2020      	movs	r0, #32
 8010082:	4770      	bx	lr

08010084 <__i2b>:
 8010084:	b510      	push	{r4, lr}
 8010086:	460c      	mov	r4, r1
 8010088:	2101      	movs	r1, #1
 801008a:	f7ff febd 	bl	800fe08 <_Balloc>
 801008e:	4602      	mov	r2, r0
 8010090:	b928      	cbnz	r0, 801009e <__i2b+0x1a>
 8010092:	4b05      	ldr	r3, [pc, #20]	@ (80100a8 <__i2b+0x24>)
 8010094:	4805      	ldr	r0, [pc, #20]	@ (80100ac <__i2b+0x28>)
 8010096:	f240 1145 	movw	r1, #325	@ 0x145
 801009a:	f001 fdf1 	bl	8011c80 <__assert_func>
 801009e:	2301      	movs	r3, #1
 80100a0:	6144      	str	r4, [r0, #20]
 80100a2:	6103      	str	r3, [r0, #16]
 80100a4:	bd10      	pop	{r4, pc}
 80100a6:	bf00      	nop
 80100a8:	08012a19 	.word	0x08012a19
 80100ac:	08012a2a 	.word	0x08012a2a

080100b0 <__multiply>:
 80100b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	4617      	mov	r7, r2
 80100b6:	690a      	ldr	r2, [r1, #16]
 80100b8:	693b      	ldr	r3, [r7, #16]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	bfa8      	it	ge
 80100be:	463b      	movge	r3, r7
 80100c0:	4689      	mov	r9, r1
 80100c2:	bfa4      	itt	ge
 80100c4:	460f      	movge	r7, r1
 80100c6:	4699      	movge	r9, r3
 80100c8:	693d      	ldr	r5, [r7, #16]
 80100ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	6879      	ldr	r1, [r7, #4]
 80100d2:	eb05 060a 	add.w	r6, r5, sl
 80100d6:	42b3      	cmp	r3, r6
 80100d8:	b085      	sub	sp, #20
 80100da:	bfb8      	it	lt
 80100dc:	3101      	addlt	r1, #1
 80100de:	f7ff fe93 	bl	800fe08 <_Balloc>
 80100e2:	b930      	cbnz	r0, 80100f2 <__multiply+0x42>
 80100e4:	4602      	mov	r2, r0
 80100e6:	4b41      	ldr	r3, [pc, #260]	@ (80101ec <__multiply+0x13c>)
 80100e8:	4841      	ldr	r0, [pc, #260]	@ (80101f0 <__multiply+0x140>)
 80100ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80100ee:	f001 fdc7 	bl	8011c80 <__assert_func>
 80100f2:	f100 0414 	add.w	r4, r0, #20
 80100f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80100fa:	4623      	mov	r3, r4
 80100fc:	2200      	movs	r2, #0
 80100fe:	4573      	cmp	r3, lr
 8010100:	d320      	bcc.n	8010144 <__multiply+0x94>
 8010102:	f107 0814 	add.w	r8, r7, #20
 8010106:	f109 0114 	add.w	r1, r9, #20
 801010a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801010e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010112:	9302      	str	r3, [sp, #8]
 8010114:	1beb      	subs	r3, r5, r7
 8010116:	3b15      	subs	r3, #21
 8010118:	f023 0303 	bic.w	r3, r3, #3
 801011c:	3304      	adds	r3, #4
 801011e:	3715      	adds	r7, #21
 8010120:	42bd      	cmp	r5, r7
 8010122:	bf38      	it	cc
 8010124:	2304      	movcc	r3, #4
 8010126:	9301      	str	r3, [sp, #4]
 8010128:	9b02      	ldr	r3, [sp, #8]
 801012a:	9103      	str	r1, [sp, #12]
 801012c:	428b      	cmp	r3, r1
 801012e:	d80c      	bhi.n	801014a <__multiply+0x9a>
 8010130:	2e00      	cmp	r6, #0
 8010132:	dd03      	ble.n	801013c <__multiply+0x8c>
 8010134:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010138:	2b00      	cmp	r3, #0
 801013a:	d055      	beq.n	80101e8 <__multiply+0x138>
 801013c:	6106      	str	r6, [r0, #16]
 801013e:	b005      	add	sp, #20
 8010140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	f843 2b04 	str.w	r2, [r3], #4
 8010148:	e7d9      	b.n	80100fe <__multiply+0x4e>
 801014a:	f8b1 a000 	ldrh.w	sl, [r1]
 801014e:	f1ba 0f00 	cmp.w	sl, #0
 8010152:	d01f      	beq.n	8010194 <__multiply+0xe4>
 8010154:	46c4      	mov	ip, r8
 8010156:	46a1      	mov	r9, r4
 8010158:	2700      	movs	r7, #0
 801015a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801015e:	f8d9 3000 	ldr.w	r3, [r9]
 8010162:	fa1f fb82 	uxth.w	fp, r2
 8010166:	b29b      	uxth	r3, r3
 8010168:	fb0a 330b 	mla	r3, sl, fp, r3
 801016c:	443b      	add	r3, r7
 801016e:	f8d9 7000 	ldr.w	r7, [r9]
 8010172:	0c12      	lsrs	r2, r2, #16
 8010174:	0c3f      	lsrs	r7, r7, #16
 8010176:	fb0a 7202 	mla	r2, sl, r2, r7
 801017a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801017e:	b29b      	uxth	r3, r3
 8010180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010184:	4565      	cmp	r5, ip
 8010186:	f849 3b04 	str.w	r3, [r9], #4
 801018a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801018e:	d8e4      	bhi.n	801015a <__multiply+0xaa>
 8010190:	9b01      	ldr	r3, [sp, #4]
 8010192:	50e7      	str	r7, [r4, r3]
 8010194:	9b03      	ldr	r3, [sp, #12]
 8010196:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801019a:	3104      	adds	r1, #4
 801019c:	f1b9 0f00 	cmp.w	r9, #0
 80101a0:	d020      	beq.n	80101e4 <__multiply+0x134>
 80101a2:	6823      	ldr	r3, [r4, #0]
 80101a4:	4647      	mov	r7, r8
 80101a6:	46a4      	mov	ip, r4
 80101a8:	f04f 0a00 	mov.w	sl, #0
 80101ac:	f8b7 b000 	ldrh.w	fp, [r7]
 80101b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80101b4:	fb09 220b 	mla	r2, r9, fp, r2
 80101b8:	4452      	add	r2, sl
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101c0:	f84c 3b04 	str.w	r3, [ip], #4
 80101c4:	f857 3b04 	ldr.w	r3, [r7], #4
 80101c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101cc:	f8bc 3000 	ldrh.w	r3, [ip]
 80101d0:	fb09 330a 	mla	r3, r9, sl, r3
 80101d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80101d8:	42bd      	cmp	r5, r7
 80101da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80101de:	d8e5      	bhi.n	80101ac <__multiply+0xfc>
 80101e0:	9a01      	ldr	r2, [sp, #4]
 80101e2:	50a3      	str	r3, [r4, r2]
 80101e4:	3404      	adds	r4, #4
 80101e6:	e79f      	b.n	8010128 <__multiply+0x78>
 80101e8:	3e01      	subs	r6, #1
 80101ea:	e7a1      	b.n	8010130 <__multiply+0x80>
 80101ec:	08012a19 	.word	0x08012a19
 80101f0:	08012a2a 	.word	0x08012a2a

080101f4 <__pow5mult>:
 80101f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101f8:	4615      	mov	r5, r2
 80101fa:	f012 0203 	ands.w	r2, r2, #3
 80101fe:	4607      	mov	r7, r0
 8010200:	460e      	mov	r6, r1
 8010202:	d007      	beq.n	8010214 <__pow5mult+0x20>
 8010204:	4c25      	ldr	r4, [pc, #148]	@ (801029c <__pow5mult+0xa8>)
 8010206:	3a01      	subs	r2, #1
 8010208:	2300      	movs	r3, #0
 801020a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801020e:	f7ff fe5d 	bl	800fecc <__multadd>
 8010212:	4606      	mov	r6, r0
 8010214:	10ad      	asrs	r5, r5, #2
 8010216:	d03d      	beq.n	8010294 <__pow5mult+0xa0>
 8010218:	69fc      	ldr	r4, [r7, #28]
 801021a:	b97c      	cbnz	r4, 801023c <__pow5mult+0x48>
 801021c:	2010      	movs	r0, #16
 801021e:	f7ff fd3d 	bl	800fc9c <malloc>
 8010222:	4602      	mov	r2, r0
 8010224:	61f8      	str	r0, [r7, #28]
 8010226:	b928      	cbnz	r0, 8010234 <__pow5mult+0x40>
 8010228:	4b1d      	ldr	r3, [pc, #116]	@ (80102a0 <__pow5mult+0xac>)
 801022a:	481e      	ldr	r0, [pc, #120]	@ (80102a4 <__pow5mult+0xb0>)
 801022c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010230:	f001 fd26 	bl	8011c80 <__assert_func>
 8010234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010238:	6004      	str	r4, [r0, #0]
 801023a:	60c4      	str	r4, [r0, #12]
 801023c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010244:	b94c      	cbnz	r4, 801025a <__pow5mult+0x66>
 8010246:	f240 2171 	movw	r1, #625	@ 0x271
 801024a:	4638      	mov	r0, r7
 801024c:	f7ff ff1a 	bl	8010084 <__i2b>
 8010250:	2300      	movs	r3, #0
 8010252:	f8c8 0008 	str.w	r0, [r8, #8]
 8010256:	4604      	mov	r4, r0
 8010258:	6003      	str	r3, [r0, #0]
 801025a:	f04f 0900 	mov.w	r9, #0
 801025e:	07eb      	lsls	r3, r5, #31
 8010260:	d50a      	bpl.n	8010278 <__pow5mult+0x84>
 8010262:	4631      	mov	r1, r6
 8010264:	4622      	mov	r2, r4
 8010266:	4638      	mov	r0, r7
 8010268:	f7ff ff22 	bl	80100b0 <__multiply>
 801026c:	4631      	mov	r1, r6
 801026e:	4680      	mov	r8, r0
 8010270:	4638      	mov	r0, r7
 8010272:	f7ff fe09 	bl	800fe88 <_Bfree>
 8010276:	4646      	mov	r6, r8
 8010278:	106d      	asrs	r5, r5, #1
 801027a:	d00b      	beq.n	8010294 <__pow5mult+0xa0>
 801027c:	6820      	ldr	r0, [r4, #0]
 801027e:	b938      	cbnz	r0, 8010290 <__pow5mult+0x9c>
 8010280:	4622      	mov	r2, r4
 8010282:	4621      	mov	r1, r4
 8010284:	4638      	mov	r0, r7
 8010286:	f7ff ff13 	bl	80100b0 <__multiply>
 801028a:	6020      	str	r0, [r4, #0]
 801028c:	f8c0 9000 	str.w	r9, [r0]
 8010290:	4604      	mov	r4, r0
 8010292:	e7e4      	b.n	801025e <__pow5mult+0x6a>
 8010294:	4630      	mov	r0, r6
 8010296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801029a:	bf00      	nop
 801029c:	08012b3c 	.word	0x08012b3c
 80102a0:	080129aa 	.word	0x080129aa
 80102a4:	08012a2a 	.word	0x08012a2a

080102a8 <__lshift>:
 80102a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102ac:	460c      	mov	r4, r1
 80102ae:	6849      	ldr	r1, [r1, #4]
 80102b0:	6923      	ldr	r3, [r4, #16]
 80102b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	4607      	mov	r7, r0
 80102ba:	4691      	mov	r9, r2
 80102bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102c0:	f108 0601 	add.w	r6, r8, #1
 80102c4:	42b3      	cmp	r3, r6
 80102c6:	db0b      	blt.n	80102e0 <__lshift+0x38>
 80102c8:	4638      	mov	r0, r7
 80102ca:	f7ff fd9d 	bl	800fe08 <_Balloc>
 80102ce:	4605      	mov	r5, r0
 80102d0:	b948      	cbnz	r0, 80102e6 <__lshift+0x3e>
 80102d2:	4602      	mov	r2, r0
 80102d4:	4b28      	ldr	r3, [pc, #160]	@ (8010378 <__lshift+0xd0>)
 80102d6:	4829      	ldr	r0, [pc, #164]	@ (801037c <__lshift+0xd4>)
 80102d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80102dc:	f001 fcd0 	bl	8011c80 <__assert_func>
 80102e0:	3101      	adds	r1, #1
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	e7ee      	b.n	80102c4 <__lshift+0x1c>
 80102e6:	2300      	movs	r3, #0
 80102e8:	f100 0114 	add.w	r1, r0, #20
 80102ec:	f100 0210 	add.w	r2, r0, #16
 80102f0:	4618      	mov	r0, r3
 80102f2:	4553      	cmp	r3, sl
 80102f4:	db33      	blt.n	801035e <__lshift+0xb6>
 80102f6:	6920      	ldr	r0, [r4, #16]
 80102f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80102fc:	f104 0314 	add.w	r3, r4, #20
 8010300:	f019 091f 	ands.w	r9, r9, #31
 8010304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801030c:	d02b      	beq.n	8010366 <__lshift+0xbe>
 801030e:	f1c9 0e20 	rsb	lr, r9, #32
 8010312:	468a      	mov	sl, r1
 8010314:	2200      	movs	r2, #0
 8010316:	6818      	ldr	r0, [r3, #0]
 8010318:	fa00 f009 	lsl.w	r0, r0, r9
 801031c:	4310      	orrs	r0, r2
 801031e:	f84a 0b04 	str.w	r0, [sl], #4
 8010322:	f853 2b04 	ldr.w	r2, [r3], #4
 8010326:	459c      	cmp	ip, r3
 8010328:	fa22 f20e 	lsr.w	r2, r2, lr
 801032c:	d8f3      	bhi.n	8010316 <__lshift+0x6e>
 801032e:	ebac 0304 	sub.w	r3, ip, r4
 8010332:	3b15      	subs	r3, #21
 8010334:	f023 0303 	bic.w	r3, r3, #3
 8010338:	3304      	adds	r3, #4
 801033a:	f104 0015 	add.w	r0, r4, #21
 801033e:	4560      	cmp	r0, ip
 8010340:	bf88      	it	hi
 8010342:	2304      	movhi	r3, #4
 8010344:	50ca      	str	r2, [r1, r3]
 8010346:	b10a      	cbz	r2, 801034c <__lshift+0xa4>
 8010348:	f108 0602 	add.w	r6, r8, #2
 801034c:	3e01      	subs	r6, #1
 801034e:	4638      	mov	r0, r7
 8010350:	612e      	str	r6, [r5, #16]
 8010352:	4621      	mov	r1, r4
 8010354:	f7ff fd98 	bl	800fe88 <_Bfree>
 8010358:	4628      	mov	r0, r5
 801035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801035e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010362:	3301      	adds	r3, #1
 8010364:	e7c5      	b.n	80102f2 <__lshift+0x4a>
 8010366:	3904      	subs	r1, #4
 8010368:	f853 2b04 	ldr.w	r2, [r3], #4
 801036c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010370:	459c      	cmp	ip, r3
 8010372:	d8f9      	bhi.n	8010368 <__lshift+0xc0>
 8010374:	e7ea      	b.n	801034c <__lshift+0xa4>
 8010376:	bf00      	nop
 8010378:	08012a19 	.word	0x08012a19
 801037c:	08012a2a 	.word	0x08012a2a

08010380 <__mcmp>:
 8010380:	690a      	ldr	r2, [r1, #16]
 8010382:	4603      	mov	r3, r0
 8010384:	6900      	ldr	r0, [r0, #16]
 8010386:	1a80      	subs	r0, r0, r2
 8010388:	b530      	push	{r4, r5, lr}
 801038a:	d10e      	bne.n	80103aa <__mcmp+0x2a>
 801038c:	3314      	adds	r3, #20
 801038e:	3114      	adds	r1, #20
 8010390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801039c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80103a0:	4295      	cmp	r5, r2
 80103a2:	d003      	beq.n	80103ac <__mcmp+0x2c>
 80103a4:	d205      	bcs.n	80103b2 <__mcmp+0x32>
 80103a6:	f04f 30ff 	mov.w	r0, #4294967295
 80103aa:	bd30      	pop	{r4, r5, pc}
 80103ac:	42a3      	cmp	r3, r4
 80103ae:	d3f3      	bcc.n	8010398 <__mcmp+0x18>
 80103b0:	e7fb      	b.n	80103aa <__mcmp+0x2a>
 80103b2:	2001      	movs	r0, #1
 80103b4:	e7f9      	b.n	80103aa <__mcmp+0x2a>
	...

080103b8 <__mdiff>:
 80103b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103bc:	4689      	mov	r9, r1
 80103be:	4606      	mov	r6, r0
 80103c0:	4611      	mov	r1, r2
 80103c2:	4648      	mov	r0, r9
 80103c4:	4614      	mov	r4, r2
 80103c6:	f7ff ffdb 	bl	8010380 <__mcmp>
 80103ca:	1e05      	subs	r5, r0, #0
 80103cc:	d112      	bne.n	80103f4 <__mdiff+0x3c>
 80103ce:	4629      	mov	r1, r5
 80103d0:	4630      	mov	r0, r6
 80103d2:	f7ff fd19 	bl	800fe08 <_Balloc>
 80103d6:	4602      	mov	r2, r0
 80103d8:	b928      	cbnz	r0, 80103e6 <__mdiff+0x2e>
 80103da:	4b3f      	ldr	r3, [pc, #252]	@ (80104d8 <__mdiff+0x120>)
 80103dc:	f240 2137 	movw	r1, #567	@ 0x237
 80103e0:	483e      	ldr	r0, [pc, #248]	@ (80104dc <__mdiff+0x124>)
 80103e2:	f001 fc4d 	bl	8011c80 <__assert_func>
 80103e6:	2301      	movs	r3, #1
 80103e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103ec:	4610      	mov	r0, r2
 80103ee:	b003      	add	sp, #12
 80103f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f4:	bfbc      	itt	lt
 80103f6:	464b      	movlt	r3, r9
 80103f8:	46a1      	movlt	r9, r4
 80103fa:	4630      	mov	r0, r6
 80103fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010400:	bfba      	itte	lt
 8010402:	461c      	movlt	r4, r3
 8010404:	2501      	movlt	r5, #1
 8010406:	2500      	movge	r5, #0
 8010408:	f7ff fcfe 	bl	800fe08 <_Balloc>
 801040c:	4602      	mov	r2, r0
 801040e:	b918      	cbnz	r0, 8010418 <__mdiff+0x60>
 8010410:	4b31      	ldr	r3, [pc, #196]	@ (80104d8 <__mdiff+0x120>)
 8010412:	f240 2145 	movw	r1, #581	@ 0x245
 8010416:	e7e3      	b.n	80103e0 <__mdiff+0x28>
 8010418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801041c:	6926      	ldr	r6, [r4, #16]
 801041e:	60c5      	str	r5, [r0, #12]
 8010420:	f109 0310 	add.w	r3, r9, #16
 8010424:	f109 0514 	add.w	r5, r9, #20
 8010428:	f104 0e14 	add.w	lr, r4, #20
 801042c:	f100 0b14 	add.w	fp, r0, #20
 8010430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010438:	9301      	str	r3, [sp, #4]
 801043a:	46d9      	mov	r9, fp
 801043c:	f04f 0c00 	mov.w	ip, #0
 8010440:	9b01      	ldr	r3, [sp, #4]
 8010442:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010446:	f853 af04 	ldr.w	sl, [r3, #4]!
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	fa1f f38a 	uxth.w	r3, sl
 8010450:	4619      	mov	r1, r3
 8010452:	b283      	uxth	r3, r0
 8010454:	1acb      	subs	r3, r1, r3
 8010456:	0c00      	lsrs	r0, r0, #16
 8010458:	4463      	add	r3, ip
 801045a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801045e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010462:	b29b      	uxth	r3, r3
 8010464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010468:	4576      	cmp	r6, lr
 801046a:	f849 3b04 	str.w	r3, [r9], #4
 801046e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010472:	d8e5      	bhi.n	8010440 <__mdiff+0x88>
 8010474:	1b33      	subs	r3, r6, r4
 8010476:	3b15      	subs	r3, #21
 8010478:	f023 0303 	bic.w	r3, r3, #3
 801047c:	3415      	adds	r4, #21
 801047e:	3304      	adds	r3, #4
 8010480:	42a6      	cmp	r6, r4
 8010482:	bf38      	it	cc
 8010484:	2304      	movcc	r3, #4
 8010486:	441d      	add	r5, r3
 8010488:	445b      	add	r3, fp
 801048a:	461e      	mov	r6, r3
 801048c:	462c      	mov	r4, r5
 801048e:	4544      	cmp	r4, r8
 8010490:	d30e      	bcc.n	80104b0 <__mdiff+0xf8>
 8010492:	f108 0103 	add.w	r1, r8, #3
 8010496:	1b49      	subs	r1, r1, r5
 8010498:	f021 0103 	bic.w	r1, r1, #3
 801049c:	3d03      	subs	r5, #3
 801049e:	45a8      	cmp	r8, r5
 80104a0:	bf38      	it	cc
 80104a2:	2100      	movcc	r1, #0
 80104a4:	440b      	add	r3, r1
 80104a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104aa:	b191      	cbz	r1, 80104d2 <__mdiff+0x11a>
 80104ac:	6117      	str	r7, [r2, #16]
 80104ae:	e79d      	b.n	80103ec <__mdiff+0x34>
 80104b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80104b4:	46e6      	mov	lr, ip
 80104b6:	0c08      	lsrs	r0, r1, #16
 80104b8:	fa1c fc81 	uxtah	ip, ip, r1
 80104bc:	4471      	add	r1, lr
 80104be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80104c2:	b289      	uxth	r1, r1
 80104c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80104c8:	f846 1b04 	str.w	r1, [r6], #4
 80104cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104d0:	e7dd      	b.n	801048e <__mdiff+0xd6>
 80104d2:	3f01      	subs	r7, #1
 80104d4:	e7e7      	b.n	80104a6 <__mdiff+0xee>
 80104d6:	bf00      	nop
 80104d8:	08012a19 	.word	0x08012a19
 80104dc:	08012a2a 	.word	0x08012a2a

080104e0 <__ulp>:
 80104e0:	b082      	sub	sp, #8
 80104e2:	ed8d 0b00 	vstr	d0, [sp]
 80104e6:	9a01      	ldr	r2, [sp, #4]
 80104e8:	4b0f      	ldr	r3, [pc, #60]	@ (8010528 <__ulp+0x48>)
 80104ea:	4013      	ands	r3, r2
 80104ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	dc08      	bgt.n	8010506 <__ulp+0x26>
 80104f4:	425b      	negs	r3, r3
 80104f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80104fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80104fe:	da04      	bge.n	801050a <__ulp+0x2a>
 8010500:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010504:	4113      	asrs	r3, r2
 8010506:	2200      	movs	r2, #0
 8010508:	e008      	b.n	801051c <__ulp+0x3c>
 801050a:	f1a2 0314 	sub.w	r3, r2, #20
 801050e:	2b1e      	cmp	r3, #30
 8010510:	bfda      	itte	le
 8010512:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010516:	40da      	lsrle	r2, r3
 8010518:	2201      	movgt	r2, #1
 801051a:	2300      	movs	r3, #0
 801051c:	4619      	mov	r1, r3
 801051e:	4610      	mov	r0, r2
 8010520:	ec41 0b10 	vmov	d0, r0, r1
 8010524:	b002      	add	sp, #8
 8010526:	4770      	bx	lr
 8010528:	7ff00000 	.word	0x7ff00000

0801052c <__b2d>:
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010530:	6906      	ldr	r6, [r0, #16]
 8010532:	f100 0814 	add.w	r8, r0, #20
 8010536:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801053a:	1f37      	subs	r7, r6, #4
 801053c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010540:	4610      	mov	r0, r2
 8010542:	f7ff fd53 	bl	800ffec <__hi0bits>
 8010546:	f1c0 0320 	rsb	r3, r0, #32
 801054a:	280a      	cmp	r0, #10
 801054c:	600b      	str	r3, [r1, #0]
 801054e:	491b      	ldr	r1, [pc, #108]	@ (80105bc <__b2d+0x90>)
 8010550:	dc15      	bgt.n	801057e <__b2d+0x52>
 8010552:	f1c0 0c0b 	rsb	ip, r0, #11
 8010556:	fa22 f30c 	lsr.w	r3, r2, ip
 801055a:	45b8      	cmp	r8, r7
 801055c:	ea43 0501 	orr.w	r5, r3, r1
 8010560:	bf34      	ite	cc
 8010562:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010566:	2300      	movcs	r3, #0
 8010568:	3015      	adds	r0, #21
 801056a:	fa02 f000 	lsl.w	r0, r2, r0
 801056e:	fa23 f30c 	lsr.w	r3, r3, ip
 8010572:	4303      	orrs	r3, r0
 8010574:	461c      	mov	r4, r3
 8010576:	ec45 4b10 	vmov	d0, r4, r5
 801057a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057e:	45b8      	cmp	r8, r7
 8010580:	bf3a      	itte	cc
 8010582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010586:	f1a6 0708 	subcc.w	r7, r6, #8
 801058a:	2300      	movcs	r3, #0
 801058c:	380b      	subs	r0, #11
 801058e:	d012      	beq.n	80105b6 <__b2d+0x8a>
 8010590:	f1c0 0120 	rsb	r1, r0, #32
 8010594:	fa23 f401 	lsr.w	r4, r3, r1
 8010598:	4082      	lsls	r2, r0
 801059a:	4322      	orrs	r2, r4
 801059c:	4547      	cmp	r7, r8
 801059e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80105a2:	bf8c      	ite	hi
 80105a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80105a8:	2200      	movls	r2, #0
 80105aa:	4083      	lsls	r3, r0
 80105ac:	40ca      	lsrs	r2, r1
 80105ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80105b2:	4313      	orrs	r3, r2
 80105b4:	e7de      	b.n	8010574 <__b2d+0x48>
 80105b6:	ea42 0501 	orr.w	r5, r2, r1
 80105ba:	e7db      	b.n	8010574 <__b2d+0x48>
 80105bc:	3ff00000 	.word	0x3ff00000

080105c0 <__d2b>:
 80105c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105c4:	460f      	mov	r7, r1
 80105c6:	2101      	movs	r1, #1
 80105c8:	ec59 8b10 	vmov	r8, r9, d0
 80105cc:	4616      	mov	r6, r2
 80105ce:	f7ff fc1b 	bl	800fe08 <_Balloc>
 80105d2:	4604      	mov	r4, r0
 80105d4:	b930      	cbnz	r0, 80105e4 <__d2b+0x24>
 80105d6:	4602      	mov	r2, r0
 80105d8:	4b23      	ldr	r3, [pc, #140]	@ (8010668 <__d2b+0xa8>)
 80105da:	4824      	ldr	r0, [pc, #144]	@ (801066c <__d2b+0xac>)
 80105dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80105e0:	f001 fb4e 	bl	8011c80 <__assert_func>
 80105e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80105e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105ec:	b10d      	cbz	r5, 80105f2 <__d2b+0x32>
 80105ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80105f2:	9301      	str	r3, [sp, #4]
 80105f4:	f1b8 0300 	subs.w	r3, r8, #0
 80105f8:	d023      	beq.n	8010642 <__d2b+0x82>
 80105fa:	4668      	mov	r0, sp
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	f7ff fd14 	bl	801002a <__lo0bits>
 8010602:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010606:	b1d0      	cbz	r0, 801063e <__d2b+0x7e>
 8010608:	f1c0 0320 	rsb	r3, r0, #32
 801060c:	fa02 f303 	lsl.w	r3, r2, r3
 8010610:	430b      	orrs	r3, r1
 8010612:	40c2      	lsrs	r2, r0
 8010614:	6163      	str	r3, [r4, #20]
 8010616:	9201      	str	r2, [sp, #4]
 8010618:	9b01      	ldr	r3, [sp, #4]
 801061a:	61a3      	str	r3, [r4, #24]
 801061c:	2b00      	cmp	r3, #0
 801061e:	bf0c      	ite	eq
 8010620:	2201      	moveq	r2, #1
 8010622:	2202      	movne	r2, #2
 8010624:	6122      	str	r2, [r4, #16]
 8010626:	b1a5      	cbz	r5, 8010652 <__d2b+0x92>
 8010628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801062c:	4405      	add	r5, r0
 801062e:	603d      	str	r5, [r7, #0]
 8010630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010634:	6030      	str	r0, [r6, #0]
 8010636:	4620      	mov	r0, r4
 8010638:	b003      	add	sp, #12
 801063a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801063e:	6161      	str	r1, [r4, #20]
 8010640:	e7ea      	b.n	8010618 <__d2b+0x58>
 8010642:	a801      	add	r0, sp, #4
 8010644:	f7ff fcf1 	bl	801002a <__lo0bits>
 8010648:	9b01      	ldr	r3, [sp, #4]
 801064a:	6163      	str	r3, [r4, #20]
 801064c:	3020      	adds	r0, #32
 801064e:	2201      	movs	r2, #1
 8010650:	e7e8      	b.n	8010624 <__d2b+0x64>
 8010652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801065a:	6038      	str	r0, [r7, #0]
 801065c:	6918      	ldr	r0, [r3, #16]
 801065e:	f7ff fcc5 	bl	800ffec <__hi0bits>
 8010662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010666:	e7e5      	b.n	8010634 <__d2b+0x74>
 8010668:	08012a19 	.word	0x08012a19
 801066c:	08012a2a 	.word	0x08012a2a

08010670 <__ratio>:
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	b085      	sub	sp, #20
 8010676:	e9cd 1000 	strd	r1, r0, [sp]
 801067a:	a902      	add	r1, sp, #8
 801067c:	f7ff ff56 	bl	801052c <__b2d>
 8010680:	9800      	ldr	r0, [sp, #0]
 8010682:	a903      	add	r1, sp, #12
 8010684:	ec55 4b10 	vmov	r4, r5, d0
 8010688:	f7ff ff50 	bl	801052c <__b2d>
 801068c:	9b01      	ldr	r3, [sp, #4]
 801068e:	6919      	ldr	r1, [r3, #16]
 8010690:	9b00      	ldr	r3, [sp, #0]
 8010692:	691b      	ldr	r3, [r3, #16]
 8010694:	1ac9      	subs	r1, r1, r3
 8010696:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801069a:	1a9b      	subs	r3, r3, r2
 801069c:	ec5b ab10 	vmov	sl, fp, d0
 80106a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	bfce      	itee	gt
 80106a8:	462a      	movgt	r2, r5
 80106aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80106ae:	465a      	movle	r2, fp
 80106b0:	462f      	mov	r7, r5
 80106b2:	46d9      	mov	r9, fp
 80106b4:	bfcc      	ite	gt
 80106b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80106ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80106be:	464b      	mov	r3, r9
 80106c0:	4652      	mov	r2, sl
 80106c2:	4620      	mov	r0, r4
 80106c4:	4639      	mov	r1, r7
 80106c6:	f7f0 f8c1 	bl	800084c <__aeabi_ddiv>
 80106ca:	ec41 0b10 	vmov	d0, r0, r1
 80106ce:	b005      	add	sp, #20
 80106d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106d4 <__copybits>:
 80106d4:	3901      	subs	r1, #1
 80106d6:	b570      	push	{r4, r5, r6, lr}
 80106d8:	1149      	asrs	r1, r1, #5
 80106da:	6914      	ldr	r4, [r2, #16]
 80106dc:	3101      	adds	r1, #1
 80106de:	f102 0314 	add.w	r3, r2, #20
 80106e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80106e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106ea:	1f05      	subs	r5, r0, #4
 80106ec:	42a3      	cmp	r3, r4
 80106ee:	d30c      	bcc.n	801070a <__copybits+0x36>
 80106f0:	1aa3      	subs	r3, r4, r2
 80106f2:	3b11      	subs	r3, #17
 80106f4:	f023 0303 	bic.w	r3, r3, #3
 80106f8:	3211      	adds	r2, #17
 80106fa:	42a2      	cmp	r2, r4
 80106fc:	bf88      	it	hi
 80106fe:	2300      	movhi	r3, #0
 8010700:	4418      	add	r0, r3
 8010702:	2300      	movs	r3, #0
 8010704:	4288      	cmp	r0, r1
 8010706:	d305      	bcc.n	8010714 <__copybits+0x40>
 8010708:	bd70      	pop	{r4, r5, r6, pc}
 801070a:	f853 6b04 	ldr.w	r6, [r3], #4
 801070e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010712:	e7eb      	b.n	80106ec <__copybits+0x18>
 8010714:	f840 3b04 	str.w	r3, [r0], #4
 8010718:	e7f4      	b.n	8010704 <__copybits+0x30>

0801071a <__any_on>:
 801071a:	f100 0214 	add.w	r2, r0, #20
 801071e:	6900      	ldr	r0, [r0, #16]
 8010720:	114b      	asrs	r3, r1, #5
 8010722:	4298      	cmp	r0, r3
 8010724:	b510      	push	{r4, lr}
 8010726:	db11      	blt.n	801074c <__any_on+0x32>
 8010728:	dd0a      	ble.n	8010740 <__any_on+0x26>
 801072a:	f011 011f 	ands.w	r1, r1, #31
 801072e:	d007      	beq.n	8010740 <__any_on+0x26>
 8010730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010734:	fa24 f001 	lsr.w	r0, r4, r1
 8010738:	fa00 f101 	lsl.w	r1, r0, r1
 801073c:	428c      	cmp	r4, r1
 801073e:	d10b      	bne.n	8010758 <__any_on+0x3e>
 8010740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010744:	4293      	cmp	r3, r2
 8010746:	d803      	bhi.n	8010750 <__any_on+0x36>
 8010748:	2000      	movs	r0, #0
 801074a:	bd10      	pop	{r4, pc}
 801074c:	4603      	mov	r3, r0
 801074e:	e7f7      	b.n	8010740 <__any_on+0x26>
 8010750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010754:	2900      	cmp	r1, #0
 8010756:	d0f5      	beq.n	8010744 <__any_on+0x2a>
 8010758:	2001      	movs	r0, #1
 801075a:	e7f6      	b.n	801074a <__any_on+0x30>

0801075c <sulp>:
 801075c:	b570      	push	{r4, r5, r6, lr}
 801075e:	4604      	mov	r4, r0
 8010760:	460d      	mov	r5, r1
 8010762:	ec45 4b10 	vmov	d0, r4, r5
 8010766:	4616      	mov	r6, r2
 8010768:	f7ff feba 	bl	80104e0 <__ulp>
 801076c:	ec51 0b10 	vmov	r0, r1, d0
 8010770:	b17e      	cbz	r6, 8010792 <sulp+0x36>
 8010772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010776:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801077a:	2b00      	cmp	r3, #0
 801077c:	dd09      	ble.n	8010792 <sulp+0x36>
 801077e:	051b      	lsls	r3, r3, #20
 8010780:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010784:	2400      	movs	r4, #0
 8010786:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801078a:	4622      	mov	r2, r4
 801078c:	462b      	mov	r3, r5
 801078e:	f7ef ff33 	bl	80005f8 <__aeabi_dmul>
 8010792:	ec41 0b10 	vmov	d0, r0, r1
 8010796:	bd70      	pop	{r4, r5, r6, pc}

08010798 <_strtod_l>:
 8010798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079c:	b09f      	sub	sp, #124	@ 0x7c
 801079e:	460c      	mov	r4, r1
 80107a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80107a2:	2200      	movs	r2, #0
 80107a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80107a6:	9005      	str	r0, [sp, #20]
 80107a8:	f04f 0a00 	mov.w	sl, #0
 80107ac:	f04f 0b00 	mov.w	fp, #0
 80107b0:	460a      	mov	r2, r1
 80107b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80107b4:	7811      	ldrb	r1, [r2, #0]
 80107b6:	292b      	cmp	r1, #43	@ 0x2b
 80107b8:	d04a      	beq.n	8010850 <_strtod_l+0xb8>
 80107ba:	d838      	bhi.n	801082e <_strtod_l+0x96>
 80107bc:	290d      	cmp	r1, #13
 80107be:	d832      	bhi.n	8010826 <_strtod_l+0x8e>
 80107c0:	2908      	cmp	r1, #8
 80107c2:	d832      	bhi.n	801082a <_strtod_l+0x92>
 80107c4:	2900      	cmp	r1, #0
 80107c6:	d03b      	beq.n	8010840 <_strtod_l+0xa8>
 80107c8:	2200      	movs	r2, #0
 80107ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80107cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80107ce:	782a      	ldrb	r2, [r5, #0]
 80107d0:	2a30      	cmp	r2, #48	@ 0x30
 80107d2:	f040 80b2 	bne.w	801093a <_strtod_l+0x1a2>
 80107d6:	786a      	ldrb	r2, [r5, #1]
 80107d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80107dc:	2a58      	cmp	r2, #88	@ 0x58
 80107de:	d16e      	bne.n	80108be <_strtod_l+0x126>
 80107e0:	9302      	str	r3, [sp, #8]
 80107e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	4a8f      	ldr	r2, [pc, #572]	@ (8010a28 <_strtod_l+0x290>)
 80107ec:	9805      	ldr	r0, [sp, #20]
 80107ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80107f0:	a919      	add	r1, sp, #100	@ 0x64
 80107f2:	f001 fadf 	bl	8011db4 <__gethex>
 80107f6:	f010 060f 	ands.w	r6, r0, #15
 80107fa:	4604      	mov	r4, r0
 80107fc:	d005      	beq.n	801080a <_strtod_l+0x72>
 80107fe:	2e06      	cmp	r6, #6
 8010800:	d128      	bne.n	8010854 <_strtod_l+0xbc>
 8010802:	3501      	adds	r5, #1
 8010804:	2300      	movs	r3, #0
 8010806:	9519      	str	r5, [sp, #100]	@ 0x64
 8010808:	930e      	str	r3, [sp, #56]	@ 0x38
 801080a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801080c:	2b00      	cmp	r3, #0
 801080e:	f040 858e 	bne.w	801132e <_strtod_l+0xb96>
 8010812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010814:	b1cb      	cbz	r3, 801084a <_strtod_l+0xb2>
 8010816:	4652      	mov	r2, sl
 8010818:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801081c:	ec43 2b10 	vmov	d0, r2, r3
 8010820:	b01f      	add	sp, #124	@ 0x7c
 8010822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010826:	2920      	cmp	r1, #32
 8010828:	d1ce      	bne.n	80107c8 <_strtod_l+0x30>
 801082a:	3201      	adds	r2, #1
 801082c:	e7c1      	b.n	80107b2 <_strtod_l+0x1a>
 801082e:	292d      	cmp	r1, #45	@ 0x2d
 8010830:	d1ca      	bne.n	80107c8 <_strtod_l+0x30>
 8010832:	2101      	movs	r1, #1
 8010834:	910e      	str	r1, [sp, #56]	@ 0x38
 8010836:	1c51      	adds	r1, r2, #1
 8010838:	9119      	str	r1, [sp, #100]	@ 0x64
 801083a:	7852      	ldrb	r2, [r2, #1]
 801083c:	2a00      	cmp	r2, #0
 801083e:	d1c5      	bne.n	80107cc <_strtod_l+0x34>
 8010840:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010842:	9419      	str	r4, [sp, #100]	@ 0x64
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 8570 	bne.w	801132a <_strtod_l+0xb92>
 801084a:	4652      	mov	r2, sl
 801084c:	465b      	mov	r3, fp
 801084e:	e7e5      	b.n	801081c <_strtod_l+0x84>
 8010850:	2100      	movs	r1, #0
 8010852:	e7ef      	b.n	8010834 <_strtod_l+0x9c>
 8010854:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010856:	b13a      	cbz	r2, 8010868 <_strtod_l+0xd0>
 8010858:	2135      	movs	r1, #53	@ 0x35
 801085a:	a81c      	add	r0, sp, #112	@ 0x70
 801085c:	f7ff ff3a 	bl	80106d4 <__copybits>
 8010860:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010862:	9805      	ldr	r0, [sp, #20]
 8010864:	f7ff fb10 	bl	800fe88 <_Bfree>
 8010868:	3e01      	subs	r6, #1
 801086a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801086c:	2e04      	cmp	r6, #4
 801086e:	d806      	bhi.n	801087e <_strtod_l+0xe6>
 8010870:	e8df f006 	tbb	[pc, r6]
 8010874:	201d0314 	.word	0x201d0314
 8010878:	14          	.byte	0x14
 8010879:	00          	.byte	0x00
 801087a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801087e:	05e1      	lsls	r1, r4, #23
 8010880:	bf48      	it	mi
 8010882:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010886:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801088a:	0d1b      	lsrs	r3, r3, #20
 801088c:	051b      	lsls	r3, r3, #20
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1bb      	bne.n	801080a <_strtod_l+0x72>
 8010892:	f7fe fb1d 	bl	800eed0 <__errno>
 8010896:	2322      	movs	r3, #34	@ 0x22
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	e7b6      	b.n	801080a <_strtod_l+0x72>
 801089c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80108a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80108a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80108a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80108ac:	e7e7      	b.n	801087e <_strtod_l+0xe6>
 80108ae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8010a30 <_strtod_l+0x298>
 80108b2:	e7e4      	b.n	801087e <_strtod_l+0xe6>
 80108b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80108b8:	f04f 3aff 	mov.w	sl, #4294967295
 80108bc:	e7df      	b.n	801087e <_strtod_l+0xe6>
 80108be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80108c4:	785b      	ldrb	r3, [r3, #1]
 80108c6:	2b30      	cmp	r3, #48	@ 0x30
 80108c8:	d0f9      	beq.n	80108be <_strtod_l+0x126>
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d09d      	beq.n	801080a <_strtod_l+0x72>
 80108ce:	2301      	movs	r3, #1
 80108d0:	2700      	movs	r7, #0
 80108d2:	9308      	str	r3, [sp, #32]
 80108d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80108d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80108d8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80108da:	46b9      	mov	r9, r7
 80108dc:	220a      	movs	r2, #10
 80108de:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80108e0:	7805      	ldrb	r5, [r0, #0]
 80108e2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80108e6:	b2d9      	uxtb	r1, r3
 80108e8:	2909      	cmp	r1, #9
 80108ea:	d928      	bls.n	801093e <_strtod_l+0x1a6>
 80108ec:	494f      	ldr	r1, [pc, #316]	@ (8010a2c <_strtod_l+0x294>)
 80108ee:	2201      	movs	r2, #1
 80108f0:	f001 f97a 	bl	8011be8 <strncmp>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d032      	beq.n	801095e <_strtod_l+0x1c6>
 80108f8:	2000      	movs	r0, #0
 80108fa:	462a      	mov	r2, r5
 80108fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80108fe:	464d      	mov	r5, r9
 8010900:	4603      	mov	r3, r0
 8010902:	2a65      	cmp	r2, #101	@ 0x65
 8010904:	d001      	beq.n	801090a <_strtod_l+0x172>
 8010906:	2a45      	cmp	r2, #69	@ 0x45
 8010908:	d114      	bne.n	8010934 <_strtod_l+0x19c>
 801090a:	b91d      	cbnz	r5, 8010914 <_strtod_l+0x17c>
 801090c:	9a08      	ldr	r2, [sp, #32]
 801090e:	4302      	orrs	r2, r0
 8010910:	d096      	beq.n	8010840 <_strtod_l+0xa8>
 8010912:	2500      	movs	r5, #0
 8010914:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8010916:	1c62      	adds	r2, r4, #1
 8010918:	9219      	str	r2, [sp, #100]	@ 0x64
 801091a:	7862      	ldrb	r2, [r4, #1]
 801091c:	2a2b      	cmp	r2, #43	@ 0x2b
 801091e:	d07a      	beq.n	8010a16 <_strtod_l+0x27e>
 8010920:	2a2d      	cmp	r2, #45	@ 0x2d
 8010922:	d07e      	beq.n	8010a22 <_strtod_l+0x28a>
 8010924:	f04f 0c00 	mov.w	ip, #0
 8010928:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801092c:	2909      	cmp	r1, #9
 801092e:	f240 8085 	bls.w	8010a3c <_strtod_l+0x2a4>
 8010932:	9419      	str	r4, [sp, #100]	@ 0x64
 8010934:	f04f 0800 	mov.w	r8, #0
 8010938:	e0a5      	b.n	8010a86 <_strtod_l+0x2ee>
 801093a:	2300      	movs	r3, #0
 801093c:	e7c8      	b.n	80108d0 <_strtod_l+0x138>
 801093e:	f1b9 0f08 	cmp.w	r9, #8
 8010942:	bfd8      	it	le
 8010944:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8010946:	f100 0001 	add.w	r0, r0, #1
 801094a:	bfda      	itte	le
 801094c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010950:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8010952:	fb02 3707 	mlagt	r7, r2, r7, r3
 8010956:	f109 0901 	add.w	r9, r9, #1
 801095a:	9019      	str	r0, [sp, #100]	@ 0x64
 801095c:	e7bf      	b.n	80108de <_strtod_l+0x146>
 801095e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010960:	1c5a      	adds	r2, r3, #1
 8010962:	9219      	str	r2, [sp, #100]	@ 0x64
 8010964:	785a      	ldrb	r2, [r3, #1]
 8010966:	f1b9 0f00 	cmp.w	r9, #0
 801096a:	d03b      	beq.n	80109e4 <_strtod_l+0x24c>
 801096c:	900a      	str	r0, [sp, #40]	@ 0x28
 801096e:	464d      	mov	r5, r9
 8010970:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8010974:	2b09      	cmp	r3, #9
 8010976:	d912      	bls.n	801099e <_strtod_l+0x206>
 8010978:	2301      	movs	r3, #1
 801097a:	e7c2      	b.n	8010902 <_strtod_l+0x16a>
 801097c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	9219      	str	r2, [sp, #100]	@ 0x64
 8010982:	785a      	ldrb	r2, [r3, #1]
 8010984:	3001      	adds	r0, #1
 8010986:	2a30      	cmp	r2, #48	@ 0x30
 8010988:	d0f8      	beq.n	801097c <_strtod_l+0x1e4>
 801098a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801098e:	2b08      	cmp	r3, #8
 8010990:	f200 84d2 	bhi.w	8011338 <_strtod_l+0xba0>
 8010994:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010996:	900a      	str	r0, [sp, #40]	@ 0x28
 8010998:	2000      	movs	r0, #0
 801099a:	930c      	str	r3, [sp, #48]	@ 0x30
 801099c:	4605      	mov	r5, r0
 801099e:	3a30      	subs	r2, #48	@ 0x30
 80109a0:	f100 0301 	add.w	r3, r0, #1
 80109a4:	d018      	beq.n	80109d8 <_strtod_l+0x240>
 80109a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80109a8:	4419      	add	r1, r3
 80109aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80109ac:	462e      	mov	r6, r5
 80109ae:	f04f 0e0a 	mov.w	lr, #10
 80109b2:	1c71      	adds	r1, r6, #1
 80109b4:	eba1 0c05 	sub.w	ip, r1, r5
 80109b8:	4563      	cmp	r3, ip
 80109ba:	dc15      	bgt.n	80109e8 <_strtod_l+0x250>
 80109bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80109c0:	182b      	adds	r3, r5, r0
 80109c2:	2b08      	cmp	r3, #8
 80109c4:	f105 0501 	add.w	r5, r5, #1
 80109c8:	4405      	add	r5, r0
 80109ca:	dc1a      	bgt.n	8010a02 <_strtod_l+0x26a>
 80109cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109ce:	230a      	movs	r3, #10
 80109d0:	fb03 2301 	mla	r3, r3, r1, r2
 80109d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80109d6:	2300      	movs	r3, #0
 80109d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80109da:	1c51      	adds	r1, r2, #1
 80109dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80109de:	7852      	ldrb	r2, [r2, #1]
 80109e0:	4618      	mov	r0, r3
 80109e2:	e7c5      	b.n	8010970 <_strtod_l+0x1d8>
 80109e4:	4648      	mov	r0, r9
 80109e6:	e7ce      	b.n	8010986 <_strtod_l+0x1ee>
 80109e8:	2e08      	cmp	r6, #8
 80109ea:	dc05      	bgt.n	80109f8 <_strtod_l+0x260>
 80109ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80109ee:	fb0e f606 	mul.w	r6, lr, r6
 80109f2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80109f4:	460e      	mov	r6, r1
 80109f6:	e7dc      	b.n	80109b2 <_strtod_l+0x21a>
 80109f8:	2910      	cmp	r1, #16
 80109fa:	bfd8      	it	le
 80109fc:	fb0e f707 	mulle.w	r7, lr, r7
 8010a00:	e7f8      	b.n	80109f4 <_strtod_l+0x25c>
 8010a02:	2b0f      	cmp	r3, #15
 8010a04:	bfdc      	itt	le
 8010a06:	230a      	movle	r3, #10
 8010a08:	fb03 2707 	mlale	r7, r3, r7, r2
 8010a0c:	e7e3      	b.n	80109d6 <_strtod_l+0x23e>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8010a12:	2301      	movs	r3, #1
 8010a14:	e77a      	b.n	801090c <_strtod_l+0x174>
 8010a16:	f04f 0c00 	mov.w	ip, #0
 8010a1a:	1ca2      	adds	r2, r4, #2
 8010a1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8010a1e:	78a2      	ldrb	r2, [r4, #2]
 8010a20:	e782      	b.n	8010928 <_strtod_l+0x190>
 8010a22:	f04f 0c01 	mov.w	ip, #1
 8010a26:	e7f8      	b.n	8010a1a <_strtod_l+0x282>
 8010a28:	08012c4c 	.word	0x08012c4c
 8010a2c:	08012a83 	.word	0x08012a83
 8010a30:	7ff00000 	.word	0x7ff00000
 8010a34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a36:	1c51      	adds	r1, r2, #1
 8010a38:	9119      	str	r1, [sp, #100]	@ 0x64
 8010a3a:	7852      	ldrb	r2, [r2, #1]
 8010a3c:	2a30      	cmp	r2, #48	@ 0x30
 8010a3e:	d0f9      	beq.n	8010a34 <_strtod_l+0x29c>
 8010a40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8010a44:	2908      	cmp	r1, #8
 8010a46:	f63f af75 	bhi.w	8010934 <_strtod_l+0x19c>
 8010a4a:	3a30      	subs	r2, #48	@ 0x30
 8010a4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a50:	920f      	str	r2, [sp, #60]	@ 0x3c
 8010a52:	f04f 080a 	mov.w	r8, #10
 8010a56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8010a58:	1c56      	adds	r6, r2, #1
 8010a5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8010a5c:	7852      	ldrb	r2, [r2, #1]
 8010a5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8010a62:	f1be 0f09 	cmp.w	lr, #9
 8010a66:	d939      	bls.n	8010adc <_strtod_l+0x344>
 8010a68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010a6a:	1a76      	subs	r6, r6, r1
 8010a6c:	2e08      	cmp	r6, #8
 8010a6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8010a72:	dc03      	bgt.n	8010a7c <_strtod_l+0x2e4>
 8010a74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010a76:	4588      	cmp	r8, r1
 8010a78:	bfa8      	it	ge
 8010a7a:	4688      	movge	r8, r1
 8010a7c:	f1bc 0f00 	cmp.w	ip, #0
 8010a80:	d001      	beq.n	8010a86 <_strtod_l+0x2ee>
 8010a82:	f1c8 0800 	rsb	r8, r8, #0
 8010a86:	2d00      	cmp	r5, #0
 8010a88:	d14e      	bne.n	8010b28 <_strtod_l+0x390>
 8010a8a:	9908      	ldr	r1, [sp, #32]
 8010a8c:	4308      	orrs	r0, r1
 8010a8e:	f47f aebc 	bne.w	801080a <_strtod_l+0x72>
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	f47f aed4 	bne.w	8010840 <_strtod_l+0xa8>
 8010a98:	2a69      	cmp	r2, #105	@ 0x69
 8010a9a:	d028      	beq.n	8010aee <_strtod_l+0x356>
 8010a9c:	dc25      	bgt.n	8010aea <_strtod_l+0x352>
 8010a9e:	2a49      	cmp	r2, #73	@ 0x49
 8010aa0:	d025      	beq.n	8010aee <_strtod_l+0x356>
 8010aa2:	2a4e      	cmp	r2, #78	@ 0x4e
 8010aa4:	f47f aecc 	bne.w	8010840 <_strtod_l+0xa8>
 8010aa8:	499a      	ldr	r1, [pc, #616]	@ (8010d14 <_strtod_l+0x57c>)
 8010aaa:	a819      	add	r0, sp, #100	@ 0x64
 8010aac:	f001 fba4 	bl	80121f8 <__match>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	f43f aec5 	beq.w	8010840 <_strtod_l+0xa8>
 8010ab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	2b28      	cmp	r3, #40	@ 0x28
 8010abc:	d12e      	bne.n	8010b1c <_strtod_l+0x384>
 8010abe:	4996      	ldr	r1, [pc, #600]	@ (8010d18 <_strtod_l+0x580>)
 8010ac0:	aa1c      	add	r2, sp, #112	@ 0x70
 8010ac2:	a819      	add	r0, sp, #100	@ 0x64
 8010ac4:	f001 fbac 	bl	8012220 <__hexnan>
 8010ac8:	2805      	cmp	r0, #5
 8010aca:	d127      	bne.n	8010b1c <_strtod_l+0x384>
 8010acc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ace:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8010ad2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8010ad6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8010ada:	e696      	b.n	801080a <_strtod_l+0x72>
 8010adc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010ade:	fb08 2101 	mla	r1, r8, r1, r2
 8010ae2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8010ae6:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ae8:	e7b5      	b.n	8010a56 <_strtod_l+0x2be>
 8010aea:	2a6e      	cmp	r2, #110	@ 0x6e
 8010aec:	e7da      	b.n	8010aa4 <_strtod_l+0x30c>
 8010aee:	498b      	ldr	r1, [pc, #556]	@ (8010d1c <_strtod_l+0x584>)
 8010af0:	a819      	add	r0, sp, #100	@ 0x64
 8010af2:	f001 fb81 	bl	80121f8 <__match>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f43f aea2 	beq.w	8010840 <_strtod_l+0xa8>
 8010afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010afe:	4988      	ldr	r1, [pc, #544]	@ (8010d20 <_strtod_l+0x588>)
 8010b00:	3b01      	subs	r3, #1
 8010b02:	a819      	add	r0, sp, #100	@ 0x64
 8010b04:	9319      	str	r3, [sp, #100]	@ 0x64
 8010b06:	f001 fb77 	bl	80121f8 <__match>
 8010b0a:	b910      	cbnz	r0, 8010b12 <_strtod_l+0x37a>
 8010b0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010b0e:	3301      	adds	r3, #1
 8010b10:	9319      	str	r3, [sp, #100]	@ 0x64
 8010b12:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8010d30 <_strtod_l+0x598>
 8010b16:	f04f 0a00 	mov.w	sl, #0
 8010b1a:	e676      	b.n	801080a <_strtod_l+0x72>
 8010b1c:	4881      	ldr	r0, [pc, #516]	@ (8010d24 <_strtod_l+0x58c>)
 8010b1e:	f001 f8a7 	bl	8011c70 <nan>
 8010b22:	ec5b ab10 	vmov	sl, fp, d0
 8010b26:	e670      	b.n	801080a <_strtod_l+0x72>
 8010b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b2a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8010b2c:	eba8 0303 	sub.w	r3, r8, r3
 8010b30:	f1b9 0f00 	cmp.w	r9, #0
 8010b34:	bf08      	it	eq
 8010b36:	46a9      	moveq	r9, r5
 8010b38:	2d10      	cmp	r5, #16
 8010b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b3c:	462c      	mov	r4, r5
 8010b3e:	bfa8      	it	ge
 8010b40:	2410      	movge	r4, #16
 8010b42:	f7ef fcdf 	bl	8000504 <__aeabi_ui2d>
 8010b46:	2d09      	cmp	r5, #9
 8010b48:	4682      	mov	sl, r0
 8010b4a:	468b      	mov	fp, r1
 8010b4c:	dc13      	bgt.n	8010b76 <_strtod_l+0x3de>
 8010b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f43f ae5a 	beq.w	801080a <_strtod_l+0x72>
 8010b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b58:	dd78      	ble.n	8010c4c <_strtod_l+0x4b4>
 8010b5a:	2b16      	cmp	r3, #22
 8010b5c:	dc5f      	bgt.n	8010c1e <_strtod_l+0x486>
 8010b5e:	4972      	ldr	r1, [pc, #456]	@ (8010d28 <_strtod_l+0x590>)
 8010b60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b68:	4652      	mov	r2, sl
 8010b6a:	465b      	mov	r3, fp
 8010b6c:	f7ef fd44 	bl	80005f8 <__aeabi_dmul>
 8010b70:	4682      	mov	sl, r0
 8010b72:	468b      	mov	fp, r1
 8010b74:	e649      	b.n	801080a <_strtod_l+0x72>
 8010b76:	4b6c      	ldr	r3, [pc, #432]	@ (8010d28 <_strtod_l+0x590>)
 8010b78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010b7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8010b80:	f7ef fd3a 	bl	80005f8 <__aeabi_dmul>
 8010b84:	4682      	mov	sl, r0
 8010b86:	4638      	mov	r0, r7
 8010b88:	468b      	mov	fp, r1
 8010b8a:	f7ef fcbb 	bl	8000504 <__aeabi_ui2d>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	4650      	mov	r0, sl
 8010b94:	4659      	mov	r1, fp
 8010b96:	f7ef fb79 	bl	800028c <__adddf3>
 8010b9a:	2d0f      	cmp	r5, #15
 8010b9c:	4682      	mov	sl, r0
 8010b9e:	468b      	mov	fp, r1
 8010ba0:	ddd5      	ble.n	8010b4e <_strtod_l+0x3b6>
 8010ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ba4:	1b2c      	subs	r4, r5, r4
 8010ba6:	441c      	add	r4, r3
 8010ba8:	2c00      	cmp	r4, #0
 8010baa:	f340 8093 	ble.w	8010cd4 <_strtod_l+0x53c>
 8010bae:	f014 030f 	ands.w	r3, r4, #15
 8010bb2:	d00a      	beq.n	8010bca <_strtod_l+0x432>
 8010bb4:	495c      	ldr	r1, [pc, #368]	@ (8010d28 <_strtod_l+0x590>)
 8010bb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010bba:	4652      	mov	r2, sl
 8010bbc:	465b      	mov	r3, fp
 8010bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc2:	f7ef fd19 	bl	80005f8 <__aeabi_dmul>
 8010bc6:	4682      	mov	sl, r0
 8010bc8:	468b      	mov	fp, r1
 8010bca:	f034 040f 	bics.w	r4, r4, #15
 8010bce:	d073      	beq.n	8010cb8 <_strtod_l+0x520>
 8010bd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8010bd4:	dd49      	ble.n	8010c6a <_strtod_l+0x4d2>
 8010bd6:	2400      	movs	r4, #0
 8010bd8:	46a0      	mov	r8, r4
 8010bda:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010bdc:	46a1      	mov	r9, r4
 8010bde:	9a05      	ldr	r2, [sp, #20]
 8010be0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8010d30 <_strtod_l+0x598>
 8010be4:	2322      	movs	r3, #34	@ 0x22
 8010be6:	6013      	str	r3, [r2, #0]
 8010be8:	f04f 0a00 	mov.w	sl, #0
 8010bec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f43f ae0b 	beq.w	801080a <_strtod_l+0x72>
 8010bf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010bf6:	9805      	ldr	r0, [sp, #20]
 8010bf8:	f7ff f946 	bl	800fe88 <_Bfree>
 8010bfc:	9805      	ldr	r0, [sp, #20]
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ff f942 	bl	800fe88 <_Bfree>
 8010c04:	9805      	ldr	r0, [sp, #20]
 8010c06:	4641      	mov	r1, r8
 8010c08:	f7ff f93e 	bl	800fe88 <_Bfree>
 8010c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c0e:	9805      	ldr	r0, [sp, #20]
 8010c10:	f7ff f93a 	bl	800fe88 <_Bfree>
 8010c14:	9805      	ldr	r0, [sp, #20]
 8010c16:	4621      	mov	r1, r4
 8010c18:	f7ff f936 	bl	800fe88 <_Bfree>
 8010c1c:	e5f5      	b.n	801080a <_strtod_l+0x72>
 8010c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8010c24:	4293      	cmp	r3, r2
 8010c26:	dbbc      	blt.n	8010ba2 <_strtod_l+0x40a>
 8010c28:	4c3f      	ldr	r4, [pc, #252]	@ (8010d28 <_strtod_l+0x590>)
 8010c2a:	f1c5 050f 	rsb	r5, r5, #15
 8010c2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010c32:	4652      	mov	r2, sl
 8010c34:	465b      	mov	r3, fp
 8010c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c3a:	f7ef fcdd 	bl	80005f8 <__aeabi_dmul>
 8010c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c40:	1b5d      	subs	r5, r3, r5
 8010c42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010c46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c4a:	e78f      	b.n	8010b6c <_strtod_l+0x3d4>
 8010c4c:	3316      	adds	r3, #22
 8010c4e:	dba8      	blt.n	8010ba2 <_strtod_l+0x40a>
 8010c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c52:	eba3 0808 	sub.w	r8, r3, r8
 8010c56:	4b34      	ldr	r3, [pc, #208]	@ (8010d28 <_strtod_l+0x590>)
 8010c58:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8010c5c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8010c60:	4650      	mov	r0, sl
 8010c62:	4659      	mov	r1, fp
 8010c64:	f7ef fdf2 	bl	800084c <__aeabi_ddiv>
 8010c68:	e782      	b.n	8010b70 <_strtod_l+0x3d8>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	4f2f      	ldr	r7, [pc, #188]	@ (8010d2c <_strtod_l+0x594>)
 8010c6e:	1124      	asrs	r4, r4, #4
 8010c70:	4650      	mov	r0, sl
 8010c72:	4659      	mov	r1, fp
 8010c74:	461e      	mov	r6, r3
 8010c76:	2c01      	cmp	r4, #1
 8010c78:	dc21      	bgt.n	8010cbe <_strtod_l+0x526>
 8010c7a:	b10b      	cbz	r3, 8010c80 <_strtod_l+0x4e8>
 8010c7c:	4682      	mov	sl, r0
 8010c7e:	468b      	mov	fp, r1
 8010c80:	492a      	ldr	r1, [pc, #168]	@ (8010d2c <_strtod_l+0x594>)
 8010c82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8010c86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8010c8a:	4652      	mov	r2, sl
 8010c8c:	465b      	mov	r3, fp
 8010c8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c92:	f7ef fcb1 	bl	80005f8 <__aeabi_dmul>
 8010c96:	4b26      	ldr	r3, [pc, #152]	@ (8010d30 <_strtod_l+0x598>)
 8010c98:	460a      	mov	r2, r1
 8010c9a:	400b      	ands	r3, r1
 8010c9c:	4925      	ldr	r1, [pc, #148]	@ (8010d34 <_strtod_l+0x59c>)
 8010c9e:	428b      	cmp	r3, r1
 8010ca0:	4682      	mov	sl, r0
 8010ca2:	d898      	bhi.n	8010bd6 <_strtod_l+0x43e>
 8010ca4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8010ca8:	428b      	cmp	r3, r1
 8010caa:	bf86      	itte	hi
 8010cac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8010d38 <_strtod_l+0x5a0>
 8010cb0:	f04f 3aff 	movhi.w	sl, #4294967295
 8010cb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8010cb8:	2300      	movs	r3, #0
 8010cba:	9308      	str	r3, [sp, #32]
 8010cbc:	e076      	b.n	8010dac <_strtod_l+0x614>
 8010cbe:	07e2      	lsls	r2, r4, #31
 8010cc0:	d504      	bpl.n	8010ccc <_strtod_l+0x534>
 8010cc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cc6:	f7ef fc97 	bl	80005f8 <__aeabi_dmul>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	3601      	adds	r6, #1
 8010cce:	1064      	asrs	r4, r4, #1
 8010cd0:	3708      	adds	r7, #8
 8010cd2:	e7d0      	b.n	8010c76 <_strtod_l+0x4de>
 8010cd4:	d0f0      	beq.n	8010cb8 <_strtod_l+0x520>
 8010cd6:	4264      	negs	r4, r4
 8010cd8:	f014 020f 	ands.w	r2, r4, #15
 8010cdc:	d00a      	beq.n	8010cf4 <_strtod_l+0x55c>
 8010cde:	4b12      	ldr	r3, [pc, #72]	@ (8010d28 <_strtod_l+0x590>)
 8010ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ce4:	4650      	mov	r0, sl
 8010ce6:	4659      	mov	r1, fp
 8010ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cec:	f7ef fdae 	bl	800084c <__aeabi_ddiv>
 8010cf0:	4682      	mov	sl, r0
 8010cf2:	468b      	mov	fp, r1
 8010cf4:	1124      	asrs	r4, r4, #4
 8010cf6:	d0df      	beq.n	8010cb8 <_strtod_l+0x520>
 8010cf8:	2c1f      	cmp	r4, #31
 8010cfa:	dd1f      	ble.n	8010d3c <_strtod_l+0x5a4>
 8010cfc:	2400      	movs	r4, #0
 8010cfe:	46a0      	mov	r8, r4
 8010d00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010d02:	46a1      	mov	r9, r4
 8010d04:	9a05      	ldr	r2, [sp, #20]
 8010d06:	2322      	movs	r3, #34	@ 0x22
 8010d08:	f04f 0a00 	mov.w	sl, #0
 8010d0c:	f04f 0b00 	mov.w	fp, #0
 8010d10:	6013      	str	r3, [r2, #0]
 8010d12:	e76b      	b.n	8010bec <_strtod_l+0x454>
 8010d14:	08012971 	.word	0x08012971
 8010d18:	08012c38 	.word	0x08012c38
 8010d1c:	08012969 	.word	0x08012969
 8010d20:	080129a0 	.word	0x080129a0
 8010d24:	08012ad9 	.word	0x08012ad9
 8010d28:	08012b70 	.word	0x08012b70
 8010d2c:	08012b48 	.word	0x08012b48
 8010d30:	7ff00000 	.word	0x7ff00000
 8010d34:	7ca00000 	.word	0x7ca00000
 8010d38:	7fefffff 	.word	0x7fefffff
 8010d3c:	f014 0310 	ands.w	r3, r4, #16
 8010d40:	bf18      	it	ne
 8010d42:	236a      	movne	r3, #106	@ 0x6a
 8010d44:	4ea9      	ldr	r6, [pc, #676]	@ (8010fec <_strtod_l+0x854>)
 8010d46:	9308      	str	r3, [sp, #32]
 8010d48:	4650      	mov	r0, sl
 8010d4a:	4659      	mov	r1, fp
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	07e7      	lsls	r7, r4, #31
 8010d50:	d504      	bpl.n	8010d5c <_strtod_l+0x5c4>
 8010d52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d56:	f7ef fc4f 	bl	80005f8 <__aeabi_dmul>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	1064      	asrs	r4, r4, #1
 8010d5e:	f106 0608 	add.w	r6, r6, #8
 8010d62:	d1f4      	bne.n	8010d4e <_strtod_l+0x5b6>
 8010d64:	b10b      	cbz	r3, 8010d6a <_strtod_l+0x5d2>
 8010d66:	4682      	mov	sl, r0
 8010d68:	468b      	mov	fp, r1
 8010d6a:	9b08      	ldr	r3, [sp, #32]
 8010d6c:	b1b3      	cbz	r3, 8010d9c <_strtod_l+0x604>
 8010d6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010d72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	4659      	mov	r1, fp
 8010d7a:	dd0f      	ble.n	8010d9c <_strtod_l+0x604>
 8010d7c:	2b1f      	cmp	r3, #31
 8010d7e:	dd56      	ble.n	8010e2e <_strtod_l+0x696>
 8010d80:	2b34      	cmp	r3, #52	@ 0x34
 8010d82:	bfde      	ittt	le
 8010d84:	f04f 33ff 	movle.w	r3, #4294967295
 8010d88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8010d8c:	4093      	lslle	r3, r2
 8010d8e:	f04f 0a00 	mov.w	sl, #0
 8010d92:	bfcc      	ite	gt
 8010d94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8010d98:	ea03 0b01 	andle.w	fp, r3, r1
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	2300      	movs	r3, #0
 8010da0:	4650      	mov	r0, sl
 8010da2:	4659      	mov	r1, fp
 8010da4:	f7ef fe90 	bl	8000ac8 <__aeabi_dcmpeq>
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d1a7      	bne.n	8010cfc <_strtod_l+0x564>
 8010dac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010db2:	9805      	ldr	r0, [sp, #20]
 8010db4:	462b      	mov	r3, r5
 8010db6:	464a      	mov	r2, r9
 8010db8:	f7ff f8ce 	bl	800ff58 <__s2b>
 8010dbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	f43f af09 	beq.w	8010bd6 <_strtod_l+0x43e>
 8010dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010dc8:	2a00      	cmp	r2, #0
 8010dca:	eba3 0308 	sub.w	r3, r3, r8
 8010dce:	bfa8      	it	ge
 8010dd0:	2300      	movge	r3, #0
 8010dd2:	9312      	str	r3, [sp, #72]	@ 0x48
 8010dd4:	2400      	movs	r4, #0
 8010dd6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010dda:	9316      	str	r3, [sp, #88]	@ 0x58
 8010ddc:	46a0      	mov	r8, r4
 8010dde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010de0:	9805      	ldr	r0, [sp, #20]
 8010de2:	6859      	ldr	r1, [r3, #4]
 8010de4:	f7ff f810 	bl	800fe08 <_Balloc>
 8010de8:	4681      	mov	r9, r0
 8010dea:	2800      	cmp	r0, #0
 8010dec:	f43f aef7 	beq.w	8010bde <_strtod_l+0x446>
 8010df0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010df2:	691a      	ldr	r2, [r3, #16]
 8010df4:	3202      	adds	r2, #2
 8010df6:	f103 010c 	add.w	r1, r3, #12
 8010dfa:	0092      	lsls	r2, r2, #2
 8010dfc:	300c      	adds	r0, #12
 8010dfe:	f7fe f894 	bl	800ef2a <memcpy>
 8010e02:	ec4b ab10 	vmov	d0, sl, fp
 8010e06:	9805      	ldr	r0, [sp, #20]
 8010e08:	aa1c      	add	r2, sp, #112	@ 0x70
 8010e0a:	a91b      	add	r1, sp, #108	@ 0x6c
 8010e0c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8010e10:	f7ff fbd6 	bl	80105c0 <__d2b>
 8010e14:	901a      	str	r0, [sp, #104]	@ 0x68
 8010e16:	2800      	cmp	r0, #0
 8010e18:	f43f aee1 	beq.w	8010bde <_strtod_l+0x446>
 8010e1c:	9805      	ldr	r0, [sp, #20]
 8010e1e:	2101      	movs	r1, #1
 8010e20:	f7ff f930 	bl	8010084 <__i2b>
 8010e24:	4680      	mov	r8, r0
 8010e26:	b948      	cbnz	r0, 8010e3c <_strtod_l+0x6a4>
 8010e28:	f04f 0800 	mov.w	r8, #0
 8010e2c:	e6d7      	b.n	8010bde <_strtod_l+0x446>
 8010e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e32:	fa02 f303 	lsl.w	r3, r2, r3
 8010e36:	ea03 0a0a 	and.w	sl, r3, sl
 8010e3a:	e7af      	b.n	8010d9c <_strtod_l+0x604>
 8010e3c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8010e3e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8010e40:	2d00      	cmp	r5, #0
 8010e42:	bfab      	itete	ge
 8010e44:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8010e46:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8010e48:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8010e4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8010e4c:	bfac      	ite	ge
 8010e4e:	18ef      	addge	r7, r5, r3
 8010e50:	1b5e      	sublt	r6, r3, r5
 8010e52:	9b08      	ldr	r3, [sp, #32]
 8010e54:	1aed      	subs	r5, r5, r3
 8010e56:	4415      	add	r5, r2
 8010e58:	4b65      	ldr	r3, [pc, #404]	@ (8010ff0 <_strtod_l+0x858>)
 8010e5a:	3d01      	subs	r5, #1
 8010e5c:	429d      	cmp	r5, r3
 8010e5e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8010e62:	da50      	bge.n	8010f06 <_strtod_l+0x76e>
 8010e64:	1b5b      	subs	r3, r3, r5
 8010e66:	2b1f      	cmp	r3, #31
 8010e68:	eba2 0203 	sub.w	r2, r2, r3
 8010e6c:	f04f 0101 	mov.w	r1, #1
 8010e70:	dc3d      	bgt.n	8010eee <_strtod_l+0x756>
 8010e72:	fa01 f303 	lsl.w	r3, r1, r3
 8010e76:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010e78:	2300      	movs	r3, #0
 8010e7a:	9310      	str	r3, [sp, #64]	@ 0x40
 8010e7c:	18bd      	adds	r5, r7, r2
 8010e7e:	9b08      	ldr	r3, [sp, #32]
 8010e80:	42af      	cmp	r7, r5
 8010e82:	4416      	add	r6, r2
 8010e84:	441e      	add	r6, r3
 8010e86:	463b      	mov	r3, r7
 8010e88:	bfa8      	it	ge
 8010e8a:	462b      	movge	r3, r5
 8010e8c:	42b3      	cmp	r3, r6
 8010e8e:	bfa8      	it	ge
 8010e90:	4633      	movge	r3, r6
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	bfc2      	ittt	gt
 8010e96:	1aed      	subgt	r5, r5, r3
 8010e98:	1af6      	subgt	r6, r6, r3
 8010e9a:	1aff      	subgt	r7, r7, r3
 8010e9c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	dd16      	ble.n	8010ed0 <_strtod_l+0x738>
 8010ea2:	4641      	mov	r1, r8
 8010ea4:	9805      	ldr	r0, [sp, #20]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	f7ff f9a4 	bl	80101f4 <__pow5mult>
 8010eac:	4680      	mov	r8, r0
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0ba      	beq.n	8010e28 <_strtod_l+0x690>
 8010eb2:	4601      	mov	r1, r0
 8010eb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010eb6:	9805      	ldr	r0, [sp, #20]
 8010eb8:	f7ff f8fa 	bl	80100b0 <__multiply>
 8010ebc:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	f43f ae8d 	beq.w	8010bde <_strtod_l+0x446>
 8010ec4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010ec6:	9805      	ldr	r0, [sp, #20]
 8010ec8:	f7fe ffde 	bl	800fe88 <_Bfree>
 8010ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ece:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	dc1d      	bgt.n	8010f10 <_strtod_l+0x778>
 8010ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	dd23      	ble.n	8010f22 <_strtod_l+0x78a>
 8010eda:	4649      	mov	r1, r9
 8010edc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8010ede:	9805      	ldr	r0, [sp, #20]
 8010ee0:	f7ff f988 	bl	80101f4 <__pow5mult>
 8010ee4:	4681      	mov	r9, r0
 8010ee6:	b9e0      	cbnz	r0, 8010f22 <_strtod_l+0x78a>
 8010ee8:	f04f 0900 	mov.w	r9, #0
 8010eec:	e677      	b.n	8010bde <_strtod_l+0x446>
 8010eee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8010ef2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8010ef6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8010efa:	35e2      	adds	r5, #226	@ 0xe2
 8010efc:	fa01 f305 	lsl.w	r3, r1, r5
 8010f00:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f02:	9113      	str	r1, [sp, #76]	@ 0x4c
 8010f04:	e7ba      	b.n	8010e7c <_strtod_l+0x6e4>
 8010f06:	2300      	movs	r3, #0
 8010f08:	9310      	str	r3, [sp, #64]	@ 0x40
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010f0e:	e7b5      	b.n	8010e7c <_strtod_l+0x6e4>
 8010f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f12:	9805      	ldr	r0, [sp, #20]
 8010f14:	462a      	mov	r2, r5
 8010f16:	f7ff f9c7 	bl	80102a8 <__lshift>
 8010f1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d1d9      	bne.n	8010ed4 <_strtod_l+0x73c>
 8010f20:	e65d      	b.n	8010bde <_strtod_l+0x446>
 8010f22:	2e00      	cmp	r6, #0
 8010f24:	dd07      	ble.n	8010f36 <_strtod_l+0x79e>
 8010f26:	4649      	mov	r1, r9
 8010f28:	9805      	ldr	r0, [sp, #20]
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	f7ff f9bc 	bl	80102a8 <__lshift>
 8010f30:	4681      	mov	r9, r0
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d0d8      	beq.n	8010ee8 <_strtod_l+0x750>
 8010f36:	2f00      	cmp	r7, #0
 8010f38:	dd08      	ble.n	8010f4c <_strtod_l+0x7b4>
 8010f3a:	4641      	mov	r1, r8
 8010f3c:	9805      	ldr	r0, [sp, #20]
 8010f3e:	463a      	mov	r2, r7
 8010f40:	f7ff f9b2 	bl	80102a8 <__lshift>
 8010f44:	4680      	mov	r8, r0
 8010f46:	2800      	cmp	r0, #0
 8010f48:	f43f ae49 	beq.w	8010bde <_strtod_l+0x446>
 8010f4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010f4e:	9805      	ldr	r0, [sp, #20]
 8010f50:	464a      	mov	r2, r9
 8010f52:	f7ff fa31 	bl	80103b8 <__mdiff>
 8010f56:	4604      	mov	r4, r0
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	f43f ae40 	beq.w	8010bde <_strtod_l+0x446>
 8010f5e:	68c3      	ldr	r3, [r0, #12]
 8010f60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010f62:	2300      	movs	r3, #0
 8010f64:	60c3      	str	r3, [r0, #12]
 8010f66:	4641      	mov	r1, r8
 8010f68:	f7ff fa0a 	bl	8010380 <__mcmp>
 8010f6c:	2800      	cmp	r0, #0
 8010f6e:	da45      	bge.n	8010ffc <_strtod_l+0x864>
 8010f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010f72:	ea53 030a 	orrs.w	r3, r3, sl
 8010f76:	d16b      	bne.n	8011050 <_strtod_l+0x8b8>
 8010f78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d167      	bne.n	8011050 <_strtod_l+0x8b8>
 8010f80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010f84:	0d1b      	lsrs	r3, r3, #20
 8010f86:	051b      	lsls	r3, r3, #20
 8010f88:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010f8c:	d960      	bls.n	8011050 <_strtod_l+0x8b8>
 8010f8e:	6963      	ldr	r3, [r4, #20]
 8010f90:	b913      	cbnz	r3, 8010f98 <_strtod_l+0x800>
 8010f92:	6923      	ldr	r3, [r4, #16]
 8010f94:	2b01      	cmp	r3, #1
 8010f96:	dd5b      	ble.n	8011050 <_strtod_l+0x8b8>
 8010f98:	4621      	mov	r1, r4
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	9805      	ldr	r0, [sp, #20]
 8010f9e:	f7ff f983 	bl	80102a8 <__lshift>
 8010fa2:	4641      	mov	r1, r8
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	f7ff f9eb 	bl	8010380 <__mcmp>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	dd50      	ble.n	8011050 <_strtod_l+0x8b8>
 8010fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010fb2:	9a08      	ldr	r2, [sp, #32]
 8010fb4:	0d1b      	lsrs	r3, r3, #20
 8010fb6:	051b      	lsls	r3, r3, #20
 8010fb8:	2a00      	cmp	r2, #0
 8010fba:	d06a      	beq.n	8011092 <_strtod_l+0x8fa>
 8010fbc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8010fc0:	d867      	bhi.n	8011092 <_strtod_l+0x8fa>
 8010fc2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8010fc6:	f67f ae9d 	bls.w	8010d04 <_strtod_l+0x56c>
 8010fca:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff4 <_strtod_l+0x85c>)
 8010fcc:	4650      	mov	r0, sl
 8010fce:	4659      	mov	r1, fp
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f7ef fb11 	bl	80005f8 <__aeabi_dmul>
 8010fd6:	4b08      	ldr	r3, [pc, #32]	@ (8010ff8 <_strtod_l+0x860>)
 8010fd8:	400b      	ands	r3, r1
 8010fda:	4682      	mov	sl, r0
 8010fdc:	468b      	mov	fp, r1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f47f ae08 	bne.w	8010bf4 <_strtod_l+0x45c>
 8010fe4:	9a05      	ldr	r2, [sp, #20]
 8010fe6:	2322      	movs	r3, #34	@ 0x22
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	e603      	b.n	8010bf4 <_strtod_l+0x45c>
 8010fec:	08012c60 	.word	0x08012c60
 8010ff0:	fffffc02 	.word	0xfffffc02
 8010ff4:	39500000 	.word	0x39500000
 8010ff8:	7ff00000 	.word	0x7ff00000
 8010ffc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011000:	d165      	bne.n	80110ce <_strtod_l+0x936>
 8011002:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011008:	b35a      	cbz	r2, 8011062 <_strtod_l+0x8ca>
 801100a:	4a9f      	ldr	r2, [pc, #636]	@ (8011288 <_strtod_l+0xaf0>)
 801100c:	4293      	cmp	r3, r2
 801100e:	d12b      	bne.n	8011068 <_strtod_l+0x8d0>
 8011010:	9b08      	ldr	r3, [sp, #32]
 8011012:	4651      	mov	r1, sl
 8011014:	b303      	cbz	r3, 8011058 <_strtod_l+0x8c0>
 8011016:	4b9d      	ldr	r3, [pc, #628]	@ (801128c <_strtod_l+0xaf4>)
 8011018:	465a      	mov	r2, fp
 801101a:	4013      	ands	r3, r2
 801101c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011020:	f04f 32ff 	mov.w	r2, #4294967295
 8011024:	d81b      	bhi.n	801105e <_strtod_l+0x8c6>
 8011026:	0d1b      	lsrs	r3, r3, #20
 8011028:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801102c:	fa02 f303 	lsl.w	r3, r2, r3
 8011030:	4299      	cmp	r1, r3
 8011032:	d119      	bne.n	8011068 <_strtod_l+0x8d0>
 8011034:	4b96      	ldr	r3, [pc, #600]	@ (8011290 <_strtod_l+0xaf8>)
 8011036:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011038:	429a      	cmp	r2, r3
 801103a:	d102      	bne.n	8011042 <_strtod_l+0x8aa>
 801103c:	3101      	adds	r1, #1
 801103e:	f43f adce 	beq.w	8010bde <_strtod_l+0x446>
 8011042:	4b92      	ldr	r3, [pc, #584]	@ (801128c <_strtod_l+0xaf4>)
 8011044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011046:	401a      	ands	r2, r3
 8011048:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801104c:	f04f 0a00 	mov.w	sl, #0
 8011050:	9b08      	ldr	r3, [sp, #32]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1b9      	bne.n	8010fca <_strtod_l+0x832>
 8011056:	e5cd      	b.n	8010bf4 <_strtod_l+0x45c>
 8011058:	f04f 33ff 	mov.w	r3, #4294967295
 801105c:	e7e8      	b.n	8011030 <_strtod_l+0x898>
 801105e:	4613      	mov	r3, r2
 8011060:	e7e6      	b.n	8011030 <_strtod_l+0x898>
 8011062:	ea53 030a 	orrs.w	r3, r3, sl
 8011066:	d0a2      	beq.n	8010fae <_strtod_l+0x816>
 8011068:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801106a:	b1db      	cbz	r3, 80110a4 <_strtod_l+0x90c>
 801106c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801106e:	4213      	tst	r3, r2
 8011070:	d0ee      	beq.n	8011050 <_strtod_l+0x8b8>
 8011072:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011074:	9a08      	ldr	r2, [sp, #32]
 8011076:	4650      	mov	r0, sl
 8011078:	4659      	mov	r1, fp
 801107a:	b1bb      	cbz	r3, 80110ac <_strtod_l+0x914>
 801107c:	f7ff fb6e 	bl	801075c <sulp>
 8011080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011084:	ec53 2b10 	vmov	r2, r3, d0
 8011088:	f7ef f900 	bl	800028c <__adddf3>
 801108c:	4682      	mov	sl, r0
 801108e:	468b      	mov	fp, r1
 8011090:	e7de      	b.n	8011050 <_strtod_l+0x8b8>
 8011092:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8011096:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801109a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801109e:	f04f 3aff 	mov.w	sl, #4294967295
 80110a2:	e7d5      	b.n	8011050 <_strtod_l+0x8b8>
 80110a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80110a6:	ea13 0f0a 	tst.w	r3, sl
 80110aa:	e7e1      	b.n	8011070 <_strtod_l+0x8d8>
 80110ac:	f7ff fb56 	bl	801075c <sulp>
 80110b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80110b4:	ec53 2b10 	vmov	r2, r3, d0
 80110b8:	f7ef f8e6 	bl	8000288 <__aeabi_dsub>
 80110bc:	2200      	movs	r2, #0
 80110be:	2300      	movs	r3, #0
 80110c0:	4682      	mov	sl, r0
 80110c2:	468b      	mov	fp, r1
 80110c4:	f7ef fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80110c8:	2800      	cmp	r0, #0
 80110ca:	d0c1      	beq.n	8011050 <_strtod_l+0x8b8>
 80110cc:	e61a      	b.n	8010d04 <_strtod_l+0x56c>
 80110ce:	4641      	mov	r1, r8
 80110d0:	4620      	mov	r0, r4
 80110d2:	f7ff facd 	bl	8010670 <__ratio>
 80110d6:	ec57 6b10 	vmov	r6, r7, d0
 80110da:	2200      	movs	r2, #0
 80110dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80110e0:	4630      	mov	r0, r6
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef fd04 	bl	8000af0 <__aeabi_dcmple>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	d06f      	beq.n	80111cc <_strtod_l+0xa34>
 80110ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d17a      	bne.n	80111e8 <_strtod_l+0xa50>
 80110f2:	f1ba 0f00 	cmp.w	sl, #0
 80110f6:	d158      	bne.n	80111aa <_strtod_l+0xa12>
 80110f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d15a      	bne.n	80111b8 <_strtod_l+0xa20>
 8011102:	4b64      	ldr	r3, [pc, #400]	@ (8011294 <_strtod_l+0xafc>)
 8011104:	2200      	movs	r2, #0
 8011106:	4630      	mov	r0, r6
 8011108:	4639      	mov	r1, r7
 801110a:	f7ef fce7 	bl	8000adc <__aeabi_dcmplt>
 801110e:	2800      	cmp	r0, #0
 8011110:	d159      	bne.n	80111c6 <_strtod_l+0xa2e>
 8011112:	4630      	mov	r0, r6
 8011114:	4639      	mov	r1, r7
 8011116:	4b60      	ldr	r3, [pc, #384]	@ (8011298 <_strtod_l+0xb00>)
 8011118:	2200      	movs	r2, #0
 801111a:	f7ef fa6d 	bl	80005f8 <__aeabi_dmul>
 801111e:	4606      	mov	r6, r0
 8011120:	460f      	mov	r7, r1
 8011122:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011126:	9606      	str	r6, [sp, #24]
 8011128:	9307      	str	r3, [sp, #28]
 801112a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801112e:	4d57      	ldr	r5, [pc, #348]	@ (801128c <_strtod_l+0xaf4>)
 8011130:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011136:	401d      	ands	r5, r3
 8011138:	4b58      	ldr	r3, [pc, #352]	@ (801129c <_strtod_l+0xb04>)
 801113a:	429d      	cmp	r5, r3
 801113c:	f040 80b2 	bne.w	80112a4 <_strtod_l+0xb0c>
 8011140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011142:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011146:	ec4b ab10 	vmov	d0, sl, fp
 801114a:	f7ff f9c9 	bl	80104e0 <__ulp>
 801114e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011152:	ec51 0b10 	vmov	r0, r1, d0
 8011156:	f7ef fa4f 	bl	80005f8 <__aeabi_dmul>
 801115a:	4652      	mov	r2, sl
 801115c:	465b      	mov	r3, fp
 801115e:	f7ef f895 	bl	800028c <__adddf3>
 8011162:	460b      	mov	r3, r1
 8011164:	4949      	ldr	r1, [pc, #292]	@ (801128c <_strtod_l+0xaf4>)
 8011166:	4a4e      	ldr	r2, [pc, #312]	@ (80112a0 <_strtod_l+0xb08>)
 8011168:	4019      	ands	r1, r3
 801116a:	4291      	cmp	r1, r2
 801116c:	4682      	mov	sl, r0
 801116e:	d942      	bls.n	80111f6 <_strtod_l+0xa5e>
 8011170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011172:	4b47      	ldr	r3, [pc, #284]	@ (8011290 <_strtod_l+0xaf8>)
 8011174:	429a      	cmp	r2, r3
 8011176:	d103      	bne.n	8011180 <_strtod_l+0x9e8>
 8011178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801117a:	3301      	adds	r3, #1
 801117c:	f43f ad2f 	beq.w	8010bde <_strtod_l+0x446>
 8011180:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8011290 <_strtod_l+0xaf8>
 8011184:	f04f 3aff 	mov.w	sl, #4294967295
 8011188:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801118a:	9805      	ldr	r0, [sp, #20]
 801118c:	f7fe fe7c 	bl	800fe88 <_Bfree>
 8011190:	9805      	ldr	r0, [sp, #20]
 8011192:	4649      	mov	r1, r9
 8011194:	f7fe fe78 	bl	800fe88 <_Bfree>
 8011198:	9805      	ldr	r0, [sp, #20]
 801119a:	4641      	mov	r1, r8
 801119c:	f7fe fe74 	bl	800fe88 <_Bfree>
 80111a0:	9805      	ldr	r0, [sp, #20]
 80111a2:	4621      	mov	r1, r4
 80111a4:	f7fe fe70 	bl	800fe88 <_Bfree>
 80111a8:	e619      	b.n	8010dde <_strtod_l+0x646>
 80111aa:	f1ba 0f01 	cmp.w	sl, #1
 80111ae:	d103      	bne.n	80111b8 <_strtod_l+0xa20>
 80111b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f43f ada6 	beq.w	8010d04 <_strtod_l+0x56c>
 80111b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8011268 <_strtod_l+0xad0>
 80111bc:	4f35      	ldr	r7, [pc, #212]	@ (8011294 <_strtod_l+0xafc>)
 80111be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111c2:	2600      	movs	r6, #0
 80111c4:	e7b1      	b.n	801112a <_strtod_l+0x992>
 80111c6:	4f34      	ldr	r7, [pc, #208]	@ (8011298 <_strtod_l+0xb00>)
 80111c8:	2600      	movs	r6, #0
 80111ca:	e7aa      	b.n	8011122 <_strtod_l+0x98a>
 80111cc:	4b32      	ldr	r3, [pc, #200]	@ (8011298 <_strtod_l+0xb00>)
 80111ce:	4630      	mov	r0, r6
 80111d0:	4639      	mov	r1, r7
 80111d2:	2200      	movs	r2, #0
 80111d4:	f7ef fa10 	bl	80005f8 <__aeabi_dmul>
 80111d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111da:	4606      	mov	r6, r0
 80111dc:	460f      	mov	r7, r1
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d09f      	beq.n	8011122 <_strtod_l+0x98a>
 80111e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80111e6:	e7a0      	b.n	801112a <_strtod_l+0x992>
 80111e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011270 <_strtod_l+0xad8>
 80111ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80111f0:	ec57 6b17 	vmov	r6, r7, d7
 80111f4:	e799      	b.n	801112a <_strtod_l+0x992>
 80111f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80111fa:	9b08      	ldr	r3, [sp, #32]
 80111fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1c1      	bne.n	8011188 <_strtod_l+0x9f0>
 8011204:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011208:	0d1b      	lsrs	r3, r3, #20
 801120a:	051b      	lsls	r3, r3, #20
 801120c:	429d      	cmp	r5, r3
 801120e:	d1bb      	bne.n	8011188 <_strtod_l+0x9f0>
 8011210:	4630      	mov	r0, r6
 8011212:	4639      	mov	r1, r7
 8011214:	f7ef fd50 	bl	8000cb8 <__aeabi_d2lz>
 8011218:	f7ef f9c0 	bl	800059c <__aeabi_l2d>
 801121c:	4602      	mov	r2, r0
 801121e:	460b      	mov	r3, r1
 8011220:	4630      	mov	r0, r6
 8011222:	4639      	mov	r1, r7
 8011224:	f7ef f830 	bl	8000288 <__aeabi_dsub>
 8011228:	460b      	mov	r3, r1
 801122a:	4602      	mov	r2, r0
 801122c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011230:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011234:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011236:	ea46 060a 	orr.w	r6, r6, sl
 801123a:	431e      	orrs	r6, r3
 801123c:	d06f      	beq.n	801131e <_strtod_l+0xb86>
 801123e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011278 <_strtod_l+0xae0>)
 8011240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011244:	f7ef fc4a 	bl	8000adc <__aeabi_dcmplt>
 8011248:	2800      	cmp	r0, #0
 801124a:	f47f acd3 	bne.w	8010bf4 <_strtod_l+0x45c>
 801124e:	a30c      	add	r3, pc, #48	@ (adr r3, 8011280 <_strtod_l+0xae8>)
 8011250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011258:	f7ef fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 801125c:	2800      	cmp	r0, #0
 801125e:	d093      	beq.n	8011188 <_strtod_l+0x9f0>
 8011260:	e4c8      	b.n	8010bf4 <_strtod_l+0x45c>
 8011262:	bf00      	nop
 8011264:	f3af 8000 	nop.w
 8011268:	00000000 	.word	0x00000000
 801126c:	bff00000 	.word	0xbff00000
 8011270:	00000000 	.word	0x00000000
 8011274:	3ff00000 	.word	0x3ff00000
 8011278:	94a03595 	.word	0x94a03595
 801127c:	3fdfffff 	.word	0x3fdfffff
 8011280:	35afe535 	.word	0x35afe535
 8011284:	3fe00000 	.word	0x3fe00000
 8011288:	000fffff 	.word	0x000fffff
 801128c:	7ff00000 	.word	0x7ff00000
 8011290:	7fefffff 	.word	0x7fefffff
 8011294:	3ff00000 	.word	0x3ff00000
 8011298:	3fe00000 	.word	0x3fe00000
 801129c:	7fe00000 	.word	0x7fe00000
 80112a0:	7c9fffff 	.word	0x7c9fffff
 80112a4:	9b08      	ldr	r3, [sp, #32]
 80112a6:	b323      	cbz	r3, 80112f2 <_strtod_l+0xb5a>
 80112a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80112ac:	d821      	bhi.n	80112f2 <_strtod_l+0xb5a>
 80112ae:	a328      	add	r3, pc, #160	@ (adr r3, 8011350 <_strtod_l+0xbb8>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	4630      	mov	r0, r6
 80112b6:	4639      	mov	r1, r7
 80112b8:	f7ef fc1a 	bl	8000af0 <__aeabi_dcmple>
 80112bc:	b1a0      	cbz	r0, 80112e8 <_strtod_l+0xb50>
 80112be:	4639      	mov	r1, r7
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ef fc71 	bl	8000ba8 <__aeabi_d2uiz>
 80112c6:	2801      	cmp	r0, #1
 80112c8:	bf38      	it	cc
 80112ca:	2001      	movcc	r0, #1
 80112cc:	f7ef f91a 	bl	8000504 <__aeabi_ui2d>
 80112d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	b9fb      	cbnz	r3, 8011318 <_strtod_l+0xb80>
 80112d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80112dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80112de:	9315      	str	r3, [sp, #84]	@ 0x54
 80112e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80112e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80112e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80112ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80112ee:	1b5b      	subs	r3, r3, r5
 80112f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80112f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80112f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80112fa:	f7ff f8f1 	bl	80104e0 <__ulp>
 80112fe:	4650      	mov	r0, sl
 8011300:	ec53 2b10 	vmov	r2, r3, d0
 8011304:	4659      	mov	r1, fp
 8011306:	f7ef f977 	bl	80005f8 <__aeabi_dmul>
 801130a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801130e:	f7ee ffbd 	bl	800028c <__adddf3>
 8011312:	4682      	mov	sl, r0
 8011314:	468b      	mov	fp, r1
 8011316:	e770      	b.n	80111fa <_strtod_l+0xa62>
 8011318:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801131c:	e7e0      	b.n	80112e0 <_strtod_l+0xb48>
 801131e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011358 <_strtod_l+0xbc0>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ef fbda 	bl	8000adc <__aeabi_dcmplt>
 8011328:	e798      	b.n	801125c <_strtod_l+0xac4>
 801132a:	2300      	movs	r3, #0
 801132c:	930e      	str	r3, [sp, #56]	@ 0x38
 801132e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011332:	6013      	str	r3, [r2, #0]
 8011334:	f7ff ba6d 	b.w	8010812 <_strtod_l+0x7a>
 8011338:	2a65      	cmp	r2, #101	@ 0x65
 801133a:	f43f ab68 	beq.w	8010a0e <_strtod_l+0x276>
 801133e:	2a45      	cmp	r2, #69	@ 0x45
 8011340:	f43f ab65 	beq.w	8010a0e <_strtod_l+0x276>
 8011344:	2301      	movs	r3, #1
 8011346:	f7ff bba0 	b.w	8010a8a <_strtod_l+0x2f2>
 801134a:	bf00      	nop
 801134c:	f3af 8000 	nop.w
 8011350:	ffc00000 	.word	0xffc00000
 8011354:	41dfffff 	.word	0x41dfffff
 8011358:	94a03595 	.word	0x94a03595
 801135c:	3fcfffff 	.word	0x3fcfffff

08011360 <_strtod_r>:
 8011360:	4b01      	ldr	r3, [pc, #4]	@ (8011368 <_strtod_r+0x8>)
 8011362:	f7ff ba19 	b.w	8010798 <_strtod_l>
 8011366:	bf00      	nop
 8011368:	20000168 	.word	0x20000168

0801136c <_strtol_l.isra.0>:
 801136c:	2b24      	cmp	r3, #36	@ 0x24
 801136e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011372:	4686      	mov	lr, r0
 8011374:	4690      	mov	r8, r2
 8011376:	d801      	bhi.n	801137c <_strtol_l.isra.0+0x10>
 8011378:	2b01      	cmp	r3, #1
 801137a:	d106      	bne.n	801138a <_strtol_l.isra.0+0x1e>
 801137c:	f7fd fda8 	bl	800eed0 <__errno>
 8011380:	2316      	movs	r3, #22
 8011382:	6003      	str	r3, [r0, #0]
 8011384:	2000      	movs	r0, #0
 8011386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801138a:	4834      	ldr	r0, [pc, #208]	@ (801145c <_strtol_l.isra.0+0xf0>)
 801138c:	460d      	mov	r5, r1
 801138e:	462a      	mov	r2, r5
 8011390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011394:	5d06      	ldrb	r6, [r0, r4]
 8011396:	f016 0608 	ands.w	r6, r6, #8
 801139a:	d1f8      	bne.n	801138e <_strtol_l.isra.0+0x22>
 801139c:	2c2d      	cmp	r4, #45	@ 0x2d
 801139e:	d110      	bne.n	80113c2 <_strtol_l.isra.0+0x56>
 80113a0:	782c      	ldrb	r4, [r5, #0]
 80113a2:	2601      	movs	r6, #1
 80113a4:	1c95      	adds	r5, r2, #2
 80113a6:	f033 0210 	bics.w	r2, r3, #16
 80113aa:	d115      	bne.n	80113d8 <_strtol_l.isra.0+0x6c>
 80113ac:	2c30      	cmp	r4, #48	@ 0x30
 80113ae:	d10d      	bne.n	80113cc <_strtol_l.isra.0+0x60>
 80113b0:	782a      	ldrb	r2, [r5, #0]
 80113b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80113b6:	2a58      	cmp	r2, #88	@ 0x58
 80113b8:	d108      	bne.n	80113cc <_strtol_l.isra.0+0x60>
 80113ba:	786c      	ldrb	r4, [r5, #1]
 80113bc:	3502      	adds	r5, #2
 80113be:	2310      	movs	r3, #16
 80113c0:	e00a      	b.n	80113d8 <_strtol_l.isra.0+0x6c>
 80113c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80113c4:	bf04      	itt	eq
 80113c6:	782c      	ldrbeq	r4, [r5, #0]
 80113c8:	1c95      	addeq	r5, r2, #2
 80113ca:	e7ec      	b.n	80113a6 <_strtol_l.isra.0+0x3a>
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d1f6      	bne.n	80113be <_strtol_l.isra.0+0x52>
 80113d0:	2c30      	cmp	r4, #48	@ 0x30
 80113d2:	bf14      	ite	ne
 80113d4:	230a      	movne	r3, #10
 80113d6:	2308      	moveq	r3, #8
 80113d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80113dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80113e0:	2200      	movs	r2, #0
 80113e2:	fbbc f9f3 	udiv	r9, ip, r3
 80113e6:	4610      	mov	r0, r2
 80113e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80113ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80113f0:	2f09      	cmp	r7, #9
 80113f2:	d80f      	bhi.n	8011414 <_strtol_l.isra.0+0xa8>
 80113f4:	463c      	mov	r4, r7
 80113f6:	42a3      	cmp	r3, r4
 80113f8:	dd1b      	ble.n	8011432 <_strtol_l.isra.0+0xc6>
 80113fa:	1c57      	adds	r7, r2, #1
 80113fc:	d007      	beq.n	801140e <_strtol_l.isra.0+0xa2>
 80113fe:	4581      	cmp	r9, r0
 8011400:	d314      	bcc.n	801142c <_strtol_l.isra.0+0xc0>
 8011402:	d101      	bne.n	8011408 <_strtol_l.isra.0+0x9c>
 8011404:	45a2      	cmp	sl, r4
 8011406:	db11      	blt.n	801142c <_strtol_l.isra.0+0xc0>
 8011408:	fb00 4003 	mla	r0, r0, r3, r4
 801140c:	2201      	movs	r2, #1
 801140e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011412:	e7eb      	b.n	80113ec <_strtol_l.isra.0+0x80>
 8011414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011418:	2f19      	cmp	r7, #25
 801141a:	d801      	bhi.n	8011420 <_strtol_l.isra.0+0xb4>
 801141c:	3c37      	subs	r4, #55	@ 0x37
 801141e:	e7ea      	b.n	80113f6 <_strtol_l.isra.0+0x8a>
 8011420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011424:	2f19      	cmp	r7, #25
 8011426:	d804      	bhi.n	8011432 <_strtol_l.isra.0+0xc6>
 8011428:	3c57      	subs	r4, #87	@ 0x57
 801142a:	e7e4      	b.n	80113f6 <_strtol_l.isra.0+0x8a>
 801142c:	f04f 32ff 	mov.w	r2, #4294967295
 8011430:	e7ed      	b.n	801140e <_strtol_l.isra.0+0xa2>
 8011432:	1c53      	adds	r3, r2, #1
 8011434:	d108      	bne.n	8011448 <_strtol_l.isra.0+0xdc>
 8011436:	2322      	movs	r3, #34	@ 0x22
 8011438:	f8ce 3000 	str.w	r3, [lr]
 801143c:	4660      	mov	r0, ip
 801143e:	f1b8 0f00 	cmp.w	r8, #0
 8011442:	d0a0      	beq.n	8011386 <_strtol_l.isra.0+0x1a>
 8011444:	1e69      	subs	r1, r5, #1
 8011446:	e006      	b.n	8011456 <_strtol_l.isra.0+0xea>
 8011448:	b106      	cbz	r6, 801144c <_strtol_l.isra.0+0xe0>
 801144a:	4240      	negs	r0, r0
 801144c:	f1b8 0f00 	cmp.w	r8, #0
 8011450:	d099      	beq.n	8011386 <_strtol_l.isra.0+0x1a>
 8011452:	2a00      	cmp	r2, #0
 8011454:	d1f6      	bne.n	8011444 <_strtol_l.isra.0+0xd8>
 8011456:	f8c8 1000 	str.w	r1, [r8]
 801145a:	e794      	b.n	8011386 <_strtol_l.isra.0+0x1a>
 801145c:	08012c89 	.word	0x08012c89

08011460 <_strtol_r>:
 8011460:	f7ff bf84 	b.w	801136c <_strtol_l.isra.0>

08011464 <__ssputs_r>:
 8011464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011468:	688e      	ldr	r6, [r1, #8]
 801146a:	461f      	mov	r7, r3
 801146c:	42be      	cmp	r6, r7
 801146e:	680b      	ldr	r3, [r1, #0]
 8011470:	4682      	mov	sl, r0
 8011472:	460c      	mov	r4, r1
 8011474:	4690      	mov	r8, r2
 8011476:	d82d      	bhi.n	80114d4 <__ssputs_r+0x70>
 8011478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801147c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011480:	d026      	beq.n	80114d0 <__ssputs_r+0x6c>
 8011482:	6965      	ldr	r5, [r4, #20]
 8011484:	6909      	ldr	r1, [r1, #16]
 8011486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801148a:	eba3 0901 	sub.w	r9, r3, r1
 801148e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011492:	1c7b      	adds	r3, r7, #1
 8011494:	444b      	add	r3, r9
 8011496:	106d      	asrs	r5, r5, #1
 8011498:	429d      	cmp	r5, r3
 801149a:	bf38      	it	cc
 801149c:	461d      	movcc	r5, r3
 801149e:	0553      	lsls	r3, r2, #21
 80114a0:	d527      	bpl.n	80114f2 <__ssputs_r+0x8e>
 80114a2:	4629      	mov	r1, r5
 80114a4:	f7fe fc24 	bl	800fcf0 <_malloc_r>
 80114a8:	4606      	mov	r6, r0
 80114aa:	b360      	cbz	r0, 8011506 <__ssputs_r+0xa2>
 80114ac:	6921      	ldr	r1, [r4, #16]
 80114ae:	464a      	mov	r2, r9
 80114b0:	f7fd fd3b 	bl	800ef2a <memcpy>
 80114b4:	89a3      	ldrh	r3, [r4, #12]
 80114b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80114ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114be:	81a3      	strh	r3, [r4, #12]
 80114c0:	6126      	str	r6, [r4, #16]
 80114c2:	6165      	str	r5, [r4, #20]
 80114c4:	444e      	add	r6, r9
 80114c6:	eba5 0509 	sub.w	r5, r5, r9
 80114ca:	6026      	str	r6, [r4, #0]
 80114cc:	60a5      	str	r5, [r4, #8]
 80114ce:	463e      	mov	r6, r7
 80114d0:	42be      	cmp	r6, r7
 80114d2:	d900      	bls.n	80114d6 <__ssputs_r+0x72>
 80114d4:	463e      	mov	r6, r7
 80114d6:	6820      	ldr	r0, [r4, #0]
 80114d8:	4632      	mov	r2, r6
 80114da:	4641      	mov	r1, r8
 80114dc:	f000 fb6a 	bl	8011bb4 <memmove>
 80114e0:	68a3      	ldr	r3, [r4, #8]
 80114e2:	1b9b      	subs	r3, r3, r6
 80114e4:	60a3      	str	r3, [r4, #8]
 80114e6:	6823      	ldr	r3, [r4, #0]
 80114e8:	4433      	add	r3, r6
 80114ea:	6023      	str	r3, [r4, #0]
 80114ec:	2000      	movs	r0, #0
 80114ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114f2:	462a      	mov	r2, r5
 80114f4:	f000 ff41 	bl	801237a <_realloc_r>
 80114f8:	4606      	mov	r6, r0
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d1e0      	bne.n	80114c0 <__ssputs_r+0x5c>
 80114fe:	6921      	ldr	r1, [r4, #16]
 8011500:	4650      	mov	r0, sl
 8011502:	f7fe fb81 	bl	800fc08 <_free_r>
 8011506:	230c      	movs	r3, #12
 8011508:	f8ca 3000 	str.w	r3, [sl]
 801150c:	89a3      	ldrh	r3, [r4, #12]
 801150e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011512:	81a3      	strh	r3, [r4, #12]
 8011514:	f04f 30ff 	mov.w	r0, #4294967295
 8011518:	e7e9      	b.n	80114ee <__ssputs_r+0x8a>
	...

0801151c <_svfiprintf_r>:
 801151c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011520:	4698      	mov	r8, r3
 8011522:	898b      	ldrh	r3, [r1, #12]
 8011524:	061b      	lsls	r3, r3, #24
 8011526:	b09d      	sub	sp, #116	@ 0x74
 8011528:	4607      	mov	r7, r0
 801152a:	460d      	mov	r5, r1
 801152c:	4614      	mov	r4, r2
 801152e:	d510      	bpl.n	8011552 <_svfiprintf_r+0x36>
 8011530:	690b      	ldr	r3, [r1, #16]
 8011532:	b973      	cbnz	r3, 8011552 <_svfiprintf_r+0x36>
 8011534:	2140      	movs	r1, #64	@ 0x40
 8011536:	f7fe fbdb 	bl	800fcf0 <_malloc_r>
 801153a:	6028      	str	r0, [r5, #0]
 801153c:	6128      	str	r0, [r5, #16]
 801153e:	b930      	cbnz	r0, 801154e <_svfiprintf_r+0x32>
 8011540:	230c      	movs	r3, #12
 8011542:	603b      	str	r3, [r7, #0]
 8011544:	f04f 30ff 	mov.w	r0, #4294967295
 8011548:	b01d      	add	sp, #116	@ 0x74
 801154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154e:	2340      	movs	r3, #64	@ 0x40
 8011550:	616b      	str	r3, [r5, #20]
 8011552:	2300      	movs	r3, #0
 8011554:	9309      	str	r3, [sp, #36]	@ 0x24
 8011556:	2320      	movs	r3, #32
 8011558:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801155c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011560:	2330      	movs	r3, #48	@ 0x30
 8011562:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011700 <_svfiprintf_r+0x1e4>
 8011566:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801156a:	f04f 0901 	mov.w	r9, #1
 801156e:	4623      	mov	r3, r4
 8011570:	469a      	mov	sl, r3
 8011572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011576:	b10a      	cbz	r2, 801157c <_svfiprintf_r+0x60>
 8011578:	2a25      	cmp	r2, #37	@ 0x25
 801157a:	d1f9      	bne.n	8011570 <_svfiprintf_r+0x54>
 801157c:	ebba 0b04 	subs.w	fp, sl, r4
 8011580:	d00b      	beq.n	801159a <_svfiprintf_r+0x7e>
 8011582:	465b      	mov	r3, fp
 8011584:	4622      	mov	r2, r4
 8011586:	4629      	mov	r1, r5
 8011588:	4638      	mov	r0, r7
 801158a:	f7ff ff6b 	bl	8011464 <__ssputs_r>
 801158e:	3001      	adds	r0, #1
 8011590:	f000 80a7 	beq.w	80116e2 <_svfiprintf_r+0x1c6>
 8011594:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011596:	445a      	add	r2, fp
 8011598:	9209      	str	r2, [sp, #36]	@ 0x24
 801159a:	f89a 3000 	ldrb.w	r3, [sl]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 809f 	beq.w	80116e2 <_svfiprintf_r+0x1c6>
 80115a4:	2300      	movs	r3, #0
 80115a6:	f04f 32ff 	mov.w	r2, #4294967295
 80115aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115ae:	f10a 0a01 	add.w	sl, sl, #1
 80115b2:	9304      	str	r3, [sp, #16]
 80115b4:	9307      	str	r3, [sp, #28]
 80115b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80115bc:	4654      	mov	r4, sl
 80115be:	2205      	movs	r2, #5
 80115c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115c4:	484e      	ldr	r0, [pc, #312]	@ (8011700 <_svfiprintf_r+0x1e4>)
 80115c6:	f7ee fe03 	bl	80001d0 <memchr>
 80115ca:	9a04      	ldr	r2, [sp, #16]
 80115cc:	b9d8      	cbnz	r0, 8011606 <_svfiprintf_r+0xea>
 80115ce:	06d0      	lsls	r0, r2, #27
 80115d0:	bf44      	itt	mi
 80115d2:	2320      	movmi	r3, #32
 80115d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115d8:	0711      	lsls	r1, r2, #28
 80115da:	bf44      	itt	mi
 80115dc:	232b      	movmi	r3, #43	@ 0x2b
 80115de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80115e2:	f89a 3000 	ldrb.w	r3, [sl]
 80115e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80115e8:	d015      	beq.n	8011616 <_svfiprintf_r+0xfa>
 80115ea:	9a07      	ldr	r2, [sp, #28]
 80115ec:	4654      	mov	r4, sl
 80115ee:	2000      	movs	r0, #0
 80115f0:	f04f 0c0a 	mov.w	ip, #10
 80115f4:	4621      	mov	r1, r4
 80115f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115fa:	3b30      	subs	r3, #48	@ 0x30
 80115fc:	2b09      	cmp	r3, #9
 80115fe:	d94b      	bls.n	8011698 <_svfiprintf_r+0x17c>
 8011600:	b1b0      	cbz	r0, 8011630 <_svfiprintf_r+0x114>
 8011602:	9207      	str	r2, [sp, #28]
 8011604:	e014      	b.n	8011630 <_svfiprintf_r+0x114>
 8011606:	eba0 0308 	sub.w	r3, r0, r8
 801160a:	fa09 f303 	lsl.w	r3, r9, r3
 801160e:	4313      	orrs	r3, r2
 8011610:	9304      	str	r3, [sp, #16]
 8011612:	46a2      	mov	sl, r4
 8011614:	e7d2      	b.n	80115bc <_svfiprintf_r+0xa0>
 8011616:	9b03      	ldr	r3, [sp, #12]
 8011618:	1d19      	adds	r1, r3, #4
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	9103      	str	r1, [sp, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	bfbb      	ittet	lt
 8011622:	425b      	neglt	r3, r3
 8011624:	f042 0202 	orrlt.w	r2, r2, #2
 8011628:	9307      	strge	r3, [sp, #28]
 801162a:	9307      	strlt	r3, [sp, #28]
 801162c:	bfb8      	it	lt
 801162e:	9204      	strlt	r2, [sp, #16]
 8011630:	7823      	ldrb	r3, [r4, #0]
 8011632:	2b2e      	cmp	r3, #46	@ 0x2e
 8011634:	d10a      	bne.n	801164c <_svfiprintf_r+0x130>
 8011636:	7863      	ldrb	r3, [r4, #1]
 8011638:	2b2a      	cmp	r3, #42	@ 0x2a
 801163a:	d132      	bne.n	80116a2 <_svfiprintf_r+0x186>
 801163c:	9b03      	ldr	r3, [sp, #12]
 801163e:	1d1a      	adds	r2, r3, #4
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	9203      	str	r2, [sp, #12]
 8011644:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011648:	3402      	adds	r4, #2
 801164a:	9305      	str	r3, [sp, #20]
 801164c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011710 <_svfiprintf_r+0x1f4>
 8011650:	7821      	ldrb	r1, [r4, #0]
 8011652:	2203      	movs	r2, #3
 8011654:	4650      	mov	r0, sl
 8011656:	f7ee fdbb 	bl	80001d0 <memchr>
 801165a:	b138      	cbz	r0, 801166c <_svfiprintf_r+0x150>
 801165c:	9b04      	ldr	r3, [sp, #16]
 801165e:	eba0 000a 	sub.w	r0, r0, sl
 8011662:	2240      	movs	r2, #64	@ 0x40
 8011664:	4082      	lsls	r2, r0
 8011666:	4313      	orrs	r3, r2
 8011668:	3401      	adds	r4, #1
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011670:	4824      	ldr	r0, [pc, #144]	@ (8011704 <_svfiprintf_r+0x1e8>)
 8011672:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011676:	2206      	movs	r2, #6
 8011678:	f7ee fdaa 	bl	80001d0 <memchr>
 801167c:	2800      	cmp	r0, #0
 801167e:	d036      	beq.n	80116ee <_svfiprintf_r+0x1d2>
 8011680:	4b21      	ldr	r3, [pc, #132]	@ (8011708 <_svfiprintf_r+0x1ec>)
 8011682:	bb1b      	cbnz	r3, 80116cc <_svfiprintf_r+0x1b0>
 8011684:	9b03      	ldr	r3, [sp, #12]
 8011686:	3307      	adds	r3, #7
 8011688:	f023 0307 	bic.w	r3, r3, #7
 801168c:	3308      	adds	r3, #8
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011692:	4433      	add	r3, r6
 8011694:	9309      	str	r3, [sp, #36]	@ 0x24
 8011696:	e76a      	b.n	801156e <_svfiprintf_r+0x52>
 8011698:	fb0c 3202 	mla	r2, ip, r2, r3
 801169c:	460c      	mov	r4, r1
 801169e:	2001      	movs	r0, #1
 80116a0:	e7a8      	b.n	80115f4 <_svfiprintf_r+0xd8>
 80116a2:	2300      	movs	r3, #0
 80116a4:	3401      	adds	r4, #1
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	4619      	mov	r1, r3
 80116aa:	f04f 0c0a 	mov.w	ip, #10
 80116ae:	4620      	mov	r0, r4
 80116b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116b4:	3a30      	subs	r2, #48	@ 0x30
 80116b6:	2a09      	cmp	r2, #9
 80116b8:	d903      	bls.n	80116c2 <_svfiprintf_r+0x1a6>
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0c6      	beq.n	801164c <_svfiprintf_r+0x130>
 80116be:	9105      	str	r1, [sp, #20]
 80116c0:	e7c4      	b.n	801164c <_svfiprintf_r+0x130>
 80116c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80116c6:	4604      	mov	r4, r0
 80116c8:	2301      	movs	r3, #1
 80116ca:	e7f0      	b.n	80116ae <_svfiprintf_r+0x192>
 80116cc:	ab03      	add	r3, sp, #12
 80116ce:	9300      	str	r3, [sp, #0]
 80116d0:	462a      	mov	r2, r5
 80116d2:	4b0e      	ldr	r3, [pc, #56]	@ (801170c <_svfiprintf_r+0x1f0>)
 80116d4:	a904      	add	r1, sp, #16
 80116d6:	4638      	mov	r0, r7
 80116d8:	f7fc fbb8 	bl	800de4c <_printf_float>
 80116dc:	1c42      	adds	r2, r0, #1
 80116de:	4606      	mov	r6, r0
 80116e0:	d1d6      	bne.n	8011690 <_svfiprintf_r+0x174>
 80116e2:	89ab      	ldrh	r3, [r5, #12]
 80116e4:	065b      	lsls	r3, r3, #25
 80116e6:	f53f af2d 	bmi.w	8011544 <_svfiprintf_r+0x28>
 80116ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80116ec:	e72c      	b.n	8011548 <_svfiprintf_r+0x2c>
 80116ee:	ab03      	add	r3, sp, #12
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	462a      	mov	r2, r5
 80116f4:	4b05      	ldr	r3, [pc, #20]	@ (801170c <_svfiprintf_r+0x1f0>)
 80116f6:	a904      	add	r1, sp, #16
 80116f8:	4638      	mov	r0, r7
 80116fa:	f7fc fe3f 	bl	800e37c <_printf_i>
 80116fe:	e7ed      	b.n	80116dc <_svfiprintf_r+0x1c0>
 8011700:	08012a85 	.word	0x08012a85
 8011704:	08012a8f 	.word	0x08012a8f
 8011708:	0800de4d 	.word	0x0800de4d
 801170c:	08011465 	.word	0x08011465
 8011710:	08012a8b 	.word	0x08012a8b

08011714 <__sfputc_r>:
 8011714:	6893      	ldr	r3, [r2, #8]
 8011716:	3b01      	subs	r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	b410      	push	{r4}
 801171c:	6093      	str	r3, [r2, #8]
 801171e:	da08      	bge.n	8011732 <__sfputc_r+0x1e>
 8011720:	6994      	ldr	r4, [r2, #24]
 8011722:	42a3      	cmp	r3, r4
 8011724:	db01      	blt.n	801172a <__sfputc_r+0x16>
 8011726:	290a      	cmp	r1, #10
 8011728:	d103      	bne.n	8011732 <__sfputc_r+0x1e>
 801172a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801172e:	f7fd bae8 	b.w	800ed02 <__swbuf_r>
 8011732:	6813      	ldr	r3, [r2, #0]
 8011734:	1c58      	adds	r0, r3, #1
 8011736:	6010      	str	r0, [r2, #0]
 8011738:	7019      	strb	r1, [r3, #0]
 801173a:	4608      	mov	r0, r1
 801173c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011740:	4770      	bx	lr

08011742 <__sfputs_r>:
 8011742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011744:	4606      	mov	r6, r0
 8011746:	460f      	mov	r7, r1
 8011748:	4614      	mov	r4, r2
 801174a:	18d5      	adds	r5, r2, r3
 801174c:	42ac      	cmp	r4, r5
 801174e:	d101      	bne.n	8011754 <__sfputs_r+0x12>
 8011750:	2000      	movs	r0, #0
 8011752:	e007      	b.n	8011764 <__sfputs_r+0x22>
 8011754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011758:	463a      	mov	r2, r7
 801175a:	4630      	mov	r0, r6
 801175c:	f7ff ffda 	bl	8011714 <__sfputc_r>
 8011760:	1c43      	adds	r3, r0, #1
 8011762:	d1f3      	bne.n	801174c <__sfputs_r+0xa>
 8011764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011768 <_vfiprintf_r>:
 8011768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	460d      	mov	r5, r1
 801176e:	b09d      	sub	sp, #116	@ 0x74
 8011770:	4614      	mov	r4, r2
 8011772:	4698      	mov	r8, r3
 8011774:	4606      	mov	r6, r0
 8011776:	b118      	cbz	r0, 8011780 <_vfiprintf_r+0x18>
 8011778:	6a03      	ldr	r3, [r0, #32]
 801177a:	b90b      	cbnz	r3, 8011780 <_vfiprintf_r+0x18>
 801177c:	f7fd f9b6 	bl	800eaec <__sinit>
 8011780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011782:	07d9      	lsls	r1, r3, #31
 8011784:	d405      	bmi.n	8011792 <_vfiprintf_r+0x2a>
 8011786:	89ab      	ldrh	r3, [r5, #12]
 8011788:	059a      	lsls	r2, r3, #22
 801178a:	d402      	bmi.n	8011792 <_vfiprintf_r+0x2a>
 801178c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801178e:	f7fd fbca 	bl	800ef26 <__retarget_lock_acquire_recursive>
 8011792:	89ab      	ldrh	r3, [r5, #12]
 8011794:	071b      	lsls	r3, r3, #28
 8011796:	d501      	bpl.n	801179c <_vfiprintf_r+0x34>
 8011798:	692b      	ldr	r3, [r5, #16]
 801179a:	b99b      	cbnz	r3, 80117c4 <_vfiprintf_r+0x5c>
 801179c:	4629      	mov	r1, r5
 801179e:	4630      	mov	r0, r6
 80117a0:	f7fd faee 	bl	800ed80 <__swsetup_r>
 80117a4:	b170      	cbz	r0, 80117c4 <_vfiprintf_r+0x5c>
 80117a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117a8:	07dc      	lsls	r4, r3, #31
 80117aa:	d504      	bpl.n	80117b6 <_vfiprintf_r+0x4e>
 80117ac:	f04f 30ff 	mov.w	r0, #4294967295
 80117b0:	b01d      	add	sp, #116	@ 0x74
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b6:	89ab      	ldrh	r3, [r5, #12]
 80117b8:	0598      	lsls	r0, r3, #22
 80117ba:	d4f7      	bmi.n	80117ac <_vfiprintf_r+0x44>
 80117bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117be:	f7fd fbb3 	bl	800ef28 <__retarget_lock_release_recursive>
 80117c2:	e7f3      	b.n	80117ac <_vfiprintf_r+0x44>
 80117c4:	2300      	movs	r3, #0
 80117c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80117c8:	2320      	movs	r3, #32
 80117ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80117d2:	2330      	movs	r3, #48	@ 0x30
 80117d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011984 <_vfiprintf_r+0x21c>
 80117d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117dc:	f04f 0901 	mov.w	r9, #1
 80117e0:	4623      	mov	r3, r4
 80117e2:	469a      	mov	sl, r3
 80117e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117e8:	b10a      	cbz	r2, 80117ee <_vfiprintf_r+0x86>
 80117ea:	2a25      	cmp	r2, #37	@ 0x25
 80117ec:	d1f9      	bne.n	80117e2 <_vfiprintf_r+0x7a>
 80117ee:	ebba 0b04 	subs.w	fp, sl, r4
 80117f2:	d00b      	beq.n	801180c <_vfiprintf_r+0xa4>
 80117f4:	465b      	mov	r3, fp
 80117f6:	4622      	mov	r2, r4
 80117f8:	4629      	mov	r1, r5
 80117fa:	4630      	mov	r0, r6
 80117fc:	f7ff ffa1 	bl	8011742 <__sfputs_r>
 8011800:	3001      	adds	r0, #1
 8011802:	f000 80a7 	beq.w	8011954 <_vfiprintf_r+0x1ec>
 8011806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011808:	445a      	add	r2, fp
 801180a:	9209      	str	r2, [sp, #36]	@ 0x24
 801180c:	f89a 3000 	ldrb.w	r3, [sl]
 8011810:	2b00      	cmp	r3, #0
 8011812:	f000 809f 	beq.w	8011954 <_vfiprintf_r+0x1ec>
 8011816:	2300      	movs	r3, #0
 8011818:	f04f 32ff 	mov.w	r2, #4294967295
 801181c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011820:	f10a 0a01 	add.w	sl, sl, #1
 8011824:	9304      	str	r3, [sp, #16]
 8011826:	9307      	str	r3, [sp, #28]
 8011828:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801182c:	931a      	str	r3, [sp, #104]	@ 0x68
 801182e:	4654      	mov	r4, sl
 8011830:	2205      	movs	r2, #5
 8011832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011836:	4853      	ldr	r0, [pc, #332]	@ (8011984 <_vfiprintf_r+0x21c>)
 8011838:	f7ee fcca 	bl	80001d0 <memchr>
 801183c:	9a04      	ldr	r2, [sp, #16]
 801183e:	b9d8      	cbnz	r0, 8011878 <_vfiprintf_r+0x110>
 8011840:	06d1      	lsls	r1, r2, #27
 8011842:	bf44      	itt	mi
 8011844:	2320      	movmi	r3, #32
 8011846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801184a:	0713      	lsls	r3, r2, #28
 801184c:	bf44      	itt	mi
 801184e:	232b      	movmi	r3, #43	@ 0x2b
 8011850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011854:	f89a 3000 	ldrb.w	r3, [sl]
 8011858:	2b2a      	cmp	r3, #42	@ 0x2a
 801185a:	d015      	beq.n	8011888 <_vfiprintf_r+0x120>
 801185c:	9a07      	ldr	r2, [sp, #28]
 801185e:	4654      	mov	r4, sl
 8011860:	2000      	movs	r0, #0
 8011862:	f04f 0c0a 	mov.w	ip, #10
 8011866:	4621      	mov	r1, r4
 8011868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801186c:	3b30      	subs	r3, #48	@ 0x30
 801186e:	2b09      	cmp	r3, #9
 8011870:	d94b      	bls.n	801190a <_vfiprintf_r+0x1a2>
 8011872:	b1b0      	cbz	r0, 80118a2 <_vfiprintf_r+0x13a>
 8011874:	9207      	str	r2, [sp, #28]
 8011876:	e014      	b.n	80118a2 <_vfiprintf_r+0x13a>
 8011878:	eba0 0308 	sub.w	r3, r0, r8
 801187c:	fa09 f303 	lsl.w	r3, r9, r3
 8011880:	4313      	orrs	r3, r2
 8011882:	9304      	str	r3, [sp, #16]
 8011884:	46a2      	mov	sl, r4
 8011886:	e7d2      	b.n	801182e <_vfiprintf_r+0xc6>
 8011888:	9b03      	ldr	r3, [sp, #12]
 801188a:	1d19      	adds	r1, r3, #4
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	9103      	str	r1, [sp, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	bfbb      	ittet	lt
 8011894:	425b      	neglt	r3, r3
 8011896:	f042 0202 	orrlt.w	r2, r2, #2
 801189a:	9307      	strge	r3, [sp, #28]
 801189c:	9307      	strlt	r3, [sp, #28]
 801189e:	bfb8      	it	lt
 80118a0:	9204      	strlt	r2, [sp, #16]
 80118a2:	7823      	ldrb	r3, [r4, #0]
 80118a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80118a6:	d10a      	bne.n	80118be <_vfiprintf_r+0x156>
 80118a8:	7863      	ldrb	r3, [r4, #1]
 80118aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80118ac:	d132      	bne.n	8011914 <_vfiprintf_r+0x1ac>
 80118ae:	9b03      	ldr	r3, [sp, #12]
 80118b0:	1d1a      	adds	r2, r3, #4
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	9203      	str	r2, [sp, #12]
 80118b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118ba:	3402      	adds	r4, #2
 80118bc:	9305      	str	r3, [sp, #20]
 80118be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011994 <_vfiprintf_r+0x22c>
 80118c2:	7821      	ldrb	r1, [r4, #0]
 80118c4:	2203      	movs	r2, #3
 80118c6:	4650      	mov	r0, sl
 80118c8:	f7ee fc82 	bl	80001d0 <memchr>
 80118cc:	b138      	cbz	r0, 80118de <_vfiprintf_r+0x176>
 80118ce:	9b04      	ldr	r3, [sp, #16]
 80118d0:	eba0 000a 	sub.w	r0, r0, sl
 80118d4:	2240      	movs	r2, #64	@ 0x40
 80118d6:	4082      	lsls	r2, r0
 80118d8:	4313      	orrs	r3, r2
 80118da:	3401      	adds	r4, #1
 80118dc:	9304      	str	r3, [sp, #16]
 80118de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118e2:	4829      	ldr	r0, [pc, #164]	@ (8011988 <_vfiprintf_r+0x220>)
 80118e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118e8:	2206      	movs	r2, #6
 80118ea:	f7ee fc71 	bl	80001d0 <memchr>
 80118ee:	2800      	cmp	r0, #0
 80118f0:	d03f      	beq.n	8011972 <_vfiprintf_r+0x20a>
 80118f2:	4b26      	ldr	r3, [pc, #152]	@ (801198c <_vfiprintf_r+0x224>)
 80118f4:	bb1b      	cbnz	r3, 801193e <_vfiprintf_r+0x1d6>
 80118f6:	9b03      	ldr	r3, [sp, #12]
 80118f8:	3307      	adds	r3, #7
 80118fa:	f023 0307 	bic.w	r3, r3, #7
 80118fe:	3308      	adds	r3, #8
 8011900:	9303      	str	r3, [sp, #12]
 8011902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011904:	443b      	add	r3, r7
 8011906:	9309      	str	r3, [sp, #36]	@ 0x24
 8011908:	e76a      	b.n	80117e0 <_vfiprintf_r+0x78>
 801190a:	fb0c 3202 	mla	r2, ip, r2, r3
 801190e:	460c      	mov	r4, r1
 8011910:	2001      	movs	r0, #1
 8011912:	e7a8      	b.n	8011866 <_vfiprintf_r+0xfe>
 8011914:	2300      	movs	r3, #0
 8011916:	3401      	adds	r4, #1
 8011918:	9305      	str	r3, [sp, #20]
 801191a:	4619      	mov	r1, r3
 801191c:	f04f 0c0a 	mov.w	ip, #10
 8011920:	4620      	mov	r0, r4
 8011922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011926:	3a30      	subs	r2, #48	@ 0x30
 8011928:	2a09      	cmp	r2, #9
 801192a:	d903      	bls.n	8011934 <_vfiprintf_r+0x1cc>
 801192c:	2b00      	cmp	r3, #0
 801192e:	d0c6      	beq.n	80118be <_vfiprintf_r+0x156>
 8011930:	9105      	str	r1, [sp, #20]
 8011932:	e7c4      	b.n	80118be <_vfiprintf_r+0x156>
 8011934:	fb0c 2101 	mla	r1, ip, r1, r2
 8011938:	4604      	mov	r4, r0
 801193a:	2301      	movs	r3, #1
 801193c:	e7f0      	b.n	8011920 <_vfiprintf_r+0x1b8>
 801193e:	ab03      	add	r3, sp, #12
 8011940:	9300      	str	r3, [sp, #0]
 8011942:	462a      	mov	r2, r5
 8011944:	4b12      	ldr	r3, [pc, #72]	@ (8011990 <_vfiprintf_r+0x228>)
 8011946:	a904      	add	r1, sp, #16
 8011948:	4630      	mov	r0, r6
 801194a:	f7fc fa7f 	bl	800de4c <_printf_float>
 801194e:	4607      	mov	r7, r0
 8011950:	1c78      	adds	r0, r7, #1
 8011952:	d1d6      	bne.n	8011902 <_vfiprintf_r+0x19a>
 8011954:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011956:	07d9      	lsls	r1, r3, #31
 8011958:	d405      	bmi.n	8011966 <_vfiprintf_r+0x1fe>
 801195a:	89ab      	ldrh	r3, [r5, #12]
 801195c:	059a      	lsls	r2, r3, #22
 801195e:	d402      	bmi.n	8011966 <_vfiprintf_r+0x1fe>
 8011960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011962:	f7fd fae1 	bl	800ef28 <__retarget_lock_release_recursive>
 8011966:	89ab      	ldrh	r3, [r5, #12]
 8011968:	065b      	lsls	r3, r3, #25
 801196a:	f53f af1f 	bmi.w	80117ac <_vfiprintf_r+0x44>
 801196e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011970:	e71e      	b.n	80117b0 <_vfiprintf_r+0x48>
 8011972:	ab03      	add	r3, sp, #12
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	462a      	mov	r2, r5
 8011978:	4b05      	ldr	r3, [pc, #20]	@ (8011990 <_vfiprintf_r+0x228>)
 801197a:	a904      	add	r1, sp, #16
 801197c:	4630      	mov	r0, r6
 801197e:	f7fc fcfd 	bl	800e37c <_printf_i>
 8011982:	e7e4      	b.n	801194e <_vfiprintf_r+0x1e6>
 8011984:	08012a85 	.word	0x08012a85
 8011988:	08012a8f 	.word	0x08012a8f
 801198c:	0800de4d 	.word	0x0800de4d
 8011990:	08011743 	.word	0x08011743
 8011994:	08012a8b 	.word	0x08012a8b

08011998 <__sflush_r>:
 8011998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801199c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a0:	0716      	lsls	r6, r2, #28
 80119a2:	4605      	mov	r5, r0
 80119a4:	460c      	mov	r4, r1
 80119a6:	d454      	bmi.n	8011a52 <__sflush_r+0xba>
 80119a8:	684b      	ldr	r3, [r1, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dc02      	bgt.n	80119b4 <__sflush_r+0x1c>
 80119ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dd48      	ble.n	8011a46 <__sflush_r+0xae>
 80119b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119b6:	2e00      	cmp	r6, #0
 80119b8:	d045      	beq.n	8011a46 <__sflush_r+0xae>
 80119ba:	2300      	movs	r3, #0
 80119bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80119c0:	682f      	ldr	r7, [r5, #0]
 80119c2:	6a21      	ldr	r1, [r4, #32]
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	d030      	beq.n	8011a2a <__sflush_r+0x92>
 80119c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80119ca:	89a3      	ldrh	r3, [r4, #12]
 80119cc:	0759      	lsls	r1, r3, #29
 80119ce:	d505      	bpl.n	80119dc <__sflush_r+0x44>
 80119d0:	6863      	ldr	r3, [r4, #4]
 80119d2:	1ad2      	subs	r2, r2, r3
 80119d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119d6:	b10b      	cbz	r3, 80119dc <__sflush_r+0x44>
 80119d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119da:	1ad2      	subs	r2, r2, r3
 80119dc:	2300      	movs	r3, #0
 80119de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119e0:	6a21      	ldr	r1, [r4, #32]
 80119e2:	4628      	mov	r0, r5
 80119e4:	47b0      	blx	r6
 80119e6:	1c43      	adds	r3, r0, #1
 80119e8:	89a3      	ldrh	r3, [r4, #12]
 80119ea:	d106      	bne.n	80119fa <__sflush_r+0x62>
 80119ec:	6829      	ldr	r1, [r5, #0]
 80119ee:	291d      	cmp	r1, #29
 80119f0:	d82b      	bhi.n	8011a4a <__sflush_r+0xb2>
 80119f2:	4a2a      	ldr	r2, [pc, #168]	@ (8011a9c <__sflush_r+0x104>)
 80119f4:	40ca      	lsrs	r2, r1
 80119f6:	07d6      	lsls	r6, r2, #31
 80119f8:	d527      	bpl.n	8011a4a <__sflush_r+0xb2>
 80119fa:	2200      	movs	r2, #0
 80119fc:	6062      	str	r2, [r4, #4]
 80119fe:	04d9      	lsls	r1, r3, #19
 8011a00:	6922      	ldr	r2, [r4, #16]
 8011a02:	6022      	str	r2, [r4, #0]
 8011a04:	d504      	bpl.n	8011a10 <__sflush_r+0x78>
 8011a06:	1c42      	adds	r2, r0, #1
 8011a08:	d101      	bne.n	8011a0e <__sflush_r+0x76>
 8011a0a:	682b      	ldr	r3, [r5, #0]
 8011a0c:	b903      	cbnz	r3, 8011a10 <__sflush_r+0x78>
 8011a0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011a10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a12:	602f      	str	r7, [r5, #0]
 8011a14:	b1b9      	cbz	r1, 8011a46 <__sflush_r+0xae>
 8011a16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a1a:	4299      	cmp	r1, r3
 8011a1c:	d002      	beq.n	8011a24 <__sflush_r+0x8c>
 8011a1e:	4628      	mov	r0, r5
 8011a20:	f7fe f8f2 	bl	800fc08 <_free_r>
 8011a24:	2300      	movs	r3, #0
 8011a26:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a28:	e00d      	b.n	8011a46 <__sflush_r+0xae>
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	4628      	mov	r0, r5
 8011a2e:	47b0      	blx	r6
 8011a30:	4602      	mov	r2, r0
 8011a32:	1c50      	adds	r0, r2, #1
 8011a34:	d1c9      	bne.n	80119ca <__sflush_r+0x32>
 8011a36:	682b      	ldr	r3, [r5, #0]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d0c6      	beq.n	80119ca <__sflush_r+0x32>
 8011a3c:	2b1d      	cmp	r3, #29
 8011a3e:	d001      	beq.n	8011a44 <__sflush_r+0xac>
 8011a40:	2b16      	cmp	r3, #22
 8011a42:	d11e      	bne.n	8011a82 <__sflush_r+0xea>
 8011a44:	602f      	str	r7, [r5, #0]
 8011a46:	2000      	movs	r0, #0
 8011a48:	e022      	b.n	8011a90 <__sflush_r+0xf8>
 8011a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a4e:	b21b      	sxth	r3, r3
 8011a50:	e01b      	b.n	8011a8a <__sflush_r+0xf2>
 8011a52:	690f      	ldr	r7, [r1, #16]
 8011a54:	2f00      	cmp	r7, #0
 8011a56:	d0f6      	beq.n	8011a46 <__sflush_r+0xae>
 8011a58:	0793      	lsls	r3, r2, #30
 8011a5a:	680e      	ldr	r6, [r1, #0]
 8011a5c:	bf08      	it	eq
 8011a5e:	694b      	ldreq	r3, [r1, #20]
 8011a60:	600f      	str	r7, [r1, #0]
 8011a62:	bf18      	it	ne
 8011a64:	2300      	movne	r3, #0
 8011a66:	eba6 0807 	sub.w	r8, r6, r7
 8011a6a:	608b      	str	r3, [r1, #8]
 8011a6c:	f1b8 0f00 	cmp.w	r8, #0
 8011a70:	dde9      	ble.n	8011a46 <__sflush_r+0xae>
 8011a72:	6a21      	ldr	r1, [r4, #32]
 8011a74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a76:	4643      	mov	r3, r8
 8011a78:	463a      	mov	r2, r7
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	47b0      	blx	r6
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	dc08      	bgt.n	8011a94 <__sflush_r+0xfc>
 8011a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a8a:	81a3      	strh	r3, [r4, #12]
 8011a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a94:	4407      	add	r7, r0
 8011a96:	eba8 0800 	sub.w	r8, r8, r0
 8011a9a:	e7e7      	b.n	8011a6c <__sflush_r+0xd4>
 8011a9c:	20400001 	.word	0x20400001

08011aa0 <_fflush_r>:
 8011aa0:	b538      	push	{r3, r4, r5, lr}
 8011aa2:	690b      	ldr	r3, [r1, #16]
 8011aa4:	4605      	mov	r5, r0
 8011aa6:	460c      	mov	r4, r1
 8011aa8:	b913      	cbnz	r3, 8011ab0 <_fflush_r+0x10>
 8011aaa:	2500      	movs	r5, #0
 8011aac:	4628      	mov	r0, r5
 8011aae:	bd38      	pop	{r3, r4, r5, pc}
 8011ab0:	b118      	cbz	r0, 8011aba <_fflush_r+0x1a>
 8011ab2:	6a03      	ldr	r3, [r0, #32]
 8011ab4:	b90b      	cbnz	r3, 8011aba <_fflush_r+0x1a>
 8011ab6:	f7fd f819 	bl	800eaec <__sinit>
 8011aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d0f3      	beq.n	8011aaa <_fflush_r+0xa>
 8011ac2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011ac4:	07d0      	lsls	r0, r2, #31
 8011ac6:	d404      	bmi.n	8011ad2 <_fflush_r+0x32>
 8011ac8:	0599      	lsls	r1, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_fflush_r+0x32>
 8011acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ace:	f7fd fa2a 	bl	800ef26 <__retarget_lock_acquire_recursive>
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	4621      	mov	r1, r4
 8011ad6:	f7ff ff5f 	bl	8011998 <__sflush_r>
 8011ada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011adc:	07da      	lsls	r2, r3, #31
 8011ade:	4605      	mov	r5, r0
 8011ae0:	d4e4      	bmi.n	8011aac <_fflush_r+0xc>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	059b      	lsls	r3, r3, #22
 8011ae6:	d4e1      	bmi.n	8011aac <_fflush_r+0xc>
 8011ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011aea:	f7fd fa1d 	bl	800ef28 <__retarget_lock_release_recursive>
 8011aee:	e7dd      	b.n	8011aac <_fflush_r+0xc>

08011af0 <__swhatbuf_r>:
 8011af0:	b570      	push	{r4, r5, r6, lr}
 8011af2:	460c      	mov	r4, r1
 8011af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af8:	2900      	cmp	r1, #0
 8011afa:	b096      	sub	sp, #88	@ 0x58
 8011afc:	4615      	mov	r5, r2
 8011afe:	461e      	mov	r6, r3
 8011b00:	da0d      	bge.n	8011b1e <__swhatbuf_r+0x2e>
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b08:	f04f 0100 	mov.w	r1, #0
 8011b0c:	bf14      	ite	ne
 8011b0e:	2340      	movne	r3, #64	@ 0x40
 8011b10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b14:	2000      	movs	r0, #0
 8011b16:	6031      	str	r1, [r6, #0]
 8011b18:	602b      	str	r3, [r5, #0]
 8011b1a:	b016      	add	sp, #88	@ 0x58
 8011b1c:	bd70      	pop	{r4, r5, r6, pc}
 8011b1e:	466a      	mov	r2, sp
 8011b20:	f000 f874 	bl	8011c0c <_fstat_r>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	dbec      	blt.n	8011b02 <__swhatbuf_r+0x12>
 8011b28:	9901      	ldr	r1, [sp, #4]
 8011b2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b32:	4259      	negs	r1, r3
 8011b34:	4159      	adcs	r1, r3
 8011b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b3a:	e7eb      	b.n	8011b14 <__swhatbuf_r+0x24>

08011b3c <__smakebuf_r>:
 8011b3c:	898b      	ldrh	r3, [r1, #12]
 8011b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b40:	079d      	lsls	r5, r3, #30
 8011b42:	4606      	mov	r6, r0
 8011b44:	460c      	mov	r4, r1
 8011b46:	d507      	bpl.n	8011b58 <__smakebuf_r+0x1c>
 8011b48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b4c:	6023      	str	r3, [r4, #0]
 8011b4e:	6123      	str	r3, [r4, #16]
 8011b50:	2301      	movs	r3, #1
 8011b52:	6163      	str	r3, [r4, #20]
 8011b54:	b003      	add	sp, #12
 8011b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b58:	ab01      	add	r3, sp, #4
 8011b5a:	466a      	mov	r2, sp
 8011b5c:	f7ff ffc8 	bl	8011af0 <__swhatbuf_r>
 8011b60:	9f00      	ldr	r7, [sp, #0]
 8011b62:	4605      	mov	r5, r0
 8011b64:	4639      	mov	r1, r7
 8011b66:	4630      	mov	r0, r6
 8011b68:	f7fe f8c2 	bl	800fcf0 <_malloc_r>
 8011b6c:	b948      	cbnz	r0, 8011b82 <__smakebuf_r+0x46>
 8011b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b72:	059a      	lsls	r2, r3, #22
 8011b74:	d4ee      	bmi.n	8011b54 <__smakebuf_r+0x18>
 8011b76:	f023 0303 	bic.w	r3, r3, #3
 8011b7a:	f043 0302 	orr.w	r3, r3, #2
 8011b7e:	81a3      	strh	r3, [r4, #12]
 8011b80:	e7e2      	b.n	8011b48 <__smakebuf_r+0xc>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	6020      	str	r0, [r4, #0]
 8011b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	9b01      	ldr	r3, [sp, #4]
 8011b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b92:	b15b      	cbz	r3, 8011bac <__smakebuf_r+0x70>
 8011b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b98:	4630      	mov	r0, r6
 8011b9a:	f000 f849 	bl	8011c30 <_isatty_r>
 8011b9e:	b128      	cbz	r0, 8011bac <__smakebuf_r+0x70>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	f023 0303 	bic.w	r3, r3, #3
 8011ba6:	f043 0301 	orr.w	r3, r3, #1
 8011baa:	81a3      	strh	r3, [r4, #12]
 8011bac:	89a3      	ldrh	r3, [r4, #12]
 8011bae:	431d      	orrs	r5, r3
 8011bb0:	81a5      	strh	r5, [r4, #12]
 8011bb2:	e7cf      	b.n	8011b54 <__smakebuf_r+0x18>

08011bb4 <memmove>:
 8011bb4:	4288      	cmp	r0, r1
 8011bb6:	b510      	push	{r4, lr}
 8011bb8:	eb01 0402 	add.w	r4, r1, r2
 8011bbc:	d902      	bls.n	8011bc4 <memmove+0x10>
 8011bbe:	4284      	cmp	r4, r0
 8011bc0:	4623      	mov	r3, r4
 8011bc2:	d807      	bhi.n	8011bd4 <memmove+0x20>
 8011bc4:	1e43      	subs	r3, r0, #1
 8011bc6:	42a1      	cmp	r1, r4
 8011bc8:	d008      	beq.n	8011bdc <memmove+0x28>
 8011bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bd2:	e7f8      	b.n	8011bc6 <memmove+0x12>
 8011bd4:	4402      	add	r2, r0
 8011bd6:	4601      	mov	r1, r0
 8011bd8:	428a      	cmp	r2, r1
 8011bda:	d100      	bne.n	8011bde <memmove+0x2a>
 8011bdc:	bd10      	pop	{r4, pc}
 8011bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011be6:	e7f7      	b.n	8011bd8 <memmove+0x24>

08011be8 <strncmp>:
 8011be8:	b510      	push	{r4, lr}
 8011bea:	b16a      	cbz	r2, 8011c08 <strncmp+0x20>
 8011bec:	3901      	subs	r1, #1
 8011bee:	1884      	adds	r4, r0, r2
 8011bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d103      	bne.n	8011c04 <strncmp+0x1c>
 8011bfc:	42a0      	cmp	r0, r4
 8011bfe:	d001      	beq.n	8011c04 <strncmp+0x1c>
 8011c00:	2a00      	cmp	r2, #0
 8011c02:	d1f5      	bne.n	8011bf0 <strncmp+0x8>
 8011c04:	1ad0      	subs	r0, r2, r3
 8011c06:	bd10      	pop	{r4, pc}
 8011c08:	4610      	mov	r0, r2
 8011c0a:	e7fc      	b.n	8011c06 <strncmp+0x1e>

08011c0c <_fstat_r>:
 8011c0c:	b538      	push	{r3, r4, r5, lr}
 8011c0e:	4d07      	ldr	r5, [pc, #28]	@ (8011c2c <_fstat_r+0x20>)
 8011c10:	2300      	movs	r3, #0
 8011c12:	4604      	mov	r4, r0
 8011c14:	4608      	mov	r0, r1
 8011c16:	4611      	mov	r1, r2
 8011c18:	602b      	str	r3, [r5, #0]
 8011c1a:	f7ef fdff 	bl	800181c <_fstat>
 8011c1e:	1c43      	adds	r3, r0, #1
 8011c20:	d102      	bne.n	8011c28 <_fstat_r+0x1c>
 8011c22:	682b      	ldr	r3, [r5, #0]
 8011c24:	b103      	cbz	r3, 8011c28 <_fstat_r+0x1c>
 8011c26:	6023      	str	r3, [r4, #0]
 8011c28:	bd38      	pop	{r3, r4, r5, pc}
 8011c2a:	bf00      	nop
 8011c2c:	20002700 	.word	0x20002700

08011c30 <_isatty_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d06      	ldr	r5, [pc, #24]	@ (8011c4c <_isatty_r+0x1c>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4604      	mov	r4, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	602b      	str	r3, [r5, #0]
 8011c3c:	f7ef fdfe 	bl	800183c <_isatty>
 8011c40:	1c43      	adds	r3, r0, #1
 8011c42:	d102      	bne.n	8011c4a <_isatty_r+0x1a>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	b103      	cbz	r3, 8011c4a <_isatty_r+0x1a>
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	bd38      	pop	{r3, r4, r5, pc}
 8011c4c:	20002700 	.word	0x20002700

08011c50 <_sbrk_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4d06      	ldr	r5, [pc, #24]	@ (8011c6c <_sbrk_r+0x1c>)
 8011c54:	2300      	movs	r3, #0
 8011c56:	4604      	mov	r4, r0
 8011c58:	4608      	mov	r0, r1
 8011c5a:	602b      	str	r3, [r5, #0]
 8011c5c:	f000 fc2e 	bl	80124bc <_sbrk>
 8011c60:	1c43      	adds	r3, r0, #1
 8011c62:	d102      	bne.n	8011c6a <_sbrk_r+0x1a>
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	b103      	cbz	r3, 8011c6a <_sbrk_r+0x1a>
 8011c68:	6023      	str	r3, [r4, #0]
 8011c6a:	bd38      	pop	{r3, r4, r5, pc}
 8011c6c:	20002700 	.word	0x20002700

08011c70 <nan>:
 8011c70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011c78 <nan+0x8>
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop
 8011c78:	00000000 	.word	0x00000000
 8011c7c:	7ff80000 	.word	0x7ff80000

08011c80 <__assert_func>:
 8011c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c82:	4614      	mov	r4, r2
 8011c84:	461a      	mov	r2, r3
 8011c86:	4b09      	ldr	r3, [pc, #36]	@ (8011cac <__assert_func+0x2c>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	68d8      	ldr	r0, [r3, #12]
 8011c8e:	b14c      	cbz	r4, 8011ca4 <__assert_func+0x24>
 8011c90:	4b07      	ldr	r3, [pc, #28]	@ (8011cb0 <__assert_func+0x30>)
 8011c92:	9100      	str	r1, [sp, #0]
 8011c94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c98:	4906      	ldr	r1, [pc, #24]	@ (8011cb4 <__assert_func+0x34>)
 8011c9a:	462b      	mov	r3, r5
 8011c9c:	f000 fba8 	bl	80123f0 <fiprintf>
 8011ca0:	f000 fbb8 	bl	8012414 <abort>
 8011ca4:	4b04      	ldr	r3, [pc, #16]	@ (8011cb8 <__assert_func+0x38>)
 8011ca6:	461c      	mov	r4, r3
 8011ca8:	e7f3      	b.n	8011c92 <__assert_func+0x12>
 8011caa:	bf00      	nop
 8011cac:	20000118 	.word	0x20000118
 8011cb0:	08012a9e 	.word	0x08012a9e
 8011cb4:	08012aab 	.word	0x08012aab
 8011cb8:	08012ad9 	.word	0x08012ad9

08011cbc <_calloc_r>:
 8011cbc:	b570      	push	{r4, r5, r6, lr}
 8011cbe:	fba1 5402 	umull	r5, r4, r1, r2
 8011cc2:	b934      	cbnz	r4, 8011cd2 <_calloc_r+0x16>
 8011cc4:	4629      	mov	r1, r5
 8011cc6:	f7fe f813 	bl	800fcf0 <_malloc_r>
 8011cca:	4606      	mov	r6, r0
 8011ccc:	b928      	cbnz	r0, 8011cda <_calloc_r+0x1e>
 8011cce:	4630      	mov	r0, r6
 8011cd0:	bd70      	pop	{r4, r5, r6, pc}
 8011cd2:	220c      	movs	r2, #12
 8011cd4:	6002      	str	r2, [r0, #0]
 8011cd6:	2600      	movs	r6, #0
 8011cd8:	e7f9      	b.n	8011cce <_calloc_r+0x12>
 8011cda:	462a      	mov	r2, r5
 8011cdc:	4621      	mov	r1, r4
 8011cde:	f7fd f8a5 	bl	800ee2c <memset>
 8011ce2:	e7f4      	b.n	8011cce <_calloc_r+0x12>

08011ce4 <rshift>:
 8011ce4:	6903      	ldr	r3, [r0, #16]
 8011ce6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011cea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011cf2:	f100 0414 	add.w	r4, r0, #20
 8011cf6:	dd45      	ble.n	8011d84 <rshift+0xa0>
 8011cf8:	f011 011f 	ands.w	r1, r1, #31
 8011cfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011d00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011d04:	d10c      	bne.n	8011d20 <rshift+0x3c>
 8011d06:	f100 0710 	add.w	r7, r0, #16
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	42b1      	cmp	r1, r6
 8011d0e:	d334      	bcc.n	8011d7a <rshift+0x96>
 8011d10:	1a9b      	subs	r3, r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	1eea      	subs	r2, r5, #3
 8011d16:	4296      	cmp	r6, r2
 8011d18:	bf38      	it	cc
 8011d1a:	2300      	movcc	r3, #0
 8011d1c:	4423      	add	r3, r4
 8011d1e:	e015      	b.n	8011d4c <rshift+0x68>
 8011d20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011d24:	f1c1 0820 	rsb	r8, r1, #32
 8011d28:	40cf      	lsrs	r7, r1
 8011d2a:	f105 0e04 	add.w	lr, r5, #4
 8011d2e:	46a1      	mov	r9, r4
 8011d30:	4576      	cmp	r6, lr
 8011d32:	46f4      	mov	ip, lr
 8011d34:	d815      	bhi.n	8011d62 <rshift+0x7e>
 8011d36:	1a9a      	subs	r2, r3, r2
 8011d38:	0092      	lsls	r2, r2, #2
 8011d3a:	3a04      	subs	r2, #4
 8011d3c:	3501      	adds	r5, #1
 8011d3e:	42ae      	cmp	r6, r5
 8011d40:	bf38      	it	cc
 8011d42:	2200      	movcc	r2, #0
 8011d44:	18a3      	adds	r3, r4, r2
 8011d46:	50a7      	str	r7, [r4, r2]
 8011d48:	b107      	cbz	r7, 8011d4c <rshift+0x68>
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	1b1a      	subs	r2, r3, r4
 8011d4e:	42a3      	cmp	r3, r4
 8011d50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011d54:	bf08      	it	eq
 8011d56:	2300      	moveq	r3, #0
 8011d58:	6102      	str	r2, [r0, #16]
 8011d5a:	bf08      	it	eq
 8011d5c:	6143      	streq	r3, [r0, #20]
 8011d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d62:	f8dc c000 	ldr.w	ip, [ip]
 8011d66:	fa0c fc08 	lsl.w	ip, ip, r8
 8011d6a:	ea4c 0707 	orr.w	r7, ip, r7
 8011d6e:	f849 7b04 	str.w	r7, [r9], #4
 8011d72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011d76:	40cf      	lsrs	r7, r1
 8011d78:	e7da      	b.n	8011d30 <rshift+0x4c>
 8011d7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8011d7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8011d82:	e7c3      	b.n	8011d0c <rshift+0x28>
 8011d84:	4623      	mov	r3, r4
 8011d86:	e7e1      	b.n	8011d4c <rshift+0x68>

08011d88 <__hexdig_fun>:
 8011d88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8011d8c:	2b09      	cmp	r3, #9
 8011d8e:	d802      	bhi.n	8011d96 <__hexdig_fun+0xe>
 8011d90:	3820      	subs	r0, #32
 8011d92:	b2c0      	uxtb	r0, r0
 8011d94:	4770      	bx	lr
 8011d96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8011d9a:	2b05      	cmp	r3, #5
 8011d9c:	d801      	bhi.n	8011da2 <__hexdig_fun+0x1a>
 8011d9e:	3847      	subs	r0, #71	@ 0x47
 8011da0:	e7f7      	b.n	8011d92 <__hexdig_fun+0xa>
 8011da2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8011da6:	2b05      	cmp	r3, #5
 8011da8:	d801      	bhi.n	8011dae <__hexdig_fun+0x26>
 8011daa:	3827      	subs	r0, #39	@ 0x27
 8011dac:	e7f1      	b.n	8011d92 <__hexdig_fun+0xa>
 8011dae:	2000      	movs	r0, #0
 8011db0:	4770      	bx	lr
	...

08011db4 <__gethex>:
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	b085      	sub	sp, #20
 8011dba:	468a      	mov	sl, r1
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	680b      	ldr	r3, [r1, #0]
 8011dc0:	9001      	str	r0, [sp, #4]
 8011dc2:	4690      	mov	r8, r2
 8011dc4:	1c9c      	adds	r4, r3, #2
 8011dc6:	46a1      	mov	r9, r4
 8011dc8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8011dcc:	2830      	cmp	r0, #48	@ 0x30
 8011dce:	d0fa      	beq.n	8011dc6 <__gethex+0x12>
 8011dd0:	eba9 0303 	sub.w	r3, r9, r3
 8011dd4:	f1a3 0b02 	sub.w	fp, r3, #2
 8011dd8:	f7ff ffd6 	bl	8011d88 <__hexdig_fun>
 8011ddc:	4605      	mov	r5, r0
 8011dde:	2800      	cmp	r0, #0
 8011de0:	d168      	bne.n	8011eb4 <__gethex+0x100>
 8011de2:	49a0      	ldr	r1, [pc, #640]	@ (8012064 <__gethex+0x2b0>)
 8011de4:	2201      	movs	r2, #1
 8011de6:	4648      	mov	r0, r9
 8011de8:	f7ff fefe 	bl	8011be8 <strncmp>
 8011dec:	4607      	mov	r7, r0
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d167      	bne.n	8011ec2 <__gethex+0x10e>
 8011df2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8011df6:	4626      	mov	r6, r4
 8011df8:	f7ff ffc6 	bl	8011d88 <__hexdig_fun>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	d062      	beq.n	8011ec6 <__gethex+0x112>
 8011e00:	4623      	mov	r3, r4
 8011e02:	7818      	ldrb	r0, [r3, #0]
 8011e04:	2830      	cmp	r0, #48	@ 0x30
 8011e06:	4699      	mov	r9, r3
 8011e08:	f103 0301 	add.w	r3, r3, #1
 8011e0c:	d0f9      	beq.n	8011e02 <__gethex+0x4e>
 8011e0e:	f7ff ffbb 	bl	8011d88 <__hexdig_fun>
 8011e12:	fab0 f580 	clz	r5, r0
 8011e16:	096d      	lsrs	r5, r5, #5
 8011e18:	f04f 0b01 	mov.w	fp, #1
 8011e1c:	464a      	mov	r2, r9
 8011e1e:	4616      	mov	r6, r2
 8011e20:	3201      	adds	r2, #1
 8011e22:	7830      	ldrb	r0, [r6, #0]
 8011e24:	f7ff ffb0 	bl	8011d88 <__hexdig_fun>
 8011e28:	2800      	cmp	r0, #0
 8011e2a:	d1f8      	bne.n	8011e1e <__gethex+0x6a>
 8011e2c:	498d      	ldr	r1, [pc, #564]	@ (8012064 <__gethex+0x2b0>)
 8011e2e:	2201      	movs	r2, #1
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7ff fed9 	bl	8011be8 <strncmp>
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d13f      	bne.n	8011eba <__gethex+0x106>
 8011e3a:	b944      	cbnz	r4, 8011e4e <__gethex+0x9a>
 8011e3c:	1c74      	adds	r4, r6, #1
 8011e3e:	4622      	mov	r2, r4
 8011e40:	4616      	mov	r6, r2
 8011e42:	3201      	adds	r2, #1
 8011e44:	7830      	ldrb	r0, [r6, #0]
 8011e46:	f7ff ff9f 	bl	8011d88 <__hexdig_fun>
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d1f8      	bne.n	8011e40 <__gethex+0x8c>
 8011e4e:	1ba4      	subs	r4, r4, r6
 8011e50:	00a7      	lsls	r7, r4, #2
 8011e52:	7833      	ldrb	r3, [r6, #0]
 8011e54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8011e58:	2b50      	cmp	r3, #80	@ 0x50
 8011e5a:	d13e      	bne.n	8011eda <__gethex+0x126>
 8011e5c:	7873      	ldrb	r3, [r6, #1]
 8011e5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8011e60:	d033      	beq.n	8011eca <__gethex+0x116>
 8011e62:	2b2d      	cmp	r3, #45	@ 0x2d
 8011e64:	d034      	beq.n	8011ed0 <__gethex+0x11c>
 8011e66:	1c71      	adds	r1, r6, #1
 8011e68:	2400      	movs	r4, #0
 8011e6a:	7808      	ldrb	r0, [r1, #0]
 8011e6c:	f7ff ff8c 	bl	8011d88 <__hexdig_fun>
 8011e70:	1e43      	subs	r3, r0, #1
 8011e72:	b2db      	uxtb	r3, r3
 8011e74:	2b18      	cmp	r3, #24
 8011e76:	d830      	bhi.n	8011eda <__gethex+0x126>
 8011e78:	f1a0 0210 	sub.w	r2, r0, #16
 8011e7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011e80:	f7ff ff82 	bl	8011d88 <__hexdig_fun>
 8011e84:	f100 3cff 	add.w	ip, r0, #4294967295
 8011e88:	fa5f fc8c 	uxtb.w	ip, ip
 8011e8c:	f1bc 0f18 	cmp.w	ip, #24
 8011e90:	f04f 030a 	mov.w	r3, #10
 8011e94:	d91e      	bls.n	8011ed4 <__gethex+0x120>
 8011e96:	b104      	cbz	r4, 8011e9a <__gethex+0xe6>
 8011e98:	4252      	negs	r2, r2
 8011e9a:	4417      	add	r7, r2
 8011e9c:	f8ca 1000 	str.w	r1, [sl]
 8011ea0:	b1ed      	cbz	r5, 8011ede <__gethex+0x12a>
 8011ea2:	f1bb 0f00 	cmp.w	fp, #0
 8011ea6:	bf0c      	ite	eq
 8011ea8:	2506      	moveq	r5, #6
 8011eaa:	2500      	movne	r5, #0
 8011eac:	4628      	mov	r0, r5
 8011eae:	b005      	add	sp, #20
 8011eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	462c      	mov	r4, r5
 8011eb8:	e7b0      	b.n	8011e1c <__gethex+0x68>
 8011eba:	2c00      	cmp	r4, #0
 8011ebc:	d1c7      	bne.n	8011e4e <__gethex+0x9a>
 8011ebe:	4627      	mov	r7, r4
 8011ec0:	e7c7      	b.n	8011e52 <__gethex+0x9e>
 8011ec2:	464e      	mov	r6, r9
 8011ec4:	462f      	mov	r7, r5
 8011ec6:	2501      	movs	r5, #1
 8011ec8:	e7c3      	b.n	8011e52 <__gethex+0x9e>
 8011eca:	2400      	movs	r4, #0
 8011ecc:	1cb1      	adds	r1, r6, #2
 8011ece:	e7cc      	b.n	8011e6a <__gethex+0xb6>
 8011ed0:	2401      	movs	r4, #1
 8011ed2:	e7fb      	b.n	8011ecc <__gethex+0x118>
 8011ed4:	fb03 0002 	mla	r0, r3, r2, r0
 8011ed8:	e7ce      	b.n	8011e78 <__gethex+0xc4>
 8011eda:	4631      	mov	r1, r6
 8011edc:	e7de      	b.n	8011e9c <__gethex+0xe8>
 8011ede:	eba6 0309 	sub.w	r3, r6, r9
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	4629      	mov	r1, r5
 8011ee6:	2b07      	cmp	r3, #7
 8011ee8:	dc0a      	bgt.n	8011f00 <__gethex+0x14c>
 8011eea:	9801      	ldr	r0, [sp, #4]
 8011eec:	f7fd ff8c 	bl	800fe08 <_Balloc>
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	b940      	cbnz	r0, 8011f06 <__gethex+0x152>
 8011ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8012068 <__gethex+0x2b4>)
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	21e4      	movs	r1, #228	@ 0xe4
 8011efa:	485c      	ldr	r0, [pc, #368]	@ (801206c <__gethex+0x2b8>)
 8011efc:	f7ff fec0 	bl	8011c80 <__assert_func>
 8011f00:	3101      	adds	r1, #1
 8011f02:	105b      	asrs	r3, r3, #1
 8011f04:	e7ef      	b.n	8011ee6 <__gethex+0x132>
 8011f06:	f100 0a14 	add.w	sl, r0, #20
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	4655      	mov	r5, sl
 8011f0e:	469b      	mov	fp, r3
 8011f10:	45b1      	cmp	r9, r6
 8011f12:	d337      	bcc.n	8011f84 <__gethex+0x1d0>
 8011f14:	f845 bb04 	str.w	fp, [r5], #4
 8011f18:	eba5 050a 	sub.w	r5, r5, sl
 8011f1c:	10ad      	asrs	r5, r5, #2
 8011f1e:	6125      	str	r5, [r4, #16]
 8011f20:	4658      	mov	r0, fp
 8011f22:	f7fe f863 	bl	800ffec <__hi0bits>
 8011f26:	016d      	lsls	r5, r5, #5
 8011f28:	f8d8 6000 	ldr.w	r6, [r8]
 8011f2c:	1a2d      	subs	r5, r5, r0
 8011f2e:	42b5      	cmp	r5, r6
 8011f30:	dd54      	ble.n	8011fdc <__gethex+0x228>
 8011f32:	1bad      	subs	r5, r5, r6
 8011f34:	4629      	mov	r1, r5
 8011f36:	4620      	mov	r0, r4
 8011f38:	f7fe fbef 	bl	801071a <__any_on>
 8011f3c:	4681      	mov	r9, r0
 8011f3e:	b178      	cbz	r0, 8011f60 <__gethex+0x1ac>
 8011f40:	1e6b      	subs	r3, r5, #1
 8011f42:	1159      	asrs	r1, r3, #5
 8011f44:	f003 021f 	and.w	r2, r3, #31
 8011f48:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8011f4c:	f04f 0901 	mov.w	r9, #1
 8011f50:	fa09 f202 	lsl.w	r2, r9, r2
 8011f54:	420a      	tst	r2, r1
 8011f56:	d003      	beq.n	8011f60 <__gethex+0x1ac>
 8011f58:	454b      	cmp	r3, r9
 8011f5a:	dc36      	bgt.n	8011fca <__gethex+0x216>
 8011f5c:	f04f 0902 	mov.w	r9, #2
 8011f60:	4629      	mov	r1, r5
 8011f62:	4620      	mov	r0, r4
 8011f64:	f7ff febe 	bl	8011ce4 <rshift>
 8011f68:	442f      	add	r7, r5
 8011f6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011f6e:	42bb      	cmp	r3, r7
 8011f70:	da42      	bge.n	8011ff8 <__gethex+0x244>
 8011f72:	9801      	ldr	r0, [sp, #4]
 8011f74:	4621      	mov	r1, r4
 8011f76:	f7fd ff87 	bl	800fe88 <_Bfree>
 8011f7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6013      	str	r3, [r2, #0]
 8011f80:	25a3      	movs	r5, #163	@ 0xa3
 8011f82:	e793      	b.n	8011eac <__gethex+0xf8>
 8011f84:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011f88:	2a2e      	cmp	r2, #46	@ 0x2e
 8011f8a:	d012      	beq.n	8011fb2 <__gethex+0x1fe>
 8011f8c:	2b20      	cmp	r3, #32
 8011f8e:	d104      	bne.n	8011f9a <__gethex+0x1e6>
 8011f90:	f845 bb04 	str.w	fp, [r5], #4
 8011f94:	f04f 0b00 	mov.w	fp, #0
 8011f98:	465b      	mov	r3, fp
 8011f9a:	7830      	ldrb	r0, [r6, #0]
 8011f9c:	9303      	str	r3, [sp, #12]
 8011f9e:	f7ff fef3 	bl	8011d88 <__hexdig_fun>
 8011fa2:	9b03      	ldr	r3, [sp, #12]
 8011fa4:	f000 000f 	and.w	r0, r0, #15
 8011fa8:	4098      	lsls	r0, r3
 8011faa:	ea4b 0b00 	orr.w	fp, fp, r0
 8011fae:	3304      	adds	r3, #4
 8011fb0:	e7ae      	b.n	8011f10 <__gethex+0x15c>
 8011fb2:	45b1      	cmp	r9, r6
 8011fb4:	d8ea      	bhi.n	8011f8c <__gethex+0x1d8>
 8011fb6:	492b      	ldr	r1, [pc, #172]	@ (8012064 <__gethex+0x2b0>)
 8011fb8:	9303      	str	r3, [sp, #12]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f7ff fe13 	bl	8011be8 <strncmp>
 8011fc2:	9b03      	ldr	r3, [sp, #12]
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d1e1      	bne.n	8011f8c <__gethex+0x1d8>
 8011fc8:	e7a2      	b.n	8011f10 <__gethex+0x15c>
 8011fca:	1ea9      	subs	r1, r5, #2
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f7fe fba4 	bl	801071a <__any_on>
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d0c2      	beq.n	8011f5c <__gethex+0x1a8>
 8011fd6:	f04f 0903 	mov.w	r9, #3
 8011fda:	e7c1      	b.n	8011f60 <__gethex+0x1ac>
 8011fdc:	da09      	bge.n	8011ff2 <__gethex+0x23e>
 8011fde:	1b75      	subs	r5, r6, r5
 8011fe0:	4621      	mov	r1, r4
 8011fe2:	9801      	ldr	r0, [sp, #4]
 8011fe4:	462a      	mov	r2, r5
 8011fe6:	f7fe f95f 	bl	80102a8 <__lshift>
 8011fea:	1b7f      	subs	r7, r7, r5
 8011fec:	4604      	mov	r4, r0
 8011fee:	f100 0a14 	add.w	sl, r0, #20
 8011ff2:	f04f 0900 	mov.w	r9, #0
 8011ff6:	e7b8      	b.n	8011f6a <__gethex+0x1b6>
 8011ff8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011ffc:	42bd      	cmp	r5, r7
 8011ffe:	dd6f      	ble.n	80120e0 <__gethex+0x32c>
 8012000:	1bed      	subs	r5, r5, r7
 8012002:	42ae      	cmp	r6, r5
 8012004:	dc34      	bgt.n	8012070 <__gethex+0x2bc>
 8012006:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801200a:	2b02      	cmp	r3, #2
 801200c:	d022      	beq.n	8012054 <__gethex+0x2a0>
 801200e:	2b03      	cmp	r3, #3
 8012010:	d024      	beq.n	801205c <__gethex+0x2a8>
 8012012:	2b01      	cmp	r3, #1
 8012014:	d115      	bne.n	8012042 <__gethex+0x28e>
 8012016:	42ae      	cmp	r6, r5
 8012018:	d113      	bne.n	8012042 <__gethex+0x28e>
 801201a:	2e01      	cmp	r6, #1
 801201c:	d10b      	bne.n	8012036 <__gethex+0x282>
 801201e:	9a02      	ldr	r2, [sp, #8]
 8012020:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012024:	6013      	str	r3, [r2, #0]
 8012026:	2301      	movs	r3, #1
 8012028:	6123      	str	r3, [r4, #16]
 801202a:	f8ca 3000 	str.w	r3, [sl]
 801202e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012030:	2562      	movs	r5, #98	@ 0x62
 8012032:	601c      	str	r4, [r3, #0]
 8012034:	e73a      	b.n	8011eac <__gethex+0xf8>
 8012036:	1e71      	subs	r1, r6, #1
 8012038:	4620      	mov	r0, r4
 801203a:	f7fe fb6e 	bl	801071a <__any_on>
 801203e:	2800      	cmp	r0, #0
 8012040:	d1ed      	bne.n	801201e <__gethex+0x26a>
 8012042:	9801      	ldr	r0, [sp, #4]
 8012044:	4621      	mov	r1, r4
 8012046:	f7fd ff1f 	bl	800fe88 <_Bfree>
 801204a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801204c:	2300      	movs	r3, #0
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	2550      	movs	r5, #80	@ 0x50
 8012052:	e72b      	b.n	8011eac <__gethex+0xf8>
 8012054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1f3      	bne.n	8012042 <__gethex+0x28e>
 801205a:	e7e0      	b.n	801201e <__gethex+0x26a>
 801205c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1dd      	bne.n	801201e <__gethex+0x26a>
 8012062:	e7ee      	b.n	8012042 <__gethex+0x28e>
 8012064:	08012a83 	.word	0x08012a83
 8012068:	08012a19 	.word	0x08012a19
 801206c:	08012ada 	.word	0x08012ada
 8012070:	1e6f      	subs	r7, r5, #1
 8012072:	f1b9 0f00 	cmp.w	r9, #0
 8012076:	d130      	bne.n	80120da <__gethex+0x326>
 8012078:	b127      	cbz	r7, 8012084 <__gethex+0x2d0>
 801207a:	4639      	mov	r1, r7
 801207c:	4620      	mov	r0, r4
 801207e:	f7fe fb4c 	bl	801071a <__any_on>
 8012082:	4681      	mov	r9, r0
 8012084:	117a      	asrs	r2, r7, #5
 8012086:	2301      	movs	r3, #1
 8012088:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801208c:	f007 071f 	and.w	r7, r7, #31
 8012090:	40bb      	lsls	r3, r7
 8012092:	4213      	tst	r3, r2
 8012094:	4629      	mov	r1, r5
 8012096:	4620      	mov	r0, r4
 8012098:	bf18      	it	ne
 801209a:	f049 0902 	orrne.w	r9, r9, #2
 801209e:	f7ff fe21 	bl	8011ce4 <rshift>
 80120a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80120a6:	1b76      	subs	r6, r6, r5
 80120a8:	2502      	movs	r5, #2
 80120aa:	f1b9 0f00 	cmp.w	r9, #0
 80120ae:	d047      	beq.n	8012140 <__gethex+0x38c>
 80120b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80120b4:	2b02      	cmp	r3, #2
 80120b6:	d015      	beq.n	80120e4 <__gethex+0x330>
 80120b8:	2b03      	cmp	r3, #3
 80120ba:	d017      	beq.n	80120ec <__gethex+0x338>
 80120bc:	2b01      	cmp	r3, #1
 80120be:	d109      	bne.n	80120d4 <__gethex+0x320>
 80120c0:	f019 0f02 	tst.w	r9, #2
 80120c4:	d006      	beq.n	80120d4 <__gethex+0x320>
 80120c6:	f8da 3000 	ldr.w	r3, [sl]
 80120ca:	ea49 0903 	orr.w	r9, r9, r3
 80120ce:	f019 0f01 	tst.w	r9, #1
 80120d2:	d10e      	bne.n	80120f2 <__gethex+0x33e>
 80120d4:	f045 0510 	orr.w	r5, r5, #16
 80120d8:	e032      	b.n	8012140 <__gethex+0x38c>
 80120da:	f04f 0901 	mov.w	r9, #1
 80120de:	e7d1      	b.n	8012084 <__gethex+0x2d0>
 80120e0:	2501      	movs	r5, #1
 80120e2:	e7e2      	b.n	80120aa <__gethex+0x2f6>
 80120e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120e6:	f1c3 0301 	rsb	r3, r3, #1
 80120ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80120ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d0f0      	beq.n	80120d4 <__gethex+0x320>
 80120f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80120f6:	f104 0314 	add.w	r3, r4, #20
 80120fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80120fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012102:	f04f 0c00 	mov.w	ip, #0
 8012106:	4618      	mov	r0, r3
 8012108:	f853 2b04 	ldr.w	r2, [r3], #4
 801210c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012110:	d01b      	beq.n	801214a <__gethex+0x396>
 8012112:	3201      	adds	r2, #1
 8012114:	6002      	str	r2, [r0, #0]
 8012116:	2d02      	cmp	r5, #2
 8012118:	f104 0314 	add.w	r3, r4, #20
 801211c:	d13c      	bne.n	8012198 <__gethex+0x3e4>
 801211e:	f8d8 2000 	ldr.w	r2, [r8]
 8012122:	3a01      	subs	r2, #1
 8012124:	42b2      	cmp	r2, r6
 8012126:	d109      	bne.n	801213c <__gethex+0x388>
 8012128:	1171      	asrs	r1, r6, #5
 801212a:	2201      	movs	r2, #1
 801212c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012130:	f006 061f 	and.w	r6, r6, #31
 8012134:	fa02 f606 	lsl.w	r6, r2, r6
 8012138:	421e      	tst	r6, r3
 801213a:	d13a      	bne.n	80121b2 <__gethex+0x3fe>
 801213c:	f045 0520 	orr.w	r5, r5, #32
 8012140:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012142:	601c      	str	r4, [r3, #0]
 8012144:	9b02      	ldr	r3, [sp, #8]
 8012146:	601f      	str	r7, [r3, #0]
 8012148:	e6b0      	b.n	8011eac <__gethex+0xf8>
 801214a:	4299      	cmp	r1, r3
 801214c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012150:	d8d9      	bhi.n	8012106 <__gethex+0x352>
 8012152:	68a3      	ldr	r3, [r4, #8]
 8012154:	459b      	cmp	fp, r3
 8012156:	db17      	blt.n	8012188 <__gethex+0x3d4>
 8012158:	6861      	ldr	r1, [r4, #4]
 801215a:	9801      	ldr	r0, [sp, #4]
 801215c:	3101      	adds	r1, #1
 801215e:	f7fd fe53 	bl	800fe08 <_Balloc>
 8012162:	4681      	mov	r9, r0
 8012164:	b918      	cbnz	r0, 801216e <__gethex+0x3ba>
 8012166:	4b1a      	ldr	r3, [pc, #104]	@ (80121d0 <__gethex+0x41c>)
 8012168:	4602      	mov	r2, r0
 801216a:	2184      	movs	r1, #132	@ 0x84
 801216c:	e6c5      	b.n	8011efa <__gethex+0x146>
 801216e:	6922      	ldr	r2, [r4, #16]
 8012170:	3202      	adds	r2, #2
 8012172:	f104 010c 	add.w	r1, r4, #12
 8012176:	0092      	lsls	r2, r2, #2
 8012178:	300c      	adds	r0, #12
 801217a:	f7fc fed6 	bl	800ef2a <memcpy>
 801217e:	4621      	mov	r1, r4
 8012180:	9801      	ldr	r0, [sp, #4]
 8012182:	f7fd fe81 	bl	800fe88 <_Bfree>
 8012186:	464c      	mov	r4, r9
 8012188:	6923      	ldr	r3, [r4, #16]
 801218a:	1c5a      	adds	r2, r3, #1
 801218c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012190:	6122      	str	r2, [r4, #16]
 8012192:	2201      	movs	r2, #1
 8012194:	615a      	str	r2, [r3, #20]
 8012196:	e7be      	b.n	8012116 <__gethex+0x362>
 8012198:	6922      	ldr	r2, [r4, #16]
 801219a:	455a      	cmp	r2, fp
 801219c:	dd0b      	ble.n	80121b6 <__gethex+0x402>
 801219e:	2101      	movs	r1, #1
 80121a0:	4620      	mov	r0, r4
 80121a2:	f7ff fd9f 	bl	8011ce4 <rshift>
 80121a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80121aa:	3701      	adds	r7, #1
 80121ac:	42bb      	cmp	r3, r7
 80121ae:	f6ff aee0 	blt.w	8011f72 <__gethex+0x1be>
 80121b2:	2501      	movs	r5, #1
 80121b4:	e7c2      	b.n	801213c <__gethex+0x388>
 80121b6:	f016 061f 	ands.w	r6, r6, #31
 80121ba:	d0fa      	beq.n	80121b2 <__gethex+0x3fe>
 80121bc:	4453      	add	r3, sl
 80121be:	f1c6 0620 	rsb	r6, r6, #32
 80121c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80121c6:	f7fd ff11 	bl	800ffec <__hi0bits>
 80121ca:	42b0      	cmp	r0, r6
 80121cc:	dbe7      	blt.n	801219e <__gethex+0x3ea>
 80121ce:	e7f0      	b.n	80121b2 <__gethex+0x3fe>
 80121d0:	08012a19 	.word	0x08012a19

080121d4 <L_shift>:
 80121d4:	f1c2 0208 	rsb	r2, r2, #8
 80121d8:	0092      	lsls	r2, r2, #2
 80121da:	b570      	push	{r4, r5, r6, lr}
 80121dc:	f1c2 0620 	rsb	r6, r2, #32
 80121e0:	6843      	ldr	r3, [r0, #4]
 80121e2:	6804      	ldr	r4, [r0, #0]
 80121e4:	fa03 f506 	lsl.w	r5, r3, r6
 80121e8:	432c      	orrs	r4, r5
 80121ea:	40d3      	lsrs	r3, r2
 80121ec:	6004      	str	r4, [r0, #0]
 80121ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80121f2:	4288      	cmp	r0, r1
 80121f4:	d3f4      	bcc.n	80121e0 <L_shift+0xc>
 80121f6:	bd70      	pop	{r4, r5, r6, pc}

080121f8 <__match>:
 80121f8:	b530      	push	{r4, r5, lr}
 80121fa:	6803      	ldr	r3, [r0, #0]
 80121fc:	3301      	adds	r3, #1
 80121fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012202:	b914      	cbnz	r4, 801220a <__match+0x12>
 8012204:	6003      	str	r3, [r0, #0]
 8012206:	2001      	movs	r0, #1
 8012208:	bd30      	pop	{r4, r5, pc}
 801220a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801220e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8012212:	2d19      	cmp	r5, #25
 8012214:	bf98      	it	ls
 8012216:	3220      	addls	r2, #32
 8012218:	42a2      	cmp	r2, r4
 801221a:	d0f0      	beq.n	80121fe <__match+0x6>
 801221c:	2000      	movs	r0, #0
 801221e:	e7f3      	b.n	8012208 <__match+0x10>

08012220 <__hexnan>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	680b      	ldr	r3, [r1, #0]
 8012226:	6801      	ldr	r1, [r0, #0]
 8012228:	115e      	asrs	r6, r3, #5
 801222a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801222e:	f013 031f 	ands.w	r3, r3, #31
 8012232:	b087      	sub	sp, #28
 8012234:	bf18      	it	ne
 8012236:	3604      	addne	r6, #4
 8012238:	2500      	movs	r5, #0
 801223a:	1f37      	subs	r7, r6, #4
 801223c:	4682      	mov	sl, r0
 801223e:	4690      	mov	r8, r2
 8012240:	9301      	str	r3, [sp, #4]
 8012242:	f846 5c04 	str.w	r5, [r6, #-4]
 8012246:	46b9      	mov	r9, r7
 8012248:	463c      	mov	r4, r7
 801224a:	9502      	str	r5, [sp, #8]
 801224c:	46ab      	mov	fp, r5
 801224e:	784a      	ldrb	r2, [r1, #1]
 8012250:	1c4b      	adds	r3, r1, #1
 8012252:	9303      	str	r3, [sp, #12]
 8012254:	b342      	cbz	r2, 80122a8 <__hexnan+0x88>
 8012256:	4610      	mov	r0, r2
 8012258:	9105      	str	r1, [sp, #20]
 801225a:	9204      	str	r2, [sp, #16]
 801225c:	f7ff fd94 	bl	8011d88 <__hexdig_fun>
 8012260:	2800      	cmp	r0, #0
 8012262:	d151      	bne.n	8012308 <__hexnan+0xe8>
 8012264:	9a04      	ldr	r2, [sp, #16]
 8012266:	9905      	ldr	r1, [sp, #20]
 8012268:	2a20      	cmp	r2, #32
 801226a:	d818      	bhi.n	801229e <__hexnan+0x7e>
 801226c:	9b02      	ldr	r3, [sp, #8]
 801226e:	459b      	cmp	fp, r3
 8012270:	dd13      	ble.n	801229a <__hexnan+0x7a>
 8012272:	454c      	cmp	r4, r9
 8012274:	d206      	bcs.n	8012284 <__hexnan+0x64>
 8012276:	2d07      	cmp	r5, #7
 8012278:	dc04      	bgt.n	8012284 <__hexnan+0x64>
 801227a:	462a      	mov	r2, r5
 801227c:	4649      	mov	r1, r9
 801227e:	4620      	mov	r0, r4
 8012280:	f7ff ffa8 	bl	80121d4 <L_shift>
 8012284:	4544      	cmp	r4, r8
 8012286:	d952      	bls.n	801232e <__hexnan+0x10e>
 8012288:	2300      	movs	r3, #0
 801228a:	f1a4 0904 	sub.w	r9, r4, #4
 801228e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012292:	f8cd b008 	str.w	fp, [sp, #8]
 8012296:	464c      	mov	r4, r9
 8012298:	461d      	mov	r5, r3
 801229a:	9903      	ldr	r1, [sp, #12]
 801229c:	e7d7      	b.n	801224e <__hexnan+0x2e>
 801229e:	2a29      	cmp	r2, #41	@ 0x29
 80122a0:	d157      	bne.n	8012352 <__hexnan+0x132>
 80122a2:	3102      	adds	r1, #2
 80122a4:	f8ca 1000 	str.w	r1, [sl]
 80122a8:	f1bb 0f00 	cmp.w	fp, #0
 80122ac:	d051      	beq.n	8012352 <__hexnan+0x132>
 80122ae:	454c      	cmp	r4, r9
 80122b0:	d206      	bcs.n	80122c0 <__hexnan+0xa0>
 80122b2:	2d07      	cmp	r5, #7
 80122b4:	dc04      	bgt.n	80122c0 <__hexnan+0xa0>
 80122b6:	462a      	mov	r2, r5
 80122b8:	4649      	mov	r1, r9
 80122ba:	4620      	mov	r0, r4
 80122bc:	f7ff ff8a 	bl	80121d4 <L_shift>
 80122c0:	4544      	cmp	r4, r8
 80122c2:	d936      	bls.n	8012332 <__hexnan+0x112>
 80122c4:	f1a8 0204 	sub.w	r2, r8, #4
 80122c8:	4623      	mov	r3, r4
 80122ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80122ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80122d2:	429f      	cmp	r7, r3
 80122d4:	d2f9      	bcs.n	80122ca <__hexnan+0xaa>
 80122d6:	1b3b      	subs	r3, r7, r4
 80122d8:	f023 0303 	bic.w	r3, r3, #3
 80122dc:	3304      	adds	r3, #4
 80122de:	3401      	adds	r4, #1
 80122e0:	3e03      	subs	r6, #3
 80122e2:	42b4      	cmp	r4, r6
 80122e4:	bf88      	it	hi
 80122e6:	2304      	movhi	r3, #4
 80122e8:	4443      	add	r3, r8
 80122ea:	2200      	movs	r2, #0
 80122ec:	f843 2b04 	str.w	r2, [r3], #4
 80122f0:	429f      	cmp	r7, r3
 80122f2:	d2fb      	bcs.n	80122ec <__hexnan+0xcc>
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	b91b      	cbnz	r3, 8012300 <__hexnan+0xe0>
 80122f8:	4547      	cmp	r7, r8
 80122fa:	d128      	bne.n	801234e <__hexnan+0x12e>
 80122fc:	2301      	movs	r3, #1
 80122fe:	603b      	str	r3, [r7, #0]
 8012300:	2005      	movs	r0, #5
 8012302:	b007      	add	sp, #28
 8012304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012308:	3501      	adds	r5, #1
 801230a:	2d08      	cmp	r5, #8
 801230c:	f10b 0b01 	add.w	fp, fp, #1
 8012310:	dd06      	ble.n	8012320 <__hexnan+0x100>
 8012312:	4544      	cmp	r4, r8
 8012314:	d9c1      	bls.n	801229a <__hexnan+0x7a>
 8012316:	2300      	movs	r3, #0
 8012318:	f844 3c04 	str.w	r3, [r4, #-4]
 801231c:	2501      	movs	r5, #1
 801231e:	3c04      	subs	r4, #4
 8012320:	6822      	ldr	r2, [r4, #0]
 8012322:	f000 000f 	and.w	r0, r0, #15
 8012326:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801232a:	6020      	str	r0, [r4, #0]
 801232c:	e7b5      	b.n	801229a <__hexnan+0x7a>
 801232e:	2508      	movs	r5, #8
 8012330:	e7b3      	b.n	801229a <__hexnan+0x7a>
 8012332:	9b01      	ldr	r3, [sp, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d0dd      	beq.n	80122f4 <__hexnan+0xd4>
 8012338:	f1c3 0320 	rsb	r3, r3, #32
 801233c:	f04f 32ff 	mov.w	r2, #4294967295
 8012340:	40da      	lsrs	r2, r3
 8012342:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8012346:	4013      	ands	r3, r2
 8012348:	f846 3c04 	str.w	r3, [r6, #-4]
 801234c:	e7d2      	b.n	80122f4 <__hexnan+0xd4>
 801234e:	3f04      	subs	r7, #4
 8012350:	e7d0      	b.n	80122f4 <__hexnan+0xd4>
 8012352:	2004      	movs	r0, #4
 8012354:	e7d5      	b.n	8012302 <__hexnan+0xe2>

08012356 <__ascii_mbtowc>:
 8012356:	b082      	sub	sp, #8
 8012358:	b901      	cbnz	r1, 801235c <__ascii_mbtowc+0x6>
 801235a:	a901      	add	r1, sp, #4
 801235c:	b142      	cbz	r2, 8012370 <__ascii_mbtowc+0x1a>
 801235e:	b14b      	cbz	r3, 8012374 <__ascii_mbtowc+0x1e>
 8012360:	7813      	ldrb	r3, [r2, #0]
 8012362:	600b      	str	r3, [r1, #0]
 8012364:	7812      	ldrb	r2, [r2, #0]
 8012366:	1e10      	subs	r0, r2, #0
 8012368:	bf18      	it	ne
 801236a:	2001      	movne	r0, #1
 801236c:	b002      	add	sp, #8
 801236e:	4770      	bx	lr
 8012370:	4610      	mov	r0, r2
 8012372:	e7fb      	b.n	801236c <__ascii_mbtowc+0x16>
 8012374:	f06f 0001 	mvn.w	r0, #1
 8012378:	e7f8      	b.n	801236c <__ascii_mbtowc+0x16>

0801237a <_realloc_r>:
 801237a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801237e:	4607      	mov	r7, r0
 8012380:	4614      	mov	r4, r2
 8012382:	460d      	mov	r5, r1
 8012384:	b921      	cbnz	r1, 8012390 <_realloc_r+0x16>
 8012386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801238a:	4611      	mov	r1, r2
 801238c:	f7fd bcb0 	b.w	800fcf0 <_malloc_r>
 8012390:	b92a      	cbnz	r2, 801239e <_realloc_r+0x24>
 8012392:	f7fd fc39 	bl	800fc08 <_free_r>
 8012396:	4625      	mov	r5, r4
 8012398:	4628      	mov	r0, r5
 801239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801239e:	f000 f840 	bl	8012422 <_malloc_usable_size_r>
 80123a2:	4284      	cmp	r4, r0
 80123a4:	4606      	mov	r6, r0
 80123a6:	d802      	bhi.n	80123ae <_realloc_r+0x34>
 80123a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80123ac:	d8f4      	bhi.n	8012398 <_realloc_r+0x1e>
 80123ae:	4621      	mov	r1, r4
 80123b0:	4638      	mov	r0, r7
 80123b2:	f7fd fc9d 	bl	800fcf0 <_malloc_r>
 80123b6:	4680      	mov	r8, r0
 80123b8:	b908      	cbnz	r0, 80123be <_realloc_r+0x44>
 80123ba:	4645      	mov	r5, r8
 80123bc:	e7ec      	b.n	8012398 <_realloc_r+0x1e>
 80123be:	42b4      	cmp	r4, r6
 80123c0:	4622      	mov	r2, r4
 80123c2:	4629      	mov	r1, r5
 80123c4:	bf28      	it	cs
 80123c6:	4632      	movcs	r2, r6
 80123c8:	f7fc fdaf 	bl	800ef2a <memcpy>
 80123cc:	4629      	mov	r1, r5
 80123ce:	4638      	mov	r0, r7
 80123d0:	f7fd fc1a 	bl	800fc08 <_free_r>
 80123d4:	e7f1      	b.n	80123ba <_realloc_r+0x40>

080123d6 <__ascii_wctomb>:
 80123d6:	4603      	mov	r3, r0
 80123d8:	4608      	mov	r0, r1
 80123da:	b141      	cbz	r1, 80123ee <__ascii_wctomb+0x18>
 80123dc:	2aff      	cmp	r2, #255	@ 0xff
 80123de:	d904      	bls.n	80123ea <__ascii_wctomb+0x14>
 80123e0:	228a      	movs	r2, #138	@ 0x8a
 80123e2:	601a      	str	r2, [r3, #0]
 80123e4:	f04f 30ff 	mov.w	r0, #4294967295
 80123e8:	4770      	bx	lr
 80123ea:	700a      	strb	r2, [r1, #0]
 80123ec:	2001      	movs	r0, #1
 80123ee:	4770      	bx	lr

080123f0 <fiprintf>:
 80123f0:	b40e      	push	{r1, r2, r3}
 80123f2:	b503      	push	{r0, r1, lr}
 80123f4:	4601      	mov	r1, r0
 80123f6:	ab03      	add	r3, sp, #12
 80123f8:	4805      	ldr	r0, [pc, #20]	@ (8012410 <fiprintf+0x20>)
 80123fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80123fe:	6800      	ldr	r0, [r0, #0]
 8012400:	9301      	str	r3, [sp, #4]
 8012402:	f7ff f9b1 	bl	8011768 <_vfiprintf_r>
 8012406:	b002      	add	sp, #8
 8012408:	f85d eb04 	ldr.w	lr, [sp], #4
 801240c:	b003      	add	sp, #12
 801240e:	4770      	bx	lr
 8012410:	20000118 	.word	0x20000118

08012414 <abort>:
 8012414:	b508      	push	{r3, lr}
 8012416:	2006      	movs	r0, #6
 8012418:	f000 f834 	bl	8012484 <raise>
 801241c:	2001      	movs	r0, #1
 801241e:	f7ef f9ad 	bl	800177c <_exit>

08012422 <_malloc_usable_size_r>:
 8012422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012426:	1f18      	subs	r0, r3, #4
 8012428:	2b00      	cmp	r3, #0
 801242a:	bfbc      	itt	lt
 801242c:	580b      	ldrlt	r3, [r1, r0]
 801242e:	18c0      	addlt	r0, r0, r3
 8012430:	4770      	bx	lr

08012432 <_raise_r>:
 8012432:	291f      	cmp	r1, #31
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	4605      	mov	r5, r0
 8012438:	460c      	mov	r4, r1
 801243a:	d904      	bls.n	8012446 <_raise_r+0x14>
 801243c:	2316      	movs	r3, #22
 801243e:	6003      	str	r3, [r0, #0]
 8012440:	f04f 30ff 	mov.w	r0, #4294967295
 8012444:	bd38      	pop	{r3, r4, r5, pc}
 8012446:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012448:	b112      	cbz	r2, 8012450 <_raise_r+0x1e>
 801244a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801244e:	b94b      	cbnz	r3, 8012464 <_raise_r+0x32>
 8012450:	4628      	mov	r0, r5
 8012452:	f000 f831 	bl	80124b8 <_getpid_r>
 8012456:	4622      	mov	r2, r4
 8012458:	4601      	mov	r1, r0
 801245a:	4628      	mov	r0, r5
 801245c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012460:	f000 b818 	b.w	8012494 <_kill_r>
 8012464:	2b01      	cmp	r3, #1
 8012466:	d00a      	beq.n	801247e <_raise_r+0x4c>
 8012468:	1c59      	adds	r1, r3, #1
 801246a:	d103      	bne.n	8012474 <_raise_r+0x42>
 801246c:	2316      	movs	r3, #22
 801246e:	6003      	str	r3, [r0, #0]
 8012470:	2001      	movs	r0, #1
 8012472:	e7e7      	b.n	8012444 <_raise_r+0x12>
 8012474:	2100      	movs	r1, #0
 8012476:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801247a:	4620      	mov	r0, r4
 801247c:	4798      	blx	r3
 801247e:	2000      	movs	r0, #0
 8012480:	e7e0      	b.n	8012444 <_raise_r+0x12>
	...

08012484 <raise>:
 8012484:	4b02      	ldr	r3, [pc, #8]	@ (8012490 <raise+0xc>)
 8012486:	4601      	mov	r1, r0
 8012488:	6818      	ldr	r0, [r3, #0]
 801248a:	f7ff bfd2 	b.w	8012432 <_raise_r>
 801248e:	bf00      	nop
 8012490:	20000118 	.word	0x20000118

08012494 <_kill_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d07      	ldr	r5, [pc, #28]	@ (80124b4 <_kill_r+0x20>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f7ef f95b 	bl	800175c <_kill>
 80124a6:	1c43      	adds	r3, r0, #1
 80124a8:	d102      	bne.n	80124b0 <_kill_r+0x1c>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	b103      	cbz	r3, 80124b0 <_kill_r+0x1c>
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	bd38      	pop	{r3, r4, r5, pc}
 80124b2:	bf00      	nop
 80124b4:	20002700 	.word	0x20002700

080124b8 <_getpid_r>:
 80124b8:	f7ef b948 	b.w	800174c <_getpid>

080124bc <_sbrk>:
 80124bc:	4a04      	ldr	r2, [pc, #16]	@ (80124d0 <_sbrk+0x14>)
 80124be:	6811      	ldr	r1, [r2, #0]
 80124c0:	4603      	mov	r3, r0
 80124c2:	b909      	cbnz	r1, 80124c8 <_sbrk+0xc>
 80124c4:	4903      	ldr	r1, [pc, #12]	@ (80124d4 <_sbrk+0x18>)
 80124c6:	6011      	str	r1, [r2, #0]
 80124c8:	6810      	ldr	r0, [r2, #0]
 80124ca:	4403      	add	r3, r0
 80124cc:	6013      	str	r3, [r2, #0]
 80124ce:	4770      	bx	lr
 80124d0:	20002710 	.word	0x20002710
 80124d4:	20002718 	.word	0x20002718

080124d8 <_init>:
 80124d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124da:	bf00      	nop
 80124dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124de:	bc08      	pop	{r3}
 80124e0:	469e      	mov	lr, r3
 80124e2:	4770      	bx	lr

080124e4 <_fini>:
 80124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e6:	bf00      	nop
 80124e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ea:	bc08      	pop	{r3}
 80124ec:	469e      	mov	lr, r3
 80124ee:	4770      	bx	lr
