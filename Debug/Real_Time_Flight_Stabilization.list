
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c55c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800c6f0  0800c6f0  0000d6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce34  0800ce34  0000e1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce34  0800ce34  0000de34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce3c  0800ce3c  0000e1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce3c  0800ce3c  0000de3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce40  0800ce40  0000de40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ce44  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1e0  2**0
                  CONTENTS
 10 .bss          000003f8  200001e0  200001e0  0000e1e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200005d8  200005d8  0000e1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184c6  00000000  00000000  0000e210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ab1  00000000  00000000  000266d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  00029188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011df  00000000  00000000  0002a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023812  00000000  00000000  0002b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b2a  00000000  00000000  0004f1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8a82  00000000  00000000  00067d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001407a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076e4  00000000  00000000  001407e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  00147ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6d4 	.word	0x0800c6d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c6d4 	.word	0x0800c6d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001024:	f000 fc7e 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001028:	f000 f82e 	bl	8001088 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102c:	f000 f986 	bl	800133c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001030:	f000 f894 	bl	800115c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001034:	f000 f8c0 	bl	80011b8 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001038:	f000 f8ec 	bl	8001214 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800103c:	f000 f954 	bl	80012e8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8001040:	f000 f91c 	bl	800127c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /*!< BMI160 Init Process >!*/
  Complementary_Init(&bmi160_comp, 0.7f, 50.0f);
 8001044:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8001068 <main+0x48>
 8001048:	ed9f 0b09 	vldr	d0, [pc, #36]	@ 8001070 <main+0x50>
 800104c:	480a      	ldr	r0, [pc, #40]	@ (8001078 <main+0x58>)
 800104e:	f003 fbd3 	bl	80047f8 <Complementary_Init>
  init_bmi160_sensor_driver_interface(&bmi160);
 8001052:	480a      	ldr	r0, [pc, #40]	@ (800107c <main+0x5c>)
 8001054:	f005 f802 	bl	800605c <init_bmi160_sensor_driver_interface>

  /*!< BMP388 Init Process >!*/
  init_bmp388_sensor_driver_interface(&bmp388,&bmp388_intf);
 8001058:	4909      	ldr	r1, [pc, #36]	@ (8001080 <main+0x60>)
 800105a:	480a      	ldr	r0, [pc, #40]	@ (8001084 <main+0x64>)
 800105c:	f006 fd56 	bl	8007b0c <init_bmp388_sensor_driver_interface>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <main+0x40>
 8001064:	f3af 8000 	nop.w
 8001068:	00000000 	.word	0x00000000
 800106c:	40490000 	.word	0x40490000
 8001070:	60000000 	.word	0x60000000
 8001074:	3fe66666 	.word	0x3fe66666
 8001078:	200003a8 	.word	0x200003a8
 800107c:	2000037c 	.word	0x2000037c
 8001080:	20000000 	.word	0x20000000
 8001084:	200003d0 	.word	0x200003d0

08001088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b094      	sub	sp, #80	@ 0x50
 800108c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108e:	f107 0320 	add.w	r3, r7, #32
 8001092:	2230      	movs	r2, #48	@ 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f007 ffd4 	bl	8009044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <SystemClock_Config+0xcc>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	4a27      	ldr	r2, [pc, #156]	@ (8001154 <SystemClock_Config+0xcc>)
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80010bc:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <SystemClock_Config+0xcc>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <SystemClock_Config+0xd0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <SystemClock_Config+0xd0>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <SystemClock_Config+0xd0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010fc:	23a8      	movs	r3, #168	@ 0xa8
 80010fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001100:	2302      	movs	r3, #2
 8001102:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001104:	2304      	movs	r3, #4
 8001106:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ff8b 	bl	8003028 <HAL_RCC_OscConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001118:	f000 f994 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001128:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800112c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2105      	movs	r1, #5
 800113a:	4618      	mov	r0, r3
 800113c:	f002 f9ec 	bl	8003518 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001146:	f000 f97d 	bl	8001444 <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	@ 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f000 ff21 	bl	8001fe0 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f94e 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001fc 	.word	0x200001fc
 80011b0:	40005400 	.word	0x40005400
 80011b4:	00061a80 	.word	0x00061a80

080011b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011be:	4a13      	ldr	r2, [pc, #76]	@ (800120c <MX_I2C2_Init+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_I2C2_Init+0x58>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_I2C2_Init+0x50>)
 80011f6:	f000 fef3 	bl	8001fe0 <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 f920 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000250 	.word	0x20000250
 800120c:	40005800 	.word	0x40005800
 8001210:	00061a80 	.word	0x00061a80

08001214 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	463b      	mov	r3, r7
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001222:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <MX_TIM6_Init+0x60>)
 8001224:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <MX_TIM6_Init+0x64>)
 8001226:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <MX_TIM6_Init+0x60>)
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <MX_TIM6_Init+0x60>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001234:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <MX_TIM6_Init+0x60>)
 8001236:	22a7      	movs	r2, #167	@ 0xa7
 8001238:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <MX_TIM6_Init+0x60>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <MX_TIM6_Init+0x60>)
 8001242:	f002 fb89 	bl	8003958 <HAL_TIM_Base_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 800124c:	f000 f8fa 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_TIM6_Init+0x60>)
 800125e:	f002 fe2f 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f8ec 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002a4 	.word	0x200002a4
 8001278:	40001000 	.word	0x40001000

0800127c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <MX_TIM7_Init+0x64>)
 800128c:	4a15      	ldr	r2, [pc, #84]	@ (80012e4 <MX_TIM7_Init+0x68>)
 800128e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <MX_TIM7_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_TIM7_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <MX_TIM7_Init+0x64>)
 800129e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80012a2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_TIM7_Init+0x64>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012aa:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_TIM7_Init+0x64>)
 80012ac:	f002 fb54 	bl	8003958 <HAL_TIM_Base_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012b6:	f000 f8c5 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	@ (80012e0 <MX_TIM7_Init+0x64>)
 80012c8:	f002 fdfa 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012d2:	f000 f8b7 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200002ec 	.word	0x200002ec
 80012e4:	40001400 	.word	0x40001400

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <MX_USART2_UART_Init+0x50>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_USART2_UART_Init+0x4c>)
 8001320:	f002 fe5e 	bl	8003fe0 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800132a:	f000 f88b 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000334 	.word	0x20000334
 8001338:	40004400 	.word	0x40004400

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a2c      	ldr	r2, [pc, #176]	@ (800140c <MX_GPIO_Init+0xd0>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a25      	ldr	r2, [pc, #148]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <MX_GPIO_Init+0xd0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <MX_GPIO_Init+0xd0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a17      	ldr	r2, [pc, #92]	@ (800140c <MX_GPIO_Init+0xd0>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80013c8:	4811      	ldr	r0, [pc, #68]	@ (8001410 <MX_GPIO_Init+0xd4>)
 80013ca:	f000 fdef 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80013ce:	2301      	movs	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_GPIO_Init+0xd8>)
 80013e2:	f000 fc47 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 80013e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_GPIO_Init+0xd4>)
 8001400:	f000 fc38 	bl	8001c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40020000 	.word	0x40020000

08001418 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	b29a      	uxth	r2, r3
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	4804      	ldr	r0, [pc, #16]	@ (8001440 <_write+0x28>)
 8001430:	f002 fe26 	bl	8004080 <HAL_UART_Transmit>
  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000334 	.word	0x20000334

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <Error_Handler+0x8>

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <HAL_MspInit+0x58>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <HAL_MspInit+0x58>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001464:	6453      	str	r3, [r2, #68]	@ 0x44
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_MspInit+0x58>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	603b      	str	r3, [r7, #0]
 8001476:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <HAL_MspInit+0x58>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <HAL_MspInit+0x58>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <HAL_MspInit+0x58>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	2005      	movs	r0, #5
 8001494:	f000 fbb7 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001498:	2005      	movs	r0, #5
 800149a:	f000 fbd0 	bl	8001c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a33      	ldr	r2, [pc, #204]	@ (8001598 <HAL_I2C_MspInit+0xec>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d12d      	bne.n	800152a <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b32      	ldr	r3, [pc, #200]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a31      	ldr	r2, [pc, #196]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b2f      	ldr	r3, [pc, #188]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 80014ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014fc:	2304      	movs	r3, #4
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4826      	ldr	r0, [pc, #152]	@ (80015a0 <HAL_I2C_MspInit+0xf4>)
 8001508:	f000 fbb4 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	4b22      	ldr	r3, [pc, #136]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	4a21      	ldr	r2, [pc, #132]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 8001516:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800151a:	6413      	str	r3, [r2, #64]	@ 0x40
 800151c:	4b1f      	ldr	r3, [pc, #124]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001528:	e031      	b.n	800158e <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_I2C_MspInit+0xf8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d12c      	bne.n	800158e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BMP388_SCL_Pin|BMP388_SDA_Pin;
 8001550:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001556:	2312      	movs	r3, #18
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001562:	2304      	movs	r3, #4
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <HAL_I2C_MspInit+0xf4>)
 800156e:	f000 fb81 	bl	8001c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	4a08      	ldr	r2, [pc, #32]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 800157c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001580:	6413      	str	r3, [r2, #64]	@ 0x40
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_I2C_MspInit+0xf0>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	@ 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40005400 	.word	0x40005400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020400 	.word	0x40020400
 80015a4:	40005800 	.word	0x40005800

080015a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <HAL_TIM_Base_MspInit+0x80>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d116      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	4a1a      	ldr	r2, [pc, #104]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ca:	4b18      	ldr	r3, [pc, #96]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2036      	movs	r0, #54	@ 0x36
 80015dc:	f000 fb13 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015e0:	2036      	movs	r0, #54	@ 0x36
 80015e2:	f000 fb2c 	bl	8001c3e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 80015e6:	e01a      	b.n	800161e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <HAL_TIM_Base_MspInit+0x88>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d115      	bne.n	800161e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	4a0c      	ldr	r2, [pc, #48]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 80015fc:	f043 0320 	orr.w	r3, r3, #32
 8001600:	6413      	str	r3, [r2, #64]	@ 0x40
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_TIM_Base_MspInit+0x84>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2037      	movs	r0, #55	@ 0x37
 8001614:	f000 faf7 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001618:	2037      	movs	r0, #55	@ 0x37
 800161a:	f000 fb10 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40001000 	.word	0x40001000
 800162c:	40023800 	.word	0x40023800
 8001630:	40001400 	.word	0x40001400

08001634 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <HAL_UART_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_UART_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	@ (80016bc <HAL_UART_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 800168e:	230c      	movs	r3, #12
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <HAL_UART_MspInit+0x8c>)
 80016aa:	f000 fae3 	bl	8001c74 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <NMI_Handler+0x4>

080016cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <MemManage_Handler+0x4>

080016dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800171a:	f000 f955 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}

08001722 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <TIM6_DAC_IRQHandler+0x10>)
 8001736:	f002 f9fe 	bl	8003b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002a4 	.word	0x200002a4

08001744 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <TIM7_IRQHandler+0x10>)
 800174a:	f002 f9f4 	bl	8003b36 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200002ec 	.word	0x200002ec

08001758 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_kill>:

int _kill(int pid, int sig)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001772:	f007 fcb9 	bl	80090e8 <__errno>
 8001776:	4603      	mov	r3, r0
 8001778:	2216      	movs	r2, #22
 800177a:	601a      	str	r2, [r3, #0]
  return -1;
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_exit>:

void _exit (int status)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe7 	bl	8001768 <_kill>
  while (1) {}    /* Make sure we hang here */
 800179a:	bf00      	nop
 800179c:	e7fd      	b.n	800179a <_exit+0x12>

0800179e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b0:	f3af 8000 	nop.w
 80017b4:	4601      	mov	r1, r0
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	b2ca      	uxtb	r2, r1
 80017be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	dbf0      	blt.n	80017b0 <_read+0x12>
  }

  return len;
 80017ce:	687b      	ldr	r3, [r7, #4]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001800:	605a      	str	r2, [r3, #4]
  return 0;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_isatty>:

int _isatty(int file)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f007 fc3a 	bl	80090e8 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000480 	.word	0x20000480
 80018a8:	200005d8 	.word	0x200005d8

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001908 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d4:	f7ff ffea 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480c      	ldr	r0, [pc, #48]	@ (800190c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018da:	490d      	ldr	r1, [pc, #52]	@ (8001910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f0:	4c0a      	ldr	r4, [pc, #40]	@ (800191c <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fe:	f007 fbf9 	bl	80090f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7ff fb8d 	bl	8001020 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001914:	0800ce44 	.word	0x0800ce44
  ldr r2, =_sbss
 8001918:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800191c:	200005d8 	.word	0x200005d8

08001920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <ADC_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	@ (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	@ (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f94f 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	200f      	movs	r0, #15
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fd7a 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	@ (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f967 	bl	8001c5a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f92f 	bl	8001c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	@ (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	20000014 	.word	0x20000014
 80019c4:	20000010 	.word	0x20000010

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000014 	.word	0x20000014
 80019ec:	20000484 	.word	0x20000484

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000484 	.word	0x20000484

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000014 	.word	0x20000014

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	@ (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	@ (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	@ (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	@ 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e16b      	b.n	8001f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 815a 	bne.w	8001f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80b4 	beq.w	8001f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	4a5f      	ldr	r2, [pc, #380]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a5b      	ldr	r2, [pc, #364]	@ (8001f84 <HAL_GPIO_Init+0x310>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	@ (8001f8c <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	@ (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <HAL_GPIO_Init+0x324>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x216>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	@ (8001f9c <HAL_GPIO_Init+0x328>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x20a>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	@ (8001f84 <HAL_GPIO_Init+0x310>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a32      	ldr	r2, [pc, #200]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae90 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021c00 	.word	0x40021c00
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e12b      	b.n	800224a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fa50 	bl	80014ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	@ 0x24
 8002010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002044:	f001 fc60 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8002048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a81      	ldr	r2, [pc, #516]	@ (8002254 <HAL_I2C_Init+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d807      	bhi.n	8002064 <HAL_I2C_Init+0x84>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4a80      	ldr	r2, [pc, #512]	@ (8002258 <HAL_I2C_Init+0x278>)
 8002058:	4293      	cmp	r3, r2
 800205a:	bf94      	ite	ls
 800205c:	2301      	movls	r3, #1
 800205e:	2300      	movhi	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e006      	b.n	8002072 <HAL_I2C_Init+0x92>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a7d      	ldr	r2, [pc, #500]	@ (800225c <HAL_I2C_Init+0x27c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e7      	b.n	800224a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4a78      	ldr	r2, [pc, #480]	@ (8002260 <HAL_I2C_Init+0x280>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002254 <HAL_I2C_Init+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d802      	bhi.n	80020b4 <HAL_I2C_Init+0xd4>
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	e009      	b.n	80020c8 <HAL_I2C_Init+0xe8>
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	4a69      	ldr	r2, [pc, #420]	@ (8002264 <HAL_I2C_Init+0x284>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	099b      	lsrs	r3, r3, #6
 80020c6:	3301      	adds	r3, #1
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	495c      	ldr	r1, [pc, #368]	@ (8002254 <HAL_I2C_Init+0x274>)
 80020e4:	428b      	cmp	r3, r1
 80020e6:	d819      	bhi.n	800211c <HAL_I2C_Init+0x13c>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1e59      	subs	r1, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f6:	1c59      	adds	r1, r3, #1
 80020f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020fc:	400b      	ands	r3, r1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <HAL_I2C_Init+0x138>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e59      	subs	r1, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002110:	3301      	adds	r3, #1
 8002112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002116:	e051      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002118:	2304      	movs	r3, #4
 800211a:	e04f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d111      	bne.n	8002148 <HAL_I2C_Init+0x168>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1e58      	subs	r0, r3, #1
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e012      	b.n	800216e <HAL_I2C_Init+0x18e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b00      	cmp	r3, #0
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <HAL_I2C_Init+0x196>
 8002172:	2301      	movs	r3, #1
 8002174:	e022      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10e      	bne.n	800219c <HAL_I2C_Init+0x1bc>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1e58      	subs	r0, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6859      	ldr	r1, [r3, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002196:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800219a:	e00f      	b.n	80021bc <HAL_I2C_Init+0x1dc>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	1e58      	subs	r0, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	0099      	lsls	r1, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6809      	ldr	r1, [r1, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69da      	ldr	r2, [r3, #28]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6911      	ldr	r1, [r2, #16]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	000186a0 	.word	0x000186a0
 8002258:	001e847f 	.word	0x001e847f
 800225c:	003d08ff 	.word	0x003d08ff
 8002260:	431bde83 	.word	0x431bde83
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4603      	mov	r3, r0
 8002278:	817b      	strh	r3, [r7, #10]
 800227a:	460b      	mov	r3, r1
 800227c:	813b      	strh	r3, [r7, #8]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002282:	f7ff fbb5 	bl	80019f0 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b20      	cmp	r3, #32
 8002292:	f040 80d9 	bne.w	8002448 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2319      	movs	r3, #25
 800229c:	2201      	movs	r2, #1
 800229e:	496d      	ldr	r1, [pc, #436]	@ (8002454 <HAL_I2C_Mem_Write+0x1ec>)
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fc8b 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0cc      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_I2C_Mem_Write+0x56>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0c5      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d007      	beq.n	80022e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2221      	movs	r2, #33	@ 0x21
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2240      	movs	r2, #64	@ 0x40
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a4d      	ldr	r2, [pc, #308]	@ (8002458 <HAL_I2C_Mem_Write+0x1f0>)
 8002324:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002326:	88f8      	ldrh	r0, [r7, #6]
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	8979      	ldrh	r1, [r7, #10]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4603      	mov	r3, r0
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fac2 	bl	80028c0 <I2C_RequestMemoryWrite>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d052      	beq.n	80023e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e081      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fd50 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	2b04      	cmp	r3, #4
 800235c:	d107      	bne.n	800236e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800236c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06b      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_I2C_Mem_Write+0x180>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1aa      	bne.n	8002346 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fd43 	bl	8002e80 <I2C_WaitOnBTFFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	2b04      	cmp	r3, #4
 8002406:	d107      	bne.n	8002418 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002416:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e016      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002448:	2302      	movs	r3, #2
  }
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	00100002 	.word	0x00100002
 8002458:	ffff0000 	.word	0xffff0000

0800245c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	@ 0x30
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	817b      	strh	r3, [r7, #10]
 800246e:	460b      	mov	r3, r1
 8002470:	813b      	strh	r3, [r7, #8]
 8002472:	4613      	mov	r3, r2
 8002474:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002476:	f7ff fabb 	bl	80019f0 <HAL_GetTick>
 800247a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 8214 	bne.w	80028b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2319      	movs	r3, #25
 8002490:	2201      	movs	r2, #1
 8002492:	497b      	ldr	r1, [pc, #492]	@ (8002680 <HAL_I2C_Mem_Read+0x224>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fb91 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024a0:	2302      	movs	r3, #2
 80024a2:	e207      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_I2C_Mem_Read+0x56>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e200      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d007      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2222      	movs	r2, #34	@ 0x22
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002508:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a5b      	ldr	r2, [pc, #364]	@ (8002684 <HAL_I2C_Mem_Read+0x228>)
 8002518:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800251a:	88f8      	ldrh	r0, [r7, #6]
 800251c:	893a      	ldrh	r2, [r7, #8]
 800251e:	8979      	ldrh	r1, [r7, #10]
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	4603      	mov	r3, r0
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa5e 	bl	80029ec <I2C_RequestMemoryRead>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1bc      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	2b00      	cmp	r3, #0
 8002540:	d113      	bne.n	800256a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e190      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	2b01      	cmp	r3, #1
 8002570:	d11b      	bne.n	80025aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	e170      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d11b      	bne.n	80025ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	61bb      	str	r3, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	e150      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002600:	e144      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	2b03      	cmp	r3, #3
 8002608:	f200 80f1 	bhi.w	80027ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	2b01      	cmp	r3, #1
 8002612:	d123      	bne.n	800265c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002616:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fc79 	bl	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e145      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800265a:	e117      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	2b02      	cmp	r3, #2
 8002662:	d14e      	bne.n	8002702 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	2200      	movs	r2, #0
 800266c:	4906      	ldr	r1, [pc, #24]	@ (8002688 <HAL_I2C_Mem_Read+0x22c>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 faa4 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e11a      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000
 8002688:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002700:	e0c4      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002708:	2200      	movs	r2, #0
 800270a:	496c      	ldr	r1, [pc, #432]	@ (80028bc <HAL_I2C_Mem_Read+0x460>)
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 fa55 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0cb      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	2200      	movs	r2, #0
 8002766:	4955      	ldr	r1, [pc, #340]	@ (80028bc <HAL_I2C_Mem_Read+0x460>)
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fa27 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e09d      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002786:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ec:	e04e      	b.n	800288c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f000 fb8c 	bl	8002f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e058      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b04      	cmp	r3, #4
 8002840:	d124      	bne.n	800288c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002846:	2b03      	cmp	r3, #3
 8002848:	d107      	bne.n	800285a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002858:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	2b00      	cmp	r3, #0
 8002892:	f47f aeb6 	bne.w	8002602 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00010004 	.word	0x00010004

080028c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	461a      	mov	r2, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	817b      	strh	r3, [r7, #10]
 80028d2:	460b      	mov	r3, r1
 80028d4:	813b      	strh	r3, [r7, #8]
 80028d6:	4613      	mov	r3, r2
 80028d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f960 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002910:	d103      	bne.n	800291a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002918:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e05f      	b.n	80029de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800292c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	492d      	ldr	r1, [pc, #180]	@ (80029e8 <I2C_RequestMemoryWrite+0x128>)
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9bb 	bl	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e04c      	b.n	80029de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800295a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fa46 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e02b      	b.n	80029de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	e021      	b.n	80029dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29b      	uxth	r3, r3
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fa20 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d107      	bne.n	80029ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e005      	b.n	80029de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d2:	893b      	ldrh	r3, [r7, #8]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	00010002 	.word	0x00010002

080029ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a14:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8c2 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00d      	beq.n	8002a5a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a4c:	d103      	bne.n	8002a56 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0aa      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	6a3a      	ldr	r2, [r7, #32]
 8002a6e:	4952      	ldr	r1, [pc, #328]	@ (8002bb8 <I2C_RequestMemoryRead+0x1cc>)
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 f91d 	bl	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e097      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	6a39      	ldr	r1, [r7, #32]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9a8 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00d      	beq.n	8002ac2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	2b04      	cmp	r3, #4
 8002aac:	d107      	bne.n	8002abe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002abc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e076      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d105      	bne.n	8002ad4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac8:	893b      	ldrh	r3, [r7, #8]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	e021      	b.n	8002b18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad4:	893b      	ldrh	r3, [r7, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f982 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d107      	bne.n	8002b0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e050      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b0e:	893b      	ldrh	r3, [r7, #8]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1a:	6a39      	ldr	r1, [r7, #32]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f967 	bl	8002df0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00d      	beq.n	8002b44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	2b04      	cmp	r3, #4
 8002b2e:	d107      	bne.n	8002b40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e035      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f82b 	bl	8002bbc <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b7a:	d103      	bne.n	8002b84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e013      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b88:	897b      	ldrh	r3, [r7, #10]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	6a3a      	ldr	r2, [r7, #32]
 8002b9c:	4906      	ldr	r1, [pc, #24]	@ (8002bb8 <I2C_RequestMemoryRead+0x1cc>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f886 	bl	8002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	00010002 	.word	0x00010002

08002bbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bcc:	e048      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd4:	d044      	beq.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7fe ff0b 	bl	80019f0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d302      	bcc.n	8002bec <I2C_WaitOnFlagUntilTimeout+0x30>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d139      	bne.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d10d      	bne.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	e00c      	b.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d116      	bne.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e023      	b.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	0c1b      	lsrs	r3, r3, #16
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d10d      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	43da      	mvns	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf0c      	ite	eq
 8002c7c:	2301      	moveq	r3, #1
 8002c7e:	2300      	movne	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
 8002c84:	e00c      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d093      	beq.n	8002bce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbe:	e071      	b.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cce:	d123      	bne.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	f043 0204 	orr.w	r2, r3, #4
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e067      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d041      	beq.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d20:	f7fe fe66 	bl	80019f0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d302      	bcc.n	8002d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d136      	bne.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d10c      	bne.n	8002d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	bf14      	ite	ne
 8002d52:	2301      	movne	r3, #1
 8002d54:	2300      	moveq	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e00b      	b.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d016      	beq.n	8002da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e021      	b.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	0c1b      	lsrs	r3, r3, #16
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10c      	bne.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	43da      	mvns	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e00b      	b.n	8002de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f47f af6d 	bne.w	8002cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfc:	e034      	b.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f8e3 	bl	8002fca <I2C_IsAcknowledgeFailed>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e034      	b.n	8002e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e14:	d028      	beq.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e16:	f7fe fdeb 	bl	80019f0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d302      	bcc.n	8002e2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d11d      	bne.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e36:	2b80      	cmp	r3, #128	@ 0x80
 8002e38:	d016      	beq.n	8002e68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e007      	b.n	8002e78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d1c3      	bne.n	8002dfe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8c:	e034      	b.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f89b 	bl	8002fca <I2C_IsAcknowledgeFailed>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e034      	b.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d028      	beq.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe fda3 	bl	80019f0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d11d      	bne.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d016      	beq.n	8002ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e007      	b.n	8002f08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	d1c3      	bne.n	8002e8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f1c:	e049      	b.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d119      	bne.n	8002f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0210 	mvn.w	r2, #16
 8002f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e030      	b.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe fd46 	bl	80019f0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d11d      	bne.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f80:	2b40      	cmp	r3, #64	@ 0x40
 8002f82:	d016      	beq.n	8002fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	d1ae      	bne.n	8002f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe0:	d11b      	bne.n	800301a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f043 0204 	orr.w	r2, r3, #4
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e267      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d075      	beq.n	8003132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003046:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00c      	beq.n	800306c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b85      	ldr	r3, [pc, #532]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800305a:	2b08      	cmp	r3, #8
 800305c:	d112      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305e:	4b82      	ldr	r3, [pc, #520]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306c:	4b7e      	ldr	r3, [pc, #504]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05b      	beq.n	8003130 <HAL_RCC_OscConfig+0x108>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d157      	bne.n	8003130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e242      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308c:	d106      	bne.n	800309c <HAL_RCC_OscConfig+0x74>
 800308e:	4b76      	ldr	r3, [pc, #472]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a75      	ldr	r2, [pc, #468]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e01d      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x98>
 80030a6:	4b70      	ldr	r3, [pc, #448]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6f      	ldr	r2, [pc, #444]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00b      	b.n	80030d8 <HAL_RCC_OscConfig+0xb0>
 80030c0:	4b69      	ldr	r3, [pc, #420]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b66      	ldr	r3, [pc, #408]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a65      	ldr	r2, [pc, #404]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fc86 	bl	80019f0 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7fe fc82 	bl	80019f0 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e207      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0xc0>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7fe fc72 	bl	80019f0 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fc6e 	bl	80019f0 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e1f3      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003122:	4b51      	ldr	r3, [pc, #324]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0xe8>
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d063      	beq.n	8003206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800313e:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003152:	2b08      	cmp	r3, #8
 8003154:	d11c      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003156:	4b44      	ldr	r3, [pc, #272]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d116      	bne.n	8003190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003162:	4b41      	ldr	r3, [pc, #260]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d001      	beq.n	800317a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e1c7      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317a:	4b3b      	ldr	r3, [pc, #236]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4937      	ldr	r1, [pc, #220]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 800318a:	4313      	orrs	r3, r2
 800318c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318e:	e03a      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003198:	4b34      	ldr	r3, [pc, #208]	@ (800326c <HAL_RCC_OscConfig+0x244>)
 800319a:	2201      	movs	r2, #1
 800319c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe fc27 	bl	80019f0 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe fc23 	bl	80019f0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1a8      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4925      	ldr	r1, [pc, #148]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e015      	b.n	8003206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031da:	4b24      	ldr	r3, [pc, #144]	@ (800326c <HAL_RCC_OscConfig+0x244>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fc06 	bl	80019f0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fc02 	bl	80019f0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e187      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d036      	beq.n	8003280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800321a:	4b15      	ldr	r3, [pc, #84]	@ (8003270 <HAL_RCC_OscConfig+0x248>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe fbe6 	bl	80019f0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe fbe2 	bl	80019f0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e167      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_RCC_OscConfig+0x240>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x200>
 8003246:	e01b      	b.n	8003280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <HAL_RCC_OscConfig+0x248>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7fe fbcf 	bl	80019f0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	e00e      	b.n	8003274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003256:	f7fe fbcb 	bl	80019f0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d907      	bls.n	8003274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e150      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	42470000 	.word	0x42470000
 8003270:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	4b88      	ldr	r3, [pc, #544]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ea      	bne.n	8003256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8097 	beq.w	80033bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003292:	4b81      	ldr	r3, [pc, #516]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10f      	bne.n	80032be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b77      	ldr	r3, [pc, #476]	@ (800349c <HAL_RCC_OscConfig+0x474>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b74      	ldr	r3, [pc, #464]	@ (800349c <HAL_RCC_OscConfig+0x474>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a73      	ldr	r2, [pc, #460]	@ (800349c <HAL_RCC_OscConfig+0x474>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7fe fb8b 	bl	80019f0 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7fe fb87 	bl	80019f0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e10c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b6a      	ldr	r3, [pc, #424]	@ (800349c <HAL_RCC_OscConfig+0x474>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x2ea>
 8003304:	4b64      	ldr	r3, [pc, #400]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a63      	ldr	r2, [pc, #396]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003310:	e01c      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x30c>
 800331a:	4b5f      	ldr	r3, [pc, #380]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331e:	4a5e      	ldr	r2, [pc, #376]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	6713      	str	r3, [r2, #112]	@ 0x70
 8003326:	4b5c      	ldr	r3, [pc, #368]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	4a5b      	ldr	r2, [pc, #364]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6713      	str	r3, [r2, #112]	@ 0x70
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0x324>
 8003334:	4b58      	ldr	r3, [pc, #352]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003338:	4a57      	ldr	r2, [pc, #348]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003340:	4b55      	ldr	r3, [pc, #340]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003344:	4a54      	ldr	r2, [pc, #336]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d015      	beq.n	8003380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fb4c 	bl	80019f0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe fb48 	bl	80019f0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0cb      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0ee      	beq.n	800335c <HAL_RCC_OscConfig+0x334>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003380:	f7fe fb36 	bl	80019f0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003386:	e00a      	b.n	800339e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003388:	f7fe fb32 	bl	80019f0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e0b5      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1ee      	bne.n	8003388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	4a38      	ldr	r2, [pc, #224]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80a1 	beq.w	8003508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d05c      	beq.n	800348c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d141      	bne.n	800345e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033da:	4b31      	ldr	r3, [pc, #196]	@ (80034a0 <HAL_RCC_OscConfig+0x478>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fb06 	bl	80019f0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fb02 	bl	80019f0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e087      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fa:	4b27      	ldr	r3, [pc, #156]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	019b      	lsls	r3, r3, #6
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	3b01      	subs	r3, #1
 8003420:	041b      	lsls	r3, r3, #16
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	061b      	lsls	r3, r3, #24
 800342a:	491b      	ldr	r1, [pc, #108]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 800342c:	4313      	orrs	r3, r2
 800342e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003430:	4b1b      	ldr	r3, [pc, #108]	@ (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003432:	2201      	movs	r2, #1
 8003434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003436:	f7fe fadb 	bl	80019f0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343e:	f7fe fad7 	bl	80019f0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e05c      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x416>
 800345c:	e054      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <HAL_RCC_OscConfig+0x478>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fe fac4 	bl	80019f0 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fe fac0 	bl	80019f0 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e045      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347e:	4b06      	ldr	r3, [pc, #24]	@ (8003498 <HAL_RCC_OscConfig+0x470>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x444>
 800348a:	e03d      	b.n	8003508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e038      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x4ec>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d028      	beq.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d121      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d11a      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034dc:	4293      	cmp	r3, r2
 80034de:	d111      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	3b01      	subs	r3, #1
 80034ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d107      	bne.n	8003504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40023800 	.word	0x40023800

08003518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0cc      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800352c:	4b68      	ldr	r3, [pc, #416]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d90c      	bls.n	8003554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b65      	ldr	r3, [pc, #404]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b63      	ldr	r3, [pc, #396]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0b8      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d020      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800356c:	4b59      	ldr	r3, [pc, #356]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003576:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003584:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a52      	ldr	r2, [pc, #328]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800358e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	494d      	ldr	r1, [pc, #308]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d044      	beq.n	8003638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d119      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d003      	beq.n	80035d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d6:	4b3f      	ldr	r3, [pc, #252]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e6:	4b3b      	ldr	r3, [pc, #236]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e067      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f6:	4b37      	ldr	r3, [pc, #220]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0203 	bic.w	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4934      	ldr	r1, [pc, #208]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003604:	4313      	orrs	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003608:	f7fe f9f2 	bl	80019f0 <HAL_GetTick>
 800360c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360e:	e00a      	b.n	8003626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	f7fe f9ee 	bl	80019f0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e04f      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 020c 	and.w	r2, r3, #12
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	d1eb      	bne.n	8003610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003638:	4b25      	ldr	r3, [pc, #148]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d20c      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003646:	4b22      	ldr	r3, [pc, #136]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e032      	b.n	80036c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4916      	ldr	r1, [pc, #88]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	490e      	ldr	r1, [pc, #56]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800369e:	f000 f821 	bl	80036e4 <HAL_RCC_GetSysClockFreq>
 80036a2:	4602      	mov	r2, r0
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	091b      	lsrs	r3, r3, #4
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	490a      	ldr	r1, [pc, #40]	@ (80036d8 <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	5ccb      	ldrb	r3, [r1, r3]
 80036b2:	fa22 f303 	lsr.w	r3, r2, r3
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe f952 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023c00 	.word	0x40023c00
 80036d4:	40023800 	.word	0x40023800
 80036d8:	0800c9f0 	.word	0x0800c9f0
 80036dc:	2000000c 	.word	0x2000000c
 80036e0:	20000010 	.word	0x20000010

080036e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e8:	b094      	sub	sp, #80	@ 0x50
 80036ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036fc:	4b79      	ldr	r3, [pc, #484]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d00d      	beq.n	8003724 <HAL_RCC_GetSysClockFreq+0x40>
 8003708:	2b08      	cmp	r3, #8
 800370a:	f200 80e1 	bhi.w	80038d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x34>
 8003712:	2b04      	cmp	r3, #4
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x3a>
 8003716:	e0db      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003718:	4b73      	ldr	r3, [pc, #460]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800371a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800371c:	e0db      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800371e:	4b73      	ldr	r3, [pc, #460]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e0d8      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003724:	4b6f      	ldr	r3, [pc, #444]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800372c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800372e:	4b6d      	ldr	r3, [pc, #436]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d063      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b6a      	ldr	r3, [pc, #424]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	2200      	movs	r2, #0
 8003742:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003744:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374c:	633b      	str	r3, [r7, #48]	@ 0x30
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	@ 0x34
 8003752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003756:	4622      	mov	r2, r4
 8003758:	462b      	mov	r3, r5
 800375a:	f04f 0000 	mov.w	r0, #0
 800375e:	f04f 0100 	mov.w	r1, #0
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003768:	0150      	lsls	r0, r2, #5
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4621      	mov	r1, r4
 8003770:	1a51      	subs	r1, r2, r1
 8003772:	6139      	str	r1, [r7, #16]
 8003774:	4629      	mov	r1, r5
 8003776:	eb63 0301 	sbc.w	r3, r3, r1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	f04f 0200 	mov.w	r2, #0
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003788:	4659      	mov	r1, fp
 800378a:	018b      	lsls	r3, r1, #6
 800378c:	4651      	mov	r1, sl
 800378e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003792:	4651      	mov	r1, sl
 8003794:	018a      	lsls	r2, r1, #6
 8003796:	4651      	mov	r1, sl
 8003798:	ebb2 0801 	subs.w	r8, r2, r1
 800379c:	4659      	mov	r1, fp
 800379e:	eb63 0901 	sbc.w	r9, r3, r1
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037b6:	4690      	mov	r8, r2
 80037b8:	4699      	mov	r9, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	eb18 0303 	adds.w	r3, r8, r3
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	462b      	mov	r3, r5
 80037c4:	eb49 0303 	adc.w	r3, r9, r3
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037d6:	4629      	mov	r1, r5
 80037d8:	024b      	lsls	r3, r1, #9
 80037da:	4621      	mov	r1, r4
 80037dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037e0:	4621      	mov	r1, r4
 80037e2:	024a      	lsls	r2, r1, #9
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ea:	2200      	movs	r2, #0
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037f4:	f7fd fa48 	bl	8000c88 <__aeabi_uldivmod>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4613      	mov	r3, r2
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003800:	e058      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003802:	4b38      	ldr	r3, [pc, #224]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	2200      	movs	r2, #0
 800380a:	4618      	mov	r0, r3
 800380c:	4611      	mov	r1, r2
 800380e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003812:	623b      	str	r3, [r7, #32]
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800381c:	4642      	mov	r2, r8
 800381e:	464b      	mov	r3, r9
 8003820:	f04f 0000 	mov.w	r0, #0
 8003824:	f04f 0100 	mov.w	r1, #0
 8003828:	0159      	lsls	r1, r3, #5
 800382a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800382e:	0150      	lsls	r0, r2, #5
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4641      	mov	r1, r8
 8003836:	ebb2 0a01 	subs.w	sl, r2, r1
 800383a:	4649      	mov	r1, r9
 800383c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800384c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003854:	ebb2 040a 	subs.w	r4, r2, sl
 8003858:	eb63 050b 	sbc.w	r5, r3, fp
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	00eb      	lsls	r3, r5, #3
 8003866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386a:	00e2      	lsls	r2, r4, #3
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4643      	mov	r3, r8
 8003872:	18e3      	adds	r3, r4, r3
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	464b      	mov	r3, r9
 8003878:	eb45 0303 	adc.w	r3, r5, r3
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800388a:	4629      	mov	r1, r5
 800388c:	028b      	lsls	r3, r1, #10
 800388e:	4621      	mov	r1, r4
 8003890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003894:	4621      	mov	r1, r4
 8003896:	028a      	lsls	r2, r1, #10
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800389e:	2200      	movs	r2, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	61fa      	str	r2, [r7, #28]
 80038a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a8:	f7fd f9ee 	bl	8000c88 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3750      	adds	r7, #80	@ 0x50
 80038dc:	46bd      	mov	sp, r7
 80038de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	2000000c 	.word	0x2000000c

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800390c:	f7ff fff0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	0800ca00 	.word	0x0800ca00

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003934:	f7ff ffdc 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b05      	ldr	r3, [pc, #20]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0b5b      	lsrs	r3, r3, #13
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4903      	ldr	r1, [pc, #12]	@ (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40023800 	.word	0x40023800
 8003954:	0800ca00 	.word	0x0800ca00

08003958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e041      	b.n	80039ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fe12 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	4619      	mov	r1, r3
 8003996:	4610      	mov	r0, r2
 8003998:	f000 f9e6 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d001      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e04e      	b.n	8003aae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	@ (8003abc <HAL_TIM_Base_Start_IT+0xc4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d022      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3a:	d01d      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d018      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d013      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d00e      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003acc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d009      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d004      	beq.n	8003a78 <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d111      	bne.n	8003a9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b06      	cmp	r3, #6
 8003a88:	d010      	beq.n	8003aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f042 0201 	orr.w	r2, r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	e007      	b.n	8003aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40010400 	.word	0x40010400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40001800 	.word	0x40001800

08003ad8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a1a      	ldr	r2, [r3, #32]
 8003af6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10f      	bne.n	8003b20 <HAL_TIM_Base_Stop_IT+0x48>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6a1a      	ldr	r2, [r3, #32]
 8003b06:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_TIM_Base_Stop_IT+0x48>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 0201 	bic.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01b      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0202 	mvn.w	r2, #2
 8003b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f8d2 	bl	8003d2a <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8c4 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8d5 	bl	8003d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d020      	beq.n	8003be6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01b      	beq.n	8003be6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f06f 0204 	mvn.w	r2, #4
 8003bb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f8ac 	bl	8003d2a <HAL_TIM_IC_CaptureCallback>
 8003bd2:	e005      	b.n	8003be0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 f89e 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8af 	bl	8003d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01b      	beq.n	8003c32 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0208 	mvn.w	r2, #8
 8003c02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2204      	movs	r2, #4
 8003c08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f886 	bl	8003d2a <HAL_TIM_IC_CaptureCallback>
 8003c1e:	e005      	b.n	8003c2c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f878 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f889 	bl	8003d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01b      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0210 	mvn.w	r2, #16
 8003c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2208      	movs	r2, #8
 8003c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f860 	bl	8003d2a <HAL_TIM_IC_CaptureCallback>
 8003c6a:	e005      	b.n	8003c78 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f000 f852 	bl	8003d16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f863 	bl	8003d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00c      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f06f 0201 	mvn.w	r2, #1
 8003c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f003 fef7 	bl	8007a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00c      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f983 	bl	8003fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00c      	beq.n	8003cea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f834 	bl	8003d52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 0320 	and.w	r3, r3, #32
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d007      	beq.n	8003d0e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0220 	mvn.w	r2, #32
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f955 	bl	8003fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a46      	ldr	r2, [pc, #280]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d86:	d00f      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a43      	ldr	r2, [pc, #268]	@ (8003e98 <TIM_Base_SetConfig+0x130>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a42      	ldr	r2, [pc, #264]	@ (8003e9c <TIM_Base_SetConfig+0x134>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a41      	ldr	r2, [pc, #260]	@ (8003ea0 <TIM_Base_SetConfig+0x138>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0x40>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a40      	ldr	r2, [pc, #256]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d108      	bne.n	8003dba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a35      	ldr	r2, [pc, #212]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d02b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d027      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a32      	ldr	r2, [pc, #200]	@ (8003e98 <TIM_Base_SetConfig+0x130>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d023      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <TIM_Base_SetConfig+0x134>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01f      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a30      	ldr	r2, [pc, #192]	@ (8003ea0 <TIM_Base_SetConfig+0x138>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d01b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d017      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea8 <TIM_Base_SetConfig+0x140>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a2d      	ldr	r2, [pc, #180]	@ (8003eac <TIM_Base_SetConfig+0x144>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00f      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb0 <TIM_Base_SetConfig+0x148>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2b      	ldr	r2, [pc, #172]	@ (8003eb4 <TIM_Base_SetConfig+0x14c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <TIM_Base_SetConfig+0x150>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a29      	ldr	r2, [pc, #164]	@ (8003ebc <TIM_Base_SetConfig+0x154>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a10      	ldr	r2, [pc, #64]	@ (8003e94 <TIM_Base_SetConfig+0x12c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d003      	beq.n	8003e60 <TIM_Base_SetConfig+0xf8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ea4 <TIM_Base_SetConfig+0x13c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d103      	bne.n	8003e68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d105      	bne.n	8003e86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f023 0201 	bic.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  }
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40010400 	.word	0x40010400
 8003ea8:	40014000 	.word	0x40014000
 8003eac:	40014400 	.word	0x40014400
 8003eb0:	40014800 	.word	0x40014800
 8003eb4:	40001800 	.word	0x40001800
 8003eb8:	40001c00 	.word	0x40001c00
 8003ebc:	40002000 	.word	0x40002000

08003ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e05a      	b.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a21      	ldr	r2, [pc, #132]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d022      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f24:	d01d      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d018      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a18      	ldr	r2, [pc, #96]	@ (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	@ (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d10c      	bne.n	8003f7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000
 8003fa0:	40000400 	.word	0x40000400
 8003fa4:	40000800 	.word	0x40000800
 8003fa8:	40000c00 	.word	0x40000c00
 8003fac:	40010400 	.word	0x40010400
 8003fb0:	40014000 	.word	0x40014000
 8003fb4:	40001800 	.word	0x40001800

08003fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e042      	b.n	8004078 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fb14 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	@ 0x24
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f973 	bl	8004310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695a      	ldr	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004076:	2300      	movs	r3, #0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	@ 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b20      	cmp	r3, #32
 800409e:	d175      	bne.n	800418c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Transmit+0x2c>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e06e      	b.n	800418e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2221      	movs	r2, #33	@ 0x21
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040be:	f7fd fc97 	bl	80019f0 <HAL_GetTick>
 80040c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	88fa      	ldrh	r2, [r7, #6]
 80040ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d108      	bne.n	80040ec <HAL_UART_Transmit+0x6c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
 80040ea:	e003      	b.n	80040f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f4:	e02e      	b.n	8004154 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2180      	movs	r1, #128	@ 0x80
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f848 	bl	8004196 <UART_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e03a      	b.n	800418e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800412c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3302      	adds	r3, #2
 8004132:	61bb      	str	r3, [r7, #24]
 8004134:	e007      	b.n	8004146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3301      	adds	r3, #1
 8004144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1cb      	bne.n	80040f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2200      	movs	r2, #0
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f814 	bl	8004196 <UART_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b086      	sub	sp, #24
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	4613      	mov	r3, r2
 80041a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a6:	e03b      	b.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d037      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fd fc1e 	bl	80019f0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	6a3a      	ldr	r2, [r7, #32]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e03a      	b.n	8004240 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d023      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b80      	cmp	r3, #128	@ 0x80
 80041dc:	d020      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b40      	cmp	r3, #64	@ 0x40
 80041e2:	d01d      	beq.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d116      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f81d 	bl	8004248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2208      	movs	r2, #8
 8004212:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e00f      	b.n	8004240 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	461a      	mov	r2, r3
 8004238:	79fb      	ldrb	r3, [r7, #7]
 800423a:	429a      	cmp	r2, r3
 800423c:	d0b4      	beq.n	80041a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004248:	b480      	push	{r7}
 800424a:	b095      	sub	sp, #84	@ 0x54
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004270:	643a      	str	r2, [r7, #64]	@ 0x40
 8004272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	61fb      	str	r3, [r7, #28]
   return(result);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3314      	adds	r3, #20
 80042a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d119      	bne.n	80042f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0310 	bic.w	r3, r3, #16
 80042d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	330c      	adds	r3, #12
 80042de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e0:	61ba      	str	r2, [r7, #24]
 80042e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	613b      	str	r3, [r7, #16]
   return(result);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e5      	bne.n	80042c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2220      	movs	r2, #32
 80042f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004302:	bf00      	nop
 8004304:	3754      	adds	r7, #84	@ 0x54
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004314:	b0c0      	sub	sp, #256	@ 0x100
 8004316:	af00      	add	r7, sp, #0
 8004318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	ea40 0301 	orr.w	r3, r0, r1
 8004338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	431a      	orrs	r2, r3
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	431a      	orrs	r2, r3
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004368:	f021 010c 	bic.w	r1, r1, #12
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004376:	430b      	orrs	r3, r1
 8004378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800437a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438a:	6999      	ldr	r1, [r3, #24]
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	ea40 0301 	orr.w	r3, r0, r1
 8004396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b8f      	ldr	r3, [pc, #572]	@ (80045dc <UART_SetConfig+0x2cc>)
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d005      	beq.n	80043b0 <UART_SetConfig+0xa0>
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b8d      	ldr	r3, [pc, #564]	@ (80045e0 <UART_SetConfig+0x2d0>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d104      	bne.n	80043ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7ff fabe 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 80043b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043b8:	e003      	b.n	80043c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043ba:	f7ff faa5 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80043be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043cc:	f040 810c 	bne.w	80045e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043e2:	4622      	mov	r2, r4
 80043e4:	462b      	mov	r3, r5
 80043e6:	1891      	adds	r1, r2, r2
 80043e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043ea:	415b      	adcs	r3, r3
 80043ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043f2:	4621      	mov	r1, r4
 80043f4:	eb12 0801 	adds.w	r8, r2, r1
 80043f8:	4629      	mov	r1, r5
 80043fa:	eb43 0901 	adc.w	r9, r3, r1
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004412:	4690      	mov	r8, r2
 8004414:	4699      	mov	r9, r3
 8004416:	4623      	mov	r3, r4
 8004418:	eb18 0303 	adds.w	r3, r8, r3
 800441c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004420:	462b      	mov	r3, r5
 8004422:	eb49 0303 	adc.w	r3, r9, r3
 8004426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800443a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800443e:	460b      	mov	r3, r1
 8004440:	18db      	adds	r3, r3, r3
 8004442:	653b      	str	r3, [r7, #80]	@ 0x50
 8004444:	4613      	mov	r3, r2
 8004446:	eb42 0303 	adc.w	r3, r2, r3
 800444a:	657b      	str	r3, [r7, #84]	@ 0x54
 800444c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004454:	f7fc fc18 	bl	8000c88 <__aeabi_uldivmod>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4b61      	ldr	r3, [pc, #388]	@ (80045e4 <UART_SetConfig+0x2d4>)
 800445e:	fba3 2302 	umull	r2, r3, r3, r2
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	011c      	lsls	r4, r3, #4
 8004466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	1891      	adds	r1, r2, r2
 800447e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004480:	415b      	adcs	r3, r3
 8004482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004488:	4641      	mov	r1, r8
 800448a:	eb12 0a01 	adds.w	sl, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb43 0b01 	adc.w	fp, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044a8:	4692      	mov	sl, r2
 80044aa:	469b      	mov	fp, r3
 80044ac:	4643      	mov	r3, r8
 80044ae:	eb1a 0303 	adds.w	r3, sl, r3
 80044b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044b6:	464b      	mov	r3, r9
 80044b8:	eb4b 0303 	adc.w	r3, fp, r3
 80044bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044d4:	460b      	mov	r3, r1
 80044d6:	18db      	adds	r3, r3, r3
 80044d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044da:	4613      	mov	r3, r2
 80044dc:	eb42 0303 	adc.w	r3, r2, r3
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044ea:	f7fc fbcd 	bl	8000c88 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	4b3b      	ldr	r3, [pc, #236]	@ (80045e4 <UART_SetConfig+0x2d4>)
 80044f6:	fba3 2301 	umull	r2, r3, r3, r1
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	2264      	movs	r2, #100	@ 0x64
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	1acb      	subs	r3, r1, r3
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <UART_SetConfig+0x2d4>)
 800450c:	fba3 2302 	umull	r2, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004518:	441c      	add	r4, r3
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004534:	415b      	adcs	r3, r3
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6339      	str	r1, [r7, #48]	@ 0x30
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800458c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004590:	460b      	mov	r3, r1
 8004592:	18db      	adds	r3, r3, r3
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004596:	4613      	mov	r3, r2
 8004598:	eb42 0303 	adc.w	r3, r2, r3
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045a6:	f7fc fb6f 	bl	8000c88 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4b0d      	ldr	r3, [pc, #52]	@ (80045e4 <UART_SetConfig+0x2d4>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	2164      	movs	r1, #100	@ 0x64
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	3332      	adds	r3, #50	@ 0x32
 80045c2:	4a08      	ldr	r2, [pc, #32]	@ (80045e4 <UART_SetConfig+0x2d4>)
 80045c4:	fba2 2303 	umull	r2, r3, r2, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	f003 0207 	and.w	r2, r3, #7
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4422      	add	r2, r4
 80045d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045d8:	e106      	b.n	80047e8 <UART_SetConfig+0x4d8>
 80045da:	bf00      	nop
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40011400 	.word	0x40011400
 80045e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ec:	2200      	movs	r2, #0
 80045ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045fa:	4642      	mov	r2, r8
 80045fc:	464b      	mov	r3, r9
 80045fe:	1891      	adds	r1, r2, r2
 8004600:	6239      	str	r1, [r7, #32]
 8004602:	415b      	adcs	r3, r3
 8004604:	627b      	str	r3, [r7, #36]	@ 0x24
 8004606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800460a:	4641      	mov	r1, r8
 800460c:	1854      	adds	r4, r2, r1
 800460e:	4649      	mov	r1, r9
 8004610:	eb43 0501 	adc.w	r5, r3, r1
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	00eb      	lsls	r3, r5, #3
 800461e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004622:	00e2      	lsls	r2, r4, #3
 8004624:	4614      	mov	r4, r2
 8004626:	461d      	mov	r5, r3
 8004628:	4643      	mov	r3, r8
 800462a:	18e3      	adds	r3, r4, r3
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004630:	464b      	mov	r3, r9
 8004632:	eb45 0303 	adc.w	r3, r5, r3
 8004636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004656:	4629      	mov	r1, r5
 8004658:	008b      	lsls	r3, r1, #2
 800465a:	4621      	mov	r1, r4
 800465c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004660:	4621      	mov	r1, r4
 8004662:	008a      	lsls	r2, r1, #2
 8004664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004668:	f7fc fb0e 	bl	8000c88 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4b60      	ldr	r3, [pc, #384]	@ (80047f4 <UART_SetConfig+0x4e4>)
 8004672:	fba3 2302 	umull	r2, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	011c      	lsls	r4, r3, #4
 800467a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800467e:	2200      	movs	r2, #0
 8004680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800468c:	4642      	mov	r2, r8
 800468e:	464b      	mov	r3, r9
 8004690:	1891      	adds	r1, r2, r2
 8004692:	61b9      	str	r1, [r7, #24]
 8004694:	415b      	adcs	r3, r3
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800469c:	4641      	mov	r1, r8
 800469e:	1851      	adds	r1, r2, r1
 80046a0:	6139      	str	r1, [r7, #16]
 80046a2:	4649      	mov	r1, r9
 80046a4:	414b      	adcs	r3, r1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046b4:	4659      	mov	r1, fp
 80046b6:	00cb      	lsls	r3, r1, #3
 80046b8:	4651      	mov	r1, sl
 80046ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046be:	4651      	mov	r1, sl
 80046c0:	00ca      	lsls	r2, r1, #3
 80046c2:	4610      	mov	r0, r2
 80046c4:	4619      	mov	r1, r3
 80046c6:	4603      	mov	r3, r0
 80046c8:	4642      	mov	r2, r8
 80046ca:	189b      	adds	r3, r3, r2
 80046cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046d0:	464b      	mov	r3, r9
 80046d2:	460a      	mov	r2, r1
 80046d4:	eb42 0303 	adc.w	r3, r2, r3
 80046d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046e8:	f04f 0200 	mov.w	r2, #0
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046f4:	4649      	mov	r1, r9
 80046f6:	008b      	lsls	r3, r1, #2
 80046f8:	4641      	mov	r1, r8
 80046fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046fe:	4641      	mov	r1, r8
 8004700:	008a      	lsls	r2, r1, #2
 8004702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004706:	f7fc fabf 	bl	8000c88 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4611      	mov	r1, r2
 8004710:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <UART_SetConfig+0x4e4>)
 8004712:	fba3 2301 	umull	r2, r3, r3, r1
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2264      	movs	r2, #100	@ 0x64
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	1acb      	subs	r3, r1, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	@ 0x32
 8004724:	4a33      	ldr	r2, [pc, #204]	@ (80047f4 <UART_SetConfig+0x4e4>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004730:	441c      	add	r4, r3
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	673b      	str	r3, [r7, #112]	@ 0x70
 800473a:	677a      	str	r2, [r7, #116]	@ 0x74
 800473c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004740:	4642      	mov	r2, r8
 8004742:	464b      	mov	r3, r9
 8004744:	1891      	adds	r1, r2, r2
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	415b      	adcs	r3, r3
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004750:	4641      	mov	r1, r8
 8004752:	1851      	adds	r1, r2, r1
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	4649      	mov	r1, r9
 8004758:	414b      	adcs	r3, r1
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004768:	4659      	mov	r1, fp
 800476a:	00cb      	lsls	r3, r1, #3
 800476c:	4651      	mov	r1, sl
 800476e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004772:	4651      	mov	r1, sl
 8004774:	00ca      	lsls	r2, r1, #3
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	4603      	mov	r3, r0
 800477c:	4642      	mov	r2, r8
 800477e:	189b      	adds	r3, r3, r2
 8004780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004782:	464b      	mov	r3, r9
 8004784:	460a      	mov	r2, r1
 8004786:	eb42 0303 	adc.w	r3, r2, r3
 800478a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	663b      	str	r3, [r7, #96]	@ 0x60
 8004796:	667a      	str	r2, [r7, #100]	@ 0x64
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047a4:	4649      	mov	r1, r9
 80047a6:	008b      	lsls	r3, r1, #2
 80047a8:	4641      	mov	r1, r8
 80047aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ae:	4641      	mov	r1, r8
 80047b0:	008a      	lsls	r2, r1, #2
 80047b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047b6:	f7fc fa67 	bl	8000c88 <__aeabi_uldivmod>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <UART_SetConfig+0x4e4>)
 80047c0:	fba3 1302 	umull	r1, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	2164      	movs	r1, #100	@ 0x64
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	3332      	adds	r3, #50	@ 0x32
 80047d2:	4a08      	ldr	r2, [pc, #32]	@ (80047f4 <UART_SetConfig+0x4e4>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4422      	add	r2, r4
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <Complementary_Init>:

extern void Error_Handler(void);


void Complementary_Init(struct complementary *pComp,double alpha,double sampling_time)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6178      	str	r0, [r7, #20]
 8004800:	ed87 0b02 	vstr	d0, [r7, #8]
 8004804:	ed87 1b00 	vstr	d1, [r7]
	if( pComp == NULL)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <Complementary_Init+0x20>
	{
		printf("Null pointer error !\n");
 800480e:	4839      	ldr	r0, [pc, #228]	@ (80048f4 <Complementary_Init+0xfc>)
 8004810:	f004 fb16 	bl	8008e40 <puts>
		Error_Handler();
 8004814:	f7fc fe16 	bl	8001444 <Error_Handler>
	}

	if( !( ( alpha >= 0.0f ) && ( alpha <= 1.0f ) && ( sampling_time > 0.0f ) ) )
 8004818:	2301      	movs	r3, #1
 800481a:	461c      	mov	r4, r3
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004828:	f7fc f96c 	bl	8000b04 <__aeabi_dcmpge>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <Complementary_Init+0x3e>
 8004832:	2300      	movs	r3, #0
 8004834:	461c      	mov	r4, r3
 8004836:	b2e3      	uxtb	r3, r4
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d128      	bne.n	8004894 <Complementary_Init+0x9c>
 8004842:	2301      	movs	r3, #1
 8004844:	461c      	mov	r4, r3
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <Complementary_Init+0x100>)
 800484c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004850:	f7fc f94e 	bl	8000af0 <__aeabi_dcmple>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <Complementary_Init+0x66>
 800485a:	2300      	movs	r3, #0
 800485c:	461c      	mov	r4, r3
 800485e:	b2e3      	uxtb	r3, r4
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d114      	bne.n	8004894 <Complementary_Init+0x9c>
 800486a:	2301      	movs	r3, #1
 800486c:	461c      	mov	r4, r3
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487a:	f7fc f94d 	bl	8000b18 <__aeabi_dcmpgt>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <Complementary_Init+0x90>
 8004884:	2300      	movs	r3, #0
 8004886:	461c      	mov	r4, r3
 8004888:	b2e3      	uxtb	r3, r4
 800488a:	f083 0301 	eor.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <Complementary_Init+0xa6>
	{
		printf("Alpha must be [0-1] !\n");
 8004894:	4819      	ldr	r0, [pc, #100]	@ (80048fc <Complementary_Init+0x104>)
 8004896:	f004 fad3 	bl	8008e40 <puts>
		Error_Handler();
 800489a:	f7fc fdd3 	bl	8001444 <Error_Handler>
	}

	pComp->alpha = alpha;
 800489e:	6979      	ldr	r1, [r7, #20]
 80048a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a4:	e9c1 2300 	strd	r2, r3, [r1]
	pComp->pitch = 0.0f;
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pComp->roll = 0.0f;
 80048b6:	6979      	ldr	r1, [r7, #20]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pComp->yaw = 0.0f;
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pComp->ts = sampling_time / 1000.0f;
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004900 <Complementary_Init+0x108>)
 80048d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048dc:	f7fb ffb6 	bl	800084c <__aeabi_ddiv>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	e9c1 2308 	strd	r2, r3, [r1, #32]

}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd90      	pop	{r4, r7, pc}
 80048f2:	bf00      	nop
 80048f4:	0800c6f0 	.word	0x0800c6f0
 80048f8:	3ff00000 	.word	0x3ff00000
 80048fc:	0800c708 	.word	0x0800c708
 8004900:	408f4000 	.word	0x408f4000

08004904 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8004904:	b590      	push	{r4, r7, lr}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	4613      	mov	r3, r2
 8004914:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <bmi160_get_regs+0x24>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d102      	bne.n	800492e <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8004928:	23ff      	movs	r3, #255	@ 0xff
 800492a:	75fb      	strb	r3, [r7, #23]
 800492c:	e017      	b.n	800495e <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 800492e:	89bb      	ldrh	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8004934:	23f4      	movs	r3, #244	@ 0xf4
 8004936:	75fb      	strb	r3, [r7, #23]
 8004938:	e011      	b.n	800495e <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	789b      	ldrb	r3, [r3, #2]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d103      	bne.n	800494a <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004948:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69dc      	ldr	r4, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7858      	ldrb	r0, [r3, #1]
 8004952:	89bb      	ldrh	r3, [r7, #12]
 8004954:	7bf9      	ldrb	r1, [r7, #15]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	47a0      	blx	r4
 800495a:	4603      	mov	r3, r0
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800495e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004962:	4618      	mov	r0, r3
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	bd90      	pop	{r4, r7, pc}

0800496a <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 800496a:	b590      	push	{r4, r7, lr}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	4613      	mov	r3, r2
 800497a:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <bmi160_set_regs+0x28>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8004992:	23ff      	movs	r3, #255	@ 0xff
 8004994:	75fb      	strb	r3, [r7, #23]
 8004996:	e045      	b.n	8004a24 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8004998:	89bb      	ldrh	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 800499e:	23f4      	movs	r3, #244	@ 0xf4
 80049a0:	75fb      	strb	r3, [r7, #23]
 80049a2:	e03f      	b.n	8004a24 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d103      	bne.n	80049b4 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049b2:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7a1b      	ldrb	r3, [r3, #8]
 80049b8:	2b11      	cmp	r3, #17
 80049ba:	d003      	beq.n	80049c4 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 80049c0:	2b15      	cmp	r3, #21
 80049c2:	d124      	bne.n	8004a0e <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1c      	ldr	r4, [r3, #32]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	7858      	ldrb	r0, [r3, #1]
 80049cc:	89bb      	ldrh	r3, [r7, #12]
 80049ce:	7bf9      	ldrb	r1, [r7, #15]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	47a0      	blx	r4
 80049d4:	4603      	mov	r3, r0
 80049d6:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	2001      	movs	r0, #1
 80049de:	4798      	blx	r3
 80049e0:	e01a      	b.n	8004a18 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1c      	ldr	r4, [r3, #32]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	7858      	ldrb	r0, [r3, #1]
 80049ea:	7dbb      	ldrb	r3, [r7, #22]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	441a      	add	r2, r3
 80049f0:	7bf9      	ldrb	r1, [r7, #15]
 80049f2:	2301      	movs	r3, #1
 80049f4:	47a0      	blx	r4
 80049f6:	4603      	mov	r3, r0
 80049f8:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3301      	adds	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	2001      	movs	r0, #1
 8004a06:	4798      	blx	r3
            for (; count < len; count++)
 8004a08:	7dbb      	ldrb	r3, [r7, #22]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	75bb      	strb	r3, [r7, #22]
 8004a0e:	7dbb      	ldrb	r3, [r7, #22]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	89ba      	ldrh	r2, [r7, #12]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d8e4      	bhi.n	80049e2 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8004a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8004a20:	23fe      	movs	r3, #254	@ 0xfe
 8004a22:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8004a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	371c      	adds	r7, #28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd90      	pop	{r4, r7, pc}

08004a30 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fa98 	bl	8004f72 <null_ptr_check>
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <bmi160_init+0x38>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	789b      	ldrb	r3, [r3, #2]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004a56:	f107 010d 	add.w	r1, r7, #13
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	207f      	movs	r0, #127	@ 0x7f
 8004a60:	f7ff ff50 	bl	8004904 <bmi160_get_regs>
 8004a64:	4603      	mov	r3, r0
 8004a66:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8004a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d127      	bne.n	8004ac0 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8004a76:	e007      	b.n	8004a88 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7ff ff40 	bl	8004904 <bmi160_get_regs>
 8004a84:	4603      	mov	r3, r0
 8004a86:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8004a88:	7bbb      	ldrb	r3, [r7, #14]
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	73ba      	strb	r2, [r7, #14]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <bmi160_init+0x6a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2bd1      	cmp	r3, #209	@ 0xd1
 8004a98:	d1ee      	bne.n	8004a78 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8004a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <bmi160_init+0x8c>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2bd1      	cmp	r3, #209	@ 0xd1
 8004aa8:	d108      	bne.n	8004abc <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	22ff      	movs	r2, #255	@ 0xff
 8004aae:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f80b 	bl	8004acc <bmi160_soft_reset>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e001      	b.n	8004ac0 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8004abc:	23fd      	movs	r3, #253	@ 0xfd
 8004abe:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8004ad4:	23b6      	movs	r3, #182	@ 0xb6
 8004ad6:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <bmi160_soft_reset+0x1a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ae6:	23ff      	movs	r3, #255	@ 0xff
 8004ae8:	73fb      	strb	r3, [r7, #15]
 8004aea:	e024      	b.n	8004b36 <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8004aec:	f107 010e 	add.w	r1, r7, #14
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	207e      	movs	r0, #126	@ 0x7e
 8004af6:	f7ff ff38 	bl	800496a <bmi160_set_regs>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b02:	2001      	movs	r0, #1
 8004b04:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8004b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10c      	bne.n	8004b28 <bmi160_soft_reset+0x5c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	789b      	ldrb	r3, [r3, #2]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d108      	bne.n	8004b28 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8004b16:	f107 010e 	add.w	r1, r7, #14
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	207f      	movs	r0, #127	@ 0x7f
 8004b20:	f7ff fef0 	bl	8004904 <bmi160_get_regs>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8004b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fa3e 	bl	8004fb2 <default_param_settg>
        }
    }

    return rslt;
 8004b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <bmi160_set_sens_conf+0x1a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004b5c:	23ff      	movs	r3, #255	@ 0xff
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	e01f      	b.n	8004ba2 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fa4f 	bl	8005006 <set_accel_conf>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d116      	bne.n	8004ba2 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb8b 	bl	8005290 <set_gyro_conf>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8004b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10d      	bne.n	8004ba2 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f811 	bl	8004bae <bmi160_set_power_mode>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8004b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fb44 	bl	8005226 <check_invalid_settg>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <bmi160_set_power_mode+0x1a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8004bc8:	23ff      	movs	r3, #255	@ 0xff
 8004bca:	73fb      	strb	r3, [r7, #15]
 8004bcc:	e00d      	b.n	8004bea <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fc68 	bl	80054a4 <set_accel_pwr>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8004bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fcf6 	bl	80055d2 <set_gyro_pwr>
 8004be6:	4603      	mov	r3, r0
 8004be8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8004c0e:	7bfb      	ldrb	r3, [r7, #15]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8004c16:	7d7b      	ldrb	r3, [r7, #21]
 8004c18:	109b      	asrs	r3, r3, #2
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8004c22:	7d7b      	ldrb	r3, [r7, #21]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8004c2a:	7d3b      	ldrb	r3, [r7, #20]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8004c30:	2303      	movs	r3, #3
 8004c32:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03c      	beq.n	8004cb4 <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8004c3a:	7d7b      	ldrb	r3, [r7, #21]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d024      	beq.n	8004c8a <bmi160_get_sensor_data+0x94>
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	dc34      	bgt.n	8004cae <bmi160_get_sensor_data+0xb8>
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d002      	beq.n	8004c4e <bmi160_get_sensor_data+0x58>
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d00f      	beq.n	8004c6c <bmi160_get_sensor_data+0x76>
 8004c4c:	e02f      	b.n	8004cae <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004c54:	23ff      	movs	r3, #255	@ 0xff
 8004c56:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8004c58:	e02e      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8004c5a:	7dbb      	ldrb	r3, [r7, #22]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 fcfa 	bl	800565a <get_accel_data>
 8004c66:	4603      	mov	r3, r0
 8004c68:	75fb      	strb	r3, [r7, #23]
                break;
 8004c6a:	e025      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004c72:	23ff      	movs	r3, #255	@ 0xff
 8004c74:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8004c76:	e01f      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8004c78:	7dbb      	ldrb	r3, [r7, #22]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fdb7 	bl	80057f2 <get_gyro_data>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]
                break;
 8004c88:	e016      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <bmi160_get_sensor_data+0xa0>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8004c96:	23ff      	movs	r3, #255	@ 0xff
 8004c98:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8004c9a:	e00d      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8004c9c:	7db8      	ldrb	r0, [r7, #22]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	f000 fef3 	bl	8005a8e <get_accel_gyro_data>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
                break;
 8004cac:	e004      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8004cae:	23fb      	movs	r3, #251	@ 0xfb
 8004cb0:	75fb      	strb	r3, [r7, #23]
                break;
 8004cb2:	e001      	b.n	8004cb8 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8004cb4:	23ff      	movs	r3, #255	@ 0xff
 8004cb6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	6039      	str	r1, [r7, #0]
 8004cce:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    int8_t self_test_rslt = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004cd4:	6838      	ldr	r0, [r7, #0]
 8004cd6:	f000 f94c 	bl	8004f72 <null_ptr_check>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <bmi160_perform_self_test+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8004ce6:	23ff      	movs	r3, #255	@ 0xff
 8004ce8:	73fb      	strb	r3, [r7, #15]
 8004cea:	e032      	b.n	8004d52 <bmi160_perform_self_test+0x8e>
    }
    else
    {

        /* Proceed if null check is fine */
        switch (select_sensor)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d002      	beq.n	8004cf8 <bmi160_perform_self_test+0x34>
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d006      	beq.n	8004d04 <bmi160_perform_self_test+0x40>
 8004cf6:	e017      	b.n	8004d28 <bmi160_perform_self_test+0x64>
        {
            case BMI160_ACCEL_ONLY:
                rslt = perform_accel_self_test(dev);
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f001 f80b 	bl	8005d14 <perform_accel_self_test>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	73fb      	strb	r3, [r7, #15]
                break;
 8004d02:	e015      	b.n	8004d30 <bmi160_perform_self_test+0x6c>
            case BMI160_GYRO_ONLY:

                /* Set the power mode as normal mode */
                dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2215      	movs	r2, #21
 8004d08:	731a      	strb	r2, [r3, #12]
                rslt = bmi160_set_power_mode(dev);
 8004d0a:	6838      	ldr	r0, [r7, #0]
 8004d0c:	f7ff ff4f 	bl	8004bae <bmi160_set_power_mode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]

                /* Perform gyro self test */
                if (rslt == BMI160_OK)
 8004d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <bmi160_perform_self_test+0x6a>
                {
                    /* Perform gyro self test */
                    rslt = perform_gyro_self_test(dev);
 8004d1c:	6838      	ldr	r0, [r7, #0]
 8004d1e:	f001 f8d5 	bl	8005ecc <perform_gyro_self_test>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]
                }

                break;
 8004d26:	e002      	b.n	8004d2e <bmi160_perform_self_test+0x6a>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8004d28:	23fb      	movs	r3, #251	@ 0xfb
 8004d2a:	73fb      	strb	r3, [r7, #15]
                break;
 8004d2c:	e000      	b.n	8004d30 <bmi160_perform_self_test+0x6c>
                break;
 8004d2e:	bf00      	nop
        }

        /* Check to ensure bus error does not occur */
        if (rslt >= BMI160_OK)
 8004d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	db06      	blt.n	8004d46 <bmi160_perform_self_test+0x82>
        {
            /* Store the status of self test result */
            self_test_rslt = rslt;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	73bb      	strb	r3, [r7, #14]

            /* Perform soft reset */
            rslt = bmi160_soft_reset(dev);
 8004d3c:	6838      	ldr	r0, [r7, #0]
 8004d3e:	f7ff fec5 	bl	8004acc <bmi160_soft_reset>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]

        }

        /* Check to ensure bus operations are success */
        if (rslt == BMI160_OK)
 8004d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <bmi160_perform_self_test+0x8e>
        {
            /* Restore self_test_rslt as return value */
            rslt = self_test_rslt;
 8004d4e:	7bbb      	ldrb	r3, [r7, #14]
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8004d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004d68:	6838      	ldr	r0, [r7, #0]
 8004d6a:	f000 f902 	bl	8004f72 <null_ptr_check>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8004d7a:	23ff      	movs	r3, #255	@ 0xff
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e069      	b.n	8004e54 <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004d80:	f107 010c 	add.w	r1, r7, #12
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2207      	movs	r2, #7
 8004d88:	2071      	movs	r0, #113	@ 0x71
 8004d8a:	f7ff fdbb 	bl	8004904 <bmi160_get_regs>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 8004d92:	7b3b      	ldrb	r3, [r7, #12]
 8004d94:	b25a      	sxtb	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8004d9a:	7b7b      	ldrb	r3, [r7, #13]
 8004d9c:	b25a      	sxtb	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 8004da2:	7bbb      	ldrb	r3, [r7, #14]
 8004da4:	b25a      	sxtb	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 8004dae:	7cbb      	ldrb	r3, [r7, #18]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004db6:	7f7b      	ldrb	r3, [r7, #29]
 8004db8:	b21b      	sxth	r3, r3
 8004dba:	039b      	lsls	r3, r3, #14
 8004dbc:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004dbe:	7fbb      	ldrb	r3, [r7, #30]
 8004dc0:	b21b      	sxth	r3, r3
 8004dc2:	019b      	lsls	r3, r3, #6
 8004dc4:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004dc6:	8b7a      	ldrh	r2, [r7, #26]
 8004dc8:	8b3b      	ldrh	r3, [r7, #24]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 8004dce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	da00      	bge.n	8004dd8 <bmi160_get_offsets+0x7a>
 8004dd6:	333f      	adds	r3, #63	@ 0x3f
 8004dd8:	119b      	asrs	r3, r3, #6
 8004dda:	b21a      	sxth	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 8004de0:	7c3b      	ldrb	r3, [r7, #16]
 8004de2:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 8004de4:	7cbb      	ldrb	r3, [r7, #18]
 8004de6:	109b      	asrs	r3, r3, #2
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004df0:	7f7b      	ldrb	r3, [r7, #29]
 8004df2:	b21b      	sxth	r3, r3
 8004df4:	039b      	lsls	r3, r3, #14
 8004df6:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004df8:	7fbb      	ldrb	r3, [r7, #30]
 8004dfa:	b21b      	sxth	r3, r3
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004e00:	8b7a      	ldrh	r2, [r7, #26]
 8004e02:	8b3b      	ldrh	r3, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 8004e08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	da00      	bge.n	8004e12 <bmi160_get_offsets+0xb4>
 8004e10:	333f      	adds	r3, #63	@ 0x3f
 8004e12:	119b      	asrs	r3, r3, #6
 8004e14:	b21a      	sxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 8004e1a:	7c7b      	ldrb	r3, [r7, #17]
 8004e1c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 8004e1e:	7cbb      	ldrb	r3, [r7, #18]
 8004e20:	111b      	asrs	r3, r3, #4
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 8004e2a:	7f7b      	ldrb	r3, [r7, #29]
 8004e2c:	b21b      	sxth	r3, r3
 8004e2e:	039b      	lsls	r3, r3, #14
 8004e30:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8004e32:	7fbb      	ldrb	r3, [r7, #30]
 8004e34:	b21b      	sxth	r3, r3
 8004e36:	019b      	lsls	r3, r3, #6
 8004e38:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8004e3a:	8b7a      	ldrh	r2, [r7, #26]
 8004e3c:	8b3b      	ldrh	r3, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 8004e42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da00      	bge.n	8004e4c <bmi160_get_offsets+0xee>
 8004e4a:	333f      	adds	r3, #63	@ 0x3f
 8004e4c:	119b      	asrs	r3, r3, #6
 8004e4e:	b21a      	sxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8004e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <bmi160_set_offsets>:
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,
                          const struct bmi160_offsets *offset,
                          struct bmi160_dev const *dev)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data[7];
    uint8_t x_msb, y_msb, z_msb;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f880 	bl	8004f72 <null_ptr_check>
 8004e72:	4603      	mov	r3, r0
 8004e74:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 8004e76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <bmi160_set_offsets+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8004e7e:	23ff      	movs	r3, #255	@ 0xff
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	e070      	b.n	8004f66 <bmi160_set_offsets+0x106>
    }
    else
    {
        /* Update the accel offset */
        data[0] = (uint8_t)offset->off_acc_x;
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f993 3000 	ldrsb.w	r3, [r3]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	753b      	strb	r3, [r7, #20]
        data[1] = (uint8_t)offset->off_acc_y;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	757b      	strb	r3, [r7, #21]
        data[2] = (uint8_t)offset->off_acc_z;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	75bb      	strb	r3, [r7, #22]

        /* Update the LSB of gyro offset */
        data[3] = BMI160_GET_LSB(offset->off_gyro_x);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	75fb      	strb	r3, [r7, #23]
        data[4] = BMI160_GET_LSB(offset->off_gyro_y);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	763b      	strb	r3, [r7, #24]
        data[5] = BMI160_GET_LSB(offset->off_gyro_z);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	767b      	strb	r3, [r7, #25]

        /* Update the MSB of gyro offset */
        x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	121b      	asrs	r3, r3, #8
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	77bb      	strb	r3, [r7, #30]
        y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	121b      	asrs	r3, r3, #8
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	777b      	strb	r3, [r7, #29]
        z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	121b      	asrs	r3, r3, #8
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f003 0303 	and.w	r3, r3, #3
 8004ef4:	773b      	strb	r3, [r7, #28]
        data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
 8004ef6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	b25a      	sxtb	r2, r3
 8004efe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	4313      	orrs	r3, r2
 8004f08:	b25a      	sxtb	r2, r3
 8004f0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	b25b      	sxtb	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	76bb      	strb	r3, [r7, #26]

        /* Set the offset enable/disable for gyro and accel */
        data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8004f16:	7ebb      	ldrb	r3, [r7, #26]
 8004f18:	b25b      	sxtb	r3, r3
 8004f1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f1e:	b25a      	sxtb	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	795b      	ldrb	r3, [r3, #5]
 8004f24:	b25b      	sxtb	r3, r3
 8004f26:	01db      	lsls	r3, r3, #7
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	76bb      	strb	r3, [r7, #26]
        data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8004f32:	7ebb      	ldrb	r3, [r7, #26]
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f3a:	b25a      	sxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	b25b      	sxtb	r3, r3
 8004f42:	019b      	lsls	r3, r3, #6
 8004f44:	b25b      	sxtb	r3, r3
 8004f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	76bb      	strb	r3, [r7, #26]

        /* Set the offset config and values in the sensor */
        rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8004f54:	f107 0114 	add.w	r1, r7, #20
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2207      	movs	r2, #7
 8004f5c:	2071      	movs	r0, #113	@ 0x71
 8004f5e:	f7ff fd04 	bl	800496a <bmi160_set_regs>
 8004f62:	4603      	mov	r3, r0
 8004f64:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8004f66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b085      	sub	sp, #20
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <null_ptr_check+0x26>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <null_ptr_check+0x26>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <null_ptr_check+0x26>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8004f98:	23ff      	movs	r3, #255	@ 0xff
 8004f9a:	73fb      	strb	r3, [r7, #15]
 8004f9c:	e001      	b.n	8004fa2 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2210      	movs	r2, #16
 8004fca:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2203      	movs	r2, #3
 8004fd0:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2208      	movs	r2, #8
 8004fdc:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2214      	movs	r2, #20
 8004fe2:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6852      	ldr	r2, [r2, #4]
 8004ff0:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	68d2      	ldr	r2, [r2, #12]
 8004ff8:	611a      	str	r2, [r3, #16]
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800500e:	2300      	movs	r3, #0
 8005010:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 8005012:	f107 030c 	add.w	r3, r7, #12
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4618      	mov	r0, r3
 800501a:	f000 f833 	bl	8005084 <check_accel_config>
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d126      	bne.n	8005078 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 800502a:	f107 010c 	add.w	r1, r7, #12
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	2040      	movs	r0, #64	@ 0x40
 8005034:	f7ff fc99 	bl	800496a <bmi160_set_regs>
 8005038:	4603      	mov	r3, r0
 800503a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800503c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d119      	bne.n	8005078 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	795a      	ldrb	r2, [r3, #5]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	79da      	ldrb	r2, [r3, #7]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8005054:	f107 030c 	add.w	r3, r7, #12
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	2041      	movs	r0, #65	@ 0x41
 8005060:	f7ff fc83 	bl	800496a <bmi160_set_regs>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	799a      	ldrb	r2, [r3, #6]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2202      	movs	r2, #2
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	2040      	movs	r0, #64	@ 0x40
 8005096:	f7ff fc35 	bl	8004904 <bmi160_get_regs>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800509e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11b      	bne.n	80050de <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f81e 	bl	80050ea <process_accel_odr>
 80050ae:	4603      	mov	r3, r0
 80050b0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80050b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d111      	bne.n	80050de <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f848 	bl	8005152 <process_accel_bw>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80050c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3301      	adds	r3, #1
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f872 	bl	80051be <process_accel_range>
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	795b      	ldrb	r3, [r3, #5]
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d81a      	bhi.n	800513e <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	795a      	ldrb	r2, [r3, #5]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	7a5b      	ldrb	r3, [r3, #9]
 8005110:	429a      	cmp	r2, r3
 8005112:	d016      	beq.n	8005142 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	795b      	ldrb	r3, [r3, #5]
 8005118:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	f023 030f 	bic.w	r3, r3, #15
 8005122:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8005124:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	b25a      	sxtb	r2, r3
 800512e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005132:	4313      	orrs	r3, r2
 8005134:	b25b      	sxtb	r3, r3
 8005136:	b2da      	uxtb	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	e001      	b.n	8005142 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800513e:	23fc      	movs	r3, #252	@ 0xfc
 8005140:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	79db      	ldrb	r3, [r3, #7]
 800516c:	2b07      	cmp	r3, #7
 800516e:	d81c      	bhi.n	80051aa <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	79da      	ldrb	r2, [r3, #7]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	7adb      	ldrb	r3, [r3, #11]
 8005178:	429a      	cmp	r2, r3
 800517a:	d018      	beq.n	80051ae <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	79db      	ldrb	r3, [r3, #7]
 8005180:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800518a:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 800518c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	b25b      	sxtb	r3, r3
 8005194:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005198:	b25a      	sxtb	r2, r3
 800519a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800519e:	4313      	orrs	r3, r2
 80051a0:	b25b      	sxtb	r3, r3
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	e001      	b.n	80051ae <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80051aa:	23fc      	movs	r3, #252	@ 0xfc
 80051ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	799b      	ldrb	r3, [r3, #6]
 80051d8:	2b0c      	cmp	r3, #12
 80051da:	d81a      	bhi.n	8005212 <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	799a      	ldrb	r2, [r3, #6]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	7a9b      	ldrb	r3, [r3, #10]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d016      	beq.n	8005216 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	799b      	ldrb	r3, [r3, #6]
 80051ec:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f023 030f 	bic.w	r3, r3, #15
 80051f6:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 80051f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	b25a      	sxtb	r2, r3
 8005202:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005206:	4313      	orrs	r3, r2
 8005208:	b25b      	sxtb	r3, r3
 800520a:	b2da      	uxtb	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e001      	b.n	8005216 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005212:	23fc      	movs	r3, #252	@ 0xfc
 8005214:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8005232:	f107 010e 	add.w	r1, r7, #14
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	2002      	movs	r0, #2
 800523c:	f7ff fb62 	bl	8004904 <bmi160_get_regs>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	085b      	lsrs	r3, r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 800524c:	7bbb      	ldrb	r3, [r7, #14]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	b2db      	uxtb	r3, r3
 8005254:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d102      	bne.n	8005262 <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 800525c:	23fa      	movs	r3, #250	@ 0xfa
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	e010      	b.n	8005284 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8005262:	7bbb      	ldrb	r3, [r7, #14]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d102      	bne.n	800526e <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8005268:	23f9      	movs	r3, #249	@ 0xf9
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	e00a      	b.n	8005284 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 800526e:	7bbb      	ldrb	r3, [r7, #14]
 8005270:	2b03      	cmp	r3, #3
 8005272:	d102      	bne.n	800527a <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8005274:	23f8      	movs	r3, #248	@ 0xf8
 8005276:	73fb      	strb	r3, [r7, #15]
 8005278:	e004      	b.n	8005284 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b07      	cmp	r3, #7
 800527e:	d101      	bne.n	8005284 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8005280:	23f7      	movs	r3, #247	@ 0xf7
 8005282:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005284:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8005298:	2300      	movs	r3, #0
 800529a:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 800529c:	f107 030c 	add.w	r3, r7, #12
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f833 	bl	800530e <check_gyro_config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80052ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d126      	bne.n	8005302 <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 80052b4:	f107 010c 	add.w	r1, r7, #12
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	2042      	movs	r0, #66	@ 0x42
 80052be:	f7ff fb54 	bl	800496a <bmi160_set_regs>
 80052c2:	4603      	mov	r3, r0
 80052c4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80052c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d119      	bne.n	8005302 <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7b5a      	ldrb	r2, [r3, #13]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	7bda      	ldrb	r2, [r3, #15]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 80052de:	f107 030c 	add.w	r3, r7, #12
 80052e2:	1c59      	adds	r1, r3, #1
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	2043      	movs	r0, #67	@ 0x43
 80052ea:	f7ff fb3e 	bl	800496a <bmi160_set_regs>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80052f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7b9a      	ldrb	r2, [r3, #14]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8005302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2202      	movs	r2, #2
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	2042      	movs	r0, #66	@ 0x42
 8005320:	f7ff faf0 	bl	8004904 <bmi160_get_regs>
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d11b      	bne.n	8005368 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f81e 	bl	8005374 <process_gyro_odr>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800533c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d111      	bne.n	8005368 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8005344:	6839      	ldr	r1, [r7, #0]
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f848 	bl	80053dc <process_gyro_bw>
 800534c:	4603      	mov	r3, r0
 800534e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8005350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3301      	adds	r3, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f86c 	bl	800543c <process_gyro_range>
 8005364:	4603      	mov	r3, r0
 8005366:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8005368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	7b5b      	ldrb	r3, [r3, #13]
 800538e:	2b0d      	cmp	r3, #13
 8005390:	d81a      	bhi.n	80053c8 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	7b5a      	ldrb	r2, [r3, #13]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	7c5b      	ldrb	r3, [r3, #17]
 800539a:	429a      	cmp	r2, r3
 800539c:	d016      	beq.n	80053cc <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	7b5b      	ldrb	r3, [r3, #13]
 80053a2:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f023 030f 	bic.w	r3, r3, #15
 80053ac:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 80053ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	b25a      	sxtb	r2, r3
 80053b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053bc:	4313      	orrs	r3, r2
 80053be:	b25b      	sxtb	r3, r3
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e001      	b.n	80053cc <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80053c8:	23fc      	movs	r3, #252	@ 0xfc
 80053ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80053cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	7bdb      	ldrb	r3, [r3, #15]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d816      	bhi.n	8005428 <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	7bdb      	ldrb	r3, [r3, #15]
 80053fe:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005408:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800540a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	b25b      	sxtb	r3, r3
 8005412:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005416:	b25a      	sxtb	r2, r3
 8005418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800541c:	4313      	orrs	r3, r2
 800541e:	b25b      	sxtb	r3, r3
 8005420:	b2da      	uxtb	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	e001      	b.n	800542c <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005428:	23fc      	movs	r3, #252	@ 0xfc
 800542a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800542c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800544e:	2300      	movs	r3, #0
 8005450:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	7b9b      	ldrb	r3, [r3, #14]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d81a      	bhi.n	8005490 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	7b9a      	ldrb	r2, [r3, #14]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	7c9b      	ldrb	r3, [r3, #18]
 8005462:	429a      	cmp	r2, r3
 8005464:	d016      	beq.n	8005494 <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	7b9b      	ldrb	r3, [r3, #14]
 800546a:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	f023 0307 	bic.w	r3, r3, #7
 8005474:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8005476:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	b25a      	sxtb	r2, r3
 8005480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005484:	4313      	orrs	r3, r2
 8005486:	b25b      	sxtb	r3, r3
 8005488:	b2da      	uxtb	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e001      	b.n	8005494 <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8005490:	23fc      	movs	r3, #252	@ 0xfc
 8005492:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	791b      	ldrb	r3, [r3, #4]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d92b      	bls.n	8005514 <set_accel_pwr+0x70>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	791b      	ldrb	r3, [r3, #4]
 80054c0:	2b12      	cmp	r3, #18
 80054c2:	d827      	bhi.n	8005514 <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	791a      	ldrb	r2, [r3, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	7a1b      	ldrb	r3, [r3, #8]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d024      	beq.n	800551a <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 80054d0:	f107 030e 	add.w	r3, r7, #14
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 f826 	bl	8005528 <process_under_sampling>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80054e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d118      	bne.n	800551a <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	1d19      	adds	r1, r3, #4
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	207e      	movs	r0, #126	@ 0x7e
 80054f2:	f7ff fa3a 	bl	800496a <bmi160_set_regs>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7a1b      	ldrb	r3, [r3, #8]
 80054fe:	2b10      	cmp	r3, #16
 8005500:	d103      	bne.n	800550a <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005506:	2005      	movs	r0, #5
 8005508:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	791a      	ldrb	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8005512:	e002      	b.n	800551a <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8005514:	23f3      	movs	r3, #243	@ 0xf3
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	e000      	b.n	800551c <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800551a:	bf00      	nop
    }

    return rslt;
 800551c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8005536:	2300      	movs	r3, #0
 8005538:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	2040      	movs	r0, #64	@ 0x40
 8005542:	f7ff f9df 	bl	8004904 <bmi160_get_regs>
 8005546:	4603      	mov	r3, r0
 8005548:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800554a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d139      	bne.n	80055c6 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	791b      	ldrb	r3, [r3, #4]
 8005556:	2b12      	cmp	r3, #18
 8005558:	d120      	bne.n	800559c <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005562:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	2040      	movs	r0, #64	@ 0x40
 8005578:	f7ff f9f7 	bl	800496a <bmi160_set_regs>
 800557c:	4603      	mov	r3, r0
 800557e:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8005580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d11e      	bne.n	80055c6 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8005588:	f107 010c 	add.w	r1, r7, #12
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2202      	movs	r2, #2
 8005590:	2058      	movs	r0, #88	@ 0x58
 8005592:	f7ff f9ea 	bl	800496a <bmi160_set_regs>
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
 800559a:	e014      	b.n	80055c6 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	b25b      	sxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da0f      	bge.n	80055c6 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ae:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7bba      	ldrb	r2, [r7, #14]
 80055b4:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2201      	movs	r2, #1
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	2040      	movs	r0, #64	@ 0x40
 80055be:	f7ff f9d4 	bl	800496a <bmi160_set_regs>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80055c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7b1b      	ldrb	r3, [r3, #12]
 80055e2:	2b14      	cmp	r3, #20
 80055e4:	d007      	beq.n	80055f6 <set_gyro_pwr+0x24>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	7b1b      	ldrb	r3, [r3, #12]
 80055ea:	2b15      	cmp	r3, #21
 80055ec:	d003      	beq.n	80055f6 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 80055f2:	2b17      	cmp	r3, #23
 80055f4:	d129      	bne.n	800564a <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7b1a      	ldrb	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7c1b      	ldrb	r3, [r3, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d025      	beq.n	800564e <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f103 010c 	add.w	r1, r3, #12
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	207e      	movs	r0, #126	@ 0x7e
 800560e:	f7ff f9ac 	bl	800496a <bmi160_set_regs>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	7c1b      	ldrb	r3, [r3, #16]
 800561a:	2b14      	cmp	r3, #20
 800561c:	d104      	bne.n	8005628 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2050      	movs	r0, #80	@ 0x50
 8005624:	4798      	blx	r3
 8005626:	e00b      	b.n	8005640 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7c1b      	ldrb	r3, [r3, #16]
 800562c:	2b17      	cmp	r3, #23
 800562e:	d107      	bne.n	8005640 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8005634:	2b15      	cmp	r3, #21
 8005636:	d103      	bne.n	8005640 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	200a      	movs	r0, #10
 800563e:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	7b1a      	ldrb	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8005648:	e001      	b.n	800564e <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800564a:	23f3      	movs	r3, #243	@ 0xf3
 800564c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800564e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b08c      	sub	sp, #48	@ 0x30
 800565e:	af00      	add	r7, sp, #0
 8005660:	4603      	mov	r3, r0
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 800566e:	f107 0314 	add.w	r3, r7, #20
 8005672:	2200      	movs	r2, #0
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	605a      	str	r2, [r3, #4]
 8005678:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	b29b      	uxth	r3, r3
 800568c:	3306      	adds	r3, #6
 800568e:	b29a      	uxth	r2, r3
 8005690:	f107 0114 	add.w	r1, r7, #20
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2012      	movs	r0, #18
 8005698:	f7ff f934 	bl	8004904 <bmi160_get_regs>
 800569c:	4603      	mov	r3, r0
 800569e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 80056a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f040 809a 	bne.w	80057e0 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 80056ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056b6:	3330      	adds	r3, #48	@ 0x30
 80056b8:	443b      	add	r3, r7
 80056ba:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80056c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056cc:	3330      	adds	r3, #48	@ 0x30
 80056ce:	443b      	add	r3, r7
 80056d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80056d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80056d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80056dc:	b21b      	sxth	r3, r3
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	b21a      	sxth	r2, r3
 80056e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056e6:	b21b      	sxth	r3, r3
 80056e8:	4313      	orrs	r3, r2
 80056ea:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	8c3a      	ldrh	r2, [r7, #32]
 80056f0:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80056f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80056fc:	3330      	adds	r3, #48	@ 0x30
 80056fe:	443b      	add	r3, r7
 8005700:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005708:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005712:	3330      	adds	r3, #48	@ 0x30
 8005714:	443b      	add	r3, r7
 8005716:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800571a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800571e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005722:	b21b      	sxth	r3, r3
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	b21a      	sxth	r2, r3
 8005728:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800572c:	b21b      	sxth	r3, r3
 800572e:	4313      	orrs	r3, r2
 8005730:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	8c3a      	ldrh	r2, [r7, #32]
 8005736:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005738:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005742:	3330      	adds	r3, #48	@ 0x30
 8005744:	443b      	add	r3, r7
 8005746:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800574e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005758:	3330      	adds	r3, #48	@ 0x30
 800575a:	443b      	add	r3, r7
 800575c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005764:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005768:	b21b      	sxth	r3, r3
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	b21a      	sxth	r2, r3
 800576e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005772:	b21b      	sxth	r3, r3
 8005774:	4313      	orrs	r3, r2
 8005776:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	8c3a      	ldrh	r2, [r7, #32]
 800577c:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b03      	cmp	r3, #3
 8005782:	d129      	bne.n	80057d8 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 8005784:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800578e:	3330      	adds	r3, #48	@ 0x30
 8005790:	443b      	add	r3, r7
 8005792:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8005796:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800579a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80057a4:	3330      	adds	r3, #48	@ 0x30
 80057a6:	443b      	add	r3, r7
 80057a8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80057b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80057ba:	3330      	adds	r3, #48	@ 0x30
 80057bc:	443b      	add	r3, r7
 80057be:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80057c2:	041b      	lsls	r3, r3, #16
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 80057c6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	431a      	orrs	r2, r3
 80057cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	609a      	str	r2, [r3, #8]
 80057d6:	e006      	b.n	80057e6 <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
 80057de:	e002      	b.n	80057e6 <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 80057e0:	23fe      	movs	r3, #254	@ 0xfe
 80057e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 80057e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3730      	adds	r7, #48	@ 0x30
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b08c      	sub	sp, #48	@ 0x30
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	4603      	mov	r3, r0
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005806:	f107 0310 	add.w	r3, r7, #16
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	609a      	str	r2, [r3, #8]
 8005812:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d17e      	bne.n	8005928 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 800582a:	f107 0110 	add.w	r1, r7, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2206      	movs	r2, #6
 8005832:	200c      	movs	r0, #12
 8005834:	f7ff f866 	bl	8004904 <bmi160_get_regs>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800583e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005842:	2b00      	cmp	r3, #0
 8005844:	d16c      	bne.n	8005920 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8005846:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005850:	3330      	adds	r3, #48	@ 0x30
 8005852:	443b      	add	r3, r7
 8005854:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800585c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005866:	3330      	adds	r3, #48	@ 0x30
 8005868:	443b      	add	r3, r7
 800586a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800586e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005872:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005876:	b21b      	sxth	r3, r3
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b21a      	sxth	r2, r3
 800587c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005880:	b21b      	sxth	r3, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	8c3a      	ldrh	r2, [r7, #32]
 800588a:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800588c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005896:	3330      	adds	r3, #48	@ 0x30
 8005898:	443b      	add	r3, r7
 800589a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800589e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80058a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058ac:	3330      	adds	r3, #48	@ 0x30
 80058ae:	443b      	add	r3, r7
 80058b0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80058b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80058bc:	b21b      	sxth	r3, r3
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	b21a      	sxth	r2, r3
 80058c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058c6:	b21b      	sxth	r3, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	8c3a      	ldrh	r2, [r7, #32]
 80058d0:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 80058d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058dc:	3330      	adds	r3, #48	@ 0x30
 80058de:	443b      	add	r3, r7
 80058e0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80058e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80058f2:	3330      	adds	r3, #48	@ 0x30
 80058f4:	443b      	add	r3, r7
 80058f6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80058fa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80058fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005902:	b21b      	sxth	r3, r3
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b21a      	sxth	r2, r3
 8005908:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800590c:	b21b      	sxth	r3, r3
 800590e:	4313      	orrs	r3, r2
 8005910:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	8c3a      	ldrh	r2, [r7, #32]
 8005916:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2200      	movs	r2, #0
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	e0b0      	b.n	8005a82 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005920:	23fe      	movs	r3, #254	@ 0xfe
 8005922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005926:	e0ac      	b.n	8005a82 <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	b29b      	uxth	r3, r3
 800592c:	330c      	adds	r3, #12
 800592e:	b29a      	uxth	r2, r3
 8005930:	f107 0110 	add.w	r1, r7, #16
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	200c      	movs	r0, #12
 8005938:	f7fe ffe4 	bl	8004904 <bmi160_get_regs>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8005942:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005946:	2b00      	cmp	r3, #0
 8005948:	f040 8098 	bne.w	8005a7c <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800594c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005956:	3330      	adds	r3, #48	@ 0x30
 8005958:	443b      	add	r3, r7
 800595a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8005962:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800596c:	3330      	adds	r3, #48	@ 0x30
 800596e:	443b      	add	r3, r7
 8005970:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005978:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800597c:	b21b      	sxth	r3, r3
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	b21a      	sxth	r2, r3
 8005982:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005986:	b21b      	sxth	r3, r3
 8005988:	4313      	orrs	r3, r2
 800598a:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	8c3a      	ldrh	r2, [r7, #32]
 8005990:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8005992:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800599c:	3330      	adds	r3, #48	@ 0x30
 800599e:	443b      	add	r3, r7
 80059a0:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80059a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059b2:	3330      	adds	r3, #48	@ 0x30
 80059b4:	443b      	add	r3, r7
 80059b6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80059be:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80059c2:	b21b      	sxth	r3, r3
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b21a      	sxth	r2, r3
 80059c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059cc:	b21b      	sxth	r3, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	8c3a      	ldrh	r2, [r7, #32]
 80059d6:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 80059d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059e2:	3330      	adds	r3, #48	@ 0x30
 80059e4:	443b      	add	r3, r7
 80059e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 80059ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80059f8:	3330      	adds	r3, #48	@ 0x30
 80059fa:	443b      	add	r3, r7
 80059fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 8005a04:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005a08:	b21b      	sxth	r3, r3
 8005a0a:	021b      	lsls	r3, r3, #8
 8005a0c:	b21a      	sxth	r2, r3
 8005a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	4313      	orrs	r3, r2
 8005a16:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	8c3a      	ldrh	r2, [r7, #32]
 8005a1c:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 8005a1e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a22:	3306      	adds	r3, #6
 8005a24:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 8005a28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a32:	3330      	adds	r3, #48	@ 0x30
 8005a34:	443b      	add	r3, r7
 8005a36:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a3a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005a3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a48:	3330      	adds	r3, #48	@ 0x30
 8005a4a:	443b      	add	r3, r7
 8005a4c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005a54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005a5e:	3330      	adds	r3, #48	@ 0x30
 8005a60:	443b      	add	r3, r7
 8005a62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005a6a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	431a      	orrs	r2, r3
 8005a70:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005a74:	431a      	orrs	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	609a      	str	r2, [r3, #8]
 8005a7a:	e002      	b.n	8005a82 <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8005a7c:	23fe      	movs	r3, #254	@ 0xfe
 8005a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 8005a82:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3730      	adds	r7, #48	@ 0x30
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b08c      	sub	sp, #48	@ 0x30
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	605a      	str	r2, [r3, #4]
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f107 0110 	add.w	r1, r7, #16
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	200c      	movs	r0, #12
 8005ad2:	f7fe ff17 	bl	8004904 <bmi160_get_regs>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8005adc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f040 810e 	bne.w	8005d02 <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8005ae6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005af0:	3330      	adds	r3, #48	@ 0x30
 8005af2:	443b      	add	r3, r7
 8005af4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005afc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b06:	3330      	adds	r3, #48	@ 0x30
 8005b08:	443b      	add	r3, r7
 8005b0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b0e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b12:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b20:	b21b      	sxth	r3, r3
 8005b22:	4313      	orrs	r3, r2
 8005b24:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8c3a      	ldrh	r2, [r7, #32]
 8005b2a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b36:	3330      	adds	r3, #48	@ 0x30
 8005b38:	443b      	add	r3, r7
 8005b3a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005b42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b4c:	3330      	adds	r3, #48	@ 0x30
 8005b4e:	443b      	add	r3, r7
 8005b50:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005b5c:	b21b      	sxth	r3, r3
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	b21a      	sxth	r2, r3
 8005b62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8c3a      	ldrh	r2, [r7, #32]
 8005b70:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005b72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b7c:	3330      	adds	r3, #48	@ 0x30
 8005b7e:	443b      	add	r3, r7
 8005b80:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005b88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005b92:	3330      	adds	r3, #48	@ 0x30
 8005b94:	443b      	add	r3, r7
 8005b96:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005b9a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005b9e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	021b      	lsls	r3, r3, #8
 8005ba6:	b21a      	sxth	r2, r3
 8005ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bac:	b21b      	sxth	r3, r3
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8c3a      	ldrh	r2, [r7, #32]
 8005bb6:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8005bb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005bc2:	3330      	adds	r3, #48	@ 0x30
 8005bc4:	443b      	add	r3, r7
 8005bc6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005bce:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005bd8:	3330      	adds	r3, #48	@ 0x30
 8005bda:	443b      	add	r3, r7
 8005bdc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005be4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	b21a      	sxth	r2, r3
 8005bee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bf2:	b21b      	sxth	r3, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	8c3a      	ldrh	r2, [r7, #32]
 8005bfc:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8005bfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c08:	3330      	adds	r3, #48	@ 0x30
 8005c0a:	443b      	add	r3, r7
 8005c0c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005c14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c1e:	3330      	adds	r3, #48	@ 0x30
 8005c20:	443b      	add	r3, r7
 8005c22:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c26:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005c2a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	b21a      	sxth	r2, r3
 8005c34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c38:	b21b      	sxth	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	8c3a      	ldrh	r2, [r7, #32]
 8005c42:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8005c44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c4e:	3330      	adds	r3, #48	@ 0x30
 8005c50:	443b      	add	r3, r7
 8005c52:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8005c5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c64:	3330      	adds	r3, #48	@ 0x30
 8005c66:	443b      	add	r3, r7
 8005c68:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8005c70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005c74:	b21b      	sxth	r3, r3
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	b21a      	sxth	r2, r3
 8005c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c7e:	b21b      	sxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	8c3a      	ldrh	r2, [r7, #32]
 8005c88:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d131      	bne.n	8005cf4 <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 8005c90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005c9a:	3330      	adds	r3, #48	@ 0x30
 8005c9c:	443b      	add	r3, r7
 8005c9e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ca2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8005ca6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cb0:	3330      	adds	r3, #48	@ 0x30
 8005cb2:	443b      	add	r3, r7
 8005cb4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8005cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005cc6:	3330      	adds	r3, #48	@ 0x30
 8005cc8:	443b      	add	r3, r7
 8005cca:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005cce:	041b      	lsls	r3, r3, #16
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005cd2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8005ce2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
 8005cf2:	e009      	b.n	8005d08 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	609a      	str	r2, [r3, #8]
 8005d00:	e002      	b.n	8005d08 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8005d02:	23fe      	movs	r3, #254	@ 0xfe
 8005d04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8005d08:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3730      	adds	r7, #48	@ 0x30
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <perform_accel_self_test>:

/*!
 * @brief This API performs the self test for accelerometer of BMI160
 */
static int8_t perform_accel_self_test(struct bmi160_dev *dev)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	@ 0x28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    struct bmi160_sensor_data accel_pos, accel_neg;

    /* Enable Gyro self test bit */
    rslt = enable_accel_self_test(dev);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f832 	bl	8005d86 <enable_accel_self_test>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI160_OK)
 8005d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d124      	bne.n	8005d7a <perform_accel_self_test+0x66>
    {
        /* Perform accel self test with positive excitation */
        rslt = accel_self_test_positive_excitation(&accel_pos, dev);
 8005d30:	f107 0318 	add.w	r3, r7, #24
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f849 	bl	8005dce <accel_self_test_positive_excitation>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI160_OK)
 8005d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d117      	bne.n	8005d7a <perform_accel_self_test+0x66>
        {
            /* Perform accel self test with negative excitation */
            rslt = accel_self_test_negative_excitation(&accel_neg, dev);
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 f862 	bl	8005e1a <accel_self_test_negative_excitation>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BMI160_OK)
 8005d5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <perform_accel_self_test+0x66>
            {
                /* Validate the self test result */
                rslt = validate_accel_self_test(&accel_pos, &accel_neg);
 8005d64:	f107 020c 	add.w	r2, r7, #12
 8005d68:	f107 0318 	add.w	r3, r7, #24
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 f879 	bl	8005e66 <validate_accel_self_test>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return rslt;
 8005d7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3728      	adds	r7, #40	@ 0x28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <enable_accel_self_test>:
/*!
 * @brief This API enables to perform the accel self test by setting proper
 * configurations to facilitate accel self test
 */
static int8_t enable_accel_self_test(struct bmi160_dev *dev)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Set the Accel power mode as normal mode */
    dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2211      	movs	r2, #17
 8005d92:	711a      	strb	r2, [r3, #4]

    /* Set the sensor range configuration as 8G */
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2208      	movs	r2, #8
 8005d98:	719a      	strb	r2, [r3, #6]
    rslt = bmi160_set_sens_conf(dev);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fe fed1 	bl	8004b42 <bmi160_set_sens_conf>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <enable_accel_self_test+0x3c>
    {
        /* Accel configurations are set to facilitate self test
         * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
        reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
 8005dac:	232c      	movs	r3, #44	@ 0x2c
 8005dae:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
 8005db0:	f107 010e 	add.w	r1, r7, #14
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	2040      	movs	r0, #64	@ 0x40
 8005dba:	f7fe fdd6 	bl	800496a <bmi160_set_regs>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <accel_self_test_positive_excitation>:

/*!
 * @brief This API performs accel self test with positive excitation
 */
static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const struct bmi160_dev *dev)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with positive self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
 8005dd8:	230d      	movs	r3, #13
 8005dda:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005ddc:	f107 010e 	add.w	r1, r7, #14
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2201      	movs	r2, #1
 8005de4:	206d      	movs	r0, #109	@ 0x6d
 8005de6:	f7fe fdc0 	bl	800496a <bmi160_set_regs>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10b      	bne.n	8005e0e <accel_self_test_positive_excitation+0x40>
    {
        /* Read the data after a delay of 50ms - refer datasheet  2.8.1 accel self test*/
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfa:	2032      	movs	r0, #50	@ 0x32
 8005dfc:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2200      	movs	r2, #0
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	2001      	movs	r0, #1
 8005e06:	f7fe fef6 	bl	8004bf6 <bmi160_get_sensor_data>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <accel_self_test_negative_excitation>:

/*!
 * @brief This API performs accel self test with negative excitation
 */
static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const struct bmi160_dev *dev)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with negative self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
 8005e24:	2309      	movs	r3, #9
 8005e26:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005e28:	f107 010e 	add.w	r1, r7, #14
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	206d      	movs	r0, #109	@ 0x6d
 8005e32:	f7fe fd9a 	bl	800496a <bmi160_set_regs>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <accel_self_test_negative_excitation+0x40>
    {
        /* Read the data after a delay of 50ms */
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	2032      	movs	r0, #50	@ 0x32
 8005e48:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	2001      	movs	r0, #1
 8005e52:	f7fe fed0 	bl	8004bf6 <bmi160_get_sensor_data>
 8005e56:	4603      	mov	r3, r0
 8005e58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <validate_accel_self_test>:
/*!
 * @brief This API validates the accel self test results
 */
static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,
                                       const struct bmi160_sensor_data *accel_neg)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Validate the results of self test */
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e84:	dd18      	ble.n	8005eb8 <validate_accel_self_test+0x52>
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e94:	1ad3      	subs	r3, r2, r3
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e9a:	dd0d      	ble.n	8005eb8 <validate_accel_self_test+0x52>
        ((accel_neg->z - accel_pos->z) > BMI160_ACCEL_SELF_TEST_LIMIT))
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005eaa:	1ad3      	subs	r3, r2, r3
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 8005eac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb0:	dd02      	ble.n	8005eb8 <validate_accel_self_test+0x52>
    {
        /* Self test pass condition */
        rslt = BMI160_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	73fb      	strb	r3, [r7, #15]
 8005eb6:	e001      	b.n	8005ebc <validate_accel_self_test+0x56>
    }
    else
    {
        rslt = BMI160_W_ACCEl_SELF_TEST_FAIL;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <perform_gyro_self_test>:

/*!
 * @brief This API performs the self test for gyroscope of BMI160
 */
static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Enable Gyro self test bit */
    rslt = enable_gyro_self_test(dev);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f815 	bl	8005f04 <enable_gyro_self_test>
 8005eda:	4603      	mov	r3, r0
 8005edc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d108      	bne.n	8005ef8 <perform_gyro_self_test+0x2c>
    {
        /* Validate the gyro self test a delay of 50ms */
        dev->delay_ms(50);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eea:	2032      	movs	r0, #50	@ 0x32
 8005eec:	4798      	blx	r3

        /* Validate the gyro self test results */
        rslt = validate_gyro_self_test(dev);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f835 	bl	8005f5e <validate_gyro_self_test>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8005ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <enable_gyro_self_test>:

/*!
 * @brief This API enables the self test bit to trigger self test for Gyro
 */
static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable the Gyro self test bit to trigger the self test */
    rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005f0c:	f107 010e 	add.w	r1, r7, #14
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	206d      	movs	r0, #109	@ 0x6d
 8005f16:	f7fe fcf5 	bl	8004904 <bmi160_get_regs>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d115      	bne.n	8005f52 <enable_gyro_self_test+0x4e>
    {
        reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	f043 0310 	orr.w	r3, r3, #16
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 8005f30:	f107 010e 	add.w	r1, r7, #14
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	206d      	movs	r0, #109	@ 0x6d
 8005f3a:	f7fe fd16 	bl	800496a <bmi160_set_regs>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8005f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <enable_gyro_self_test+0x4e>
        {
            /* Delay to enable gyro self test */
            dev->delay_ms(15);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4e:	200f      	movs	r0, #15
 8005f50:	4798      	blx	r3
        }
    }

    return rslt;
 8005f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <validate_gyro_self_test>:

/*!
 * @brief This API validates the self test results of Gyro
 */
static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Validate the Gyro self test result */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
 8005f66:	f107 010e 	add.w	r1, r7, #14
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	201b      	movs	r0, #27
 8005f70:	f7fe fcc8 	bl	8004904 <bmi160_get_regs>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8005f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10e      	bne.n	8005f9e <validate_gyro_self_test+0x40>
    {

        reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
 8005f80:	7bbb      	ldrb	r3, [r7, #14]
 8005f82:	105b      	asrs	r3, r3, #1
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	73bb      	strb	r3, [r7, #14]
        if (reg_data == BMI160_ENABLE)
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d102      	bne.n	8005f9a <validate_gyro_self_test+0x3c>
        {
            /* Gyro self test success case */
            rslt = BMI160_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
 8005f98:	e001      	b.n	8005f9e <validate_gyro_self_test+0x40>
        }
        else
        {
            rslt = BMI160_W_GYRO_SELF_TEST_FAIL;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8005f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <bmi160_i2c_write>:
		  Error_Handler();
	  }
}

int8_t bmi160_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af04      	add	r7, sp, #16
 8005fb2:	603a      	str	r2, [r7, #0]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	71fb      	strb	r3, [r7, #7]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	71bb      	strb	r3, [r7, #6]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	b299      	uxth	r1, r3
 8005fcc:	79bb      	ldrb	r3, [r7, #6]
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd4:	9302      	str	r3, [sp, #8]
 8005fd6:	88bb      	ldrh	r3, [r7, #4]
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	9300      	str	r3, [sp, #0]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4803      	ldr	r0, [pc, #12]	@ (8005ff0 <bmi160_i2c_write+0x44>)
 8005fe2:	f7fc f941 	bl	8002268 <HAL_I2C_Mem_Write>
	return ( BMI160_OK );
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200001fc 	.word	0x200001fc

08005ff4 <bmi160_i2c_read>:
int8_t bmi160_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	603a      	str	r2, [r7, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	71fb      	strb	r3, [r7, #7]
 8006002:	460b      	mov	r3, r1
 8006004:	71bb      	strb	r3, [r7, #6]
 8006006:	4613      	mov	r3, r2
 8006008:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f043 0301 	orr.w	r3, r3, #1
 8006014:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	b299      	uxth	r1, r3
 800601a:	79bb      	ldrb	r3, [r7, #6]
 800601c:	b29a      	uxth	r2, r3
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	9302      	str	r3, [sp, #8]
 8006024:	88bb      	ldrh	r3, [r7, #4]
 8006026:	9301      	str	r3, [sp, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	2301      	movs	r3, #1
 800602e:	4804      	ldr	r0, [pc, #16]	@ (8006040 <bmi160_i2c_read+0x4c>)
 8006030:	f7fc fa14 	bl	800245c <HAL_I2C_Mem_Read>
	return ( BMI160_OK );
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	200001fc 	.word	0x200001fc

08006044 <delay_ms>:
void delay_ms(uint32_t period)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fb fcdb 	bl	8001a08 <HAL_Delay>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <init_bmi160_sensor_driver_interface>:

int8_t init_bmi160_sensor_driver_interface(struct bmi160_dev *bmi160)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b088      	sub	sp, #32
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <init_bmi160_sensor_driver_interface+0x12>
	{
	  Error_Handler();
 800606a:	f7fb f9eb 	bl	8001444 <Error_Handler>

	#if ( ( BMI160_I2C_INTERFACE) && ( !BMI160_SPI_INTERFACE ) )

	int8_t rslt;

	bmi160_soft_reset(bmi160);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fe fd2c 	bl	8004acc <bmi160_soft_reset>

	bmi160->id = BMI160_DEV_ADDR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2268      	movs	r2, #104	@ 0x68
 8006078:	705a      	strb	r2, [r3, #1]
	bmi160->intf = BMI160_I2C_INTF;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	709a      	strb	r2, [r3, #2]
	bmi160->read = bmi160_i2c_read;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a5c      	ldr	r2, [pc, #368]	@ (80061f4 <init_bmi160_sensor_driver_interface+0x198>)
 8006084:	61da      	str	r2, [r3, #28]
	bmi160->write = bmi160_i2c_write;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a5b      	ldr	r2, [pc, #364]	@ (80061f8 <init_bmi160_sensor_driver_interface+0x19c>)
 800608a:	621a      	str	r2, [r3, #32]
	bmi160->delay_ms = delay_ms;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a5b      	ldr	r2, [pc, #364]	@ (80061fc <init_bmi160_sensor_driver_interface+0x1a0>)
 8006090:	625a      	str	r2, [r3, #36]	@ 0x24

	/* After sensor init introduce 200 msec sleep */
	bmi160->delay_ms(200);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	20c8      	movs	r0, #200	@ 0xc8
 8006098:	4798      	blx	r3

	rslt = bmi160_init(bmi160);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7fe fcc8 	bl	8004a30 <bmi160_init>
 80060a0:	4603      	mov	r3, r0
 80060a2:	77fb      	strb	r3, [r7, #31]

	if ( rslt != BMI160_OK )
 80060a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <init_bmi160_sensor_driver_interface+0x5a>
	{
		printf("BMI160 initialization failure !\n");
 80060ac:	4854      	ldr	r0, [pc, #336]	@ (8006200 <init_bmi160_sensor_driver_interface+0x1a4>)
 80060ae:	f002 fec7 	bl	8008e40 <puts>
		Error_Handler();
 80060b2:	f7fb f9c7 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 initialization success !\n");
 80060b6:	4853      	ldr	r0, [pc, #332]	@ (8006204 <init_bmi160_sensor_driver_interface+0x1a8>)
 80060b8:	f002 fec2 	bl	8008e40 <puts>
	printf("Chip ID 0x%X\n" , bmi160->chip_id);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	4619      	mov	r1, r3
 80060c2:	4851      	ldr	r0, [pc, #324]	@ (8006208 <init_bmi160_sensor_driver_interface+0x1ac>)
 80060c4:	f002 fe54 	bl	8008d70 <iprintf>

	//acceleration self-test configuration
	rslt = bmi160_perform_self_test(BMI160_ACCEL_ONLY,bmi160);
 80060c8:	6879      	ldr	r1, [r7, #4]
 80060ca:	2001      	movs	r0, #1
 80060cc:	f7fe fdfa 	bl	8004cc4 <bmi160_perform_self_test>
 80060d0:	4603      	mov	r3, r0
 80060d2:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 80060d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d004      	beq.n	80060e6 <init_bmi160_sensor_driver_interface+0x8a>
	{
		printf("BMI160 acceleration self-test failure !\n");
 80060dc:	484b      	ldr	r0, [pc, #300]	@ (800620c <init_bmi160_sensor_driver_interface+0x1b0>)
 80060de:	f002 feaf 	bl	8008e40 <puts>
		Error_Handler();
 80060e2:	f7fb f9af 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 acceleration self-test success !\n");
 80060e6:	484a      	ldr	r0, [pc, #296]	@ (8006210 <init_bmi160_sensor_driver_interface+0x1b4>)
 80060e8:	f002 feaa 	bl	8008e40 <puts>

	//gyroscope self-test configuration
	rslt = bmi160_perform_self_test(BMI160_GYRO_ONLY,bmi160);
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	2002      	movs	r0, #2
 80060f0:	f7fe fde8 	bl	8004cc4 <bmi160_perform_self_test>
 80060f4:	4603      	mov	r3, r0
 80060f6:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 80060f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <init_bmi160_sensor_driver_interface+0xae>
	{
		printf("BMI160 gyroscope self-test failure !\n");
 8006100:	4844      	ldr	r0, [pc, #272]	@ (8006214 <init_bmi160_sensor_driver_interface+0x1b8>)
 8006102:	f002 fe9d 	bl	8008e40 <puts>
		Error_Handler();
 8006106:	f7fb f99d 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 gyroscope self-test success !\n");
 800610a:	4843      	ldr	r0, [pc, #268]	@ (8006218 <init_bmi160_sensor_driver_interface+0x1bc>)
 800610c:	f002 fe98 	bl	8008e40 <puts>

	/* Select the Output data rate, range of accelerometer sensor */
	bmi160->accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	220c      	movs	r2, #12
 8006114:	715a      	strb	r2, [r3, #5]
	bmi160->accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	220c      	movs	r2, #12
 800611a:	719a      	strb	r2, [r3, #6]
	bmi160->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	71da      	strb	r2, [r3, #7]

	/* Select the power mode of accelerometer sensor */
	bmi160->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2211      	movs	r2, #17
 8006126:	711a      	strb	r2, [r3, #4]

	/* Select the Output data rate, range of Gyroscope sensor */
	bmi160->gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	220d      	movs	r2, #13
 800612c:	735a      	strb	r2, [r3, #13]
	bmi160->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	739a      	strb	r2, [r3, #14]
	bmi160->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	73da      	strb	r2, [r3, #15]

	/* Select the power mode of Gyroscope sensor */
	bmi160->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2215      	movs	r2, #21
 800613e:	731a      	strb	r2, [r3, #12]

	/* Set the sensor configuration */
	rslt = bmi160_set_power_mode(bmi160);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fe fd34 	bl	8004bae <bmi160_set_power_mode>
 8006146:	4603      	mov	r3, r0
 8006148:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800614a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <init_bmi160_sensor_driver_interface+0x100>
	{
		printf("BMI160 sensor configuration failure !\n");
 8006152:	4832      	ldr	r0, [pc, #200]	@ (800621c <init_bmi160_sensor_driver_interface+0x1c0>)
 8006154:	f002 fe74 	bl	8008e40 <puts>
		Error_Handler();
 8006158:	f7fb f974 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 sensor configuration success !\n");
 800615c:	4830      	ldr	r0, [pc, #192]	@ (8006220 <init_bmi160_sensor_driver_interface+0x1c4>)
 800615e:	f002 fe6f 	bl	8008e40 <puts>

	struct bmi160_offsets bmi160_offset = {0};
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	811a      	strh	r2, [r3, #8]
	struct bmi160_foc_conf bmi160_foc = {0};
 800616e:	f107 030c 	add.w	r3, r7, #12
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	809a      	strh	r2, [r3, #4]

	rslt = bmi160_get_offsets(&bmi160_offset,bmi160);
 8006178:	f107 0314 	add.w	r3, r7, #20
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fded 	bl	8004d5e <bmi160_get_offsets>
 8006184:	4603      	mov	r3, r0
 8006186:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 8006188:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <init_bmi160_sensor_driver_interface+0x13e>
	{
		printf("BMI160 sensor offset value failure !\n");
 8006190:	4824      	ldr	r0, [pc, #144]	@ (8006224 <init_bmi160_sensor_driver_interface+0x1c8>)
 8006192:	f002 fe55 	bl	8008e40 <puts>
		Error_Handler();
 8006196:	f7fb f955 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800619a:	4823      	ldr	r0, [pc, #140]	@ (8006228 <init_bmi160_sensor_driver_interface+0x1cc>)
 800619c:	f002 fe50 	bl	8008e40 <puts>

	bmi160_foc.acc_off_en = BMI160_ENABLE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	743b      	strb	r3, [r7, #16]
	bmi160_foc.gyro_off_en = BMI160_ENABLE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	747b      	strb	r3, [r7, #17]
	bmi160_foc.foc_gyr_en = BMI160_FOC_ACCEL_POSITIVE_G;
 80061a8:	2301      	movs	r3, #1
 80061aa:	733b      	strb	r3, [r7, #12]
	bmi160_foc.foc_acc_x = BMI160_FOC_ACCEL_POSITIVE_G;
 80061ac:	2301      	movs	r3, #1
 80061ae:	737b      	strb	r3, [r7, #13]
	bmi160_foc.foc_acc_y = BMI160_FOC_ACCEL_POSITIVE_G;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73bb      	strb	r3, [r7, #14]
	bmi160_foc.foc_acc_z = BMI160_FOC_ACCEL_POSITIVE_G;
 80061b4:	2301      	movs	r3, #1
 80061b6:	73fb      	strb	r3, [r7, #15]

	bmi160_set_offsets(&bmi160_foc, &bmi160_offset, bmi160);
 80061b8:	f107 0114 	add.w	r1, r7, #20
 80061bc:	f107 030c 	add.w	r3, r7, #12
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fe4c 	bl	8004e60 <bmi160_set_offsets>

	if( rslt != BMI160_OK )
 80061c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d004      	beq.n	80061da <init_bmi160_sensor_driver_interface+0x17e>
	{
		printf("BMI160 sensor offset value failure !\n");
 80061d0:	4814      	ldr	r0, [pc, #80]	@ (8006224 <init_bmi160_sensor_driver_interface+0x1c8>)
 80061d2:	f002 fe35 	bl	8008e40 <puts>
		Error_Handler();
 80061d6:	f7fb f935 	bl	8001444 <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 80061da:	4813      	ldr	r0, [pc, #76]	@ (8006228 <init_bmi160_sensor_driver_interface+0x1cc>)
 80061dc:	f002 fe30 	bl	8008e40 <puts>

	HAL_Delay(2000);
 80061e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80061e4:	f7fb fc10 	bl	8001a08 <HAL_Delay>

	return ( BMI160_OK );
 80061e8:	2300      	movs	r3, #0

	#else
		Error_Handler();
	#endif
	return ( BMI160_E_INVALID_CONFIG );
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	08005ff5 	.word	0x08005ff5
 80061f8:	08005fad 	.word	0x08005fad
 80061fc:	08006045 	.word	0x08006045
 8006200:	0800c720 	.word	0x0800c720
 8006204:	0800c740 	.word	0x0800c740
 8006208:	0800c760 	.word	0x0800c760
 800620c:	0800c770 	.word	0x0800c770
 8006210:	0800c798 	.word	0x0800c798
 8006214:	0800c7c0 	.word	0x0800c7c0
 8006218:	0800c7e8 	.word	0x0800c7e8
 800621c:	0800c810 	.word	0x0800c810
 8006220:	0800c838 	.word	0x0800c838
 8006224:	0800c860 	.word	0x0800c860
 8006228:	0800c888 	.word	0x0800c888

0800622c <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fbbe 	bl	80079ba <null_ptr_check>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8006242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d131      	bne.n	80062ae <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7a1b      	ldrb	r3, [r3, #8]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d003      	beq.n	800625a <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	729a      	strb	r2, [r3, #10]
 8006258:	e002      	b.n	8006260 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8006260:	f107 010e 	add.w	r1, r7, #14
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	2000      	movs	r0, #0
 800626a:	f000 f826 	bl	80062ba <bmp3_get_regs>
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8006272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d119      	bne.n	80062ae <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800627a:	7bbb      	ldrb	r3, [r7, #14]
 800627c:	2b50      	cmp	r3, #80	@ 0x50
 800627e:	d002      	beq.n	8006286 <bmp3_init+0x5a>
 8006280:	7bbb      	ldrb	r3, [r7, #14]
 8006282:	2b60      	cmp	r3, #96	@ 0x60
 8006284:	d111      	bne.n	80062aa <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8006286:	7bba      	ldrb	r2, [r7, #14]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f987 	bl	80065a0 <bmp3_soft_reset>
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8006296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d107      	bne.n	80062ae <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fb29 	bl	80068f6 <get_calib_data>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80062a8:	e001      	b.n	80062ae <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 80062aa:	23f9      	movs	r3, #249	@ 0xf9
 80062ac:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80062ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80062ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062be:	b08b      	sub	sp, #44	@ 0x2c
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 80062cc:	6838      	ldr	r0, [r7, #0]
 80062ce:	f001 fb74 	bl	80079ba <null_ptr_check>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 80062d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d172      	bne.n	80063c6 <bmp3_get_regs+0x10c>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d06f      	beq.n	80063c6 <bmp3_get_regs+0x10c>
    {
 80062e6:	466b      	mov	r3, sp
 80062e8:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	7a9b      	ldrb	r3, [r3, #10]
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	7a9b      	ldrb	r3, [r3, #10]
 80062fa:	461a      	mov	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	18d1      	adds	r1, r2, r3
 8006300:	460b      	mov	r3, r1
 8006302:	3b01      	subs	r3, #1
 8006304:	61bb      	str	r3, [r7, #24]
 8006306:	2300      	movs	r3, #0
 8006308:	4688      	mov	r8, r1
 800630a:	4699      	mov	r9, r3
 800630c:	f04f 0200 	mov.w	r2, #0
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006318:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800631c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006320:	2300      	movs	r3, #0
 8006322:	460c      	mov	r4, r1
 8006324:	461d      	mov	r5, r3
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	00eb      	lsls	r3, r5, #3
 8006330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006334:	00e2      	lsls	r2, r4, #3
 8006336:	1dcb      	adds	r3, r1, #7
 8006338:	08db      	lsrs	r3, r3, #3
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	ebad 0d03 	sub.w	sp, sp, r3
 8006340:	466b      	mov	r3, sp
 8006342:	3300      	adds	r3, #0
 8006344:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	7a1b      	ldrb	r3, [r3, #8]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d025      	beq.n	800639a <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006354:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68dc      	ldr	r4, [r3, #12]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	7bf8      	ldrb	r0, [r7, #15]
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	6979      	ldr	r1, [r7, #20]
 8006364:	47a0      	blx	r4
 8006366:	4603      	mov	r3, r0
 8006368:	461a      	mov	r2, r3
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 800636e:	2300      	movs	r3, #0
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	e00d      	b.n	8006390 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	7a9b      	ldrb	r3, [r3, #10]
 8006378:	461a      	mov	r2, r3
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	441a      	add	r2, r3
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	440b      	add	r3, r1
 8006384:	6979      	ldr	r1, [r7, #20]
 8006386:	5c8a      	ldrb	r2, [r1, r2]
 8006388:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	3301      	adds	r3, #1
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	429a      	cmp	r2, r3
 8006396:	d3ed      	bcc.n	8006374 <bmp3_get_regs+0xba>
 8006398:	e00b      	b.n	80063b2 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68dc      	ldr	r4, [r3, #12]
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	7bf8      	ldrb	r0, [r7, #15]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	47a0      	blx	r4
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80063bc:	23fe      	movs	r3, #254	@ 0xfe
 80063be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80063c2:	46b5      	mov	sp, r6
    {
 80063c4:	e002      	b.n	80063cc <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80063c6:	23ff      	movs	r3, #255	@ 0xff
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 80063cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	372c      	adds	r7, #44	@ 0x2c
 80063d4:	46bd      	mov	sp, r7
 80063d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080063da <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80063da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063de:	b08b      	sub	sp, #44	@ 0x2c
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	466b      	mov	r3, sp
 80063ec:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0059      	lsls	r1, r3, #1
 80063f2:	460b      	mov	r3, r1
 80063f4:	3b01      	subs	r3, #1
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	2300      	movs	r3, #0
 80063fa:	4688      	mov	r8, r1
 80063fc:	4699      	mov	r9, r3
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800640a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800640e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006412:	2300      	movs	r3, #0
 8006414:	460c      	mov	r4, r1
 8006416:	461d      	mov	r5, r3
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	00eb      	lsls	r3, r5, #3
 8006422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006426:	00e2      	lsls	r2, r4, #3
 8006428:	1dcb      	adds	r3, r1, #7
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	ebad 0d03 	sub.w	sp, sp, r3
 8006432:	466b      	mov	r3, sp
 8006434:	3300      	adds	r3, #0
 8006436:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8006438:	6838      	ldr	r0, [r7, #0]
 800643a:	f001 fabe 	bl	80079ba <null_ptr_check>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8006444:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006448:	2b00      	cmp	r3, #0
 800644a:	d14e      	bne.n	80064ea <bmp3_set_regs+0x110>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d04b      	beq.n	80064ea <bmp3_set_regs+0x110>
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d048      	beq.n	80064ea <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d041      	beq.n	80064e2 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	781a      	ldrb	r2, [r3, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	7a1b      	ldrb	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d114      	bne.n	8006498 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800646e:	2300      	movs	r3, #0
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e00d      	b.n	8006490 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8006474:	7ffb      	ldrb	r3, [r7, #31]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	781a      	ldrb	r2, [r3, #0]
 800647c:	7ffb      	ldrb	r3, [r7, #31]
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	440b      	add	r3, r1
 8006482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800648a:	7ffb      	ldrb	r3, [r7, #31]
 800648c:	3301      	adds	r3, #1
 800648e:	77fb      	strb	r3, [r7, #31]
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d8ed      	bhi.n	8006474 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d909      	bls.n	80064b2 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	6979      	ldr	r1, [r7, #20]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fa4a 	bl	800693e <interleave_reg_addr>
                temp_len = len * 2;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	623b      	str	r3, [r7, #32]
 80064b0:	e001      	b.n	80064b6 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	691c      	ldr	r4, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	7818      	ldrb	r0, [r3, #0]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	6979      	ldr	r1, [r7, #20]
 80064c6:	47a0      	blx	r4
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 80064da:	23fe      	movs	r3, #254	@ 0xfe
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 80064e0:	e007      	b.n	80064f2 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 80064e2:	23fa      	movs	r3, #250	@ 0xfa
 80064e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (len != 0)
 80064e8:	e003      	b.n	80064f2 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80064ea:	23ff      	movs	r3, #255	@ 0xff
 80064ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80064f0:	e000      	b.n	80064f4 <bmp3_set_regs+0x11a>
        if (len != 0)
 80064f2:	bf00      	nop
    }

    return rslt;
 80064f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80064f8:	46b5      	mov	sp, r6
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	372c      	adds	r7, #44	@ 0x2c
 80064fe:	46bd      	mov	sp, r7
 8006500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006504 <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	75fb      	strb	r3, [r7, #23]

    if (settings != NULL)
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d03a      	beq.n	8006590 <bmp3_set_sensor_settings+0x8c>
    {

        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	2006      	movs	r0, #6
 800651e:	f001 fa34 	bl	800798a <are_settings_changed>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <bmp3_set_sensor_settings+0x32>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, settings, dev);
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	68b9      	ldr	r1, [r7, #8]
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 fa6c 	bl	8006a0a <set_pwr_ctrl_settings>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings))
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	20f0      	movs	r0, #240	@ 0xf0
 800653a:	f001 fa26 	bl	800798a <are_settings_changed>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <bmp3_set_sensor_settings+0x4e>
        {
            /* Set the over sampling, ODR and filter settings */
            rslt = set_odr_filter_settings(desired_settings, settings, dev);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 faad 	bl	8006aa8 <set_odr_filter_settings>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings))
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8006558:	f001 fa17 	bl	800798a <are_settings_changed>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <bmp3_set_sensor_settings+0x6c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, settings, dev);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fb0b 	bl	8006b82 <set_int_ctrl_settings>
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings))
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8006576:	f001 fa08 	bl	800798a <are_settings_changed>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <bmp3_set_sensor_settings+0x90>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, settings, dev);
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fb79 	bl	8006c7c <set_advance_settings>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]
 800658e:	e001      	b.n	8006594 <bmp3_set_sensor_settings+0x90>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8006590:	23ff      	movs	r3, #255	@ 0xff
 8006592:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80065a8:	237e      	movs	r3, #126	@ 0x7e
 80065aa:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80065ac:	23b6      	movs	r3, #182	@ 0xb6
 80065ae:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for command ready status */
    rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80065b0:	f107 010c 	add.w	r1, r7, #12
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	2003      	movs	r0, #3
 80065ba:	f7ff fe7e 	bl	80062ba <bmp3_get_regs>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]

    /* Device is ready to accept new command */
    if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80065c2:	7b3b      	ldrb	r3, [r7, #12]
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d02d      	beq.n	8006628 <bmp3_soft_reset+0x88>
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d129      	bne.n	8006628 <bmp3_soft_reset+0x88>
    {
        /* Write the soft reset command in the sensor */
        rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80065d4:	f107 010d 	add.w	r1, r7, #13
 80065d8:	f107 000e 	add.w	r0, r7, #14
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f7ff fefb 	bl	80063da <bmp3_set_regs>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 80065e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d11b      	bne.n	8006628 <bmp3_soft_reset+0x88>
        {
            /* Wait for 2 ms */
            dev->delay_us(2000, dev->intf_ptr);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	6852      	ldr	r2, [r2, #4]
 80065f8:	4611      	mov	r1, r2
 80065fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80065fe:	4798      	blx	r3

            /* Read for command error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8006600:	f107 010b 	add.w	r1, r7, #11
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	2002      	movs	r0, #2
 800660a:	f7ff fe56 	bl	80062ba <bmp3_get_regs>
 800660e:	4603      	mov	r3, r0
 8006610:	73fb      	strb	r3, [r7, #15]

            /* check for command error status */
            if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 8006612:	7afb      	ldrb	r3, [r7, #11]
 8006614:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8006618:	2b00      	cmp	r3, #0
 800661a:	d103      	bne.n	8006624 <bmp3_soft_reset+0x84>
 800661c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <bmp3_soft_reset+0x88>
            {
                /* Command not written hence return
                 * error */
                rslt = BMP3_E_CMD_EXEC_FAILED;
 8006624:	23fc      	movs	r3, #252	@ 0xfc
 8006626:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8006628:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 800663e:	6838      	ldr	r0, [r7, #0]
 8006640:	f001 f9bb 	bl	80079ba <null_ptr_check>
 8006644:	4603      	mov	r3, r0
 8006646:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (settings != NULL))
 8006648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d139      	bne.n	80066c4 <bmp3_set_op_mode+0x90>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d036      	beq.n	80066c4 <bmp3_set_op_mode+0x90>
    {
        uint8_t curr_mode = settings->op_mode;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800665c:	f107 030d 	add.w	r3, r7, #13
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f000 f838 	bl	80066d8 <bmp3_get_op_mode>
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if ((last_set_mode != BMP3_MODE_SLEEP) && (rslt == BMP3_OK))
 800666c:	7b7b      	ldrb	r3, [r7, #13]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d010      	beq.n	8006694 <bmp3_set_op_mode+0x60>
 8006672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10c      	bne.n	8006694 <bmp3_set_op_mode+0x60>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	f000 f8f9 	bl	8006872 <put_device_to_sleep>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	6852      	ldr	r2, [r2, #4]
 800668c:	4611      	mov	r1, r2
 800668e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8006692:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 8006694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d116      	bne.n	80066ca <bmp3_set_op_mode+0x96>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 800669c:	7bbb      	ldrb	r3, [r7, #14]
 800669e:	2b03      	cmp	r3, #3
 80066a0:	d106      	bne.n	80066b0 <bmp3_set_op_mode+0x7c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(settings, dev);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f87a 	bl	800679e <set_normal_mode>
 80066aa:	4603      	mov	r3, r0
 80066ac:	73fb      	strb	r3, [r7, #15]
    {
 80066ae:	e00c      	b.n	80066ca <bmp3_set_op_mode+0x96>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80066b0:	7bbb      	ldrb	r3, [r7, #14]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d109      	bne.n	80066ca <bmp3_set_op_mode+0x96>
            {
                /* Set forced mode */
                rslt = write_power_mode(settings, dev);
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f8a3 	bl	8006804 <write_power_mode>
 80066be:	4603      	mov	r3, r0
 80066c0:	73fb      	strb	r3, [r7, #15]
    {
 80066c2:	e002      	b.n	80066ca <bmp3_set_op_mode+0x96>
            }
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80066c4:	23ff      	movs	r3, #255	@ 0xff
 80066c6:	73fb      	strb	r3, [r7, #15]
 80066c8:	e000      	b.n	80066cc <bmp3_set_op_mode+0x98>
    {
 80066ca:	bf00      	nop
    }

    return rslt;
 80066cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (op_mode != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d011      	beq.n	800670c <bmp3_get_op_mode+0x34>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2201      	movs	r2, #1
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	201b      	movs	r0, #27
 80066f0:	f7ff fde3 	bl	80062ba <bmp3_get_regs>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	111b      	asrs	r3, r3, #4
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	f003 0303 	and.w	r3, r3, #3
 8006704:	b2da      	uxtb	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e001      	b.n	8006710 <bmp3_get_op_mode+0x38>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800670c:	23ff      	movs	r3, #255	@ 0xff
 800670e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	@ 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 800672a:	f107 0320 	add.w	r3, r7, #32
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	809a      	strh	r2, [r3, #4]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 8006734:	f107 0310 	add.w	r3, r7, #16
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	605a      	str	r2, [r3, #4]
 800673e:	609a      	str	r2, [r3, #8]
 8006740:	60da      	str	r2, [r3, #12]

    if (comp_data != NULL)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d021      	beq.n	800678c <bmp3_get_sensor_data+0x70>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8006748:	f107 0120 	add.w	r1, r7, #32
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2206      	movs	r2, #6
 8006750:	2004      	movs	r0, #4
 8006752:	f7ff fdb2 	bl	80062ba <bmp3_get_regs>
 8006756:	4603      	mov	r3, r0
 8006758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BMP3_OK)
 800675c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <bmp3_get_sensor_data+0x76>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 8006764:	f107 0210 	add.w	r2, r7, #16
 8006768:	f107 0320 	add.w	r3, r7, #32
 800676c:	4611      	mov	r1, r2
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fc76 	bl	8007060 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3318      	adds	r3, #24
 8006778:	f107 0110 	add.w	r1, r7, #16
 800677c:	7bf8      	ldrb	r0, [r7, #15]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	f000 fca9 	bl	80070d6 <compensate_data>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800678a:	e002      	b.n	8006792 <bmp3_get_sensor_data+0x76>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800678c:	23ff      	movs	r3, #255	@ 0xff
 800678e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006792:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006796:	4618      	mov	r0, r3
 8006798:	3728      	adds	r7, #40	@ 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(settings, dev);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f889 	bl	80068c2 <validate_normal_mode_settings>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80067b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11d      	bne.n	80067f8 <set_normal_mode+0x5a>
    {
        rslt = write_power_mode(settings, dev);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f820 	bl	8006804 <write_power_mode>
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 80067c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d113      	bne.n	80067f8 <set_normal_mode+0x5a>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 80067d0:	f107 010e 	add.w	r1, r7, #14
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2201      	movs	r2, #1
 80067d8:	2002      	movs	r0, #2
 80067da:	f7ff fd6e 	bl	80062ba <bmp3_get_regs>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <set_normal_mode+0x5a>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <set_normal_mode+0x5a>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 80067f4:	23fb      	movs	r3, #251	@ 0xfb
 80067f6:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80067f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(const struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800680e:	231b      	movs	r3, #27
 8006810:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = settings->op_mode;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8006818:	7b78      	ldrb	r0, [r7, #13]
 800681a:	f107 010c 	add.w	r1, r7, #12
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2201      	movs	r2, #1
 8006822:	f7ff fd4a 	bl	80062ba <bmp3_get_regs>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 800682a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d119      	bne.n	8006866 <write_power_mode+0x62>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 8006832:	7b3b      	ldrb	r3, [r7, #12]
 8006834:	b25b      	sxtb	r3, r3
 8006836:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800683a:	b25a      	sxtb	r2, r3
 800683c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	b25b      	sxtb	r3, r3
 8006844:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006848:	b25b      	sxtb	r3, r3
 800684a:	4313      	orrs	r3, r2
 800684c:	b25b      	sxtb	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 8006852:	f107 010c 	add.w	r1, r7, #12
 8006856:	f107 000d 	add.w	r0, r7, #13
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	f7ff fdbc 	bl	80063da <bmp3_set_regs>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006866:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 800687a:	231b      	movs	r3, #27
 800687c:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 800687e:	f107 010d 	add.w	r1, r7, #13
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	201b      	movs	r0, #27
 8006888:	f7ff fd17 	bl	80062ba <bmp3_get_regs>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8006890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10e      	bne.n	80068b6 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 8006898:	7b7b      	ldrb	r3, [r7, #13]
 800689a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80068a2:	f107 010d 	add.w	r1, r7, #13
 80068a6:	f107 000e 	add.w	r0, r7, #14
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f7ff fd94 	bl	80063da <bmp3_set_regs>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = get_odr_filter_settings(settings, dev);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa29 	bl	8006d26 <get_odr_filter_settings>
 80068d4:	4603      	mov	r3, r0
 80068d6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80068d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d104      	bne.n	80068ea <validate_normal_mode_settings+0x28>
    {
        rslt = validate_osr_and_odr_settings(settings);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa3d 	bl	8006d60 <validate_osr_and_odr_settings>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b088      	sub	sp, #32
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 80068fe:	2331      	movs	r3, #49	@ 0x31
 8006900:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	605a      	str	r2, [r3, #4]
 800690c:	609a      	str	r2, [r3, #8]
 800690e:	60da      	str	r2, [r3, #12]
 8006910:	611a      	str	r2, [r3, #16]
 8006912:	751a      	strb	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8006914:	f107 0108 	add.w	r1, r7, #8
 8006918:	7ff8      	ldrb	r0, [r7, #31]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2215      	movs	r2, #21
 800691e:	f7ff fccc 	bl	80062ba <bmp3_get_regs>
 8006922:	4603      	mov	r3, r0
 8006924:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8006926:	f107 0308 	add.w	r3, r7, #8
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 fc45 	bl	80071bc <parse_calib_data>

    return rslt;
 8006932:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3720      	adds	r7, #32
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 800694c:	2301      	movs	r3, #1
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e015      	b.n	800697e <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	441a      	add	r2, r3
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	3b01      	subs	r3, #1
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	440b      	add	r3, r1
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	441a      	add	r2, r3
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	440b      	add	r3, r1
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3301      	adds	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	429a      	cmp	r2, r3
 8006984:	d3e5      	bcc.n	8006952 <interleave_reg_addr+0x14>
    }
}
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4413      	add	r3, r2
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	10db      	asrs	r3, r3, #3
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	3301      	adds	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	3302      	adds	r3, #2
 80069e6:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	105b      	asrs	r3, r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	709a      	strb	r2, [r3, #2]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <set_pwr_ctrl_settings>:
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8006a16:	231b      	movs	r3, #27
 8006a18:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006a1a:	7db8      	ldrb	r0, [r7, #22]
 8006a1c:	f107 0115 	add.w	r1, r7, #21
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f7ff fc49 	bl	80062ba <bmp3_get_regs>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8006a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d133      	bne.n	8006a9c <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00e      	beq.n	8006a5c <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, settings->press_en);
 8006a3e:	7d7b      	ldrb	r3, [r7, #21]
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f023 0301 	bic.w	r3, r3, #1
 8006a46:	b25a      	sxtb	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b25b      	sxtb	r3, r3
 8006a54:	4313      	orrs	r3, r2
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, settings->temp_en);
 8006a66:	7d7b      	ldrb	r3, [r7, #21]
 8006a68:	b25b      	sxtb	r3, r3
 8006a6a:	f023 0302 	bic.w	r3, r3, #2
 8006a6e:	b25a      	sxtb	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	789b      	ldrb	r3, [r3, #2]
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	b25b      	sxtb	r3, r3
 8006a7a:	f003 0302 	and.w	r3, r3, #2
 8006a7e:	b25b      	sxtb	r3, r3
 8006a80:	4313      	orrs	r3, r2
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	757b      	strb	r3, [r7, #21]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006a88:	f107 0115 	add.w	r1, r7, #21
 8006a8c:	f107 0016 	add.w	r0, r7, #22
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f7ff fca1 	bl	80063da <bmp3_set_regs>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	@ 0x28
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 8006ab4:	f107 031c 	add.w	r3, r7, #28
 8006ab8:	2100      	movs	r1, #0
 8006aba:	460a      	mov	r2, r1
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	460a      	mov	r2, r1
 8006ac0:	709a      	strb	r2, [r3, #2]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	75fb      	strb	r3, [r7, #23]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8006ac6:	f107 0118 	add.w	r1, r7, #24
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	201c      	movs	r0, #28
 8006ad0:	f7ff fbf3 	bl	80062ba <bmp3_get_regs>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	77fb      	strb	r3, [r7, #31]

    if (rslt == BMP3_OK)
 8006ad8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d14a      	bne.n	8006b76 <set_odr_filter_settings+0xce>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8006ae0:	68f9      	ldr	r1, [r7, #12]
 8006ae2:	2030      	movs	r0, #48	@ 0x30
 8006ae4:	f000 ff51 	bl	800798a <are_settings_changed>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <set_odr_filter_settings+0x5e>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, settings);
 8006aee:	f107 0017 	add.w	r0, r7, #23
 8006af2:	f107 0218 	add.w	r2, r7, #24
 8006af6:	f107 011c 	add.w	r1, r7, #28
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	4603      	mov	r3, r0
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f9e3 	bl	8006ecc <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	2080      	movs	r0, #128	@ 0x80
 8006b0a:	f000 ff3e 	bl	800798a <are_settings_changed>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <set_odr_filter_settings+0x7e>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, settings);
 8006b14:	f107 0217 	add.w	r2, r7, #23
 8006b18:	f107 0118 	add.w	r1, r7, #24
 8006b1c:	f107 001c 	add.w	r0, r7, #28
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f000 fa2c 	bl	8006f7e <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	2040      	movs	r0, #64	@ 0x40
 8006b2a:	f000 ff2e 	bl	800798a <are_settings_changed>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <set_odr_filter_settings+0x9e>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, settings);
 8006b34:	f107 0217 	add.w	r2, r7, #23
 8006b38:	f107 0118 	add.w	r1, r7, #24
 8006b3c:	f107 001c 	add.w	r0, r7, #28
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f000 fa56 	bl	8006ff2 <fill_filter_data>
        }

        if (settings->op_mode == BMP3_MODE_NORMAL)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d104      	bne.n	8006b58 <set_odr_filter_settings+0xb0>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(settings);
 8006b4e:	68b8      	ldr	r0, [r7, #8]
 8006b50:	f000 f906 	bl	8006d60 <validate_osr_and_odr_settings>
 8006b54:	4603      	mov	r3, r0
 8006b56:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BMP3_OK)
 8006b58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10a      	bne.n	8006b76 <set_odr_filter_settings+0xce>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f107 0118 	add.w	r1, r7, #24
 8006b68:	f107 001c 	add.w	r0, r7, #28
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f7ff fc34 	bl	80063da <bmp3_set_regs>
 8006b72:	4603      	mov	r3, r0
 8006b74:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8006b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <set_int_ctrl_settings>:
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings,
                                    const struct bmp3_settings *settings,
                                    struct bmp3_dev *dev)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b086      	sub	sp, #24
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	60f8      	str	r0, [r7, #12]
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8006b8e:	2319      	movs	r3, #25
 8006b90:	757b      	strb	r3, [r7, #21]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006b92:	7d78      	ldrb	r0, [r7, #21]
 8006b94:	f107 0116 	add.w	r1, r7, #22
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f7ff fb8d 	bl	80062ba <bmp3_get_regs>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8006ba4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d161      	bne.n	8006c70 <set_int_ctrl_settings+0xee>
    {
        int_settings = settings->int_settings;
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	3207      	adds	r2, #7
 8006bb4:	6810      	ldr	r0, [r2, #0]
 8006bb6:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00d      	beq.n	8006bde <set_int_ctrl_settings+0x5c>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8006bc2:	7dbb      	ldrb	r3, [r7, #22]
 8006bc4:	b25b      	sxtb	r3, r3
 8006bc6:	f023 0301 	bic.w	r3, r3, #1
 8006bca:	b25a      	sxtb	r2, r3
 8006bcc:	7c3b      	ldrb	r3, [r7, #16]
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00f      	beq.n	8006c08 <set_int_ctrl_settings+0x86>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8006be8:	7dbb      	ldrb	r3, [r7, #22]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	b25a      	sxtb	r2, r3
 8006bf2:	7c7b      	ldrb	r3, [r7, #17]
 8006bf4:	b25b      	sxtb	r3, r3
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	4313      	orrs	r3, r2
 8006c02:	b25b      	sxtb	r3, r3
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <set_int_ctrl_settings+0xb0>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8006c12:	7dbb      	ldrb	r3, [r7, #22]
 8006c14:	b25b      	sxtb	r3, r3
 8006c16:	f023 0304 	bic.w	r3, r3, #4
 8006c1a:	b25a      	sxtb	r2, r3
 8006c1c:	7cbb      	ldrb	r3, [r7, #18]
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	b25b      	sxtb	r3, r3
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	b25b      	sxtb	r3, r3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	75bb      	strb	r3, [r7, #22]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00f      	beq.n	8006c5c <set_int_ctrl_settings+0xda>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8006c3c:	7dbb      	ldrb	r3, [r7, #22]
 8006c3e:	b25b      	sxtb	r3, r3
 8006c40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c44:	b25a      	sxtb	r2, r3
 8006c46:	7cfb      	ldrb	r3, [r7, #19]
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	019b      	lsls	r3, r3, #6
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c52:	b25b      	sxtb	r3, r3
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b25b      	sxtb	r3, r3
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	75bb      	strb	r3, [r7, #22]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006c5c:	f107 0116 	add.w	r1, r7, #22
 8006c60:	f107 0015 	add.w	r0, r7, #21
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f7ff fbb7 	bl	80063da <bmp3_set_regs>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006c70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <set_advance_settings>:
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, const struct bmp3_settings *settings,
                                   struct bmp3_dev *dev)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = settings->adv_settings;
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	320b      	adds	r2, #11
 8006c90:	8812      	ldrh	r2, [r2, #0]
 8006c92:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8006c94:	231a      	movs	r3, #26
 8006c96:	75bb      	strb	r3, [r7, #22]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8006c98:	7db8      	ldrb	r0, [r7, #22]
 8006c9a:	f107 0115 	add.w	r1, r7, #21
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f7ff fb0a 	bl	80062ba <bmp3_get_regs>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8006caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d133      	bne.n	8006d1a <set_advance_settings+0x9e>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <set_advance_settings+0x60>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8006cbc:	7d7b      	ldrb	r3, [r7, #21]
 8006cbe:	b25b      	sxtb	r3, r3
 8006cc0:	f023 0302 	bic.w	r3, r3, #2
 8006cc4:	b25a      	sxtb	r2, r3
 8006cc6:	7c3b      	ldrb	r3, [r7, #16]
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	005b      	lsls	r3, r3, #1
 8006ccc:	b25b      	sxtb	r3, r3
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	b25b      	sxtb	r3, r3
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	757b      	strb	r3, [r7, #21]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00f      	beq.n	8006d06 <set_advance_settings+0x8a>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8006ce6:	7d7b      	ldrb	r3, [r7, #21]
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	f023 0304 	bic.w	r3, r3, #4
 8006cee:	b25a      	sxtb	r2, r3
 8006cf0:	7c7b      	ldrb	r3, [r7, #17]
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	757b      	strb	r3, [r7, #21]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8006d06:	f107 0115 	add.w	r1, r7, #21
 8006d0a:	f107 0016 	add.w	r0, r7, #22
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f7ff fb62 	bl	80063da <bmp3_set_regs>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_settings *settings, struct bmp3_dev *dev)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8006d30:	f107 0108 	add.w	r1, r7, #8
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2204      	movs	r2, #4
 8006d38:	201c      	movs	r0, #28
 8006d3a:	f7ff fabe 	bl	80062ba <bmp3_get_regs>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &settings->odr_filter);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	1cda      	adds	r2, r3, #3
 8006d46:	f107 0308 	add.w	r3, r7, #8
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff fe21 	bl	8006994 <parse_odr_filter_settings>

    return rslt;
 8006d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_settings *settings)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b098      	sub	sp, #96	@ 0x60
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8006d68:	23ea      	movs	r3, #234	@ 0xea
 8006d6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t meas_t_p = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8006d70:	4a1a      	ldr	r2, [pc, #104]	@ (8006ddc <validate_osr_and_odr_settings+0x7c>)
 8006d72:	f107 030c 	add.w	r3, r7, #12
 8006d76:	4611      	mov	r1, r2
 8006d78:	2248      	movs	r2, #72	@ 0x48
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f002 f9e1 	bl	8009142 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (settings->press_en)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <validate_osr_and_odr_settings+0x36>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(settings);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f83f 	bl	8006e0c <calculate_press_meas_time>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d92:	4413      	add	r3, r2
 8006d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    if (settings->temp_en)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	789b      	ldrb	r3, [r3, #2]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d006      	beq.n	8006dac <validate_osr_and_odr_settings+0x4c>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(settings);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f864 	bl	8006e6c <calculate_temp_meas_time>
 8006da4:	4602      	mov	r2, r0
 8006da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006da8:	4413      	add	r3, r2
 8006daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8006dac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006db0:	4413      	add	r3, r2
 8006db2:	65bb      	str	r3, [r7, #88]	@ 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[settings->odr_filter.odr]);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	799b      	ldrb	r3, [r3, #6]
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	3360      	adds	r3, #96	@ 0x60
 8006dbc:	443b      	add	r3, r7
 8006dbe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006dc6:	f000 f80b 	bl	8006de0 <verify_meas_time_and_odr_duration>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    return rslt;
 8006dd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3760      	adds	r7, #96	@ 0x60
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	0800c8b0 	.word	0x0800c8b0

08006de0 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d202      	bcs.n	8006df8 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
 8006df6:	e001      	b.n	8006dfc <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8006df8:	23fd      	movs	r3, #253	@ 0xfd
 8006dfa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_settings *settings)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	f107 030c 	add.w	r3, r7, #12
 8006e1a:	3203      	adds	r2, #3
 8006e1c:	6810      	ldr	r0, [r2, #0]
 8006e1e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8006e2c:	7b3b      	ldrb	r3, [r7, #12]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	ed97 0b06 	vldr	d0, [r7, #24]
 8006e34:	f000 fd84 	bl	8007940 <pow_bmp3>
 8006e38:	ed87 0a05 	vstr	s0, [r7, #20]
    press_meas_t = (uint32_t)(BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8006e3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e40:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006e64 <calculate_press_meas_time+0x58>
 8006e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e48:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006e68 <calculate_press_meas_time+0x5c>
 8006e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e54:	ee17 3a90 	vmov	r3, s15
 8006e58:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8006e5a:	693b      	ldr	r3, [r7, #16]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3720      	adds	r7, #32
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	44fa0000 	.word	0x44fa0000
 8006e68:	43c40000 	.word	0x43c40000

08006e6c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_settings *settings)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = settings->odr_filter;
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	3203      	adds	r2, #3
 8006e7c:	6810      	ldr	r0, [r2, #0]
 8006e7e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_FLOAT_COMPENSATION
    double base = 2.0;
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e88:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_FLOAT_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8006e8c:	7b7b      	ldrb	r3, [r7, #13]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	ed97 0b06 	vldr	d0, [r7, #24]
 8006e94:	f000 fd54 	bl	8007940 <pow_bmp3>
 8006e98:	ed87 0a05 	vstr	s0, [r7, #20]
    temp_meas_t = (uint32_t)(BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8006e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ea0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8006ec4 <calculate_temp_meas_time+0x58>
 8006ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ea8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8006ec8 <calculate_temp_meas_time+0x5c>
 8006eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb4:	ee17 3a90 	vmov	r3, s15
 8006eb8:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8006eba:	693b      	ldr	r3, [r7, #16]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	44fa0000 	.word	0x44fa0000
 8006ec8:	439c8000 	.word	0x439c8000

08006ecc <fill_osr_data>:
static void fill_osr_data(uint32_t desired_settings,
                          uint8_t *addr,
                          uint8_t *reg_data,
                          uint8_t *len,
                          const struct bmp3_settings *settings)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8006eda:	6a3a      	ldr	r2, [r7, #32]
 8006edc:	f107 0314 	add.w	r3, r7, #20
 8006ee0:	3203      	adds	r2, #3
 8006ee2:	6810      	ldr	r0, [r2, #0]
 8006ee4:	6018      	str	r0, [r3, #0]

    if (desired_settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d040      	beq.n	8006f72 <fill_osr_data+0xa6>
    {
        /* Pressure over sampling settings check */
        if (desired_settings & BMP3_SEL_PRESS_OS)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d013      	beq.n	8006f22 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	b25b      	sxtb	r3, r3
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	b25a      	sxtb	r2, r3
 8006f06:	7d3b      	ldrb	r3, [r7, #20]
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	b25b      	sxtb	r3, r3
 8006f10:	4313      	orrs	r3, r2
 8006f12:	b25a      	sxtb	r2, r3
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	440b      	add	r3, r1
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (desired_settings & BMP3_SEL_TEMP_OS)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d015      	beq.n	8006f58 <fill_osr_data+0x8c>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b25b      	sxtb	r3, r3
 8006f32:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006f36:	b25a      	sxtb	r2, r3
 8006f38:	7d7b      	ldrb	r3, [r7, #21]
 8006f3a:	b25b      	sxtb	r3, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	4313      	orrs	r3, r2
 8006f48:	b25a      	sxtb	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	440b      	add	r3, r1
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4413      	add	r3, r2
 8006f62:	221c      	movs	r2, #28
 8006f64:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	701a      	strb	r2, [r3, #0]
    }
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_settings *settings)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b087      	sub	sp, #28
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &settings->odr_filter;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	3303      	adds	r3, #3
 8006f90:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	78db      	ldrb	r3, [r3, #3]
 8006f96:	2b11      	cmp	r3, #17
 8006f98:	d902      	bls.n	8006fa0 <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2211      	movs	r2, #17
 8006f9e:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	f023 031f 	bic.w	r3, r3, #31
 8006fac:	b25a      	sxtb	r2, r3
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	78db      	ldrb	r3, [r3, #3]
 8006fb2:	b25b      	sxtb	r3, r3
 8006fb4:	f003 031f 	and.w	r3, r3, #31
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	b25a      	sxtb	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	440b      	add	r3, r1
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	221d      	movs	r2, #29
 8006fd8:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	701a      	strb	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_settings *settings)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b087      	sub	sp, #28
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = settings->odr_filter;
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	f107 0314 	add.w	r3, r7, #20
 8007006:	3203      	adds	r2, #3
 8007008:	6810      	ldr	r0, [r2, #0]
 800700a:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3303      	adds	r3, #3
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b25b      	sxtb	r3, r3
 8007014:	f023 030e 	bic.w	r3, r3, #14
 8007018:	b25a      	sxtb	r2, r3
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	b25b      	sxtb	r3, r3
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	b25b      	sxtb	r3, r3
 8007022:	f003 030e 	and.w	r3, r3, #14
 8007026:	b25b      	sxtb	r3, r3
 8007028:	4313      	orrs	r3, r2
 800702a:	b25a      	sxtb	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	4619      	mov	r1, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	440b      	add	r3, r1
 8007036:	b2d2      	uxtb	r2, r2
 8007038:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	221f      	movs	r2, #31
 8007046:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	b2da      	uxtb	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	701a      	strb	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8007060:	b4b0      	push	{r4, r5, r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	7809      	ldrb	r1, [r1, #0]
 800706e:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	3101      	adds	r1, #1
 8007074:	7809      	ldrb	r1, [r1, #0]
 8007076:	0209      	lsls	r1, r1, #8
 8007078:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	3102      	adds	r1, #2
 800707e:	7809      	ldrb	r1, [r1, #0]
 8007080:	0409      	lsls	r1, r1, #16
 8007082:	60f9      	str	r1, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	4308      	orrs	r0, r1
 800708a:	6979      	ldr	r1, [r7, #20]
 800708c:	4301      	orrs	r1, r0
 800708e:	2000      	movs	r0, #0
 8007090:	460c      	mov	r4, r1
 8007092:	4605      	mov	r5, r0
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	e9c1 4500 	strd	r4, r5, [r1]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	3103      	adds	r1, #3
 800709e:	7809      	ldrb	r1, [r1, #0]
 80070a0:	6179      	str	r1, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	3104      	adds	r1, #4
 80070a6:	7809      	ldrb	r1, [r1, #0]
 80070a8:	0209      	lsls	r1, r1, #8
 80070aa:	6139      	str	r1, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	3105      	adds	r1, #5
 80070b0:	7809      	ldrb	r1, [r1, #0]
 80070b2:	0409      	lsls	r1, r1, #16
 80070b4:	60f9      	str	r1, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	6939      	ldr	r1, [r7, #16]
 80070ba:	4308      	orrs	r0, r1
 80070bc:	6979      	ldr	r1, [r7, #20]
 80070be:	4301      	orrs	r1, r0
 80070c0:	2000      	movs	r0, #0
 80070c2:	460a      	mov	r2, r1
 80070c4:	4603      	mov	r3, r0
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bcb0      	pop	{r4, r5, r7}
 80070d4:	4770      	bx	lr

080070d6 <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
 80070e2:	4603      	mov	r3, r0
 80070e4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d05a      	beq.n	80071a6 <compensate_data+0xd0>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d057      	beq.n	80071a6 <compensate_data+0xd0>
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d054      	beq.n	80071a6 <compensate_data+0xd0>
    {
        /* If pressure and temperature component is selected */
        if (sensor_comp == BMP3_PRESS_TEMP)
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	2b03      	cmp	r3, #3
 8007100:	d115      	bne.n	800712e <compensate_data+0x58>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation
             */

            /* Compensate pressure and temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fa27 	bl	800755c <compensate_temperature>
 800710e:	4603      	mov	r3, r0
 8007110:	75fb      	strb	r3, [r7, #23]

            if (rslt == BMP3_OK)
 8007112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d148      	bne.n	80071ac <compensate_data+0xd6>
            {
                rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3308      	adds	r3, #8
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	4618      	mov	r0, r3
 8007124:	f000 fa94 	bl	8007650 <compensate_pressure>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 800712c:	e03e      	b.n	80071ac <compensate_data+0xd6>
            }
        }
        else if (sensor_comp == BMP3_PRESS)
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d116      	bne.n	8007162 <compensate_data+0x8c>
             * Compensated temperature updated in calib structure,
             * is needed for pressure calculation.
             * As only pressure is enabled in 'sensor_comp', after calculating
             * compensated temperature, assign it to zero.
             */
            (void)compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fa0e 	bl	800755c <compensate_temperature>
            comp_data->temperature = 0;
 8007140:	6879      	ldr	r1, [r7, #4]
 8007142:	f04f 0200 	mov.w	r2, #0
 8007146:	f04f 0300 	mov.w	r3, #0
 800714a:	e9c1 2300 	strd	r2, r3, [r1]

            /* Compensate the pressure data */
            rslt = compensate_pressure(&comp_data->pressure, uncomp_data, calib_data);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3308      	adds	r3, #8
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	4618      	mov	r0, r3
 8007158:	f000 fa7a 	bl	8007650 <compensate_pressure>
 800715c:	4603      	mov	r3, r0
 800715e:	75fb      	strb	r3, [r7, #23]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007160:	e024      	b.n	80071ac <compensate_data+0xd6>
        }
        else if (sensor_comp == BMP3_TEMP)
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d10f      	bne.n	8007188 <compensate_data+0xb2>
        {
            /* Compensate the temperature data */
            rslt = compensate_temperature(&comp_data->temperature, uncomp_data, calib_data);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f9f4 	bl	800755c <compensate_temperature>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]

            /*
             * As only temperature is enabled in 'sensor_comp'
             * make compensated pressure as zero
             */
            comp_data->pressure = 0;
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp == BMP3_PRESS_TEMP)
 8007186:	e011      	b.n	80071ac <compensate_data+0xd6>
        }
        else
        {
            comp_data->pressure = 0;
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9c1 2302 	strd	r2, r3, [r1, #8]
            comp_data->temperature = 0;
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	f04f 0200 	mov.w	r2, #0
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	e9c1 2300 	strd	r2, r3, [r1]
        if (sensor_comp == BMP3_PRESS_TEMP)
 80071a4:	e002      	b.n	80071ac <compensate_data+0xd6>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80071a6:	23ff      	movs	r3, #255	@ 0xff
 80071a8:	75fb      	strb	r3, [r7, #23]
 80071aa:	e000      	b.n	80071ae <compensate_data+0xd8>
        if (sensor_comp == BMP3_PRESS_TEMP)
 80071ac:	bf00      	nop
    }

    return rslt;
 80071ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
	...

080071bc <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	3390      	adds	r3, #144	@ 0x90
 80071ca:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	3318      	adds	r3, #24
 80071d0:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	4ba4      	ldr	r3, [pc, #656]	@ (8007468 <parse_calib_data+0x2ac>)
 80071d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b21b      	sxth	r3, r3
 80071e4:	021b      	lsls	r3, r3, #8
 80071e6:	b21a      	sxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	b21b      	sxth	r3, r3
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b21b      	sxth	r3, r3
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	881b      	ldrh	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 f981 	bl	8000504 <__aeabi_ui2d>
 8007202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007206:	f7f9 fb21 	bl	800084c <__aeabi_ddiv>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	6939      	ldr	r1, [r7, #16]
 8007210:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3303      	adds	r3, #3
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	b21b      	sxth	r3, r3
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	b21a      	sxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3302      	adds	r3, #2
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b21b      	sxth	r3, r3
 8007228:	4313      	orrs	r3, r2
 800722a:	b21b      	sxth	r3, r3
 800722c:	b29a      	uxth	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	4b8d      	ldr	r3, [pc, #564]	@ (800746c <parse_calib_data+0x2b0>)
 8007238:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	885b      	ldrh	r3, [r3, #2]
 8007240:	4618      	mov	r0, r3
 8007242:	f7f9 f95f 	bl	8000504 <__aeabi_ui2d>
 8007246:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800724a:	f7f9 faff 	bl	800084c <__aeabi_ddiv>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	6939      	ldr	r1, [r7, #16]
 8007254:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	3304      	adds	r3, #4
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b25a      	sxtb	r2, r3
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8007264:	f04f 0200 	mov.w	r2, #0
 8007268:	4b81      	ldr	r3, [pc, #516]	@ (8007470 <parse_calib_data+0x2b4>)
 800726a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007274:	4618      	mov	r0, r3
 8007276:	f7f9 f955 	bl	8000524 <__aeabi_i2d>
 800727a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800727e:	f7f9 fae5 	bl	800084c <__aeabi_ddiv>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	6939      	ldr	r1, [r7, #16]
 8007288:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	3306      	adds	r3, #6
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b21b      	sxth	r3, r3
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	b21a      	sxth	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	3305      	adds	r3, #5
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	b21b      	sxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b21a      	sxth	r2, r3
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	4b71      	ldr	r3, [pc, #452]	@ (8007474 <parse_calib_data+0x2b8>)
 80072ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80072b8:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80072bc:	4618      	mov	r0, r3
 80072be:	f7f9 f931 	bl	8000524 <__aeabi_i2d>
 80072c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c6:	f7f9 fac1 	bl	800084c <__aeabi_ddiv>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	6939      	ldr	r1, [r7, #16]
 80072d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3308      	adds	r3, #8
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	b21b      	sxth	r3, r3
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	b21a      	sxth	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3307      	adds	r3, #7
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	4313      	orrs	r3, r2
 80072ea:	b21a      	sxth	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	4b60      	ldr	r3, [pc, #384]	@ (8007478 <parse_calib_data+0x2bc>)
 80072f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007300:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8007304:	4618      	mov	r0, r3
 8007306:	f7f9 f90d 	bl	8000524 <__aeabi_i2d>
 800730a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800730e:	f7f9 fa9d 	bl	800084c <__aeabi_ddiv>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	6939      	ldr	r1, [r7, #16]
 8007318:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3309      	adds	r3, #9
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b25a      	sxtb	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8007328:	f04f 0200 	mov.w	r2, #0
 800732c:	4b53      	ldr	r3, [pc, #332]	@ (800747c <parse_calib_data+0x2c0>)
 800732e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8007338:	4618      	mov	r0, r3
 800733a:	f7f9 f8f3 	bl	8000524 <__aeabi_i2d>
 800733e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007342:	f7f9 fa83 	bl	800084c <__aeabi_ddiv>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	6939      	ldr	r1, [r7, #16]
 800734c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	330a      	adds	r3, #10
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	b25a      	sxtb	r2, r3
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	4b47      	ldr	r3, [pc, #284]	@ (8007480 <parse_calib_data+0x2c4>)
 8007362:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800736c:	4618      	mov	r0, r3
 800736e:	f7f9 f8d9 	bl	8000524 <__aeabi_i2d>
 8007372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007376:	f7f9 fa69 	bl	800084c <__aeabi_ddiv>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	6939      	ldr	r1, [r7, #16]
 8007380:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	330c      	adds	r3, #12
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b21b      	sxth	r3, r3
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	b21a      	sxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	330b      	adds	r3, #11
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b21b      	sxth	r3, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	b21b      	sxth	r3, r3
 800739c:	b29a      	uxth	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80073aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	899b      	ldrh	r3, [r3, #12]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 f8a6 	bl	8000504 <__aeabi_ui2d>
 80073b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073bc:	f7f9 fa46 	bl	800084c <__aeabi_ddiv>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	6939      	ldr	r1, [r7, #16]
 80073c6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	330e      	adds	r3, #14
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b21b      	sxth	r3, r3
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	b21a      	sxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	330d      	adds	r3, #13
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	b21b      	sxth	r3, r3
 80073de:	4313      	orrs	r3, r2
 80073e0:	b21b      	sxth	r3, r3
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 80073e8:	f04f 0200 	mov.w	r2, #0
 80073ec:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <parse_calib_data+0x2c8>)
 80073ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	89db      	ldrh	r3, [r3, #14]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 f884 	bl	8000504 <__aeabi_ui2d>
 80073fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007400:	f7f9 fa24 	bl	800084c <__aeabi_ddiv>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	6939      	ldr	r1, [r7, #16]
 800740a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	330f      	adds	r3, #15
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	b25a      	sxtb	r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <parse_calib_data+0x2cc>)
 8007420:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800742a:	4618      	mov	r0, r3
 800742c:	f7f9 f87a 	bl	8000524 <__aeabi_i2d>
 8007430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007434:	f7f9 fa0a 	bl	800084c <__aeabi_ddiv>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	6939      	ldr	r1, [r7, #16]
 800743e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3310      	adds	r3, #16
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	b25a      	sxtb	r2, r3
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <parse_calib_data+0x2d0>)
 8007454:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 f860 	bl	8000524 <__aeabi_i2d>
 8007464:	e014      	b.n	8007490 <parse_calib_data+0x2d4>
 8007466:	bf00      	nop
 8007468:	3f700000 	.word	0x3f700000
 800746c:	41d00000 	.word	0x41d00000
 8007470:	42f00000 	.word	0x42f00000
 8007474:	41300000 	.word	0x41300000
 8007478:	41c00000 	.word	0x41c00000
 800747c:	41f00000 	.word	0x41f00000
 8007480:	42400000 	.word	0x42400000
 8007484:	40500000 	.word	0x40500000
 8007488:	40700000 	.word	0x40700000
 800748c:	40e00000 	.word	0x40e00000
 8007490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007494:	f7f9 f9da 	bl	800084c <__aeabi_ddiv>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	6939      	ldr	r1, [r7, #16]
 800749e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3312      	adds	r3, #18
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b21b      	sxth	r3, r3
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b21a      	sxth	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3311      	adds	r3, #17
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	4313      	orrs	r3, r2
 80074b8:	b21a      	sxth	r2, r3
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	4b25      	ldr	r3, [pc, #148]	@ (8007558 <parse_calib_data+0x39c>)
 80074c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 f828 	bl	8000524 <__aeabi_i2d>
 80074d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074d8:	f7f9 f9b8 	bl	800084c <__aeabi_ddiv>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	6939      	ldr	r1, [r7, #16]
 80074e2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3313      	adds	r3, #19
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b25a      	sxtb	r2, r3
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 80074f2:	f04f 0200 	mov.w	r2, #0
 80074f6:	4b18      	ldr	r3, [pc, #96]	@ (8007558 <parse_calib_data+0x39c>)
 80074f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8007502:	4618      	mov	r0, r3
 8007504:	f7f9 f80e 	bl	8000524 <__aeabi_i2d>
 8007508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800750c:	f7f9 f99e 	bl	800084c <__aeabi_ddiv>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	6939      	ldr	r1, [r7, #16]
 8007516:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3314      	adds	r3, #20
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b25a      	sxtb	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 800752e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8007538:	4618      	mov	r0, r3
 800753a:	f7f8 fff3 	bl	8000524 <__aeabi_i2d>
 800753e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007542:	f7f9 f983 	bl	800084c <__aeabi_ddiv>
 8007546:	4602      	mov	r2, r0
 8007548:	460b      	mov	r3, r1
 800754a:	6939      	ldr	r1, [r7, #16]
 800754c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	42f00000 	.word	0x42f00000

0800755c <compensate_temperature>:
 * For e.g. Returns temperature 24.26 deg Celsius
 */
static int8_t compensate_temperature(double *temperature,
                                     const struct bmp3_uncomp_data *uncomp_data,
                                     struct bmp3_calib_data *calib_data)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	@ 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int64_t uncomp_temp = uncomp_data->temperature;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007574:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 8007578:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800757c:	f7f9 f80e 	bl	800059c <__aeabi_l2d>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fe7f 	bl	8000288 <__aeabi_dsub>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007598:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800759c:	f7f9 f82c 	bl	80005f8 <__aeabi_dmul>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80075a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80075b0:	f7f9 f822 	bl	80005f8 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 80075c2:	f7f9 f819 	bl	80005f8 <__aeabi_dmul>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4610      	mov	r0, r2
 80075cc:	4619      	mov	r1, r3
 80075ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80075d2:	f7f8 fe5b 	bl	800028c <__adddf3>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    /* Returns compensated temperature */
    if (calib_data->quantized_calib_data.t_lin < BMP3_MIN_TEMP_DOUBLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	4b17      	ldr	r3, [pc, #92]	@ (8007648 <compensate_temperature+0xec>)
 80075ec:	f7f9 fa76 	bl	8000adc <__aeabi_dcmplt>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d008      	beq.n	8007608 <compensate_temperature+0xac>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MIN_TEMP_DOUBLE;
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	f04f 0200 	mov.w	r2, #0
 80075fc:	4b12      	ldr	r3, [pc, #72]	@ (8007648 <compensate_temperature+0xec>)
 80075fe:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MIN_TEMP;
 8007602:	2303      	movs	r3, #3
 8007604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    if (calib_data->quantized_calib_data.t_lin > BMP3_MAX_TEMP_DOUBLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800760e:	f04f 0200 	mov.w	r2, #0
 8007612:	4b0e      	ldr	r3, [pc, #56]	@ (800764c <compensate_temperature+0xf0>)
 8007614:	f7f9 fa80 	bl	8000b18 <__aeabi_dcmpgt>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d008      	beq.n	8007630 <compensate_temperature+0xd4>
    {
        calib_data->quantized_calib_data.t_lin = BMP3_MAX_TEMP_DOUBLE;
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	f04f 0200 	mov.w	r2, #0
 8007624:	4b09      	ldr	r3, [pc, #36]	@ (800764c <compensate_temperature+0xf0>)
 8007626:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
        rslt = BMP3_W_MAX_TEMP;
 800762a:	2304      	movs	r3, #4
 800762c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    (*temperature) = calib_data->quantized_calib_data.t_lin;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800763c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007640:	4618      	mov	r0, r3
 8007642:	3730      	adds	r7, #48	@ 0x30
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	c0440000 	.word	0xc0440000
 800764c:	40554000 	.word	0x40554000

08007650 <compensate_pressure>:
 * For e.g. returns pressure in Pascal p = 95305.295
 */
static int8_t compensate_pressure(double *pressure,
                                  const struct bmp3_uncomp_data *uncomp_data,
                                  const struct bmp3_calib_data *calib_data)
{
 8007650:	b5b0      	push	{r4, r5, r7, lr}
 8007652:	b096      	sub	sp, #88	@ 0x58
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
    int8_t rslt = BMP3_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	647b      	str	r3, [r7, #68]	@ 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8007666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007668:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800766c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800766e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8007672:	f7f8 ffc1 	bl	80005f8 <__aeabi_dmul>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800767e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007680:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	@ 0x48
 8007684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007686:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800768a:	2002      	movs	r0, #2
 800768c:	eeb0 0a47 	vmov.f32	s0, s14
 8007690:	eef0 0a67 	vmov.f32	s1, s15
 8007694:	f000 f954 	bl	8007940 <pow_bmp3>
 8007698:	ee10 3a10 	vmov	r3, s0
 800769c:	4618      	mov	r0, r3
 800769e:	f7f8 ff53 	bl	8000548 <__aeabi_f2d>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4620      	mov	r0, r4
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7f8 ffa5 	bl	80005f8 <__aeabi_dmul>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80076b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076b8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	@ 0x50
 80076bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076be:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80076c2:	2003      	movs	r0, #3
 80076c4:	eeb0 0a47 	vmov.f32	s0, s14
 80076c8:	eef0 0a67 	vmov.f32	s1, s15
 80076cc:	f000 f938 	bl	8007940 <pow_bmp3>
 80076d0:	ee10 3a10 	vmov	r3, s0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7f8 ff37 	bl	8000548 <__aeabi_f2d>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f8 ff89 	bl	80005f8 <__aeabi_dmul>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 80076ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80076f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80076f8:	f7f8 fdc8 	bl	800028c <__adddf3>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007708:	f7f8 fdc0 	bl	800028c <__adddf3>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007714:	f7f8 fdba 	bl	800028c <__adddf3>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8007720:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007722:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007728:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8007738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773a:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800773e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007740:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8007744:	2002      	movs	r0, #2
 8007746:	eeb0 0a47 	vmov.f32	s0, s14
 800774a:	eef0 0a67 	vmov.f32	s1, s15
 800774e:	f000 f8f7 	bl	8007940 <pow_bmp3>
 8007752:	ee10 3a10 	vmov	r3, s0
 8007756:	4618      	mov	r0, r3
 8007758:	f7f8 fef6 	bl	8000548 <__aeabi_f2d>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f8 ff48 	bl	80005f8 <__aeabi_dmul>
 8007768:	4602      	mov	r2, r0
 800776a:	460b      	mov	r3, r1
 800776c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 8007770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007772:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8007776:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007778:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800777c:	2003      	movs	r0, #3
 800777e:	eeb0 0a47 	vmov.f32	s0, s14
 8007782:	eef0 0a67 	vmov.f32	s1, s15
 8007786:	f000 f8db 	bl	8007940 <pow_bmp3>
 800778a:	ee10 3a10 	vmov	r3, s0
 800778e:	4618      	mov	r0, r3
 8007790:	f7f8 feda 	bl	8000548 <__aeabi_f2d>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4620      	mov	r0, r4
 800779a:	4629      	mov	r1, r5
 800779c:	f7f8 ff2c 	bl	80005f8 <__aeabi_dmul>
 80077a0:	4602      	mov	r2, r0
 80077a2:	460b      	mov	r3, r1
 80077a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_out2 = uncomp_data->pressure *
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f8 feeb 	bl	800058c <__aeabi_ul2d>
 80077b6:	4604      	mov	r4, r0
 80077b8:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80077ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077bc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80077c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077c4:	f7f8 fd62 	bl	800028c <__adddf3>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4610      	mov	r0, r2
 80077ce:	4619      	mov	r1, r3
 80077d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80077d4:	f7f8 fd5a 	bl	800028c <__adddf3>
 80077d8:	4602      	mov	r2, r0
 80077da:	460b      	mov	r3, r1
 80077dc:	4610      	mov	r0, r2
 80077de:	4619      	mov	r1, r3
 80077e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80077e4:	f7f8 fd52 	bl	800028c <__adddf3>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 ff02 	bl	80005f8 <__aeabi_dmul>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	4610      	mov	r0, r2
 8007804:	4619      	mov	r1, r3
 8007806:	f7f8 fec1 	bl	800058c <__aeabi_ul2d>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	2002      	movs	r0, #2
 8007810:	ec43 2b10 	vmov	d0, r2, r3
 8007814:	f000 f894 	bl	8007940 <pow_bmp3>
 8007818:	ee10 3a10 	vmov	r3, s0
 800781c:	4618      	mov	r0, r3
 800781e:	f7f8 fe93 	bl	8000548 <__aeabi_f2d>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800782a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	@ 0x58
 8007830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007832:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8007836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007838:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800783c:	f7f8 fedc 	bl	80005f8 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	f7f8 fd20 	bl	800028c <__adddf3>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    partial_data3 = partial_data1 * partial_data2;
 8007854:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007858:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800785c:	f7f8 fecc 	bl	80005f8 <__aeabi_dmul>
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	4610      	mov	r0, r2
 8007870:	4619      	mov	r1, r3
 8007872:	f7f8 fe8b 	bl	800058c <__aeabi_ul2d>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	2003      	movs	r0, #3
 800787c:	ec43 2b10 	vmov	d0, r2, r3
 8007880:	f000 f85e 	bl	8007940 <pow_bmp3>
 8007884:	ee10 3a10 	vmov	r3, s0
 8007888:	4618      	mov	r0, r3
 800788a:	f7f8 fe5d 	bl	8000548 <__aeabi_f2d>
 800788e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007890:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8007894:	f7f8 feb0 	bl	80005f8 <__aeabi_dmul>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80078a0:	f7f8 fcf4 	bl	800028c <__adddf3>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 80078ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078b4:	f7f8 fcea 	bl	800028c <__adddf3>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80078c0:	f7f8 fce4 	bl	800028c <__adddf3>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    if (comp_press < BMP3_MIN_PRES_DOUBLE)
 80078cc:	a318      	add	r3, pc, #96	@ (adr r3, 8007930 <compensate_pressure+0x2e0>)
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80078d6:	f7f9 f901 	bl	8000adc <__aeabi_dcmplt>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <compensate_pressure+0x2a0>
    {
        comp_press = BMP3_MIN_PRES_DOUBLE;
 80078e0:	a313      	add	r3, pc, #76	@ (adr r3, 8007930 <compensate_pressure+0x2e0>)
 80078e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MIN_PRES;
 80078ea:	2305      	movs	r3, #5
 80078ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    if (comp_press > BMP3_MAX_PRES_DOUBLE)
 80078f0:	a311      	add	r3, pc, #68	@ (adr r3, 8007938 <compensate_pressure+0x2e8>)
 80078f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80078fa:	f7f9 f90d 	bl	8000b18 <__aeabi_dcmpgt>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <compensate_pressure+0x2c4>
    {
        comp_press = BMP3_MAX_PRES_DOUBLE;
 8007904:	a30c      	add	r3, pc, #48	@ (adr r3, 8007938 <compensate_pressure+0x2e8>)
 8007906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
        rslt = BMP3_W_MAX_PRES;
 800790e:	2306      	movs	r3, #6
 8007910:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    (*pressure) = comp_press;
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800791a:	e9c1 2300 	strd	r2, r3, [r1]

    return rslt;
 800791e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8007922:	4618      	mov	r0, r3
 8007924:	3758      	adds	r7, #88	@ 0x58
 8007926:	46bd      	mov	sp, r7
 8007928:	bdb0      	pop	{r4, r5, r7, pc}
 800792a:	bf00      	nop
 800792c:	f3af 8000 	nop.w
 8007930:	00000000 	.word	0x00000000
 8007934:	40dd4c00 	.word	0x40dd4c00
 8007938:	00000000 	.word	0x00000000
 800793c:	40fe8480 	.word	0x40fe8480

08007940 <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	ed87 0b02 	vstr	d0, [r7, #8]
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 800794e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007952:	617b      	str	r3, [r7, #20]

    while (power != 0)
 8007954:	e00e      	b.n	8007974 <pow_bmp3+0x34>
    {
        pow_output = (float) base * pow_output;
 8007956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800795a:	f7f9 f945 	bl	8000be8 <__aeabi_d2f>
 800795e:	ee07 0a10 	vmov	s14, r0
 8007962:	edd7 7a05 	vldr	s15, [r7, #20]
 8007966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800796a:	edc7 7a05 	vstr	s15, [r7, #20]
        power--;
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	3b01      	subs	r3, #1
 8007972:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 8007974:	79fb      	ldrb	r3, [r7, #7]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ed      	bne.n	8007956 <pow_bmp3+0x16>
    }

    return pow_output;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	ee07 3a90 	vmov	s15, r3
}
 8007980:	eeb0 0a67 	vmov.f32	s0, s15
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}

0800798a <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 800798a:	b480      	push	{r7}
 800798c:	b085      	sub	sp, #20
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	4013      	ands	r3, r2
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	e001      	b.n	80079ac <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00f      	beq.n	80079e8 <null_ptr_check+0x2e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <null_ptr_check+0x2e>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d007      	beq.n	80079e8 <null_ptr_check+0x2e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 80079e8:	23ff      	movs	r3, #255	@ 0xff
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e001      	b.n	80079f2 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80079f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <bmp388_read>:
static volatile uint32_t counter = 0U;



BMP3_INTF_RET_TYPE bmp388_read(uint8_t reg_addr, uint8_t *read_data, uint32_t len, void *intf_ptr)
{
 8007a02:	b590      	push	{r4, r7, lr}
 8007a04:	b08b      	sub	sp, #44	@ 0x2c
 8007a06:	af04      	add	r7, sp, #16
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Read(intf->hi2c, (intf->dev_addr << 1U), reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	6858      	ldr	r0, [r3, #4]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	7a1b      	ldrb	r3, [r3, #8]
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	b299      	uxth	r1, r3
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a2e:	9402      	str	r4, [sp, #8]
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	2301      	movs	r3, #1
 8007a38:	f7fa fd10 	bl	800245c <HAL_I2C_Mem_Read>
	return ( BMP3_INTF_RET_SUCCESS );
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd90      	pop	{r4, r7, pc}

08007a46 <bmp388_write>:

BMP3_INTF_RET_TYPE bmp388_write(uint8_t reg_addr, const uint8_t *read_data, uint32_t len,void *intf_ptr)
{
 8007a46:	b590      	push	{r4, r7, lr}
 8007a48:	b08b      	sub	sp, #44	@ 0x2c
 8007a4a:	af04      	add	r7, sp, #16
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	617b      	str	r3, [r7, #20]
	HAL_I2C_Mem_Write(intf->hi2c, ((intf->dev_addr << 1U) | 0x1U), reg_addr, 1U, (uint8_t*)read_data, len, HAL_MAX_DELAY);
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6858      	ldr	r0, [r3, #4]
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	7a1b      	ldrb	r3, [r3, #8]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	f043 0301 	orr.w	r3, r3, #1
 8007a6a:	b299      	uxth	r1, r3
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f04f 34ff 	mov.w	r4, #4294967295
 8007a78:	9402      	str	r4, [sp, #8]
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2301      	movs	r3, #1
 8007a82:	f7fa fbf1 	bl	8002268 <HAL_I2C_Mem_Write>
	return ( BMP3_INTF_RET_SUCCESS );
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 8007a9e:	f7f9 fcd1 	bl	8001444 <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d104      	bne.n	8007aba <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 8007ab0:	4b05      	ldr	r3, [pc, #20]	@ (8007ac8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	4a04      	ldr	r2, [pc, #16]	@ (8007ac8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8007ab8:	6013      	str	r3, [r2, #0]
	}

}
 8007aba:	bf00      	nop
 8007abc:	3708      	adds	r7, #8
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000000 	.word	0x20000000
 8007ac8:	20000488 	.word	0x20000488

08007acc <delay_us>:

void delay_us(uint32_t period, void *intf_ptr)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	struct bmp388_interface *intf = (struct bmp388_interface *)intf_ptr;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	60fb      	str	r3, [r7, #12]

	HAL_TIM_Base_Start_IT(intf->htim);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fb ff8a 	bl	80039f8 <HAL_TIM_Base_Start_IT>

	while(counter != period);
 8007ae4:	bf00      	nop
 8007ae6:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <delay_us+0x3c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d1fa      	bne.n	8007ae6 <delay_us+0x1a>

	HAL_TIM_Base_Stop_IT(intf->htim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fb ffef 	bl	8003ad8 <HAL_TIM_Base_Stop_IT>

	counter = 0U;
 8007afa:	4b03      	ldr	r3, [pc, #12]	@ (8007b08 <delay_us+0x3c>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000488 	.word	0x20000488

08007b0c <init_bmp388_sensor_driver_interface>:

BMP3_INTF_RET_TYPE init_bmp388_sensor_driver_interface(struct bmp3_dev *bmp388,struct bmp388_interface *bmp388_intf)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]

	if( bmp388 == NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <init_bmp388_sensor_driver_interface+0x14>
	{
		Error_Handler();
 8007b1c:	f7f9 fc92 	bl	8001444 <Error_Handler>
	}

	struct bmp3_settings settings = { 0 };
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	731a      	strb	r2, [r3, #12]
	int8_t rslt = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	77fb      	strb	r3, [r7, #31]
	uint16_t settings_sel = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	83bb      	strh	r3, [r7, #28]

	bmp388->intf = BMP3_I2C_INTF;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	721a      	strb	r2, [r3, #8]
	bmp388->read = bmp388_read;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c28 <init_bmp388_sensor_driver_interface+0x11c>)
 8007b40:	60da      	str	r2, [r3, #12]
	bmp388->write = bmp388_write;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a39      	ldr	r2, [pc, #228]	@ (8007c2c <init_bmp388_sensor_driver_interface+0x120>)
 8007b46:	611a      	str	r2, [r3, #16]
	bmp388->delay_us = delay_us;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a39      	ldr	r2, [pc, #228]	@ (8007c30 <init_bmp388_sensor_driver_interface+0x124>)
 8007b4c:	615a      	str	r2, [r3, #20]
	bmp388->intf_ptr = bmp388_intf;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	605a      	str	r2, [r3, #4]

	rslt = bmp3_selftest_check(bmp388);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f87d 	bl	8007c54 <bmp3_selftest_check>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d004      	beq.n	8007b70 <init_bmp388_sensor_driver_interface+0x64>
	{
		printf("BMP388 self-test failure !\n");
 8007b66:	4833      	ldr	r0, [pc, #204]	@ (8007c34 <init_bmp388_sensor_driver_interface+0x128>)
 8007b68:	f001 f96a 	bl	8008e40 <puts>
		Error_Handler();
 8007b6c:	f7f9 fc6a 	bl	8001444 <Error_Handler>
	}

	printf("BMP388 self-test success !\n");
 8007b70:	4831      	ldr	r0, [pc, #196]	@ (8007c38 <init_bmp388_sensor_driver_interface+0x12c>)
 8007b72:	f001 f965 	bl	8008e40 <puts>

	rslt = bmp3_init(bmp388);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7fe fb58 	bl	800622c <bmp3_init>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007b80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <init_bmp388_sensor_driver_interface+0x86>
	{
		printf("BMP388 initialization failure !\n");
 8007b88:	482c      	ldr	r0, [pc, #176]	@ (8007c3c <init_bmp388_sensor_driver_interface+0x130>)
 8007b8a:	f001 f959 	bl	8008e40 <puts>
		Error_Handler();
 8007b8e:	f7f9 fc59 	bl	8001444 <Error_Handler>
	}

	printf("BMP388 initialization success !\n");
 8007b92:	482b      	ldr	r0, [pc, #172]	@ (8007c40 <init_bmp388_sensor_driver_interface+0x134>)
 8007b94:	f001 f954 	bl	8008e40 <puts>
	printf("Chip ID 0x%X\n" , bmp388->chip_id);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	4829      	ldr	r0, [pc, #164]	@ (8007c44 <init_bmp388_sensor_driver_interface+0x138>)
 8007ba0:	f001 f8e6 	bl	8008d70 <iprintf>

	settings.press_en = BMP3_ENABLE;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	737b      	strb	r3, [r7, #13]
	settings.temp_en = BMP3_ENABLE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	73bb      	strb	r3, [r7, #14]

	settings.odr_filter.iir_filter = BMP3_IIR_FILTER_COEFF_63; //BMP3_IIR_FILTER_COEFF_3
 8007bac:	2306      	movs	r3, #6
 8007bae:	747b      	strb	r3, [r7, #17]
	settings.odr_filter.press_os = BMP3_OVERSAMPLING_8X;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	73fb      	strb	r3, [r7, #15]
	settings.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	743b      	strb	r3, [r7, #16]
	settings.odr_filter.odr = BMP3_ODR_50_HZ;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	74bb      	strb	r3, [r7, #18]

	settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR |
 8007bbc:	23fe      	movs	r3, #254	@ 0xfe
 8007bbe:	83bb      	strh	r3, [r7, #28]
				 BMP3_SEL_DRDY_EN | BMP3_SEL_IIR_FILTER;

	rslt = bmp3_set_sensor_settings(settings_sel, &settings, bmp388);
 8007bc0:	8bbb      	ldrh	r3, [r7, #28]
 8007bc2:	f107 010c 	add.w	r1, r7, #12
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fe fc9b 	bl	8006504 <bmp3_set_sensor_settings>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007bd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <init_bmp388_sensor_driver_interface+0xd8>
	{
		printf("BMP388 set sensor settings failure !\n");
 8007bda:	481b      	ldr	r0, [pc, #108]	@ (8007c48 <init_bmp388_sensor_driver_interface+0x13c>)
 8007bdc:	f001 f930 	bl	8008e40 <puts>
		Error_Handler();
 8007be0:	f7f9 fc30 	bl	8001444 <Error_Handler>
	}

	printf("BMP388 set sensor settings success !\n");
 8007be4:	4819      	ldr	r0, [pc, #100]	@ (8007c4c <init_bmp388_sensor_driver_interface+0x140>)
 8007be6:	f001 f92b 	bl	8008e40 <puts>

	settings.op_mode = BMP3_MODE_NORMAL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	733b      	strb	r3, [r7, #12]
	rslt = bmp3_set_op_mode(&settings, bmp388);
 8007bee:	f107 030c 	add.w	r3, r7, #12
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fe fd1d 	bl	8006634 <bmp3_set_op_mode>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	77fb      	strb	r3, [r7, #31]

	if ( rslt !=  BMP3_OK )
 8007bfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <init_bmp388_sensor_driver_interface+0x104>
	{
		printf("BMP388 sensor op mode failure !\n");
 8007c06:	4812      	ldr	r0, [pc, #72]	@ (8007c50 <init_bmp388_sensor_driver_interface+0x144>)
 8007c08:	f001 f91a 	bl	8008e40 <puts>
		Error_Handler();
 8007c0c:	f7f9 fc1a 	bl	8001444 <Error_Handler>
	}

	printf("BMP388 sensor op mode failure !\n");
 8007c10:	480f      	ldr	r0, [pc, #60]	@ (8007c50 <init_bmp388_sensor_driver_interface+0x144>)
 8007c12:	f001 f915 	bl	8008e40 <puts>

	HAL_Delay(3000);
 8007c16:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007c1a:	f7f9 fef5 	bl	8001a08 <HAL_Delay>

	return ( BMP3_INTF_RET_SUCCESS );
 8007c1e:	2300      	movs	r3, #0

}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3720      	adds	r7, #32
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	08007a03 	.word	0x08007a03
 8007c2c:	08007a47 	.word	0x08007a47
 8007c30:	08007acd 	.word	0x08007acd
 8007c34:	0800c8f8 	.word	0x0800c8f8
 8007c38:	0800c914 	.word	0x0800c914
 8007c3c:	0800c930 	.word	0x0800c930
 8007c40:	0800c950 	.word	0x0800c950
 8007c44:	0800c970 	.word	0x0800c970
 8007c48:	0800c980 	.word	0x0800c980
 8007c4c:	0800c9a8 	.word	0x0800c9a8
 8007c50:	0800c9d0 	.word	0x0800c9d0

08007c54 <bmp3_selftest_check>:

/*!
 * @brief       Self-test API for the BMP38X
 */
int8_t bmp3_selftest_check(struct bmp3_dev *dev)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b08c      	sub	sp, #48	@ 0x30
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]

    /* Variable used to select the sensor component */
    uint8_t sensor_comp;

    /* Variable used to store the compensated data */
    struct bmp3_data data = { 0 };
 8007c5c:	f107 0318 	add.w	r3, r7, #24
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	605a      	str	r2, [r3, #4]
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	60da      	str	r2, [r3, #12]

    /* Used to select the settings user needs to change */
    uint16_t settings_sel;

    /* Reset the sensor */
    rslt = bmp3_soft_reset(dev);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fe fc98 	bl	80065a0 <bmp3_soft_reset>
 8007c70:	4603      	mov	r3, r0
 8007c72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMP3_SENSOR_OK)
 8007c76:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d17a      	bne.n	8007d74 <bmp3_selftest_check+0x120>
    {
        rslt = bmp3_init(dev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fe fad4 	bl	800622c <bmp3_init>
 8007c84:	4603      	mov	r3, r0
 8007c86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        if (rslt == BMP3_E_COMM_FAIL || rslt == BMP3_E_DEV_NOT_FOUND)
 8007c8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007c8e:	f113 0f02 	cmn.w	r3, #2
 8007c92:	d004      	beq.n	8007c9e <bmp3_selftest_check+0x4a>
 8007c94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007c98:	f113 0f07 	cmn.w	r3, #7
 8007c9c:	d102      	bne.n	8007ca4 <bmp3_selftest_check+0x50>
        {
            rslt = BMP3_COMMUNICATION_ERROR_OR_WRONG_DEVICE;
 8007c9e:	230a      	movs	r3, #10
 8007ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (rslt == BMP3_SENSOR_OK)
 8007ca4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d105      	bne.n	8007cb8 <bmp3_selftest_check+0x64>
        {
            rslt = validate_trimming_param(dev);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8b5 	bl	8007e1c <validate_trimming_param>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        if (rslt == BMP3_SENSOR_OK)
 8007cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d13e      	bne.n	8007d3e <bmp3_selftest_check+0xea>
        {
            /* Select the pressure and temperature sensor to be enabled */
        	dev_setting.press_en = BMP3_ENABLE;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	727b      	strb	r3, [r7, #9]
        	dev_setting.temp_en = BMP3_ENABLE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	72bb      	strb	r3, [r7, #10]

            /* Select the output data rate and over sampling settings for pressure and temperature */
        	dev_setting.odr_filter.press_os = BMP3_NO_OVERSAMPLING;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	72fb      	strb	r3, [r7, #11]
        	dev_setting.odr_filter.temp_os = BMP3_NO_OVERSAMPLING;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	733b      	strb	r3, [r7, #12]
        	dev_setting.odr_filter.odr = BMP3_ODR_25_HZ;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	73bb      	strb	r3, [r7, #14]

            /* Assign the settings which needs to be set in the sensor */
            settings_sel = BMP3_SEL_PRESS_EN | BMP3_SEL_TEMP_EN | BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS | BMP3_SEL_ODR;
 8007cd4:	23b6      	movs	r3, #182	@ 0xb6
 8007cd6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            rslt = bmp3_set_sensor_settings(settings_sel, &dev_setting,dev);
 8007cd8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007cda:	f107 0108 	add.w	r1, r7, #8
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fc0f 	bl	8006504 <bmp3_set_sensor_settings>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (rslt == BMP3_SENSOR_OK)
 8007cec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d124      	bne.n	8007d3e <bmp3_selftest_check+0xea>
            {
            	dev_setting.op_mode = BMP3_MODE_NORMAL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 8007cf8:	f107 0308 	add.w	r3, r7, #8
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fc98 	bl	8006634 <bmp3_set_op_mode>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (rslt == BMP3_SENSOR_OK)
 8007d0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d115      	bne.n	8007d3e <bmp3_selftest_check+0xea>
                {
                    dev->delay_us(40000, dev->intf_ptr);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6852      	ldr	r2, [r2, #4]
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	f649 4040 	movw	r0, #40000	@ 0x9c40
 8007d20:	4798      	blx	r3

                    /* Sensor component selection */
                    sensor_comp = BMP3_PRESS | BMP3_TEMP;
 8007d22:	2303      	movs	r3, #3
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                    /* Temperature and Pressure data are read and stored in the bmp3_data instance */
                    rslt = bmp3_get_sensor_data(sensor_comp, &data, dev);
 8007d28:	f107 0118 	add.w	r1, r7, #24
 8007d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fcf2 	bl	800671c <bmp3_get_sensor_data>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                }
            }
        }

        if (rslt == BMP3_SENSOR_OK)
 8007d3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d116      	bne.n	8007d74 <bmp3_selftest_check+0x120>
        {
            rslt = analyze_sensor_data(&data);
 8007d46:	f107 0318 	add.w	r3, r7, #24
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f818 	bl	8007d80 <analyze_sensor_data>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            /* Set the power mode to sleep mode */
            if (rslt == BMP3_SENSOR_OK)
 8007d56:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <bmp3_selftest_check+0x120>
            {
            	dev_setting.op_mode = BMP3_MODE_SLEEP;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	723b      	strb	r3, [r7, #8]
                rslt = bmp3_set_op_mode(&dev_setting,dev);
 8007d62:	f107 0308 	add.w	r3, r7, #8
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fc63 	bl	8006634 <bmp3_set_op_mode>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
        }
    }

    return rslt;
 8007d74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3730      	adds	r7, #48	@ 0x30
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <analyze_sensor_data>:

/*!
 * @brief  Function to analyze the sensor data
 */
static int8_t analyze_sensor_data(const struct bmp3_data *sens_data)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMP3_SENSOR_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]

    if ((sens_data->temperature < BMP3_MIN_TEMPERATURE) || (sens_data->temperature > BMP3_MAX_TEMPERATURE))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d92:	f04f 0200 	mov.w	r2, #0
 8007d96:	f04f 0300 	mov.w	r3, #0
 8007d9a:	f7f8 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <analyze_sensor_data+0x3a>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	4b1a      	ldr	r3, [pc, #104]	@ (8007e18 <analyze_sensor_data+0x98>)
 8007db0:	f7f8 feb2 	bl	8000b18 <__aeabi_dcmpgt>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d001      	beq.n	8007dbe <analyze_sensor_data+0x3e>
    {
        rslt = BMP3_IMPLAUSIBLE_TEMPERATURE;
 8007dba:	2328      	movs	r3, #40	@ 0x28
 8007dbc:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMP3_SENSOR_OK)
 8007dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d117      	bne.n	8007df6 <analyze_sensor_data+0x76>
    {
        if ((sens_data->pressure < BMP3_MIN_PRESSURE) || (sens_data->pressure > BMP3_MAX_PRESSURE))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007dcc:	a30e      	add	r3, pc, #56	@ (adr r3, 8007e08 <analyze_sensor_data+0x88>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fe83 	bl	8000adc <__aeabi_dcmplt>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <analyze_sensor_data+0x72>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007de2:	a30b      	add	r3, pc, #44	@ (adr r3, 8007e10 <analyze_sensor_data+0x90>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <analyze_sensor_data+0x76>
        {
            rslt = BMP3_IMPLAUSIBLE_PRESSURE;
 8007df2:	2329      	movs	r3, #41	@ 0x29
 8007df4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8007df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	f3af 8000 	nop.w
 8007e08:	00000000 	.word	0x00000000
 8007e0c:	40f5f900 	.word	0x40f5f900
 8007e10:	00000000 	.word	0x00000000
 8007e14:	40fadb00 	.word	0x40fadb00
 8007e18:	40af4000 	.word	0x40af4000

08007e1c <validate_trimming_param>:

/*
 * @brief Function to verify the trimming parameters
 * */
static int8_t validate_trimming_param(struct bmp3_dev *dev)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08a      	sub	sp, #40	@ 0x28
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t crc = 0xFF;
 8007e24:	23ff      	movs	r3, #255	@ 0xff
 8007e26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t stored_crc;
    uint8_t trim_param[21];
    uint8_t i;

    rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8007e2a:	f107 010c 	add.w	r1, r7, #12
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2215      	movs	r2, #21
 8007e32:	2031      	movs	r0, #49	@ 0x31
 8007e34:	f7fe fa41 	bl	80062ba <bmp3_get_regs>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMP3_SENSOR_OK)
 8007e3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d133      	bne.n	8007eae <validate_trimming_param+0x92>
    {
        for (i = 0; i < 21; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007e4c:	e013      	b.n	8007e76 <validate_trimming_param+0x5a>
        {
            crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8007e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e52:	3328      	adds	r3, #40	@ 0x28
 8007e54:	443b      	add	r3, r7
 8007e56:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8007e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f82a 	bl	8007eba <cal_crc>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        for (i = 0; i < 21; i++)
 8007e6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e70:	3301      	adds	r3, #1
 8007e72:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007e76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e7a:	2b14      	cmp	r3, #20
 8007e7c:	d9e7      	bls.n	8007e4e <validate_trimming_param+0x32>
        }

        crc = (crc ^ 0xFF);
 8007e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e82:	43db      	mvns	r3, r3
 8007e84:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8007e88:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	2030      	movs	r0, #48	@ 0x30
 8007e92:	f7fe fa12 	bl	80062ba <bmp3_get_regs>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (stored_crc != crc)
 8007e9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ea0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d002      	beq.n	8007eae <validate_trimming_param+0x92>
        {
            rslt = BMP3_TRIMMING_DATA_OUT_OF_BOUND;
 8007ea8:	2314      	movs	r3, #20
 8007eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    return rslt;
 8007eae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27

}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3728      	adds	r7, #40	@ 0x28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <cal_crc>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b085      	sub	sp, #20
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	460a      	mov	r2, r1
 8007ec4:	71fb      	strb	r3, [r7, #7]
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	71bb      	strb	r3, [r7, #6]
    int8_t poly = 0x1D;
 8007eca:	231d      	movs	r3, #29
 8007ecc:	737b      	strb	r3, [r7, #13]
    int8_t var2;
    uint8_t i;

    for (i = 0; i < 8; i++)
 8007ece:	2300      	movs	r3, #0
 8007ed0:	73bb      	strb	r3, [r7, #14]
 8007ed2:	e01c      	b.n	8007f0e <cal_crc+0x54>
    {
        if ((seed & 0x80) ^ (data & 0x80))
 8007ed4:	79fa      	ldrb	r2, [r7, #7]
 8007ed6:	79bb      	ldrb	r3, [r7, #6]
 8007ed8:	4053      	eors	r3, r2
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da02      	bge.n	8007ee8 <cal_crc+0x2e>
        {
            var2 = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	73fb      	strb	r3, [r7, #15]
 8007ee6:	e001      	b.n	8007eec <cal_crc+0x32>
        }
        else
        {
            var2 = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
        }

        seed = (seed & 0x7F) << 1;
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	005b      	lsls	r3, r3, #1
 8007ef0:	71fb      	strb	r3, [r7, #7]
        data = (data & 0x7F) << 1;
 8007ef2:	79bb      	ldrb	r3, [r7, #6]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	71bb      	strb	r3, [r7, #6]
        seed = seed ^ (uint8_t)(poly * var2);
 8007ef8:	7b7a      	ldrb	r2, [r7, #13]
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	fb12 f303 	smulbb	r3, r2, r3
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	79fb      	ldrb	r3, [r7, #7]
 8007f04:	4053      	eors	r3, r2
 8007f06:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < 8; i++)
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	73bb      	strb	r3, [r7, #14]
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b07      	cmp	r3, #7
 8007f12:	d9df      	bls.n	8007ed4 <cal_crc+0x1a>
    }

    return (int8_t)seed;
 8007f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <__cvt>:
 8007f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f28:	ec57 6b10 	vmov	r6, r7, d0
 8007f2c:	2f00      	cmp	r7, #0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4619      	mov	r1, r3
 8007f32:	463b      	mov	r3, r7
 8007f34:	bfbb      	ittet	lt
 8007f36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007f3a:	461f      	movlt	r7, r3
 8007f3c:	2300      	movge	r3, #0
 8007f3e:	232d      	movlt	r3, #45	@ 0x2d
 8007f40:	700b      	strb	r3, [r1, #0]
 8007f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007f48:	4691      	mov	r9, r2
 8007f4a:	f023 0820 	bic.w	r8, r3, #32
 8007f4e:	bfbc      	itt	lt
 8007f50:	4632      	movlt	r2, r6
 8007f52:	4616      	movlt	r6, r2
 8007f54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f58:	d005      	beq.n	8007f66 <__cvt+0x42>
 8007f5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007f5e:	d100      	bne.n	8007f62 <__cvt+0x3e>
 8007f60:	3401      	adds	r4, #1
 8007f62:	2102      	movs	r1, #2
 8007f64:	e000      	b.n	8007f68 <__cvt+0x44>
 8007f66:	2103      	movs	r1, #3
 8007f68:	ab03      	add	r3, sp, #12
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	ab02      	add	r3, sp, #8
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	ec47 6b10 	vmov	d0, r6, r7
 8007f74:	4653      	mov	r3, sl
 8007f76:	4622      	mov	r2, r4
 8007f78:	f001 f982 	bl	8009280 <_dtoa_r>
 8007f7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007f80:	4605      	mov	r5, r0
 8007f82:	d119      	bne.n	8007fb8 <__cvt+0x94>
 8007f84:	f019 0f01 	tst.w	r9, #1
 8007f88:	d00e      	beq.n	8007fa8 <__cvt+0x84>
 8007f8a:	eb00 0904 	add.w	r9, r0, r4
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2300      	movs	r3, #0
 8007f92:	4630      	mov	r0, r6
 8007f94:	4639      	mov	r1, r7
 8007f96:	f7f8 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f9a:	b108      	cbz	r0, 8007fa0 <__cvt+0x7c>
 8007f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fa0:	2230      	movs	r2, #48	@ 0x30
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	454b      	cmp	r3, r9
 8007fa6:	d31e      	bcc.n	8007fe6 <__cvt+0xc2>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fac:	1b5b      	subs	r3, r3, r5
 8007fae:	4628      	mov	r0, r5
 8007fb0:	6013      	str	r3, [r2, #0]
 8007fb2:	b004      	add	sp, #16
 8007fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007fbc:	eb00 0904 	add.w	r9, r0, r4
 8007fc0:	d1e5      	bne.n	8007f8e <__cvt+0x6a>
 8007fc2:	7803      	ldrb	r3, [r0, #0]
 8007fc4:	2b30      	cmp	r3, #48	@ 0x30
 8007fc6:	d10a      	bne.n	8007fde <__cvt+0xba>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd4:	b918      	cbnz	r0, 8007fde <__cvt+0xba>
 8007fd6:	f1c4 0401 	rsb	r4, r4, #1
 8007fda:	f8ca 4000 	str.w	r4, [sl]
 8007fde:	f8da 3000 	ldr.w	r3, [sl]
 8007fe2:	4499      	add	r9, r3
 8007fe4:	e7d3      	b.n	8007f8e <__cvt+0x6a>
 8007fe6:	1c59      	adds	r1, r3, #1
 8007fe8:	9103      	str	r1, [sp, #12]
 8007fea:	701a      	strb	r2, [r3, #0]
 8007fec:	e7d9      	b.n	8007fa2 <__cvt+0x7e>

08007fee <__exponent>:
 8007fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	bfba      	itte	lt
 8007ff4:	4249      	neglt	r1, r1
 8007ff6:	232d      	movlt	r3, #45	@ 0x2d
 8007ff8:	232b      	movge	r3, #43	@ 0x2b
 8007ffa:	2909      	cmp	r1, #9
 8007ffc:	7002      	strb	r2, [r0, #0]
 8007ffe:	7043      	strb	r3, [r0, #1]
 8008000:	dd29      	ble.n	8008056 <__exponent+0x68>
 8008002:	f10d 0307 	add.w	r3, sp, #7
 8008006:	461d      	mov	r5, r3
 8008008:	270a      	movs	r7, #10
 800800a:	461a      	mov	r2, r3
 800800c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008010:	fb07 1416 	mls	r4, r7, r6, r1
 8008014:	3430      	adds	r4, #48	@ 0x30
 8008016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800801a:	460c      	mov	r4, r1
 800801c:	2c63      	cmp	r4, #99	@ 0x63
 800801e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008022:	4631      	mov	r1, r6
 8008024:	dcf1      	bgt.n	800800a <__exponent+0x1c>
 8008026:	3130      	adds	r1, #48	@ 0x30
 8008028:	1e94      	subs	r4, r2, #2
 800802a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800802e:	1c41      	adds	r1, r0, #1
 8008030:	4623      	mov	r3, r4
 8008032:	42ab      	cmp	r3, r5
 8008034:	d30a      	bcc.n	800804c <__exponent+0x5e>
 8008036:	f10d 0309 	add.w	r3, sp, #9
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	42ac      	cmp	r4, r5
 800803e:	bf88      	it	hi
 8008040:	2300      	movhi	r3, #0
 8008042:	3302      	adds	r3, #2
 8008044:	4403      	add	r3, r0
 8008046:	1a18      	subs	r0, r3, r0
 8008048:	b003      	add	sp, #12
 800804a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800804c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008050:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008054:	e7ed      	b.n	8008032 <__exponent+0x44>
 8008056:	2330      	movs	r3, #48	@ 0x30
 8008058:	3130      	adds	r1, #48	@ 0x30
 800805a:	7083      	strb	r3, [r0, #2]
 800805c:	70c1      	strb	r1, [r0, #3]
 800805e:	1d03      	adds	r3, r0, #4
 8008060:	e7f1      	b.n	8008046 <__exponent+0x58>
	...

08008064 <_printf_float>:
 8008064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008068:	b08d      	sub	sp, #52	@ 0x34
 800806a:	460c      	mov	r4, r1
 800806c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008070:	4616      	mov	r6, r2
 8008072:	461f      	mov	r7, r3
 8008074:	4605      	mov	r5, r0
 8008076:	f000 ffed 	bl	8009054 <_localeconv_r>
 800807a:	6803      	ldr	r3, [r0, #0]
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	4618      	mov	r0, r3
 8008080:	f7f8 f8f6 	bl	8000270 <strlen>
 8008084:	2300      	movs	r3, #0
 8008086:	930a      	str	r3, [sp, #40]	@ 0x28
 8008088:	f8d8 3000 	ldr.w	r3, [r8]
 800808c:	9005      	str	r0, [sp, #20]
 800808e:	3307      	adds	r3, #7
 8008090:	f023 0307 	bic.w	r3, r3, #7
 8008094:	f103 0208 	add.w	r2, r3, #8
 8008098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800809c:	f8d4 b000 	ldr.w	fp, [r4]
 80080a0:	f8c8 2000 	str.w	r2, [r8]
 80080a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80080ac:	9307      	str	r3, [sp, #28]
 80080ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80080b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80080b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ba:	4b9c      	ldr	r3, [pc, #624]	@ (800832c <_printf_float+0x2c8>)
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295
 80080c0:	f7f8 fd34 	bl	8000b2c <__aeabi_dcmpun>
 80080c4:	bb70      	cbnz	r0, 8008124 <_printf_float+0xc0>
 80080c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ca:	4b98      	ldr	r3, [pc, #608]	@ (800832c <_printf_float+0x2c8>)
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295
 80080d0:	f7f8 fd0e 	bl	8000af0 <__aeabi_dcmple>
 80080d4:	bb30      	cbnz	r0, 8008124 <_printf_float+0xc0>
 80080d6:	2200      	movs	r2, #0
 80080d8:	2300      	movs	r3, #0
 80080da:	4640      	mov	r0, r8
 80080dc:	4649      	mov	r1, r9
 80080de:	f7f8 fcfd 	bl	8000adc <__aeabi_dcmplt>
 80080e2:	b110      	cbz	r0, 80080ea <_printf_float+0x86>
 80080e4:	232d      	movs	r3, #45	@ 0x2d
 80080e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080ea:	4a91      	ldr	r2, [pc, #580]	@ (8008330 <_printf_float+0x2cc>)
 80080ec:	4b91      	ldr	r3, [pc, #580]	@ (8008334 <_printf_float+0x2d0>)
 80080ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80080f2:	bf8c      	ite	hi
 80080f4:	4690      	movhi	r8, r2
 80080f6:	4698      	movls	r8, r3
 80080f8:	2303      	movs	r3, #3
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	f02b 0304 	bic.w	r3, fp, #4
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	f04f 0900 	mov.w	r9, #0
 8008106:	9700      	str	r7, [sp, #0]
 8008108:	4633      	mov	r3, r6
 800810a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f9d2 	bl	80084b8 <_printf_common>
 8008114:	3001      	adds	r0, #1
 8008116:	f040 808d 	bne.w	8008234 <_printf_float+0x1d0>
 800811a:	f04f 30ff 	mov.w	r0, #4294967295
 800811e:	b00d      	add	sp, #52	@ 0x34
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 fcfe 	bl	8000b2c <__aeabi_dcmpun>
 8008130:	b140      	cbz	r0, 8008144 <_printf_float+0xe0>
 8008132:	464b      	mov	r3, r9
 8008134:	2b00      	cmp	r3, #0
 8008136:	bfbc      	itt	lt
 8008138:	232d      	movlt	r3, #45	@ 0x2d
 800813a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800813e:	4a7e      	ldr	r2, [pc, #504]	@ (8008338 <_printf_float+0x2d4>)
 8008140:	4b7e      	ldr	r3, [pc, #504]	@ (800833c <_printf_float+0x2d8>)
 8008142:	e7d4      	b.n	80080ee <_printf_float+0x8a>
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800814a:	9206      	str	r2, [sp, #24]
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	d13b      	bne.n	80081c8 <_printf_float+0x164>
 8008150:	2306      	movs	r3, #6
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008158:	2300      	movs	r3, #0
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008164:	ab09      	add	r3, sp, #36	@ 0x24
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	6861      	ldr	r1, [r4, #4]
 800816a:	ec49 8b10 	vmov	d0, r8, r9
 800816e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008172:	4628      	mov	r0, r5
 8008174:	f7ff fed6 	bl	8007f24 <__cvt>
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800817c:	2b47      	cmp	r3, #71	@ 0x47
 800817e:	4680      	mov	r8, r0
 8008180:	d129      	bne.n	80081d6 <_printf_float+0x172>
 8008182:	1cc8      	adds	r0, r1, #3
 8008184:	db02      	blt.n	800818c <_printf_float+0x128>
 8008186:	6863      	ldr	r3, [r4, #4]
 8008188:	4299      	cmp	r1, r3
 800818a:	dd41      	ble.n	8008210 <_printf_float+0x1ac>
 800818c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008190:	fa5f fa8a 	uxtb.w	sl, sl
 8008194:	3901      	subs	r1, #1
 8008196:	4652      	mov	r2, sl
 8008198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800819c:	9109      	str	r1, [sp, #36]	@ 0x24
 800819e:	f7ff ff26 	bl	8007fee <__exponent>
 80081a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081a4:	1813      	adds	r3, r2, r0
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	4681      	mov	r9, r0
 80081aa:	6123      	str	r3, [r4, #16]
 80081ac:	dc02      	bgt.n	80081b4 <_printf_float+0x150>
 80081ae:	6822      	ldr	r2, [r4, #0]
 80081b0:	07d2      	lsls	r2, r2, #31
 80081b2:	d501      	bpl.n	80081b8 <_printf_float+0x154>
 80081b4:	3301      	adds	r3, #1
 80081b6:	6123      	str	r3, [r4, #16]
 80081b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0a2      	beq.n	8008106 <_printf_float+0xa2>
 80081c0:	232d      	movs	r3, #45	@ 0x2d
 80081c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c6:	e79e      	b.n	8008106 <_printf_float+0xa2>
 80081c8:	9a06      	ldr	r2, [sp, #24]
 80081ca:	2a47      	cmp	r2, #71	@ 0x47
 80081cc:	d1c2      	bne.n	8008154 <_printf_float+0xf0>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1c0      	bne.n	8008154 <_printf_float+0xf0>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e7bd      	b.n	8008152 <_printf_float+0xee>
 80081d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081da:	d9db      	bls.n	8008194 <_printf_float+0x130>
 80081dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80081e0:	d118      	bne.n	8008214 <_printf_float+0x1b0>
 80081e2:	2900      	cmp	r1, #0
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	dd0b      	ble.n	8008200 <_printf_float+0x19c>
 80081e8:	6121      	str	r1, [r4, #16]
 80081ea:	b913      	cbnz	r3, 80081f2 <_printf_float+0x18e>
 80081ec:	6822      	ldr	r2, [r4, #0]
 80081ee:	07d0      	lsls	r0, r2, #31
 80081f0:	d502      	bpl.n	80081f8 <_printf_float+0x194>
 80081f2:	3301      	adds	r3, #1
 80081f4:	440b      	add	r3, r1
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80081fa:	f04f 0900 	mov.w	r9, #0
 80081fe:	e7db      	b.n	80081b8 <_printf_float+0x154>
 8008200:	b913      	cbnz	r3, 8008208 <_printf_float+0x1a4>
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	07d2      	lsls	r2, r2, #31
 8008206:	d501      	bpl.n	800820c <_printf_float+0x1a8>
 8008208:	3302      	adds	r3, #2
 800820a:	e7f4      	b.n	80081f6 <_printf_float+0x192>
 800820c:	2301      	movs	r3, #1
 800820e:	e7f2      	b.n	80081f6 <_printf_float+0x192>
 8008210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008216:	4299      	cmp	r1, r3
 8008218:	db05      	blt.n	8008226 <_printf_float+0x1c2>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6121      	str	r1, [r4, #16]
 800821e:	07d8      	lsls	r0, r3, #31
 8008220:	d5ea      	bpl.n	80081f8 <_printf_float+0x194>
 8008222:	1c4b      	adds	r3, r1, #1
 8008224:	e7e7      	b.n	80081f6 <_printf_float+0x192>
 8008226:	2900      	cmp	r1, #0
 8008228:	bfd4      	ite	le
 800822a:	f1c1 0202 	rsble	r2, r1, #2
 800822e:	2201      	movgt	r2, #1
 8008230:	4413      	add	r3, r2
 8008232:	e7e0      	b.n	80081f6 <_printf_float+0x192>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	055a      	lsls	r2, r3, #21
 8008238:	d407      	bmi.n	800824a <_printf_float+0x1e6>
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	4642      	mov	r2, r8
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d12b      	bne.n	80082a0 <_printf_float+0x23c>
 8008248:	e767      	b.n	800811a <_printf_float+0xb6>
 800824a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800824e:	f240 80dd 	bls.w	800840c <_printf_float+0x3a8>
 8008252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008256:	2200      	movs	r2, #0
 8008258:	2300      	movs	r3, #0
 800825a:	f7f8 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800825e:	2800      	cmp	r0, #0
 8008260:	d033      	beq.n	80082ca <_printf_float+0x266>
 8008262:	4a37      	ldr	r2, [pc, #220]	@ (8008340 <_printf_float+0x2dc>)
 8008264:	2301      	movs	r3, #1
 8008266:	4631      	mov	r1, r6
 8008268:	4628      	mov	r0, r5
 800826a:	47b8      	blx	r7
 800826c:	3001      	adds	r0, #1
 800826e:	f43f af54 	beq.w	800811a <_printf_float+0xb6>
 8008272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008276:	4543      	cmp	r3, r8
 8008278:	db02      	blt.n	8008280 <_printf_float+0x21c>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	07d8      	lsls	r0, r3, #31
 800827e:	d50f      	bpl.n	80082a0 <_printf_float+0x23c>
 8008280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f af45 	beq.w	800811a <_printf_float+0xb6>
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	f108 38ff 	add.w	r8, r8, #4294967295
 8008298:	f104 0a1a 	add.w	sl, r4, #26
 800829c:	45c8      	cmp	r8, r9
 800829e:	dc09      	bgt.n	80082b4 <_printf_float+0x250>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	079b      	lsls	r3, r3, #30
 80082a4:	f100 8103 	bmi.w	80084ae <_printf_float+0x44a>
 80082a8:	68e0      	ldr	r0, [r4, #12]
 80082aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082ac:	4298      	cmp	r0, r3
 80082ae:	bfb8      	it	lt
 80082b0:	4618      	movlt	r0, r3
 80082b2:	e734      	b.n	800811e <_printf_float+0xba>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4652      	mov	r2, sl
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f af2b 	beq.w	800811a <_printf_float+0xb6>
 80082c4:	f109 0901 	add.w	r9, r9, #1
 80082c8:	e7e8      	b.n	800829c <_printf_float+0x238>
 80082ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dc39      	bgt.n	8008344 <_printf_float+0x2e0>
 80082d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008340 <_printf_float+0x2dc>)
 80082d2:	2301      	movs	r3, #1
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	f43f af1d 	beq.w	800811a <_printf_float+0xb6>
 80082e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80082e4:	ea59 0303 	orrs.w	r3, r9, r3
 80082e8:	d102      	bne.n	80082f0 <_printf_float+0x28c>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	07d9      	lsls	r1, r3, #31
 80082ee:	d5d7      	bpl.n	80082a0 <_printf_float+0x23c>
 80082f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082f4:	4631      	mov	r1, r6
 80082f6:	4628      	mov	r0, r5
 80082f8:	47b8      	blx	r7
 80082fa:	3001      	adds	r0, #1
 80082fc:	f43f af0d 	beq.w	800811a <_printf_float+0xb6>
 8008300:	f04f 0a00 	mov.w	sl, #0
 8008304:	f104 0b1a 	add.w	fp, r4, #26
 8008308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830a:	425b      	negs	r3, r3
 800830c:	4553      	cmp	r3, sl
 800830e:	dc01      	bgt.n	8008314 <_printf_float+0x2b0>
 8008310:	464b      	mov	r3, r9
 8008312:	e793      	b.n	800823c <_printf_float+0x1d8>
 8008314:	2301      	movs	r3, #1
 8008316:	465a      	mov	r2, fp
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f aefb 	beq.w	800811a <_printf_float+0xb6>
 8008324:	f10a 0a01 	add.w	sl, sl, #1
 8008328:	e7ee      	b.n	8008308 <_printf_float+0x2a4>
 800832a:	bf00      	nop
 800832c:	7fefffff 	.word	0x7fefffff
 8008330:	0800ca0c 	.word	0x0800ca0c
 8008334:	0800ca08 	.word	0x0800ca08
 8008338:	0800ca14 	.word	0x0800ca14
 800833c:	0800ca10 	.word	0x0800ca10
 8008340:	0800ca18 	.word	0x0800ca18
 8008344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800834a:	4553      	cmp	r3, sl
 800834c:	bfa8      	it	ge
 800834e:	4653      	movge	r3, sl
 8008350:	2b00      	cmp	r3, #0
 8008352:	4699      	mov	r9, r3
 8008354:	dc36      	bgt.n	80083c4 <_printf_float+0x360>
 8008356:	f04f 0b00 	mov.w	fp, #0
 800835a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800835e:	f104 021a 	add.w	r2, r4, #26
 8008362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008364:	9306      	str	r3, [sp, #24]
 8008366:	eba3 0309 	sub.w	r3, r3, r9
 800836a:	455b      	cmp	r3, fp
 800836c:	dc31      	bgt.n	80083d2 <_printf_float+0x36e>
 800836e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008370:	459a      	cmp	sl, r3
 8008372:	dc3a      	bgt.n	80083ea <_printf_float+0x386>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	07da      	lsls	r2, r3, #31
 8008378:	d437      	bmi.n	80083ea <_printf_float+0x386>
 800837a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800837c:	ebaa 0903 	sub.w	r9, sl, r3
 8008380:	9b06      	ldr	r3, [sp, #24]
 8008382:	ebaa 0303 	sub.w	r3, sl, r3
 8008386:	4599      	cmp	r9, r3
 8008388:	bfa8      	it	ge
 800838a:	4699      	movge	r9, r3
 800838c:	f1b9 0f00 	cmp.w	r9, #0
 8008390:	dc33      	bgt.n	80083fa <_printf_float+0x396>
 8008392:	f04f 0800 	mov.w	r8, #0
 8008396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800839a:	f104 0b1a 	add.w	fp, r4, #26
 800839e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a0:	ebaa 0303 	sub.w	r3, sl, r3
 80083a4:	eba3 0309 	sub.w	r3, r3, r9
 80083a8:	4543      	cmp	r3, r8
 80083aa:	f77f af79 	ble.w	80082a0 <_printf_float+0x23c>
 80083ae:	2301      	movs	r3, #1
 80083b0:	465a      	mov	r2, fp
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	f43f aeae 	beq.w	800811a <_printf_float+0xb6>
 80083be:	f108 0801 	add.w	r8, r8, #1
 80083c2:	e7ec      	b.n	800839e <_printf_float+0x33a>
 80083c4:	4642      	mov	r2, r8
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	47b8      	blx	r7
 80083cc:	3001      	adds	r0, #1
 80083ce:	d1c2      	bne.n	8008356 <_printf_float+0x2f2>
 80083d0:	e6a3      	b.n	800811a <_printf_float+0xb6>
 80083d2:	2301      	movs	r3, #1
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	9206      	str	r2, [sp, #24]
 80083da:	47b8      	blx	r7
 80083dc:	3001      	adds	r0, #1
 80083de:	f43f ae9c 	beq.w	800811a <_printf_float+0xb6>
 80083e2:	9a06      	ldr	r2, [sp, #24]
 80083e4:	f10b 0b01 	add.w	fp, fp, #1
 80083e8:	e7bb      	b.n	8008362 <_printf_float+0x2fe>
 80083ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b8      	blx	r7
 80083f4:	3001      	adds	r0, #1
 80083f6:	d1c0      	bne.n	800837a <_printf_float+0x316>
 80083f8:	e68f      	b.n	800811a <_printf_float+0xb6>
 80083fa:	9a06      	ldr	r2, [sp, #24]
 80083fc:	464b      	mov	r3, r9
 80083fe:	4442      	add	r2, r8
 8008400:	4631      	mov	r1, r6
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	d1c3      	bne.n	8008392 <_printf_float+0x32e>
 800840a:	e686      	b.n	800811a <_printf_float+0xb6>
 800840c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008410:	f1ba 0f01 	cmp.w	sl, #1
 8008414:	dc01      	bgt.n	800841a <_printf_float+0x3b6>
 8008416:	07db      	lsls	r3, r3, #31
 8008418:	d536      	bpl.n	8008488 <_printf_float+0x424>
 800841a:	2301      	movs	r3, #1
 800841c:	4642      	mov	r2, r8
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f ae78 	beq.w	800811a <_printf_float+0xb6>
 800842a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800842e:	4631      	mov	r1, r6
 8008430:	4628      	mov	r0, r5
 8008432:	47b8      	blx	r7
 8008434:	3001      	adds	r0, #1
 8008436:	f43f ae70 	beq.w	800811a <_printf_float+0xb6>
 800843a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008446:	f7f8 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800844a:	b9c0      	cbnz	r0, 800847e <_printf_float+0x41a>
 800844c:	4653      	mov	r3, sl
 800844e:	f108 0201 	add.w	r2, r8, #1
 8008452:	4631      	mov	r1, r6
 8008454:	4628      	mov	r0, r5
 8008456:	47b8      	blx	r7
 8008458:	3001      	adds	r0, #1
 800845a:	d10c      	bne.n	8008476 <_printf_float+0x412>
 800845c:	e65d      	b.n	800811a <_printf_float+0xb6>
 800845e:	2301      	movs	r3, #1
 8008460:	465a      	mov	r2, fp
 8008462:	4631      	mov	r1, r6
 8008464:	4628      	mov	r0, r5
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	f43f ae56 	beq.w	800811a <_printf_float+0xb6>
 800846e:	f108 0801 	add.w	r8, r8, #1
 8008472:	45d0      	cmp	r8, sl
 8008474:	dbf3      	blt.n	800845e <_printf_float+0x3fa>
 8008476:	464b      	mov	r3, r9
 8008478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800847c:	e6df      	b.n	800823e <_printf_float+0x1da>
 800847e:	f04f 0800 	mov.w	r8, #0
 8008482:	f104 0b1a 	add.w	fp, r4, #26
 8008486:	e7f4      	b.n	8008472 <_printf_float+0x40e>
 8008488:	2301      	movs	r3, #1
 800848a:	4642      	mov	r2, r8
 800848c:	e7e1      	b.n	8008452 <_printf_float+0x3ee>
 800848e:	2301      	movs	r3, #1
 8008490:	464a      	mov	r2, r9
 8008492:	4631      	mov	r1, r6
 8008494:	4628      	mov	r0, r5
 8008496:	47b8      	blx	r7
 8008498:	3001      	adds	r0, #1
 800849a:	f43f ae3e 	beq.w	800811a <_printf_float+0xb6>
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	68e3      	ldr	r3, [r4, #12]
 80084a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80084a6:	1a5b      	subs	r3, r3, r1
 80084a8:	4543      	cmp	r3, r8
 80084aa:	dcf0      	bgt.n	800848e <_printf_float+0x42a>
 80084ac:	e6fc      	b.n	80082a8 <_printf_float+0x244>
 80084ae:	f04f 0800 	mov.w	r8, #0
 80084b2:	f104 0919 	add.w	r9, r4, #25
 80084b6:	e7f4      	b.n	80084a2 <_printf_float+0x43e>

080084b8 <_printf_common>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	4616      	mov	r6, r2
 80084be:	4698      	mov	r8, r3
 80084c0:	688a      	ldr	r2, [r1, #8]
 80084c2:	690b      	ldr	r3, [r1, #16]
 80084c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084c8:	4293      	cmp	r3, r2
 80084ca:	bfb8      	it	lt
 80084cc:	4613      	movlt	r3, r2
 80084ce:	6033      	str	r3, [r6, #0]
 80084d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084d4:	4607      	mov	r7, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	b10a      	cbz	r2, 80084de <_printf_common+0x26>
 80084da:	3301      	adds	r3, #1
 80084dc:	6033      	str	r3, [r6, #0]
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	0699      	lsls	r1, r3, #26
 80084e2:	bf42      	ittt	mi
 80084e4:	6833      	ldrmi	r3, [r6, #0]
 80084e6:	3302      	addmi	r3, #2
 80084e8:	6033      	strmi	r3, [r6, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	f015 0506 	ands.w	r5, r5, #6
 80084f0:	d106      	bne.n	8008500 <_printf_common+0x48>
 80084f2:	f104 0a19 	add.w	sl, r4, #25
 80084f6:	68e3      	ldr	r3, [r4, #12]
 80084f8:	6832      	ldr	r2, [r6, #0]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	42ab      	cmp	r3, r5
 80084fe:	dc26      	bgt.n	800854e <_printf_common+0x96>
 8008500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	3b00      	subs	r3, #0
 8008508:	bf18      	it	ne
 800850a:	2301      	movne	r3, #1
 800850c:	0692      	lsls	r2, r2, #26
 800850e:	d42b      	bmi.n	8008568 <_printf_common+0xb0>
 8008510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008514:	4641      	mov	r1, r8
 8008516:	4638      	mov	r0, r7
 8008518:	47c8      	blx	r9
 800851a:	3001      	adds	r0, #1
 800851c:	d01e      	beq.n	800855c <_printf_common+0xa4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	6922      	ldr	r2, [r4, #16]
 8008522:	f003 0306 	and.w	r3, r3, #6
 8008526:	2b04      	cmp	r3, #4
 8008528:	bf02      	ittt	eq
 800852a:	68e5      	ldreq	r5, [r4, #12]
 800852c:	6833      	ldreq	r3, [r6, #0]
 800852e:	1aed      	subeq	r5, r5, r3
 8008530:	68a3      	ldr	r3, [r4, #8]
 8008532:	bf0c      	ite	eq
 8008534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008538:	2500      	movne	r5, #0
 800853a:	4293      	cmp	r3, r2
 800853c:	bfc4      	itt	gt
 800853e:	1a9b      	subgt	r3, r3, r2
 8008540:	18ed      	addgt	r5, r5, r3
 8008542:	2600      	movs	r6, #0
 8008544:	341a      	adds	r4, #26
 8008546:	42b5      	cmp	r5, r6
 8008548:	d11a      	bne.n	8008580 <_printf_common+0xc8>
 800854a:	2000      	movs	r0, #0
 800854c:	e008      	b.n	8008560 <_printf_common+0xa8>
 800854e:	2301      	movs	r3, #1
 8008550:	4652      	mov	r2, sl
 8008552:	4641      	mov	r1, r8
 8008554:	4638      	mov	r0, r7
 8008556:	47c8      	blx	r9
 8008558:	3001      	adds	r0, #1
 800855a:	d103      	bne.n	8008564 <_printf_common+0xac>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008564:	3501      	adds	r5, #1
 8008566:	e7c6      	b.n	80084f6 <_printf_common+0x3e>
 8008568:	18e1      	adds	r1, r4, r3
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	2030      	movs	r0, #48	@ 0x30
 800856e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008572:	4422      	add	r2, r4
 8008574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800857c:	3302      	adds	r3, #2
 800857e:	e7c7      	b.n	8008510 <_printf_common+0x58>
 8008580:	2301      	movs	r3, #1
 8008582:	4622      	mov	r2, r4
 8008584:	4641      	mov	r1, r8
 8008586:	4638      	mov	r0, r7
 8008588:	47c8      	blx	r9
 800858a:	3001      	adds	r0, #1
 800858c:	d0e6      	beq.n	800855c <_printf_common+0xa4>
 800858e:	3601      	adds	r6, #1
 8008590:	e7d9      	b.n	8008546 <_printf_common+0x8e>
	...

08008594 <_printf_i>:
 8008594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	7e0f      	ldrb	r7, [r1, #24]
 800859a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800859c:	2f78      	cmp	r7, #120	@ 0x78
 800859e:	4691      	mov	r9, r2
 80085a0:	4680      	mov	r8, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	469a      	mov	sl, r3
 80085a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085aa:	d807      	bhi.n	80085bc <_printf_i+0x28>
 80085ac:	2f62      	cmp	r7, #98	@ 0x62
 80085ae:	d80a      	bhi.n	80085c6 <_printf_i+0x32>
 80085b0:	2f00      	cmp	r7, #0
 80085b2:	f000 80d1 	beq.w	8008758 <_printf_i+0x1c4>
 80085b6:	2f58      	cmp	r7, #88	@ 0x58
 80085b8:	f000 80b8 	beq.w	800872c <_printf_i+0x198>
 80085bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085c4:	e03a      	b.n	800863c <_printf_i+0xa8>
 80085c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ca:	2b15      	cmp	r3, #21
 80085cc:	d8f6      	bhi.n	80085bc <_printf_i+0x28>
 80085ce:	a101      	add	r1, pc, #4	@ (adr r1, 80085d4 <_printf_i+0x40>)
 80085d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085d4:	0800862d 	.word	0x0800862d
 80085d8:	08008641 	.word	0x08008641
 80085dc:	080085bd 	.word	0x080085bd
 80085e0:	080085bd 	.word	0x080085bd
 80085e4:	080085bd 	.word	0x080085bd
 80085e8:	080085bd 	.word	0x080085bd
 80085ec:	08008641 	.word	0x08008641
 80085f0:	080085bd 	.word	0x080085bd
 80085f4:	080085bd 	.word	0x080085bd
 80085f8:	080085bd 	.word	0x080085bd
 80085fc:	080085bd 	.word	0x080085bd
 8008600:	0800873f 	.word	0x0800873f
 8008604:	0800866b 	.word	0x0800866b
 8008608:	080086f9 	.word	0x080086f9
 800860c:	080085bd 	.word	0x080085bd
 8008610:	080085bd 	.word	0x080085bd
 8008614:	08008761 	.word	0x08008761
 8008618:	080085bd 	.word	0x080085bd
 800861c:	0800866b 	.word	0x0800866b
 8008620:	080085bd 	.word	0x080085bd
 8008624:	080085bd 	.word	0x080085bd
 8008628:	08008701 	.word	0x08008701
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	1d1a      	adds	r2, r3, #4
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6032      	str	r2, [r6, #0]
 8008634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800863c:	2301      	movs	r3, #1
 800863e:	e09c      	b.n	800877a <_printf_i+0x1e6>
 8008640:	6833      	ldr	r3, [r6, #0]
 8008642:	6820      	ldr	r0, [r4, #0]
 8008644:	1d19      	adds	r1, r3, #4
 8008646:	6031      	str	r1, [r6, #0]
 8008648:	0606      	lsls	r6, r0, #24
 800864a:	d501      	bpl.n	8008650 <_printf_i+0xbc>
 800864c:	681d      	ldr	r5, [r3, #0]
 800864e:	e003      	b.n	8008658 <_printf_i+0xc4>
 8008650:	0645      	lsls	r5, r0, #25
 8008652:	d5fb      	bpl.n	800864c <_printf_i+0xb8>
 8008654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008658:	2d00      	cmp	r5, #0
 800865a:	da03      	bge.n	8008664 <_printf_i+0xd0>
 800865c:	232d      	movs	r3, #45	@ 0x2d
 800865e:	426d      	negs	r5, r5
 8008660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008664:	4858      	ldr	r0, [pc, #352]	@ (80087c8 <_printf_i+0x234>)
 8008666:	230a      	movs	r3, #10
 8008668:	e011      	b.n	800868e <_printf_i+0xfa>
 800866a:	6821      	ldr	r1, [r4, #0]
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	0608      	lsls	r0, r1, #24
 8008670:	f853 5b04 	ldr.w	r5, [r3], #4
 8008674:	d402      	bmi.n	800867c <_printf_i+0xe8>
 8008676:	0649      	lsls	r1, r1, #25
 8008678:	bf48      	it	mi
 800867a:	b2ad      	uxthmi	r5, r5
 800867c:	2f6f      	cmp	r7, #111	@ 0x6f
 800867e:	4852      	ldr	r0, [pc, #328]	@ (80087c8 <_printf_i+0x234>)
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	bf14      	ite	ne
 8008684:	230a      	movne	r3, #10
 8008686:	2308      	moveq	r3, #8
 8008688:	2100      	movs	r1, #0
 800868a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800868e:	6866      	ldr	r6, [r4, #4]
 8008690:	60a6      	str	r6, [r4, #8]
 8008692:	2e00      	cmp	r6, #0
 8008694:	db05      	blt.n	80086a2 <_printf_i+0x10e>
 8008696:	6821      	ldr	r1, [r4, #0]
 8008698:	432e      	orrs	r6, r5
 800869a:	f021 0104 	bic.w	r1, r1, #4
 800869e:	6021      	str	r1, [r4, #0]
 80086a0:	d04b      	beq.n	800873a <_printf_i+0x1a6>
 80086a2:	4616      	mov	r6, r2
 80086a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80086a8:	fb03 5711 	mls	r7, r3, r1, r5
 80086ac:	5dc7      	ldrb	r7, [r0, r7]
 80086ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086b2:	462f      	mov	r7, r5
 80086b4:	42bb      	cmp	r3, r7
 80086b6:	460d      	mov	r5, r1
 80086b8:	d9f4      	bls.n	80086a4 <_printf_i+0x110>
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d10b      	bne.n	80086d6 <_printf_i+0x142>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	07df      	lsls	r7, r3, #31
 80086c2:	d508      	bpl.n	80086d6 <_printf_i+0x142>
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	6861      	ldr	r1, [r4, #4]
 80086c8:	4299      	cmp	r1, r3
 80086ca:	bfde      	ittt	le
 80086cc:	2330      	movle	r3, #48	@ 0x30
 80086ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086d6:	1b92      	subs	r2, r2, r6
 80086d8:	6122      	str	r2, [r4, #16]
 80086da:	f8cd a000 	str.w	sl, [sp]
 80086de:	464b      	mov	r3, r9
 80086e0:	aa03      	add	r2, sp, #12
 80086e2:	4621      	mov	r1, r4
 80086e4:	4640      	mov	r0, r8
 80086e6:	f7ff fee7 	bl	80084b8 <_printf_common>
 80086ea:	3001      	adds	r0, #1
 80086ec:	d14a      	bne.n	8008784 <_printf_i+0x1f0>
 80086ee:	f04f 30ff 	mov.w	r0, #4294967295
 80086f2:	b004      	add	sp, #16
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	f043 0320 	orr.w	r3, r3, #32
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	4832      	ldr	r0, [pc, #200]	@ (80087cc <_printf_i+0x238>)
 8008702:	2778      	movs	r7, #120	@ 0x78
 8008704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	6831      	ldr	r1, [r6, #0]
 800870c:	061f      	lsls	r7, r3, #24
 800870e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008712:	d402      	bmi.n	800871a <_printf_i+0x186>
 8008714:	065f      	lsls	r7, r3, #25
 8008716:	bf48      	it	mi
 8008718:	b2ad      	uxthmi	r5, r5
 800871a:	6031      	str	r1, [r6, #0]
 800871c:	07d9      	lsls	r1, r3, #31
 800871e:	bf44      	itt	mi
 8008720:	f043 0320 	orrmi.w	r3, r3, #32
 8008724:	6023      	strmi	r3, [r4, #0]
 8008726:	b11d      	cbz	r5, 8008730 <_printf_i+0x19c>
 8008728:	2310      	movs	r3, #16
 800872a:	e7ad      	b.n	8008688 <_printf_i+0xf4>
 800872c:	4826      	ldr	r0, [pc, #152]	@ (80087c8 <_printf_i+0x234>)
 800872e:	e7e9      	b.n	8008704 <_printf_i+0x170>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	f023 0320 	bic.w	r3, r3, #32
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	e7f6      	b.n	8008728 <_printf_i+0x194>
 800873a:	4616      	mov	r6, r2
 800873c:	e7bd      	b.n	80086ba <_printf_i+0x126>
 800873e:	6833      	ldr	r3, [r6, #0]
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	6961      	ldr	r1, [r4, #20]
 8008744:	1d18      	adds	r0, r3, #4
 8008746:	6030      	str	r0, [r6, #0]
 8008748:	062e      	lsls	r6, r5, #24
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	d501      	bpl.n	8008752 <_printf_i+0x1be>
 800874e:	6019      	str	r1, [r3, #0]
 8008750:	e002      	b.n	8008758 <_printf_i+0x1c4>
 8008752:	0668      	lsls	r0, r5, #25
 8008754:	d5fb      	bpl.n	800874e <_printf_i+0x1ba>
 8008756:	8019      	strh	r1, [r3, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	6123      	str	r3, [r4, #16]
 800875c:	4616      	mov	r6, r2
 800875e:	e7bc      	b.n	80086da <_printf_i+0x146>
 8008760:	6833      	ldr	r3, [r6, #0]
 8008762:	1d1a      	adds	r2, r3, #4
 8008764:	6032      	str	r2, [r6, #0]
 8008766:	681e      	ldr	r6, [r3, #0]
 8008768:	6862      	ldr	r2, [r4, #4]
 800876a:	2100      	movs	r1, #0
 800876c:	4630      	mov	r0, r6
 800876e:	f7f7 fd2f 	bl	80001d0 <memchr>
 8008772:	b108      	cbz	r0, 8008778 <_printf_i+0x1e4>
 8008774:	1b80      	subs	r0, r0, r6
 8008776:	6060      	str	r0, [r4, #4]
 8008778:	6863      	ldr	r3, [r4, #4]
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	2300      	movs	r3, #0
 800877e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008782:	e7aa      	b.n	80086da <_printf_i+0x146>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	4632      	mov	r2, r6
 8008788:	4649      	mov	r1, r9
 800878a:	4640      	mov	r0, r8
 800878c:	47d0      	blx	sl
 800878e:	3001      	adds	r0, #1
 8008790:	d0ad      	beq.n	80086ee <_printf_i+0x15a>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	079b      	lsls	r3, r3, #30
 8008796:	d413      	bmi.n	80087c0 <_printf_i+0x22c>
 8008798:	68e0      	ldr	r0, [r4, #12]
 800879a:	9b03      	ldr	r3, [sp, #12]
 800879c:	4298      	cmp	r0, r3
 800879e:	bfb8      	it	lt
 80087a0:	4618      	movlt	r0, r3
 80087a2:	e7a6      	b.n	80086f2 <_printf_i+0x15e>
 80087a4:	2301      	movs	r3, #1
 80087a6:	4632      	mov	r2, r6
 80087a8:	4649      	mov	r1, r9
 80087aa:	4640      	mov	r0, r8
 80087ac:	47d0      	blx	sl
 80087ae:	3001      	adds	r0, #1
 80087b0:	d09d      	beq.n	80086ee <_printf_i+0x15a>
 80087b2:	3501      	adds	r5, #1
 80087b4:	68e3      	ldr	r3, [r4, #12]
 80087b6:	9903      	ldr	r1, [sp, #12]
 80087b8:	1a5b      	subs	r3, r3, r1
 80087ba:	42ab      	cmp	r3, r5
 80087bc:	dcf2      	bgt.n	80087a4 <_printf_i+0x210>
 80087be:	e7eb      	b.n	8008798 <_printf_i+0x204>
 80087c0:	2500      	movs	r5, #0
 80087c2:	f104 0619 	add.w	r6, r4, #25
 80087c6:	e7f5      	b.n	80087b4 <_printf_i+0x220>
 80087c8:	0800ca1a 	.word	0x0800ca1a
 80087cc:	0800ca2b 	.word	0x0800ca2b

080087d0 <_scanf_float>:
 80087d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d4:	b087      	sub	sp, #28
 80087d6:	4691      	mov	r9, r2
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	688b      	ldr	r3, [r1, #8]
 80087dc:	1e5a      	subs	r2, r3, #1
 80087de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80087e2:	bf81      	itttt	hi
 80087e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80087e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80087ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80087f0:	608b      	strhi	r3, [r1, #8]
 80087f2:	680b      	ldr	r3, [r1, #0]
 80087f4:	460a      	mov	r2, r1
 80087f6:	f04f 0500 	mov.w	r5, #0
 80087fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80087fe:	f842 3b1c 	str.w	r3, [r2], #28
 8008802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008806:	4680      	mov	r8, r0
 8008808:	460c      	mov	r4, r1
 800880a:	bf98      	it	ls
 800880c:	f04f 0b00 	movls.w	fp, #0
 8008810:	9201      	str	r2, [sp, #4]
 8008812:	4616      	mov	r6, r2
 8008814:	46aa      	mov	sl, r5
 8008816:	462f      	mov	r7, r5
 8008818:	9502      	str	r5, [sp, #8]
 800881a:	68a2      	ldr	r2, [r4, #8]
 800881c:	b15a      	cbz	r2, 8008836 <_scanf_float+0x66>
 800881e:	f8d9 3000 	ldr.w	r3, [r9]
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b4e      	cmp	r3, #78	@ 0x4e
 8008826:	d863      	bhi.n	80088f0 <_scanf_float+0x120>
 8008828:	2b40      	cmp	r3, #64	@ 0x40
 800882a:	d83b      	bhi.n	80088a4 <_scanf_float+0xd4>
 800882c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008830:	b2c8      	uxtb	r0, r1
 8008832:	280e      	cmp	r0, #14
 8008834:	d939      	bls.n	80088aa <_scanf_float+0xda>
 8008836:	b11f      	cbz	r7, 8008840 <_scanf_float+0x70>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008844:	f1ba 0f01 	cmp.w	sl, #1
 8008848:	f200 8114 	bhi.w	8008a74 <_scanf_float+0x2a4>
 800884c:	9b01      	ldr	r3, [sp, #4]
 800884e:	429e      	cmp	r6, r3
 8008850:	f200 8105 	bhi.w	8008a5e <_scanf_float+0x28e>
 8008854:	2001      	movs	r0, #1
 8008856:	b007      	add	sp, #28
 8008858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800885c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008860:	2a0d      	cmp	r2, #13
 8008862:	d8e8      	bhi.n	8008836 <_scanf_float+0x66>
 8008864:	a101      	add	r1, pc, #4	@ (adr r1, 800886c <_scanf_float+0x9c>)
 8008866:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800886a:	bf00      	nop
 800886c:	080089b5 	.word	0x080089b5
 8008870:	08008837 	.word	0x08008837
 8008874:	08008837 	.word	0x08008837
 8008878:	08008837 	.word	0x08008837
 800887c:	08008a11 	.word	0x08008a11
 8008880:	080089eb 	.word	0x080089eb
 8008884:	08008837 	.word	0x08008837
 8008888:	08008837 	.word	0x08008837
 800888c:	080089c3 	.word	0x080089c3
 8008890:	08008837 	.word	0x08008837
 8008894:	08008837 	.word	0x08008837
 8008898:	08008837 	.word	0x08008837
 800889c:	08008837 	.word	0x08008837
 80088a0:	0800897f 	.word	0x0800897f
 80088a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80088a8:	e7da      	b.n	8008860 <_scanf_float+0x90>
 80088aa:	290e      	cmp	r1, #14
 80088ac:	d8c3      	bhi.n	8008836 <_scanf_float+0x66>
 80088ae:	a001      	add	r0, pc, #4	@ (adr r0, 80088b4 <_scanf_float+0xe4>)
 80088b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088b4:	0800896f 	.word	0x0800896f
 80088b8:	08008837 	.word	0x08008837
 80088bc:	0800896f 	.word	0x0800896f
 80088c0:	080089ff 	.word	0x080089ff
 80088c4:	08008837 	.word	0x08008837
 80088c8:	08008911 	.word	0x08008911
 80088cc:	08008955 	.word	0x08008955
 80088d0:	08008955 	.word	0x08008955
 80088d4:	08008955 	.word	0x08008955
 80088d8:	08008955 	.word	0x08008955
 80088dc:	08008955 	.word	0x08008955
 80088e0:	08008955 	.word	0x08008955
 80088e4:	08008955 	.word	0x08008955
 80088e8:	08008955 	.word	0x08008955
 80088ec:	08008955 	.word	0x08008955
 80088f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80088f2:	d809      	bhi.n	8008908 <_scanf_float+0x138>
 80088f4:	2b60      	cmp	r3, #96	@ 0x60
 80088f6:	d8b1      	bhi.n	800885c <_scanf_float+0x8c>
 80088f8:	2b54      	cmp	r3, #84	@ 0x54
 80088fa:	d07b      	beq.n	80089f4 <_scanf_float+0x224>
 80088fc:	2b59      	cmp	r3, #89	@ 0x59
 80088fe:	d19a      	bne.n	8008836 <_scanf_float+0x66>
 8008900:	2d07      	cmp	r5, #7
 8008902:	d198      	bne.n	8008836 <_scanf_float+0x66>
 8008904:	2508      	movs	r5, #8
 8008906:	e02f      	b.n	8008968 <_scanf_float+0x198>
 8008908:	2b74      	cmp	r3, #116	@ 0x74
 800890a:	d073      	beq.n	80089f4 <_scanf_float+0x224>
 800890c:	2b79      	cmp	r3, #121	@ 0x79
 800890e:	e7f6      	b.n	80088fe <_scanf_float+0x12e>
 8008910:	6821      	ldr	r1, [r4, #0]
 8008912:	05c8      	lsls	r0, r1, #23
 8008914:	d51e      	bpl.n	8008954 <_scanf_float+0x184>
 8008916:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800891a:	6021      	str	r1, [r4, #0]
 800891c:	3701      	adds	r7, #1
 800891e:	f1bb 0f00 	cmp.w	fp, #0
 8008922:	d003      	beq.n	800892c <_scanf_float+0x15c>
 8008924:	3201      	adds	r2, #1
 8008926:	f10b 3bff 	add.w	fp, fp, #4294967295
 800892a:	60a2      	str	r2, [r4, #8]
 800892c:	68a3      	ldr	r3, [r4, #8]
 800892e:	3b01      	subs	r3, #1
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	3301      	adds	r3, #1
 8008936:	6123      	str	r3, [r4, #16]
 8008938:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800893c:	3b01      	subs	r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	f8c9 3004 	str.w	r3, [r9, #4]
 8008944:	f340 8082 	ble.w	8008a4c <_scanf_float+0x27c>
 8008948:	f8d9 3000 	ldr.w	r3, [r9]
 800894c:	3301      	adds	r3, #1
 800894e:	f8c9 3000 	str.w	r3, [r9]
 8008952:	e762      	b.n	800881a <_scanf_float+0x4a>
 8008954:	eb1a 0105 	adds.w	r1, sl, r5
 8008958:	f47f af6d 	bne.w	8008836 <_scanf_float+0x66>
 800895c:	6822      	ldr	r2, [r4, #0]
 800895e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008962:	6022      	str	r2, [r4, #0]
 8008964:	460d      	mov	r5, r1
 8008966:	468a      	mov	sl, r1
 8008968:	f806 3b01 	strb.w	r3, [r6], #1
 800896c:	e7de      	b.n	800892c <_scanf_float+0x15c>
 800896e:	6822      	ldr	r2, [r4, #0]
 8008970:	0610      	lsls	r0, r2, #24
 8008972:	f57f af60 	bpl.w	8008836 <_scanf_float+0x66>
 8008976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800897a:	6022      	str	r2, [r4, #0]
 800897c:	e7f4      	b.n	8008968 <_scanf_float+0x198>
 800897e:	f1ba 0f00 	cmp.w	sl, #0
 8008982:	d10c      	bne.n	800899e <_scanf_float+0x1ce>
 8008984:	b977      	cbnz	r7, 80089a4 <_scanf_float+0x1d4>
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800898c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008990:	d108      	bne.n	80089a4 <_scanf_float+0x1d4>
 8008992:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008996:	6022      	str	r2, [r4, #0]
 8008998:	f04f 0a01 	mov.w	sl, #1
 800899c:	e7e4      	b.n	8008968 <_scanf_float+0x198>
 800899e:	f1ba 0f02 	cmp.w	sl, #2
 80089a2:	d050      	beq.n	8008a46 <_scanf_float+0x276>
 80089a4:	2d01      	cmp	r5, #1
 80089a6:	d002      	beq.n	80089ae <_scanf_float+0x1de>
 80089a8:	2d04      	cmp	r5, #4
 80089aa:	f47f af44 	bne.w	8008836 <_scanf_float+0x66>
 80089ae:	3501      	adds	r5, #1
 80089b0:	b2ed      	uxtb	r5, r5
 80089b2:	e7d9      	b.n	8008968 <_scanf_float+0x198>
 80089b4:	f1ba 0f01 	cmp.w	sl, #1
 80089b8:	f47f af3d 	bne.w	8008836 <_scanf_float+0x66>
 80089bc:	f04f 0a02 	mov.w	sl, #2
 80089c0:	e7d2      	b.n	8008968 <_scanf_float+0x198>
 80089c2:	b975      	cbnz	r5, 80089e2 <_scanf_float+0x212>
 80089c4:	2f00      	cmp	r7, #0
 80089c6:	f47f af37 	bne.w	8008838 <_scanf_float+0x68>
 80089ca:	6822      	ldr	r2, [r4, #0]
 80089cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80089d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80089d4:	f040 8103 	bne.w	8008bde <_scanf_float+0x40e>
 80089d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80089dc:	6022      	str	r2, [r4, #0]
 80089de:	2501      	movs	r5, #1
 80089e0:	e7c2      	b.n	8008968 <_scanf_float+0x198>
 80089e2:	2d03      	cmp	r5, #3
 80089e4:	d0e3      	beq.n	80089ae <_scanf_float+0x1de>
 80089e6:	2d05      	cmp	r5, #5
 80089e8:	e7df      	b.n	80089aa <_scanf_float+0x1da>
 80089ea:	2d02      	cmp	r5, #2
 80089ec:	f47f af23 	bne.w	8008836 <_scanf_float+0x66>
 80089f0:	2503      	movs	r5, #3
 80089f2:	e7b9      	b.n	8008968 <_scanf_float+0x198>
 80089f4:	2d06      	cmp	r5, #6
 80089f6:	f47f af1e 	bne.w	8008836 <_scanf_float+0x66>
 80089fa:	2507      	movs	r5, #7
 80089fc:	e7b4      	b.n	8008968 <_scanf_float+0x198>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	0591      	lsls	r1, r2, #22
 8008a02:	f57f af18 	bpl.w	8008836 <_scanf_float+0x66>
 8008a06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008a0a:	6022      	str	r2, [r4, #0]
 8008a0c:	9702      	str	r7, [sp, #8]
 8008a0e:	e7ab      	b.n	8008968 <_scanf_float+0x198>
 8008a10:	6822      	ldr	r2, [r4, #0]
 8008a12:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008a16:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008a1a:	d005      	beq.n	8008a28 <_scanf_float+0x258>
 8008a1c:	0550      	lsls	r0, r2, #21
 8008a1e:	f57f af0a 	bpl.w	8008836 <_scanf_float+0x66>
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	f000 80db 	beq.w	8008bde <_scanf_float+0x40e>
 8008a28:	0591      	lsls	r1, r2, #22
 8008a2a:	bf58      	it	pl
 8008a2c:	9902      	ldrpl	r1, [sp, #8]
 8008a2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008a32:	bf58      	it	pl
 8008a34:	1a79      	subpl	r1, r7, r1
 8008a36:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008a3a:	bf58      	it	pl
 8008a3c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	2700      	movs	r7, #0
 8008a44:	e790      	b.n	8008968 <_scanf_float+0x198>
 8008a46:	f04f 0a03 	mov.w	sl, #3
 8008a4a:	e78d      	b.n	8008968 <_scanf_float+0x198>
 8008a4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008a50:	4649      	mov	r1, r9
 8008a52:	4640      	mov	r0, r8
 8008a54:	4798      	blx	r3
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f43f aedf 	beq.w	800881a <_scanf_float+0x4a>
 8008a5c:	e6eb      	b.n	8008836 <_scanf_float+0x66>
 8008a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a66:	464a      	mov	r2, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	4798      	blx	r3
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	3b01      	subs	r3, #1
 8008a70:	6123      	str	r3, [r4, #16]
 8008a72:	e6eb      	b.n	800884c <_scanf_float+0x7c>
 8008a74:	1e6b      	subs	r3, r5, #1
 8008a76:	2b06      	cmp	r3, #6
 8008a78:	d824      	bhi.n	8008ac4 <_scanf_float+0x2f4>
 8008a7a:	2d02      	cmp	r5, #2
 8008a7c:	d836      	bhi.n	8008aec <_scanf_float+0x31c>
 8008a7e:	9b01      	ldr	r3, [sp, #4]
 8008a80:	429e      	cmp	r6, r3
 8008a82:	f67f aee7 	bls.w	8008854 <_scanf_float+0x84>
 8008a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a8e:	464a      	mov	r2, r9
 8008a90:	4640      	mov	r0, r8
 8008a92:	4798      	blx	r3
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	e7f0      	b.n	8008a7e <_scanf_float+0x2ae>
 8008a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008aa0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008aa4:	464a      	mov	r2, r9
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4798      	blx	r3
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	6123      	str	r3, [r4, #16]
 8008ab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ab4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ab8:	f1ba 0f02 	cmp.w	sl, #2
 8008abc:	d1ee      	bne.n	8008a9c <_scanf_float+0x2cc>
 8008abe:	3d03      	subs	r5, #3
 8008ac0:	b2ed      	uxtb	r5, r5
 8008ac2:	1b76      	subs	r6, r6, r5
 8008ac4:	6823      	ldr	r3, [r4, #0]
 8008ac6:	05da      	lsls	r2, r3, #23
 8008ac8:	d530      	bpl.n	8008b2c <_scanf_float+0x35c>
 8008aca:	055b      	lsls	r3, r3, #21
 8008acc:	d511      	bpl.n	8008af2 <_scanf_float+0x322>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	429e      	cmp	r6, r3
 8008ad2:	f67f aebf 	bls.w	8008854 <_scanf_float+0x84>
 8008ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ade:	464a      	mov	r2, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	4798      	blx	r3
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	e7f0      	b.n	8008ace <_scanf_float+0x2fe>
 8008aec:	46aa      	mov	sl, r5
 8008aee:	46b3      	mov	fp, r6
 8008af0:	e7de      	b.n	8008ab0 <_scanf_float+0x2e0>
 8008af2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	2965      	cmp	r1, #101	@ 0x65
 8008afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8008afe:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b02:	6123      	str	r3, [r4, #16]
 8008b04:	d00c      	beq.n	8008b20 <_scanf_float+0x350>
 8008b06:	2945      	cmp	r1, #69	@ 0x45
 8008b08:	d00a      	beq.n	8008b20 <_scanf_float+0x350>
 8008b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b0e:	464a      	mov	r2, r9
 8008b10:	4640      	mov	r0, r8
 8008b12:	4798      	blx	r3
 8008b14:	6923      	ldr	r3, [r4, #16]
 8008b16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	1eb5      	subs	r5, r6, #2
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008b24:	464a      	mov	r2, r9
 8008b26:	4640      	mov	r0, r8
 8008b28:	4798      	blx	r3
 8008b2a:	462e      	mov	r6, r5
 8008b2c:	6822      	ldr	r2, [r4, #0]
 8008b2e:	f012 0210 	ands.w	r2, r2, #16
 8008b32:	d001      	beq.n	8008b38 <_scanf_float+0x368>
 8008b34:	2000      	movs	r0, #0
 8008b36:	e68e      	b.n	8008856 <_scanf_float+0x86>
 8008b38:	7032      	strb	r2, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b44:	d125      	bne.n	8008b92 <_scanf_float+0x3c2>
 8008b46:	9b02      	ldr	r3, [sp, #8]
 8008b48:	429f      	cmp	r7, r3
 8008b4a:	d00a      	beq.n	8008b62 <_scanf_float+0x392>
 8008b4c:	1bda      	subs	r2, r3, r7
 8008b4e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008b52:	429e      	cmp	r6, r3
 8008b54:	bf28      	it	cs
 8008b56:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008b5a:	4922      	ldr	r1, [pc, #136]	@ (8008be4 <_scanf_float+0x414>)
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f000 f977 	bl	8008e50 <siprintf>
 8008b62:	9901      	ldr	r1, [sp, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	4640      	mov	r0, r8
 8008b68:	f002 fd06 	bl	800b578 <_strtod_r>
 8008b6c:	9b03      	ldr	r3, [sp, #12]
 8008b6e:	6821      	ldr	r1, [r4, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f011 0f02 	tst.w	r1, #2
 8008b76:	ec57 6b10 	vmov	r6, r7, d0
 8008b7a:	f103 0204 	add.w	r2, r3, #4
 8008b7e:	d015      	beq.n	8008bac <_scanf_float+0x3dc>
 8008b80:	9903      	ldr	r1, [sp, #12]
 8008b82:	600a      	str	r2, [r1, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	e9c3 6700 	strd	r6, r7, [r3]
 8008b8a:	68e3      	ldr	r3, [r4, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	60e3      	str	r3, [r4, #12]
 8008b90:	e7d0      	b.n	8008b34 <_scanf_float+0x364>
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0e4      	beq.n	8008b62 <_scanf_float+0x392>
 8008b98:	9905      	ldr	r1, [sp, #20]
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	4640      	mov	r0, r8
 8008ba0:	f002 fd6a 	bl	800b678 <_strtol_r>
 8008ba4:	9b04      	ldr	r3, [sp, #16]
 8008ba6:	9e05      	ldr	r6, [sp, #20]
 8008ba8:	1ac2      	subs	r2, r0, r3
 8008baa:	e7d0      	b.n	8008b4e <_scanf_float+0x37e>
 8008bac:	f011 0f04 	tst.w	r1, #4
 8008bb0:	9903      	ldr	r1, [sp, #12]
 8008bb2:	600a      	str	r2, [r1, #0]
 8008bb4:	d1e6      	bne.n	8008b84 <_scanf_float+0x3b4>
 8008bb6:	681d      	ldr	r5, [r3, #0]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	463b      	mov	r3, r7
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	f7f7 ffb4 	bl	8000b2c <__aeabi_dcmpun>
 8008bc4:	b128      	cbz	r0, 8008bd2 <_scanf_float+0x402>
 8008bc6:	4808      	ldr	r0, [pc, #32]	@ (8008be8 <_scanf_float+0x418>)
 8008bc8:	f000 faca 	bl	8009160 <nanf>
 8008bcc:	ed85 0a00 	vstr	s0, [r5]
 8008bd0:	e7db      	b.n	8008b8a <_scanf_float+0x3ba>
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f8 f807 	bl	8000be8 <__aeabi_d2f>
 8008bda:	6028      	str	r0, [r5, #0]
 8008bdc:	e7d5      	b.n	8008b8a <_scanf_float+0x3ba>
 8008bde:	2700      	movs	r7, #0
 8008be0:	e62e      	b.n	8008840 <_scanf_float+0x70>
 8008be2:	bf00      	nop
 8008be4:	0800ca3c 	.word	0x0800ca3c
 8008be8:	0800cb7d 	.word	0x0800cb7d

08008bec <std>:
 8008bec:	2300      	movs	r3, #0
 8008bee:	b510      	push	{r4, lr}
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8008bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bfa:	6083      	str	r3, [r0, #8]
 8008bfc:	8181      	strh	r1, [r0, #12]
 8008bfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c00:	81c2      	strh	r2, [r0, #14]
 8008c02:	6183      	str	r3, [r0, #24]
 8008c04:	4619      	mov	r1, r3
 8008c06:	2208      	movs	r2, #8
 8008c08:	305c      	adds	r0, #92	@ 0x5c
 8008c0a:	f000 fa1b 	bl	8009044 <memset>
 8008c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <std+0x58>)
 8008c10:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c12:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <std+0x5c>)
 8008c14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c16:	4b0d      	ldr	r3, [pc, #52]	@ (8008c4c <std+0x60>)
 8008c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <std+0x64>)
 8008c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <std+0x68>)
 8008c20:	6224      	str	r4, [r4, #32]
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d006      	beq.n	8008c34 <std+0x48>
 8008c26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c2a:	4294      	cmp	r4, r2
 8008c2c:	d002      	beq.n	8008c34 <std+0x48>
 8008c2e:	33d0      	adds	r3, #208	@ 0xd0
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d105      	bne.n	8008c40 <std+0x54>
 8008c34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3c:	f000 ba7e 	b.w	800913c <__retarget_lock_init_recursive>
 8008c40:	bd10      	pop	{r4, pc}
 8008c42:	bf00      	nop
 8008c44:	08008e95 	.word	0x08008e95
 8008c48:	08008eb7 	.word	0x08008eb7
 8008c4c:	08008eef 	.word	0x08008eef
 8008c50:	08008f13 	.word	0x08008f13
 8008c54:	2000048c 	.word	0x2000048c

08008c58 <stdio_exit_handler>:
 8008c58:	4a02      	ldr	r2, [pc, #8]	@ (8008c64 <stdio_exit_handler+0xc>)
 8008c5a:	4903      	ldr	r1, [pc, #12]	@ (8008c68 <stdio_exit_handler+0x10>)
 8008c5c:	4803      	ldr	r0, [pc, #12]	@ (8008c6c <stdio_exit_handler+0x14>)
 8008c5e:	f000 b869 	b.w	8008d34 <_fwalk_sglue>
 8008c62:	bf00      	nop
 8008c64:	20000018 	.word	0x20000018
 8008c68:	0800bcb9 	.word	0x0800bcb9
 8008c6c:	20000028 	.word	0x20000028

08008c70 <cleanup_stdio>:
 8008c70:	6841      	ldr	r1, [r0, #4]
 8008c72:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca4 <cleanup_stdio+0x34>)
 8008c74:	4299      	cmp	r1, r3
 8008c76:	b510      	push	{r4, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	d001      	beq.n	8008c80 <cleanup_stdio+0x10>
 8008c7c:	f003 f81c 	bl	800bcb8 <_fflush_r>
 8008c80:	68a1      	ldr	r1, [r4, #8]
 8008c82:	4b09      	ldr	r3, [pc, #36]	@ (8008ca8 <cleanup_stdio+0x38>)
 8008c84:	4299      	cmp	r1, r3
 8008c86:	d002      	beq.n	8008c8e <cleanup_stdio+0x1e>
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f003 f815 	bl	800bcb8 <_fflush_r>
 8008c8e:	68e1      	ldr	r1, [r4, #12]
 8008c90:	4b06      	ldr	r3, [pc, #24]	@ (8008cac <cleanup_stdio+0x3c>)
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d004      	beq.n	8008ca0 <cleanup_stdio+0x30>
 8008c96:	4620      	mov	r0, r4
 8008c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c9c:	f003 b80c 	b.w	800bcb8 <_fflush_r>
 8008ca0:	bd10      	pop	{r4, pc}
 8008ca2:	bf00      	nop
 8008ca4:	2000048c 	.word	0x2000048c
 8008ca8:	200004f4 	.word	0x200004f4
 8008cac:	2000055c 	.word	0x2000055c

08008cb0 <global_stdio_init.part.0>:
 8008cb0:	b510      	push	{r4, lr}
 8008cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce0 <global_stdio_init.part.0+0x30>)
 8008cb4:	4c0b      	ldr	r4, [pc, #44]	@ (8008ce4 <global_stdio_init.part.0+0x34>)
 8008cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce8 <global_stdio_init.part.0+0x38>)
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	f7ff ff94 	bl	8008bec <std>
 8008cc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cc8:	2201      	movs	r2, #1
 8008cca:	2109      	movs	r1, #9
 8008ccc:	f7ff ff8e 	bl	8008bec <std>
 8008cd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cd4:	2202      	movs	r2, #2
 8008cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cda:	2112      	movs	r1, #18
 8008cdc:	f7ff bf86 	b.w	8008bec <std>
 8008ce0:	200005c4 	.word	0x200005c4
 8008ce4:	2000048c 	.word	0x2000048c
 8008ce8:	08008c59 	.word	0x08008c59

08008cec <__sfp_lock_acquire>:
 8008cec:	4801      	ldr	r0, [pc, #4]	@ (8008cf4 <__sfp_lock_acquire+0x8>)
 8008cee:	f000 ba26 	b.w	800913e <__retarget_lock_acquire_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	200005cd 	.word	0x200005cd

08008cf8 <__sfp_lock_release>:
 8008cf8:	4801      	ldr	r0, [pc, #4]	@ (8008d00 <__sfp_lock_release+0x8>)
 8008cfa:	f000 ba21 	b.w	8009140 <__retarget_lock_release_recursive>
 8008cfe:	bf00      	nop
 8008d00:	200005cd 	.word	0x200005cd

08008d04 <__sinit>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	4604      	mov	r4, r0
 8008d08:	f7ff fff0 	bl	8008cec <__sfp_lock_acquire>
 8008d0c:	6a23      	ldr	r3, [r4, #32]
 8008d0e:	b11b      	cbz	r3, 8008d18 <__sinit+0x14>
 8008d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d14:	f7ff bff0 	b.w	8008cf8 <__sfp_lock_release>
 8008d18:	4b04      	ldr	r3, [pc, #16]	@ (8008d2c <__sinit+0x28>)
 8008d1a:	6223      	str	r3, [r4, #32]
 8008d1c:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <__sinit+0x2c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1f5      	bne.n	8008d10 <__sinit+0xc>
 8008d24:	f7ff ffc4 	bl	8008cb0 <global_stdio_init.part.0>
 8008d28:	e7f2      	b.n	8008d10 <__sinit+0xc>
 8008d2a:	bf00      	nop
 8008d2c:	08008c71 	.word	0x08008c71
 8008d30:	200005c4 	.word	0x200005c4

08008d34 <_fwalk_sglue>:
 8008d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d38:	4607      	mov	r7, r0
 8008d3a:	4688      	mov	r8, r1
 8008d3c:	4614      	mov	r4, r2
 8008d3e:	2600      	movs	r6, #0
 8008d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d44:	f1b9 0901 	subs.w	r9, r9, #1
 8008d48:	d505      	bpl.n	8008d56 <_fwalk_sglue+0x22>
 8008d4a:	6824      	ldr	r4, [r4, #0]
 8008d4c:	2c00      	cmp	r4, #0
 8008d4e:	d1f7      	bne.n	8008d40 <_fwalk_sglue+0xc>
 8008d50:	4630      	mov	r0, r6
 8008d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d56:	89ab      	ldrh	r3, [r5, #12]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d907      	bls.n	8008d6c <_fwalk_sglue+0x38>
 8008d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d60:	3301      	adds	r3, #1
 8008d62:	d003      	beq.n	8008d6c <_fwalk_sglue+0x38>
 8008d64:	4629      	mov	r1, r5
 8008d66:	4638      	mov	r0, r7
 8008d68:	47c0      	blx	r8
 8008d6a:	4306      	orrs	r6, r0
 8008d6c:	3568      	adds	r5, #104	@ 0x68
 8008d6e:	e7e9      	b.n	8008d44 <_fwalk_sglue+0x10>

08008d70 <iprintf>:
 8008d70:	b40f      	push	{r0, r1, r2, r3}
 8008d72:	b507      	push	{r0, r1, r2, lr}
 8008d74:	4906      	ldr	r1, [pc, #24]	@ (8008d90 <iprintf+0x20>)
 8008d76:	ab04      	add	r3, sp, #16
 8008d78:	6808      	ldr	r0, [r1, #0]
 8008d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7e:	6881      	ldr	r1, [r0, #8]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	f002 fdfd 	bl	800b980 <_vfiprintf_r>
 8008d86:	b003      	add	sp, #12
 8008d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d8c:	b004      	add	sp, #16
 8008d8e:	4770      	bx	lr
 8008d90:	20000024 	.word	0x20000024

08008d94 <_puts_r>:
 8008d94:	6a03      	ldr	r3, [r0, #32]
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	6884      	ldr	r4, [r0, #8]
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	b90b      	cbnz	r3, 8008da4 <_puts_r+0x10>
 8008da0:	f7ff ffb0 	bl	8008d04 <__sinit>
 8008da4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d405      	bmi.n	8008db6 <_puts_r+0x22>
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	0598      	lsls	r0, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_puts_r+0x22>
 8008db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db2:	f000 f9c4 	bl	800913e <__retarget_lock_acquire_recursive>
 8008db6:	89a3      	ldrh	r3, [r4, #12]
 8008db8:	0719      	lsls	r1, r3, #28
 8008dba:	d502      	bpl.n	8008dc2 <_puts_r+0x2e>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d135      	bne.n	8008e2e <_puts_r+0x9a>
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	f000 f8e7 	bl	8008f98 <__swsetup_r>
 8008dca:	b380      	cbz	r0, 8008e2e <_puts_r+0x9a>
 8008dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8008dd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dd2:	07da      	lsls	r2, r3, #31
 8008dd4:	d405      	bmi.n	8008de2 <_puts_r+0x4e>
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	059b      	lsls	r3, r3, #22
 8008dda:	d402      	bmi.n	8008de2 <_puts_r+0x4e>
 8008ddc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dde:	f000 f9af 	bl	8009140 <__retarget_lock_release_recursive>
 8008de2:	4628      	mov	r0, r5
 8008de4:	bd70      	pop	{r4, r5, r6, pc}
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da04      	bge.n	8008df4 <_puts_r+0x60>
 8008dea:	69a2      	ldr	r2, [r4, #24]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	dc17      	bgt.n	8008e20 <_puts_r+0x8c>
 8008df0:	290a      	cmp	r1, #10
 8008df2:	d015      	beq.n	8008e20 <_puts_r+0x8c>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	1c5a      	adds	r2, r3, #1
 8008df8:	6022      	str	r2, [r4, #0]
 8008dfa:	7019      	strb	r1, [r3, #0]
 8008dfc:	68a3      	ldr	r3, [r4, #8]
 8008dfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e02:	3b01      	subs	r3, #1
 8008e04:	60a3      	str	r3, [r4, #8]
 8008e06:	2900      	cmp	r1, #0
 8008e08:	d1ed      	bne.n	8008de6 <_puts_r+0x52>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	da11      	bge.n	8008e32 <_puts_r+0x9e>
 8008e0e:	4622      	mov	r2, r4
 8008e10:	210a      	movs	r1, #10
 8008e12:	4628      	mov	r0, r5
 8008e14:	f000 f881 	bl	8008f1a <__swbuf_r>
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d0d7      	beq.n	8008dcc <_puts_r+0x38>
 8008e1c:	250a      	movs	r5, #10
 8008e1e:	e7d7      	b.n	8008dd0 <_puts_r+0x3c>
 8008e20:	4622      	mov	r2, r4
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 f879 	bl	8008f1a <__swbuf_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d1e7      	bne.n	8008dfc <_puts_r+0x68>
 8008e2c:	e7ce      	b.n	8008dcc <_puts_r+0x38>
 8008e2e:	3e01      	subs	r6, #1
 8008e30:	e7e4      	b.n	8008dfc <_puts_r+0x68>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	6022      	str	r2, [r4, #0]
 8008e38:	220a      	movs	r2, #10
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	e7ee      	b.n	8008e1c <_puts_r+0x88>
	...

08008e40 <puts>:
 8008e40:	4b02      	ldr	r3, [pc, #8]	@ (8008e4c <puts+0xc>)
 8008e42:	4601      	mov	r1, r0
 8008e44:	6818      	ldr	r0, [r3, #0]
 8008e46:	f7ff bfa5 	b.w	8008d94 <_puts_r>
 8008e4a:	bf00      	nop
 8008e4c:	20000024 	.word	0x20000024

08008e50 <siprintf>:
 8008e50:	b40e      	push	{r1, r2, r3}
 8008e52:	b510      	push	{r4, lr}
 8008e54:	b09d      	sub	sp, #116	@ 0x74
 8008e56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e58:	9002      	str	r0, [sp, #8]
 8008e5a:	9006      	str	r0, [sp, #24]
 8008e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e60:	480a      	ldr	r0, [pc, #40]	@ (8008e8c <siprintf+0x3c>)
 8008e62:	9107      	str	r1, [sp, #28]
 8008e64:	9104      	str	r1, [sp, #16]
 8008e66:	490a      	ldr	r1, [pc, #40]	@ (8008e90 <siprintf+0x40>)
 8008e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6c:	9105      	str	r1, [sp, #20]
 8008e6e:	2400      	movs	r4, #0
 8008e70:	a902      	add	r1, sp, #8
 8008e72:	6800      	ldr	r0, [r0, #0]
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e78:	f002 fc5c 	bl	800b734 <_svfiprintf_r>
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	701c      	strb	r4, [r3, #0]
 8008e80:	b01d      	add	sp, #116	@ 0x74
 8008e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e86:	b003      	add	sp, #12
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000024 	.word	0x20000024
 8008e90:	ffff0208 	.word	0xffff0208

08008e94 <__sread>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9c:	f000 f900 	bl	80090a0 <_read_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	bfab      	itete	ge
 8008ea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ea8:	181b      	addge	r3, r3, r0
 8008eaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008eae:	bfac      	ite	ge
 8008eb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008eb2:	81a3      	strhlt	r3, [r4, #12]
 8008eb4:	bd10      	pop	{r4, pc}

08008eb6 <__swrite>:
 8008eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	461f      	mov	r7, r3
 8008ebc:	898b      	ldrh	r3, [r1, #12]
 8008ebe:	05db      	lsls	r3, r3, #23
 8008ec0:	4605      	mov	r5, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	d505      	bpl.n	8008ed4 <__swrite+0x1e>
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	2302      	movs	r3, #2
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f000 f8d4 	bl	800907c <_lseek_r>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ede:	81a3      	strh	r3, [r4, #12]
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eea:	f000 b8eb 	b.w	80090c4 <_write_r>

08008eee <__sseek>:
 8008eee:	b510      	push	{r4, lr}
 8008ef0:	460c      	mov	r4, r1
 8008ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef6:	f000 f8c1 	bl	800907c <_lseek_r>
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	bf15      	itete	ne
 8008f00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f0a:	81a3      	strheq	r3, [r4, #12]
 8008f0c:	bf18      	it	ne
 8008f0e:	81a3      	strhne	r3, [r4, #12]
 8008f10:	bd10      	pop	{r4, pc}

08008f12 <__sclose>:
 8008f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f16:	f000 b8a1 	b.w	800905c <_close_r>

08008f1a <__swbuf_r>:
 8008f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1c:	460e      	mov	r6, r1
 8008f1e:	4614      	mov	r4, r2
 8008f20:	4605      	mov	r5, r0
 8008f22:	b118      	cbz	r0, 8008f2c <__swbuf_r+0x12>
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b90b      	cbnz	r3, 8008f2c <__swbuf_r+0x12>
 8008f28:	f7ff feec 	bl	8008d04 <__sinit>
 8008f2c:	69a3      	ldr	r3, [r4, #24]
 8008f2e:	60a3      	str	r3, [r4, #8]
 8008f30:	89a3      	ldrh	r3, [r4, #12]
 8008f32:	071a      	lsls	r2, r3, #28
 8008f34:	d501      	bpl.n	8008f3a <__swbuf_r+0x20>
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	b943      	cbnz	r3, 8008f4c <__swbuf_r+0x32>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f82b 	bl	8008f98 <__swsetup_r>
 8008f42:	b118      	cbz	r0, 8008f4c <__swbuf_r+0x32>
 8008f44:	f04f 37ff 	mov.w	r7, #4294967295
 8008f48:	4638      	mov	r0, r7
 8008f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6922      	ldr	r2, [r4, #16]
 8008f50:	1a98      	subs	r0, r3, r2
 8008f52:	6963      	ldr	r3, [r4, #20]
 8008f54:	b2f6      	uxtb	r6, r6
 8008f56:	4283      	cmp	r3, r0
 8008f58:	4637      	mov	r7, r6
 8008f5a:	dc05      	bgt.n	8008f68 <__swbuf_r+0x4e>
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f002 feaa 	bl	800bcb8 <_fflush_r>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	d1ed      	bne.n	8008f44 <__swbuf_r+0x2a>
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	60a3      	str	r3, [r4, #8]
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	701e      	strb	r6, [r3, #0]
 8008f76:	6962      	ldr	r2, [r4, #20]
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d004      	beq.n	8008f88 <__swbuf_r+0x6e>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	07db      	lsls	r3, r3, #31
 8008f82:	d5e1      	bpl.n	8008f48 <__swbuf_r+0x2e>
 8008f84:	2e0a      	cmp	r6, #10
 8008f86:	d1df      	bne.n	8008f48 <__swbuf_r+0x2e>
 8008f88:	4621      	mov	r1, r4
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	f002 fe94 	bl	800bcb8 <_fflush_r>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d0d9      	beq.n	8008f48 <__swbuf_r+0x2e>
 8008f94:	e7d6      	b.n	8008f44 <__swbuf_r+0x2a>
	...

08008f98 <__swsetup_r>:
 8008f98:	b538      	push	{r3, r4, r5, lr}
 8008f9a:	4b29      	ldr	r3, [pc, #164]	@ (8009040 <__swsetup_r+0xa8>)
 8008f9c:	4605      	mov	r5, r0
 8008f9e:	6818      	ldr	r0, [r3, #0]
 8008fa0:	460c      	mov	r4, r1
 8008fa2:	b118      	cbz	r0, 8008fac <__swsetup_r+0x14>
 8008fa4:	6a03      	ldr	r3, [r0, #32]
 8008fa6:	b90b      	cbnz	r3, 8008fac <__swsetup_r+0x14>
 8008fa8:	f7ff feac 	bl	8008d04 <__sinit>
 8008fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb0:	0719      	lsls	r1, r3, #28
 8008fb2:	d422      	bmi.n	8008ffa <__swsetup_r+0x62>
 8008fb4:	06da      	lsls	r2, r3, #27
 8008fb6:	d407      	bmi.n	8008fc8 <__swsetup_r+0x30>
 8008fb8:	2209      	movs	r2, #9
 8008fba:	602a      	str	r2, [r5, #0]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc6:	e033      	b.n	8009030 <__swsetup_r+0x98>
 8008fc8:	0758      	lsls	r0, r3, #29
 8008fca:	d512      	bpl.n	8008ff2 <__swsetup_r+0x5a>
 8008fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fce:	b141      	cbz	r1, 8008fe2 <__swsetup_r+0x4a>
 8008fd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fd4:	4299      	cmp	r1, r3
 8008fd6:	d002      	beq.n	8008fde <__swsetup_r+0x46>
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 ff21 	bl	8009e20 <_free_r>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fe8:	81a3      	strh	r3, [r4, #12]
 8008fea:	2300      	movs	r3, #0
 8008fec:	6063      	str	r3, [r4, #4]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f043 0308 	orr.w	r3, r3, #8
 8008ff8:	81a3      	strh	r3, [r4, #12]
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	b94b      	cbnz	r3, 8009012 <__swsetup_r+0x7a>
 8008ffe:	89a3      	ldrh	r3, [r4, #12]
 8009000:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009008:	d003      	beq.n	8009012 <__swsetup_r+0x7a>
 800900a:	4621      	mov	r1, r4
 800900c:	4628      	mov	r0, r5
 800900e:	f002 fea1 	bl	800bd54 <__smakebuf_r>
 8009012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009016:	f013 0201 	ands.w	r2, r3, #1
 800901a:	d00a      	beq.n	8009032 <__swsetup_r+0x9a>
 800901c:	2200      	movs	r2, #0
 800901e:	60a2      	str	r2, [r4, #8]
 8009020:	6962      	ldr	r2, [r4, #20]
 8009022:	4252      	negs	r2, r2
 8009024:	61a2      	str	r2, [r4, #24]
 8009026:	6922      	ldr	r2, [r4, #16]
 8009028:	b942      	cbnz	r2, 800903c <__swsetup_r+0xa4>
 800902a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800902e:	d1c5      	bne.n	8008fbc <__swsetup_r+0x24>
 8009030:	bd38      	pop	{r3, r4, r5, pc}
 8009032:	0799      	lsls	r1, r3, #30
 8009034:	bf58      	it	pl
 8009036:	6962      	ldrpl	r2, [r4, #20]
 8009038:	60a2      	str	r2, [r4, #8]
 800903a:	e7f4      	b.n	8009026 <__swsetup_r+0x8e>
 800903c:	2000      	movs	r0, #0
 800903e:	e7f7      	b.n	8009030 <__swsetup_r+0x98>
 8009040:	20000024 	.word	0x20000024

08009044 <memset>:
 8009044:	4402      	add	r2, r0
 8009046:	4603      	mov	r3, r0
 8009048:	4293      	cmp	r3, r2
 800904a:	d100      	bne.n	800904e <memset+0xa>
 800904c:	4770      	bx	lr
 800904e:	f803 1b01 	strb.w	r1, [r3], #1
 8009052:	e7f9      	b.n	8009048 <memset+0x4>

08009054 <_localeconv_r>:
 8009054:	4800      	ldr	r0, [pc, #0]	@ (8009058 <_localeconv_r+0x4>)
 8009056:	4770      	bx	lr
 8009058:	20000164 	.word	0x20000164

0800905c <_close_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4d06      	ldr	r5, [pc, #24]	@ (8009078 <_close_r+0x1c>)
 8009060:	2300      	movs	r3, #0
 8009062:	4604      	mov	r4, r0
 8009064:	4608      	mov	r0, r1
 8009066:	602b      	str	r3, [r5, #0]
 8009068:	f7f8 fbb6 	bl	80017d8 <_close>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_close_r+0x1a>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_close_r+0x1a>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	200005c8 	.word	0x200005c8

0800907c <_lseek_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d07      	ldr	r5, [pc, #28]	@ (800909c <_lseek_r+0x20>)
 8009080:	4604      	mov	r4, r0
 8009082:	4608      	mov	r0, r1
 8009084:	4611      	mov	r1, r2
 8009086:	2200      	movs	r2, #0
 8009088:	602a      	str	r2, [r5, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	f7f8 fbcb 	bl	8001826 <_lseek>
 8009090:	1c43      	adds	r3, r0, #1
 8009092:	d102      	bne.n	800909a <_lseek_r+0x1e>
 8009094:	682b      	ldr	r3, [r5, #0]
 8009096:	b103      	cbz	r3, 800909a <_lseek_r+0x1e>
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	bd38      	pop	{r3, r4, r5, pc}
 800909c:	200005c8 	.word	0x200005c8

080090a0 <_read_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d07      	ldr	r5, [pc, #28]	@ (80090c0 <_read_r+0x20>)
 80090a4:	4604      	mov	r4, r0
 80090a6:	4608      	mov	r0, r1
 80090a8:	4611      	mov	r1, r2
 80090aa:	2200      	movs	r2, #0
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	f7f8 fb75 	bl	800179e <_read>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_read_r+0x1e>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_read_r+0x1e>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	200005c8 	.word	0x200005c8

080090c4 <_write_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	@ (80090e4 <_write_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 f9a0 	bl	8001418 <_write>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_write_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_write_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	200005c8 	.word	0x200005c8

080090e8 <__errno>:
 80090e8:	4b01      	ldr	r3, [pc, #4]	@ (80090f0 <__errno+0x8>)
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000024 	.word	0x20000024

080090f4 <__libc_init_array>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	4d0d      	ldr	r5, [pc, #52]	@ (800912c <__libc_init_array+0x38>)
 80090f8:	4c0d      	ldr	r4, [pc, #52]	@ (8009130 <__libc_init_array+0x3c>)
 80090fa:	1b64      	subs	r4, r4, r5
 80090fc:	10a4      	asrs	r4, r4, #2
 80090fe:	2600      	movs	r6, #0
 8009100:	42a6      	cmp	r6, r4
 8009102:	d109      	bne.n	8009118 <__libc_init_array+0x24>
 8009104:	4d0b      	ldr	r5, [pc, #44]	@ (8009134 <__libc_init_array+0x40>)
 8009106:	4c0c      	ldr	r4, [pc, #48]	@ (8009138 <__libc_init_array+0x44>)
 8009108:	f003 fae4 	bl	800c6d4 <_init>
 800910c:	1b64      	subs	r4, r4, r5
 800910e:	10a4      	asrs	r4, r4, #2
 8009110:	2600      	movs	r6, #0
 8009112:	42a6      	cmp	r6, r4
 8009114:	d105      	bne.n	8009122 <__libc_init_array+0x2e>
 8009116:	bd70      	pop	{r4, r5, r6, pc}
 8009118:	f855 3b04 	ldr.w	r3, [r5], #4
 800911c:	4798      	blx	r3
 800911e:	3601      	adds	r6, #1
 8009120:	e7ee      	b.n	8009100 <__libc_init_array+0xc>
 8009122:	f855 3b04 	ldr.w	r3, [r5], #4
 8009126:	4798      	blx	r3
 8009128:	3601      	adds	r6, #1
 800912a:	e7f2      	b.n	8009112 <__libc_init_array+0x1e>
 800912c:	0800ce3c 	.word	0x0800ce3c
 8009130:	0800ce3c 	.word	0x0800ce3c
 8009134:	0800ce3c 	.word	0x0800ce3c
 8009138:	0800ce40 	.word	0x0800ce40

0800913c <__retarget_lock_init_recursive>:
 800913c:	4770      	bx	lr

0800913e <__retarget_lock_acquire_recursive>:
 800913e:	4770      	bx	lr

08009140 <__retarget_lock_release_recursive>:
 8009140:	4770      	bx	lr

08009142 <memcpy>:
 8009142:	440a      	add	r2, r1
 8009144:	4291      	cmp	r1, r2
 8009146:	f100 33ff 	add.w	r3, r0, #4294967295
 800914a:	d100      	bne.n	800914e <memcpy+0xc>
 800914c:	4770      	bx	lr
 800914e:	b510      	push	{r4, lr}
 8009150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009154:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009158:	4291      	cmp	r1, r2
 800915a:	d1f9      	bne.n	8009150 <memcpy+0xe>
 800915c:	bd10      	pop	{r4, pc}
	...

08009160 <nanf>:
 8009160:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009168 <nanf+0x8>
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	7fc00000 	.word	0x7fc00000

0800916c <quorem>:
 800916c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	6903      	ldr	r3, [r0, #16]
 8009172:	690c      	ldr	r4, [r1, #16]
 8009174:	42a3      	cmp	r3, r4
 8009176:	4607      	mov	r7, r0
 8009178:	db7e      	blt.n	8009278 <quorem+0x10c>
 800917a:	3c01      	subs	r4, #1
 800917c:	f101 0814 	add.w	r8, r1, #20
 8009180:	00a3      	lsls	r3, r4, #2
 8009182:	f100 0514 	add.w	r5, r0, #20
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009192:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009196:	3301      	adds	r3, #1
 8009198:	429a      	cmp	r2, r3
 800919a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800919e:	fbb2 f6f3 	udiv	r6, r2, r3
 80091a2:	d32e      	bcc.n	8009202 <quorem+0x96>
 80091a4:	f04f 0a00 	mov.w	sl, #0
 80091a8:	46c4      	mov	ip, r8
 80091aa:	46ae      	mov	lr, r5
 80091ac:	46d3      	mov	fp, sl
 80091ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091b2:	b298      	uxth	r0, r3
 80091b4:	fb06 a000 	mla	r0, r6, r0, sl
 80091b8:	0c02      	lsrs	r2, r0, #16
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	fb06 2303 	mla	r3, r6, r3, r2
 80091c0:	f8de 2000 	ldr.w	r2, [lr]
 80091c4:	b280      	uxth	r0, r0
 80091c6:	b292      	uxth	r2, r2
 80091c8:	1a12      	subs	r2, r2, r0
 80091ca:	445a      	add	r2, fp
 80091cc:	f8de 0000 	ldr.w	r0, [lr]
 80091d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80091da:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80091de:	b292      	uxth	r2, r2
 80091e0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80091e4:	45e1      	cmp	r9, ip
 80091e6:	f84e 2b04 	str.w	r2, [lr], #4
 80091ea:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80091ee:	d2de      	bcs.n	80091ae <quorem+0x42>
 80091f0:	9b00      	ldr	r3, [sp, #0]
 80091f2:	58eb      	ldr	r3, [r5, r3]
 80091f4:	b92b      	cbnz	r3, 8009202 <quorem+0x96>
 80091f6:	9b01      	ldr	r3, [sp, #4]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	429d      	cmp	r5, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	d32f      	bcc.n	8009260 <quorem+0xf4>
 8009200:	613c      	str	r4, [r7, #16]
 8009202:	4638      	mov	r0, r7
 8009204:	f001 f9c8 	bl	800a598 <__mcmp>
 8009208:	2800      	cmp	r0, #0
 800920a:	db25      	blt.n	8009258 <quorem+0xec>
 800920c:	4629      	mov	r1, r5
 800920e:	2000      	movs	r0, #0
 8009210:	f858 2b04 	ldr.w	r2, [r8], #4
 8009214:	f8d1 c000 	ldr.w	ip, [r1]
 8009218:	fa1f fe82 	uxth.w	lr, r2
 800921c:	fa1f f38c 	uxth.w	r3, ip
 8009220:	eba3 030e 	sub.w	r3, r3, lr
 8009224:	4403      	add	r3, r0
 8009226:	0c12      	lsrs	r2, r2, #16
 8009228:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800922c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009230:	b29b      	uxth	r3, r3
 8009232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009236:	45c1      	cmp	r9, r8
 8009238:	f841 3b04 	str.w	r3, [r1], #4
 800923c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009240:	d2e6      	bcs.n	8009210 <quorem+0xa4>
 8009242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800924a:	b922      	cbnz	r2, 8009256 <quorem+0xea>
 800924c:	3b04      	subs	r3, #4
 800924e:	429d      	cmp	r5, r3
 8009250:	461a      	mov	r2, r3
 8009252:	d30b      	bcc.n	800926c <quorem+0x100>
 8009254:	613c      	str	r4, [r7, #16]
 8009256:	3601      	adds	r6, #1
 8009258:	4630      	mov	r0, r6
 800925a:	b003      	add	sp, #12
 800925c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009260:	6812      	ldr	r2, [r2, #0]
 8009262:	3b04      	subs	r3, #4
 8009264:	2a00      	cmp	r2, #0
 8009266:	d1cb      	bne.n	8009200 <quorem+0x94>
 8009268:	3c01      	subs	r4, #1
 800926a:	e7c6      	b.n	80091fa <quorem+0x8e>
 800926c:	6812      	ldr	r2, [r2, #0]
 800926e:	3b04      	subs	r3, #4
 8009270:	2a00      	cmp	r2, #0
 8009272:	d1ef      	bne.n	8009254 <quorem+0xe8>
 8009274:	3c01      	subs	r4, #1
 8009276:	e7ea      	b.n	800924e <quorem+0xe2>
 8009278:	2000      	movs	r0, #0
 800927a:	e7ee      	b.n	800925a <quorem+0xee>
 800927c:	0000      	movs	r0, r0
	...

08009280 <_dtoa_r>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	69c7      	ldr	r7, [r0, #28]
 8009286:	b097      	sub	sp, #92	@ 0x5c
 8009288:	ed8d 0b04 	vstr	d0, [sp, #16]
 800928c:	ec55 4b10 	vmov	r4, r5, d0
 8009290:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009292:	9107      	str	r1, [sp, #28]
 8009294:	4681      	mov	r9, r0
 8009296:	920c      	str	r2, [sp, #48]	@ 0x30
 8009298:	9311      	str	r3, [sp, #68]	@ 0x44
 800929a:	b97f      	cbnz	r7, 80092bc <_dtoa_r+0x3c>
 800929c:	2010      	movs	r0, #16
 800929e:	f000 fe09 	bl	8009eb4 <malloc>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80092a8:	b920      	cbnz	r0, 80092b4 <_dtoa_r+0x34>
 80092aa:	4ba9      	ldr	r3, [pc, #676]	@ (8009550 <_dtoa_r+0x2d0>)
 80092ac:	21ef      	movs	r1, #239	@ 0xef
 80092ae:	48a9      	ldr	r0, [pc, #676]	@ (8009554 <_dtoa_r+0x2d4>)
 80092b0:	f002 fdf2 	bl	800be98 <__assert_func>
 80092b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092b8:	6007      	str	r7, [r0, #0]
 80092ba:	60c7      	str	r7, [r0, #12]
 80092bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092c0:	6819      	ldr	r1, [r3, #0]
 80092c2:	b159      	cbz	r1, 80092dc <_dtoa_r+0x5c>
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	604a      	str	r2, [r1, #4]
 80092c8:	2301      	movs	r3, #1
 80092ca:	4093      	lsls	r3, r2
 80092cc:	608b      	str	r3, [r1, #8]
 80092ce:	4648      	mov	r0, r9
 80092d0:	f000 fee6 	bl	800a0a0 <_Bfree>
 80092d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	1e2b      	subs	r3, r5, #0
 80092de:	bfb9      	ittee	lt
 80092e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80092e4:	9305      	strlt	r3, [sp, #20]
 80092e6:	2300      	movge	r3, #0
 80092e8:	6033      	strge	r3, [r6, #0]
 80092ea:	9f05      	ldr	r7, [sp, #20]
 80092ec:	4b9a      	ldr	r3, [pc, #616]	@ (8009558 <_dtoa_r+0x2d8>)
 80092ee:	bfbc      	itt	lt
 80092f0:	2201      	movlt	r2, #1
 80092f2:	6032      	strlt	r2, [r6, #0]
 80092f4:	43bb      	bics	r3, r7
 80092f6:	d112      	bne.n	800931e <_dtoa_r+0x9e>
 80092f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80092fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009304:	4323      	orrs	r3, r4
 8009306:	f000 855a 	beq.w	8009dbe <_dtoa_r+0xb3e>
 800930a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800930c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800956c <_dtoa_r+0x2ec>
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 855c 	beq.w	8009dce <_dtoa_r+0xb4e>
 8009316:	f10a 0303 	add.w	r3, sl, #3
 800931a:	f000 bd56 	b.w	8009dca <_dtoa_r+0xb4a>
 800931e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009322:	2200      	movs	r2, #0
 8009324:	ec51 0b17 	vmov	r0, r1, d7
 8009328:	2300      	movs	r3, #0
 800932a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800932e:	f7f7 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009332:	4680      	mov	r8, r0
 8009334:	b158      	cbz	r0, 800934e <_dtoa_r+0xce>
 8009336:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009338:	2301      	movs	r3, #1
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800933e:	b113      	cbz	r3, 8009346 <_dtoa_r+0xc6>
 8009340:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009342:	4b86      	ldr	r3, [pc, #536]	@ (800955c <_dtoa_r+0x2dc>)
 8009344:	6013      	str	r3, [r2, #0]
 8009346:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009570 <_dtoa_r+0x2f0>
 800934a:	f000 bd40 	b.w	8009dce <_dtoa_r+0xb4e>
 800934e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009352:	aa14      	add	r2, sp, #80	@ 0x50
 8009354:	a915      	add	r1, sp, #84	@ 0x54
 8009356:	4648      	mov	r0, r9
 8009358:	f001 fa3e 	bl	800a7d8 <__d2b>
 800935c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009360:	9002      	str	r0, [sp, #8]
 8009362:	2e00      	cmp	r6, #0
 8009364:	d078      	beq.n	8009458 <_dtoa_r+0x1d8>
 8009366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009368:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800936c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009374:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009378:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800937c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009380:	4619      	mov	r1, r3
 8009382:	2200      	movs	r2, #0
 8009384:	4b76      	ldr	r3, [pc, #472]	@ (8009560 <_dtoa_r+0x2e0>)
 8009386:	f7f6 ff7f 	bl	8000288 <__aeabi_dsub>
 800938a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009538 <_dtoa_r+0x2b8>)
 800938c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009390:	f7f7 f932 	bl	80005f8 <__aeabi_dmul>
 8009394:	a36a      	add	r3, pc, #424	@ (adr r3, 8009540 <_dtoa_r+0x2c0>)
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	f7f6 ff77 	bl	800028c <__adddf3>
 800939e:	4604      	mov	r4, r0
 80093a0:	4630      	mov	r0, r6
 80093a2:	460d      	mov	r5, r1
 80093a4:	f7f7 f8be 	bl	8000524 <__aeabi_i2d>
 80093a8:	a367      	add	r3, pc, #412	@ (adr r3, 8009548 <_dtoa_r+0x2c8>)
 80093aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f6 ff67 	bl	800028c <__adddf3>
 80093be:	4604      	mov	r4, r0
 80093c0:	460d      	mov	r5, r1
 80093c2:	f7f7 fbc9 	bl	8000b58 <__aeabi_d2iz>
 80093c6:	2200      	movs	r2, #0
 80093c8:	4607      	mov	r7, r0
 80093ca:	2300      	movs	r3, #0
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 fb84 	bl	8000adc <__aeabi_dcmplt>
 80093d4:	b140      	cbz	r0, 80093e8 <_dtoa_r+0x168>
 80093d6:	4638      	mov	r0, r7
 80093d8:	f7f7 f8a4 	bl	8000524 <__aeabi_i2d>
 80093dc:	4622      	mov	r2, r4
 80093de:	462b      	mov	r3, r5
 80093e0:	f7f7 fb72 	bl	8000ac8 <__aeabi_dcmpeq>
 80093e4:	b900      	cbnz	r0, 80093e8 <_dtoa_r+0x168>
 80093e6:	3f01      	subs	r7, #1
 80093e8:	2f16      	cmp	r7, #22
 80093ea:	d852      	bhi.n	8009492 <_dtoa_r+0x212>
 80093ec:	4b5d      	ldr	r3, [pc, #372]	@ (8009564 <_dtoa_r+0x2e4>)
 80093ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093fa:	f7f7 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d049      	beq.n	8009496 <_dtoa_r+0x216>
 8009402:	3f01      	subs	r7, #1
 8009404:	2300      	movs	r3, #0
 8009406:	9310      	str	r3, [sp, #64]	@ 0x40
 8009408:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800940a:	1b9b      	subs	r3, r3, r6
 800940c:	1e5a      	subs	r2, r3, #1
 800940e:	bf45      	ittet	mi
 8009410:	f1c3 0301 	rsbmi	r3, r3, #1
 8009414:	9300      	strmi	r3, [sp, #0]
 8009416:	2300      	movpl	r3, #0
 8009418:	2300      	movmi	r3, #0
 800941a:	9206      	str	r2, [sp, #24]
 800941c:	bf54      	ite	pl
 800941e:	9300      	strpl	r3, [sp, #0]
 8009420:	9306      	strmi	r3, [sp, #24]
 8009422:	2f00      	cmp	r7, #0
 8009424:	db39      	blt.n	800949a <_dtoa_r+0x21a>
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	970d      	str	r7, [sp, #52]	@ 0x34
 800942a:	443b      	add	r3, r7
 800942c:	9306      	str	r3, [sp, #24]
 800942e:	2300      	movs	r3, #0
 8009430:	9308      	str	r3, [sp, #32]
 8009432:	9b07      	ldr	r3, [sp, #28]
 8009434:	2b09      	cmp	r3, #9
 8009436:	d863      	bhi.n	8009500 <_dtoa_r+0x280>
 8009438:	2b05      	cmp	r3, #5
 800943a:	bfc4      	itt	gt
 800943c:	3b04      	subgt	r3, #4
 800943e:	9307      	strgt	r3, [sp, #28]
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	f1a3 0302 	sub.w	r3, r3, #2
 8009446:	bfcc      	ite	gt
 8009448:	2400      	movgt	r4, #0
 800944a:	2401      	movle	r4, #1
 800944c:	2b03      	cmp	r3, #3
 800944e:	d863      	bhi.n	8009518 <_dtoa_r+0x298>
 8009450:	e8df f003 	tbb	[pc, r3]
 8009454:	2b375452 	.word	0x2b375452
 8009458:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800945c:	441e      	add	r6, r3
 800945e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009462:	2b20      	cmp	r3, #32
 8009464:	bfc1      	itttt	gt
 8009466:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800946a:	409f      	lslgt	r7, r3
 800946c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009470:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009474:	bfd6      	itet	le
 8009476:	f1c3 0320 	rsble	r3, r3, #32
 800947a:	ea47 0003 	orrgt.w	r0, r7, r3
 800947e:	fa04 f003 	lslle.w	r0, r4, r3
 8009482:	f7f7 f83f 	bl	8000504 <__aeabi_ui2d>
 8009486:	2201      	movs	r2, #1
 8009488:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800948c:	3e01      	subs	r6, #1
 800948e:	9212      	str	r2, [sp, #72]	@ 0x48
 8009490:	e776      	b.n	8009380 <_dtoa_r+0x100>
 8009492:	2301      	movs	r3, #1
 8009494:	e7b7      	b.n	8009406 <_dtoa_r+0x186>
 8009496:	9010      	str	r0, [sp, #64]	@ 0x40
 8009498:	e7b6      	b.n	8009408 <_dtoa_r+0x188>
 800949a:	9b00      	ldr	r3, [sp, #0]
 800949c:	1bdb      	subs	r3, r3, r7
 800949e:	9300      	str	r3, [sp, #0]
 80094a0:	427b      	negs	r3, r7
 80094a2:	9308      	str	r3, [sp, #32]
 80094a4:	2300      	movs	r3, #0
 80094a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80094a8:	e7c3      	b.n	8009432 <_dtoa_r+0x1b2>
 80094aa:	2301      	movs	r3, #1
 80094ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094b0:	eb07 0b03 	add.w	fp, r7, r3
 80094b4:	f10b 0301 	add.w	r3, fp, #1
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	9303      	str	r3, [sp, #12]
 80094bc:	bfb8      	it	lt
 80094be:	2301      	movlt	r3, #1
 80094c0:	e006      	b.n	80094d0 <_dtoa_r+0x250>
 80094c2:	2301      	movs	r3, #1
 80094c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dd28      	ble.n	800951e <_dtoa_r+0x29e>
 80094cc:	469b      	mov	fp, r3
 80094ce:	9303      	str	r3, [sp, #12]
 80094d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80094d4:	2100      	movs	r1, #0
 80094d6:	2204      	movs	r2, #4
 80094d8:	f102 0514 	add.w	r5, r2, #20
 80094dc:	429d      	cmp	r5, r3
 80094de:	d926      	bls.n	800952e <_dtoa_r+0x2ae>
 80094e0:	6041      	str	r1, [r0, #4]
 80094e2:	4648      	mov	r0, r9
 80094e4:	f000 fd9c 	bl	800a020 <_Balloc>
 80094e8:	4682      	mov	sl, r0
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d142      	bne.n	8009574 <_dtoa_r+0x2f4>
 80094ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009568 <_dtoa_r+0x2e8>)
 80094f0:	4602      	mov	r2, r0
 80094f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80094f6:	e6da      	b.n	80092ae <_dtoa_r+0x2e>
 80094f8:	2300      	movs	r3, #0
 80094fa:	e7e3      	b.n	80094c4 <_dtoa_r+0x244>
 80094fc:	2300      	movs	r3, #0
 80094fe:	e7d5      	b.n	80094ac <_dtoa_r+0x22c>
 8009500:	2401      	movs	r4, #1
 8009502:	2300      	movs	r3, #0
 8009504:	9307      	str	r3, [sp, #28]
 8009506:	9409      	str	r4, [sp, #36]	@ 0x24
 8009508:	f04f 3bff 	mov.w	fp, #4294967295
 800950c:	2200      	movs	r2, #0
 800950e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009512:	2312      	movs	r3, #18
 8009514:	920c      	str	r2, [sp, #48]	@ 0x30
 8009516:	e7db      	b.n	80094d0 <_dtoa_r+0x250>
 8009518:	2301      	movs	r3, #1
 800951a:	9309      	str	r3, [sp, #36]	@ 0x24
 800951c:	e7f4      	b.n	8009508 <_dtoa_r+0x288>
 800951e:	f04f 0b01 	mov.w	fp, #1
 8009522:	f8cd b00c 	str.w	fp, [sp, #12]
 8009526:	465b      	mov	r3, fp
 8009528:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800952c:	e7d0      	b.n	80094d0 <_dtoa_r+0x250>
 800952e:	3101      	adds	r1, #1
 8009530:	0052      	lsls	r2, r2, #1
 8009532:	e7d1      	b.n	80094d8 <_dtoa_r+0x258>
 8009534:	f3af 8000 	nop.w
 8009538:	636f4361 	.word	0x636f4361
 800953c:	3fd287a7 	.word	0x3fd287a7
 8009540:	8b60c8b3 	.word	0x8b60c8b3
 8009544:	3fc68a28 	.word	0x3fc68a28
 8009548:	509f79fb 	.word	0x509f79fb
 800954c:	3fd34413 	.word	0x3fd34413
 8009550:	0800ca4e 	.word	0x0800ca4e
 8009554:	0800ca65 	.word	0x0800ca65
 8009558:	7ff00000 	.word	0x7ff00000
 800955c:	0800ca19 	.word	0x0800ca19
 8009560:	3ff80000 	.word	0x3ff80000
 8009564:	0800cc18 	.word	0x0800cc18
 8009568:	0800cabd 	.word	0x0800cabd
 800956c:	0800ca4a 	.word	0x0800ca4a
 8009570:	0800ca18 	.word	0x0800ca18
 8009574:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009578:	6018      	str	r0, [r3, #0]
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	2b0e      	cmp	r3, #14
 800957e:	f200 80a1 	bhi.w	80096c4 <_dtoa_r+0x444>
 8009582:	2c00      	cmp	r4, #0
 8009584:	f000 809e 	beq.w	80096c4 <_dtoa_r+0x444>
 8009588:	2f00      	cmp	r7, #0
 800958a:	dd33      	ble.n	80095f4 <_dtoa_r+0x374>
 800958c:	4b9c      	ldr	r3, [pc, #624]	@ (8009800 <_dtoa_r+0x580>)
 800958e:	f007 020f 	and.w	r2, r7, #15
 8009592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009596:	ed93 7b00 	vldr	d7, [r3]
 800959a:	05f8      	lsls	r0, r7, #23
 800959c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80095a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80095a4:	d516      	bpl.n	80095d4 <_dtoa_r+0x354>
 80095a6:	4b97      	ldr	r3, [pc, #604]	@ (8009804 <_dtoa_r+0x584>)
 80095a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095b0:	f7f7 f94c 	bl	800084c <__aeabi_ddiv>
 80095b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b8:	f004 040f 	and.w	r4, r4, #15
 80095bc:	2603      	movs	r6, #3
 80095be:	4d91      	ldr	r5, [pc, #580]	@ (8009804 <_dtoa_r+0x584>)
 80095c0:	b954      	cbnz	r4, 80095d8 <_dtoa_r+0x358>
 80095c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ca:	f7f7 f93f 	bl	800084c <__aeabi_ddiv>
 80095ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095d2:	e028      	b.n	8009626 <_dtoa_r+0x3a6>
 80095d4:	2602      	movs	r6, #2
 80095d6:	e7f2      	b.n	80095be <_dtoa_r+0x33e>
 80095d8:	07e1      	lsls	r1, r4, #31
 80095da:	d508      	bpl.n	80095ee <_dtoa_r+0x36e>
 80095dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80095e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80095ec:	3601      	adds	r6, #1
 80095ee:	1064      	asrs	r4, r4, #1
 80095f0:	3508      	adds	r5, #8
 80095f2:	e7e5      	b.n	80095c0 <_dtoa_r+0x340>
 80095f4:	f000 80af 	beq.w	8009756 <_dtoa_r+0x4d6>
 80095f8:	427c      	negs	r4, r7
 80095fa:	4b81      	ldr	r3, [pc, #516]	@ (8009800 <_dtoa_r+0x580>)
 80095fc:	4d81      	ldr	r5, [pc, #516]	@ (8009804 <_dtoa_r+0x584>)
 80095fe:	f004 020f 	and.w	r2, r4, #15
 8009602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009616:	1124      	asrs	r4, r4, #4
 8009618:	2300      	movs	r3, #0
 800961a:	2602      	movs	r6, #2
 800961c:	2c00      	cmp	r4, #0
 800961e:	f040 808f 	bne.w	8009740 <_dtoa_r+0x4c0>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1d3      	bne.n	80095ce <_dtoa_r+0x34e>
 8009626:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009628:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8094 	beq.w	800975a <_dtoa_r+0x4da>
 8009632:	4b75      	ldr	r3, [pc, #468]	@ (8009808 <_dtoa_r+0x588>)
 8009634:	2200      	movs	r2, #0
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f7 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800963e:	2800      	cmp	r0, #0
 8009640:	f000 808b 	beq.w	800975a <_dtoa_r+0x4da>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 8087 	beq.w	800975a <_dtoa_r+0x4da>
 800964c:	f1bb 0f00 	cmp.w	fp, #0
 8009650:	dd34      	ble.n	80096bc <_dtoa_r+0x43c>
 8009652:	4620      	mov	r0, r4
 8009654:	4b6d      	ldr	r3, [pc, #436]	@ (800980c <_dtoa_r+0x58c>)
 8009656:	2200      	movs	r2, #0
 8009658:	4629      	mov	r1, r5
 800965a:	f7f6 ffcd 	bl	80005f8 <__aeabi_dmul>
 800965e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009662:	f107 38ff 	add.w	r8, r7, #4294967295
 8009666:	3601      	adds	r6, #1
 8009668:	465c      	mov	r4, fp
 800966a:	4630      	mov	r0, r6
 800966c:	f7f6 ff5a 	bl	8000524 <__aeabi_i2d>
 8009670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009674:	f7f6 ffc0 	bl	80005f8 <__aeabi_dmul>
 8009678:	4b65      	ldr	r3, [pc, #404]	@ (8009810 <_dtoa_r+0x590>)
 800967a:	2200      	movs	r2, #0
 800967c:	f7f6 fe06 	bl	800028c <__adddf3>
 8009680:	4605      	mov	r5, r0
 8009682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009686:	2c00      	cmp	r4, #0
 8009688:	d16a      	bne.n	8009760 <_dtoa_r+0x4e0>
 800968a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800968e:	4b61      	ldr	r3, [pc, #388]	@ (8009814 <_dtoa_r+0x594>)
 8009690:	2200      	movs	r2, #0
 8009692:	f7f6 fdf9 	bl	8000288 <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800969e:	462a      	mov	r2, r5
 80096a0:	4633      	mov	r3, r6
 80096a2:	f7f7 fa39 	bl	8000b18 <__aeabi_dcmpgt>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f040 8298 	bne.w	8009bdc <_dtoa_r+0x95c>
 80096ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096b0:	462a      	mov	r2, r5
 80096b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096b6:	f7f7 fa11 	bl	8000adc <__aeabi_dcmplt>
 80096ba:	bb38      	cbnz	r0, 800970c <_dtoa_r+0x48c>
 80096bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80096c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f2c0 8157 	blt.w	800997a <_dtoa_r+0x6fa>
 80096cc:	2f0e      	cmp	r7, #14
 80096ce:	f300 8154 	bgt.w	800997a <_dtoa_r+0x6fa>
 80096d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009800 <_dtoa_r+0x580>)
 80096d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096d8:	ed93 7b00 	vldr	d7, [r3]
 80096dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	ed8d 7b00 	vstr	d7, [sp]
 80096e4:	f280 80e5 	bge.w	80098b2 <_dtoa_r+0x632>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f300 80e1 	bgt.w	80098b2 <_dtoa_r+0x632>
 80096f0:	d10c      	bne.n	800970c <_dtoa_r+0x48c>
 80096f2:	4b48      	ldr	r3, [pc, #288]	@ (8009814 <_dtoa_r+0x594>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	ec51 0b17 	vmov	r0, r1, d7
 80096fa:	f7f6 ff7d 	bl	80005f8 <__aeabi_dmul>
 80096fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009702:	f7f7 f9ff 	bl	8000b04 <__aeabi_dcmpge>
 8009706:	2800      	cmp	r0, #0
 8009708:	f000 8266 	beq.w	8009bd8 <_dtoa_r+0x958>
 800970c:	2400      	movs	r4, #0
 800970e:	4625      	mov	r5, r4
 8009710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009712:	4656      	mov	r6, sl
 8009714:	ea6f 0803 	mvn.w	r8, r3
 8009718:	2700      	movs	r7, #0
 800971a:	4621      	mov	r1, r4
 800971c:	4648      	mov	r0, r9
 800971e:	f000 fcbf 	bl	800a0a0 <_Bfree>
 8009722:	2d00      	cmp	r5, #0
 8009724:	f000 80bd 	beq.w	80098a2 <_dtoa_r+0x622>
 8009728:	b12f      	cbz	r7, 8009736 <_dtoa_r+0x4b6>
 800972a:	42af      	cmp	r7, r5
 800972c:	d003      	beq.n	8009736 <_dtoa_r+0x4b6>
 800972e:	4639      	mov	r1, r7
 8009730:	4648      	mov	r0, r9
 8009732:	f000 fcb5 	bl	800a0a0 <_Bfree>
 8009736:	4629      	mov	r1, r5
 8009738:	4648      	mov	r0, r9
 800973a:	f000 fcb1 	bl	800a0a0 <_Bfree>
 800973e:	e0b0      	b.n	80098a2 <_dtoa_r+0x622>
 8009740:	07e2      	lsls	r2, r4, #31
 8009742:	d505      	bpl.n	8009750 <_dtoa_r+0x4d0>
 8009744:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009748:	f7f6 ff56 	bl	80005f8 <__aeabi_dmul>
 800974c:	3601      	adds	r6, #1
 800974e:	2301      	movs	r3, #1
 8009750:	1064      	asrs	r4, r4, #1
 8009752:	3508      	adds	r5, #8
 8009754:	e762      	b.n	800961c <_dtoa_r+0x39c>
 8009756:	2602      	movs	r6, #2
 8009758:	e765      	b.n	8009626 <_dtoa_r+0x3a6>
 800975a:	9c03      	ldr	r4, [sp, #12]
 800975c:	46b8      	mov	r8, r7
 800975e:	e784      	b.n	800966a <_dtoa_r+0x3ea>
 8009760:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <_dtoa_r+0x580>)
 8009762:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009764:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009768:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800976c:	4454      	add	r4, sl
 800976e:	2900      	cmp	r1, #0
 8009770:	d054      	beq.n	800981c <_dtoa_r+0x59c>
 8009772:	4929      	ldr	r1, [pc, #164]	@ (8009818 <_dtoa_r+0x598>)
 8009774:	2000      	movs	r0, #0
 8009776:	f7f7 f869 	bl	800084c <__aeabi_ddiv>
 800977a:	4633      	mov	r3, r6
 800977c:	462a      	mov	r2, r5
 800977e:	f7f6 fd83 	bl	8000288 <__aeabi_dsub>
 8009782:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009786:	4656      	mov	r6, sl
 8009788:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800978c:	f7f7 f9e4 	bl	8000b58 <__aeabi_d2iz>
 8009790:	4605      	mov	r5, r0
 8009792:	f7f6 fec7 	bl	8000524 <__aeabi_i2d>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800979e:	f7f6 fd73 	bl	8000288 <__aeabi_dsub>
 80097a2:	3530      	adds	r5, #48	@ 0x30
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097ac:	f806 5b01 	strb.w	r5, [r6], #1
 80097b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097b4:	f7f7 f992 	bl	8000adc <__aeabi_dcmplt>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d172      	bne.n	80098a2 <_dtoa_r+0x622>
 80097bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097c0:	4911      	ldr	r1, [pc, #68]	@ (8009808 <_dtoa_r+0x588>)
 80097c2:	2000      	movs	r0, #0
 80097c4:	f7f6 fd60 	bl	8000288 <__aeabi_dsub>
 80097c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097cc:	f7f7 f986 	bl	8000adc <__aeabi_dcmplt>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f040 80b4 	bne.w	800993e <_dtoa_r+0x6be>
 80097d6:	42a6      	cmp	r6, r4
 80097d8:	f43f af70 	beq.w	80096bc <_dtoa_r+0x43c>
 80097dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80097e0:	4b0a      	ldr	r3, [pc, #40]	@ (800980c <_dtoa_r+0x58c>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	4b08      	ldr	r3, [pc, #32]	@ (800980c <_dtoa_r+0x58c>)
 80097ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097ee:	2200      	movs	r2, #0
 80097f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f4:	f7f6 ff00 	bl	80005f8 <__aeabi_dmul>
 80097f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097fc:	e7c4      	b.n	8009788 <_dtoa_r+0x508>
 80097fe:	bf00      	nop
 8009800:	0800cc18 	.word	0x0800cc18
 8009804:	0800cbf0 	.word	0x0800cbf0
 8009808:	3ff00000 	.word	0x3ff00000
 800980c:	40240000 	.word	0x40240000
 8009810:	401c0000 	.word	0x401c0000
 8009814:	40140000 	.word	0x40140000
 8009818:	3fe00000 	.word	0x3fe00000
 800981c:	4631      	mov	r1, r6
 800981e:	4628      	mov	r0, r5
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009828:	9413      	str	r4, [sp, #76]	@ 0x4c
 800982a:	4656      	mov	r6, sl
 800982c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009830:	f7f7 f992 	bl	8000b58 <__aeabi_d2iz>
 8009834:	4605      	mov	r5, r0
 8009836:	f7f6 fe75 	bl	8000524 <__aeabi_i2d>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009842:	f7f6 fd21 	bl	8000288 <__aeabi_dsub>
 8009846:	3530      	adds	r5, #48	@ 0x30
 8009848:	f806 5b01 	strb.w	r5, [r6], #1
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	42a6      	cmp	r6, r4
 8009852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009856:	f04f 0200 	mov.w	r2, #0
 800985a:	d124      	bne.n	80098a6 <_dtoa_r+0x626>
 800985c:	4baf      	ldr	r3, [pc, #700]	@ (8009b1c <_dtoa_r+0x89c>)
 800985e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009862:	f7f6 fd13 	bl	800028c <__adddf3>
 8009866:	4602      	mov	r2, r0
 8009868:	460b      	mov	r3, r1
 800986a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800986e:	f7f7 f953 	bl	8000b18 <__aeabi_dcmpgt>
 8009872:	2800      	cmp	r0, #0
 8009874:	d163      	bne.n	800993e <_dtoa_r+0x6be>
 8009876:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800987a:	49a8      	ldr	r1, [pc, #672]	@ (8009b1c <_dtoa_r+0x89c>)
 800987c:	2000      	movs	r0, #0
 800987e:	f7f6 fd03 	bl	8000288 <__aeabi_dsub>
 8009882:	4602      	mov	r2, r0
 8009884:	460b      	mov	r3, r1
 8009886:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800988a:	f7f7 f927 	bl	8000adc <__aeabi_dcmplt>
 800988e:	2800      	cmp	r0, #0
 8009890:	f43f af14 	beq.w	80096bc <_dtoa_r+0x43c>
 8009894:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009896:	1e73      	subs	r3, r6, #1
 8009898:	9313      	str	r3, [sp, #76]	@ 0x4c
 800989a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800989e:	2b30      	cmp	r3, #48	@ 0x30
 80098a0:	d0f8      	beq.n	8009894 <_dtoa_r+0x614>
 80098a2:	4647      	mov	r7, r8
 80098a4:	e03b      	b.n	800991e <_dtoa_r+0x69e>
 80098a6:	4b9e      	ldr	r3, [pc, #632]	@ (8009b20 <_dtoa_r+0x8a0>)
 80098a8:	f7f6 fea6 	bl	80005f8 <__aeabi_dmul>
 80098ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098b0:	e7bc      	b.n	800982c <_dtoa_r+0x5ac>
 80098b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80098b6:	4656      	mov	r6, sl
 80098b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098bc:	4620      	mov	r0, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	f7f6 ffc4 	bl	800084c <__aeabi_ddiv>
 80098c4:	f7f7 f948 	bl	8000b58 <__aeabi_d2iz>
 80098c8:	4680      	mov	r8, r0
 80098ca:	f7f6 fe2b 	bl	8000524 <__aeabi_i2d>
 80098ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098d2:	f7f6 fe91 	bl	80005f8 <__aeabi_dmul>
 80098d6:	4602      	mov	r2, r0
 80098d8:	460b      	mov	r3, r1
 80098da:	4620      	mov	r0, r4
 80098dc:	4629      	mov	r1, r5
 80098de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098e2:	f7f6 fcd1 	bl	8000288 <__aeabi_dsub>
 80098e6:	f806 4b01 	strb.w	r4, [r6], #1
 80098ea:	9d03      	ldr	r5, [sp, #12]
 80098ec:	eba6 040a 	sub.w	r4, r6, sl
 80098f0:	42a5      	cmp	r5, r4
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	d133      	bne.n	8009960 <_dtoa_r+0x6e0>
 80098f8:	f7f6 fcc8 	bl	800028c <__adddf3>
 80098fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009900:	4604      	mov	r4, r0
 8009902:	460d      	mov	r5, r1
 8009904:	f7f7 f908 	bl	8000b18 <__aeabi_dcmpgt>
 8009908:	b9c0      	cbnz	r0, 800993c <_dtoa_r+0x6bc>
 800990a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f7 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009916:	b110      	cbz	r0, 800991e <_dtoa_r+0x69e>
 8009918:	f018 0f01 	tst.w	r8, #1
 800991c:	d10e      	bne.n	800993c <_dtoa_r+0x6bc>
 800991e:	9902      	ldr	r1, [sp, #8]
 8009920:	4648      	mov	r0, r9
 8009922:	f000 fbbd 	bl	800a0a0 <_Bfree>
 8009926:	2300      	movs	r3, #0
 8009928:	7033      	strb	r3, [r6, #0]
 800992a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800992c:	3701      	adds	r7, #1
 800992e:	601f      	str	r7, [r3, #0]
 8009930:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 824b 	beq.w	8009dce <_dtoa_r+0xb4e>
 8009938:	601e      	str	r6, [r3, #0]
 800993a:	e248      	b.n	8009dce <_dtoa_r+0xb4e>
 800993c:	46b8      	mov	r8, r7
 800993e:	4633      	mov	r3, r6
 8009940:	461e      	mov	r6, r3
 8009942:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009946:	2a39      	cmp	r2, #57	@ 0x39
 8009948:	d106      	bne.n	8009958 <_dtoa_r+0x6d8>
 800994a:	459a      	cmp	sl, r3
 800994c:	d1f8      	bne.n	8009940 <_dtoa_r+0x6c0>
 800994e:	2230      	movs	r2, #48	@ 0x30
 8009950:	f108 0801 	add.w	r8, r8, #1
 8009954:	f88a 2000 	strb.w	r2, [sl]
 8009958:	781a      	ldrb	r2, [r3, #0]
 800995a:	3201      	adds	r2, #1
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	e7a0      	b.n	80098a2 <_dtoa_r+0x622>
 8009960:	4b6f      	ldr	r3, [pc, #444]	@ (8009b20 <_dtoa_r+0x8a0>)
 8009962:	2200      	movs	r2, #0
 8009964:	f7f6 fe48 	bl	80005f8 <__aeabi_dmul>
 8009968:	2200      	movs	r2, #0
 800996a:	2300      	movs	r3, #0
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	f7f7 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009974:	2800      	cmp	r0, #0
 8009976:	d09f      	beq.n	80098b8 <_dtoa_r+0x638>
 8009978:	e7d1      	b.n	800991e <_dtoa_r+0x69e>
 800997a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800997c:	2a00      	cmp	r2, #0
 800997e:	f000 80ea 	beq.w	8009b56 <_dtoa_r+0x8d6>
 8009982:	9a07      	ldr	r2, [sp, #28]
 8009984:	2a01      	cmp	r2, #1
 8009986:	f300 80cd 	bgt.w	8009b24 <_dtoa_r+0x8a4>
 800998a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800998c:	2a00      	cmp	r2, #0
 800998e:	f000 80c1 	beq.w	8009b14 <_dtoa_r+0x894>
 8009992:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009996:	9c08      	ldr	r4, [sp, #32]
 8009998:	9e00      	ldr	r6, [sp, #0]
 800999a:	9a00      	ldr	r2, [sp, #0]
 800999c:	441a      	add	r2, r3
 800999e:	9200      	str	r2, [sp, #0]
 80099a0:	9a06      	ldr	r2, [sp, #24]
 80099a2:	2101      	movs	r1, #1
 80099a4:	441a      	add	r2, r3
 80099a6:	4648      	mov	r0, r9
 80099a8:	9206      	str	r2, [sp, #24]
 80099aa:	f000 fc77 	bl	800a29c <__i2b>
 80099ae:	4605      	mov	r5, r0
 80099b0:	b166      	cbz	r6, 80099cc <_dtoa_r+0x74c>
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	dd09      	ble.n	80099cc <_dtoa_r+0x74c>
 80099b8:	42b3      	cmp	r3, r6
 80099ba:	9a00      	ldr	r2, [sp, #0]
 80099bc:	bfa8      	it	ge
 80099be:	4633      	movge	r3, r6
 80099c0:	1ad2      	subs	r2, r2, r3
 80099c2:	9200      	str	r2, [sp, #0]
 80099c4:	9a06      	ldr	r2, [sp, #24]
 80099c6:	1af6      	subs	r6, r6, r3
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	9306      	str	r3, [sp, #24]
 80099cc:	9b08      	ldr	r3, [sp, #32]
 80099ce:	b30b      	cbz	r3, 8009a14 <_dtoa_r+0x794>
 80099d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 80c6 	beq.w	8009b64 <_dtoa_r+0x8e4>
 80099d8:	2c00      	cmp	r4, #0
 80099da:	f000 80c0 	beq.w	8009b5e <_dtoa_r+0x8de>
 80099de:	4629      	mov	r1, r5
 80099e0:	4622      	mov	r2, r4
 80099e2:	4648      	mov	r0, r9
 80099e4:	f000 fd12 	bl	800a40c <__pow5mult>
 80099e8:	9a02      	ldr	r2, [sp, #8]
 80099ea:	4601      	mov	r1, r0
 80099ec:	4605      	mov	r5, r0
 80099ee:	4648      	mov	r0, r9
 80099f0:	f000 fc6a 	bl	800a2c8 <__multiply>
 80099f4:	9902      	ldr	r1, [sp, #8]
 80099f6:	4680      	mov	r8, r0
 80099f8:	4648      	mov	r0, r9
 80099fa:	f000 fb51 	bl	800a0a0 <_Bfree>
 80099fe:	9b08      	ldr	r3, [sp, #32]
 8009a00:	1b1b      	subs	r3, r3, r4
 8009a02:	9308      	str	r3, [sp, #32]
 8009a04:	f000 80b1 	beq.w	8009b6a <_dtoa_r+0x8ea>
 8009a08:	9a08      	ldr	r2, [sp, #32]
 8009a0a:	4641      	mov	r1, r8
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f000 fcfd 	bl	800a40c <__pow5mult>
 8009a12:	9002      	str	r0, [sp, #8]
 8009a14:	2101      	movs	r1, #1
 8009a16:	4648      	mov	r0, r9
 8009a18:	f000 fc40 	bl	800a29c <__i2b>
 8009a1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a1e:	4604      	mov	r4, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 81d8 	beq.w	8009dd6 <_dtoa_r+0xb56>
 8009a26:	461a      	mov	r2, r3
 8009a28:	4601      	mov	r1, r0
 8009a2a:	4648      	mov	r0, r9
 8009a2c:	f000 fcee 	bl	800a40c <__pow5mult>
 8009a30:	9b07      	ldr	r3, [sp, #28]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	4604      	mov	r4, r0
 8009a36:	f300 809f 	bgt.w	8009b78 <_dtoa_r+0x8f8>
 8009a3a:	9b04      	ldr	r3, [sp, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f040 8097 	bne.w	8009b70 <_dtoa_r+0x8f0>
 8009a42:	9b05      	ldr	r3, [sp, #20]
 8009a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 8093 	bne.w	8009b74 <_dtoa_r+0x8f4>
 8009a4e:	9b05      	ldr	r3, [sp, #20]
 8009a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a54:	0d1b      	lsrs	r3, r3, #20
 8009a56:	051b      	lsls	r3, r3, #20
 8009a58:	b133      	cbz	r3, 8009a68 <_dtoa_r+0x7e8>
 8009a5a:	9b00      	ldr	r3, [sp, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	9b06      	ldr	r3, [sp, #24]
 8009a62:	3301      	adds	r3, #1
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	2301      	movs	r3, #1
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 81b8 	beq.w	8009de2 <_dtoa_r+0xb62>
 8009a72:	6923      	ldr	r3, [r4, #16]
 8009a74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a78:	6918      	ldr	r0, [r3, #16]
 8009a7a:	f000 fbc3 	bl	800a204 <__hi0bits>
 8009a7e:	f1c0 0020 	rsb	r0, r0, #32
 8009a82:	9b06      	ldr	r3, [sp, #24]
 8009a84:	4418      	add	r0, r3
 8009a86:	f010 001f 	ands.w	r0, r0, #31
 8009a8a:	f000 8082 	beq.w	8009b92 <_dtoa_r+0x912>
 8009a8e:	f1c0 0320 	rsb	r3, r0, #32
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	dd73      	ble.n	8009b7e <_dtoa_r+0x8fe>
 8009a96:	9b00      	ldr	r3, [sp, #0]
 8009a98:	f1c0 001c 	rsb	r0, r0, #28
 8009a9c:	4403      	add	r3, r0
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	9b06      	ldr	r3, [sp, #24]
 8009aa2:	4403      	add	r3, r0
 8009aa4:	4406      	add	r6, r0
 8009aa6:	9306      	str	r3, [sp, #24]
 8009aa8:	9b00      	ldr	r3, [sp, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dd05      	ble.n	8009aba <_dtoa_r+0x83a>
 8009aae:	9902      	ldr	r1, [sp, #8]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4648      	mov	r0, r9
 8009ab4:	f000 fd04 	bl	800a4c0 <__lshift>
 8009ab8:	9002      	str	r0, [sp, #8]
 8009aba:	9b06      	ldr	r3, [sp, #24]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dd05      	ble.n	8009acc <_dtoa_r+0x84c>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	4648      	mov	r0, r9
 8009ac6:	f000 fcfb 	bl	800a4c0 <__lshift>
 8009aca:	4604      	mov	r4, r0
 8009acc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d061      	beq.n	8009b96 <_dtoa_r+0x916>
 8009ad2:	9802      	ldr	r0, [sp, #8]
 8009ad4:	4621      	mov	r1, r4
 8009ad6:	f000 fd5f 	bl	800a598 <__mcmp>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	da5b      	bge.n	8009b96 <_dtoa_r+0x916>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	9902      	ldr	r1, [sp, #8]
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fafd 	bl	800a0e4 <__multadd>
 8009aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	f107 38ff 	add.w	r8, r7, #4294967295
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8177 	beq.w	8009de6 <_dtoa_r+0xb66>
 8009af8:	4629      	mov	r1, r5
 8009afa:	2300      	movs	r3, #0
 8009afc:	220a      	movs	r2, #10
 8009afe:	4648      	mov	r0, r9
 8009b00:	f000 faf0 	bl	800a0e4 <__multadd>
 8009b04:	f1bb 0f00 	cmp.w	fp, #0
 8009b08:	4605      	mov	r5, r0
 8009b0a:	dc6f      	bgt.n	8009bec <_dtoa_r+0x96c>
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	dc49      	bgt.n	8009ba6 <_dtoa_r+0x926>
 8009b12:	e06b      	b.n	8009bec <_dtoa_r+0x96c>
 8009b14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b1a:	e73c      	b.n	8009996 <_dtoa_r+0x716>
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	40240000 	.word	0x40240000
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	1e5c      	subs	r4, r3, #1
 8009b28:	9b08      	ldr	r3, [sp, #32]
 8009b2a:	42a3      	cmp	r3, r4
 8009b2c:	db09      	blt.n	8009b42 <_dtoa_r+0x8c2>
 8009b2e:	1b1c      	subs	r4, r3, r4
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f6bf af30 	bge.w	8009998 <_dtoa_r+0x718>
 8009b38:	9b00      	ldr	r3, [sp, #0]
 8009b3a:	9a03      	ldr	r2, [sp, #12]
 8009b3c:	1a9e      	subs	r6, r3, r2
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e72b      	b.n	800999a <_dtoa_r+0x71a>
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b46:	9408      	str	r4, [sp, #32]
 8009b48:	1ae3      	subs	r3, r4, r3
 8009b4a:	441a      	add	r2, r3
 8009b4c:	9e00      	ldr	r6, [sp, #0]
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	920d      	str	r2, [sp, #52]	@ 0x34
 8009b52:	2400      	movs	r4, #0
 8009b54:	e721      	b.n	800999a <_dtoa_r+0x71a>
 8009b56:	9c08      	ldr	r4, [sp, #32]
 8009b58:	9e00      	ldr	r6, [sp, #0]
 8009b5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009b5c:	e728      	b.n	80099b0 <_dtoa_r+0x730>
 8009b5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009b62:	e751      	b.n	8009a08 <_dtoa_r+0x788>
 8009b64:	9a08      	ldr	r2, [sp, #32]
 8009b66:	9902      	ldr	r1, [sp, #8]
 8009b68:	e750      	b.n	8009a0c <_dtoa_r+0x78c>
 8009b6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b6e:	e751      	b.n	8009a14 <_dtoa_r+0x794>
 8009b70:	2300      	movs	r3, #0
 8009b72:	e779      	b.n	8009a68 <_dtoa_r+0x7e8>
 8009b74:	9b04      	ldr	r3, [sp, #16]
 8009b76:	e777      	b.n	8009a68 <_dtoa_r+0x7e8>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	e779      	b.n	8009a72 <_dtoa_r+0x7f2>
 8009b7e:	d093      	beq.n	8009aa8 <_dtoa_r+0x828>
 8009b80:	9a00      	ldr	r2, [sp, #0]
 8009b82:	331c      	adds	r3, #28
 8009b84:	441a      	add	r2, r3
 8009b86:	9200      	str	r2, [sp, #0]
 8009b88:	9a06      	ldr	r2, [sp, #24]
 8009b8a:	441a      	add	r2, r3
 8009b8c:	441e      	add	r6, r3
 8009b8e:	9206      	str	r2, [sp, #24]
 8009b90:	e78a      	b.n	8009aa8 <_dtoa_r+0x828>
 8009b92:	4603      	mov	r3, r0
 8009b94:	e7f4      	b.n	8009b80 <_dtoa_r+0x900>
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	46b8      	mov	r8, r7
 8009b9c:	dc20      	bgt.n	8009be0 <_dtoa_r+0x960>
 8009b9e:	469b      	mov	fp, r3
 8009ba0:	9b07      	ldr	r3, [sp, #28]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	dd1e      	ble.n	8009be4 <_dtoa_r+0x964>
 8009ba6:	f1bb 0f00 	cmp.w	fp, #0
 8009baa:	f47f adb1 	bne.w	8009710 <_dtoa_r+0x490>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	465b      	mov	r3, fp
 8009bb2:	2205      	movs	r2, #5
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 fa95 	bl	800a0e4 <__multadd>
 8009bba:	4601      	mov	r1, r0
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	9802      	ldr	r0, [sp, #8]
 8009bc0:	f000 fcea 	bl	800a598 <__mcmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f77f ada3 	ble.w	8009710 <_dtoa_r+0x490>
 8009bca:	4656      	mov	r6, sl
 8009bcc:	2331      	movs	r3, #49	@ 0x31
 8009bce:	f806 3b01 	strb.w	r3, [r6], #1
 8009bd2:	f108 0801 	add.w	r8, r8, #1
 8009bd6:	e59f      	b.n	8009718 <_dtoa_r+0x498>
 8009bd8:	9c03      	ldr	r4, [sp, #12]
 8009bda:	46b8      	mov	r8, r7
 8009bdc:	4625      	mov	r5, r4
 8009bde:	e7f4      	b.n	8009bca <_dtoa_r+0x94a>
 8009be0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 8101 	beq.w	8009dee <_dtoa_r+0xb6e>
 8009bec:	2e00      	cmp	r6, #0
 8009bee:	dd05      	ble.n	8009bfc <_dtoa_r+0x97c>
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4632      	mov	r2, r6
 8009bf4:	4648      	mov	r0, r9
 8009bf6:	f000 fc63 	bl	800a4c0 <__lshift>
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	9b08      	ldr	r3, [sp, #32]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d05c      	beq.n	8009cbc <_dtoa_r+0xa3c>
 8009c02:	6869      	ldr	r1, [r5, #4]
 8009c04:	4648      	mov	r0, r9
 8009c06:	f000 fa0b 	bl	800a020 <_Balloc>
 8009c0a:	4606      	mov	r6, r0
 8009c0c:	b928      	cbnz	r0, 8009c1a <_dtoa_r+0x99a>
 8009c0e:	4b82      	ldr	r3, [pc, #520]	@ (8009e18 <_dtoa_r+0xb98>)
 8009c10:	4602      	mov	r2, r0
 8009c12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c16:	f7ff bb4a 	b.w	80092ae <_dtoa_r+0x2e>
 8009c1a:	692a      	ldr	r2, [r5, #16]
 8009c1c:	3202      	adds	r2, #2
 8009c1e:	0092      	lsls	r2, r2, #2
 8009c20:	f105 010c 	add.w	r1, r5, #12
 8009c24:	300c      	adds	r0, #12
 8009c26:	f7ff fa8c 	bl	8009142 <memcpy>
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4648      	mov	r0, r9
 8009c30:	f000 fc46 	bl	800a4c0 <__lshift>
 8009c34:	f10a 0301 	add.w	r3, sl, #1
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	eb0a 030b 	add.w	r3, sl, fp
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	462f      	mov	r7, r5
 8009c48:	9306      	str	r3, [sp, #24]
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	9802      	ldr	r0, [sp, #8]
 8009c50:	4621      	mov	r1, r4
 8009c52:	f103 3bff 	add.w	fp, r3, #4294967295
 8009c56:	f7ff fa89 	bl	800916c <quorem>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	3330      	adds	r3, #48	@ 0x30
 8009c5e:	9003      	str	r0, [sp, #12]
 8009c60:	4639      	mov	r1, r7
 8009c62:	9802      	ldr	r0, [sp, #8]
 8009c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c66:	f000 fc97 	bl	800a598 <__mcmp>
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	9004      	str	r0, [sp, #16]
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4648      	mov	r0, r9
 8009c72:	f000 fcad 	bl	800a5d0 <__mdiff>
 8009c76:	68c2      	ldr	r2, [r0, #12]
 8009c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	bb02      	cbnz	r2, 8009cc0 <_dtoa_r+0xa40>
 8009c7e:	4601      	mov	r1, r0
 8009c80:	9802      	ldr	r0, [sp, #8]
 8009c82:	f000 fc89 	bl	800a598 <__mcmp>
 8009c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c88:	4602      	mov	r2, r0
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c92:	f000 fa05 	bl	800a0a0 <_Bfree>
 8009c96:	9b07      	ldr	r3, [sp, #28]
 8009c98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009c9a:	9e00      	ldr	r6, [sp, #0]
 8009c9c:	ea42 0103 	orr.w	r1, r2, r3
 8009ca0:	9b06      	ldr	r3, [sp, #24]
 8009ca2:	4319      	orrs	r1, r3
 8009ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca6:	d10d      	bne.n	8009cc4 <_dtoa_r+0xa44>
 8009ca8:	2b39      	cmp	r3, #57	@ 0x39
 8009caa:	d027      	beq.n	8009cfc <_dtoa_r+0xa7c>
 8009cac:	9a04      	ldr	r2, [sp, #16]
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	dd01      	ble.n	8009cb6 <_dtoa_r+0xa36>
 8009cb2:	9b03      	ldr	r3, [sp, #12]
 8009cb4:	3331      	adds	r3, #49	@ 0x31
 8009cb6:	f88b 3000 	strb.w	r3, [fp]
 8009cba:	e52e      	b.n	800971a <_dtoa_r+0x49a>
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	e7b9      	b.n	8009c34 <_dtoa_r+0x9b4>
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	e7e2      	b.n	8009c8a <_dtoa_r+0xa0a>
 8009cc4:	9904      	ldr	r1, [sp, #16]
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	db04      	blt.n	8009cd4 <_dtoa_r+0xa54>
 8009cca:	9807      	ldr	r0, [sp, #28]
 8009ccc:	4301      	orrs	r1, r0
 8009cce:	9806      	ldr	r0, [sp, #24]
 8009cd0:	4301      	orrs	r1, r0
 8009cd2:	d120      	bne.n	8009d16 <_dtoa_r+0xa96>
 8009cd4:	2a00      	cmp	r2, #0
 8009cd6:	ddee      	ble.n	8009cb6 <_dtoa_r+0xa36>
 8009cd8:	9902      	ldr	r1, [sp, #8]
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	4648      	mov	r0, r9
 8009ce0:	f000 fbee 	bl	800a4c0 <__lshift>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	9002      	str	r0, [sp, #8]
 8009ce8:	f000 fc56 	bl	800a598 <__mcmp>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	dc02      	bgt.n	8009cf8 <_dtoa_r+0xa78>
 8009cf2:	d1e0      	bne.n	8009cb6 <_dtoa_r+0xa36>
 8009cf4:	07da      	lsls	r2, r3, #31
 8009cf6:	d5de      	bpl.n	8009cb6 <_dtoa_r+0xa36>
 8009cf8:	2b39      	cmp	r3, #57	@ 0x39
 8009cfa:	d1da      	bne.n	8009cb2 <_dtoa_r+0xa32>
 8009cfc:	2339      	movs	r3, #57	@ 0x39
 8009cfe:	f88b 3000 	strb.w	r3, [fp]
 8009d02:	4633      	mov	r3, r6
 8009d04:	461e      	mov	r6, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d0c:	2a39      	cmp	r2, #57	@ 0x39
 8009d0e:	d04e      	beq.n	8009dae <_dtoa_r+0xb2e>
 8009d10:	3201      	adds	r2, #1
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e501      	b.n	800971a <_dtoa_r+0x49a>
 8009d16:	2a00      	cmp	r2, #0
 8009d18:	dd03      	ble.n	8009d22 <_dtoa_r+0xaa2>
 8009d1a:	2b39      	cmp	r3, #57	@ 0x39
 8009d1c:	d0ee      	beq.n	8009cfc <_dtoa_r+0xa7c>
 8009d1e:	3301      	adds	r3, #1
 8009d20:	e7c9      	b.n	8009cb6 <_dtoa_r+0xa36>
 8009d22:	9a00      	ldr	r2, [sp, #0]
 8009d24:	9908      	ldr	r1, [sp, #32]
 8009d26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d2a:	428a      	cmp	r2, r1
 8009d2c:	d028      	beq.n	8009d80 <_dtoa_r+0xb00>
 8009d2e:	9902      	ldr	r1, [sp, #8]
 8009d30:	2300      	movs	r3, #0
 8009d32:	220a      	movs	r2, #10
 8009d34:	4648      	mov	r0, r9
 8009d36:	f000 f9d5 	bl	800a0e4 <__multadd>
 8009d3a:	42af      	cmp	r7, r5
 8009d3c:	9002      	str	r0, [sp, #8]
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	f04f 020a 	mov.w	r2, #10
 8009d46:	4639      	mov	r1, r7
 8009d48:	4648      	mov	r0, r9
 8009d4a:	d107      	bne.n	8009d5c <_dtoa_r+0xadc>
 8009d4c:	f000 f9ca 	bl	800a0e4 <__multadd>
 8009d50:	4607      	mov	r7, r0
 8009d52:	4605      	mov	r5, r0
 8009d54:	9b00      	ldr	r3, [sp, #0]
 8009d56:	3301      	adds	r3, #1
 8009d58:	9300      	str	r3, [sp, #0]
 8009d5a:	e777      	b.n	8009c4c <_dtoa_r+0x9cc>
 8009d5c:	f000 f9c2 	bl	800a0e4 <__multadd>
 8009d60:	4629      	mov	r1, r5
 8009d62:	4607      	mov	r7, r0
 8009d64:	2300      	movs	r3, #0
 8009d66:	220a      	movs	r2, #10
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f000 f9bb 	bl	800a0e4 <__multadd>
 8009d6e:	4605      	mov	r5, r0
 8009d70:	e7f0      	b.n	8009d54 <_dtoa_r+0xad4>
 8009d72:	f1bb 0f00 	cmp.w	fp, #0
 8009d76:	bfcc      	ite	gt
 8009d78:	465e      	movgt	r6, fp
 8009d7a:	2601      	movle	r6, #1
 8009d7c:	4456      	add	r6, sl
 8009d7e:	2700      	movs	r7, #0
 8009d80:	9902      	ldr	r1, [sp, #8]
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2201      	movs	r2, #1
 8009d86:	4648      	mov	r0, r9
 8009d88:	f000 fb9a 	bl	800a4c0 <__lshift>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	9002      	str	r0, [sp, #8]
 8009d90:	f000 fc02 	bl	800a598 <__mcmp>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	dcb4      	bgt.n	8009d02 <_dtoa_r+0xa82>
 8009d98:	d102      	bne.n	8009da0 <_dtoa_r+0xb20>
 8009d9a:	9b00      	ldr	r3, [sp, #0]
 8009d9c:	07db      	lsls	r3, r3, #31
 8009d9e:	d4b0      	bmi.n	8009d02 <_dtoa_r+0xa82>
 8009da0:	4633      	mov	r3, r6
 8009da2:	461e      	mov	r6, r3
 8009da4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009da8:	2a30      	cmp	r2, #48	@ 0x30
 8009daa:	d0fa      	beq.n	8009da2 <_dtoa_r+0xb22>
 8009dac:	e4b5      	b.n	800971a <_dtoa_r+0x49a>
 8009dae:	459a      	cmp	sl, r3
 8009db0:	d1a8      	bne.n	8009d04 <_dtoa_r+0xa84>
 8009db2:	2331      	movs	r3, #49	@ 0x31
 8009db4:	f108 0801 	add.w	r8, r8, #1
 8009db8:	f88a 3000 	strb.w	r3, [sl]
 8009dbc:	e4ad      	b.n	800971a <_dtoa_r+0x49a>
 8009dbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009dc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009e1c <_dtoa_r+0xb9c>
 8009dc4:	b11b      	cbz	r3, 8009dce <_dtoa_r+0xb4e>
 8009dc6:	f10a 0308 	add.w	r3, sl, #8
 8009dca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	4650      	mov	r0, sl
 8009dd0:	b017      	add	sp, #92	@ 0x5c
 8009dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd6:	9b07      	ldr	r3, [sp, #28]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	f77f ae2e 	ble.w	8009a3a <_dtoa_r+0x7ba>
 8009dde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de0:	9308      	str	r3, [sp, #32]
 8009de2:	2001      	movs	r0, #1
 8009de4:	e64d      	b.n	8009a82 <_dtoa_r+0x802>
 8009de6:	f1bb 0f00 	cmp.w	fp, #0
 8009dea:	f77f aed9 	ble.w	8009ba0 <_dtoa_r+0x920>
 8009dee:	4656      	mov	r6, sl
 8009df0:	9802      	ldr	r0, [sp, #8]
 8009df2:	4621      	mov	r1, r4
 8009df4:	f7ff f9ba 	bl	800916c <quorem>
 8009df8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8009e00:	eba6 020a 	sub.w	r2, r6, sl
 8009e04:	4593      	cmp	fp, r2
 8009e06:	ddb4      	ble.n	8009d72 <_dtoa_r+0xaf2>
 8009e08:	9902      	ldr	r1, [sp, #8]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	220a      	movs	r2, #10
 8009e0e:	4648      	mov	r0, r9
 8009e10:	f000 f968 	bl	800a0e4 <__multadd>
 8009e14:	9002      	str	r0, [sp, #8]
 8009e16:	e7eb      	b.n	8009df0 <_dtoa_r+0xb70>
 8009e18:	0800cabd 	.word	0x0800cabd
 8009e1c:	0800ca41 	.word	0x0800ca41

08009e20 <_free_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	4605      	mov	r5, r0
 8009e24:	2900      	cmp	r1, #0
 8009e26:	d041      	beq.n	8009eac <_free_r+0x8c>
 8009e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e2c:	1f0c      	subs	r4, r1, #4
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	18e4      	addlt	r4, r4, r3
 8009e34:	f000 f8e8 	bl	800a008 <__malloc_lock>
 8009e38:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb0 <_free_r+0x90>)
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	b933      	cbnz	r3, 8009e4c <_free_r+0x2c>
 8009e3e:	6063      	str	r3, [r4, #4]
 8009e40:	6014      	str	r4, [r2, #0]
 8009e42:	4628      	mov	r0, r5
 8009e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e48:	f000 b8e4 	b.w	800a014 <__malloc_unlock>
 8009e4c:	42a3      	cmp	r3, r4
 8009e4e:	d908      	bls.n	8009e62 <_free_r+0x42>
 8009e50:	6820      	ldr	r0, [r4, #0]
 8009e52:	1821      	adds	r1, r4, r0
 8009e54:	428b      	cmp	r3, r1
 8009e56:	bf01      	itttt	eq
 8009e58:	6819      	ldreq	r1, [r3, #0]
 8009e5a:	685b      	ldreq	r3, [r3, #4]
 8009e5c:	1809      	addeq	r1, r1, r0
 8009e5e:	6021      	streq	r1, [r4, #0]
 8009e60:	e7ed      	b.n	8009e3e <_free_r+0x1e>
 8009e62:	461a      	mov	r2, r3
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	b10b      	cbz	r3, 8009e6c <_free_r+0x4c>
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d9fa      	bls.n	8009e62 <_free_r+0x42>
 8009e6c:	6811      	ldr	r1, [r2, #0]
 8009e6e:	1850      	adds	r0, r2, r1
 8009e70:	42a0      	cmp	r0, r4
 8009e72:	d10b      	bne.n	8009e8c <_free_r+0x6c>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	4401      	add	r1, r0
 8009e78:	1850      	adds	r0, r2, r1
 8009e7a:	4283      	cmp	r3, r0
 8009e7c:	6011      	str	r1, [r2, #0]
 8009e7e:	d1e0      	bne.n	8009e42 <_free_r+0x22>
 8009e80:	6818      	ldr	r0, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	6053      	str	r3, [r2, #4]
 8009e86:	4408      	add	r0, r1
 8009e88:	6010      	str	r0, [r2, #0]
 8009e8a:	e7da      	b.n	8009e42 <_free_r+0x22>
 8009e8c:	d902      	bls.n	8009e94 <_free_r+0x74>
 8009e8e:	230c      	movs	r3, #12
 8009e90:	602b      	str	r3, [r5, #0]
 8009e92:	e7d6      	b.n	8009e42 <_free_r+0x22>
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	1821      	adds	r1, r4, r0
 8009e98:	428b      	cmp	r3, r1
 8009e9a:	bf04      	itt	eq
 8009e9c:	6819      	ldreq	r1, [r3, #0]
 8009e9e:	685b      	ldreq	r3, [r3, #4]
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	bf04      	itt	eq
 8009ea4:	1809      	addeq	r1, r1, r0
 8009ea6:	6021      	streq	r1, [r4, #0]
 8009ea8:	6054      	str	r4, [r2, #4]
 8009eaa:	e7ca      	b.n	8009e42 <_free_r+0x22>
 8009eac:	bd38      	pop	{r3, r4, r5, pc}
 8009eae:	bf00      	nop
 8009eb0:	200005d4 	.word	0x200005d4

08009eb4 <malloc>:
 8009eb4:	4b02      	ldr	r3, [pc, #8]	@ (8009ec0 <malloc+0xc>)
 8009eb6:	4601      	mov	r1, r0
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	f000 b825 	b.w	8009f08 <_malloc_r>
 8009ebe:	bf00      	nop
 8009ec0:	20000024 	.word	0x20000024

08009ec4 <sbrk_aligned>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	4e0f      	ldr	r6, [pc, #60]	@ (8009f04 <sbrk_aligned+0x40>)
 8009ec8:	460c      	mov	r4, r1
 8009eca:	6831      	ldr	r1, [r6, #0]
 8009ecc:	4605      	mov	r5, r0
 8009ece:	b911      	cbnz	r1, 8009ed6 <sbrk_aligned+0x12>
 8009ed0:	f001 ffca 	bl	800be68 <_sbrk_r>
 8009ed4:	6030      	str	r0, [r6, #0]
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f001 ffc5 	bl	800be68 <_sbrk_r>
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	d103      	bne.n	8009eea <sbrk_aligned+0x26>
 8009ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	bd70      	pop	{r4, r5, r6, pc}
 8009eea:	1cc4      	adds	r4, r0, #3
 8009eec:	f024 0403 	bic.w	r4, r4, #3
 8009ef0:	42a0      	cmp	r0, r4
 8009ef2:	d0f8      	beq.n	8009ee6 <sbrk_aligned+0x22>
 8009ef4:	1a21      	subs	r1, r4, r0
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f001 ffb6 	bl	800be68 <_sbrk_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d1f2      	bne.n	8009ee6 <sbrk_aligned+0x22>
 8009f00:	e7ef      	b.n	8009ee2 <sbrk_aligned+0x1e>
 8009f02:	bf00      	nop
 8009f04:	200005d0 	.word	0x200005d0

08009f08 <_malloc_r>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	1ccd      	adds	r5, r1, #3
 8009f0e:	f025 0503 	bic.w	r5, r5, #3
 8009f12:	3508      	adds	r5, #8
 8009f14:	2d0c      	cmp	r5, #12
 8009f16:	bf38      	it	cc
 8009f18:	250c      	movcc	r5, #12
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	db01      	blt.n	8009f24 <_malloc_r+0x1c>
 8009f20:	42a9      	cmp	r1, r5
 8009f22:	d904      	bls.n	8009f2e <_malloc_r+0x26>
 8009f24:	230c      	movs	r3, #12
 8009f26:	6033      	str	r3, [r6, #0]
 8009f28:	2000      	movs	r0, #0
 8009f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a004 <_malloc_r+0xfc>
 8009f32:	f000 f869 	bl	800a008 <__malloc_lock>
 8009f36:	f8d8 3000 	ldr.w	r3, [r8]
 8009f3a:	461c      	mov	r4, r3
 8009f3c:	bb44      	cbnz	r4, 8009f90 <_malloc_r+0x88>
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff ffbf 	bl	8009ec4 <sbrk_aligned>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	4604      	mov	r4, r0
 8009f4a:	d158      	bne.n	8009ffe <_malloc_r+0xf6>
 8009f4c:	f8d8 4000 	ldr.w	r4, [r8]
 8009f50:	4627      	mov	r7, r4
 8009f52:	2f00      	cmp	r7, #0
 8009f54:	d143      	bne.n	8009fde <_malloc_r+0xd6>
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	d04b      	beq.n	8009ff2 <_malloc_r+0xea>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	4630      	mov	r0, r6
 8009f60:	eb04 0903 	add.w	r9, r4, r3
 8009f64:	f001 ff80 	bl	800be68 <_sbrk_r>
 8009f68:	4581      	cmp	r9, r0
 8009f6a:	d142      	bne.n	8009ff2 <_malloc_r+0xea>
 8009f6c:	6821      	ldr	r1, [r4, #0]
 8009f6e:	1a6d      	subs	r5, r5, r1
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7ff ffa6 	bl	8009ec4 <sbrk_aligned>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d03a      	beq.n	8009ff2 <_malloc_r+0xea>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	442b      	add	r3, r5
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	f8d8 3000 	ldr.w	r3, [r8]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	bb62      	cbnz	r2, 8009fe4 <_malloc_r+0xdc>
 8009f8a:	f8c8 7000 	str.w	r7, [r8]
 8009f8e:	e00f      	b.n	8009fb0 <_malloc_r+0xa8>
 8009f90:	6822      	ldr	r2, [r4, #0]
 8009f92:	1b52      	subs	r2, r2, r5
 8009f94:	d420      	bmi.n	8009fd8 <_malloc_r+0xd0>
 8009f96:	2a0b      	cmp	r2, #11
 8009f98:	d917      	bls.n	8009fca <_malloc_r+0xc2>
 8009f9a:	1961      	adds	r1, r4, r5
 8009f9c:	42a3      	cmp	r3, r4
 8009f9e:	6025      	str	r5, [r4, #0]
 8009fa0:	bf18      	it	ne
 8009fa2:	6059      	strne	r1, [r3, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	bf08      	it	eq
 8009fa8:	f8c8 1000 	streq.w	r1, [r8]
 8009fac:	5162      	str	r2, [r4, r5]
 8009fae:	604b      	str	r3, [r1, #4]
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f000 f82f 	bl	800a014 <__malloc_unlock>
 8009fb6:	f104 000b 	add.w	r0, r4, #11
 8009fba:	1d23      	adds	r3, r4, #4
 8009fbc:	f020 0007 	bic.w	r0, r0, #7
 8009fc0:	1ac2      	subs	r2, r0, r3
 8009fc2:	bf1c      	itt	ne
 8009fc4:	1a1b      	subne	r3, r3, r0
 8009fc6:	50a3      	strne	r3, [r4, r2]
 8009fc8:	e7af      	b.n	8009f2a <_malloc_r+0x22>
 8009fca:	6862      	ldr	r2, [r4, #4]
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	bf0c      	ite	eq
 8009fd0:	f8c8 2000 	streq.w	r2, [r8]
 8009fd4:	605a      	strne	r2, [r3, #4]
 8009fd6:	e7eb      	b.n	8009fb0 <_malloc_r+0xa8>
 8009fd8:	4623      	mov	r3, r4
 8009fda:	6864      	ldr	r4, [r4, #4]
 8009fdc:	e7ae      	b.n	8009f3c <_malloc_r+0x34>
 8009fde:	463c      	mov	r4, r7
 8009fe0:	687f      	ldr	r7, [r7, #4]
 8009fe2:	e7b6      	b.n	8009f52 <_malloc_r+0x4a>
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	d1fb      	bne.n	8009fe4 <_malloc_r+0xdc>
 8009fec:	2300      	movs	r3, #0
 8009fee:	6053      	str	r3, [r2, #4]
 8009ff0:	e7de      	b.n	8009fb0 <_malloc_r+0xa8>
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	6033      	str	r3, [r6, #0]
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f000 f80c 	bl	800a014 <__malloc_unlock>
 8009ffc:	e794      	b.n	8009f28 <_malloc_r+0x20>
 8009ffe:	6005      	str	r5, [r0, #0]
 800a000:	e7d6      	b.n	8009fb0 <_malloc_r+0xa8>
 800a002:	bf00      	nop
 800a004:	200005d4 	.word	0x200005d4

0800a008 <__malloc_lock>:
 800a008:	4801      	ldr	r0, [pc, #4]	@ (800a010 <__malloc_lock+0x8>)
 800a00a:	f7ff b898 	b.w	800913e <__retarget_lock_acquire_recursive>
 800a00e:	bf00      	nop
 800a010:	200005cc 	.word	0x200005cc

0800a014 <__malloc_unlock>:
 800a014:	4801      	ldr	r0, [pc, #4]	@ (800a01c <__malloc_unlock+0x8>)
 800a016:	f7ff b893 	b.w	8009140 <__retarget_lock_release_recursive>
 800a01a:	bf00      	nop
 800a01c:	200005cc 	.word	0x200005cc

0800a020 <_Balloc>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	69c6      	ldr	r6, [r0, #28]
 800a024:	4604      	mov	r4, r0
 800a026:	460d      	mov	r5, r1
 800a028:	b976      	cbnz	r6, 800a048 <_Balloc+0x28>
 800a02a:	2010      	movs	r0, #16
 800a02c:	f7ff ff42 	bl	8009eb4 <malloc>
 800a030:	4602      	mov	r2, r0
 800a032:	61e0      	str	r0, [r4, #28]
 800a034:	b920      	cbnz	r0, 800a040 <_Balloc+0x20>
 800a036:	4b18      	ldr	r3, [pc, #96]	@ (800a098 <_Balloc+0x78>)
 800a038:	4818      	ldr	r0, [pc, #96]	@ (800a09c <_Balloc+0x7c>)
 800a03a:	216b      	movs	r1, #107	@ 0x6b
 800a03c:	f001 ff2c 	bl	800be98 <__assert_func>
 800a040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a044:	6006      	str	r6, [r0, #0]
 800a046:	60c6      	str	r6, [r0, #12]
 800a048:	69e6      	ldr	r6, [r4, #28]
 800a04a:	68f3      	ldr	r3, [r6, #12]
 800a04c:	b183      	cbz	r3, 800a070 <_Balloc+0x50>
 800a04e:	69e3      	ldr	r3, [r4, #28]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a056:	b9b8      	cbnz	r0, 800a088 <_Balloc+0x68>
 800a058:	2101      	movs	r1, #1
 800a05a:	fa01 f605 	lsl.w	r6, r1, r5
 800a05e:	1d72      	adds	r2, r6, #5
 800a060:	0092      	lsls	r2, r2, #2
 800a062:	4620      	mov	r0, r4
 800a064:	f001 ff36 	bl	800bed4 <_calloc_r>
 800a068:	b160      	cbz	r0, 800a084 <_Balloc+0x64>
 800a06a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a06e:	e00e      	b.n	800a08e <_Balloc+0x6e>
 800a070:	2221      	movs	r2, #33	@ 0x21
 800a072:	2104      	movs	r1, #4
 800a074:	4620      	mov	r0, r4
 800a076:	f001 ff2d 	bl	800bed4 <_calloc_r>
 800a07a:	69e3      	ldr	r3, [r4, #28]
 800a07c:	60f0      	str	r0, [r6, #12]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e4      	bne.n	800a04e <_Balloc+0x2e>
 800a084:	2000      	movs	r0, #0
 800a086:	bd70      	pop	{r4, r5, r6, pc}
 800a088:	6802      	ldr	r2, [r0, #0]
 800a08a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a08e:	2300      	movs	r3, #0
 800a090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a094:	e7f7      	b.n	800a086 <_Balloc+0x66>
 800a096:	bf00      	nop
 800a098:	0800ca4e 	.word	0x0800ca4e
 800a09c:	0800cace 	.word	0x0800cace

0800a0a0 <_Bfree>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	69c6      	ldr	r6, [r0, #28]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	b976      	cbnz	r6, 800a0c8 <_Bfree+0x28>
 800a0aa:	2010      	movs	r0, #16
 800a0ac:	f7ff ff02 	bl	8009eb4 <malloc>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	61e8      	str	r0, [r5, #28]
 800a0b4:	b920      	cbnz	r0, 800a0c0 <_Bfree+0x20>
 800a0b6:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <_Bfree+0x3c>)
 800a0b8:	4809      	ldr	r0, [pc, #36]	@ (800a0e0 <_Bfree+0x40>)
 800a0ba:	218f      	movs	r1, #143	@ 0x8f
 800a0bc:	f001 feec 	bl	800be98 <__assert_func>
 800a0c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0c4:	6006      	str	r6, [r0, #0]
 800a0c6:	60c6      	str	r6, [r0, #12]
 800a0c8:	b13c      	cbz	r4, 800a0da <_Bfree+0x3a>
 800a0ca:	69eb      	ldr	r3, [r5, #28]
 800a0cc:	6862      	ldr	r2, [r4, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0d4:	6021      	str	r1, [r4, #0]
 800a0d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0da:	bd70      	pop	{r4, r5, r6, pc}
 800a0dc:	0800ca4e 	.word	0x0800ca4e
 800a0e0:	0800cace 	.word	0x0800cace

0800a0e4 <__multadd>:
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	690d      	ldr	r5, [r1, #16]
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	461e      	mov	r6, r3
 800a0f0:	f101 0c14 	add.w	ip, r1, #20
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a0fa:	b299      	uxth	r1, r3
 800a0fc:	fb02 6101 	mla	r1, r2, r1, r6
 800a100:	0c1e      	lsrs	r6, r3, #16
 800a102:	0c0b      	lsrs	r3, r1, #16
 800a104:	fb02 3306 	mla	r3, r2, r6, r3
 800a108:	b289      	uxth	r1, r1
 800a10a:	3001      	adds	r0, #1
 800a10c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a110:	4285      	cmp	r5, r0
 800a112:	f84c 1b04 	str.w	r1, [ip], #4
 800a116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a11a:	dcec      	bgt.n	800a0f6 <__multadd+0x12>
 800a11c:	b30e      	cbz	r6, 800a162 <__multadd+0x7e>
 800a11e:	68a3      	ldr	r3, [r4, #8]
 800a120:	42ab      	cmp	r3, r5
 800a122:	dc19      	bgt.n	800a158 <__multadd+0x74>
 800a124:	6861      	ldr	r1, [r4, #4]
 800a126:	4638      	mov	r0, r7
 800a128:	3101      	adds	r1, #1
 800a12a:	f7ff ff79 	bl	800a020 <_Balloc>
 800a12e:	4680      	mov	r8, r0
 800a130:	b928      	cbnz	r0, 800a13e <__multadd+0x5a>
 800a132:	4602      	mov	r2, r0
 800a134:	4b0c      	ldr	r3, [pc, #48]	@ (800a168 <__multadd+0x84>)
 800a136:	480d      	ldr	r0, [pc, #52]	@ (800a16c <__multadd+0x88>)
 800a138:	21ba      	movs	r1, #186	@ 0xba
 800a13a:	f001 fead 	bl	800be98 <__assert_func>
 800a13e:	6922      	ldr	r2, [r4, #16]
 800a140:	3202      	adds	r2, #2
 800a142:	f104 010c 	add.w	r1, r4, #12
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	300c      	adds	r0, #12
 800a14a:	f7fe fffa 	bl	8009142 <memcpy>
 800a14e:	4621      	mov	r1, r4
 800a150:	4638      	mov	r0, r7
 800a152:	f7ff ffa5 	bl	800a0a0 <_Bfree>
 800a156:	4644      	mov	r4, r8
 800a158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a15c:	3501      	adds	r5, #1
 800a15e:	615e      	str	r6, [r3, #20]
 800a160:	6125      	str	r5, [r4, #16]
 800a162:	4620      	mov	r0, r4
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	0800cabd 	.word	0x0800cabd
 800a16c:	0800cace 	.word	0x0800cace

0800a170 <__s2b>:
 800a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a174:	460c      	mov	r4, r1
 800a176:	4615      	mov	r5, r2
 800a178:	461f      	mov	r7, r3
 800a17a:	2209      	movs	r2, #9
 800a17c:	3308      	adds	r3, #8
 800a17e:	4606      	mov	r6, r0
 800a180:	fb93 f3f2 	sdiv	r3, r3, r2
 800a184:	2100      	movs	r1, #0
 800a186:	2201      	movs	r2, #1
 800a188:	429a      	cmp	r2, r3
 800a18a:	db09      	blt.n	800a1a0 <__s2b+0x30>
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7ff ff47 	bl	800a020 <_Balloc>
 800a192:	b940      	cbnz	r0, 800a1a6 <__s2b+0x36>
 800a194:	4602      	mov	r2, r0
 800a196:	4b19      	ldr	r3, [pc, #100]	@ (800a1fc <__s2b+0x8c>)
 800a198:	4819      	ldr	r0, [pc, #100]	@ (800a200 <__s2b+0x90>)
 800a19a:	21d3      	movs	r1, #211	@ 0xd3
 800a19c:	f001 fe7c 	bl	800be98 <__assert_func>
 800a1a0:	0052      	lsls	r2, r2, #1
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	e7f0      	b.n	800a188 <__s2b+0x18>
 800a1a6:	9b08      	ldr	r3, [sp, #32]
 800a1a8:	6143      	str	r3, [r0, #20]
 800a1aa:	2d09      	cmp	r5, #9
 800a1ac:	f04f 0301 	mov.w	r3, #1
 800a1b0:	6103      	str	r3, [r0, #16]
 800a1b2:	dd16      	ble.n	800a1e2 <__s2b+0x72>
 800a1b4:	f104 0909 	add.w	r9, r4, #9
 800a1b8:	46c8      	mov	r8, r9
 800a1ba:	442c      	add	r4, r5
 800a1bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	3b30      	subs	r3, #48	@ 0x30
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7ff ff8c 	bl	800a0e4 <__multadd>
 800a1cc:	45a0      	cmp	r8, r4
 800a1ce:	d1f5      	bne.n	800a1bc <__s2b+0x4c>
 800a1d0:	f1a5 0408 	sub.w	r4, r5, #8
 800a1d4:	444c      	add	r4, r9
 800a1d6:	1b2d      	subs	r5, r5, r4
 800a1d8:	1963      	adds	r3, r4, r5
 800a1da:	42bb      	cmp	r3, r7
 800a1dc:	db04      	blt.n	800a1e8 <__s2b+0x78>
 800a1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e2:	340a      	adds	r4, #10
 800a1e4:	2509      	movs	r5, #9
 800a1e6:	e7f6      	b.n	800a1d6 <__s2b+0x66>
 800a1e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1ec:	4601      	mov	r1, r0
 800a1ee:	3b30      	subs	r3, #48	@ 0x30
 800a1f0:	220a      	movs	r2, #10
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	f7ff ff76 	bl	800a0e4 <__multadd>
 800a1f8:	e7ee      	b.n	800a1d8 <__s2b+0x68>
 800a1fa:	bf00      	nop
 800a1fc:	0800cabd 	.word	0x0800cabd
 800a200:	0800cace 	.word	0x0800cace

0800a204 <__hi0bits>:
 800a204:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a208:	4603      	mov	r3, r0
 800a20a:	bf36      	itet	cc
 800a20c:	0403      	lslcc	r3, r0, #16
 800a20e:	2000      	movcs	r0, #0
 800a210:	2010      	movcc	r0, #16
 800a212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a216:	bf3c      	itt	cc
 800a218:	021b      	lslcc	r3, r3, #8
 800a21a:	3008      	addcc	r0, #8
 800a21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a220:	bf3c      	itt	cc
 800a222:	011b      	lslcc	r3, r3, #4
 800a224:	3004      	addcc	r0, #4
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a22a:	bf3c      	itt	cc
 800a22c:	009b      	lslcc	r3, r3, #2
 800a22e:	3002      	addcc	r0, #2
 800a230:	2b00      	cmp	r3, #0
 800a232:	db05      	blt.n	800a240 <__hi0bits+0x3c>
 800a234:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a238:	f100 0001 	add.w	r0, r0, #1
 800a23c:	bf08      	it	eq
 800a23e:	2020      	moveq	r0, #32
 800a240:	4770      	bx	lr

0800a242 <__lo0bits>:
 800a242:	6803      	ldr	r3, [r0, #0]
 800a244:	4602      	mov	r2, r0
 800a246:	f013 0007 	ands.w	r0, r3, #7
 800a24a:	d00b      	beq.n	800a264 <__lo0bits+0x22>
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d421      	bmi.n	800a294 <__lo0bits+0x52>
 800a250:	0798      	lsls	r0, r3, #30
 800a252:	bf49      	itett	mi
 800a254:	085b      	lsrmi	r3, r3, #1
 800a256:	089b      	lsrpl	r3, r3, #2
 800a258:	2001      	movmi	r0, #1
 800a25a:	6013      	strmi	r3, [r2, #0]
 800a25c:	bf5c      	itt	pl
 800a25e:	6013      	strpl	r3, [r2, #0]
 800a260:	2002      	movpl	r0, #2
 800a262:	4770      	bx	lr
 800a264:	b299      	uxth	r1, r3
 800a266:	b909      	cbnz	r1, 800a26c <__lo0bits+0x2a>
 800a268:	0c1b      	lsrs	r3, r3, #16
 800a26a:	2010      	movs	r0, #16
 800a26c:	b2d9      	uxtb	r1, r3
 800a26e:	b909      	cbnz	r1, 800a274 <__lo0bits+0x32>
 800a270:	3008      	adds	r0, #8
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	0719      	lsls	r1, r3, #28
 800a276:	bf04      	itt	eq
 800a278:	091b      	lsreq	r3, r3, #4
 800a27a:	3004      	addeq	r0, #4
 800a27c:	0799      	lsls	r1, r3, #30
 800a27e:	bf04      	itt	eq
 800a280:	089b      	lsreq	r3, r3, #2
 800a282:	3002      	addeq	r0, #2
 800a284:	07d9      	lsls	r1, r3, #31
 800a286:	d403      	bmi.n	800a290 <__lo0bits+0x4e>
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	f100 0001 	add.w	r0, r0, #1
 800a28e:	d003      	beq.n	800a298 <__lo0bits+0x56>
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	4770      	bx	lr
 800a294:	2000      	movs	r0, #0
 800a296:	4770      	bx	lr
 800a298:	2020      	movs	r0, #32
 800a29a:	4770      	bx	lr

0800a29c <__i2b>:
 800a29c:	b510      	push	{r4, lr}
 800a29e:	460c      	mov	r4, r1
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	f7ff febd 	bl	800a020 <_Balloc>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	b928      	cbnz	r0, 800a2b6 <__i2b+0x1a>
 800a2aa:	4b05      	ldr	r3, [pc, #20]	@ (800a2c0 <__i2b+0x24>)
 800a2ac:	4805      	ldr	r0, [pc, #20]	@ (800a2c4 <__i2b+0x28>)
 800a2ae:	f240 1145 	movw	r1, #325	@ 0x145
 800a2b2:	f001 fdf1 	bl	800be98 <__assert_func>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	6144      	str	r4, [r0, #20]
 800a2ba:	6103      	str	r3, [r0, #16]
 800a2bc:	bd10      	pop	{r4, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800cabd 	.word	0x0800cabd
 800a2c4:	0800cace 	.word	0x0800cace

0800a2c8 <__multiply>:
 800a2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2cc:	4617      	mov	r7, r2
 800a2ce:	690a      	ldr	r2, [r1, #16]
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	bfa8      	it	ge
 800a2d6:	463b      	movge	r3, r7
 800a2d8:	4689      	mov	r9, r1
 800a2da:	bfa4      	itt	ge
 800a2dc:	460f      	movge	r7, r1
 800a2de:	4699      	movge	r9, r3
 800a2e0:	693d      	ldr	r5, [r7, #16]
 800a2e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	eb05 060a 	add.w	r6, r5, sl
 800a2ee:	42b3      	cmp	r3, r6
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	bfb8      	it	lt
 800a2f4:	3101      	addlt	r1, #1
 800a2f6:	f7ff fe93 	bl	800a020 <_Balloc>
 800a2fa:	b930      	cbnz	r0, 800a30a <__multiply+0x42>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	4b41      	ldr	r3, [pc, #260]	@ (800a404 <__multiply+0x13c>)
 800a300:	4841      	ldr	r0, [pc, #260]	@ (800a408 <__multiply+0x140>)
 800a302:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a306:	f001 fdc7 	bl	800be98 <__assert_func>
 800a30a:	f100 0414 	add.w	r4, r0, #20
 800a30e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a312:	4623      	mov	r3, r4
 800a314:	2200      	movs	r2, #0
 800a316:	4573      	cmp	r3, lr
 800a318:	d320      	bcc.n	800a35c <__multiply+0x94>
 800a31a:	f107 0814 	add.w	r8, r7, #20
 800a31e:	f109 0114 	add.w	r1, r9, #20
 800a322:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a326:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a32a:	9302      	str	r3, [sp, #8]
 800a32c:	1beb      	subs	r3, r5, r7
 800a32e:	3b15      	subs	r3, #21
 800a330:	f023 0303 	bic.w	r3, r3, #3
 800a334:	3304      	adds	r3, #4
 800a336:	3715      	adds	r7, #21
 800a338:	42bd      	cmp	r5, r7
 800a33a:	bf38      	it	cc
 800a33c:	2304      	movcc	r3, #4
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	428b      	cmp	r3, r1
 800a346:	d80c      	bhi.n	800a362 <__multiply+0x9a>
 800a348:	2e00      	cmp	r6, #0
 800a34a:	dd03      	ble.n	800a354 <__multiply+0x8c>
 800a34c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a350:	2b00      	cmp	r3, #0
 800a352:	d055      	beq.n	800a400 <__multiply+0x138>
 800a354:	6106      	str	r6, [r0, #16]
 800a356:	b005      	add	sp, #20
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	f843 2b04 	str.w	r2, [r3], #4
 800a360:	e7d9      	b.n	800a316 <__multiply+0x4e>
 800a362:	f8b1 a000 	ldrh.w	sl, [r1]
 800a366:	f1ba 0f00 	cmp.w	sl, #0
 800a36a:	d01f      	beq.n	800a3ac <__multiply+0xe4>
 800a36c:	46c4      	mov	ip, r8
 800a36e:	46a1      	mov	r9, r4
 800a370:	2700      	movs	r7, #0
 800a372:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a376:	f8d9 3000 	ldr.w	r3, [r9]
 800a37a:	fa1f fb82 	uxth.w	fp, r2
 800a37e:	b29b      	uxth	r3, r3
 800a380:	fb0a 330b 	mla	r3, sl, fp, r3
 800a384:	443b      	add	r3, r7
 800a386:	f8d9 7000 	ldr.w	r7, [r9]
 800a38a:	0c12      	lsrs	r2, r2, #16
 800a38c:	0c3f      	lsrs	r7, r7, #16
 800a38e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a392:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39c:	4565      	cmp	r5, ip
 800a39e:	f849 3b04 	str.w	r3, [r9], #4
 800a3a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a3a6:	d8e4      	bhi.n	800a372 <__multiply+0xaa>
 800a3a8:	9b01      	ldr	r3, [sp, #4]
 800a3aa:	50e7      	str	r7, [r4, r3]
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3b2:	3104      	adds	r1, #4
 800a3b4:	f1b9 0f00 	cmp.w	r9, #0
 800a3b8:	d020      	beq.n	800a3fc <__multiply+0x134>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	4647      	mov	r7, r8
 800a3be:	46a4      	mov	ip, r4
 800a3c0:	f04f 0a00 	mov.w	sl, #0
 800a3c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a3c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a3cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a3d0:	4452      	add	r2, sl
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3d8:	f84c 3b04 	str.w	r3, [ip], #4
 800a3dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3e8:	fb09 330a 	mla	r3, r9, sl, r3
 800a3ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a3f0:	42bd      	cmp	r5, r7
 800a3f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f6:	d8e5      	bhi.n	800a3c4 <__multiply+0xfc>
 800a3f8:	9a01      	ldr	r2, [sp, #4]
 800a3fa:	50a3      	str	r3, [r4, r2]
 800a3fc:	3404      	adds	r4, #4
 800a3fe:	e79f      	b.n	800a340 <__multiply+0x78>
 800a400:	3e01      	subs	r6, #1
 800a402:	e7a1      	b.n	800a348 <__multiply+0x80>
 800a404:	0800cabd 	.word	0x0800cabd
 800a408:	0800cace 	.word	0x0800cace

0800a40c <__pow5mult>:
 800a40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a410:	4615      	mov	r5, r2
 800a412:	f012 0203 	ands.w	r2, r2, #3
 800a416:	4607      	mov	r7, r0
 800a418:	460e      	mov	r6, r1
 800a41a:	d007      	beq.n	800a42c <__pow5mult+0x20>
 800a41c:	4c25      	ldr	r4, [pc, #148]	@ (800a4b4 <__pow5mult+0xa8>)
 800a41e:	3a01      	subs	r2, #1
 800a420:	2300      	movs	r3, #0
 800a422:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a426:	f7ff fe5d 	bl	800a0e4 <__multadd>
 800a42a:	4606      	mov	r6, r0
 800a42c:	10ad      	asrs	r5, r5, #2
 800a42e:	d03d      	beq.n	800a4ac <__pow5mult+0xa0>
 800a430:	69fc      	ldr	r4, [r7, #28]
 800a432:	b97c      	cbnz	r4, 800a454 <__pow5mult+0x48>
 800a434:	2010      	movs	r0, #16
 800a436:	f7ff fd3d 	bl	8009eb4 <malloc>
 800a43a:	4602      	mov	r2, r0
 800a43c:	61f8      	str	r0, [r7, #28]
 800a43e:	b928      	cbnz	r0, 800a44c <__pow5mult+0x40>
 800a440:	4b1d      	ldr	r3, [pc, #116]	@ (800a4b8 <__pow5mult+0xac>)
 800a442:	481e      	ldr	r0, [pc, #120]	@ (800a4bc <__pow5mult+0xb0>)
 800a444:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a448:	f001 fd26 	bl	800be98 <__assert_func>
 800a44c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a450:	6004      	str	r4, [r0, #0]
 800a452:	60c4      	str	r4, [r0, #12]
 800a454:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a458:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a45c:	b94c      	cbnz	r4, 800a472 <__pow5mult+0x66>
 800a45e:	f240 2171 	movw	r1, #625	@ 0x271
 800a462:	4638      	mov	r0, r7
 800a464:	f7ff ff1a 	bl	800a29c <__i2b>
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a46e:	4604      	mov	r4, r0
 800a470:	6003      	str	r3, [r0, #0]
 800a472:	f04f 0900 	mov.w	r9, #0
 800a476:	07eb      	lsls	r3, r5, #31
 800a478:	d50a      	bpl.n	800a490 <__pow5mult+0x84>
 800a47a:	4631      	mov	r1, r6
 800a47c:	4622      	mov	r2, r4
 800a47e:	4638      	mov	r0, r7
 800a480:	f7ff ff22 	bl	800a2c8 <__multiply>
 800a484:	4631      	mov	r1, r6
 800a486:	4680      	mov	r8, r0
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff fe09 	bl	800a0a0 <_Bfree>
 800a48e:	4646      	mov	r6, r8
 800a490:	106d      	asrs	r5, r5, #1
 800a492:	d00b      	beq.n	800a4ac <__pow5mult+0xa0>
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	b938      	cbnz	r0, 800a4a8 <__pow5mult+0x9c>
 800a498:	4622      	mov	r2, r4
 800a49a:	4621      	mov	r1, r4
 800a49c:	4638      	mov	r0, r7
 800a49e:	f7ff ff13 	bl	800a2c8 <__multiply>
 800a4a2:	6020      	str	r0, [r4, #0]
 800a4a4:	f8c0 9000 	str.w	r9, [r0]
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	e7e4      	b.n	800a476 <__pow5mult+0x6a>
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800cbe0 	.word	0x0800cbe0
 800a4b8:	0800ca4e 	.word	0x0800ca4e
 800a4bc:	0800cace 	.word	0x0800cace

0800a4c0 <__lshift>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	6849      	ldr	r1, [r1, #4]
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	4691      	mov	r9, r2
 800a4d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4d8:	f108 0601 	add.w	r6, r8, #1
 800a4dc:	42b3      	cmp	r3, r6
 800a4de:	db0b      	blt.n	800a4f8 <__lshift+0x38>
 800a4e0:	4638      	mov	r0, r7
 800a4e2:	f7ff fd9d 	bl	800a020 <_Balloc>
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	b948      	cbnz	r0, 800a4fe <__lshift+0x3e>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b28      	ldr	r3, [pc, #160]	@ (800a590 <__lshift+0xd0>)
 800a4ee:	4829      	ldr	r0, [pc, #164]	@ (800a594 <__lshift+0xd4>)
 800a4f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4f4:	f001 fcd0 	bl	800be98 <__assert_func>
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	e7ee      	b.n	800a4dc <__lshift+0x1c>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f100 0114 	add.w	r1, r0, #20
 800a504:	f100 0210 	add.w	r2, r0, #16
 800a508:	4618      	mov	r0, r3
 800a50a:	4553      	cmp	r3, sl
 800a50c:	db33      	blt.n	800a576 <__lshift+0xb6>
 800a50e:	6920      	ldr	r0, [r4, #16]
 800a510:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a514:	f104 0314 	add.w	r3, r4, #20
 800a518:	f019 091f 	ands.w	r9, r9, #31
 800a51c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a520:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a524:	d02b      	beq.n	800a57e <__lshift+0xbe>
 800a526:	f1c9 0e20 	rsb	lr, r9, #32
 800a52a:	468a      	mov	sl, r1
 800a52c:	2200      	movs	r2, #0
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	fa00 f009 	lsl.w	r0, r0, r9
 800a534:	4310      	orrs	r0, r2
 800a536:	f84a 0b04 	str.w	r0, [sl], #4
 800a53a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a53e:	459c      	cmp	ip, r3
 800a540:	fa22 f20e 	lsr.w	r2, r2, lr
 800a544:	d8f3      	bhi.n	800a52e <__lshift+0x6e>
 800a546:	ebac 0304 	sub.w	r3, ip, r4
 800a54a:	3b15      	subs	r3, #21
 800a54c:	f023 0303 	bic.w	r3, r3, #3
 800a550:	3304      	adds	r3, #4
 800a552:	f104 0015 	add.w	r0, r4, #21
 800a556:	4560      	cmp	r0, ip
 800a558:	bf88      	it	hi
 800a55a:	2304      	movhi	r3, #4
 800a55c:	50ca      	str	r2, [r1, r3]
 800a55e:	b10a      	cbz	r2, 800a564 <__lshift+0xa4>
 800a560:	f108 0602 	add.w	r6, r8, #2
 800a564:	3e01      	subs	r6, #1
 800a566:	4638      	mov	r0, r7
 800a568:	612e      	str	r6, [r5, #16]
 800a56a:	4621      	mov	r1, r4
 800a56c:	f7ff fd98 	bl	800a0a0 <_Bfree>
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a576:	f842 0f04 	str.w	r0, [r2, #4]!
 800a57a:	3301      	adds	r3, #1
 800a57c:	e7c5      	b.n	800a50a <__lshift+0x4a>
 800a57e:	3904      	subs	r1, #4
 800a580:	f853 2b04 	ldr.w	r2, [r3], #4
 800a584:	f841 2f04 	str.w	r2, [r1, #4]!
 800a588:	459c      	cmp	ip, r3
 800a58a:	d8f9      	bhi.n	800a580 <__lshift+0xc0>
 800a58c:	e7ea      	b.n	800a564 <__lshift+0xa4>
 800a58e:	bf00      	nop
 800a590:	0800cabd 	.word	0x0800cabd
 800a594:	0800cace 	.word	0x0800cace

0800a598 <__mcmp>:
 800a598:	690a      	ldr	r2, [r1, #16]
 800a59a:	4603      	mov	r3, r0
 800a59c:	6900      	ldr	r0, [r0, #16]
 800a59e:	1a80      	subs	r0, r0, r2
 800a5a0:	b530      	push	{r4, r5, lr}
 800a5a2:	d10e      	bne.n	800a5c2 <__mcmp+0x2a>
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	3114      	adds	r1, #20
 800a5a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a5ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a5b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a5b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a5b8:	4295      	cmp	r5, r2
 800a5ba:	d003      	beq.n	800a5c4 <__mcmp+0x2c>
 800a5bc:	d205      	bcs.n	800a5ca <__mcmp+0x32>
 800a5be:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c2:	bd30      	pop	{r4, r5, pc}
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d3f3      	bcc.n	800a5b0 <__mcmp+0x18>
 800a5c8:	e7fb      	b.n	800a5c2 <__mcmp+0x2a>
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	e7f9      	b.n	800a5c2 <__mcmp+0x2a>
	...

0800a5d0 <__mdiff>:
 800a5d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	4689      	mov	r9, r1
 800a5d6:	4606      	mov	r6, r0
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4648      	mov	r0, r9
 800a5dc:	4614      	mov	r4, r2
 800a5de:	f7ff ffdb 	bl	800a598 <__mcmp>
 800a5e2:	1e05      	subs	r5, r0, #0
 800a5e4:	d112      	bne.n	800a60c <__mdiff+0x3c>
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff fd19 	bl	800a020 <_Balloc>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	b928      	cbnz	r0, 800a5fe <__mdiff+0x2e>
 800a5f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a6f0 <__mdiff+0x120>)
 800a5f4:	f240 2137 	movw	r1, #567	@ 0x237
 800a5f8:	483e      	ldr	r0, [pc, #248]	@ (800a6f4 <__mdiff+0x124>)
 800a5fa:	f001 fc4d 	bl	800be98 <__assert_func>
 800a5fe:	2301      	movs	r3, #1
 800a600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a604:	4610      	mov	r0, r2
 800a606:	b003      	add	sp, #12
 800a608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	bfbc      	itt	lt
 800a60e:	464b      	movlt	r3, r9
 800a610:	46a1      	movlt	r9, r4
 800a612:	4630      	mov	r0, r6
 800a614:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a618:	bfba      	itte	lt
 800a61a:	461c      	movlt	r4, r3
 800a61c:	2501      	movlt	r5, #1
 800a61e:	2500      	movge	r5, #0
 800a620:	f7ff fcfe 	bl	800a020 <_Balloc>
 800a624:	4602      	mov	r2, r0
 800a626:	b918      	cbnz	r0, 800a630 <__mdiff+0x60>
 800a628:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <__mdiff+0x120>)
 800a62a:	f240 2145 	movw	r1, #581	@ 0x245
 800a62e:	e7e3      	b.n	800a5f8 <__mdiff+0x28>
 800a630:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a634:	6926      	ldr	r6, [r4, #16]
 800a636:	60c5      	str	r5, [r0, #12]
 800a638:	f109 0310 	add.w	r3, r9, #16
 800a63c:	f109 0514 	add.w	r5, r9, #20
 800a640:	f104 0e14 	add.w	lr, r4, #20
 800a644:	f100 0b14 	add.w	fp, r0, #20
 800a648:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a64c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	46d9      	mov	r9, fp
 800a654:	f04f 0c00 	mov.w	ip, #0
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a65e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	fa1f f38a 	uxth.w	r3, sl
 800a668:	4619      	mov	r1, r3
 800a66a:	b283      	uxth	r3, r0
 800a66c:	1acb      	subs	r3, r1, r3
 800a66e:	0c00      	lsrs	r0, r0, #16
 800a670:	4463      	add	r3, ip
 800a672:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a676:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a680:	4576      	cmp	r6, lr
 800a682:	f849 3b04 	str.w	r3, [r9], #4
 800a686:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a68a:	d8e5      	bhi.n	800a658 <__mdiff+0x88>
 800a68c:	1b33      	subs	r3, r6, r4
 800a68e:	3b15      	subs	r3, #21
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	3415      	adds	r4, #21
 800a696:	3304      	adds	r3, #4
 800a698:	42a6      	cmp	r6, r4
 800a69a:	bf38      	it	cc
 800a69c:	2304      	movcc	r3, #4
 800a69e:	441d      	add	r5, r3
 800a6a0:	445b      	add	r3, fp
 800a6a2:	461e      	mov	r6, r3
 800a6a4:	462c      	mov	r4, r5
 800a6a6:	4544      	cmp	r4, r8
 800a6a8:	d30e      	bcc.n	800a6c8 <__mdiff+0xf8>
 800a6aa:	f108 0103 	add.w	r1, r8, #3
 800a6ae:	1b49      	subs	r1, r1, r5
 800a6b0:	f021 0103 	bic.w	r1, r1, #3
 800a6b4:	3d03      	subs	r5, #3
 800a6b6:	45a8      	cmp	r8, r5
 800a6b8:	bf38      	it	cc
 800a6ba:	2100      	movcc	r1, #0
 800a6bc:	440b      	add	r3, r1
 800a6be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6c2:	b191      	cbz	r1, 800a6ea <__mdiff+0x11a>
 800a6c4:	6117      	str	r7, [r2, #16]
 800a6c6:	e79d      	b.n	800a604 <__mdiff+0x34>
 800a6c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6cc:	46e6      	mov	lr, ip
 800a6ce:	0c08      	lsrs	r0, r1, #16
 800a6d0:	fa1c fc81 	uxtah	ip, ip, r1
 800a6d4:	4471      	add	r1, lr
 800a6d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6e0:	f846 1b04 	str.w	r1, [r6], #4
 800a6e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6e8:	e7dd      	b.n	800a6a6 <__mdiff+0xd6>
 800a6ea:	3f01      	subs	r7, #1
 800a6ec:	e7e7      	b.n	800a6be <__mdiff+0xee>
 800a6ee:	bf00      	nop
 800a6f0:	0800cabd 	.word	0x0800cabd
 800a6f4:	0800cace 	.word	0x0800cace

0800a6f8 <__ulp>:
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	ed8d 0b00 	vstr	d0, [sp]
 800a6fe:	9a01      	ldr	r2, [sp, #4]
 800a700:	4b0f      	ldr	r3, [pc, #60]	@ (800a740 <__ulp+0x48>)
 800a702:	4013      	ands	r3, r2
 800a704:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	dc08      	bgt.n	800a71e <__ulp+0x26>
 800a70c:	425b      	negs	r3, r3
 800a70e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a712:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a716:	da04      	bge.n	800a722 <__ulp+0x2a>
 800a718:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a71c:	4113      	asrs	r3, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	e008      	b.n	800a734 <__ulp+0x3c>
 800a722:	f1a2 0314 	sub.w	r3, r2, #20
 800a726:	2b1e      	cmp	r3, #30
 800a728:	bfda      	itte	le
 800a72a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a72e:	40da      	lsrle	r2, r3
 800a730:	2201      	movgt	r2, #1
 800a732:	2300      	movs	r3, #0
 800a734:	4619      	mov	r1, r3
 800a736:	4610      	mov	r0, r2
 800a738:	ec41 0b10 	vmov	d0, r0, r1
 800a73c:	b002      	add	sp, #8
 800a73e:	4770      	bx	lr
 800a740:	7ff00000 	.word	0x7ff00000

0800a744 <__b2d>:
 800a744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a748:	6906      	ldr	r6, [r0, #16]
 800a74a:	f100 0814 	add.w	r8, r0, #20
 800a74e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a752:	1f37      	subs	r7, r6, #4
 800a754:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a758:	4610      	mov	r0, r2
 800a75a:	f7ff fd53 	bl	800a204 <__hi0bits>
 800a75e:	f1c0 0320 	rsb	r3, r0, #32
 800a762:	280a      	cmp	r0, #10
 800a764:	600b      	str	r3, [r1, #0]
 800a766:	491b      	ldr	r1, [pc, #108]	@ (800a7d4 <__b2d+0x90>)
 800a768:	dc15      	bgt.n	800a796 <__b2d+0x52>
 800a76a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a76e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a772:	45b8      	cmp	r8, r7
 800a774:	ea43 0501 	orr.w	r5, r3, r1
 800a778:	bf34      	ite	cc
 800a77a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a77e:	2300      	movcs	r3, #0
 800a780:	3015      	adds	r0, #21
 800a782:	fa02 f000 	lsl.w	r0, r2, r0
 800a786:	fa23 f30c 	lsr.w	r3, r3, ip
 800a78a:	4303      	orrs	r3, r0
 800a78c:	461c      	mov	r4, r3
 800a78e:	ec45 4b10 	vmov	d0, r4, r5
 800a792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a796:	45b8      	cmp	r8, r7
 800a798:	bf3a      	itte	cc
 800a79a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a79e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a7a2:	2300      	movcs	r3, #0
 800a7a4:	380b      	subs	r0, #11
 800a7a6:	d012      	beq.n	800a7ce <__b2d+0x8a>
 800a7a8:	f1c0 0120 	rsb	r1, r0, #32
 800a7ac:	fa23 f401 	lsr.w	r4, r3, r1
 800a7b0:	4082      	lsls	r2, r0
 800a7b2:	4322      	orrs	r2, r4
 800a7b4:	4547      	cmp	r7, r8
 800a7b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a7ba:	bf8c      	ite	hi
 800a7bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a7c0:	2200      	movls	r2, #0
 800a7c2:	4083      	lsls	r3, r0
 800a7c4:	40ca      	lsrs	r2, r1
 800a7c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	e7de      	b.n	800a78c <__b2d+0x48>
 800a7ce:	ea42 0501 	orr.w	r5, r2, r1
 800a7d2:	e7db      	b.n	800a78c <__b2d+0x48>
 800a7d4:	3ff00000 	.word	0x3ff00000

0800a7d8 <__d2b>:
 800a7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7dc:	460f      	mov	r7, r1
 800a7de:	2101      	movs	r1, #1
 800a7e0:	ec59 8b10 	vmov	r8, r9, d0
 800a7e4:	4616      	mov	r6, r2
 800a7e6:	f7ff fc1b 	bl	800a020 <_Balloc>
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	b930      	cbnz	r0, 800a7fc <__d2b+0x24>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b23      	ldr	r3, [pc, #140]	@ (800a880 <__d2b+0xa8>)
 800a7f2:	4824      	ldr	r0, [pc, #144]	@ (800a884 <__d2b+0xac>)
 800a7f4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7f8:	f001 fb4e 	bl	800be98 <__assert_func>
 800a7fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a804:	b10d      	cbz	r5, 800a80a <__d2b+0x32>
 800a806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a80a:	9301      	str	r3, [sp, #4]
 800a80c:	f1b8 0300 	subs.w	r3, r8, #0
 800a810:	d023      	beq.n	800a85a <__d2b+0x82>
 800a812:	4668      	mov	r0, sp
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	f7ff fd14 	bl	800a242 <__lo0bits>
 800a81a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a81e:	b1d0      	cbz	r0, 800a856 <__d2b+0x7e>
 800a820:	f1c0 0320 	rsb	r3, r0, #32
 800a824:	fa02 f303 	lsl.w	r3, r2, r3
 800a828:	430b      	orrs	r3, r1
 800a82a:	40c2      	lsrs	r2, r0
 800a82c:	6163      	str	r3, [r4, #20]
 800a82e:	9201      	str	r2, [sp, #4]
 800a830:	9b01      	ldr	r3, [sp, #4]
 800a832:	61a3      	str	r3, [r4, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	bf0c      	ite	eq
 800a838:	2201      	moveq	r2, #1
 800a83a:	2202      	movne	r2, #2
 800a83c:	6122      	str	r2, [r4, #16]
 800a83e:	b1a5      	cbz	r5, 800a86a <__d2b+0x92>
 800a840:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a844:	4405      	add	r5, r0
 800a846:	603d      	str	r5, [r7, #0]
 800a848:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a84c:	6030      	str	r0, [r6, #0]
 800a84e:	4620      	mov	r0, r4
 800a850:	b003      	add	sp, #12
 800a852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a856:	6161      	str	r1, [r4, #20]
 800a858:	e7ea      	b.n	800a830 <__d2b+0x58>
 800a85a:	a801      	add	r0, sp, #4
 800a85c:	f7ff fcf1 	bl	800a242 <__lo0bits>
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	6163      	str	r3, [r4, #20]
 800a864:	3020      	adds	r0, #32
 800a866:	2201      	movs	r2, #1
 800a868:	e7e8      	b.n	800a83c <__d2b+0x64>
 800a86a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a86e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a872:	6038      	str	r0, [r7, #0]
 800a874:	6918      	ldr	r0, [r3, #16]
 800a876:	f7ff fcc5 	bl	800a204 <__hi0bits>
 800a87a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a87e:	e7e5      	b.n	800a84c <__d2b+0x74>
 800a880:	0800cabd 	.word	0x0800cabd
 800a884:	0800cace 	.word	0x0800cace

0800a888 <__ratio>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	b085      	sub	sp, #20
 800a88e:	e9cd 1000 	strd	r1, r0, [sp]
 800a892:	a902      	add	r1, sp, #8
 800a894:	f7ff ff56 	bl	800a744 <__b2d>
 800a898:	9800      	ldr	r0, [sp, #0]
 800a89a:	a903      	add	r1, sp, #12
 800a89c:	ec55 4b10 	vmov	r4, r5, d0
 800a8a0:	f7ff ff50 	bl	800a744 <__b2d>
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	6919      	ldr	r1, [r3, #16]
 800a8a8:	9b00      	ldr	r3, [sp, #0]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	1ac9      	subs	r1, r1, r3
 800a8ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	ec5b ab10 	vmov	sl, fp, d0
 800a8b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	bfce      	itee	gt
 800a8c0:	462a      	movgt	r2, r5
 800a8c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8c6:	465a      	movle	r2, fp
 800a8c8:	462f      	mov	r7, r5
 800a8ca:	46d9      	mov	r9, fp
 800a8cc:	bfcc      	ite	gt
 800a8ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	4652      	mov	r2, sl
 800a8da:	4620      	mov	r0, r4
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f5 ffb5 	bl	800084c <__aeabi_ddiv>
 800a8e2:	ec41 0b10 	vmov	d0, r0, r1
 800a8e6:	b005      	add	sp, #20
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8ec <__copybits>:
 800a8ec:	3901      	subs	r1, #1
 800a8ee:	b570      	push	{r4, r5, r6, lr}
 800a8f0:	1149      	asrs	r1, r1, #5
 800a8f2:	6914      	ldr	r4, [r2, #16]
 800a8f4:	3101      	adds	r1, #1
 800a8f6:	f102 0314 	add.w	r3, r2, #20
 800a8fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a902:	1f05      	subs	r5, r0, #4
 800a904:	42a3      	cmp	r3, r4
 800a906:	d30c      	bcc.n	800a922 <__copybits+0x36>
 800a908:	1aa3      	subs	r3, r4, r2
 800a90a:	3b11      	subs	r3, #17
 800a90c:	f023 0303 	bic.w	r3, r3, #3
 800a910:	3211      	adds	r2, #17
 800a912:	42a2      	cmp	r2, r4
 800a914:	bf88      	it	hi
 800a916:	2300      	movhi	r3, #0
 800a918:	4418      	add	r0, r3
 800a91a:	2300      	movs	r3, #0
 800a91c:	4288      	cmp	r0, r1
 800a91e:	d305      	bcc.n	800a92c <__copybits+0x40>
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	f853 6b04 	ldr.w	r6, [r3], #4
 800a926:	f845 6f04 	str.w	r6, [r5, #4]!
 800a92a:	e7eb      	b.n	800a904 <__copybits+0x18>
 800a92c:	f840 3b04 	str.w	r3, [r0], #4
 800a930:	e7f4      	b.n	800a91c <__copybits+0x30>

0800a932 <__any_on>:
 800a932:	f100 0214 	add.w	r2, r0, #20
 800a936:	6900      	ldr	r0, [r0, #16]
 800a938:	114b      	asrs	r3, r1, #5
 800a93a:	4298      	cmp	r0, r3
 800a93c:	b510      	push	{r4, lr}
 800a93e:	db11      	blt.n	800a964 <__any_on+0x32>
 800a940:	dd0a      	ble.n	800a958 <__any_on+0x26>
 800a942:	f011 011f 	ands.w	r1, r1, #31
 800a946:	d007      	beq.n	800a958 <__any_on+0x26>
 800a948:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a94c:	fa24 f001 	lsr.w	r0, r4, r1
 800a950:	fa00 f101 	lsl.w	r1, r0, r1
 800a954:	428c      	cmp	r4, r1
 800a956:	d10b      	bne.n	800a970 <__any_on+0x3e>
 800a958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d803      	bhi.n	800a968 <__any_on+0x36>
 800a960:	2000      	movs	r0, #0
 800a962:	bd10      	pop	{r4, pc}
 800a964:	4603      	mov	r3, r0
 800a966:	e7f7      	b.n	800a958 <__any_on+0x26>
 800a968:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a96c:	2900      	cmp	r1, #0
 800a96e:	d0f5      	beq.n	800a95c <__any_on+0x2a>
 800a970:	2001      	movs	r0, #1
 800a972:	e7f6      	b.n	800a962 <__any_on+0x30>

0800a974 <sulp>:
 800a974:	b570      	push	{r4, r5, r6, lr}
 800a976:	4604      	mov	r4, r0
 800a978:	460d      	mov	r5, r1
 800a97a:	ec45 4b10 	vmov	d0, r4, r5
 800a97e:	4616      	mov	r6, r2
 800a980:	f7ff feba 	bl	800a6f8 <__ulp>
 800a984:	ec51 0b10 	vmov	r0, r1, d0
 800a988:	b17e      	cbz	r6, 800a9aa <sulp+0x36>
 800a98a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a98e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a992:	2b00      	cmp	r3, #0
 800a994:	dd09      	ble.n	800a9aa <sulp+0x36>
 800a996:	051b      	lsls	r3, r3, #20
 800a998:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a99c:	2400      	movs	r4, #0
 800a99e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	f7f5 fe27 	bl	80005f8 <__aeabi_dmul>
 800a9aa:	ec41 0b10 	vmov	d0, r0, r1
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}

0800a9b0 <_strtod_l>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	b09f      	sub	sp, #124	@ 0x7c
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a9be:	9005      	str	r0, [sp, #20]
 800a9c0:	f04f 0a00 	mov.w	sl, #0
 800a9c4:	f04f 0b00 	mov.w	fp, #0
 800a9c8:	460a      	mov	r2, r1
 800a9ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a9cc:	7811      	ldrb	r1, [r2, #0]
 800a9ce:	292b      	cmp	r1, #43	@ 0x2b
 800a9d0:	d04a      	beq.n	800aa68 <_strtod_l+0xb8>
 800a9d2:	d838      	bhi.n	800aa46 <_strtod_l+0x96>
 800a9d4:	290d      	cmp	r1, #13
 800a9d6:	d832      	bhi.n	800aa3e <_strtod_l+0x8e>
 800a9d8:	2908      	cmp	r1, #8
 800a9da:	d832      	bhi.n	800aa42 <_strtod_l+0x92>
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d03b      	beq.n	800aa58 <_strtod_l+0xa8>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a9e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a9e6:	782a      	ldrb	r2, [r5, #0]
 800a9e8:	2a30      	cmp	r2, #48	@ 0x30
 800a9ea:	f040 80b2 	bne.w	800ab52 <_strtod_l+0x1a2>
 800a9ee:	786a      	ldrb	r2, [r5, #1]
 800a9f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9f4:	2a58      	cmp	r2, #88	@ 0x58
 800a9f6:	d16e      	bne.n	800aad6 <_strtod_l+0x126>
 800a9f8:	9302      	str	r3, [sp, #8]
 800a9fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	ab1a      	add	r3, sp, #104	@ 0x68
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4a8f      	ldr	r2, [pc, #572]	@ (800ac40 <_strtod_l+0x290>)
 800aa04:	9805      	ldr	r0, [sp, #20]
 800aa06:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aa08:	a919      	add	r1, sp, #100	@ 0x64
 800aa0a:	f001 fadf 	bl	800bfcc <__gethex>
 800aa0e:	f010 060f 	ands.w	r6, r0, #15
 800aa12:	4604      	mov	r4, r0
 800aa14:	d005      	beq.n	800aa22 <_strtod_l+0x72>
 800aa16:	2e06      	cmp	r6, #6
 800aa18:	d128      	bne.n	800aa6c <_strtod_l+0xbc>
 800aa1a:	3501      	adds	r5, #1
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9519      	str	r5, [sp, #100]	@ 0x64
 800aa20:	930e      	str	r3, [sp, #56]	@ 0x38
 800aa22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f040 858e 	bne.w	800b546 <_strtod_l+0xb96>
 800aa2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa2c:	b1cb      	cbz	r3, 800aa62 <_strtod_l+0xb2>
 800aa2e:	4652      	mov	r2, sl
 800aa30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aa34:	ec43 2b10 	vmov	d0, r2, r3
 800aa38:	b01f      	add	sp, #124	@ 0x7c
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	2920      	cmp	r1, #32
 800aa40:	d1ce      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa42:	3201      	adds	r2, #1
 800aa44:	e7c1      	b.n	800a9ca <_strtod_l+0x1a>
 800aa46:	292d      	cmp	r1, #45	@ 0x2d
 800aa48:	d1ca      	bne.n	800a9e0 <_strtod_l+0x30>
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	910e      	str	r1, [sp, #56]	@ 0x38
 800aa4e:	1c51      	adds	r1, r2, #1
 800aa50:	9119      	str	r1, [sp, #100]	@ 0x64
 800aa52:	7852      	ldrb	r2, [r2, #1]
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	d1c5      	bne.n	800a9e4 <_strtod_l+0x34>
 800aa58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa5a:	9419      	str	r4, [sp, #100]	@ 0x64
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f040 8570 	bne.w	800b542 <_strtod_l+0xb92>
 800aa62:	4652      	mov	r2, sl
 800aa64:	465b      	mov	r3, fp
 800aa66:	e7e5      	b.n	800aa34 <_strtod_l+0x84>
 800aa68:	2100      	movs	r1, #0
 800aa6a:	e7ef      	b.n	800aa4c <_strtod_l+0x9c>
 800aa6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa6e:	b13a      	cbz	r2, 800aa80 <_strtod_l+0xd0>
 800aa70:	2135      	movs	r1, #53	@ 0x35
 800aa72:	a81c      	add	r0, sp, #112	@ 0x70
 800aa74:	f7ff ff3a 	bl	800a8ec <__copybits>
 800aa78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa7a:	9805      	ldr	r0, [sp, #20]
 800aa7c:	f7ff fb10 	bl	800a0a0 <_Bfree>
 800aa80:	3e01      	subs	r6, #1
 800aa82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800aa84:	2e04      	cmp	r6, #4
 800aa86:	d806      	bhi.n	800aa96 <_strtod_l+0xe6>
 800aa88:	e8df f006 	tbb	[pc, r6]
 800aa8c:	201d0314 	.word	0x201d0314
 800aa90:	14          	.byte	0x14
 800aa91:	00          	.byte	0x00
 800aa92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800aa96:	05e1      	lsls	r1, r4, #23
 800aa98:	bf48      	it	mi
 800aa9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaa2:	0d1b      	lsrs	r3, r3, #20
 800aaa4:	051b      	lsls	r3, r3, #20
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d1bb      	bne.n	800aa22 <_strtod_l+0x72>
 800aaaa:	f7fe fb1d 	bl	80090e8 <__errno>
 800aaae:	2322      	movs	r3, #34	@ 0x22
 800aab0:	6003      	str	r3, [r0, #0]
 800aab2:	e7b6      	b.n	800aa22 <_strtod_l+0x72>
 800aab4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800aab8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aabc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aac0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aac4:	e7e7      	b.n	800aa96 <_strtod_l+0xe6>
 800aac6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ac48 <_strtod_l+0x298>
 800aaca:	e7e4      	b.n	800aa96 <_strtod_l+0xe6>
 800aacc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aad0:	f04f 3aff 	mov.w	sl, #4294967295
 800aad4:	e7df      	b.n	800aa96 <_strtod_l+0xe6>
 800aad6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	9219      	str	r2, [sp, #100]	@ 0x64
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b30      	cmp	r3, #48	@ 0x30
 800aae0:	d0f9      	beq.n	800aad6 <_strtod_l+0x126>
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d09d      	beq.n	800aa22 <_strtod_l+0x72>
 800aae6:	2301      	movs	r3, #1
 800aae8:	2700      	movs	r7, #0
 800aaea:	9308      	str	r3, [sp, #32]
 800aaec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aaee:	930c      	str	r3, [sp, #48]	@ 0x30
 800aaf0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aaf2:	46b9      	mov	r9, r7
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aaf8:	7805      	ldrb	r5, [r0, #0]
 800aafa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aafe:	b2d9      	uxtb	r1, r3
 800ab00:	2909      	cmp	r1, #9
 800ab02:	d928      	bls.n	800ab56 <_strtod_l+0x1a6>
 800ab04:	494f      	ldr	r1, [pc, #316]	@ (800ac44 <_strtod_l+0x294>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	f001 f97a 	bl	800be00 <strncmp>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d032      	beq.n	800ab76 <_strtod_l+0x1c6>
 800ab10:	2000      	movs	r0, #0
 800ab12:	462a      	mov	r2, r5
 800ab14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab16:	464d      	mov	r5, r9
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2a65      	cmp	r2, #101	@ 0x65
 800ab1c:	d001      	beq.n	800ab22 <_strtod_l+0x172>
 800ab1e:	2a45      	cmp	r2, #69	@ 0x45
 800ab20:	d114      	bne.n	800ab4c <_strtod_l+0x19c>
 800ab22:	b91d      	cbnz	r5, 800ab2c <_strtod_l+0x17c>
 800ab24:	9a08      	ldr	r2, [sp, #32]
 800ab26:	4302      	orrs	r2, r0
 800ab28:	d096      	beq.n	800aa58 <_strtod_l+0xa8>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ab2e:	1c62      	adds	r2, r4, #1
 800ab30:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab32:	7862      	ldrb	r2, [r4, #1]
 800ab34:	2a2b      	cmp	r2, #43	@ 0x2b
 800ab36:	d07a      	beq.n	800ac2e <_strtod_l+0x27e>
 800ab38:	2a2d      	cmp	r2, #45	@ 0x2d
 800ab3a:	d07e      	beq.n	800ac3a <_strtod_l+0x28a>
 800ab3c:	f04f 0c00 	mov.w	ip, #0
 800ab40:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab44:	2909      	cmp	r1, #9
 800ab46:	f240 8085 	bls.w	800ac54 <_strtod_l+0x2a4>
 800ab4a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ab4c:	f04f 0800 	mov.w	r8, #0
 800ab50:	e0a5      	b.n	800ac9e <_strtod_l+0x2ee>
 800ab52:	2300      	movs	r3, #0
 800ab54:	e7c8      	b.n	800aae8 <_strtod_l+0x138>
 800ab56:	f1b9 0f08 	cmp.w	r9, #8
 800ab5a:	bfd8      	it	le
 800ab5c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ab5e:	f100 0001 	add.w	r0, r0, #1
 800ab62:	bfda      	itte	le
 800ab64:	fb02 3301 	mlale	r3, r2, r1, r3
 800ab68:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ab6a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ab6e:	f109 0901 	add.w	r9, r9, #1
 800ab72:	9019      	str	r0, [sp, #100]	@ 0x64
 800ab74:	e7bf      	b.n	800aaf6 <_strtod_l+0x146>
 800ab76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab78:	1c5a      	adds	r2, r3, #1
 800ab7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab7c:	785a      	ldrb	r2, [r3, #1]
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d03b      	beq.n	800abfc <_strtod_l+0x24c>
 800ab84:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab86:	464d      	mov	r5, r9
 800ab88:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ab8c:	2b09      	cmp	r3, #9
 800ab8e:	d912      	bls.n	800abb6 <_strtod_l+0x206>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e7c2      	b.n	800ab1a <_strtod_l+0x16a>
 800ab94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab9a:	785a      	ldrb	r2, [r3, #1]
 800ab9c:	3001      	adds	r0, #1
 800ab9e:	2a30      	cmp	r2, #48	@ 0x30
 800aba0:	d0f8      	beq.n	800ab94 <_strtod_l+0x1e4>
 800aba2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aba6:	2b08      	cmp	r3, #8
 800aba8:	f200 84d2 	bhi.w	800b550 <_strtod_l+0xba0>
 800abac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800abae:	900a      	str	r0, [sp, #40]	@ 0x28
 800abb0:	2000      	movs	r0, #0
 800abb2:	930c      	str	r3, [sp, #48]	@ 0x30
 800abb4:	4605      	mov	r5, r0
 800abb6:	3a30      	subs	r2, #48	@ 0x30
 800abb8:	f100 0301 	add.w	r3, r0, #1
 800abbc:	d018      	beq.n	800abf0 <_strtod_l+0x240>
 800abbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abc0:	4419      	add	r1, r3
 800abc2:	910a      	str	r1, [sp, #40]	@ 0x28
 800abc4:	462e      	mov	r6, r5
 800abc6:	f04f 0e0a 	mov.w	lr, #10
 800abca:	1c71      	adds	r1, r6, #1
 800abcc:	eba1 0c05 	sub.w	ip, r1, r5
 800abd0:	4563      	cmp	r3, ip
 800abd2:	dc15      	bgt.n	800ac00 <_strtod_l+0x250>
 800abd4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800abd8:	182b      	adds	r3, r5, r0
 800abda:	2b08      	cmp	r3, #8
 800abdc:	f105 0501 	add.w	r5, r5, #1
 800abe0:	4405      	add	r5, r0
 800abe2:	dc1a      	bgt.n	800ac1a <_strtod_l+0x26a>
 800abe4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800abe6:	230a      	movs	r3, #10
 800abe8:	fb03 2301 	mla	r3, r3, r1, r2
 800abec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abee:	2300      	movs	r3, #0
 800abf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800abf2:	1c51      	adds	r1, r2, #1
 800abf4:	9119      	str	r1, [sp, #100]	@ 0x64
 800abf6:	7852      	ldrb	r2, [r2, #1]
 800abf8:	4618      	mov	r0, r3
 800abfa:	e7c5      	b.n	800ab88 <_strtod_l+0x1d8>
 800abfc:	4648      	mov	r0, r9
 800abfe:	e7ce      	b.n	800ab9e <_strtod_l+0x1ee>
 800ac00:	2e08      	cmp	r6, #8
 800ac02:	dc05      	bgt.n	800ac10 <_strtod_l+0x260>
 800ac04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ac06:	fb0e f606 	mul.w	r6, lr, r6
 800ac0a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ac0c:	460e      	mov	r6, r1
 800ac0e:	e7dc      	b.n	800abca <_strtod_l+0x21a>
 800ac10:	2910      	cmp	r1, #16
 800ac12:	bfd8      	it	le
 800ac14:	fb0e f707 	mulle.w	r7, lr, r7
 800ac18:	e7f8      	b.n	800ac0c <_strtod_l+0x25c>
 800ac1a:	2b0f      	cmp	r3, #15
 800ac1c:	bfdc      	itt	le
 800ac1e:	230a      	movle	r3, #10
 800ac20:	fb03 2707 	mlale	r7, r3, r7, r2
 800ac24:	e7e3      	b.n	800abee <_strtod_l+0x23e>
 800ac26:	2300      	movs	r3, #0
 800ac28:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e77a      	b.n	800ab24 <_strtod_l+0x174>
 800ac2e:	f04f 0c00 	mov.w	ip, #0
 800ac32:	1ca2      	adds	r2, r4, #2
 800ac34:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac36:	78a2      	ldrb	r2, [r4, #2]
 800ac38:	e782      	b.n	800ab40 <_strtod_l+0x190>
 800ac3a:	f04f 0c01 	mov.w	ip, #1
 800ac3e:	e7f8      	b.n	800ac32 <_strtod_l+0x282>
 800ac40:	0800ccf4 	.word	0x0800ccf4
 800ac44:	0800cb27 	.word	0x0800cb27
 800ac48:	7ff00000 	.word	0x7ff00000
 800ac4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac4e:	1c51      	adds	r1, r2, #1
 800ac50:	9119      	str	r1, [sp, #100]	@ 0x64
 800ac52:	7852      	ldrb	r2, [r2, #1]
 800ac54:	2a30      	cmp	r2, #48	@ 0x30
 800ac56:	d0f9      	beq.n	800ac4c <_strtod_l+0x29c>
 800ac58:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ac5c:	2908      	cmp	r1, #8
 800ac5e:	f63f af75 	bhi.w	800ab4c <_strtod_l+0x19c>
 800ac62:	3a30      	subs	r2, #48	@ 0x30
 800ac64:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac66:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac68:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ac6a:	f04f 080a 	mov.w	r8, #10
 800ac6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ac70:	1c56      	adds	r6, r2, #1
 800ac72:	9619      	str	r6, [sp, #100]	@ 0x64
 800ac74:	7852      	ldrb	r2, [r2, #1]
 800ac76:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ac7a:	f1be 0f09 	cmp.w	lr, #9
 800ac7e:	d939      	bls.n	800acf4 <_strtod_l+0x344>
 800ac80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ac82:	1a76      	subs	r6, r6, r1
 800ac84:	2e08      	cmp	r6, #8
 800ac86:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ac8a:	dc03      	bgt.n	800ac94 <_strtod_l+0x2e4>
 800ac8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac8e:	4588      	cmp	r8, r1
 800ac90:	bfa8      	it	ge
 800ac92:	4688      	movge	r8, r1
 800ac94:	f1bc 0f00 	cmp.w	ip, #0
 800ac98:	d001      	beq.n	800ac9e <_strtod_l+0x2ee>
 800ac9a:	f1c8 0800 	rsb	r8, r8, #0
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	d14e      	bne.n	800ad40 <_strtod_l+0x390>
 800aca2:	9908      	ldr	r1, [sp, #32]
 800aca4:	4308      	orrs	r0, r1
 800aca6:	f47f aebc 	bne.w	800aa22 <_strtod_l+0x72>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f47f aed4 	bne.w	800aa58 <_strtod_l+0xa8>
 800acb0:	2a69      	cmp	r2, #105	@ 0x69
 800acb2:	d028      	beq.n	800ad06 <_strtod_l+0x356>
 800acb4:	dc25      	bgt.n	800ad02 <_strtod_l+0x352>
 800acb6:	2a49      	cmp	r2, #73	@ 0x49
 800acb8:	d025      	beq.n	800ad06 <_strtod_l+0x356>
 800acba:	2a4e      	cmp	r2, #78	@ 0x4e
 800acbc:	f47f aecc 	bne.w	800aa58 <_strtod_l+0xa8>
 800acc0:	499a      	ldr	r1, [pc, #616]	@ (800af2c <_strtod_l+0x57c>)
 800acc2:	a819      	add	r0, sp, #100	@ 0x64
 800acc4:	f001 fba4 	bl	800c410 <__match>
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f aec5 	beq.w	800aa58 <_strtod_l+0xa8>
 800acce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acd0:	781b      	ldrb	r3, [r3, #0]
 800acd2:	2b28      	cmp	r3, #40	@ 0x28
 800acd4:	d12e      	bne.n	800ad34 <_strtod_l+0x384>
 800acd6:	4996      	ldr	r1, [pc, #600]	@ (800af30 <_strtod_l+0x580>)
 800acd8:	aa1c      	add	r2, sp, #112	@ 0x70
 800acda:	a819      	add	r0, sp, #100	@ 0x64
 800acdc:	f001 fbac 	bl	800c438 <__hexnan>
 800ace0:	2805      	cmp	r0, #5
 800ace2:	d127      	bne.n	800ad34 <_strtod_l+0x384>
 800ace4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ace6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800acea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800acee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800acf2:	e696      	b.n	800aa22 <_strtod_l+0x72>
 800acf4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf6:	fb08 2101 	mla	r1, r8, r1, r2
 800acfa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800acfe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad00:	e7b5      	b.n	800ac6e <_strtod_l+0x2be>
 800ad02:	2a6e      	cmp	r2, #110	@ 0x6e
 800ad04:	e7da      	b.n	800acbc <_strtod_l+0x30c>
 800ad06:	498b      	ldr	r1, [pc, #556]	@ (800af34 <_strtod_l+0x584>)
 800ad08:	a819      	add	r0, sp, #100	@ 0x64
 800ad0a:	f001 fb81 	bl	800c410 <__match>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f43f aea2 	beq.w	800aa58 <_strtod_l+0xa8>
 800ad14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad16:	4988      	ldr	r1, [pc, #544]	@ (800af38 <_strtod_l+0x588>)
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	a819      	add	r0, sp, #100	@ 0x64
 800ad1c:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad1e:	f001 fb77 	bl	800c410 <__match>
 800ad22:	b910      	cbnz	r0, 800ad2a <_strtod_l+0x37a>
 800ad24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad26:	3301      	adds	r3, #1
 800ad28:	9319      	str	r3, [sp, #100]	@ 0x64
 800ad2a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800af48 <_strtod_l+0x598>
 800ad2e:	f04f 0a00 	mov.w	sl, #0
 800ad32:	e676      	b.n	800aa22 <_strtod_l+0x72>
 800ad34:	4881      	ldr	r0, [pc, #516]	@ (800af3c <_strtod_l+0x58c>)
 800ad36:	f001 f8a7 	bl	800be88 <nan>
 800ad3a:	ec5b ab10 	vmov	sl, fp, d0
 800ad3e:	e670      	b.n	800aa22 <_strtod_l+0x72>
 800ad40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad42:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ad44:	eba8 0303 	sub.w	r3, r8, r3
 800ad48:	f1b9 0f00 	cmp.w	r9, #0
 800ad4c:	bf08      	it	eq
 800ad4e:	46a9      	moveq	r9, r5
 800ad50:	2d10      	cmp	r5, #16
 800ad52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad54:	462c      	mov	r4, r5
 800ad56:	bfa8      	it	ge
 800ad58:	2410      	movge	r4, #16
 800ad5a:	f7f5 fbd3 	bl	8000504 <__aeabi_ui2d>
 800ad5e:	2d09      	cmp	r5, #9
 800ad60:	4682      	mov	sl, r0
 800ad62:	468b      	mov	fp, r1
 800ad64:	dc13      	bgt.n	800ad8e <_strtod_l+0x3de>
 800ad66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	f43f ae5a 	beq.w	800aa22 <_strtod_l+0x72>
 800ad6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad70:	dd78      	ble.n	800ae64 <_strtod_l+0x4b4>
 800ad72:	2b16      	cmp	r3, #22
 800ad74:	dc5f      	bgt.n	800ae36 <_strtod_l+0x486>
 800ad76:	4972      	ldr	r1, [pc, #456]	@ (800af40 <_strtod_l+0x590>)
 800ad78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ad7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad80:	4652      	mov	r2, sl
 800ad82:	465b      	mov	r3, fp
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	4682      	mov	sl, r0
 800ad8a:	468b      	mov	fp, r1
 800ad8c:	e649      	b.n	800aa22 <_strtod_l+0x72>
 800ad8e:	4b6c      	ldr	r3, [pc, #432]	@ (800af40 <_strtod_l+0x590>)
 800ad90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	4682      	mov	sl, r0
 800ad9e:	4638      	mov	r0, r7
 800ada0:	468b      	mov	fp, r1
 800ada2:	f7f5 fbaf 	bl	8000504 <__aeabi_ui2d>
 800ada6:	4602      	mov	r2, r0
 800ada8:	460b      	mov	r3, r1
 800adaa:	4650      	mov	r0, sl
 800adac:	4659      	mov	r1, fp
 800adae:	f7f5 fa6d 	bl	800028c <__adddf3>
 800adb2:	2d0f      	cmp	r5, #15
 800adb4:	4682      	mov	sl, r0
 800adb6:	468b      	mov	fp, r1
 800adb8:	ddd5      	ble.n	800ad66 <_strtod_l+0x3b6>
 800adba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adbc:	1b2c      	subs	r4, r5, r4
 800adbe:	441c      	add	r4, r3
 800adc0:	2c00      	cmp	r4, #0
 800adc2:	f340 8093 	ble.w	800aeec <_strtod_l+0x53c>
 800adc6:	f014 030f 	ands.w	r3, r4, #15
 800adca:	d00a      	beq.n	800ade2 <_strtod_l+0x432>
 800adcc:	495c      	ldr	r1, [pc, #368]	@ (800af40 <_strtod_l+0x590>)
 800adce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800add2:	4652      	mov	r2, sl
 800add4:	465b      	mov	r3, fp
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fc0d 	bl	80005f8 <__aeabi_dmul>
 800adde:	4682      	mov	sl, r0
 800ade0:	468b      	mov	fp, r1
 800ade2:	f034 040f 	bics.w	r4, r4, #15
 800ade6:	d073      	beq.n	800aed0 <_strtod_l+0x520>
 800ade8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800adec:	dd49      	ble.n	800ae82 <_strtod_l+0x4d2>
 800adee:	2400      	movs	r4, #0
 800adf0:	46a0      	mov	r8, r4
 800adf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800adf4:	46a1      	mov	r9, r4
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800af48 <_strtod_l+0x598>
 800adfc:	2322      	movs	r3, #34	@ 0x22
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	f04f 0a00 	mov.w	sl, #0
 800ae04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f43f ae0b 	beq.w	800aa22 <_strtod_l+0x72>
 800ae0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae0e:	9805      	ldr	r0, [sp, #20]
 800ae10:	f7ff f946 	bl	800a0a0 <_Bfree>
 800ae14:	9805      	ldr	r0, [sp, #20]
 800ae16:	4649      	mov	r1, r9
 800ae18:	f7ff f942 	bl	800a0a0 <_Bfree>
 800ae1c:	9805      	ldr	r0, [sp, #20]
 800ae1e:	4641      	mov	r1, r8
 800ae20:	f7ff f93e 	bl	800a0a0 <_Bfree>
 800ae24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae26:	9805      	ldr	r0, [sp, #20]
 800ae28:	f7ff f93a 	bl	800a0a0 <_Bfree>
 800ae2c:	9805      	ldr	r0, [sp, #20]
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f7ff f936 	bl	800a0a0 <_Bfree>
 800ae34:	e5f5      	b.n	800aa22 <_strtod_l+0x72>
 800ae36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	dbbc      	blt.n	800adba <_strtod_l+0x40a>
 800ae40:	4c3f      	ldr	r4, [pc, #252]	@ (800af40 <_strtod_l+0x590>)
 800ae42:	f1c5 050f 	rsb	r5, r5, #15
 800ae46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ae4a:	4652      	mov	r2, sl
 800ae4c:	465b      	mov	r3, fp
 800ae4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae52:	f7f5 fbd1 	bl	80005f8 <__aeabi_dmul>
 800ae56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae58:	1b5d      	subs	r5, r3, r5
 800ae5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ae5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ae62:	e78f      	b.n	800ad84 <_strtod_l+0x3d4>
 800ae64:	3316      	adds	r3, #22
 800ae66:	dba8      	blt.n	800adba <_strtod_l+0x40a>
 800ae68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae6a:	eba3 0808 	sub.w	r8, r3, r8
 800ae6e:	4b34      	ldr	r3, [pc, #208]	@ (800af40 <_strtod_l+0x590>)
 800ae70:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ae74:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ae78:	4650      	mov	r0, sl
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	f7f5 fce6 	bl	800084c <__aeabi_ddiv>
 800ae80:	e782      	b.n	800ad88 <_strtod_l+0x3d8>
 800ae82:	2300      	movs	r3, #0
 800ae84:	4f2f      	ldr	r7, [pc, #188]	@ (800af44 <_strtod_l+0x594>)
 800ae86:	1124      	asrs	r4, r4, #4
 800ae88:	4650      	mov	r0, sl
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	461e      	mov	r6, r3
 800ae8e:	2c01      	cmp	r4, #1
 800ae90:	dc21      	bgt.n	800aed6 <_strtod_l+0x526>
 800ae92:	b10b      	cbz	r3, 800ae98 <_strtod_l+0x4e8>
 800ae94:	4682      	mov	sl, r0
 800ae96:	468b      	mov	fp, r1
 800ae98:	492a      	ldr	r1, [pc, #168]	@ (800af44 <_strtod_l+0x594>)
 800ae9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800aea2:	4652      	mov	r2, sl
 800aea4:	465b      	mov	r3, fp
 800aea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeaa:	f7f5 fba5 	bl	80005f8 <__aeabi_dmul>
 800aeae:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <_strtod_l+0x598>)
 800aeb0:	460a      	mov	r2, r1
 800aeb2:	400b      	ands	r3, r1
 800aeb4:	4925      	ldr	r1, [pc, #148]	@ (800af4c <_strtod_l+0x59c>)
 800aeb6:	428b      	cmp	r3, r1
 800aeb8:	4682      	mov	sl, r0
 800aeba:	d898      	bhi.n	800adee <_strtod_l+0x43e>
 800aebc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800aec0:	428b      	cmp	r3, r1
 800aec2:	bf86      	itte	hi
 800aec4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800af50 <_strtod_l+0x5a0>
 800aec8:	f04f 3aff 	movhi.w	sl, #4294967295
 800aecc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800aed0:	2300      	movs	r3, #0
 800aed2:	9308      	str	r3, [sp, #32]
 800aed4:	e076      	b.n	800afc4 <_strtod_l+0x614>
 800aed6:	07e2      	lsls	r2, r4, #31
 800aed8:	d504      	bpl.n	800aee4 <_strtod_l+0x534>
 800aeda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aede:	f7f5 fb8b 	bl	80005f8 <__aeabi_dmul>
 800aee2:	2301      	movs	r3, #1
 800aee4:	3601      	adds	r6, #1
 800aee6:	1064      	asrs	r4, r4, #1
 800aee8:	3708      	adds	r7, #8
 800aeea:	e7d0      	b.n	800ae8e <_strtod_l+0x4de>
 800aeec:	d0f0      	beq.n	800aed0 <_strtod_l+0x520>
 800aeee:	4264      	negs	r4, r4
 800aef0:	f014 020f 	ands.w	r2, r4, #15
 800aef4:	d00a      	beq.n	800af0c <_strtod_l+0x55c>
 800aef6:	4b12      	ldr	r3, [pc, #72]	@ (800af40 <_strtod_l+0x590>)
 800aef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aefc:	4650      	mov	r0, sl
 800aefe:	4659      	mov	r1, fp
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 fca2 	bl	800084c <__aeabi_ddiv>
 800af08:	4682      	mov	sl, r0
 800af0a:	468b      	mov	fp, r1
 800af0c:	1124      	asrs	r4, r4, #4
 800af0e:	d0df      	beq.n	800aed0 <_strtod_l+0x520>
 800af10:	2c1f      	cmp	r4, #31
 800af12:	dd1f      	ble.n	800af54 <_strtod_l+0x5a4>
 800af14:	2400      	movs	r4, #0
 800af16:	46a0      	mov	r8, r4
 800af18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af1a:	46a1      	mov	r9, r4
 800af1c:	9a05      	ldr	r2, [sp, #20]
 800af1e:	2322      	movs	r3, #34	@ 0x22
 800af20:	f04f 0a00 	mov.w	sl, #0
 800af24:	f04f 0b00 	mov.w	fp, #0
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	e76b      	b.n	800ae04 <_strtod_l+0x454>
 800af2c:	0800ca15 	.word	0x0800ca15
 800af30:	0800cce0 	.word	0x0800cce0
 800af34:	0800ca0d 	.word	0x0800ca0d
 800af38:	0800ca44 	.word	0x0800ca44
 800af3c:	0800cb7d 	.word	0x0800cb7d
 800af40:	0800cc18 	.word	0x0800cc18
 800af44:	0800cbf0 	.word	0x0800cbf0
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	7ca00000 	.word	0x7ca00000
 800af50:	7fefffff 	.word	0x7fefffff
 800af54:	f014 0310 	ands.w	r3, r4, #16
 800af58:	bf18      	it	ne
 800af5a:	236a      	movne	r3, #106	@ 0x6a
 800af5c:	4ea9      	ldr	r6, [pc, #676]	@ (800b204 <_strtod_l+0x854>)
 800af5e:	9308      	str	r3, [sp, #32]
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	2300      	movs	r3, #0
 800af66:	07e7      	lsls	r7, r4, #31
 800af68:	d504      	bpl.n	800af74 <_strtod_l+0x5c4>
 800af6a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af6e:	f7f5 fb43 	bl	80005f8 <__aeabi_dmul>
 800af72:	2301      	movs	r3, #1
 800af74:	1064      	asrs	r4, r4, #1
 800af76:	f106 0608 	add.w	r6, r6, #8
 800af7a:	d1f4      	bne.n	800af66 <_strtod_l+0x5b6>
 800af7c:	b10b      	cbz	r3, 800af82 <_strtod_l+0x5d2>
 800af7e:	4682      	mov	sl, r0
 800af80:	468b      	mov	fp, r1
 800af82:	9b08      	ldr	r3, [sp, #32]
 800af84:	b1b3      	cbz	r3, 800afb4 <_strtod_l+0x604>
 800af86:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800af8a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800af8e:	2b00      	cmp	r3, #0
 800af90:	4659      	mov	r1, fp
 800af92:	dd0f      	ble.n	800afb4 <_strtod_l+0x604>
 800af94:	2b1f      	cmp	r3, #31
 800af96:	dd56      	ble.n	800b046 <_strtod_l+0x696>
 800af98:	2b34      	cmp	r3, #52	@ 0x34
 800af9a:	bfde      	ittt	le
 800af9c:	f04f 33ff 	movle.w	r3, #4294967295
 800afa0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800afa4:	4093      	lslle	r3, r2
 800afa6:	f04f 0a00 	mov.w	sl, #0
 800afaa:	bfcc      	ite	gt
 800afac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800afb0:	ea03 0b01 	andle.w	fp, r3, r1
 800afb4:	2200      	movs	r2, #0
 800afb6:	2300      	movs	r3, #0
 800afb8:	4650      	mov	r0, sl
 800afba:	4659      	mov	r1, fp
 800afbc:	f7f5 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1a7      	bne.n	800af14 <_strtod_l+0x564>
 800afc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800afca:	9805      	ldr	r0, [sp, #20]
 800afcc:	462b      	mov	r3, r5
 800afce:	464a      	mov	r2, r9
 800afd0:	f7ff f8ce 	bl	800a170 <__s2b>
 800afd4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f43f af09 	beq.w	800adee <_strtod_l+0x43e>
 800afdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afe0:	2a00      	cmp	r2, #0
 800afe2:	eba3 0308 	sub.w	r3, r3, r8
 800afe6:	bfa8      	it	ge
 800afe8:	2300      	movge	r3, #0
 800afea:	9312      	str	r3, [sp, #72]	@ 0x48
 800afec:	2400      	movs	r4, #0
 800afee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aff2:	9316      	str	r3, [sp, #88]	@ 0x58
 800aff4:	46a0      	mov	r8, r4
 800aff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aff8:	9805      	ldr	r0, [sp, #20]
 800affa:	6859      	ldr	r1, [r3, #4]
 800affc:	f7ff f810 	bl	800a020 <_Balloc>
 800b000:	4681      	mov	r9, r0
 800b002:	2800      	cmp	r0, #0
 800b004:	f43f aef7 	beq.w	800adf6 <_strtod_l+0x446>
 800b008:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b00a:	691a      	ldr	r2, [r3, #16]
 800b00c:	3202      	adds	r2, #2
 800b00e:	f103 010c 	add.w	r1, r3, #12
 800b012:	0092      	lsls	r2, r2, #2
 800b014:	300c      	adds	r0, #12
 800b016:	f7fe f894 	bl	8009142 <memcpy>
 800b01a:	ec4b ab10 	vmov	d0, sl, fp
 800b01e:	9805      	ldr	r0, [sp, #20]
 800b020:	aa1c      	add	r2, sp, #112	@ 0x70
 800b022:	a91b      	add	r1, sp, #108	@ 0x6c
 800b024:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b028:	f7ff fbd6 	bl	800a7d8 <__d2b>
 800b02c:	901a      	str	r0, [sp, #104]	@ 0x68
 800b02e:	2800      	cmp	r0, #0
 800b030:	f43f aee1 	beq.w	800adf6 <_strtod_l+0x446>
 800b034:	9805      	ldr	r0, [sp, #20]
 800b036:	2101      	movs	r1, #1
 800b038:	f7ff f930 	bl	800a29c <__i2b>
 800b03c:	4680      	mov	r8, r0
 800b03e:	b948      	cbnz	r0, 800b054 <_strtod_l+0x6a4>
 800b040:	f04f 0800 	mov.w	r8, #0
 800b044:	e6d7      	b.n	800adf6 <_strtod_l+0x446>
 800b046:	f04f 32ff 	mov.w	r2, #4294967295
 800b04a:	fa02 f303 	lsl.w	r3, r2, r3
 800b04e:	ea03 0a0a 	and.w	sl, r3, sl
 800b052:	e7af      	b.n	800afb4 <_strtod_l+0x604>
 800b054:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b056:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b058:	2d00      	cmp	r5, #0
 800b05a:	bfab      	itete	ge
 800b05c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b05e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b060:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b062:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b064:	bfac      	ite	ge
 800b066:	18ef      	addge	r7, r5, r3
 800b068:	1b5e      	sublt	r6, r3, r5
 800b06a:	9b08      	ldr	r3, [sp, #32]
 800b06c:	1aed      	subs	r5, r5, r3
 800b06e:	4415      	add	r5, r2
 800b070:	4b65      	ldr	r3, [pc, #404]	@ (800b208 <_strtod_l+0x858>)
 800b072:	3d01      	subs	r5, #1
 800b074:	429d      	cmp	r5, r3
 800b076:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b07a:	da50      	bge.n	800b11e <_strtod_l+0x76e>
 800b07c:	1b5b      	subs	r3, r3, r5
 800b07e:	2b1f      	cmp	r3, #31
 800b080:	eba2 0203 	sub.w	r2, r2, r3
 800b084:	f04f 0101 	mov.w	r1, #1
 800b088:	dc3d      	bgt.n	800b106 <_strtod_l+0x756>
 800b08a:	fa01 f303 	lsl.w	r3, r1, r3
 800b08e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b090:	2300      	movs	r3, #0
 800b092:	9310      	str	r3, [sp, #64]	@ 0x40
 800b094:	18bd      	adds	r5, r7, r2
 800b096:	9b08      	ldr	r3, [sp, #32]
 800b098:	42af      	cmp	r7, r5
 800b09a:	4416      	add	r6, r2
 800b09c:	441e      	add	r6, r3
 800b09e:	463b      	mov	r3, r7
 800b0a0:	bfa8      	it	ge
 800b0a2:	462b      	movge	r3, r5
 800b0a4:	42b3      	cmp	r3, r6
 800b0a6:	bfa8      	it	ge
 800b0a8:	4633      	movge	r3, r6
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	bfc2      	ittt	gt
 800b0ae:	1aed      	subgt	r5, r5, r3
 800b0b0:	1af6      	subgt	r6, r6, r3
 800b0b2:	1aff      	subgt	r7, r7, r3
 800b0b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dd16      	ble.n	800b0e8 <_strtod_l+0x738>
 800b0ba:	4641      	mov	r1, r8
 800b0bc:	9805      	ldr	r0, [sp, #20]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f7ff f9a4 	bl	800a40c <__pow5mult>
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0ba      	beq.n	800b040 <_strtod_l+0x690>
 800b0ca:	4601      	mov	r1, r0
 800b0cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b0ce:	9805      	ldr	r0, [sp, #20]
 800b0d0:	f7ff f8fa 	bl	800a2c8 <__multiply>
 800b0d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	f43f ae8d 	beq.w	800adf6 <_strtod_l+0x446>
 800b0dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0de:	9805      	ldr	r0, [sp, #20]
 800b0e0:	f7fe ffde 	bl	800a0a0 <_Bfree>
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0e6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	dc1d      	bgt.n	800b128 <_strtod_l+0x778>
 800b0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	dd23      	ble.n	800b13a <_strtod_l+0x78a>
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b0f6:	9805      	ldr	r0, [sp, #20]
 800b0f8:	f7ff f988 	bl	800a40c <__pow5mult>
 800b0fc:	4681      	mov	r9, r0
 800b0fe:	b9e0      	cbnz	r0, 800b13a <_strtod_l+0x78a>
 800b100:	f04f 0900 	mov.w	r9, #0
 800b104:	e677      	b.n	800adf6 <_strtod_l+0x446>
 800b106:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b10a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b10e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b112:	35e2      	adds	r5, #226	@ 0xe2
 800b114:	fa01 f305 	lsl.w	r3, r1, r5
 800b118:	9310      	str	r3, [sp, #64]	@ 0x40
 800b11a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b11c:	e7ba      	b.n	800b094 <_strtod_l+0x6e4>
 800b11e:	2300      	movs	r3, #0
 800b120:	9310      	str	r3, [sp, #64]	@ 0x40
 800b122:	2301      	movs	r3, #1
 800b124:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b126:	e7b5      	b.n	800b094 <_strtod_l+0x6e4>
 800b128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b12a:	9805      	ldr	r0, [sp, #20]
 800b12c:	462a      	mov	r2, r5
 800b12e:	f7ff f9c7 	bl	800a4c0 <__lshift>
 800b132:	901a      	str	r0, [sp, #104]	@ 0x68
 800b134:	2800      	cmp	r0, #0
 800b136:	d1d9      	bne.n	800b0ec <_strtod_l+0x73c>
 800b138:	e65d      	b.n	800adf6 <_strtod_l+0x446>
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	dd07      	ble.n	800b14e <_strtod_l+0x79e>
 800b13e:	4649      	mov	r1, r9
 800b140:	9805      	ldr	r0, [sp, #20]
 800b142:	4632      	mov	r2, r6
 800b144:	f7ff f9bc 	bl	800a4c0 <__lshift>
 800b148:	4681      	mov	r9, r0
 800b14a:	2800      	cmp	r0, #0
 800b14c:	d0d8      	beq.n	800b100 <_strtod_l+0x750>
 800b14e:	2f00      	cmp	r7, #0
 800b150:	dd08      	ble.n	800b164 <_strtod_l+0x7b4>
 800b152:	4641      	mov	r1, r8
 800b154:	9805      	ldr	r0, [sp, #20]
 800b156:	463a      	mov	r2, r7
 800b158:	f7ff f9b2 	bl	800a4c0 <__lshift>
 800b15c:	4680      	mov	r8, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	f43f ae49 	beq.w	800adf6 <_strtod_l+0x446>
 800b164:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b166:	9805      	ldr	r0, [sp, #20]
 800b168:	464a      	mov	r2, r9
 800b16a:	f7ff fa31 	bl	800a5d0 <__mdiff>
 800b16e:	4604      	mov	r4, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	f43f ae40 	beq.w	800adf6 <_strtod_l+0x446>
 800b176:	68c3      	ldr	r3, [r0, #12]
 800b178:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b17a:	2300      	movs	r3, #0
 800b17c:	60c3      	str	r3, [r0, #12]
 800b17e:	4641      	mov	r1, r8
 800b180:	f7ff fa0a 	bl	800a598 <__mcmp>
 800b184:	2800      	cmp	r0, #0
 800b186:	da45      	bge.n	800b214 <_strtod_l+0x864>
 800b188:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18a:	ea53 030a 	orrs.w	r3, r3, sl
 800b18e:	d16b      	bne.n	800b268 <_strtod_l+0x8b8>
 800b190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b194:	2b00      	cmp	r3, #0
 800b196:	d167      	bne.n	800b268 <_strtod_l+0x8b8>
 800b198:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b19c:	0d1b      	lsrs	r3, r3, #20
 800b19e:	051b      	lsls	r3, r3, #20
 800b1a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1a4:	d960      	bls.n	800b268 <_strtod_l+0x8b8>
 800b1a6:	6963      	ldr	r3, [r4, #20]
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_strtod_l+0x800>
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	dd5b      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1b0:	4621      	mov	r1, r4
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	9805      	ldr	r0, [sp, #20]
 800b1b6:	f7ff f983 	bl	800a4c0 <__lshift>
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	4604      	mov	r4, r0
 800b1be:	f7ff f9eb 	bl	800a598 <__mcmp>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	dd50      	ble.n	800b268 <_strtod_l+0x8b8>
 800b1c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b1ca:	9a08      	ldr	r2, [sp, #32]
 800b1cc:	0d1b      	lsrs	r3, r3, #20
 800b1ce:	051b      	lsls	r3, r3, #20
 800b1d0:	2a00      	cmp	r2, #0
 800b1d2:	d06a      	beq.n	800b2aa <_strtod_l+0x8fa>
 800b1d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b1d8:	d867      	bhi.n	800b2aa <_strtod_l+0x8fa>
 800b1da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b1de:	f67f ae9d 	bls.w	800af1c <_strtod_l+0x56c>
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b20c <_strtod_l+0x85c>)
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 fa05 	bl	80005f8 <__aeabi_dmul>
 800b1ee:	4b08      	ldr	r3, [pc, #32]	@ (800b210 <_strtod_l+0x860>)
 800b1f0:	400b      	ands	r3, r1
 800b1f2:	4682      	mov	sl, r0
 800b1f4:	468b      	mov	fp, r1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f47f ae08 	bne.w	800ae0c <_strtod_l+0x45c>
 800b1fc:	9a05      	ldr	r2, [sp, #20]
 800b1fe:	2322      	movs	r3, #34	@ 0x22
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	e603      	b.n	800ae0c <_strtod_l+0x45c>
 800b204:	0800cd08 	.word	0x0800cd08
 800b208:	fffffc02 	.word	0xfffffc02
 800b20c:	39500000 	.word	0x39500000
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b218:	d165      	bne.n	800b2e6 <_strtod_l+0x936>
 800b21a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b21c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b220:	b35a      	cbz	r2, 800b27a <_strtod_l+0x8ca>
 800b222:	4a9f      	ldr	r2, [pc, #636]	@ (800b4a0 <_strtod_l+0xaf0>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d12b      	bne.n	800b280 <_strtod_l+0x8d0>
 800b228:	9b08      	ldr	r3, [sp, #32]
 800b22a:	4651      	mov	r1, sl
 800b22c:	b303      	cbz	r3, 800b270 <_strtod_l+0x8c0>
 800b22e:	4b9d      	ldr	r3, [pc, #628]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b230:	465a      	mov	r2, fp
 800b232:	4013      	ands	r3, r2
 800b234:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b238:	f04f 32ff 	mov.w	r2, #4294967295
 800b23c:	d81b      	bhi.n	800b276 <_strtod_l+0x8c6>
 800b23e:	0d1b      	lsrs	r3, r3, #20
 800b240:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b244:	fa02 f303 	lsl.w	r3, r2, r3
 800b248:	4299      	cmp	r1, r3
 800b24a:	d119      	bne.n	800b280 <_strtod_l+0x8d0>
 800b24c:	4b96      	ldr	r3, [pc, #600]	@ (800b4a8 <_strtod_l+0xaf8>)
 800b24e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b250:	429a      	cmp	r2, r3
 800b252:	d102      	bne.n	800b25a <_strtod_l+0x8aa>
 800b254:	3101      	adds	r1, #1
 800b256:	f43f adce 	beq.w	800adf6 <_strtod_l+0x446>
 800b25a:	4b92      	ldr	r3, [pc, #584]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b25c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b25e:	401a      	ands	r2, r3
 800b260:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b264:	f04f 0a00 	mov.w	sl, #0
 800b268:	9b08      	ldr	r3, [sp, #32]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1b9      	bne.n	800b1e2 <_strtod_l+0x832>
 800b26e:	e5cd      	b.n	800ae0c <_strtod_l+0x45c>
 800b270:	f04f 33ff 	mov.w	r3, #4294967295
 800b274:	e7e8      	b.n	800b248 <_strtod_l+0x898>
 800b276:	4613      	mov	r3, r2
 800b278:	e7e6      	b.n	800b248 <_strtod_l+0x898>
 800b27a:	ea53 030a 	orrs.w	r3, r3, sl
 800b27e:	d0a2      	beq.n	800b1c6 <_strtod_l+0x816>
 800b280:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b282:	b1db      	cbz	r3, 800b2bc <_strtod_l+0x90c>
 800b284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b286:	4213      	tst	r3, r2
 800b288:	d0ee      	beq.n	800b268 <_strtod_l+0x8b8>
 800b28a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b28c:	9a08      	ldr	r2, [sp, #32]
 800b28e:	4650      	mov	r0, sl
 800b290:	4659      	mov	r1, fp
 800b292:	b1bb      	cbz	r3, 800b2c4 <_strtod_l+0x914>
 800b294:	f7ff fb6e 	bl	800a974 <sulp>
 800b298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b29c:	ec53 2b10 	vmov	r2, r3, d0
 800b2a0:	f7f4 fff4 	bl	800028c <__adddf3>
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	468b      	mov	fp, r1
 800b2a8:	e7de      	b.n	800b268 <_strtod_l+0x8b8>
 800b2aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b2ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b2b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b2b6:	f04f 3aff 	mov.w	sl, #4294967295
 800b2ba:	e7d5      	b.n	800b268 <_strtod_l+0x8b8>
 800b2bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b2be:	ea13 0f0a 	tst.w	r3, sl
 800b2c2:	e7e1      	b.n	800b288 <_strtod_l+0x8d8>
 800b2c4:	f7ff fb56 	bl	800a974 <sulp>
 800b2c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2cc:	ec53 2b10 	vmov	r2, r3, d0
 800b2d0:	f7f4 ffda 	bl	8000288 <__aeabi_dsub>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	f7f5 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d0c1      	beq.n	800b268 <_strtod_l+0x8b8>
 800b2e4:	e61a      	b.n	800af1c <_strtod_l+0x56c>
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	f7ff facd 	bl	800a888 <__ratio>
 800b2ee:	ec57 6b10 	vmov	r6, r7, d0
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	f7f5 fbf8 	bl	8000af0 <__aeabi_dcmple>
 800b300:	2800      	cmp	r0, #0
 800b302:	d06f      	beq.n	800b3e4 <_strtod_l+0xa34>
 800b304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b306:	2b00      	cmp	r3, #0
 800b308:	d17a      	bne.n	800b400 <_strtod_l+0xa50>
 800b30a:	f1ba 0f00 	cmp.w	sl, #0
 800b30e:	d158      	bne.n	800b3c2 <_strtod_l+0xa12>
 800b310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b312:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b316:	2b00      	cmp	r3, #0
 800b318:	d15a      	bne.n	800b3d0 <_strtod_l+0xa20>
 800b31a:	4b64      	ldr	r3, [pc, #400]	@ (800b4ac <_strtod_l+0xafc>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4630      	mov	r0, r6
 800b320:	4639      	mov	r1, r7
 800b322:	f7f5 fbdb 	bl	8000adc <__aeabi_dcmplt>
 800b326:	2800      	cmp	r0, #0
 800b328:	d159      	bne.n	800b3de <_strtod_l+0xa2e>
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	4b60      	ldr	r3, [pc, #384]	@ (800b4b0 <_strtod_l+0xb00>)
 800b330:	2200      	movs	r2, #0
 800b332:	f7f5 f961 	bl	80005f8 <__aeabi_dmul>
 800b336:	4606      	mov	r6, r0
 800b338:	460f      	mov	r7, r1
 800b33a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b33e:	9606      	str	r6, [sp, #24]
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b346:	4d57      	ldr	r5, [pc, #348]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b348:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b34c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b34e:	401d      	ands	r5, r3
 800b350:	4b58      	ldr	r3, [pc, #352]	@ (800b4b4 <_strtod_l+0xb04>)
 800b352:	429d      	cmp	r5, r3
 800b354:	f040 80b2 	bne.w	800b4bc <_strtod_l+0xb0c>
 800b358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b35a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b35e:	ec4b ab10 	vmov	d0, sl, fp
 800b362:	f7ff f9c9 	bl	800a6f8 <__ulp>
 800b366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b36a:	ec51 0b10 	vmov	r0, r1, d0
 800b36e:	f7f5 f943 	bl	80005f8 <__aeabi_dmul>
 800b372:	4652      	mov	r2, sl
 800b374:	465b      	mov	r3, fp
 800b376:	f7f4 ff89 	bl	800028c <__adddf3>
 800b37a:	460b      	mov	r3, r1
 800b37c:	4949      	ldr	r1, [pc, #292]	@ (800b4a4 <_strtod_l+0xaf4>)
 800b37e:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b8 <_strtod_l+0xb08>)
 800b380:	4019      	ands	r1, r3
 800b382:	4291      	cmp	r1, r2
 800b384:	4682      	mov	sl, r0
 800b386:	d942      	bls.n	800b40e <_strtod_l+0xa5e>
 800b388:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b38a:	4b47      	ldr	r3, [pc, #284]	@ (800b4a8 <_strtod_l+0xaf8>)
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d103      	bne.n	800b398 <_strtod_l+0x9e8>
 800b390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b392:	3301      	adds	r3, #1
 800b394:	f43f ad2f 	beq.w	800adf6 <_strtod_l+0x446>
 800b398:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b4a8 <_strtod_l+0xaf8>
 800b39c:	f04f 3aff 	mov.w	sl, #4294967295
 800b3a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3a2:	9805      	ldr	r0, [sp, #20]
 800b3a4:	f7fe fe7c 	bl	800a0a0 <_Bfree>
 800b3a8:	9805      	ldr	r0, [sp, #20]
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	f7fe fe78 	bl	800a0a0 <_Bfree>
 800b3b0:	9805      	ldr	r0, [sp, #20]
 800b3b2:	4641      	mov	r1, r8
 800b3b4:	f7fe fe74 	bl	800a0a0 <_Bfree>
 800b3b8:	9805      	ldr	r0, [sp, #20]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	f7fe fe70 	bl	800a0a0 <_Bfree>
 800b3c0:	e619      	b.n	800aff6 <_strtod_l+0x646>
 800b3c2:	f1ba 0f01 	cmp.w	sl, #1
 800b3c6:	d103      	bne.n	800b3d0 <_strtod_l+0xa20>
 800b3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	f43f ada6 	beq.w	800af1c <_strtod_l+0x56c>
 800b3d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b480 <_strtod_l+0xad0>
 800b3d4:	4f35      	ldr	r7, [pc, #212]	@ (800b4ac <_strtod_l+0xafc>)
 800b3d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b3da:	2600      	movs	r6, #0
 800b3dc:	e7b1      	b.n	800b342 <_strtod_l+0x992>
 800b3de:	4f34      	ldr	r7, [pc, #208]	@ (800b4b0 <_strtod_l+0xb00>)
 800b3e0:	2600      	movs	r6, #0
 800b3e2:	e7aa      	b.n	800b33a <_strtod_l+0x98a>
 800b3e4:	4b32      	ldr	r3, [pc, #200]	@ (800b4b0 <_strtod_l+0xb00>)
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	4639      	mov	r1, r7
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f7f5 f904 	bl	80005f8 <__aeabi_dmul>
 800b3f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460f      	mov	r7, r1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d09f      	beq.n	800b33a <_strtod_l+0x98a>
 800b3fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b3fe:	e7a0      	b.n	800b342 <_strtod_l+0x992>
 800b400:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b488 <_strtod_l+0xad8>
 800b404:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b408:	ec57 6b17 	vmov	r6, r7, d7
 800b40c:	e799      	b.n	800b342 <_strtod_l+0x992>
 800b40e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b412:	9b08      	ldr	r3, [sp, #32]
 800b414:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1c1      	bne.n	800b3a0 <_strtod_l+0x9f0>
 800b41c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b420:	0d1b      	lsrs	r3, r3, #20
 800b422:	051b      	lsls	r3, r3, #20
 800b424:	429d      	cmp	r5, r3
 800b426:	d1bb      	bne.n	800b3a0 <_strtod_l+0x9f0>
 800b428:	4630      	mov	r0, r6
 800b42a:	4639      	mov	r1, r7
 800b42c:	f7f5 fc44 	bl	8000cb8 <__aeabi_d2lz>
 800b430:	f7f5 f8b4 	bl	800059c <__aeabi_l2d>
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	4630      	mov	r0, r6
 800b43a:	4639      	mov	r1, r7
 800b43c:	f7f4 ff24 	bl	8000288 <__aeabi_dsub>
 800b440:	460b      	mov	r3, r1
 800b442:	4602      	mov	r2, r0
 800b444:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b448:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b44e:	ea46 060a 	orr.w	r6, r6, sl
 800b452:	431e      	orrs	r6, r3
 800b454:	d06f      	beq.n	800b536 <_strtod_l+0xb86>
 800b456:	a30e      	add	r3, pc, #56	@ (adr r3, 800b490 <_strtod_l+0xae0>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 fb3e 	bl	8000adc <__aeabi_dcmplt>
 800b460:	2800      	cmp	r0, #0
 800b462:	f47f acd3 	bne.w	800ae0c <_strtod_l+0x45c>
 800b466:	a30c      	add	r3, pc, #48	@ (adr r3, 800b498 <_strtod_l+0xae8>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b470:	f7f5 fb52 	bl	8000b18 <__aeabi_dcmpgt>
 800b474:	2800      	cmp	r0, #0
 800b476:	d093      	beq.n	800b3a0 <_strtod_l+0x9f0>
 800b478:	e4c8      	b.n	800ae0c <_strtod_l+0x45c>
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w
 800b480:	00000000 	.word	0x00000000
 800b484:	bff00000 	.word	0xbff00000
 800b488:	00000000 	.word	0x00000000
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	94a03595 	.word	0x94a03595
 800b494:	3fdfffff 	.word	0x3fdfffff
 800b498:	35afe535 	.word	0x35afe535
 800b49c:	3fe00000 	.word	0x3fe00000
 800b4a0:	000fffff 	.word	0x000fffff
 800b4a4:	7ff00000 	.word	0x7ff00000
 800b4a8:	7fefffff 	.word	0x7fefffff
 800b4ac:	3ff00000 	.word	0x3ff00000
 800b4b0:	3fe00000 	.word	0x3fe00000
 800b4b4:	7fe00000 	.word	0x7fe00000
 800b4b8:	7c9fffff 	.word	0x7c9fffff
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	b323      	cbz	r3, 800b50a <_strtod_l+0xb5a>
 800b4c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b4c4:	d821      	bhi.n	800b50a <_strtod_l+0xb5a>
 800b4c6:	a328      	add	r3, pc, #160	@ (adr r3, 800b568 <_strtod_l+0xbb8>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f5 fb0e 	bl	8000af0 <__aeabi_dcmple>
 800b4d4:	b1a0      	cbz	r0, 800b500 <_strtod_l+0xb50>
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7f5 fb65 	bl	8000ba8 <__aeabi_d2uiz>
 800b4de:	2801      	cmp	r0, #1
 800b4e0:	bf38      	it	cc
 800b4e2:	2001      	movcc	r0, #1
 800b4e4:	f7f5 f80e 	bl	8000504 <__aeabi_ui2d>
 800b4e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	b9fb      	cbnz	r3, 800b530 <_strtod_l+0xb80>
 800b4f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b4f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b4fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b500:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b502:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b506:	1b5b      	subs	r3, r3, r5
 800b508:	9311      	str	r3, [sp, #68]	@ 0x44
 800b50a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b50e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b512:	f7ff f8f1 	bl	800a6f8 <__ulp>
 800b516:	4650      	mov	r0, sl
 800b518:	ec53 2b10 	vmov	r2, r3, d0
 800b51c:	4659      	mov	r1, fp
 800b51e:	f7f5 f86b 	bl	80005f8 <__aeabi_dmul>
 800b522:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b526:	f7f4 feb1 	bl	800028c <__adddf3>
 800b52a:	4682      	mov	sl, r0
 800b52c:	468b      	mov	fp, r1
 800b52e:	e770      	b.n	800b412 <_strtod_l+0xa62>
 800b530:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b534:	e7e0      	b.n	800b4f8 <_strtod_l+0xb48>
 800b536:	a30e      	add	r3, pc, #56	@ (adr r3, 800b570 <_strtod_l+0xbc0>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f5 face 	bl	8000adc <__aeabi_dcmplt>
 800b540:	e798      	b.n	800b474 <_strtod_l+0xac4>
 800b542:	2300      	movs	r3, #0
 800b544:	930e      	str	r3, [sp, #56]	@ 0x38
 800b546:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b548:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b54a:	6013      	str	r3, [r2, #0]
 800b54c:	f7ff ba6d 	b.w	800aa2a <_strtod_l+0x7a>
 800b550:	2a65      	cmp	r2, #101	@ 0x65
 800b552:	f43f ab68 	beq.w	800ac26 <_strtod_l+0x276>
 800b556:	2a45      	cmp	r2, #69	@ 0x45
 800b558:	f43f ab65 	beq.w	800ac26 <_strtod_l+0x276>
 800b55c:	2301      	movs	r3, #1
 800b55e:	f7ff bba0 	b.w	800aca2 <_strtod_l+0x2f2>
 800b562:	bf00      	nop
 800b564:	f3af 8000 	nop.w
 800b568:	ffc00000 	.word	0xffc00000
 800b56c:	41dfffff 	.word	0x41dfffff
 800b570:	94a03595 	.word	0x94a03595
 800b574:	3fcfffff 	.word	0x3fcfffff

0800b578 <_strtod_r>:
 800b578:	4b01      	ldr	r3, [pc, #4]	@ (800b580 <_strtod_r+0x8>)
 800b57a:	f7ff ba19 	b.w	800a9b0 <_strtod_l>
 800b57e:	bf00      	nop
 800b580:	20000074 	.word	0x20000074

0800b584 <_strtol_l.isra.0>:
 800b584:	2b24      	cmp	r3, #36	@ 0x24
 800b586:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b58a:	4686      	mov	lr, r0
 800b58c:	4690      	mov	r8, r2
 800b58e:	d801      	bhi.n	800b594 <_strtol_l.isra.0+0x10>
 800b590:	2b01      	cmp	r3, #1
 800b592:	d106      	bne.n	800b5a2 <_strtol_l.isra.0+0x1e>
 800b594:	f7fd fda8 	bl	80090e8 <__errno>
 800b598:	2316      	movs	r3, #22
 800b59a:	6003      	str	r3, [r0, #0]
 800b59c:	2000      	movs	r0, #0
 800b59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a2:	4834      	ldr	r0, [pc, #208]	@ (800b674 <_strtol_l.isra.0+0xf0>)
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b5ac:	5d06      	ldrb	r6, [r0, r4]
 800b5ae:	f016 0608 	ands.w	r6, r6, #8
 800b5b2:	d1f8      	bne.n	800b5a6 <_strtol_l.isra.0+0x22>
 800b5b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b5b6:	d110      	bne.n	800b5da <_strtol_l.isra.0+0x56>
 800b5b8:	782c      	ldrb	r4, [r5, #0]
 800b5ba:	2601      	movs	r6, #1
 800b5bc:	1c95      	adds	r5, r2, #2
 800b5be:	f033 0210 	bics.w	r2, r3, #16
 800b5c2:	d115      	bne.n	800b5f0 <_strtol_l.isra.0+0x6c>
 800b5c4:	2c30      	cmp	r4, #48	@ 0x30
 800b5c6:	d10d      	bne.n	800b5e4 <_strtol_l.isra.0+0x60>
 800b5c8:	782a      	ldrb	r2, [r5, #0]
 800b5ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b5ce:	2a58      	cmp	r2, #88	@ 0x58
 800b5d0:	d108      	bne.n	800b5e4 <_strtol_l.isra.0+0x60>
 800b5d2:	786c      	ldrb	r4, [r5, #1]
 800b5d4:	3502      	adds	r5, #2
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	e00a      	b.n	800b5f0 <_strtol_l.isra.0+0x6c>
 800b5da:	2c2b      	cmp	r4, #43	@ 0x2b
 800b5dc:	bf04      	itt	eq
 800b5de:	782c      	ldrbeq	r4, [r5, #0]
 800b5e0:	1c95      	addeq	r5, r2, #2
 800b5e2:	e7ec      	b.n	800b5be <_strtol_l.isra.0+0x3a>
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1f6      	bne.n	800b5d6 <_strtol_l.isra.0+0x52>
 800b5e8:	2c30      	cmp	r4, #48	@ 0x30
 800b5ea:	bf14      	ite	ne
 800b5ec:	230a      	movne	r3, #10
 800b5ee:	2308      	moveq	r3, #8
 800b5f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b5f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	fbbc f9f3 	udiv	r9, ip, r3
 800b5fe:	4610      	mov	r0, r2
 800b600:	fb03 ca19 	mls	sl, r3, r9, ip
 800b604:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b608:	2f09      	cmp	r7, #9
 800b60a:	d80f      	bhi.n	800b62c <_strtol_l.isra.0+0xa8>
 800b60c:	463c      	mov	r4, r7
 800b60e:	42a3      	cmp	r3, r4
 800b610:	dd1b      	ble.n	800b64a <_strtol_l.isra.0+0xc6>
 800b612:	1c57      	adds	r7, r2, #1
 800b614:	d007      	beq.n	800b626 <_strtol_l.isra.0+0xa2>
 800b616:	4581      	cmp	r9, r0
 800b618:	d314      	bcc.n	800b644 <_strtol_l.isra.0+0xc0>
 800b61a:	d101      	bne.n	800b620 <_strtol_l.isra.0+0x9c>
 800b61c:	45a2      	cmp	sl, r4
 800b61e:	db11      	blt.n	800b644 <_strtol_l.isra.0+0xc0>
 800b620:	fb00 4003 	mla	r0, r0, r3, r4
 800b624:	2201      	movs	r2, #1
 800b626:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b62a:	e7eb      	b.n	800b604 <_strtol_l.isra.0+0x80>
 800b62c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b630:	2f19      	cmp	r7, #25
 800b632:	d801      	bhi.n	800b638 <_strtol_l.isra.0+0xb4>
 800b634:	3c37      	subs	r4, #55	@ 0x37
 800b636:	e7ea      	b.n	800b60e <_strtol_l.isra.0+0x8a>
 800b638:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b63c:	2f19      	cmp	r7, #25
 800b63e:	d804      	bhi.n	800b64a <_strtol_l.isra.0+0xc6>
 800b640:	3c57      	subs	r4, #87	@ 0x57
 800b642:	e7e4      	b.n	800b60e <_strtol_l.isra.0+0x8a>
 800b644:	f04f 32ff 	mov.w	r2, #4294967295
 800b648:	e7ed      	b.n	800b626 <_strtol_l.isra.0+0xa2>
 800b64a:	1c53      	adds	r3, r2, #1
 800b64c:	d108      	bne.n	800b660 <_strtol_l.isra.0+0xdc>
 800b64e:	2322      	movs	r3, #34	@ 0x22
 800b650:	f8ce 3000 	str.w	r3, [lr]
 800b654:	4660      	mov	r0, ip
 800b656:	f1b8 0f00 	cmp.w	r8, #0
 800b65a:	d0a0      	beq.n	800b59e <_strtol_l.isra.0+0x1a>
 800b65c:	1e69      	subs	r1, r5, #1
 800b65e:	e006      	b.n	800b66e <_strtol_l.isra.0+0xea>
 800b660:	b106      	cbz	r6, 800b664 <_strtol_l.isra.0+0xe0>
 800b662:	4240      	negs	r0, r0
 800b664:	f1b8 0f00 	cmp.w	r8, #0
 800b668:	d099      	beq.n	800b59e <_strtol_l.isra.0+0x1a>
 800b66a:	2a00      	cmp	r2, #0
 800b66c:	d1f6      	bne.n	800b65c <_strtol_l.isra.0+0xd8>
 800b66e:	f8c8 1000 	str.w	r1, [r8]
 800b672:	e794      	b.n	800b59e <_strtol_l.isra.0+0x1a>
 800b674:	0800cd31 	.word	0x0800cd31

0800b678 <_strtol_r>:
 800b678:	f7ff bf84 	b.w	800b584 <_strtol_l.isra.0>

0800b67c <__ssputs_r>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	688e      	ldr	r6, [r1, #8]
 800b682:	461f      	mov	r7, r3
 800b684:	42be      	cmp	r6, r7
 800b686:	680b      	ldr	r3, [r1, #0]
 800b688:	4682      	mov	sl, r0
 800b68a:	460c      	mov	r4, r1
 800b68c:	4690      	mov	r8, r2
 800b68e:	d82d      	bhi.n	800b6ec <__ssputs_r+0x70>
 800b690:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b694:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b698:	d026      	beq.n	800b6e8 <__ssputs_r+0x6c>
 800b69a:	6965      	ldr	r5, [r4, #20]
 800b69c:	6909      	ldr	r1, [r1, #16]
 800b69e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6a2:	eba3 0901 	sub.w	r9, r3, r1
 800b6a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6aa:	1c7b      	adds	r3, r7, #1
 800b6ac:	444b      	add	r3, r9
 800b6ae:	106d      	asrs	r5, r5, #1
 800b6b0:	429d      	cmp	r5, r3
 800b6b2:	bf38      	it	cc
 800b6b4:	461d      	movcc	r5, r3
 800b6b6:	0553      	lsls	r3, r2, #21
 800b6b8:	d527      	bpl.n	800b70a <__ssputs_r+0x8e>
 800b6ba:	4629      	mov	r1, r5
 800b6bc:	f7fe fc24 	bl	8009f08 <_malloc_r>
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	b360      	cbz	r0, 800b71e <__ssputs_r+0xa2>
 800b6c4:	6921      	ldr	r1, [r4, #16]
 800b6c6:	464a      	mov	r2, r9
 800b6c8:	f7fd fd3b 	bl	8009142 <memcpy>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	6126      	str	r6, [r4, #16]
 800b6da:	6165      	str	r5, [r4, #20]
 800b6dc:	444e      	add	r6, r9
 800b6de:	eba5 0509 	sub.w	r5, r5, r9
 800b6e2:	6026      	str	r6, [r4, #0]
 800b6e4:	60a5      	str	r5, [r4, #8]
 800b6e6:	463e      	mov	r6, r7
 800b6e8:	42be      	cmp	r6, r7
 800b6ea:	d900      	bls.n	800b6ee <__ssputs_r+0x72>
 800b6ec:	463e      	mov	r6, r7
 800b6ee:	6820      	ldr	r0, [r4, #0]
 800b6f0:	4632      	mov	r2, r6
 800b6f2:	4641      	mov	r1, r8
 800b6f4:	f000 fb6a 	bl	800bdcc <memmove>
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	1b9b      	subs	r3, r3, r6
 800b6fc:	60a3      	str	r3, [r4, #8]
 800b6fe:	6823      	ldr	r3, [r4, #0]
 800b700:	4433      	add	r3, r6
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	2000      	movs	r0, #0
 800b706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70a:	462a      	mov	r2, r5
 800b70c:	f000 ff41 	bl	800c592 <_realloc_r>
 800b710:	4606      	mov	r6, r0
 800b712:	2800      	cmp	r0, #0
 800b714:	d1e0      	bne.n	800b6d8 <__ssputs_r+0x5c>
 800b716:	6921      	ldr	r1, [r4, #16]
 800b718:	4650      	mov	r0, sl
 800b71a:	f7fe fb81 	bl	8009e20 <_free_r>
 800b71e:	230c      	movs	r3, #12
 800b720:	f8ca 3000 	str.w	r3, [sl]
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b72a:	81a3      	strh	r3, [r4, #12]
 800b72c:	f04f 30ff 	mov.w	r0, #4294967295
 800b730:	e7e9      	b.n	800b706 <__ssputs_r+0x8a>
	...

0800b734 <_svfiprintf_r>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	4698      	mov	r8, r3
 800b73a:	898b      	ldrh	r3, [r1, #12]
 800b73c:	061b      	lsls	r3, r3, #24
 800b73e:	b09d      	sub	sp, #116	@ 0x74
 800b740:	4607      	mov	r7, r0
 800b742:	460d      	mov	r5, r1
 800b744:	4614      	mov	r4, r2
 800b746:	d510      	bpl.n	800b76a <_svfiprintf_r+0x36>
 800b748:	690b      	ldr	r3, [r1, #16]
 800b74a:	b973      	cbnz	r3, 800b76a <_svfiprintf_r+0x36>
 800b74c:	2140      	movs	r1, #64	@ 0x40
 800b74e:	f7fe fbdb 	bl	8009f08 <_malloc_r>
 800b752:	6028      	str	r0, [r5, #0]
 800b754:	6128      	str	r0, [r5, #16]
 800b756:	b930      	cbnz	r0, 800b766 <_svfiprintf_r+0x32>
 800b758:	230c      	movs	r3, #12
 800b75a:	603b      	str	r3, [r7, #0]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	b01d      	add	sp, #116	@ 0x74
 800b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b766:	2340      	movs	r3, #64	@ 0x40
 800b768:	616b      	str	r3, [r5, #20]
 800b76a:	2300      	movs	r3, #0
 800b76c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b76e:	2320      	movs	r3, #32
 800b770:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b774:	f8cd 800c 	str.w	r8, [sp, #12]
 800b778:	2330      	movs	r3, #48	@ 0x30
 800b77a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b918 <_svfiprintf_r+0x1e4>
 800b77e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b782:	f04f 0901 	mov.w	r9, #1
 800b786:	4623      	mov	r3, r4
 800b788:	469a      	mov	sl, r3
 800b78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78e:	b10a      	cbz	r2, 800b794 <_svfiprintf_r+0x60>
 800b790:	2a25      	cmp	r2, #37	@ 0x25
 800b792:	d1f9      	bne.n	800b788 <_svfiprintf_r+0x54>
 800b794:	ebba 0b04 	subs.w	fp, sl, r4
 800b798:	d00b      	beq.n	800b7b2 <_svfiprintf_r+0x7e>
 800b79a:	465b      	mov	r3, fp
 800b79c:	4622      	mov	r2, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	4638      	mov	r0, r7
 800b7a2:	f7ff ff6b 	bl	800b67c <__ssputs_r>
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	f000 80a7 	beq.w	800b8fa <_svfiprintf_r+0x1c6>
 800b7ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7ae:	445a      	add	r2, fp
 800b7b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 809f 	beq.w	800b8fa <_svfiprintf_r+0x1c6>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	9307      	str	r3, [sp, #28]
 800b7ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7d4:	4654      	mov	r4, sl
 800b7d6:	2205      	movs	r2, #5
 800b7d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7dc:	484e      	ldr	r0, [pc, #312]	@ (800b918 <_svfiprintf_r+0x1e4>)
 800b7de:	f7f4 fcf7 	bl	80001d0 <memchr>
 800b7e2:	9a04      	ldr	r2, [sp, #16]
 800b7e4:	b9d8      	cbnz	r0, 800b81e <_svfiprintf_r+0xea>
 800b7e6:	06d0      	lsls	r0, r2, #27
 800b7e8:	bf44      	itt	mi
 800b7ea:	2320      	movmi	r3, #32
 800b7ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7f0:	0711      	lsls	r1, r2, #28
 800b7f2:	bf44      	itt	mi
 800b7f4:	232b      	movmi	r3, #43	@ 0x2b
 800b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800b800:	d015      	beq.n	800b82e <_svfiprintf_r+0xfa>
 800b802:	9a07      	ldr	r2, [sp, #28]
 800b804:	4654      	mov	r4, sl
 800b806:	2000      	movs	r0, #0
 800b808:	f04f 0c0a 	mov.w	ip, #10
 800b80c:	4621      	mov	r1, r4
 800b80e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b812:	3b30      	subs	r3, #48	@ 0x30
 800b814:	2b09      	cmp	r3, #9
 800b816:	d94b      	bls.n	800b8b0 <_svfiprintf_r+0x17c>
 800b818:	b1b0      	cbz	r0, 800b848 <_svfiprintf_r+0x114>
 800b81a:	9207      	str	r2, [sp, #28]
 800b81c:	e014      	b.n	800b848 <_svfiprintf_r+0x114>
 800b81e:	eba0 0308 	sub.w	r3, r0, r8
 800b822:	fa09 f303 	lsl.w	r3, r9, r3
 800b826:	4313      	orrs	r3, r2
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	46a2      	mov	sl, r4
 800b82c:	e7d2      	b.n	800b7d4 <_svfiprintf_r+0xa0>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	1d19      	adds	r1, r3, #4
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	9103      	str	r1, [sp, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfbb      	ittet	lt
 800b83a:	425b      	neglt	r3, r3
 800b83c:	f042 0202 	orrlt.w	r2, r2, #2
 800b840:	9307      	strge	r3, [sp, #28]
 800b842:	9307      	strlt	r3, [sp, #28]
 800b844:	bfb8      	it	lt
 800b846:	9204      	strlt	r2, [sp, #16]
 800b848:	7823      	ldrb	r3, [r4, #0]
 800b84a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b84c:	d10a      	bne.n	800b864 <_svfiprintf_r+0x130>
 800b84e:	7863      	ldrb	r3, [r4, #1]
 800b850:	2b2a      	cmp	r3, #42	@ 0x2a
 800b852:	d132      	bne.n	800b8ba <_svfiprintf_r+0x186>
 800b854:	9b03      	ldr	r3, [sp, #12]
 800b856:	1d1a      	adds	r2, r3, #4
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	9203      	str	r2, [sp, #12]
 800b85c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b860:	3402      	adds	r4, #2
 800b862:	9305      	str	r3, [sp, #20]
 800b864:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b928 <_svfiprintf_r+0x1f4>
 800b868:	7821      	ldrb	r1, [r4, #0]
 800b86a:	2203      	movs	r2, #3
 800b86c:	4650      	mov	r0, sl
 800b86e:	f7f4 fcaf 	bl	80001d0 <memchr>
 800b872:	b138      	cbz	r0, 800b884 <_svfiprintf_r+0x150>
 800b874:	9b04      	ldr	r3, [sp, #16]
 800b876:	eba0 000a 	sub.w	r0, r0, sl
 800b87a:	2240      	movs	r2, #64	@ 0x40
 800b87c:	4082      	lsls	r2, r0
 800b87e:	4313      	orrs	r3, r2
 800b880:	3401      	adds	r4, #1
 800b882:	9304      	str	r3, [sp, #16]
 800b884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b888:	4824      	ldr	r0, [pc, #144]	@ (800b91c <_svfiprintf_r+0x1e8>)
 800b88a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b88e:	2206      	movs	r2, #6
 800b890:	f7f4 fc9e 	bl	80001d0 <memchr>
 800b894:	2800      	cmp	r0, #0
 800b896:	d036      	beq.n	800b906 <_svfiprintf_r+0x1d2>
 800b898:	4b21      	ldr	r3, [pc, #132]	@ (800b920 <_svfiprintf_r+0x1ec>)
 800b89a:	bb1b      	cbnz	r3, 800b8e4 <_svfiprintf_r+0x1b0>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	3307      	adds	r3, #7
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	9303      	str	r3, [sp, #12]
 800b8a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8aa:	4433      	add	r3, r6
 800b8ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ae:	e76a      	b.n	800b786 <_svfiprintf_r+0x52>
 800b8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8b4:	460c      	mov	r4, r1
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e7a8      	b.n	800b80c <_svfiprintf_r+0xd8>
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	3401      	adds	r4, #1
 800b8be:	9305      	str	r3, [sp, #20]
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	f04f 0c0a 	mov.w	ip, #10
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8cc:	3a30      	subs	r2, #48	@ 0x30
 800b8ce:	2a09      	cmp	r2, #9
 800b8d0:	d903      	bls.n	800b8da <_svfiprintf_r+0x1a6>
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d0c6      	beq.n	800b864 <_svfiprintf_r+0x130>
 800b8d6:	9105      	str	r1, [sp, #20]
 800b8d8:	e7c4      	b.n	800b864 <_svfiprintf_r+0x130>
 800b8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8de:	4604      	mov	r4, r0
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	e7f0      	b.n	800b8c6 <_svfiprintf_r+0x192>
 800b8e4:	ab03      	add	r3, sp, #12
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	462a      	mov	r2, r5
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <_svfiprintf_r+0x1f0>)
 800b8ec:	a904      	add	r1, sp, #16
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7fc fbb8 	bl	8008064 <_printf_float>
 800b8f4:	1c42      	adds	r2, r0, #1
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	d1d6      	bne.n	800b8a8 <_svfiprintf_r+0x174>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	065b      	lsls	r3, r3, #25
 800b8fe:	f53f af2d 	bmi.w	800b75c <_svfiprintf_r+0x28>
 800b902:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b904:	e72c      	b.n	800b760 <_svfiprintf_r+0x2c>
 800b906:	ab03      	add	r3, sp, #12
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	462a      	mov	r2, r5
 800b90c:	4b05      	ldr	r3, [pc, #20]	@ (800b924 <_svfiprintf_r+0x1f0>)
 800b90e:	a904      	add	r1, sp, #16
 800b910:	4638      	mov	r0, r7
 800b912:	f7fc fe3f 	bl	8008594 <_printf_i>
 800b916:	e7ed      	b.n	800b8f4 <_svfiprintf_r+0x1c0>
 800b918:	0800cb29 	.word	0x0800cb29
 800b91c:	0800cb33 	.word	0x0800cb33
 800b920:	08008065 	.word	0x08008065
 800b924:	0800b67d 	.word	0x0800b67d
 800b928:	0800cb2f 	.word	0x0800cb2f

0800b92c <__sfputc_r>:
 800b92c:	6893      	ldr	r3, [r2, #8]
 800b92e:	3b01      	subs	r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	b410      	push	{r4}
 800b934:	6093      	str	r3, [r2, #8]
 800b936:	da08      	bge.n	800b94a <__sfputc_r+0x1e>
 800b938:	6994      	ldr	r4, [r2, #24]
 800b93a:	42a3      	cmp	r3, r4
 800b93c:	db01      	blt.n	800b942 <__sfputc_r+0x16>
 800b93e:	290a      	cmp	r1, #10
 800b940:	d103      	bne.n	800b94a <__sfputc_r+0x1e>
 800b942:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b946:	f7fd bae8 	b.w	8008f1a <__swbuf_r>
 800b94a:	6813      	ldr	r3, [r2, #0]
 800b94c:	1c58      	adds	r0, r3, #1
 800b94e:	6010      	str	r0, [r2, #0]
 800b950:	7019      	strb	r1, [r3, #0]
 800b952:	4608      	mov	r0, r1
 800b954:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <__sfputs_r>:
 800b95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95c:	4606      	mov	r6, r0
 800b95e:	460f      	mov	r7, r1
 800b960:	4614      	mov	r4, r2
 800b962:	18d5      	adds	r5, r2, r3
 800b964:	42ac      	cmp	r4, r5
 800b966:	d101      	bne.n	800b96c <__sfputs_r+0x12>
 800b968:	2000      	movs	r0, #0
 800b96a:	e007      	b.n	800b97c <__sfputs_r+0x22>
 800b96c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b970:	463a      	mov	r2, r7
 800b972:	4630      	mov	r0, r6
 800b974:	f7ff ffda 	bl	800b92c <__sfputc_r>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d1f3      	bne.n	800b964 <__sfputs_r+0xa>
 800b97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b980 <_vfiprintf_r>:
 800b980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b984:	460d      	mov	r5, r1
 800b986:	b09d      	sub	sp, #116	@ 0x74
 800b988:	4614      	mov	r4, r2
 800b98a:	4698      	mov	r8, r3
 800b98c:	4606      	mov	r6, r0
 800b98e:	b118      	cbz	r0, 800b998 <_vfiprintf_r+0x18>
 800b990:	6a03      	ldr	r3, [r0, #32]
 800b992:	b90b      	cbnz	r3, 800b998 <_vfiprintf_r+0x18>
 800b994:	f7fd f9b6 	bl	8008d04 <__sinit>
 800b998:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b99a:	07d9      	lsls	r1, r3, #31
 800b99c:	d405      	bmi.n	800b9aa <_vfiprintf_r+0x2a>
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	059a      	lsls	r2, r3, #22
 800b9a2:	d402      	bmi.n	800b9aa <_vfiprintf_r+0x2a>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a6:	f7fd fbca 	bl	800913e <__retarget_lock_acquire_recursive>
 800b9aa:	89ab      	ldrh	r3, [r5, #12]
 800b9ac:	071b      	lsls	r3, r3, #28
 800b9ae:	d501      	bpl.n	800b9b4 <_vfiprintf_r+0x34>
 800b9b0:	692b      	ldr	r3, [r5, #16]
 800b9b2:	b99b      	cbnz	r3, 800b9dc <_vfiprintf_r+0x5c>
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7fd faee 	bl	8008f98 <__swsetup_r>
 800b9bc:	b170      	cbz	r0, 800b9dc <_vfiprintf_r+0x5c>
 800b9be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9c0:	07dc      	lsls	r4, r3, #31
 800b9c2:	d504      	bpl.n	800b9ce <_vfiprintf_r+0x4e>
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	b01d      	add	sp, #116	@ 0x74
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	89ab      	ldrh	r3, [r5, #12]
 800b9d0:	0598      	lsls	r0, r3, #22
 800b9d2:	d4f7      	bmi.n	800b9c4 <_vfiprintf_r+0x44>
 800b9d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9d6:	f7fd fbb3 	bl	8009140 <__retarget_lock_release_recursive>
 800b9da:	e7f3      	b.n	800b9c4 <_vfiprintf_r+0x44>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9e0:	2320      	movs	r3, #32
 800b9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ea:	2330      	movs	r3, #48	@ 0x30
 800b9ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb9c <_vfiprintf_r+0x21c>
 800b9f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9f4:	f04f 0901 	mov.w	r9, #1
 800b9f8:	4623      	mov	r3, r4
 800b9fa:	469a      	mov	sl, r3
 800b9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba00:	b10a      	cbz	r2, 800ba06 <_vfiprintf_r+0x86>
 800ba02:	2a25      	cmp	r2, #37	@ 0x25
 800ba04:	d1f9      	bne.n	800b9fa <_vfiprintf_r+0x7a>
 800ba06:	ebba 0b04 	subs.w	fp, sl, r4
 800ba0a:	d00b      	beq.n	800ba24 <_vfiprintf_r+0xa4>
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	4622      	mov	r2, r4
 800ba10:	4629      	mov	r1, r5
 800ba12:	4630      	mov	r0, r6
 800ba14:	f7ff ffa1 	bl	800b95a <__sfputs_r>
 800ba18:	3001      	adds	r0, #1
 800ba1a:	f000 80a7 	beq.w	800bb6c <_vfiprintf_r+0x1ec>
 800ba1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba20:	445a      	add	r2, fp
 800ba22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba24:	f89a 3000 	ldrb.w	r3, [sl]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 809f 	beq.w	800bb6c <_vfiprintf_r+0x1ec>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f04f 32ff 	mov.w	r2, #4294967295
 800ba34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba38:	f10a 0a01 	add.w	sl, sl, #1
 800ba3c:	9304      	str	r3, [sp, #16]
 800ba3e:	9307      	str	r3, [sp, #28]
 800ba40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba46:	4654      	mov	r4, sl
 800ba48:	2205      	movs	r2, #5
 800ba4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4e:	4853      	ldr	r0, [pc, #332]	@ (800bb9c <_vfiprintf_r+0x21c>)
 800ba50:	f7f4 fbbe 	bl	80001d0 <memchr>
 800ba54:	9a04      	ldr	r2, [sp, #16]
 800ba56:	b9d8      	cbnz	r0, 800ba90 <_vfiprintf_r+0x110>
 800ba58:	06d1      	lsls	r1, r2, #27
 800ba5a:	bf44      	itt	mi
 800ba5c:	2320      	movmi	r3, #32
 800ba5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba62:	0713      	lsls	r3, r2, #28
 800ba64:	bf44      	itt	mi
 800ba66:	232b      	movmi	r3, #43	@ 0x2b
 800ba68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba72:	d015      	beq.n	800baa0 <_vfiprintf_r+0x120>
 800ba74:	9a07      	ldr	r2, [sp, #28]
 800ba76:	4654      	mov	r4, sl
 800ba78:	2000      	movs	r0, #0
 800ba7a:	f04f 0c0a 	mov.w	ip, #10
 800ba7e:	4621      	mov	r1, r4
 800ba80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba84:	3b30      	subs	r3, #48	@ 0x30
 800ba86:	2b09      	cmp	r3, #9
 800ba88:	d94b      	bls.n	800bb22 <_vfiprintf_r+0x1a2>
 800ba8a:	b1b0      	cbz	r0, 800baba <_vfiprintf_r+0x13a>
 800ba8c:	9207      	str	r2, [sp, #28]
 800ba8e:	e014      	b.n	800baba <_vfiprintf_r+0x13a>
 800ba90:	eba0 0308 	sub.w	r3, r0, r8
 800ba94:	fa09 f303 	lsl.w	r3, r9, r3
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	9304      	str	r3, [sp, #16]
 800ba9c:	46a2      	mov	sl, r4
 800ba9e:	e7d2      	b.n	800ba46 <_vfiprintf_r+0xc6>
 800baa0:	9b03      	ldr	r3, [sp, #12]
 800baa2:	1d19      	adds	r1, r3, #4
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	9103      	str	r1, [sp, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bfbb      	ittet	lt
 800baac:	425b      	neglt	r3, r3
 800baae:	f042 0202 	orrlt.w	r2, r2, #2
 800bab2:	9307      	strge	r3, [sp, #28]
 800bab4:	9307      	strlt	r3, [sp, #28]
 800bab6:	bfb8      	it	lt
 800bab8:	9204      	strlt	r2, [sp, #16]
 800baba:	7823      	ldrb	r3, [r4, #0]
 800babc:	2b2e      	cmp	r3, #46	@ 0x2e
 800babe:	d10a      	bne.n	800bad6 <_vfiprintf_r+0x156>
 800bac0:	7863      	ldrb	r3, [r4, #1]
 800bac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bac4:	d132      	bne.n	800bb2c <_vfiprintf_r+0x1ac>
 800bac6:	9b03      	ldr	r3, [sp, #12]
 800bac8:	1d1a      	adds	r2, r3, #4
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	9203      	str	r2, [sp, #12]
 800bace:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bad2:	3402      	adds	r4, #2
 800bad4:	9305      	str	r3, [sp, #20]
 800bad6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bbac <_vfiprintf_r+0x22c>
 800bada:	7821      	ldrb	r1, [r4, #0]
 800badc:	2203      	movs	r2, #3
 800bade:	4650      	mov	r0, sl
 800bae0:	f7f4 fb76 	bl	80001d0 <memchr>
 800bae4:	b138      	cbz	r0, 800baf6 <_vfiprintf_r+0x176>
 800bae6:	9b04      	ldr	r3, [sp, #16]
 800bae8:	eba0 000a 	sub.w	r0, r0, sl
 800baec:	2240      	movs	r2, #64	@ 0x40
 800baee:	4082      	lsls	r2, r0
 800baf0:	4313      	orrs	r3, r2
 800baf2:	3401      	adds	r4, #1
 800baf4:	9304      	str	r3, [sp, #16]
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4829      	ldr	r0, [pc, #164]	@ (800bba0 <_vfiprintf_r+0x220>)
 800bafc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb00:	2206      	movs	r2, #6
 800bb02:	f7f4 fb65 	bl	80001d0 <memchr>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d03f      	beq.n	800bb8a <_vfiprintf_r+0x20a>
 800bb0a:	4b26      	ldr	r3, [pc, #152]	@ (800bba4 <_vfiprintf_r+0x224>)
 800bb0c:	bb1b      	cbnz	r3, 800bb56 <_vfiprintf_r+0x1d6>
 800bb0e:	9b03      	ldr	r3, [sp, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	f023 0307 	bic.w	r3, r3, #7
 800bb16:	3308      	adds	r3, #8
 800bb18:	9303      	str	r3, [sp, #12]
 800bb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb1c:	443b      	add	r3, r7
 800bb1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb20:	e76a      	b.n	800b9f8 <_vfiprintf_r+0x78>
 800bb22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb26:	460c      	mov	r4, r1
 800bb28:	2001      	movs	r0, #1
 800bb2a:	e7a8      	b.n	800ba7e <_vfiprintf_r+0xfe>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	3401      	adds	r4, #1
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	4619      	mov	r1, r3
 800bb34:	f04f 0c0a 	mov.w	ip, #10
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb3e:	3a30      	subs	r2, #48	@ 0x30
 800bb40:	2a09      	cmp	r2, #9
 800bb42:	d903      	bls.n	800bb4c <_vfiprintf_r+0x1cc>
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0c6      	beq.n	800bad6 <_vfiprintf_r+0x156>
 800bb48:	9105      	str	r1, [sp, #20]
 800bb4a:	e7c4      	b.n	800bad6 <_vfiprintf_r+0x156>
 800bb4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb50:	4604      	mov	r4, r0
 800bb52:	2301      	movs	r3, #1
 800bb54:	e7f0      	b.n	800bb38 <_vfiprintf_r+0x1b8>
 800bb56:	ab03      	add	r3, sp, #12
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	462a      	mov	r2, r5
 800bb5c:	4b12      	ldr	r3, [pc, #72]	@ (800bba8 <_vfiprintf_r+0x228>)
 800bb5e:	a904      	add	r1, sp, #16
 800bb60:	4630      	mov	r0, r6
 800bb62:	f7fc fa7f 	bl	8008064 <_printf_float>
 800bb66:	4607      	mov	r7, r0
 800bb68:	1c78      	adds	r0, r7, #1
 800bb6a:	d1d6      	bne.n	800bb1a <_vfiprintf_r+0x19a>
 800bb6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb6e:	07d9      	lsls	r1, r3, #31
 800bb70:	d405      	bmi.n	800bb7e <_vfiprintf_r+0x1fe>
 800bb72:	89ab      	ldrh	r3, [r5, #12]
 800bb74:	059a      	lsls	r2, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_vfiprintf_r+0x1fe>
 800bb78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb7a:	f7fd fae1 	bl	8009140 <__retarget_lock_release_recursive>
 800bb7e:	89ab      	ldrh	r3, [r5, #12]
 800bb80:	065b      	lsls	r3, r3, #25
 800bb82:	f53f af1f 	bmi.w	800b9c4 <_vfiprintf_r+0x44>
 800bb86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb88:	e71e      	b.n	800b9c8 <_vfiprintf_r+0x48>
 800bb8a:	ab03      	add	r3, sp, #12
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	462a      	mov	r2, r5
 800bb90:	4b05      	ldr	r3, [pc, #20]	@ (800bba8 <_vfiprintf_r+0x228>)
 800bb92:	a904      	add	r1, sp, #16
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7fc fcfd 	bl	8008594 <_printf_i>
 800bb9a:	e7e4      	b.n	800bb66 <_vfiprintf_r+0x1e6>
 800bb9c:	0800cb29 	.word	0x0800cb29
 800bba0:	0800cb33 	.word	0x0800cb33
 800bba4:	08008065 	.word	0x08008065
 800bba8:	0800b95b 	.word	0x0800b95b
 800bbac:	0800cb2f 	.word	0x0800cb2f

0800bbb0 <__sflush_r>:
 800bbb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb8:	0716      	lsls	r6, r2, #28
 800bbba:	4605      	mov	r5, r0
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	d454      	bmi.n	800bc6a <__sflush_r+0xba>
 800bbc0:	684b      	ldr	r3, [r1, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	dc02      	bgt.n	800bbcc <__sflush_r+0x1c>
 800bbc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd48      	ble.n	800bc5e <__sflush_r+0xae>
 800bbcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbce:	2e00      	cmp	r6, #0
 800bbd0:	d045      	beq.n	800bc5e <__sflush_r+0xae>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bbd8:	682f      	ldr	r7, [r5, #0]
 800bbda:	6a21      	ldr	r1, [r4, #32]
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	d030      	beq.n	800bc42 <__sflush_r+0x92>
 800bbe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	0759      	lsls	r1, r3, #29
 800bbe6:	d505      	bpl.n	800bbf4 <__sflush_r+0x44>
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bbee:	b10b      	cbz	r3, 800bbf4 <__sflush_r+0x44>
 800bbf0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bbf2:	1ad2      	subs	r2, r2, r3
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bbf8:	6a21      	ldr	r1, [r4, #32]
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	47b0      	blx	r6
 800bbfe:	1c43      	adds	r3, r0, #1
 800bc00:	89a3      	ldrh	r3, [r4, #12]
 800bc02:	d106      	bne.n	800bc12 <__sflush_r+0x62>
 800bc04:	6829      	ldr	r1, [r5, #0]
 800bc06:	291d      	cmp	r1, #29
 800bc08:	d82b      	bhi.n	800bc62 <__sflush_r+0xb2>
 800bc0a:	4a2a      	ldr	r2, [pc, #168]	@ (800bcb4 <__sflush_r+0x104>)
 800bc0c:	40ca      	lsrs	r2, r1
 800bc0e:	07d6      	lsls	r6, r2, #31
 800bc10:	d527      	bpl.n	800bc62 <__sflush_r+0xb2>
 800bc12:	2200      	movs	r2, #0
 800bc14:	6062      	str	r2, [r4, #4]
 800bc16:	04d9      	lsls	r1, r3, #19
 800bc18:	6922      	ldr	r2, [r4, #16]
 800bc1a:	6022      	str	r2, [r4, #0]
 800bc1c:	d504      	bpl.n	800bc28 <__sflush_r+0x78>
 800bc1e:	1c42      	adds	r2, r0, #1
 800bc20:	d101      	bne.n	800bc26 <__sflush_r+0x76>
 800bc22:	682b      	ldr	r3, [r5, #0]
 800bc24:	b903      	cbnz	r3, 800bc28 <__sflush_r+0x78>
 800bc26:	6560      	str	r0, [r4, #84]	@ 0x54
 800bc28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bc2a:	602f      	str	r7, [r5, #0]
 800bc2c:	b1b9      	cbz	r1, 800bc5e <__sflush_r+0xae>
 800bc2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc32:	4299      	cmp	r1, r3
 800bc34:	d002      	beq.n	800bc3c <__sflush_r+0x8c>
 800bc36:	4628      	mov	r0, r5
 800bc38:	f7fe f8f2 	bl	8009e20 <_free_r>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bc40:	e00d      	b.n	800bc5e <__sflush_r+0xae>
 800bc42:	2301      	movs	r3, #1
 800bc44:	4628      	mov	r0, r5
 800bc46:	47b0      	blx	r6
 800bc48:	4602      	mov	r2, r0
 800bc4a:	1c50      	adds	r0, r2, #1
 800bc4c:	d1c9      	bne.n	800bbe2 <__sflush_r+0x32>
 800bc4e:	682b      	ldr	r3, [r5, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0c6      	beq.n	800bbe2 <__sflush_r+0x32>
 800bc54:	2b1d      	cmp	r3, #29
 800bc56:	d001      	beq.n	800bc5c <__sflush_r+0xac>
 800bc58:	2b16      	cmp	r3, #22
 800bc5a:	d11e      	bne.n	800bc9a <__sflush_r+0xea>
 800bc5c:	602f      	str	r7, [r5, #0]
 800bc5e:	2000      	movs	r0, #0
 800bc60:	e022      	b.n	800bca8 <__sflush_r+0xf8>
 800bc62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc66:	b21b      	sxth	r3, r3
 800bc68:	e01b      	b.n	800bca2 <__sflush_r+0xf2>
 800bc6a:	690f      	ldr	r7, [r1, #16]
 800bc6c:	2f00      	cmp	r7, #0
 800bc6e:	d0f6      	beq.n	800bc5e <__sflush_r+0xae>
 800bc70:	0793      	lsls	r3, r2, #30
 800bc72:	680e      	ldr	r6, [r1, #0]
 800bc74:	bf08      	it	eq
 800bc76:	694b      	ldreq	r3, [r1, #20]
 800bc78:	600f      	str	r7, [r1, #0]
 800bc7a:	bf18      	it	ne
 800bc7c:	2300      	movne	r3, #0
 800bc7e:	eba6 0807 	sub.w	r8, r6, r7
 800bc82:	608b      	str	r3, [r1, #8]
 800bc84:	f1b8 0f00 	cmp.w	r8, #0
 800bc88:	dde9      	ble.n	800bc5e <__sflush_r+0xae>
 800bc8a:	6a21      	ldr	r1, [r4, #32]
 800bc8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc8e:	4643      	mov	r3, r8
 800bc90:	463a      	mov	r2, r7
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b0      	blx	r6
 800bc96:	2800      	cmp	r0, #0
 800bc98:	dc08      	bgt.n	800bcac <__sflush_r+0xfc>
 800bc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bca2:	81a3      	strh	r3, [r4, #12]
 800bca4:	f04f 30ff 	mov.w	r0, #4294967295
 800bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcac:	4407      	add	r7, r0
 800bcae:	eba8 0800 	sub.w	r8, r8, r0
 800bcb2:	e7e7      	b.n	800bc84 <__sflush_r+0xd4>
 800bcb4:	20400001 	.word	0x20400001

0800bcb8 <_fflush_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	690b      	ldr	r3, [r1, #16]
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	b913      	cbnz	r3, 800bcc8 <_fflush_r+0x10>
 800bcc2:	2500      	movs	r5, #0
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	b118      	cbz	r0, 800bcd2 <_fflush_r+0x1a>
 800bcca:	6a03      	ldr	r3, [r0, #32]
 800bccc:	b90b      	cbnz	r3, 800bcd2 <_fflush_r+0x1a>
 800bcce:	f7fd f819 	bl	8008d04 <__sinit>
 800bcd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0f3      	beq.n	800bcc2 <_fflush_r+0xa>
 800bcda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bcdc:	07d0      	lsls	r0, r2, #31
 800bcde:	d404      	bmi.n	800bcea <_fflush_r+0x32>
 800bce0:	0599      	lsls	r1, r3, #22
 800bce2:	d402      	bmi.n	800bcea <_fflush_r+0x32>
 800bce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bce6:	f7fd fa2a 	bl	800913e <__retarget_lock_acquire_recursive>
 800bcea:	4628      	mov	r0, r5
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7ff ff5f 	bl	800bbb0 <__sflush_r>
 800bcf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcf4:	07da      	lsls	r2, r3, #31
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	d4e4      	bmi.n	800bcc4 <_fflush_r+0xc>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	059b      	lsls	r3, r3, #22
 800bcfe:	d4e1      	bmi.n	800bcc4 <_fflush_r+0xc>
 800bd00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd02:	f7fd fa1d 	bl	8009140 <__retarget_lock_release_recursive>
 800bd06:	e7dd      	b.n	800bcc4 <_fflush_r+0xc>

0800bd08 <__swhatbuf_r>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd10:	2900      	cmp	r1, #0
 800bd12:	b096      	sub	sp, #88	@ 0x58
 800bd14:	4615      	mov	r5, r2
 800bd16:	461e      	mov	r6, r3
 800bd18:	da0d      	bge.n	800bd36 <__swhatbuf_r+0x2e>
 800bd1a:	89a3      	ldrh	r3, [r4, #12]
 800bd1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bd20:	f04f 0100 	mov.w	r1, #0
 800bd24:	bf14      	ite	ne
 800bd26:	2340      	movne	r3, #64	@ 0x40
 800bd28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	6031      	str	r1, [r6, #0]
 800bd30:	602b      	str	r3, [r5, #0]
 800bd32:	b016      	add	sp, #88	@ 0x58
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	466a      	mov	r2, sp
 800bd38:	f000 f874 	bl	800be24 <_fstat_r>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	dbec      	blt.n	800bd1a <__swhatbuf_r+0x12>
 800bd40:	9901      	ldr	r1, [sp, #4]
 800bd42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd4a:	4259      	negs	r1, r3
 800bd4c:	4159      	adcs	r1, r3
 800bd4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd52:	e7eb      	b.n	800bd2c <__swhatbuf_r+0x24>

0800bd54 <__smakebuf_r>:
 800bd54:	898b      	ldrh	r3, [r1, #12]
 800bd56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd58:	079d      	lsls	r5, r3, #30
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	d507      	bpl.n	800bd70 <__smakebuf_r+0x1c>
 800bd60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	6123      	str	r3, [r4, #16]
 800bd68:	2301      	movs	r3, #1
 800bd6a:	6163      	str	r3, [r4, #20]
 800bd6c:	b003      	add	sp, #12
 800bd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd70:	ab01      	add	r3, sp, #4
 800bd72:	466a      	mov	r2, sp
 800bd74:	f7ff ffc8 	bl	800bd08 <__swhatbuf_r>
 800bd78:	9f00      	ldr	r7, [sp, #0]
 800bd7a:	4605      	mov	r5, r0
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7fe f8c2 	bl	8009f08 <_malloc_r>
 800bd84:	b948      	cbnz	r0, 800bd9a <__smakebuf_r+0x46>
 800bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8a:	059a      	lsls	r2, r3, #22
 800bd8c:	d4ee      	bmi.n	800bd6c <__smakebuf_r+0x18>
 800bd8e:	f023 0303 	bic.w	r3, r3, #3
 800bd92:	f043 0302 	orr.w	r3, r3, #2
 800bd96:	81a3      	strh	r3, [r4, #12]
 800bd98:	e7e2      	b.n	800bd60 <__smakebuf_r+0xc>
 800bd9a:	89a3      	ldrh	r3, [r4, #12]
 800bd9c:	6020      	str	r0, [r4, #0]
 800bd9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	9b01      	ldr	r3, [sp, #4]
 800bda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bdaa:	b15b      	cbz	r3, 800bdc4 <__smakebuf_r+0x70>
 800bdac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	f000 f849 	bl	800be48 <_isatty_r>
 800bdb6:	b128      	cbz	r0, 800bdc4 <__smakebuf_r+0x70>
 800bdb8:	89a3      	ldrh	r3, [r4, #12]
 800bdba:	f023 0303 	bic.w	r3, r3, #3
 800bdbe:	f043 0301 	orr.w	r3, r3, #1
 800bdc2:	81a3      	strh	r3, [r4, #12]
 800bdc4:	89a3      	ldrh	r3, [r4, #12]
 800bdc6:	431d      	orrs	r5, r3
 800bdc8:	81a5      	strh	r5, [r4, #12]
 800bdca:	e7cf      	b.n	800bd6c <__smakebuf_r+0x18>

0800bdcc <memmove>:
 800bdcc:	4288      	cmp	r0, r1
 800bdce:	b510      	push	{r4, lr}
 800bdd0:	eb01 0402 	add.w	r4, r1, r2
 800bdd4:	d902      	bls.n	800bddc <memmove+0x10>
 800bdd6:	4284      	cmp	r4, r0
 800bdd8:	4623      	mov	r3, r4
 800bdda:	d807      	bhi.n	800bdec <memmove+0x20>
 800bddc:	1e43      	subs	r3, r0, #1
 800bdde:	42a1      	cmp	r1, r4
 800bde0:	d008      	beq.n	800bdf4 <memmove+0x28>
 800bde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bde6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdea:	e7f8      	b.n	800bdde <memmove+0x12>
 800bdec:	4402      	add	r2, r0
 800bdee:	4601      	mov	r1, r0
 800bdf0:	428a      	cmp	r2, r1
 800bdf2:	d100      	bne.n	800bdf6 <memmove+0x2a>
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bdfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdfe:	e7f7      	b.n	800bdf0 <memmove+0x24>

0800be00 <strncmp>:
 800be00:	b510      	push	{r4, lr}
 800be02:	b16a      	cbz	r2, 800be20 <strncmp+0x20>
 800be04:	3901      	subs	r1, #1
 800be06:	1884      	adds	r4, r0, r2
 800be08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800be10:	429a      	cmp	r2, r3
 800be12:	d103      	bne.n	800be1c <strncmp+0x1c>
 800be14:	42a0      	cmp	r0, r4
 800be16:	d001      	beq.n	800be1c <strncmp+0x1c>
 800be18:	2a00      	cmp	r2, #0
 800be1a:	d1f5      	bne.n	800be08 <strncmp+0x8>
 800be1c:	1ad0      	subs	r0, r2, r3
 800be1e:	bd10      	pop	{r4, pc}
 800be20:	4610      	mov	r0, r2
 800be22:	e7fc      	b.n	800be1e <strncmp+0x1e>

0800be24 <_fstat_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	4d07      	ldr	r5, [pc, #28]	@ (800be44 <_fstat_r+0x20>)
 800be28:	2300      	movs	r3, #0
 800be2a:	4604      	mov	r4, r0
 800be2c:	4608      	mov	r0, r1
 800be2e:	4611      	mov	r1, r2
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	f7f5 fcdd 	bl	80017f0 <_fstat>
 800be36:	1c43      	adds	r3, r0, #1
 800be38:	d102      	bne.n	800be40 <_fstat_r+0x1c>
 800be3a:	682b      	ldr	r3, [r5, #0]
 800be3c:	b103      	cbz	r3, 800be40 <_fstat_r+0x1c>
 800be3e:	6023      	str	r3, [r4, #0]
 800be40:	bd38      	pop	{r3, r4, r5, pc}
 800be42:	bf00      	nop
 800be44:	200005c8 	.word	0x200005c8

0800be48 <_isatty_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	4d06      	ldr	r5, [pc, #24]	@ (800be64 <_isatty_r+0x1c>)
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	4608      	mov	r0, r1
 800be52:	602b      	str	r3, [r5, #0]
 800be54:	f7f5 fcdc 	bl	8001810 <_isatty>
 800be58:	1c43      	adds	r3, r0, #1
 800be5a:	d102      	bne.n	800be62 <_isatty_r+0x1a>
 800be5c:	682b      	ldr	r3, [r5, #0]
 800be5e:	b103      	cbz	r3, 800be62 <_isatty_r+0x1a>
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	bd38      	pop	{r3, r4, r5, pc}
 800be64:	200005c8 	.word	0x200005c8

0800be68 <_sbrk_r>:
 800be68:	b538      	push	{r3, r4, r5, lr}
 800be6a:	4d06      	ldr	r5, [pc, #24]	@ (800be84 <_sbrk_r+0x1c>)
 800be6c:	2300      	movs	r3, #0
 800be6e:	4604      	mov	r4, r0
 800be70:	4608      	mov	r0, r1
 800be72:	602b      	str	r3, [r5, #0]
 800be74:	f7f5 fce4 	bl	8001840 <_sbrk>
 800be78:	1c43      	adds	r3, r0, #1
 800be7a:	d102      	bne.n	800be82 <_sbrk_r+0x1a>
 800be7c:	682b      	ldr	r3, [r5, #0]
 800be7e:	b103      	cbz	r3, 800be82 <_sbrk_r+0x1a>
 800be80:	6023      	str	r3, [r4, #0]
 800be82:	bd38      	pop	{r3, r4, r5, pc}
 800be84:	200005c8 	.word	0x200005c8

0800be88 <nan>:
 800be88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be90 <nan+0x8>
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	00000000 	.word	0x00000000
 800be94:	7ff80000 	.word	0x7ff80000

0800be98 <__assert_func>:
 800be98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be9a:	4614      	mov	r4, r2
 800be9c:	461a      	mov	r2, r3
 800be9e:	4b09      	ldr	r3, [pc, #36]	@ (800bec4 <__assert_func+0x2c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4605      	mov	r5, r0
 800bea4:	68d8      	ldr	r0, [r3, #12]
 800bea6:	b14c      	cbz	r4, 800bebc <__assert_func+0x24>
 800bea8:	4b07      	ldr	r3, [pc, #28]	@ (800bec8 <__assert_func+0x30>)
 800beaa:	9100      	str	r1, [sp, #0]
 800beac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beb0:	4906      	ldr	r1, [pc, #24]	@ (800becc <__assert_func+0x34>)
 800beb2:	462b      	mov	r3, r5
 800beb4:	f000 fba8 	bl	800c608 <fiprintf>
 800beb8:	f000 fbb8 	bl	800c62c <abort>
 800bebc:	4b04      	ldr	r3, [pc, #16]	@ (800bed0 <__assert_func+0x38>)
 800bebe:	461c      	mov	r4, r3
 800bec0:	e7f3      	b.n	800beaa <__assert_func+0x12>
 800bec2:	bf00      	nop
 800bec4:	20000024 	.word	0x20000024
 800bec8:	0800cb42 	.word	0x0800cb42
 800becc:	0800cb4f 	.word	0x0800cb4f
 800bed0:	0800cb7d 	.word	0x0800cb7d

0800bed4 <_calloc_r>:
 800bed4:	b570      	push	{r4, r5, r6, lr}
 800bed6:	fba1 5402 	umull	r5, r4, r1, r2
 800beda:	b934      	cbnz	r4, 800beea <_calloc_r+0x16>
 800bedc:	4629      	mov	r1, r5
 800bede:	f7fe f813 	bl	8009f08 <_malloc_r>
 800bee2:	4606      	mov	r6, r0
 800bee4:	b928      	cbnz	r0, 800bef2 <_calloc_r+0x1e>
 800bee6:	4630      	mov	r0, r6
 800bee8:	bd70      	pop	{r4, r5, r6, pc}
 800beea:	220c      	movs	r2, #12
 800beec:	6002      	str	r2, [r0, #0]
 800beee:	2600      	movs	r6, #0
 800bef0:	e7f9      	b.n	800bee6 <_calloc_r+0x12>
 800bef2:	462a      	mov	r2, r5
 800bef4:	4621      	mov	r1, r4
 800bef6:	f7fd f8a5 	bl	8009044 <memset>
 800befa:	e7f4      	b.n	800bee6 <_calloc_r+0x12>

0800befc <rshift>:
 800befc:	6903      	ldr	r3, [r0, #16]
 800befe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf06:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bf0a:	f100 0414 	add.w	r4, r0, #20
 800bf0e:	dd45      	ble.n	800bf9c <rshift+0xa0>
 800bf10:	f011 011f 	ands.w	r1, r1, #31
 800bf14:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf18:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf1c:	d10c      	bne.n	800bf38 <rshift+0x3c>
 800bf1e:	f100 0710 	add.w	r7, r0, #16
 800bf22:	4629      	mov	r1, r5
 800bf24:	42b1      	cmp	r1, r6
 800bf26:	d334      	bcc.n	800bf92 <rshift+0x96>
 800bf28:	1a9b      	subs	r3, r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	1eea      	subs	r2, r5, #3
 800bf2e:	4296      	cmp	r6, r2
 800bf30:	bf38      	it	cc
 800bf32:	2300      	movcc	r3, #0
 800bf34:	4423      	add	r3, r4
 800bf36:	e015      	b.n	800bf64 <rshift+0x68>
 800bf38:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf3c:	f1c1 0820 	rsb	r8, r1, #32
 800bf40:	40cf      	lsrs	r7, r1
 800bf42:	f105 0e04 	add.w	lr, r5, #4
 800bf46:	46a1      	mov	r9, r4
 800bf48:	4576      	cmp	r6, lr
 800bf4a:	46f4      	mov	ip, lr
 800bf4c:	d815      	bhi.n	800bf7a <rshift+0x7e>
 800bf4e:	1a9a      	subs	r2, r3, r2
 800bf50:	0092      	lsls	r2, r2, #2
 800bf52:	3a04      	subs	r2, #4
 800bf54:	3501      	adds	r5, #1
 800bf56:	42ae      	cmp	r6, r5
 800bf58:	bf38      	it	cc
 800bf5a:	2200      	movcc	r2, #0
 800bf5c:	18a3      	adds	r3, r4, r2
 800bf5e:	50a7      	str	r7, [r4, r2]
 800bf60:	b107      	cbz	r7, 800bf64 <rshift+0x68>
 800bf62:	3304      	adds	r3, #4
 800bf64:	1b1a      	subs	r2, r3, r4
 800bf66:	42a3      	cmp	r3, r4
 800bf68:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf6c:	bf08      	it	eq
 800bf6e:	2300      	moveq	r3, #0
 800bf70:	6102      	str	r2, [r0, #16]
 800bf72:	bf08      	it	eq
 800bf74:	6143      	streq	r3, [r0, #20]
 800bf76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf7a:	f8dc c000 	ldr.w	ip, [ip]
 800bf7e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf82:	ea4c 0707 	orr.w	r7, ip, r7
 800bf86:	f849 7b04 	str.w	r7, [r9], #4
 800bf8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf8e:	40cf      	lsrs	r7, r1
 800bf90:	e7da      	b.n	800bf48 <rshift+0x4c>
 800bf92:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf96:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf9a:	e7c3      	b.n	800bf24 <rshift+0x28>
 800bf9c:	4623      	mov	r3, r4
 800bf9e:	e7e1      	b.n	800bf64 <rshift+0x68>

0800bfa0 <__hexdig_fun>:
 800bfa0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bfa4:	2b09      	cmp	r3, #9
 800bfa6:	d802      	bhi.n	800bfae <__hexdig_fun+0xe>
 800bfa8:	3820      	subs	r0, #32
 800bfaa:	b2c0      	uxtb	r0, r0
 800bfac:	4770      	bx	lr
 800bfae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bfb2:	2b05      	cmp	r3, #5
 800bfb4:	d801      	bhi.n	800bfba <__hexdig_fun+0x1a>
 800bfb6:	3847      	subs	r0, #71	@ 0x47
 800bfb8:	e7f7      	b.n	800bfaa <__hexdig_fun+0xa>
 800bfba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	d801      	bhi.n	800bfc6 <__hexdig_fun+0x26>
 800bfc2:	3827      	subs	r0, #39	@ 0x27
 800bfc4:	e7f1      	b.n	800bfaa <__hexdig_fun+0xa>
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	4770      	bx	lr
	...

0800bfcc <__gethex>:
 800bfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	468a      	mov	sl, r1
 800bfd4:	9302      	str	r3, [sp, #8]
 800bfd6:	680b      	ldr	r3, [r1, #0]
 800bfd8:	9001      	str	r0, [sp, #4]
 800bfda:	4690      	mov	r8, r2
 800bfdc:	1c9c      	adds	r4, r3, #2
 800bfde:	46a1      	mov	r9, r4
 800bfe0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bfe4:	2830      	cmp	r0, #48	@ 0x30
 800bfe6:	d0fa      	beq.n	800bfde <__gethex+0x12>
 800bfe8:	eba9 0303 	sub.w	r3, r9, r3
 800bfec:	f1a3 0b02 	sub.w	fp, r3, #2
 800bff0:	f7ff ffd6 	bl	800bfa0 <__hexdig_fun>
 800bff4:	4605      	mov	r5, r0
 800bff6:	2800      	cmp	r0, #0
 800bff8:	d168      	bne.n	800c0cc <__gethex+0x100>
 800bffa:	49a0      	ldr	r1, [pc, #640]	@ (800c27c <__gethex+0x2b0>)
 800bffc:	2201      	movs	r2, #1
 800bffe:	4648      	mov	r0, r9
 800c000:	f7ff fefe 	bl	800be00 <strncmp>
 800c004:	4607      	mov	r7, r0
 800c006:	2800      	cmp	r0, #0
 800c008:	d167      	bne.n	800c0da <__gethex+0x10e>
 800c00a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c00e:	4626      	mov	r6, r4
 800c010:	f7ff ffc6 	bl	800bfa0 <__hexdig_fun>
 800c014:	2800      	cmp	r0, #0
 800c016:	d062      	beq.n	800c0de <__gethex+0x112>
 800c018:	4623      	mov	r3, r4
 800c01a:	7818      	ldrb	r0, [r3, #0]
 800c01c:	2830      	cmp	r0, #48	@ 0x30
 800c01e:	4699      	mov	r9, r3
 800c020:	f103 0301 	add.w	r3, r3, #1
 800c024:	d0f9      	beq.n	800c01a <__gethex+0x4e>
 800c026:	f7ff ffbb 	bl	800bfa0 <__hexdig_fun>
 800c02a:	fab0 f580 	clz	r5, r0
 800c02e:	096d      	lsrs	r5, r5, #5
 800c030:	f04f 0b01 	mov.w	fp, #1
 800c034:	464a      	mov	r2, r9
 800c036:	4616      	mov	r6, r2
 800c038:	3201      	adds	r2, #1
 800c03a:	7830      	ldrb	r0, [r6, #0]
 800c03c:	f7ff ffb0 	bl	800bfa0 <__hexdig_fun>
 800c040:	2800      	cmp	r0, #0
 800c042:	d1f8      	bne.n	800c036 <__gethex+0x6a>
 800c044:	498d      	ldr	r1, [pc, #564]	@ (800c27c <__gethex+0x2b0>)
 800c046:	2201      	movs	r2, #1
 800c048:	4630      	mov	r0, r6
 800c04a:	f7ff fed9 	bl	800be00 <strncmp>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d13f      	bne.n	800c0d2 <__gethex+0x106>
 800c052:	b944      	cbnz	r4, 800c066 <__gethex+0x9a>
 800c054:	1c74      	adds	r4, r6, #1
 800c056:	4622      	mov	r2, r4
 800c058:	4616      	mov	r6, r2
 800c05a:	3201      	adds	r2, #1
 800c05c:	7830      	ldrb	r0, [r6, #0]
 800c05e:	f7ff ff9f 	bl	800bfa0 <__hexdig_fun>
 800c062:	2800      	cmp	r0, #0
 800c064:	d1f8      	bne.n	800c058 <__gethex+0x8c>
 800c066:	1ba4      	subs	r4, r4, r6
 800c068:	00a7      	lsls	r7, r4, #2
 800c06a:	7833      	ldrb	r3, [r6, #0]
 800c06c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c070:	2b50      	cmp	r3, #80	@ 0x50
 800c072:	d13e      	bne.n	800c0f2 <__gethex+0x126>
 800c074:	7873      	ldrb	r3, [r6, #1]
 800c076:	2b2b      	cmp	r3, #43	@ 0x2b
 800c078:	d033      	beq.n	800c0e2 <__gethex+0x116>
 800c07a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c07c:	d034      	beq.n	800c0e8 <__gethex+0x11c>
 800c07e:	1c71      	adds	r1, r6, #1
 800c080:	2400      	movs	r4, #0
 800c082:	7808      	ldrb	r0, [r1, #0]
 800c084:	f7ff ff8c 	bl	800bfa0 <__hexdig_fun>
 800c088:	1e43      	subs	r3, r0, #1
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b18      	cmp	r3, #24
 800c08e:	d830      	bhi.n	800c0f2 <__gethex+0x126>
 800c090:	f1a0 0210 	sub.w	r2, r0, #16
 800c094:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c098:	f7ff ff82 	bl	800bfa0 <__hexdig_fun>
 800c09c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c0a0:	fa5f fc8c 	uxtb.w	ip, ip
 800c0a4:	f1bc 0f18 	cmp.w	ip, #24
 800c0a8:	f04f 030a 	mov.w	r3, #10
 800c0ac:	d91e      	bls.n	800c0ec <__gethex+0x120>
 800c0ae:	b104      	cbz	r4, 800c0b2 <__gethex+0xe6>
 800c0b0:	4252      	negs	r2, r2
 800c0b2:	4417      	add	r7, r2
 800c0b4:	f8ca 1000 	str.w	r1, [sl]
 800c0b8:	b1ed      	cbz	r5, 800c0f6 <__gethex+0x12a>
 800c0ba:	f1bb 0f00 	cmp.w	fp, #0
 800c0be:	bf0c      	ite	eq
 800c0c0:	2506      	moveq	r5, #6
 800c0c2:	2500      	movne	r5, #0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	b005      	add	sp, #20
 800c0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0cc:	2500      	movs	r5, #0
 800c0ce:	462c      	mov	r4, r5
 800c0d0:	e7b0      	b.n	800c034 <__gethex+0x68>
 800c0d2:	2c00      	cmp	r4, #0
 800c0d4:	d1c7      	bne.n	800c066 <__gethex+0x9a>
 800c0d6:	4627      	mov	r7, r4
 800c0d8:	e7c7      	b.n	800c06a <__gethex+0x9e>
 800c0da:	464e      	mov	r6, r9
 800c0dc:	462f      	mov	r7, r5
 800c0de:	2501      	movs	r5, #1
 800c0e0:	e7c3      	b.n	800c06a <__gethex+0x9e>
 800c0e2:	2400      	movs	r4, #0
 800c0e4:	1cb1      	adds	r1, r6, #2
 800c0e6:	e7cc      	b.n	800c082 <__gethex+0xb6>
 800c0e8:	2401      	movs	r4, #1
 800c0ea:	e7fb      	b.n	800c0e4 <__gethex+0x118>
 800c0ec:	fb03 0002 	mla	r0, r3, r2, r0
 800c0f0:	e7ce      	b.n	800c090 <__gethex+0xc4>
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	e7de      	b.n	800c0b4 <__gethex+0xe8>
 800c0f6:	eba6 0309 	sub.w	r3, r6, r9
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	2b07      	cmp	r3, #7
 800c100:	dc0a      	bgt.n	800c118 <__gethex+0x14c>
 800c102:	9801      	ldr	r0, [sp, #4]
 800c104:	f7fd ff8c 	bl	800a020 <_Balloc>
 800c108:	4604      	mov	r4, r0
 800c10a:	b940      	cbnz	r0, 800c11e <__gethex+0x152>
 800c10c:	4b5c      	ldr	r3, [pc, #368]	@ (800c280 <__gethex+0x2b4>)
 800c10e:	4602      	mov	r2, r0
 800c110:	21e4      	movs	r1, #228	@ 0xe4
 800c112:	485c      	ldr	r0, [pc, #368]	@ (800c284 <__gethex+0x2b8>)
 800c114:	f7ff fec0 	bl	800be98 <__assert_func>
 800c118:	3101      	adds	r1, #1
 800c11a:	105b      	asrs	r3, r3, #1
 800c11c:	e7ef      	b.n	800c0fe <__gethex+0x132>
 800c11e:	f100 0a14 	add.w	sl, r0, #20
 800c122:	2300      	movs	r3, #0
 800c124:	4655      	mov	r5, sl
 800c126:	469b      	mov	fp, r3
 800c128:	45b1      	cmp	r9, r6
 800c12a:	d337      	bcc.n	800c19c <__gethex+0x1d0>
 800c12c:	f845 bb04 	str.w	fp, [r5], #4
 800c130:	eba5 050a 	sub.w	r5, r5, sl
 800c134:	10ad      	asrs	r5, r5, #2
 800c136:	6125      	str	r5, [r4, #16]
 800c138:	4658      	mov	r0, fp
 800c13a:	f7fe f863 	bl	800a204 <__hi0bits>
 800c13e:	016d      	lsls	r5, r5, #5
 800c140:	f8d8 6000 	ldr.w	r6, [r8]
 800c144:	1a2d      	subs	r5, r5, r0
 800c146:	42b5      	cmp	r5, r6
 800c148:	dd54      	ble.n	800c1f4 <__gethex+0x228>
 800c14a:	1bad      	subs	r5, r5, r6
 800c14c:	4629      	mov	r1, r5
 800c14e:	4620      	mov	r0, r4
 800c150:	f7fe fbef 	bl	800a932 <__any_on>
 800c154:	4681      	mov	r9, r0
 800c156:	b178      	cbz	r0, 800c178 <__gethex+0x1ac>
 800c158:	1e6b      	subs	r3, r5, #1
 800c15a:	1159      	asrs	r1, r3, #5
 800c15c:	f003 021f 	and.w	r2, r3, #31
 800c160:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c164:	f04f 0901 	mov.w	r9, #1
 800c168:	fa09 f202 	lsl.w	r2, r9, r2
 800c16c:	420a      	tst	r2, r1
 800c16e:	d003      	beq.n	800c178 <__gethex+0x1ac>
 800c170:	454b      	cmp	r3, r9
 800c172:	dc36      	bgt.n	800c1e2 <__gethex+0x216>
 800c174:	f04f 0902 	mov.w	r9, #2
 800c178:	4629      	mov	r1, r5
 800c17a:	4620      	mov	r0, r4
 800c17c:	f7ff febe 	bl	800befc <rshift>
 800c180:	442f      	add	r7, r5
 800c182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c186:	42bb      	cmp	r3, r7
 800c188:	da42      	bge.n	800c210 <__gethex+0x244>
 800c18a:	9801      	ldr	r0, [sp, #4]
 800c18c:	4621      	mov	r1, r4
 800c18e:	f7fd ff87 	bl	800a0a0 <_Bfree>
 800c192:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c194:	2300      	movs	r3, #0
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	25a3      	movs	r5, #163	@ 0xa3
 800c19a:	e793      	b.n	800c0c4 <__gethex+0xf8>
 800c19c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c1a0:	2a2e      	cmp	r2, #46	@ 0x2e
 800c1a2:	d012      	beq.n	800c1ca <__gethex+0x1fe>
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d104      	bne.n	800c1b2 <__gethex+0x1e6>
 800c1a8:	f845 bb04 	str.w	fp, [r5], #4
 800c1ac:	f04f 0b00 	mov.w	fp, #0
 800c1b0:	465b      	mov	r3, fp
 800c1b2:	7830      	ldrb	r0, [r6, #0]
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	f7ff fef3 	bl	800bfa0 <__hexdig_fun>
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	f000 000f 	and.w	r0, r0, #15
 800c1c0:	4098      	lsls	r0, r3
 800c1c2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	e7ae      	b.n	800c128 <__gethex+0x15c>
 800c1ca:	45b1      	cmp	r9, r6
 800c1cc:	d8ea      	bhi.n	800c1a4 <__gethex+0x1d8>
 800c1ce:	492b      	ldr	r1, [pc, #172]	@ (800c27c <__gethex+0x2b0>)
 800c1d0:	9303      	str	r3, [sp, #12]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff fe13 	bl	800be00 <strncmp>
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d1e1      	bne.n	800c1a4 <__gethex+0x1d8>
 800c1e0:	e7a2      	b.n	800c128 <__gethex+0x15c>
 800c1e2:	1ea9      	subs	r1, r5, #2
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f7fe fba4 	bl	800a932 <__any_on>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d0c2      	beq.n	800c174 <__gethex+0x1a8>
 800c1ee:	f04f 0903 	mov.w	r9, #3
 800c1f2:	e7c1      	b.n	800c178 <__gethex+0x1ac>
 800c1f4:	da09      	bge.n	800c20a <__gethex+0x23e>
 800c1f6:	1b75      	subs	r5, r6, r5
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	9801      	ldr	r0, [sp, #4]
 800c1fc:	462a      	mov	r2, r5
 800c1fe:	f7fe f95f 	bl	800a4c0 <__lshift>
 800c202:	1b7f      	subs	r7, r7, r5
 800c204:	4604      	mov	r4, r0
 800c206:	f100 0a14 	add.w	sl, r0, #20
 800c20a:	f04f 0900 	mov.w	r9, #0
 800c20e:	e7b8      	b.n	800c182 <__gethex+0x1b6>
 800c210:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c214:	42bd      	cmp	r5, r7
 800c216:	dd6f      	ble.n	800c2f8 <__gethex+0x32c>
 800c218:	1bed      	subs	r5, r5, r7
 800c21a:	42ae      	cmp	r6, r5
 800c21c:	dc34      	bgt.n	800c288 <__gethex+0x2bc>
 800c21e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c222:	2b02      	cmp	r3, #2
 800c224:	d022      	beq.n	800c26c <__gethex+0x2a0>
 800c226:	2b03      	cmp	r3, #3
 800c228:	d024      	beq.n	800c274 <__gethex+0x2a8>
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d115      	bne.n	800c25a <__gethex+0x28e>
 800c22e:	42ae      	cmp	r6, r5
 800c230:	d113      	bne.n	800c25a <__gethex+0x28e>
 800c232:	2e01      	cmp	r6, #1
 800c234:	d10b      	bne.n	800c24e <__gethex+0x282>
 800c236:	9a02      	ldr	r2, [sp, #8]
 800c238:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	2301      	movs	r3, #1
 800c240:	6123      	str	r3, [r4, #16]
 800c242:	f8ca 3000 	str.w	r3, [sl]
 800c246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c248:	2562      	movs	r5, #98	@ 0x62
 800c24a:	601c      	str	r4, [r3, #0]
 800c24c:	e73a      	b.n	800c0c4 <__gethex+0xf8>
 800c24e:	1e71      	subs	r1, r6, #1
 800c250:	4620      	mov	r0, r4
 800c252:	f7fe fb6e 	bl	800a932 <__any_on>
 800c256:	2800      	cmp	r0, #0
 800c258:	d1ed      	bne.n	800c236 <__gethex+0x26a>
 800c25a:	9801      	ldr	r0, [sp, #4]
 800c25c:	4621      	mov	r1, r4
 800c25e:	f7fd ff1f 	bl	800a0a0 <_Bfree>
 800c262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c264:	2300      	movs	r3, #0
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	2550      	movs	r5, #80	@ 0x50
 800c26a:	e72b      	b.n	800c0c4 <__gethex+0xf8>
 800c26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1f3      	bne.n	800c25a <__gethex+0x28e>
 800c272:	e7e0      	b.n	800c236 <__gethex+0x26a>
 800c274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c276:	2b00      	cmp	r3, #0
 800c278:	d1dd      	bne.n	800c236 <__gethex+0x26a>
 800c27a:	e7ee      	b.n	800c25a <__gethex+0x28e>
 800c27c:	0800cb27 	.word	0x0800cb27
 800c280:	0800cabd 	.word	0x0800cabd
 800c284:	0800cb7e 	.word	0x0800cb7e
 800c288:	1e6f      	subs	r7, r5, #1
 800c28a:	f1b9 0f00 	cmp.w	r9, #0
 800c28e:	d130      	bne.n	800c2f2 <__gethex+0x326>
 800c290:	b127      	cbz	r7, 800c29c <__gethex+0x2d0>
 800c292:	4639      	mov	r1, r7
 800c294:	4620      	mov	r0, r4
 800c296:	f7fe fb4c 	bl	800a932 <__any_on>
 800c29a:	4681      	mov	r9, r0
 800c29c:	117a      	asrs	r2, r7, #5
 800c29e:	2301      	movs	r3, #1
 800c2a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c2a4:	f007 071f 	and.w	r7, r7, #31
 800c2a8:	40bb      	lsls	r3, r7
 800c2aa:	4213      	tst	r3, r2
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	bf18      	it	ne
 800c2b2:	f049 0902 	orrne.w	r9, r9, #2
 800c2b6:	f7ff fe21 	bl	800befc <rshift>
 800c2ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c2be:	1b76      	subs	r6, r6, r5
 800c2c0:	2502      	movs	r5, #2
 800c2c2:	f1b9 0f00 	cmp.w	r9, #0
 800c2c6:	d047      	beq.n	800c358 <__gethex+0x38c>
 800c2c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d015      	beq.n	800c2fc <__gethex+0x330>
 800c2d0:	2b03      	cmp	r3, #3
 800c2d2:	d017      	beq.n	800c304 <__gethex+0x338>
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d109      	bne.n	800c2ec <__gethex+0x320>
 800c2d8:	f019 0f02 	tst.w	r9, #2
 800c2dc:	d006      	beq.n	800c2ec <__gethex+0x320>
 800c2de:	f8da 3000 	ldr.w	r3, [sl]
 800c2e2:	ea49 0903 	orr.w	r9, r9, r3
 800c2e6:	f019 0f01 	tst.w	r9, #1
 800c2ea:	d10e      	bne.n	800c30a <__gethex+0x33e>
 800c2ec:	f045 0510 	orr.w	r5, r5, #16
 800c2f0:	e032      	b.n	800c358 <__gethex+0x38c>
 800c2f2:	f04f 0901 	mov.w	r9, #1
 800c2f6:	e7d1      	b.n	800c29c <__gethex+0x2d0>
 800c2f8:	2501      	movs	r5, #1
 800c2fa:	e7e2      	b.n	800c2c2 <__gethex+0x2f6>
 800c2fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2fe:	f1c3 0301 	rsb	r3, r3, #1
 800c302:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0f0      	beq.n	800c2ec <__gethex+0x320>
 800c30a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c30e:	f104 0314 	add.w	r3, r4, #20
 800c312:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c316:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c31a:	f04f 0c00 	mov.w	ip, #0
 800c31e:	4618      	mov	r0, r3
 800c320:	f853 2b04 	ldr.w	r2, [r3], #4
 800c324:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c328:	d01b      	beq.n	800c362 <__gethex+0x396>
 800c32a:	3201      	adds	r2, #1
 800c32c:	6002      	str	r2, [r0, #0]
 800c32e:	2d02      	cmp	r5, #2
 800c330:	f104 0314 	add.w	r3, r4, #20
 800c334:	d13c      	bne.n	800c3b0 <__gethex+0x3e4>
 800c336:	f8d8 2000 	ldr.w	r2, [r8]
 800c33a:	3a01      	subs	r2, #1
 800c33c:	42b2      	cmp	r2, r6
 800c33e:	d109      	bne.n	800c354 <__gethex+0x388>
 800c340:	1171      	asrs	r1, r6, #5
 800c342:	2201      	movs	r2, #1
 800c344:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c348:	f006 061f 	and.w	r6, r6, #31
 800c34c:	fa02 f606 	lsl.w	r6, r2, r6
 800c350:	421e      	tst	r6, r3
 800c352:	d13a      	bne.n	800c3ca <__gethex+0x3fe>
 800c354:	f045 0520 	orr.w	r5, r5, #32
 800c358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c35a:	601c      	str	r4, [r3, #0]
 800c35c:	9b02      	ldr	r3, [sp, #8]
 800c35e:	601f      	str	r7, [r3, #0]
 800c360:	e6b0      	b.n	800c0c4 <__gethex+0xf8>
 800c362:	4299      	cmp	r1, r3
 800c364:	f843 cc04 	str.w	ip, [r3, #-4]
 800c368:	d8d9      	bhi.n	800c31e <__gethex+0x352>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	459b      	cmp	fp, r3
 800c36e:	db17      	blt.n	800c3a0 <__gethex+0x3d4>
 800c370:	6861      	ldr	r1, [r4, #4]
 800c372:	9801      	ldr	r0, [sp, #4]
 800c374:	3101      	adds	r1, #1
 800c376:	f7fd fe53 	bl	800a020 <_Balloc>
 800c37a:	4681      	mov	r9, r0
 800c37c:	b918      	cbnz	r0, 800c386 <__gethex+0x3ba>
 800c37e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3e8 <__gethex+0x41c>)
 800c380:	4602      	mov	r2, r0
 800c382:	2184      	movs	r1, #132	@ 0x84
 800c384:	e6c5      	b.n	800c112 <__gethex+0x146>
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	3202      	adds	r2, #2
 800c38a:	f104 010c 	add.w	r1, r4, #12
 800c38e:	0092      	lsls	r2, r2, #2
 800c390:	300c      	adds	r0, #12
 800c392:	f7fc fed6 	bl	8009142 <memcpy>
 800c396:	4621      	mov	r1, r4
 800c398:	9801      	ldr	r0, [sp, #4]
 800c39a:	f7fd fe81 	bl	800a0a0 <_Bfree>
 800c39e:	464c      	mov	r4, r9
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3a8:	6122      	str	r2, [r4, #16]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	615a      	str	r2, [r3, #20]
 800c3ae:	e7be      	b.n	800c32e <__gethex+0x362>
 800c3b0:	6922      	ldr	r2, [r4, #16]
 800c3b2:	455a      	cmp	r2, fp
 800c3b4:	dd0b      	ble.n	800c3ce <__gethex+0x402>
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f7ff fd9f 	bl	800befc <rshift>
 800c3be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3c2:	3701      	adds	r7, #1
 800c3c4:	42bb      	cmp	r3, r7
 800c3c6:	f6ff aee0 	blt.w	800c18a <__gethex+0x1be>
 800c3ca:	2501      	movs	r5, #1
 800c3cc:	e7c2      	b.n	800c354 <__gethex+0x388>
 800c3ce:	f016 061f 	ands.w	r6, r6, #31
 800c3d2:	d0fa      	beq.n	800c3ca <__gethex+0x3fe>
 800c3d4:	4453      	add	r3, sl
 800c3d6:	f1c6 0620 	rsb	r6, r6, #32
 800c3da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c3de:	f7fd ff11 	bl	800a204 <__hi0bits>
 800c3e2:	42b0      	cmp	r0, r6
 800c3e4:	dbe7      	blt.n	800c3b6 <__gethex+0x3ea>
 800c3e6:	e7f0      	b.n	800c3ca <__gethex+0x3fe>
 800c3e8:	0800cabd 	.word	0x0800cabd

0800c3ec <L_shift>:
 800c3ec:	f1c2 0208 	rsb	r2, r2, #8
 800c3f0:	0092      	lsls	r2, r2, #2
 800c3f2:	b570      	push	{r4, r5, r6, lr}
 800c3f4:	f1c2 0620 	rsb	r6, r2, #32
 800c3f8:	6843      	ldr	r3, [r0, #4]
 800c3fa:	6804      	ldr	r4, [r0, #0]
 800c3fc:	fa03 f506 	lsl.w	r5, r3, r6
 800c400:	432c      	orrs	r4, r5
 800c402:	40d3      	lsrs	r3, r2
 800c404:	6004      	str	r4, [r0, #0]
 800c406:	f840 3f04 	str.w	r3, [r0, #4]!
 800c40a:	4288      	cmp	r0, r1
 800c40c:	d3f4      	bcc.n	800c3f8 <L_shift+0xc>
 800c40e:	bd70      	pop	{r4, r5, r6, pc}

0800c410 <__match>:
 800c410:	b530      	push	{r4, r5, lr}
 800c412:	6803      	ldr	r3, [r0, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c41a:	b914      	cbnz	r4, 800c422 <__match+0x12>
 800c41c:	6003      	str	r3, [r0, #0]
 800c41e:	2001      	movs	r0, #1
 800c420:	bd30      	pop	{r4, r5, pc}
 800c422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c426:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c42a:	2d19      	cmp	r5, #25
 800c42c:	bf98      	it	ls
 800c42e:	3220      	addls	r2, #32
 800c430:	42a2      	cmp	r2, r4
 800c432:	d0f0      	beq.n	800c416 <__match+0x6>
 800c434:	2000      	movs	r0, #0
 800c436:	e7f3      	b.n	800c420 <__match+0x10>

0800c438 <__hexnan>:
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	680b      	ldr	r3, [r1, #0]
 800c43e:	6801      	ldr	r1, [r0, #0]
 800c440:	115e      	asrs	r6, r3, #5
 800c442:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c446:	f013 031f 	ands.w	r3, r3, #31
 800c44a:	b087      	sub	sp, #28
 800c44c:	bf18      	it	ne
 800c44e:	3604      	addne	r6, #4
 800c450:	2500      	movs	r5, #0
 800c452:	1f37      	subs	r7, r6, #4
 800c454:	4682      	mov	sl, r0
 800c456:	4690      	mov	r8, r2
 800c458:	9301      	str	r3, [sp, #4]
 800c45a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c45e:	46b9      	mov	r9, r7
 800c460:	463c      	mov	r4, r7
 800c462:	9502      	str	r5, [sp, #8]
 800c464:	46ab      	mov	fp, r5
 800c466:	784a      	ldrb	r2, [r1, #1]
 800c468:	1c4b      	adds	r3, r1, #1
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	b342      	cbz	r2, 800c4c0 <__hexnan+0x88>
 800c46e:	4610      	mov	r0, r2
 800c470:	9105      	str	r1, [sp, #20]
 800c472:	9204      	str	r2, [sp, #16]
 800c474:	f7ff fd94 	bl	800bfa0 <__hexdig_fun>
 800c478:	2800      	cmp	r0, #0
 800c47a:	d151      	bne.n	800c520 <__hexnan+0xe8>
 800c47c:	9a04      	ldr	r2, [sp, #16]
 800c47e:	9905      	ldr	r1, [sp, #20]
 800c480:	2a20      	cmp	r2, #32
 800c482:	d818      	bhi.n	800c4b6 <__hexnan+0x7e>
 800c484:	9b02      	ldr	r3, [sp, #8]
 800c486:	459b      	cmp	fp, r3
 800c488:	dd13      	ble.n	800c4b2 <__hexnan+0x7a>
 800c48a:	454c      	cmp	r4, r9
 800c48c:	d206      	bcs.n	800c49c <__hexnan+0x64>
 800c48e:	2d07      	cmp	r5, #7
 800c490:	dc04      	bgt.n	800c49c <__hexnan+0x64>
 800c492:	462a      	mov	r2, r5
 800c494:	4649      	mov	r1, r9
 800c496:	4620      	mov	r0, r4
 800c498:	f7ff ffa8 	bl	800c3ec <L_shift>
 800c49c:	4544      	cmp	r4, r8
 800c49e:	d952      	bls.n	800c546 <__hexnan+0x10e>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f1a4 0904 	sub.w	r9, r4, #4
 800c4a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4aa:	f8cd b008 	str.w	fp, [sp, #8]
 800c4ae:	464c      	mov	r4, r9
 800c4b0:	461d      	mov	r5, r3
 800c4b2:	9903      	ldr	r1, [sp, #12]
 800c4b4:	e7d7      	b.n	800c466 <__hexnan+0x2e>
 800c4b6:	2a29      	cmp	r2, #41	@ 0x29
 800c4b8:	d157      	bne.n	800c56a <__hexnan+0x132>
 800c4ba:	3102      	adds	r1, #2
 800c4bc:	f8ca 1000 	str.w	r1, [sl]
 800c4c0:	f1bb 0f00 	cmp.w	fp, #0
 800c4c4:	d051      	beq.n	800c56a <__hexnan+0x132>
 800c4c6:	454c      	cmp	r4, r9
 800c4c8:	d206      	bcs.n	800c4d8 <__hexnan+0xa0>
 800c4ca:	2d07      	cmp	r5, #7
 800c4cc:	dc04      	bgt.n	800c4d8 <__hexnan+0xa0>
 800c4ce:	462a      	mov	r2, r5
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f7ff ff8a 	bl	800c3ec <L_shift>
 800c4d8:	4544      	cmp	r4, r8
 800c4da:	d936      	bls.n	800c54a <__hexnan+0x112>
 800c4dc:	f1a8 0204 	sub.w	r2, r8, #4
 800c4e0:	4623      	mov	r3, r4
 800c4e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4ea:	429f      	cmp	r7, r3
 800c4ec:	d2f9      	bcs.n	800c4e2 <__hexnan+0xaa>
 800c4ee:	1b3b      	subs	r3, r7, r4
 800c4f0:	f023 0303 	bic.w	r3, r3, #3
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	3401      	adds	r4, #1
 800c4f8:	3e03      	subs	r6, #3
 800c4fa:	42b4      	cmp	r4, r6
 800c4fc:	bf88      	it	hi
 800c4fe:	2304      	movhi	r3, #4
 800c500:	4443      	add	r3, r8
 800c502:	2200      	movs	r2, #0
 800c504:	f843 2b04 	str.w	r2, [r3], #4
 800c508:	429f      	cmp	r7, r3
 800c50a:	d2fb      	bcs.n	800c504 <__hexnan+0xcc>
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	b91b      	cbnz	r3, 800c518 <__hexnan+0xe0>
 800c510:	4547      	cmp	r7, r8
 800c512:	d128      	bne.n	800c566 <__hexnan+0x12e>
 800c514:	2301      	movs	r3, #1
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	2005      	movs	r0, #5
 800c51a:	b007      	add	sp, #28
 800c51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c520:	3501      	adds	r5, #1
 800c522:	2d08      	cmp	r5, #8
 800c524:	f10b 0b01 	add.w	fp, fp, #1
 800c528:	dd06      	ble.n	800c538 <__hexnan+0x100>
 800c52a:	4544      	cmp	r4, r8
 800c52c:	d9c1      	bls.n	800c4b2 <__hexnan+0x7a>
 800c52e:	2300      	movs	r3, #0
 800c530:	f844 3c04 	str.w	r3, [r4, #-4]
 800c534:	2501      	movs	r5, #1
 800c536:	3c04      	subs	r4, #4
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	f000 000f 	and.w	r0, r0, #15
 800c53e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c542:	6020      	str	r0, [r4, #0]
 800c544:	e7b5      	b.n	800c4b2 <__hexnan+0x7a>
 800c546:	2508      	movs	r5, #8
 800c548:	e7b3      	b.n	800c4b2 <__hexnan+0x7a>
 800c54a:	9b01      	ldr	r3, [sp, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d0dd      	beq.n	800c50c <__hexnan+0xd4>
 800c550:	f1c3 0320 	rsb	r3, r3, #32
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	40da      	lsrs	r2, r3
 800c55a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c55e:	4013      	ands	r3, r2
 800c560:	f846 3c04 	str.w	r3, [r6, #-4]
 800c564:	e7d2      	b.n	800c50c <__hexnan+0xd4>
 800c566:	3f04      	subs	r7, #4
 800c568:	e7d0      	b.n	800c50c <__hexnan+0xd4>
 800c56a:	2004      	movs	r0, #4
 800c56c:	e7d5      	b.n	800c51a <__hexnan+0xe2>

0800c56e <__ascii_mbtowc>:
 800c56e:	b082      	sub	sp, #8
 800c570:	b901      	cbnz	r1, 800c574 <__ascii_mbtowc+0x6>
 800c572:	a901      	add	r1, sp, #4
 800c574:	b142      	cbz	r2, 800c588 <__ascii_mbtowc+0x1a>
 800c576:	b14b      	cbz	r3, 800c58c <__ascii_mbtowc+0x1e>
 800c578:	7813      	ldrb	r3, [r2, #0]
 800c57a:	600b      	str	r3, [r1, #0]
 800c57c:	7812      	ldrb	r2, [r2, #0]
 800c57e:	1e10      	subs	r0, r2, #0
 800c580:	bf18      	it	ne
 800c582:	2001      	movne	r0, #1
 800c584:	b002      	add	sp, #8
 800c586:	4770      	bx	lr
 800c588:	4610      	mov	r0, r2
 800c58a:	e7fb      	b.n	800c584 <__ascii_mbtowc+0x16>
 800c58c:	f06f 0001 	mvn.w	r0, #1
 800c590:	e7f8      	b.n	800c584 <__ascii_mbtowc+0x16>

0800c592 <_realloc_r>:
 800c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c596:	4607      	mov	r7, r0
 800c598:	4614      	mov	r4, r2
 800c59a:	460d      	mov	r5, r1
 800c59c:	b921      	cbnz	r1, 800c5a8 <_realloc_r+0x16>
 800c59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	f7fd bcb0 	b.w	8009f08 <_malloc_r>
 800c5a8:	b92a      	cbnz	r2, 800c5b6 <_realloc_r+0x24>
 800c5aa:	f7fd fc39 	bl	8009e20 <_free_r>
 800c5ae:	4625      	mov	r5, r4
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b6:	f000 f840 	bl	800c63a <_malloc_usable_size_r>
 800c5ba:	4284      	cmp	r4, r0
 800c5bc:	4606      	mov	r6, r0
 800c5be:	d802      	bhi.n	800c5c6 <_realloc_r+0x34>
 800c5c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5c4:	d8f4      	bhi.n	800c5b0 <_realloc_r+0x1e>
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f7fd fc9d 	bl	8009f08 <_malloc_r>
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	b908      	cbnz	r0, 800c5d6 <_realloc_r+0x44>
 800c5d2:	4645      	mov	r5, r8
 800c5d4:	e7ec      	b.n	800c5b0 <_realloc_r+0x1e>
 800c5d6:	42b4      	cmp	r4, r6
 800c5d8:	4622      	mov	r2, r4
 800c5da:	4629      	mov	r1, r5
 800c5dc:	bf28      	it	cs
 800c5de:	4632      	movcs	r2, r6
 800c5e0:	f7fc fdaf 	bl	8009142 <memcpy>
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	f7fd fc1a 	bl	8009e20 <_free_r>
 800c5ec:	e7f1      	b.n	800c5d2 <_realloc_r+0x40>

0800c5ee <__ascii_wctomb>:
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	b141      	cbz	r1, 800c606 <__ascii_wctomb+0x18>
 800c5f4:	2aff      	cmp	r2, #255	@ 0xff
 800c5f6:	d904      	bls.n	800c602 <__ascii_wctomb+0x14>
 800c5f8:	228a      	movs	r2, #138	@ 0x8a
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c600:	4770      	bx	lr
 800c602:	700a      	strb	r2, [r1, #0]
 800c604:	2001      	movs	r0, #1
 800c606:	4770      	bx	lr

0800c608 <fiprintf>:
 800c608:	b40e      	push	{r1, r2, r3}
 800c60a:	b503      	push	{r0, r1, lr}
 800c60c:	4601      	mov	r1, r0
 800c60e:	ab03      	add	r3, sp, #12
 800c610:	4805      	ldr	r0, [pc, #20]	@ (800c628 <fiprintf+0x20>)
 800c612:	f853 2b04 	ldr.w	r2, [r3], #4
 800c616:	6800      	ldr	r0, [r0, #0]
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	f7ff f9b1 	bl	800b980 <_vfiprintf_r>
 800c61e:	b002      	add	sp, #8
 800c620:	f85d eb04 	ldr.w	lr, [sp], #4
 800c624:	b003      	add	sp, #12
 800c626:	4770      	bx	lr
 800c628:	20000024 	.word	0x20000024

0800c62c <abort>:
 800c62c:	b508      	push	{r3, lr}
 800c62e:	2006      	movs	r0, #6
 800c630:	f000 f834 	bl	800c69c <raise>
 800c634:	2001      	movs	r0, #1
 800c636:	f7f5 f8a7 	bl	8001788 <_exit>

0800c63a <_malloc_usable_size_r>:
 800c63a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c63e:	1f18      	subs	r0, r3, #4
 800c640:	2b00      	cmp	r3, #0
 800c642:	bfbc      	itt	lt
 800c644:	580b      	ldrlt	r3, [r1, r0]
 800c646:	18c0      	addlt	r0, r0, r3
 800c648:	4770      	bx	lr

0800c64a <_raise_r>:
 800c64a:	291f      	cmp	r1, #31
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4605      	mov	r5, r0
 800c650:	460c      	mov	r4, r1
 800c652:	d904      	bls.n	800c65e <_raise_r+0x14>
 800c654:	2316      	movs	r3, #22
 800c656:	6003      	str	r3, [r0, #0]
 800c658:	f04f 30ff 	mov.w	r0, #4294967295
 800c65c:	bd38      	pop	{r3, r4, r5, pc}
 800c65e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c660:	b112      	cbz	r2, 800c668 <_raise_r+0x1e>
 800c662:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c666:	b94b      	cbnz	r3, 800c67c <_raise_r+0x32>
 800c668:	4628      	mov	r0, r5
 800c66a:	f000 f831 	bl	800c6d0 <_getpid_r>
 800c66e:	4622      	mov	r2, r4
 800c670:	4601      	mov	r1, r0
 800c672:	4628      	mov	r0, r5
 800c674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c678:	f000 b818 	b.w	800c6ac <_kill_r>
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d00a      	beq.n	800c696 <_raise_r+0x4c>
 800c680:	1c59      	adds	r1, r3, #1
 800c682:	d103      	bne.n	800c68c <_raise_r+0x42>
 800c684:	2316      	movs	r3, #22
 800c686:	6003      	str	r3, [r0, #0]
 800c688:	2001      	movs	r0, #1
 800c68a:	e7e7      	b.n	800c65c <_raise_r+0x12>
 800c68c:	2100      	movs	r1, #0
 800c68e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c692:	4620      	mov	r0, r4
 800c694:	4798      	blx	r3
 800c696:	2000      	movs	r0, #0
 800c698:	e7e0      	b.n	800c65c <_raise_r+0x12>
	...

0800c69c <raise>:
 800c69c:	4b02      	ldr	r3, [pc, #8]	@ (800c6a8 <raise+0xc>)
 800c69e:	4601      	mov	r1, r0
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	f7ff bfd2 	b.w	800c64a <_raise_r>
 800c6a6:	bf00      	nop
 800c6a8:	20000024 	.word	0x20000024

0800c6ac <_kill_r>:
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4d07      	ldr	r5, [pc, #28]	@ (800c6cc <_kill_r+0x20>)
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	4608      	mov	r0, r1
 800c6b6:	4611      	mov	r1, r2
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	f7f5 f855 	bl	8001768 <_kill>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d102      	bne.n	800c6c8 <_kill_r+0x1c>
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	b103      	cbz	r3, 800c6c8 <_kill_r+0x1c>
 800c6c6:	6023      	str	r3, [r4, #0]
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	200005c8 	.word	0x200005c8

0800c6d0 <_getpid_r>:
 800c6d0:	f7f5 b842 	b.w	8001758 <_getpid>

0800c6d4 <_init>:
 800c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d6:	bf00      	nop
 800c6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6da:	bc08      	pop	{r3}
 800c6dc:	469e      	mov	lr, r3
 800c6de:	4770      	bx	lr

0800c6e0 <_fini>:
 800c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6e2:	bf00      	nop
 800c6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6e6:	bc08      	pop	{r3}
 800c6e8:	469e      	mov	lr, r3
 800c6ea:	4770      	bx	lr
