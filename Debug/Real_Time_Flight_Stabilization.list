
Real_Time_Flight_Stabilization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012004  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  08012198  08012198  00013198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b48  08012b48  000142d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012b48  08012b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b50  08012b50  000142d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b50  08012b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b54  08012b54  00013b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08012b58  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000142d4  2**0
                  CONTENTS
 10 .bss          00001f6c  200002d8  200002d8  000142d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002244  20002244  000142d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000142d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000207e7  00000000  00000000  00014304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042fc  00000000  00000000  00034aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  00038de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001583  00000000  00000000  0003a980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026870  00000000  00000000  0003bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022220  00000000  00000000  00062773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deaf3  00000000  00000000  00084993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00163486  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ee8  00000000  00000000  001634cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0016c3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801217c 	.word	0x0801217c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0801217c 	.word	0x0801217c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001024:	ed2d 8b04 	vpush	{d8-d9}
 8001028:	b082      	sub	sp, #8
 800102a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fc66 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f8ac 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f000 f9ce 	bl	80013d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001038:	f000 f912 	bl	8001260 <MX_I2C1_Init>
  MX_I2C2_Init();
 800103c:	f000 f93e 	bl	80012bc <MX_I2C2_Init>
  MX_TIM6_Init();
 8001040:	f000 f96a 	bl	8001318 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001044:	f000 f99c 	bl	8001380 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001048:	f00a fb92 	bl	800b770 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  /*!< BMI160 Init Process >!*/
  Complementary_Init(&euler_angles, 0.7f, 50.0f);
 800104c:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001150 <main+0x130>
 8001050:	ed9f 0b41 	vldr	d0, [pc, #260]	@ 8001158 <main+0x138>
 8001054:	4842      	ldr	r0, [pc, #264]	@ (8001160 <main+0x140>)
 8001056:	f008 f975 	bl	8009344 <Complementary_Init>
  init_bmi160_sensor_driver_interface(&bmi160);
 800105a:	4842      	ldr	r0, [pc, #264]	@ (8001164 <main+0x144>)
 800105c:	f00a fa82 	bl	800b564 <init_bmi160_sensor_driver_interface>
//  rtU.w3=50;
//  rtU.w4=200;
//
//  QuadcopterModel_initialize();

  hmc5883l_dev.intfptr = &hmc5883l_intf;
 8001060:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <main+0x148>)
 8001062:	4a42      	ldr	r2, [pc, #264]	@ (800116c <main+0x14c>)
 8001064:	605a      	str	r2, [r3, #4]
  hmc5883l_dev.read_func = hmc5883l_read;
 8001066:	4b40      	ldr	r3, [pc, #256]	@ (8001168 <main+0x148>)
 8001068:	4a41      	ldr	r2, [pc, #260]	@ (8001170 <main+0x150>)
 800106a:	609a      	str	r2, [r3, #8]
  hmc5883l_dev.write_func = hmc5883l_write;
 800106c:	4b3e      	ldr	r3, [pc, #248]	@ (8001168 <main+0x148>)
 800106e:	4a41      	ldr	r2, [pc, #260]	@ (8001174 <main+0x154>)
 8001070:	60da      	str	r2, [r3, #12]

  if ( hmc5883l_init(&hmc5883l_dev) != HMC5883L_OK)
 8001072:	483d      	ldr	r0, [pc, #244]	@ (8001168 <main+0x148>)
 8001074:	f008 fcf2 	bl	8009a5c <hmc5883l_init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <main+0x68>
  {
	  printf("HMC5883L init error !\n");
 800107e:	483e      	ldr	r0, [pc, #248]	@ (8001178 <main+0x158>)
 8001080:	f00c f846 	bl	800d110 <puts>
	  Error_Handler();
 8001084:	f000 fa2a 	bl	80014dc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  hmc5883l_get_data(&hmc5883l_dev, &hmc5883l_mag);
 8001088:	493c      	ldr	r1, [pc, #240]	@ (800117c <main+0x15c>)
 800108a:	4837      	ldr	r0, [pc, #220]	@ (8001168 <main+0x148>)
 800108c:	f008 fe2c 	bl	8009ce8 <hmc5883l_get_data>

	  if( bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL),&bmi160_accel, &bmi160_gyro, &bmi160) != BMI160_OK)
 8001090:	4b34      	ldr	r3, [pc, #208]	@ (8001164 <main+0x144>)
 8001092:	4a3b      	ldr	r2, [pc, #236]	@ (8001180 <main+0x160>)
 8001094:	493b      	ldr	r1, [pc, #236]	@ (8001184 <main+0x164>)
 8001096:	2003      	movs	r0, #3
 8001098:	f009 f831 	bl	800a0fe <bmi160_get_sensor_data>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <main+0x8c>
	  {
		  printf("BMI160 sensor data failed !\n");
 80010a2:	4839      	ldr	r0, [pc, #228]	@ (8001188 <main+0x168>)
 80010a4:	f00c f834 	bl	800d110 <puts>
		  Error_Handler();
 80010a8:	f000 fa18 	bl	80014dc <Error_Handler>
	  }

	  Complementary_Update(&euler_angles, bmi160_accel.x, bmi160_accel.y, bmi160_accel.z,bmi160_gyro.x, bmi160_gyro.y, bmi160_gyro.z, hmc5883l_mag.mx, hmc5883l_mag.my,hmc5883l_mag.mz);
 80010ac:	4b35      	ldr	r3, [pc, #212]	@ (8001184 <main+0x164>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa36 	bl	8000524 <__aeabi_i2d>
 80010b8:	4604      	mov	r4, r0
 80010ba:	460d      	mov	r5, r1
 80010bc:	4b31      	ldr	r3, [pc, #196]	@ (8001184 <main+0x164>)
 80010be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fa2e 	bl	8000524 <__aeabi_i2d>
 80010c8:	4680      	mov	r8, r0
 80010ca:	4689      	mov	r9, r1
 80010cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001184 <main+0x164>)
 80010ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa26 	bl	8000524 <__aeabi_i2d>
 80010d8:	4682      	mov	sl, r0
 80010da:	468b      	mov	fp, r1
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <main+0x160>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa1e 	bl	8000524 <__aeabi_i2d>
 80010e8:	ec41 0b18 	vmov	d8, r0, r1
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <main+0x160>)
 80010ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa16 	bl	8000524 <__aeabi_i2d>
 80010f8:	ec41 0b19 	vmov	d9, r0, r1
 80010fc:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <main+0x160>)
 80010fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa0e 	bl	8000524 <__aeabi_i2d>
 8001108:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <main+0x15c>)
 800110a:	ed93 6b00 	vldr	d6, [r3]
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <main+0x15c>)
 8001110:	ed93 7b02 	vldr	d7, [r3, #8]
 8001114:	4b19      	ldr	r3, [pc, #100]	@ (800117c <main+0x15c>)
 8001116:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800111a:	e9cd 2300 	strd	r2, r3, [sp]
 800111e:	ec41 0b15 	vmov	d5, r0, r1
 8001122:	eeb0 4a49 	vmov.f32	s8, s18
 8001126:	eef0 4a69 	vmov.f32	s9, s19
 800112a:	eeb0 3a48 	vmov.f32	s6, s16
 800112e:	eef0 3a68 	vmov.f32	s7, s17
 8001132:	ec4b ab12 	vmov	d2, sl, fp
 8001136:	ec49 8b11 	vmov	d1, r8, r9
 800113a:	ec45 4b10 	vmov	d0, r4, r5
 800113e:	4808      	ldr	r0, [pc, #32]	@ (8001160 <main+0x140>)
 8001140:	f008 f986 	bl	8009450 <Complementary_Update>

	  HAL_Delay(50);
 8001144:	2032      	movs	r0, #50	@ 0x32
 8001146:	f000 fc4b 	bl	80019e0 <HAL_Delay>
	  hmc5883l_get_data(&hmc5883l_dev, &hmc5883l_mag);
 800114a:	e79d      	b.n	8001088 <main+0x68>
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	40490000 	.word	0x40490000
 8001158:	60000000 	.word	0x60000000
 800115c:	3fe66666 	.word	0x3fe66666
 8001160:	20000430 	.word	0x20000430
 8001164:	20000458 	.word	0x20000458
 8001168:	2000049c 	.word	0x2000049c
 800116c:	2000000c 	.word	0x2000000c
 8001170:	08009985 	.word	0x08009985
 8001174:	080099f1 	.word	0x080099f1
 8001178:	08012198 	.word	0x08012198
 800117c:	200004b0 	.word	0x200004b0
 8001180:	20000490 	.word	0x20000490
 8001184:	20000484 	.word	0x20000484
 8001188:	080121b0 	.word	0x080121b0

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b094      	sub	sp, #80	@ 0x50
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 0320 	add.w	r3, r7, #32
 8001196:	2230      	movs	r2, #48	@ 0x30
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f00c f8ba 	bl	800d314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 030c 	add.w	r3, r7, #12
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	4b28      	ldr	r3, [pc, #160]	@ (8001258 <SystemClock_Config+0xcc>)
 80011b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b8:	4a27      	ldr	r2, [pc, #156]	@ (8001258 <SystemClock_Config+0xcc>)
 80011ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011be:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c0:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <SystemClock_Config+0xcc>)
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	2300      	movs	r3, #0
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	4b22      	ldr	r3, [pc, #136]	@ (800125c <SystemClock_Config+0xd0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a21      	ldr	r2, [pc, #132]	@ (800125c <SystemClock_Config+0xd0>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <SystemClock_Config+0xd0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f2:	2302      	movs	r3, #2
 80011f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011fc:	2304      	movs	r3, #4
 80011fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001200:	23a8      	movs	r3, #168	@ 0xa8
 8001202:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001208:	2307      	movs	r3, #7
 800120a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4618      	mov	r0, r3
 8001212:	f003 fa75 	bl	8004700 <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800121c:	f000 f95e 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2302      	movs	r3, #2
 8001226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800122c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2105      	movs	r1, #5
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fcd6 	bl	8004bf0 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800124a:	f000 f947 	bl	80014dc <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3750      	adds	r7, #80	@ 0x50
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001266:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <MX_I2C1_Init+0x54>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <MX_I2C1_Init+0x50>)
 800126c:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <MX_I2C1_Init+0x58>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001270:	4b0f      	ldr	r3, [pc, #60]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001276:	4b0e      	ldr	r3, [pc, #56]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <MX_I2C1_Init+0x50>)
 800127e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001282:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001290:	4b07      	ldr	r3, [pc, #28]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800129c:	4804      	ldr	r0, [pc, #16]	@ (80012b0 <MX_I2C1_Init+0x50>)
 800129e:	f000 fe8b 	bl	8001fb8 <HAL_I2C_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a8:	f000 f918 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200002f4 	.word	0x200002f4
 80012b4:	40005400 	.word	0x40005400
 80012b8:	00061a80 	.word	0x00061a80

080012bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <MX_I2C2_Init+0x50>)
 80012c2:	4a13      	ldr	r2, [pc, #76]	@ (8001310 <MX_I2C2_Init+0x54>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012c6:	4b11      	ldr	r3, [pc, #68]	@ (800130c <MX_I2C2_Init+0x50>)
 80012c8:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <MX_I2C2_Init+0x58>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_I2C2_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <MX_I2C2_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <MX_I2C2_Init+0x50>)
 80012da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <MX_I2C2_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	@ (800130c <MX_I2C2_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <MX_I2C2_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <MX_I2C2_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_I2C2_Init+0x50>)
 80012fa:	f000 fe5d 	bl	8001fb8 <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001304:	f000 f8ea 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000348 	.word	0x20000348
 8001310:	40005800 	.word	0x40005800
 8001314:	000186a0 	.word	0x000186a0

08001318 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <MX_TIM6_Init+0x64>)
 800132a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <MX_TIM6_Init+0x60>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 8001338:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <MX_TIM6_Init+0x60>)
 800133a:	22a7      	movs	r2, #167	@ 0xa7
 800133c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001346:	f003 fe73 	bl	8005030 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001350:	f000 f8c4 	bl	80014dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800135c:	463b      	mov	r3, r7
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM6_Init+0x60>)
 8001362:	f004 f879 	bl	8005458 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800136c:	f000 f8b6 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000039c 	.word	0x2000039c
 800137c:	40001000 	.word	0x40001000

08001380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <MX_USART2_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b8:	f004 f8de 	bl	8005578 <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c2:	f000 f88b 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200003e4 	.word	0x200003e4
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	@ 0x28
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a2c      	ldr	r2, [pc, #176]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a25      	ldr	r2, [pc, #148]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a1e      	ldr	r2, [pc, #120]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b18      	ldr	r3, [pc, #96]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_GPIO_Init+0xd0>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001460:	4811      	ldr	r0, [pc, #68]	@ (80014a8 <MX_GPIO_Init+0xd4>)
 8001462:	f000 fd8f 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	@ (80014ac <MX_GPIO_Init+0xd8>)
 800147a:	f000 fbe7 	bl	8001c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800147e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_GPIO_Init+0xd4>)
 8001498:	f000 fbd8 	bl	8001c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40020000 	.word	0x40020000

080014b0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	f04f 33ff 	mov.w	r3, #4294967295
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <_write+0x28>)
 80014c8:	f004 f8a6 	bl	8005618 <HAL_UART_Transmit>
  return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200003e4 	.word	0x200003e4

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <HAL_MspInit+0x5c>)
 80014f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_MspInit+0x5c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_MspInit+0x5c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a0c      	ldr	r2, [pc, #48]	@ (8001544 <HAL_MspInit+0x5c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <HAL_MspInit+0x5c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001526:	2007      	movs	r0, #7
 8001528:	f000 fb4e 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2005      	movs	r0, #5
 8001532:	f000 fb54 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001536:	2005      	movs	r0, #5
 8001538:	f000 fb6d 	bl	8001c16 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	@ 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a33      	ldr	r2, [pc, #204]	@ (8001634 <HAL_I2C_MspInit+0xec>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12d      	bne.n	80015c6 <HAL_I2C_MspInit+0x7e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a31      	ldr	r2, [pc, #196]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BMI160_SCL_Pin|BMI160_SDA_Pin;
 8001586:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158c:	2312      	movs	r3, #18
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001594:	2303      	movs	r3, #3
 8001596:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001598:	2304      	movs	r3, #4
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4826      	ldr	r0, [pc, #152]	@ (800163c <HAL_I2C_MspInit+0xf4>)
 80015a4:	f000 fb52 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015c4:	e031      	b.n	800162a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001640 <HAL_I2C_MspInit+0xf8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d12c      	bne.n	800162a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e0:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015fe:	2304      	movs	r3, #4
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <HAL_I2C_MspInit+0xf4>)
 800160a:	f000 fb1f 	bl	8001c4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 8001618:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800161c:	6413      	str	r3, [r2, #64]	@ 0x40
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_I2C_MspInit+0xf0>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	40005800 	.word	0x40005800

08001644 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_TIM_Base_MspInit+0x48>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d115      	bne.n	8001682 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_TIM_Base_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2036      	movs	r0, #54	@ 0x36
 8001678:	f000 fab1 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167c:	2036      	movs	r0, #54	@ 0x36
 800167e:	f000 faca 	bl	8001c16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40001000 	.word	0x40001000
 8001690:	40023800 	.word	0x40023800

08001694 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	@ (8001718 <HAL_UART_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12b      	bne.n	800170e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a17      	ldr	r2, [pc, #92]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a10      	ldr	r2, [pc, #64]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_UART_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = RS232_TX_Pin|RS232_RX_Pin;
 80016ee:	230c      	movs	r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fe:	2307      	movs	r3, #7
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	@ (8001720 <HAL_UART_MspInit+0x8c>)
 800170a:	f000 fa9f 	bl	8001c4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	@ 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40004400 	.word	0x40004400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020000 	.word	0x40020000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <NMI_Handler+0x4>

0800172c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <HardFault_Handler+0x4>

08001734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <MemManage_Handler+0x4>

0800173c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <UsageFault_Handler+0x4>

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175e:	f000 f91f 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM6_DAC_IRQHandler+0x10>)
 800177a:	f003 fca8 	bl	80050ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000039c 	.word	0x2000039c

08001788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <OTG_FS_IRQHandler+0x10>)
 800178e:	f001 fea9 	bl	80034e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200019f0 	.word	0x200019f0

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b6:	f00b fdff 	bl	800d3b8 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80017de:	bf00      	nop
 80017e0:	e7fd      	b.n	80017de <_exit+0x12>

080017e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b086      	sub	sp, #24
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e00a      	b.n	800180a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f4:	f3af 8000 	nop.w
 80017f8:	4601      	mov	r1, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	b2ca      	uxtb	r2, r1
 8001802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	3301      	adds	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	dbf0      	blt.n	80017f4 <_read+0x12>
  }

  return len;
 8001812:	687b      	ldr	r3, [r7, #4]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_close>:
  }
  return len;
}

int _close(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001844:	605a      	str	r2, [r3, #4]
  return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_isatty>:

int _isatty(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ac:	f7ff ffea 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f00b fd75 	bl	800d3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff fba1 	bl	8001020 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80018ec:	08012b58 	.word	0x08012b58
  ldr r2, =_sbss
 80018f0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80018f4:	20002244 	.word	0x20002244

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f94f 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fdda 	bl	80014e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f967 	bl	8001c32 <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f92f 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000010 	.word	0x20000010
 8001998:	20000018 	.word	0x20000018
 800199c:	20000014 	.word	0x20000014

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000018 	.word	0x20000018
 80019c4:	200004d0 	.word	0x200004d0

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200004d0 	.word	0x200004d0

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000018 	.word	0x20000018

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	@ (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	@ (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	@ (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	@ 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	@ (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff3e 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff31 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ffa2 	bl	8001b84 <SysTick_Config>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	@ 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	61fb      	str	r3, [r7, #28]
 8001c66:	e16b      	b.n	8001f40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 815a 	bne.w	8001f3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d005      	beq.n	8001c9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d130      	bne.n	8001d00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 0201 	and.w	r2, r3, #1
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d017      	beq.n	8001d3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d123      	bne.n	8001d90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	08da      	lsrs	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3208      	adds	r2, #8
 8001d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	220f      	movs	r2, #15
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	08da      	lsrs	r2, r3, #3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3208      	adds	r2, #8
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0203 	and.w	r2, r3, #3
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80b4 	beq.w	8001f3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b60      	ldr	r3, [pc, #384]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a5f      	ldr	r2, [pc, #380]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f58 <HAL_GPIO_Init+0x30c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dee:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_GPIO_Init+0x310>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	3302      	adds	r3, #2
 8001df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	220f      	movs	r2, #15
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_GPIO_Init+0x314>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d02b      	beq.n	8001e72 <HAL_GPIO_Init+0x226>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_GPIO_Init+0x318>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d025      	beq.n	8001e6e <HAL_GPIO_Init+0x222>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a50      	ldr	r2, [pc, #320]	@ (8001f68 <HAL_GPIO_Init+0x31c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <HAL_GPIO_Init+0x21e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8001f6c <HAL_GPIO_Init+0x320>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d019      	beq.n	8001e66 <HAL_GPIO_Init+0x21a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4e      	ldr	r2, [pc, #312]	@ (8001f70 <HAL_GPIO_Init+0x324>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0x216>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <HAL_GPIO_Init+0x328>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00d      	beq.n	8001e5e <HAL_GPIO_Init+0x212>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d007      	beq.n	8001e5a <HAL_GPIO_Init+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_GPIO_Init+0x20a>
 8001e52:	2307      	movs	r3, #7
 8001e54:	e00e      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e56:	2308      	movs	r3, #8
 8001e58:	e00c      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5a:	2306      	movs	r3, #6
 8001e5c:	e00a      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e5e:	2305      	movs	r3, #5
 8001e60:	e008      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e62:	2304      	movs	r3, #4
 8001e64:	e006      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e66:	2303      	movs	r3, #3
 8001e68:	e004      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e002      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x228>
 8001e72:	2300      	movs	r3, #0
 8001e74:	69fa      	ldr	r2, [r7, #28]
 8001e76:	f002 0203 	and.w	r2, r2, #3
 8001e7a:	0092      	lsls	r2, r2, #2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e84:	4935      	ldr	r1, [pc, #212]	@ (8001f5c <HAL_GPIO_Init+0x310>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	089b      	lsrs	r3, r3, #2
 8001e8a:	3302      	adds	r3, #2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e92:	4b3b      	ldr	r3, [pc, #236]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eb6:	4a32      	ldr	r2, [pc, #200]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee0:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ee6:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_GPIO_Init+0x334>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b0f      	cmp	r3, #15
 8001f44:	f67f ae90 	bls.w	8001c68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3724      	adds	r7, #36	@ 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40013800 	.word	0x40013800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40021400 	.word	0x40021400
 8001f78:	40021800 	.word	0x40021800
 8001f7c:	40021c00 	.word	0x40021c00
 8001f80:	40013c00 	.word	0x40013c00

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e12b      	b.n	8002222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fab2 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	@ 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800200a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800201a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800201c:	f002 ffe0 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a81      	ldr	r2, [pc, #516]	@ (800222c <HAL_I2C_Init+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <HAL_I2C_Init+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a80      	ldr	r2, [pc, #512]	@ (8002230 <HAL_I2C_Init+0x278>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e006      	b.n	800204a <HAL_I2C_Init+0x92>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a7d      	ldr	r2, [pc, #500]	@ (8002234 <HAL_I2C_Init+0x27c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e7      	b.n	8002222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a78      	ldr	r2, [pc, #480]	@ (8002238 <HAL_I2C_Init+0x280>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a6a      	ldr	r2, [pc, #424]	@ (800222c <HAL_I2C_Init+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d802      	bhi.n	800208c <HAL_I2C_Init+0xd4>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	e009      	b.n	80020a0 <HAL_I2C_Init+0xe8>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a69      	ldr	r2, [pc, #420]	@ (800223c <HAL_I2C_Init+0x284>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80020b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	495c      	ldr	r1, [pc, #368]	@ (800222c <HAL_I2C_Init+0x274>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d819      	bhi.n	80020f4 <HAL_I2C_Init+0x13c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ce:	1c59      	adds	r1, r3, #1
 80020d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020d4:	400b      	ands	r3, r1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_I2C_Init+0x138>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1e59      	subs	r1, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	e051      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f0:	2304      	movs	r3, #4
 80020f2:	e04f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d111      	bne.n	8002120 <HAL_I2C_Init+0x168>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	440b      	add	r3, r1
 800210a:	fbb0 f3f3 	udiv	r3, r0, r3
 800210e:	3301      	adds	r3, #1
 8002110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	e012      	b.n	8002146 <HAL_I2C_Init+0x18e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Init+0x196>
 800214a:	2301      	movs	r3, #1
 800214c:	e022      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10e      	bne.n	8002174 <HAL_I2C_Init+0x1bc>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1e58      	subs	r0, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	460b      	mov	r3, r1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	fbb0 f3f3 	udiv	r3, r0, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002172:	e00f      	b.n	8002194 <HAL_I2C_Init+0x1dc>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	0099      	lsls	r1, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	3301      	adds	r3, #1
 800218c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	6809      	ldr	r1, [r1, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69da      	ldr	r2, [r3, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6911      	ldr	r1, [r2, #16]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68d2      	ldr	r2, [r2, #12]
 80021ce:	4311      	orrs	r1, r2
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	430b      	orrs	r3, r1
 80021d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	000186a0 	.word	0x000186a0
 8002230:	001e847f 	.word	0x001e847f
 8002234:	003d08ff 	.word	0x003d08ff
 8002238:	431bde83 	.word	0x431bde83
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af02      	add	r7, sp, #8
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	817b      	strh	r3, [r7, #10]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800225a:	f7ff fbb5 	bl	80019c8 <HAL_GetTick>
 800225e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b20      	cmp	r3, #32
 800226a:	f040 80d9 	bne.w	8002420 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2319      	movs	r3, #25
 8002274:	2201      	movs	r2, #1
 8002276:	496d      	ldr	r1, [pc, #436]	@ (800242c <HAL_I2C_Mem_Write+0x1ec>)
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fdb9 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
 8002286:	e0cc      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Mem_Write+0x56>
 8002292:	2302      	movs	r3, #2
 8002294:	e0c5      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2221      	movs	r2, #33	@ 0x21
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2240      	movs	r2, #64	@ 0x40
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a4d      	ldr	r2, [pc, #308]	@ (8002430 <HAL_I2C_Mem_Write+0x1f0>)
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fe:	88f8      	ldrh	r0, [r7, #6]
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	8979      	ldrh	r1, [r7, #10]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4603      	mov	r3, r0
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fbf0 	bl	8002af4 <I2C_RequestMemoryWrite>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d052      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e081      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fe7e 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	2b04      	cmp	r3, #4
 8002334:	d107      	bne.n	8002346 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_I2C_Mem_Write+0x180>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1aa      	bne.n	800231e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fe71 	bl	80030b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d107      	bne.n	80023f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e016      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	00100002 	.word	0x00100002
 8002430:	ffff0000 	.word	0xffff0000

08002434 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	@ 0x30
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	4608      	mov	r0, r1
 800243e:	4611      	mov	r1, r2
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	817b      	strh	r3, [r7, #10]
 8002446:	460b      	mov	r3, r1
 8002448:	813b      	strh	r3, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800244e:	f7ff fabb 	bl	80019c8 <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b20      	cmp	r3, #32
 800245e:	f040 8214 	bne.w	800288a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2319      	movs	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	497b      	ldr	r1, [pc, #492]	@ (8002658 <HAL_I2C_Mem_Read+0x224>)
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fcbf 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	e207      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_I2C_Mem_Read+0x56>
 8002486:	2302      	movs	r3, #2
 8002488:	e200      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d007      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2222      	movs	r2, #34	@ 0x22
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a5b      	ldr	r2, [pc, #364]	@ (800265c <HAL_I2C_Mem_Read+0x228>)
 80024f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024f2:	88f8      	ldrh	r0, [r7, #6]
 80024f4:	893a      	ldrh	r2, [r7, #8]
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4603      	mov	r3, r0
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fb8c 	bl	8002c20 <I2C_RequestMemoryRead>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e1bc      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	d113      	bne.n	8002542 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e190      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002546:	2b01      	cmp	r3, #1
 8002548:	d11b      	bne.n	8002582 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	e170      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	2b02      	cmp	r3, #2
 8002588:	d11b      	bne.n	80025c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	e150      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025d8:	e144      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025de:	2b03      	cmp	r3, #3
 80025e0:	f200 80f1 	bhi.w	80027c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d123      	bne.n	8002634 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fda7 	bl	8003144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e145      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002632:	e117      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	2b02      	cmp	r3, #2
 800263a:	d14e      	bne.n	80026da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002642:	2200      	movs	r2, #0
 8002644:	4906      	ldr	r1, [pc, #24]	@ (8002660 <HAL_I2C_Mem_Read+0x22c>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fbd2 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e11a      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
 8002656:	bf00      	nop
 8002658:	00100002 	.word	0x00100002
 800265c:	ffff0000 	.word	0xffff0000
 8002660:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026d8:	e0c4      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e0:	2200      	movs	r2, #0
 80026e2:	496c      	ldr	r1, [pc, #432]	@ (8002894 <HAL_I2C_Mem_Read+0x460>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fb83 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cb      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273c:	2200      	movs	r2, #0
 800273e:	4955      	ldr	r1, [pc, #340]	@ (8002894 <HAL_I2C_Mem_Read+0x460>)
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 fb55 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e09d      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027c4:	e04e      	b.n	8002864 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fcba 	bl	8003144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e058      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d124      	bne.n	8002864 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281e:	2b03      	cmp	r3, #3
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002830:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002868:	2b00      	cmp	r3, #0
 800286a:	f47f aeb6 	bne.w	80025da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	@ 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00010004 	.word	0x00010004

08002898 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff f88e 	bl	80019c8 <HAL_GetTick>
 80028ac:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	f040 8111 	bne.w	8002ae2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2319      	movs	r3, #25
 80028c6:	2201      	movs	r2, #1
 80028c8:	4988      	ldr	r1, [pc, #544]	@ (8002aec <HAL_I2C_IsDeviceReady+0x254>)
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fa90 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	e104      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_I2C_IsDeviceReady+0x50>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0fd      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d007      	beq.n	800290e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f042 0201 	orr.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800291c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2224      	movs	r2, #36	@ 0x24
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a70      	ldr	r2, [pc, #448]	@ (8002af0 <HAL_I2C_IsDeviceReady+0x258>)
 8002930:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002940:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 fa4e 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002968:	d103      	bne.n	8002972 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0b6      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002984:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002986:	f7ff f81f 	bl	80019c8 <HAL_GetTick>
 800298a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	bf0c      	ite	eq
 800299a:	2301      	moveq	r3, #1
 800299c:	2300      	movne	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b0:	bf0c      	ite	eq
 80029b2:	2301      	moveq	r3, #1
 80029b4:	2300      	movne	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029ba:	e025      	b.n	8002a08 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f7ff f804 	bl	80019c8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d302      	bcc.n	80029d2 <HAL_I2C_IsDeviceReady+0x13a>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	22a0      	movs	r2, #160	@ 0xa0
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a12:	d005      	beq.n	8002a20 <HAL_I2C_IsDeviceReady+0x188>
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_I2C_IsDeviceReady+0x188>
 8002a1a:	7dbb      	ldrb	r3, [r7, #22]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0cd      	beq.n	80029bc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d129      	bne.n	8002a8a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a44:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2319      	movs	r3, #25
 8002a62:	2201      	movs	r2, #1
 8002a64:	4921      	ldr	r1, [pc, #132]	@ (8002aec <HAL_I2C_IsDeviceReady+0x254>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f9c2 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e036      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	e02c      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a98:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002aa2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2319      	movs	r3, #25
 8002aaa:	2201      	movs	r2, #1
 8002aac:	490f      	ldr	r1, [pc, #60]	@ (8002aec <HAL_I2C_IsDeviceReady+0x254>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f99e 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e012      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f4ff af32 	bcc.w	8002932 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000

08002af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f960 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00d      	beq.n	8002b52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b44:	d103      	bne.n	8002b4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e05f      	b.n	8002c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b52:	897b      	ldrh	r3, [r7, #10]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	492d      	ldr	r1, [pc, #180]	@ (8002c1c <I2C_RequestMemoryWrite+0x128>)
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f9bb 	bl	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e04c      	b.n	8002c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b90:	6a39      	ldr	r1, [r7, #32]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fa46 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00d      	beq.n	8002bba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d107      	bne.n	8002bb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e02b      	b.n	8002c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	611a      	str	r2, [r3, #16]
 8002bca:	e021      	b.n	8002c10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bcc:	893b      	ldrh	r3, [r7, #8]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bdc:	6a39      	ldr	r1, [r7, #32]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fa20 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00d      	beq.n	8002c06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d107      	bne.n	8002c02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e005      	b.n	8002c12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	00010002 	.word	0x00010002

08002c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	817b      	strh	r3, [r7, #10]
 8002c32:	460b      	mov	r3, r1
 8002c34:	813b      	strh	r3, [r7, #8]
 8002c36:	4613      	mov	r3, r2
 8002c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f8c2 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c80:	d103      	bne.n	8002c8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0aa      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c8e:	897b      	ldrh	r3, [r7, #10]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	4952      	ldr	r1, [pc, #328]	@ (8002dec <I2C_RequestMemoryRead+0x1cc>)
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f91d 	bl	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e097      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f9a8 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e076      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d105      	bne.n	8002d08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	e021      	b.n	8002d4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d08:	893b      	ldrh	r3, [r7, #8]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d18:	6a39      	ldr	r1, [r7, #32]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f982 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00d      	beq.n	8002d42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d107      	bne.n	8002d3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e050      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d42:	893b      	ldrh	r3, [r7, #8]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4e:	6a39      	ldr	r1, [r7, #32]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f967 	bl	8003024 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d107      	bne.n	8002d74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e035      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f82b 	bl	8002df0 <I2C_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00d      	beq.n	8002dbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dae:	d103      	bne.n	8002db8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e013      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dbc:	897b      	ldrh	r3, [r7, #10]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	6a3a      	ldr	r2, [r7, #32]
 8002dd0:	4906      	ldr	r1, [pc, #24]	@ (8002dec <I2C_RequestMemoryRead+0x1cc>)
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f886 	bl	8002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	00010002 	.word	0x00010002

08002df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e00:	e048      	b.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e08:	d044      	beq.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7fe fddd 	bl	80019c8 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d139      	bne.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10d      	bne.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	e00c      	b.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d116      	bne.n	8002e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e023      	b.n	8002edc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10d      	bne.n	8002eba <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	e00c      	b.n	8002ed4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d093      	beq.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef2:	e071      	b.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f02:	d123      	bne.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e067      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f52:	d041      	beq.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f54:	f7fe fd38 	bl	80019c8 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d302      	bcc.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d136      	bne.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e00b      	b.n	8002fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	2301      	movne	r3, #1
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e021      	b.n	800301c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0c1b      	lsrs	r3, r3, #16
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d10c      	bne.n	8002ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	43da      	mvns	r2, r3
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e00b      	b.n	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4013      	ands	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f47f af6d 	bne.w	8002ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003030:	e034      	b.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f8e3 	bl	80031fe <I2C_IsAcknowledgeFailed>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e034      	b.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003048:	d028      	beq.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304a:	f7fe fcbd 	bl	80019c8 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d302      	bcc.n	8003060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11d      	bne.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306a:	2b80      	cmp	r3, #128	@ 0x80
 800306c:	d016      	beq.n	800309c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d1c3      	bne.n	8003032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c0:	e034      	b.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f89b 	bl	80031fe <I2C_IsAcknowledgeFailed>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e034      	b.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d028      	beq.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7fe fc75 	bl	80019c8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d302      	bcc.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11d      	bne.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d016      	beq.n	800312c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e007      	b.n	800313c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b04      	cmp	r3, #4
 8003138:	d1c3      	bne.n	80030c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003150:	e049      	b.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b10      	cmp	r3, #16
 800315e:	d119      	bne.n	8003194 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0210 	mvn.w	r2, #16
 8003168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e030      	b.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003194:	f7fe fc18 	bl	80019c8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11d      	bne.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d016      	beq.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	f043 0220 	orr.w	r2, r3, #32
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e007      	b.n	80031f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d1ae      	bne.n	8003152 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003214:	d11b      	bne.n	800324e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800321e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f043 0204 	orr.w	r2, r3, #4
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e101      	b.n	8003472 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f008 fc9f 	bl	800bbcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2203      	movs	r2, #3
 8003292:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800329c:	d102      	bne.n	80032a4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f002 fe88 	bl	8005fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7c1a      	ldrb	r2, [r3, #16]
 80032b6:	f88d 2000 	strb.w	r2, [sp]
 80032ba:	3304      	adds	r3, #4
 80032bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032be:	f002 fd67 	bl	8005d90 <USB_CoreInit>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0ce      	b.n	8003472 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 fe80 	bl	8005fe0 <USB_SetCurrentMode>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e0bf      	b.n	8003472 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e04a      	b.n	800338e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032f8:	7bfa      	ldrb	r2, [r7, #15]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	3315      	adds	r3, #21
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3314      	adds	r3, #20
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	b298      	uxth	r0, r3
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	332e      	adds	r3, #46	@ 0x2e
 8003334:	4602      	mov	r2, r0
 8003336:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3318      	adds	r3, #24
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	331c      	adds	r3, #28
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3320      	adds	r3, #32
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3324      	adds	r3, #36	@ 0x24
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	3301      	adds	r3, #1
 800338c:	73fb      	strb	r3, [r7, #15]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	429a      	cmp	r2, r3
 8003396:	d3af      	bcc.n	80032f8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003398:	2300      	movs	r3, #0
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	e044      	b.n	8003428 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	3301      	adds	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	791b      	ldrb	r3, [r3, #4]
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	429a      	cmp	r2, r3
 8003430:	d3b5      	bcc.n	800339e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7c1a      	ldrb	r2, [r3, #16]
 800343a:	f88d 2000 	strb.w	r2, [sp]
 800343e:	3304      	adds	r3, #4
 8003440:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003442:	f002 fe19 	bl	8006078 <USB_DevInit>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e00c      	b.n	8003472 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 fe63 	bl	8007136 <USB_DevDisconnect>

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_PCD_Start+0x1c>
 8003492:	2302      	movs	r3, #2
 8003494:	e022      	b.n	80034dc <HAL_PCD_Start+0x62>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d105      	bne.n	80034be <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fd6a 	bl	8005f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 fe11 	bl	80070f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b08d      	sub	sp, #52	@ 0x34
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 fecf 	bl	800729e <USB_GetMode>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f040 848c 	bne.w	8003e20 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fe33 	bl	8007178 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8482 	beq.w	8003e1e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f003 fe20 	bl	8007178 <USB_ReadInterrupts>
 8003538:	4603      	mov	r3, r0
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d107      	bne.n	8003552 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f002 0202 	and.w	r2, r2, #2
 8003550:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f003 fe0e 	bl	8007178 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b10      	cmp	r3, #16
 8003564:	d161      	bne.n	800362a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0210 	bic.w	r2, r2, #16
 8003574:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800359c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035a0:	d124      	bne.n	80035ec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d035      	beq.n	800361a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035bc:	b29b      	uxth	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	6a38      	ldr	r0, [r7, #32]
 80035c2:	f003 fc45 	bl	8006e50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035d2:	441a      	add	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e4:	441a      	add	r2, r3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	615a      	str	r2, [r3, #20]
 80035ea:	e016      	b.n	800361a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80035f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80035f6:	d110      	bne.n	800361a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035fe:	2208      	movs	r2, #8
 8003600:	4619      	mov	r1, r3
 8003602:	6a38      	ldr	r0, [r7, #32]
 8003604:	f003 fc24 	bl	8006e50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003614:	441a      	add	r2, r3
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0210 	orr.w	r2, r2, #16
 8003628:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f003 fda2 	bl	8007178 <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800363a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800363e:	f040 80a7 	bne.w	8003790 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f003 fda7 	bl	800719e <USB_ReadDevAllOutEpInterrupt>
 8003650:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003652:	e099      	b.n	8003788 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 808e 	beq.w	800377c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fdcb 	bl	8007206 <USB_ReadDevOutEPInterrupt>
 8003670:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003688:	461a      	mov	r2, r3
 800368a:	2301      	movs	r3, #1
 800368c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800368e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fea3 	bl	80043dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ac:	461a      	mov	r2, r3
 80036ae:	2308      	movs	r3, #8
 80036b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 ff79 	bl	80045ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	2310      	movs	r3, #16
 80036d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d030      	beq.n	8003742 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036e8:	2b80      	cmp	r3, #128	@ 0x80
 80036ea:	d109      	bne.n	8003700 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003702:	4613      	mov	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	3304      	adds	r3, #4
 8003714:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	78db      	ldrb	r3, [r3, #3]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d108      	bne.n	8003730 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f008 fb54 	bl	800bdd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800373c:	461a      	mov	r2, r3
 800373e:	2302      	movs	r3, #2
 8003740:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003758:	461a      	mov	r2, r3
 800375a:	2320      	movs	r3, #32
 800375c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003774:	461a      	mov	r2, r3
 8003776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800377a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	3301      	adds	r3, #1
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	2b00      	cmp	r3, #0
 800378c:	f47f af62 	bne.w	8003654 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fcef 	bl	8007178 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037a4:	f040 80db 	bne.w	800395e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fd10 	bl	80071d2 <USB_ReadDevAllInEpInterrupt>
 80037b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80037b4:	2300      	movs	r3, #0
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80037b8:	e0cd      	b.n	8003956 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80c2 	beq.w	800394a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fd36 	bl	8007242 <USB_ReadDevInEPInterrupt>
 80037d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d057      	beq.n	8003892 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	2201      	movs	r2, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003802:	4013      	ands	r3, r2
 8003804:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003812:	461a      	mov	r2, r3
 8003814:	2301      	movs	r3, #1
 8003816:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	799b      	ldrb	r3, [r3, #6]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d132      	bne.n	8003886 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3320      	adds	r3, #32
 8003830:	6819      	ldr	r1, [r3, #0]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4403      	add	r3, r0
 8003840:	331c      	adds	r3, #28
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4419      	add	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4403      	add	r3, r0
 8003854:	3320      	adds	r3, #32
 8003856:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d113      	bne.n	8003886 <HAL_PCD_IRQHandler+0x3a2>
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3324      	adds	r3, #36	@ 0x24
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800387e:	461a      	mov	r2, r3
 8003880:	2101      	movs	r1, #1
 8003882:	f003 fd3d 	bl	8007300 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	b2db      	uxtb	r3, r3
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f008 fa1e 	bl	800bcce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038a8:	461a      	mov	r2, r3
 80038aa:	2308      	movs	r3, #8
 80038ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d008      	beq.n	80038ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c4:	461a      	mov	r2, r3
 80038c6:	2310      	movs	r3, #16
 80038c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	2340      	movs	r3, #64	@ 0x40
 80038e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d023      	beq.n	8003938 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f2:	6a38      	ldr	r0, [r7, #32]
 80038f4:	f002 fd24 	bl	8006340 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fa:	4613      	mov	r3, r2
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3310      	adds	r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4413      	add	r3, r2
 8003908:	3304      	adds	r3, #4
 800390a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	78db      	ldrb	r3, [r3, #3]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d108      	bne.n	8003926 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f008 fa6b 	bl	800bdfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	461a      	mov	r2, r3
 8003934:	2302      	movs	r3, #2
 8003936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003942:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fcbd 	bl	80042c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	3301      	adds	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af2e 	bne.w	80037ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fc08 	bl	8007178 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800396e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003972:	d122      	bne.n	80039ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800398e:	2b01      	cmp	r3, #1
 8003990:	d108      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800399a:	2100      	movs	r1, #0
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fea3 	bl	80046e8 <HAL_PCDEx_LPM_Callback>
 80039a2:	e002      	b.n	80039aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f008 fa09 	bl	800bdbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f003 fbda 	bl	8007178 <USB_ReadInterrupts>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ce:	d112      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f008 f9c5 	bl	800bd70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80039f4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fbbc 	bl	8007178 <USB_ReadInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a0a:	f040 80b7 	bne.w	8003b7c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2110      	movs	r1, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fc89 	bl	8006340 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a32:	e046      	b.n	8003ac2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a40:	461a      	mov	r2, r3
 8003a42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a74:	461a      	mov	r2, r3
 8003a76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a96:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ab6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003aba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abe:	3301      	adds	r3, #1
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	791b      	ldrb	r3, [r3, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d3b2      	bcc.n	8003a34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003adc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ae0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7bdb      	ldrb	r3, [r3, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003afa:	f043 030b 	orr.w	r3, r3, #11
 8003afe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	69fa      	ldr	r2, [r7, #28]
 8003b0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b10:	f043 030b 	orr.w	r3, r3, #11
 8003b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b16:	e015      	b.n	8003b44 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b26:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b2a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3e:	f043 030b 	orr.w	r3, r3, #11
 8003b42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b52:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b66:	461a      	mov	r2, r3
 8003b68:	f003 fbca 	bl	8007300 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 faf9 	bl	8007178 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b90:	d123      	bne.n	8003bda <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f003 fb8f 	bl	80072ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fc46 	bl	8006432 <USB_GetDevSpeed>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	f001 fa09 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8003bb6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f002 f94a 	bl	8005e58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f008 f8aa 	bl	800bd1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f003 faca 	bl	8007178 <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b08      	cmp	r3, #8
 8003bec:	d10a      	bne.n	8003c04 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f008 f887 	bl	800bd02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f002 0208 	and.w	r2, r2, #8
 8003c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 fab5 	bl	8007178 <USB_ReadInterrupts>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c14:	2b80      	cmp	r3, #128	@ 0x80
 8003c16:	d123      	bne.n	8003c60 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c28:	e014      	b.n	8003c54 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c2e:	4613      	mov	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d105      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 fb0a 	bl	8004262 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	3301      	adds	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	791b      	ldrb	r3, [r3, #4]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d3e4      	bcc.n	8003c2a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 fa87 	bl	8007178 <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c74:	d13c      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c76:	2301      	movs	r3, #1
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7a:	e02b      	b.n	8003cd4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d115      	bne.n	8003cce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ca2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da12      	bge.n	8003cce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3317      	adds	r3, #23
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 faca 	bl	8004262 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d3cd      	bcc.n	8003c7c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f003 fa3f 	bl	8007178 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d04:	d156      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d06:	2301      	movs	r3, #1
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	e045      	b.n	8003d98 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d12e      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	da2b      	bge.n	8003d92 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d46:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d121      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d60:	2201      	movs	r2, #1
 8003d62:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d8e:	6053      	str	r3, [r2, #4]
            break;
 8003d90:	e008      	b.n	8003da4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	3301      	adds	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	791b      	ldrb	r3, [r3, #4]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d3b3      	bcc.n	8003d0c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 f9dd 	bl	8007178 <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc8:	d10a      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f008 f828 	bl	800be20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 f9c7 	bl	8007178 <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d115      	bne.n	8003e20 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f008 f818 	bl	800be3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	e000      	b.n	8003e20 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003e1e:	bf00      	nop
    }
  }
}
 8003e20:	3734      	adds	r7, #52	@ 0x34
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}

08003e26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_PCD_SetAddress+0x1a>
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	e012      	b.n	8003e66 <HAL_PCD_SetAddress+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f003 f926 	bl	80070a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
 8003e76:	4608      	mov	r0, r1
 8003e78:	4611      	mov	r1, r2
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	70fb      	strb	r3, [r7, #3]
 8003e80:	460b      	mov	r3, r1
 8003e82:	803b      	strh	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0f      	bge.n	8003eb4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 020f 	and.w	r2, r3, #15
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	705a      	strb	r2, [r3, #1]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f003 020f 	and.w	r2, r3, #15
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3304      	adds	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ee0:	883b      	ldrh	r3, [r7, #0]
 8003ee2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	78ba      	ldrb	r2, [r7, #2]
 8003eee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	785b      	ldrb	r3, [r3, #1]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f02:	78bb      	ldrb	r3, [r7, #2]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d102      	bne.n	8003f0e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_PCD_EP_Open+0xae>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e00e      	b.n	8003f3a <HAL_PCD_EP_Open+0xcc>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68f9      	ldr	r1, [r7, #12]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f002 faa6 	bl	800647c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	da0f      	bge.n	8003f76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 020f 	and.w	r2, r3, #15
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	3310      	adds	r3, #16
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	705a      	strb	r2, [r3, #1]
 8003f74:	e00f      	b.n	8003f96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	f003 020f 	and.w	r2, r3, #15
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_PCD_EP_Close+0x6e>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e00e      	b.n	8003fce <HAL_PCD_EP_Close+0x8c>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f002 fae4 	bl	800658c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	60f8      	str	r0, [r7, #12]
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	603b      	str	r3, [r7, #0]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fe6:	7afb      	ldrb	r3, [r7, #11]
 8003fe8:	f003 020f 	and.w	r2, r3, #15
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2200      	movs	r2, #0
 8004016:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	b2da      	uxtb	r2, r3
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	799b      	ldrb	r3, [r3, #6]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d102      	bne.n	8004032 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	799b      	ldrb	r3, [r3, #6]
 800403a:	461a      	mov	r2, r3
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	f002 fb81 	bl	8006744 <USB_EPStartXfer>

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 020f 	and.w	r2, r3, #15
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	460b      	mov	r3, r1
 800408a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3310      	adds	r3, #16
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2201      	movs	r2, #1
 80040ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040bc:	7afb      	ldrb	r3, [r7, #11]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	799b      	ldrb	r3, [r3, #6]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d102      	bne.n	80040d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	799b      	ldrb	r3, [r3, #6]
 80040de:	461a      	mov	r2, r3
 80040e0:	6979      	ldr	r1, [r7, #20]
 80040e2:	f002 fb2f 	bl	8006744 <USB_EPStartXfer>

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	7912      	ldrb	r2, [r2, #4]
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e04f      	b.n	80041ae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800410e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	da0f      	bge.n	8004136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	f003 020f 	and.w	r2, r3, #15
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3310      	adds	r3, #16
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	3304      	adds	r3, #4
 800412c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	705a      	strb	r2, [r3, #1]
 8004134:	e00d      	b.n	8004152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	4613      	mov	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	3304      	adds	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_PCD_EP_SetStall+0x82>
 800416e:	2302      	movs	r3, #2
 8004170:	e01d      	b.n	80041ae <HAL_PCD_EP_SetStall+0xbe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	4618      	mov	r0, r3
 8004182:	f002 febd 	bl	8006f00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7999      	ldrb	r1, [r3, #6]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800419e:	461a      	mov	r2, r3
 80041a0:	f003 f8ae 	bl	8007300 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7912      	ldrb	r2, [r2, #4]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e042      	b.n	800425a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0f      	bge.n	80041fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	3310      	adds	r3, #16
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	3304      	adds	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	705a      	strb	r2, [r3, #1]
 80041fa:	e00f      	b.n	800421c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	f003 020f 	and.w	r2, r3, #15
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	4413      	add	r3, r2
 8004212:	3304      	adds	r3, #4
 8004214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_PCD_EP_ClrStall+0x86>
 8004238:	2302      	movs	r3, #2
 800423a:	e00e      	b.n	800425a <HAL_PCD_EP_ClrStall+0xa4>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68f9      	ldr	r1, [r7, #12]
 800424a:	4618      	mov	r0, r3
 800424c:	f002 fec6 	bl	8006fdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b084      	sub	sp, #16
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800426e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004272:	2b00      	cmp	r3, #0
 8004274:	da0c      	bge.n	8004290 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	3310      	adds	r3, #16
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	e00c      	b.n	80042aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	f003 020f 	and.w	r2, r3, #15
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f002 fce5 	bl	8006c80 <USB_EPStopXfer>
 80042b6:	4603      	mov	r3, r0
 80042b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042ba:	7afb      	ldrb	r3, [r7, #11]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	@ 0x28
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	3310      	adds	r3, #16
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	3304      	adds	r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d901      	bls.n	80042fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e06b      	b.n	80043d4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	429a      	cmp	r2, r3
 8004310:	d902      	bls.n	8004318 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3303      	adds	r3, #3
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004320:	e02a      	b.n	8004378 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	429a      	cmp	r2, r3
 8004336:	d902      	bls.n	800433e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3303      	adds	r3, #3
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	68d9      	ldr	r1, [r3, #12]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	4603      	mov	r3, r0
 800435a:	6978      	ldr	r0, [r7, #20]
 800435c:	f002 fd3a 	bl	8006dd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	441a      	add	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	429a      	cmp	r2, r3
 800438c:	d809      	bhi.n	80043a2 <PCD_WriteEmptyTxFifo+0xde>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004396:	429a      	cmp	r2, r3
 8004398:	d203      	bcs.n	80043a2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1bf      	bne.n	8004322 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691a      	ldr	r2, [r3, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d811      	bhi.n	80043d2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	2201      	movs	r2, #1
 80043b6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	6939      	ldr	r1, [r7, #16]
 80043ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043ce:	4013      	ands	r3, r2
 80043d0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	333c      	adds	r3, #60	@ 0x3c
 80043f4:	3304      	adds	r3, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	799b      	ldrb	r3, [r3, #6]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d17b      	bne.n	800450a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4a61      	ldr	r2, [pc, #388]	@ (80045a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	f240 80b9 	bls.w	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80b3 	beq.w	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004444:	6093      	str	r3, [r2, #8]
 8004446:	e0a7      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800445e:	461a      	mov	r2, r3
 8004460:	2320      	movs	r3, #32
 8004462:	6093      	str	r3, [r2, #8]
 8004464:	e098      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8093 	bne.w	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	4a4b      	ldr	r2, [pc, #300]	@ (80045a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d90f      	bls.n	800449a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004496:	6093      	str	r3, [r2, #8]
 8004498:	e07e      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4413      	add	r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	3304      	adds	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1a      	ldr	r2, [r3, #32]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	440b      	add	r3, r1
 80044bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d114      	bne.n	80044fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044e4:	461a      	mov	r2, r3
 80044e6:	2101      	movs	r1, #1
 80044e8:	f002 ff0a 	bl	8007300 <USB_EP0_OutStart>
 80044ec:	e006      	b.n	80044fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	441a      	add	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f007 fbc8 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
 8004508:	e046      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	4a26      	ldr	r2, [pc, #152]	@ (80045a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d124      	bne.n	800455c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004528:	461a      	mov	r2, r3
 800452a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800452e:	6093      	str	r3, [r2, #8]
 8004530:	e032      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004548:	461a      	mov	r2, r3
 800454a:	2320      	movs	r3, #32
 800454c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f007 fb9f 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
 800455a:	e01d      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d114      	bne.n	800458c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004584:	461a      	mov	r2, r3
 8004586:	2100      	movs	r1, #0
 8004588:	f002 feba 	bl	8007300 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f007 fb80 	bl	800bc98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	4f54300a 	.word	0x4f54300a
 80045a8:	4f54310a 	.word	0x4f54310a

080045ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	333c      	adds	r3, #60	@ 0x3c
 80045c4:	3304      	adds	r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a15      	ldr	r2, [pc, #84]	@ (8004634 <PCD_EP_OutSetupPacket_int+0x88>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d90e      	bls.n	8004600 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f8:	461a      	mov	r2, r3
 80045fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f007 fb37 	bl	800bc74 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <PCD_EP_OutSetupPacket_int+0x88>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d90c      	bls.n	8004628 <PCD_EP_OutSetupPacket_int+0x7c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	799b      	ldrb	r3, [r3, #6]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d108      	bne.n	8004628 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004620:	461a      	mov	r2, r3
 8004622:	2101      	movs	r1, #1
 8004624:	f002 fe6c 	bl	8007300 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3718      	adds	r7, #24
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	4f54300a 	.word	0x4f54300a

08004638 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
 8004644:	4613      	mov	r3, r2
 8004646:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d107      	bne.n	8004666 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004656:	883b      	ldrh	r3, [r7, #0]
 8004658:	0419      	lsls	r1, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	430a      	orrs	r2, r1
 8004662:	629a      	str	r2, [r3, #40]	@ 0x28
 8004664:	e028      	b.n	80046b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	4413      	add	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e00d      	b.n	8004696 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3340      	adds	r3, #64	@ 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	3301      	adds	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	7bfa      	ldrb	r2, [r7, #15]
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	3b01      	subs	r3, #1
 800469c:	429a      	cmp	r2, r3
 800469e:	d3ec      	bcc.n	800467a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046a0:	883b      	ldrh	r3, [r7, #0]
 80046a2:	0418      	lsls	r0, r3, #16
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6819      	ldr	r1, [r3, #0]
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	4302      	orrs	r2, r0
 80046b0:	3340      	adds	r3, #64	@ 0x40
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	460b      	mov	r3, r1
 80046d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	887a      	ldrh	r2, [r7, #2]
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e267      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d075      	beq.n	800480a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800471e:	4b88      	ldr	r3, [pc, #544]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00c      	beq.n	8004744 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472a:	4b85      	ldr	r3, [pc, #532]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004732:	2b08      	cmp	r3, #8
 8004734:	d112      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004736:	4b82      	ldr	r3, [pc, #520]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800473e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004742:	d10b      	bne.n	800475c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	4b7e      	ldr	r3, [pc, #504]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d05b      	beq.n	8004808 <HAL_RCC_OscConfig+0x108>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d157      	bne.n	8004808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e242      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004764:	d106      	bne.n	8004774 <HAL_RCC_OscConfig+0x74>
 8004766:	4b76      	ldr	r3, [pc, #472]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a75      	ldr	r2, [pc, #468]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e01d      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800477c:	d10c      	bne.n	8004798 <HAL_RCC_OscConfig+0x98>
 800477e:	4b70      	ldr	r3, [pc, #448]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a6f      	ldr	r2, [pc, #444]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	4b6d      	ldr	r3, [pc, #436]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6c      	ldr	r2, [pc, #432]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004790:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	e00b      	b.n	80047b0 <HAL_RCC_OscConfig+0xb0>
 8004798:	4b69      	ldr	r3, [pc, #420]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a68      	ldr	r2, [pc, #416]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800479e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b66      	ldr	r3, [pc, #408]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a65      	ldr	r2, [pc, #404]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80047aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d013      	beq.n	80047e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd f906 	bl	80019c8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c0:	f7fd f902 	bl	80019c8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b64      	cmp	r3, #100	@ 0x64
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e207      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0xc0>
 80047de:	e014      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd f8f2 	bl	80019c8 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fd f8ee 	bl	80019c8 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e1f3      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fa:	4b51      	ldr	r3, [pc, #324]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f0      	bne.n	80047e8 <HAL_RCC_OscConfig+0xe8>
 8004806:	e000      	b.n	800480a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d063      	beq.n	80048de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004816:	4b4a      	ldr	r3, [pc, #296]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004822:	4b47      	ldr	r3, [pc, #284]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800482a:	2b08      	cmp	r3, #8
 800482c:	d11c      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482e:	4b44      	ldr	r3, [pc, #272]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d116      	bne.n	8004868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	4b41      	ldr	r3, [pc, #260]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d001      	beq.n	8004852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e1c7      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004852:	4b3b      	ldr	r3, [pc, #236]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4937      	ldr	r1, [pc, #220]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	e03a      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d020      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004870:	4b34      	ldr	r3, [pc, #208]	@ (8004944 <HAL_RCC_OscConfig+0x244>)
 8004872:	2201      	movs	r2, #1
 8004874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd f8a7 	bl	80019c8 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800487e:	f7fd f8a3 	bl	80019c8 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1a8      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0f0      	beq.n	800487e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800489c:	4b28      	ldr	r3, [pc, #160]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	4925      	ldr	r1, [pc, #148]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
 80048b0:	e015      	b.n	80048de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b2:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_RCC_OscConfig+0x244>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7fd f886 	bl	80019c8 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c0:	f7fd f882 	bl	80019c8 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e187      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d036      	beq.n	8004958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f2:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <HAL_RCC_OscConfig+0x248>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fd f866 	bl	80019c8 <HAL_GetTick>
 80048fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004900:	f7fd f862 	bl	80019c8 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e167      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004912:	4b0b      	ldr	r3, [pc, #44]	@ (8004940 <HAL_RCC_OscConfig+0x240>)
 8004914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f0      	beq.n	8004900 <HAL_RCC_OscConfig+0x200>
 800491e:	e01b      	b.n	8004958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_OscConfig+0x248>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fd f84f 	bl	80019c8 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800492c:	e00e      	b.n	800494c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492e:	f7fd f84b 	bl	80019c8 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d907      	bls.n	800494c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e150      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
 8004940:	40023800 	.word	0x40023800
 8004944:	42470000 	.word	0x42470000
 8004948:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800494c:	4b88      	ldr	r3, [pc, #544]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ea      	bne.n	800492e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 8097 	beq.w	8004a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496a:	4b81      	ldr	r3, [pc, #516]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004976:	2300      	movs	r3, #0
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	4b7d      	ldr	r3, [pc, #500]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004984:	6413      	str	r3, [r2, #64]	@ 0x40
 8004986:	4b7a      	ldr	r3, [pc, #488]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	60bb      	str	r3, [r7, #8]
 8004990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004992:	2301      	movs	r3, #1
 8004994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004996:	4b77      	ldr	r3, [pc, #476]	@ (8004b74 <HAL_RCC_OscConfig+0x474>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d118      	bne.n	80049d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a2:	4b74      	ldr	r3, [pc, #464]	@ (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a73      	ldr	r2, [pc, #460]	@ (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ae:	f7fd f80b 	bl	80019c8 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049b6:	f7fd f807 	bl	80019c8 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e10c      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004b74 <HAL_RCC_OscConfig+0x474>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d106      	bne.n	80049ea <HAL_RCC_OscConfig+0x2ea>
 80049dc:	4b64      	ldr	r3, [pc, #400]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e0:	4a63      	ldr	r2, [pc, #396]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80049e8:	e01c      	b.n	8004a24 <HAL_RCC_OscConfig+0x324>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x30c>
 80049f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80049fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	4a5b      	ldr	r2, [pc, #364]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0x324>
 8004a0c:	4b58      	ldr	r3, [pc, #352]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a10:	4a57      	ldr	r2, [pc, #348]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a18:	4b55      	ldr	r3, [pc, #340]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1c:	4a54      	ldr	r2, [pc, #336]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2c:	f7fc ffcc 	bl	80019c8 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fc ffc8 	bl	80019c8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0cb      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	4b49      	ldr	r3, [pc, #292]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0ee      	beq.n	8004a34 <HAL_RCC_OscConfig+0x334>
 8004a56:	e014      	b.n	8004a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a58:	f7fc ffb6 	bl	80019c8 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fc ffb2 	bl	80019c8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0b5      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	4b3e      	ldr	r3, [pc, #248]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1ee      	bne.n	8004a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a82:	7dfb      	ldrb	r3, [r7, #23]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d105      	bne.n	8004a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a88:	4b39      	ldr	r3, [pc, #228]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	4a38      	ldr	r2, [pc, #224]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a1 	beq.w	8004be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a9e:	4b34      	ldr	r3, [pc, #208]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d05c      	beq.n	8004b64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d141      	bne.n	8004b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab2:	4b31      	ldr	r3, [pc, #196]	@ (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab8:	f7fc ff86 	bl	80019c8 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fc ff82 	bl	80019c8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e087      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad2:	4b27      	ldr	r3, [pc, #156]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	491b      	ldr	r1, [pc, #108]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b0e:	f7fc ff5b 	bl	80019c8 <HAL_GetTick>
 8004b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b14:	e008      	b.n	8004b28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7fc ff57 	bl	80019c8 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e05c      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	4b11      	ldr	r3, [pc, #68]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f0      	beq.n	8004b16 <HAL_RCC_OscConfig+0x416>
 8004b34:	e054      	b.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b36:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <HAL_RCC_OscConfig+0x478>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fc ff44 	bl	80019c8 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b44:	f7fc ff40 	bl	80019c8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e045      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b56:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <HAL_RCC_OscConfig+0x470>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1f0      	bne.n	8004b44 <HAL_RCC_OscConfig+0x444>
 8004b62:	e03d      	b.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e038      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bec <HAL_RCC_OscConfig+0x4ec>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d028      	beq.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d121      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d11a      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bac:	4013      	ands	r3, r2
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d111      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d107      	bne.n	8004bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d001      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0cc      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b68      	ldr	r3, [pc, #416]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d90c      	bls.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b65      	ldr	r3, [pc, #404]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1a:	4b63      	ldr	r3, [pc, #396]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0b8      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d020      	beq.n	8004c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c44:	4b59      	ldr	r3, [pc, #356]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a58      	ldr	r2, [pc, #352]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c5c:	4b53      	ldr	r3, [pc, #332]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a52      	ldr	r2, [pc, #328]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c68:	4b50      	ldr	r3, [pc, #320]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	494d      	ldr	r1, [pc, #308]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d044      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d107      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d119      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e07f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d003      	beq.n	8004cae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b3f      	ldr	r3, [pc, #252]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e06f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b3b      	ldr	r3, [pc, #236]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e067      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b37      	ldr	r3, [pc, #220]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4934      	ldr	r1, [pc, #208]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce0:	f7fc fe72 	bl	80019c8 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fc fe6e 	bl	80019c8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e04f      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d10:	4b25      	ldr	r3, [pc, #148]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d20c      	bcs.n	8004d38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b22      	ldr	r3, [pc, #136]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b20      	ldr	r3, [pc, #128]	@ (8004da8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e032      	b.n	8004d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d44:	4b19      	ldr	r3, [pc, #100]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4916      	ldr	r1, [pc, #88]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d009      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	490e      	ldr	r1, [pc, #56]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d76:	f000 f821 	bl	8004dbc <HAL_RCC_GetSysClockFreq>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	490a      	ldr	r1, [pc, #40]	@ (8004db0 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	5ccb      	ldrb	r3, [r1, r3]
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d92:	4b09      	ldr	r3, [pc, #36]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fc fdd2 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023c00 	.word	0x40023c00
 8004dac:	40023800 	.word	0x40023800
 8004db0:	080124ac 	.word	0x080124ac
 8004db4:	20000010 	.word	0x20000010
 8004db8:	20000014 	.word	0x20000014

08004dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc0:	b094      	sub	sp, #80	@ 0x50
 8004dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd4:	4b79      	ldr	r3, [pc, #484]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 030c 	and.w	r3, r3, #12
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d00d      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x40>
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	f200 80e1 	bhi.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_RCC_GetSysClockFreq+0x34>
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d003      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004dee:	e0db      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df0:	4b73      	ldr	r3, [pc, #460]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004df4:	e0db      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004df6:	4b73      	ldr	r3, [pc, #460]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dfa:	e0d8      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e06:	4b6d      	ldr	r3, [pc, #436]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d063      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e12:	4b6a      	ldr	r3, [pc, #424]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	2200      	movs	r2, #0
 8004e1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e26:	2300      	movs	r3, #0
 8004e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e2e:	4622      	mov	r2, r4
 8004e30:	462b      	mov	r3, r5
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f04f 0100 	mov.w	r1, #0
 8004e3a:	0159      	lsls	r1, r3, #5
 8004e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e40:	0150      	lsls	r0, r2, #5
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4621      	mov	r1, r4
 8004e48:	1a51      	subs	r1, r2, r1
 8004e4a:	6139      	str	r1, [r7, #16]
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e60:	4659      	mov	r1, fp
 8004e62:	018b      	lsls	r3, r1, #6
 8004e64:	4651      	mov	r1, sl
 8004e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6a:	4651      	mov	r1, sl
 8004e6c:	018a      	lsls	r2, r1, #6
 8004e6e:	4651      	mov	r1, sl
 8004e70:	ebb2 0801 	subs.w	r8, r2, r1
 8004e74:	4659      	mov	r1, fp
 8004e76:	eb63 0901 	sbc.w	r9, r3, r1
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8e:	4690      	mov	r8, r2
 8004e90:	4699      	mov	r9, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	eb18 0303 	adds.w	r3, r8, r3
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	eb49 0303 	adc.w	r3, r9, r3
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eae:	4629      	mov	r1, r5
 8004eb0:	024b      	lsls	r3, r1, #9
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb8:	4621      	mov	r1, r4
 8004eba:	024a      	lsls	r2, r1, #9
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ecc:	f7fb fedc 	bl	8000c88 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed8:	e058      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b38      	ldr	r3, [pc, #224]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eea:	623b      	str	r3, [r7, #32]
 8004eec:	2300      	movs	r3, #0
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	f04f 0000 	mov.w	r0, #0
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	0159      	lsls	r1, r3, #5
 8004f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f06:	0150      	lsls	r0, r2, #5
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4641      	mov	r1, r8
 8004f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f12:	4649      	mov	r1, r9
 8004f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004f30:	eb63 050b 	sbc.w	r5, r3, fp
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	603b      	str	r3, [r7, #0]
 8004f4e:	464b      	mov	r3, r9
 8004f50:	eb45 0303 	adc.w	r3, r5, r3
 8004f54:	607b      	str	r3, [r7, #4]
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f62:	4629      	mov	r1, r5
 8004f64:	028b      	lsls	r3, r1, #10
 8004f66:	4621      	mov	r1, r4
 8004f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	028a      	lsls	r2, r1, #10
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f76:	2200      	movs	r2, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	61fa      	str	r2, [r7, #28]
 8004f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f80:	f7fb fe82 	bl	8000c88 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	0c1b      	lsrs	r3, r3, #16
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	3301      	adds	r3, #1
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fa8:	4b05      	ldr	r3, [pc, #20]	@ (8004fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004faa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3750      	adds	r7, #80	@ 0x50
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	007a1200 	.word	0x007a1200

08004fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fcc:	4b03      	ldr	r3, [pc, #12]	@ (8004fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8004fce:	681b      	ldr	r3, [r3, #0]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000010 	.word	0x20000010

08004fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fe4:	f7ff fff0 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	4903      	ldr	r1, [pc, #12]	@ (8005004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ff6:	5ccb      	ldrb	r3, [r1, r3]
 8004ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	080124bc 	.word	0x080124bc

08005008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800500c:	f7ff ffdc 	bl	8004fc8 <HAL_RCC_GetHCLKFreq>
 8005010:	4602      	mov	r2, r0
 8005012:	4b05      	ldr	r3, [pc, #20]	@ (8005028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	0b5b      	lsrs	r3, r3, #13
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	4903      	ldr	r1, [pc, #12]	@ (800502c <HAL_RCC_GetPCLK2Freq+0x24>)
 800501e:	5ccb      	ldrb	r3, [r1, r3]
 8005020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005024:	4618      	mov	r0, r3
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	080124bc 	.word	0x080124bc

08005030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e041      	b.n	80050c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d106      	bne.n	800505c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7fc faf4 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f000 f946 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01b      	beq.n	8005132 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0202 	mvn.w	r2, #2
 8005102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8d2 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 800511e:	e005      	b.n	800512c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f8c4 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8d5 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	d020      	beq.n	800517e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d01b      	beq.n	800517e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f06f 0204 	mvn.w	r2, #4
 800514e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f8ac 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 800516a:	e005      	b.n	8005178 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f89e 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f8af 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d020      	beq.n	80051ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d01b      	beq.n	80051ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0208 	mvn.w	r2, #8
 800519a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2204      	movs	r2, #4
 80051a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f886 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 80051b6:	e005      	b.n	80051c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f878 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f889 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d01b      	beq.n	8005216 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f06f 0210 	mvn.w	r2, #16
 80051e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2208      	movs	r2, #8
 80051ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f860 	bl	80052c2 <HAL_TIM_IC_CaptureCallback>
 8005202:	e005      	b.n	8005210 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f852 	bl	80052ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f863 	bl	80052d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00c      	beq.n	800523a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f06f 0201 	mvn.w	r2, #1
 8005232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f006 fa7d 	bl	800b734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d007      	beq.n	800525e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f983 	bl	8005564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f834 	bl	80052ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00c      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0220 	mvn.w	r2, #32
 800529e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f955 	bl	8005550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a46      	ldr	r2, [pc, #280]	@ (800542c <TIM_Base_SetConfig+0x12c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d00f      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a43      	ldr	r2, [pc, #268]	@ (8005430 <TIM_Base_SetConfig+0x130>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a42      	ldr	r2, [pc, #264]	@ (8005434 <TIM_Base_SetConfig+0x134>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a41      	ldr	r2, [pc, #260]	@ (8005438 <TIM_Base_SetConfig+0x138>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a40      	ldr	r2, [pc, #256]	@ (800543c <TIM_Base_SetConfig+0x13c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d108      	bne.n	8005352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a35      	ldr	r2, [pc, #212]	@ (800542c <TIM_Base_SetConfig+0x12c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005360:	d027      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a32      	ldr	r2, [pc, #200]	@ (8005430 <TIM_Base_SetConfig+0x130>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d023      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a31      	ldr	r2, [pc, #196]	@ (8005434 <TIM_Base_SetConfig+0x134>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a30      	ldr	r2, [pc, #192]	@ (8005438 <TIM_Base_SetConfig+0x138>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2f      	ldr	r2, [pc, #188]	@ (800543c <TIM_Base_SetConfig+0x13c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2e      	ldr	r2, [pc, #184]	@ (8005440 <TIM_Base_SetConfig+0x140>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2d      	ldr	r2, [pc, #180]	@ (8005444 <TIM_Base_SetConfig+0x144>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <TIM_Base_SetConfig+0x148>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <TIM_Base_SetConfig+0x14c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <TIM_Base_SetConfig+0x150>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a29      	ldr	r2, [pc, #164]	@ (8005454 <TIM_Base_SetConfig+0x154>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a10      	ldr	r2, [pc, #64]	@ (800542c <TIM_Base_SetConfig+0x12c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0xf8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a12      	ldr	r2, [pc, #72]	@ (800543c <TIM_Base_SetConfig+0x13c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d103      	bne.n	8005400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	611a      	str	r2, [r3, #16]
  }
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40010000 	.word	0x40010000
 8005430:	40000400 	.word	0x40000400
 8005434:	40000800 	.word	0x40000800
 8005438:	40000c00 	.word	0x40000c00
 800543c:	40010400 	.word	0x40010400
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800
 800544c:	40001800 	.word	0x40001800
 8005450:	40001c00 	.word	0x40001c00
 8005454:	40002000 	.word	0x40002000

08005458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800546c:	2302      	movs	r3, #2
 800546e:	e05a      	b.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a21      	ldr	r2, [pc, #132]	@ (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d022      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054bc:	d01d      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d018      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00e      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d009      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d004      	beq.n	80054fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a15      	ldr	r2, [pc, #84]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d10c      	bne.n	8005514 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	4313      	orrs	r3, r2
 800550a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40010400 	.word	0x40010400
 8005548:	40014000 	.word	0x40014000
 800554c:	40001800 	.word	0x40001800

08005550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e042      	b.n	8005610 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7fc f878 	bl	8001694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2224      	movs	r2, #36	@ 0x24
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f973 	bl	80058a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	@ 0x28
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d175      	bne.n	8005724 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Transmit+0x2c>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e06e      	b.n	8005726 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2221      	movs	r2, #33	@ 0x21
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005656:	f7fc f9b7 	bl	80019c8 <HAL_GetTick>
 800565a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	88fa      	ldrh	r2, [r7, #6]
 8005660:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	88fa      	ldrh	r2, [r7, #6]
 8005666:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005670:	d108      	bne.n	8005684 <HAL_UART_Transmit+0x6c>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d104      	bne.n	8005684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	e003      	b.n	800568c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005688:	2300      	movs	r3, #0
 800568a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800568c:	e02e      	b.n	80056ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2200      	movs	r2, #0
 8005696:	2180      	movs	r1, #128	@ 0x80
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 f848 	bl	800572e <UART_WaitOnFlagUntilTimeout>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e03a      	b.n	8005726 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	3302      	adds	r3, #2
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e007      	b.n	80056de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3301      	adds	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1cb      	bne.n	800568e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2140      	movs	r1, #64	@ 0x40
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f814 	bl	800572e <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e006      	b.n	8005726 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	60f8      	str	r0, [r7, #12]
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	603b      	str	r3, [r7, #0]
 800573a:	4613      	mov	r3, r2
 800573c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573e:	e03b      	b.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d037      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005748:	f7fc f93e 	bl	80019c8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	6a3a      	ldr	r2, [r7, #32]
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <UART_WaitOnFlagUntilTimeout+0x30>
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e03a      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d023      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b80      	cmp	r3, #128	@ 0x80
 8005774:	d020      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b40      	cmp	r3, #64	@ 0x40
 800577a:	d01d      	beq.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b08      	cmp	r3, #8
 8005788:	d116      	bne.n	80057b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f81d 	bl	80057e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2208      	movs	r2, #8
 80057aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e00f      	b.n	80057d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4013      	ands	r3, r2
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	bf0c      	ite	eq
 80057c8:	2301      	moveq	r3, #1
 80057ca:	2300      	movne	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0b4      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b095      	sub	sp, #84	@ 0x54
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	330c      	adds	r3, #12
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	e853 3f00 	ldrex	r3, [r3]
 80057f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	330c      	adds	r3, #12
 8005806:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005808:	643a      	str	r2, [r7, #64]	@ 0x40
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800580e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005810:	e841 2300 	strex	r3, r2, [r1]
 8005814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1e5      	bne.n	80057e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	61fb      	str	r3, [r7, #28]
   return(result);
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800583c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e5      	bne.n	800581c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	2b01      	cmp	r3, #1
 8005856:	d119      	bne.n	800588c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	60bb      	str	r3, [r7, #8]
   return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f023 0310 	bic.w	r3, r3, #16
 800586e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005878:	61ba      	str	r2, [r7, #24]
 800587a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6979      	ldr	r1, [r7, #20]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	613b      	str	r3, [r7, #16]
   return(result);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800589a:	bf00      	nop
 800589c:	3754      	adds	r7, #84	@ 0x54
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b0c0      	sub	sp, #256	@ 0x100
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c4:	68d9      	ldr	r1, [r3, #12]
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	ea40 0301 	orr.w	r3, r0, r1
 80058d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	431a      	orrs	r2, r3
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	431a      	orrs	r2, r3
 80058e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005900:	f021 010c 	bic.w	r1, r1, #12
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800590e:	430b      	orrs	r3, r1
 8005910:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	6999      	ldr	r1, [r3, #24]
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	ea40 0301 	orr.w	r3, r0, r1
 800592e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4b8f      	ldr	r3, [pc, #572]	@ (8005b74 <UART_SetConfig+0x2cc>)
 8005938:	429a      	cmp	r2, r3
 800593a:	d005      	beq.n	8005948 <UART_SetConfig+0xa0>
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	4b8d      	ldr	r3, [pc, #564]	@ (8005b78 <UART_SetConfig+0x2d0>)
 8005944:	429a      	cmp	r2, r3
 8005946:	d104      	bne.n	8005952 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005948:	f7ff fb5e 	bl	8005008 <HAL_RCC_GetPCLK2Freq>
 800594c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005950:	e003      	b.n	800595a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005952:	f7ff fb45 	bl	8004fe0 <HAL_RCC_GetPCLK1Freq>
 8005956:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005964:	f040 810c 	bne.w	8005b80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596c:	2200      	movs	r2, #0
 800596e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005972:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005976:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800597a:	4622      	mov	r2, r4
 800597c:	462b      	mov	r3, r5
 800597e:	1891      	adds	r1, r2, r2
 8005980:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005982:	415b      	adcs	r3, r3
 8005984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005986:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800598a:	4621      	mov	r1, r4
 800598c:	eb12 0801 	adds.w	r8, r2, r1
 8005990:	4629      	mov	r1, r5
 8005992:	eb43 0901 	adc.w	r9, r3, r1
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059aa:	4690      	mov	r8, r2
 80059ac:	4699      	mov	r9, r3
 80059ae:	4623      	mov	r3, r4
 80059b0:	eb18 0303 	adds.w	r3, r8, r3
 80059b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059b8:	462b      	mov	r3, r5
 80059ba:	eb49 0303 	adc.w	r3, r9, r3
 80059be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059d6:	460b      	mov	r3, r1
 80059d8:	18db      	adds	r3, r3, r3
 80059da:	653b      	str	r3, [r7, #80]	@ 0x50
 80059dc:	4613      	mov	r3, r2
 80059de:	eb42 0303 	adc.w	r3, r2, r3
 80059e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059ec:	f7fb f94c 	bl	8000c88 <__aeabi_uldivmod>
 80059f0:	4602      	mov	r2, r0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4b61      	ldr	r3, [pc, #388]	@ (8005b7c <UART_SetConfig+0x2d4>)
 80059f6:	fba3 2302 	umull	r2, r3, r3, r2
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	011c      	lsls	r4, r3, #4
 80059fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a20:	4641      	mov	r1, r8
 8005a22:	eb12 0a01 	adds.w	sl, r2, r1
 8005a26:	4649      	mov	r1, r9
 8005a28:	eb43 0b01 	adc.w	fp, r3, r1
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	f04f 0300 	mov.w	r3, #0
 8005a34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a40:	4692      	mov	sl, r2
 8005a42:	469b      	mov	fp, r3
 8005a44:	4643      	mov	r3, r8
 8005a46:	eb1a 0303 	adds.w	r3, sl, r3
 8005a4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a4e:	464b      	mov	r3, r9
 8005a50:	eb4b 0303 	adc.w	r3, fp, r3
 8005a54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	18db      	adds	r3, r3, r3
 8005a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a72:	4613      	mov	r3, r2
 8005a74:	eb42 0303 	adc.w	r3, r2, r3
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a82:	f7fb f901 	bl	8000c88 <__aeabi_uldivmod>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b7c <UART_SetConfig+0x2d4>)
 8005a8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	2264      	movs	r2, #100	@ 0x64
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	1acb      	subs	r3, r1, r3
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005aa2:	4b36      	ldr	r3, [pc, #216]	@ (8005b7c <UART_SetConfig+0x2d4>)
 8005aa4:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	005b      	lsls	r3, r3, #1
 8005aac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ab0:	441c      	add	r4, r3
 8005ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005abc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ac0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	1891      	adds	r1, r2, r2
 8005aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005acc:	415b      	adcs	r3, r3
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ad0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	1851      	adds	r1, r2, r1
 8005ad8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ada:	4649      	mov	r1, r9
 8005adc:	414b      	adcs	r3, r1
 8005ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005aec:	4659      	mov	r1, fp
 8005aee:	00cb      	lsls	r3, r1, #3
 8005af0:	4651      	mov	r1, sl
 8005af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af6:	4651      	mov	r1, sl
 8005af8:	00ca      	lsls	r2, r1, #3
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	4642      	mov	r2, r8
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b08:	464b      	mov	r3, r9
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	eb42 0303 	adc.w	r3, r2, r3
 8005b10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b28:	460b      	mov	r3, r1
 8005b2a:	18db      	adds	r3, r3, r3
 8005b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b2e:	4613      	mov	r3, r2
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b3e:	f7fb f8a3 	bl	8000c88 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4b0d      	ldr	r3, [pc, #52]	@ (8005b7c <UART_SetConfig+0x2d4>)
 8005b48:	fba3 1302 	umull	r1, r3, r3, r2
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	2164      	movs	r1, #100	@ 0x64
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	3332      	adds	r3, #50	@ 0x32
 8005b5a:	4a08      	ldr	r2, [pc, #32]	@ (8005b7c <UART_SetConfig+0x2d4>)
 8005b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	f003 0207 	and.w	r2, r3, #7
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4422      	add	r2, r4
 8005b6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b70:	e106      	b.n	8005d80 <UART_SetConfig+0x4d8>
 8005b72:	bf00      	nop
 8005b74:	40011000 	.word	0x40011000
 8005b78:	40011400 	.word	0x40011400
 8005b7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b92:	4642      	mov	r2, r8
 8005b94:	464b      	mov	r3, r9
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	6239      	str	r1, [r7, #32]
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	1854      	adds	r4, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb43 0501 	adc.w	r5, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	00eb      	lsls	r3, r5, #3
 8005bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bba:	00e2      	lsls	r2, r4, #3
 8005bbc:	4614      	mov	r4, r2
 8005bbe:	461d      	mov	r5, r3
 8005bc0:	4643      	mov	r3, r8
 8005bc2:	18e3      	adds	r3, r4, r3
 8005bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bc8:	464b      	mov	r3, r9
 8005bca:	eb45 0303 	adc.w	r3, r5, r3
 8005bce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bee:	4629      	mov	r1, r5
 8005bf0:	008b      	lsls	r3, r1, #2
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	008a      	lsls	r2, r1, #2
 8005bfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c00:	f7fb f842 	bl	8000c88 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4b60      	ldr	r3, [pc, #384]	@ (8005d8c <UART_SetConfig+0x4e4>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011c      	lsls	r4, r3, #4
 8005c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c24:	4642      	mov	r2, r8
 8005c26:	464b      	mov	r3, r9
 8005c28:	1891      	adds	r1, r2, r2
 8005c2a:	61b9      	str	r1, [r7, #24]
 8005c2c:	415b      	adcs	r3, r3
 8005c2e:	61fb      	str	r3, [r7, #28]
 8005c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c34:	4641      	mov	r1, r8
 8005c36:	1851      	adds	r1, r2, r1
 8005c38:	6139      	str	r1, [r7, #16]
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	414b      	adcs	r3, r1
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	f04f 0200 	mov.w	r2, #0
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	00cb      	lsls	r3, r1, #3
 8005c50:	4651      	mov	r1, sl
 8005c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c56:	4651      	mov	r1, sl
 8005c58:	00ca      	lsls	r2, r1, #3
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4642      	mov	r2, r8
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c68:	464b      	mov	r3, r9
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	eb42 0303 	adc.w	r3, r2, r3
 8005c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c8c:	4649      	mov	r1, r9
 8005c8e:	008b      	lsls	r3, r1, #2
 8005c90:	4641      	mov	r1, r8
 8005c92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c96:	4641      	mov	r1, r8
 8005c98:	008a      	lsls	r2, r1, #2
 8005c9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c9e:	f7fa fff3 	bl	8000c88 <__aeabi_uldivmod>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <UART_SetConfig+0x4e4>)
 8005caa:	fba3 2301 	umull	r2, r3, r3, r1
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2264      	movs	r2, #100	@ 0x64
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	1acb      	subs	r3, r1, r3
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3332      	adds	r3, #50	@ 0x32
 8005cbc:	4a33      	ldr	r2, [pc, #204]	@ (8005d8c <UART_SetConfig+0x4e4>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc8:	441c      	add	r4, r3
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cce:	2200      	movs	r2, #0
 8005cd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ce8:	4641      	mov	r1, r8
 8005cea:	1851      	adds	r1, r2, r1
 8005cec:	6039      	str	r1, [r7, #0]
 8005cee:	4649      	mov	r1, r9
 8005cf0:	414b      	adcs	r3, r1
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d00:	4659      	mov	r1, fp
 8005d02:	00cb      	lsls	r3, r1, #3
 8005d04:	4651      	mov	r1, sl
 8005d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	00ca      	lsls	r2, r1, #3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	4642      	mov	r2, r8
 8005d16:	189b      	adds	r3, r3, r2
 8005d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	460a      	mov	r2, r1
 8005d1e:	eb42 0303 	adc.w	r3, r2, r3
 8005d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	008b      	lsls	r3, r1, #2
 8005d40:	4641      	mov	r1, r8
 8005d42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d46:	4641      	mov	r1, r8
 8005d48:	008a      	lsls	r2, r1, #2
 8005d4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d4e:	f7fa ff9b 	bl	8000c88 <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <UART_SetConfig+0x4e4>)
 8005d58:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	2164      	movs	r1, #100	@ 0x64
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	3332      	adds	r3, #50	@ 0x32
 8005d6a:	4a08      	ldr	r2, [pc, #32]	@ (8005d8c <UART_SetConfig+0x4e4>)
 8005d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d70:	095b      	lsrs	r3, r3, #5
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4422      	add	r2, r4
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d86:	46bd      	mov	sp, r7
 8005d88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d8c:	51eb851f 	.word	0x51eb851f

08005d90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d90:	b084      	sub	sp, #16
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	f107 001c 	add.w	r0, r7, #28
 8005d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005da2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d123      	bne.n	8005df2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d105      	bne.n	8005de6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 fae8 	bl	80073bc <USB_CoreReset>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
 8005df0:	e01b      	b.n	8005e2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fadc 	bl	80073bc <USB_CoreReset>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005e08:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e1c:	e005      	b.n	8005e2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e2a:	7fbb      	ldrb	r3, [r7, #30]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d10b      	bne.n	8005e48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f043 0206 	orr.w	r2, r3, #6
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e54:	b004      	add	sp, #16
 8005e56:	4770      	bx	lr

08005e58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d165      	bne.n	8005f38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4a41      	ldr	r2, [pc, #260]	@ (8005f74 <USB_SetTurnaroundTime+0x11c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d906      	bls.n	8005e82 <USB_SetTurnaroundTime+0x2a>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4a40      	ldr	r2, [pc, #256]	@ (8005f78 <USB_SetTurnaroundTime+0x120>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d202      	bcs.n	8005e82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e7c:	230f      	movs	r3, #15
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e062      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4a3c      	ldr	r2, [pc, #240]	@ (8005f78 <USB_SetTurnaroundTime+0x120>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d306      	bcc.n	8005e98 <USB_SetTurnaroundTime+0x40>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	4a3b      	ldr	r2, [pc, #236]	@ (8005f7c <USB_SetTurnaroundTime+0x124>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d202      	bcs.n	8005e98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e92:	230e      	movs	r3, #14
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	e057      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4a38      	ldr	r2, [pc, #224]	@ (8005f7c <USB_SetTurnaroundTime+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d306      	bcc.n	8005eae <USB_SetTurnaroundTime+0x56>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	4a37      	ldr	r2, [pc, #220]	@ (8005f80 <USB_SetTurnaroundTime+0x128>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d202      	bcs.n	8005eae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ea8:	230d      	movs	r3, #13
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	e04c      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	4a33      	ldr	r2, [pc, #204]	@ (8005f80 <USB_SetTurnaroundTime+0x128>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d306      	bcc.n	8005ec4 <USB_SetTurnaroundTime+0x6c>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4a32      	ldr	r2, [pc, #200]	@ (8005f84 <USB_SetTurnaroundTime+0x12c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d802      	bhi.n	8005ec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e041      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8005f84 <USB_SetTurnaroundTime+0x12c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d906      	bls.n	8005eda <USB_SetTurnaroundTime+0x82>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4a2e      	ldr	r2, [pc, #184]	@ (8005f88 <USB_SetTurnaroundTime+0x130>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d802      	bhi.n	8005eda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ed4:	230b      	movs	r3, #11
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e036      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a2a      	ldr	r2, [pc, #168]	@ (8005f88 <USB_SetTurnaroundTime+0x130>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d906      	bls.n	8005ef0 <USB_SetTurnaroundTime+0x98>
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4a29      	ldr	r2, [pc, #164]	@ (8005f8c <USB_SetTurnaroundTime+0x134>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d802      	bhi.n	8005ef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005eea:	230a      	movs	r3, #10
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e02b      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4a26      	ldr	r2, [pc, #152]	@ (8005f8c <USB_SetTurnaroundTime+0x134>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d906      	bls.n	8005f06 <USB_SetTurnaroundTime+0xae>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	4a25      	ldr	r2, [pc, #148]	@ (8005f90 <USB_SetTurnaroundTime+0x138>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d202      	bcs.n	8005f06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005f00:	2309      	movs	r3, #9
 8005f02:	617b      	str	r3, [r7, #20]
 8005f04:	e020      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	4a21      	ldr	r2, [pc, #132]	@ (8005f90 <USB_SetTurnaroundTime+0x138>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d306      	bcc.n	8005f1c <USB_SetTurnaroundTime+0xc4>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a20      	ldr	r2, [pc, #128]	@ (8005f94 <USB_SetTurnaroundTime+0x13c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d802      	bhi.n	8005f1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f16:	2308      	movs	r3, #8
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e015      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <USB_SetTurnaroundTime+0x13c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d906      	bls.n	8005f32 <USB_SetTurnaroundTime+0xda>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <USB_SetTurnaroundTime+0x140>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d202      	bcs.n	8005f32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f2c:	2307      	movs	r3, #7
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e00a      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f32:	2306      	movs	r3, #6
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	e007      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f3e:	2309      	movs	r3, #9
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f44:	2309      	movs	r3, #9
 8005f46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	029b      	lsls	r3, r3, #10
 8005f5c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f60:	431a      	orrs	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	00d8acbf 	.word	0x00d8acbf
 8005f78:	00e4e1c0 	.word	0x00e4e1c0
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	01067380 	.word	0x01067380
 8005f84:	011a499f 	.word	0x011a499f
 8005f88:	01312cff 	.word	0x01312cff
 8005f8c:	014ca43f 	.word	0x014ca43f
 8005f90:	016e3600 	.word	0x016e3600
 8005f94:	01a6ab1f 	.word	0x01a6ab1f
 8005f98:	01e84800 	.word	0x01e84800

08005f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f043 0201 	orr.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d115      	bne.n	800602e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800600e:	200a      	movs	r0, #10
 8006010:	f7fb fce6 	bl	80019e0 <HAL_Delay>
      ms += 10U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	330a      	adds	r3, #10
 8006018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f001 f93f 	bl	800729e <USB_GetMode>
 8006020:	4603      	mov	r3, r0
 8006022:	2b01      	cmp	r3, #1
 8006024:	d01e      	beq.n	8006064 <USB_SetCurrentMode+0x84>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2bc7      	cmp	r3, #199	@ 0xc7
 800602a:	d9f0      	bls.n	800600e <USB_SetCurrentMode+0x2e>
 800602c:	e01a      	b.n	8006064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800602e:	78fb      	ldrb	r3, [r7, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d115      	bne.n	8006060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006040:	200a      	movs	r0, #10
 8006042:	f7fb fccd 	bl	80019e0 <HAL_Delay>
      ms += 10U;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	330a      	adds	r3, #10
 800604a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f926 	bl	800729e <USB_GetMode>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <USB_SetCurrentMode+0x84>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2bc7      	cmp	r3, #199	@ 0xc7
 800605c:	d9f0      	bls.n	8006040 <USB_SetCurrentMode+0x60>
 800605e:	e001      	b.n	8006064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e005      	b.n	8006070 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2bc8      	cmp	r3, #200	@ 0xc8
 8006068:	d101      	bne.n	800606e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006078:	b084      	sub	sp, #16
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	e009      	b.n	80060ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	3340      	adds	r3, #64	@ 0x40
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	2200      	movs	r2, #0
 80060a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3301      	adds	r3, #1
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2b0e      	cmp	r3, #14
 80060b0:	d9f2      	bls.n	8006098 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80060b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d11c      	bne.n	80060f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80060f2:	e00b      	b.n	800610c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006112:	461a      	mov	r2, r3
 8006114:	2300      	movs	r3, #0
 8006116:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006118:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10d      	bne.n	800613c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006120:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006128:	2100      	movs	r1, #0
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f968 	bl	8006400 <USB_SetDevSpeed>
 8006130:	e008      	b.n	8006144 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006132:	2101      	movs	r1, #1
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f963 	bl	8006400 <USB_SetDevSpeed>
 800613a:	e003      	b.n	8006144 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800613c:	2103      	movs	r1, #3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f95e 	bl	8006400 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006144:	2110      	movs	r1, #16
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f8fa 	bl	8006340 <USB_FlushTxFifo>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f924 	bl	80063a4 <USB_FlushRxFifo>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616c:	461a      	mov	r2, r3
 800616e:	2300      	movs	r3, #0
 8006170:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006184:	461a      	mov	r2, r3
 8006186:	2300      	movs	r3, #0
 8006188:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e043      	b.n	8006218 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a6:	d118      	bne.n	80061da <USB_DevInit+0x162>
    {
      if (i == 0U)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	461a      	mov	r2, r3
 80061bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e013      	b.n	80061ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d0:	461a      	mov	r2, r3
 80061d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e008      	b.n	80061ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e6:	461a      	mov	r2, r3
 80061e8:	2300      	movs	r3, #0
 80061ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f8:	461a      	mov	r2, r3
 80061fa:	2300      	movs	r3, #0
 80061fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620a:	461a      	mov	r2, r3
 800620c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3301      	adds	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800621c:	461a      	mov	r2, r3
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4293      	cmp	r3, r2
 8006222:	d3b5      	bcc.n	8006190 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	e043      	b.n	80062b2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800623c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006240:	d118      	bne.n	8006274 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006254:	461a      	mov	r2, r3
 8006256:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e013      	b.n	8006286 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626a:	461a      	mov	r2, r3
 800626c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e008      	b.n	8006286 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006292:	461a      	mov	r2, r3
 8006294:	2300      	movs	r3, #0
 8006296:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	015a      	lsls	r2, r3, #5
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a4:	461a      	mov	r2, r3
 80062a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	3301      	adds	r3, #1
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062b6:	461a      	mov	r2, r3
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d3b5      	bcc.n	800622a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062d0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80062de:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062e0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d105      	bne.n	80062f4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f043 0210 	orr.w	r2, r3, #16
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	4b10      	ldr	r3, [pc, #64]	@ (800633c <USB_DevInit+0x2c4>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006300:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	f043 0208 	orr.w	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006314:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006318:	2b01      	cmp	r3, #1
 800631a:	d107      	bne.n	800632c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006324:	f043 0304 	orr.w	r3, r3, #4
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006338:	b004      	add	sp, #16
 800633a:	4770      	bx	lr
 800633c:	803c3800 	.word	0x803c3800

08006340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800635a:	d901      	bls.n	8006360 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e01b      	b.n	8006398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	daf2      	bge.n	800634e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	019b      	lsls	r3, r3, #6
 8006370:	f043 0220 	orr.w	r2, r3, #32
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006384:	d901      	bls.n	800638a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e006      	b.n	8006398 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b20      	cmp	r3, #32
 8006394:	d0f0      	beq.n	8006378 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063bc:	d901      	bls.n	80063c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e018      	b.n	80063f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	daf2      	bge.n	80063b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2210      	movs	r2, #16
 80063d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063e0:	d901      	bls.n	80063e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e006      	b.n	80063f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	2b10      	cmp	r3, #16
 80063f0:	d0f0      	beq.n	80063d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006420:	4313      	orrs	r3, r2
 8006422:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0306 	and.w	r3, r3, #6
 800644a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
 8006456:	e00a      	b.n	800646e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d002      	beq.n	8006464 <USB_GetDevSpeed+0x32>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b06      	cmp	r3, #6
 8006462:	d102      	bne.n	800646a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006464:	2302      	movs	r3, #2
 8006466:	75fb      	strb	r3, [r7, #23]
 8006468:	e001      	b.n	800646e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800646a:	230f      	movs	r3, #15
 800646c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800646e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006470:	4618      	mov	r0, r3
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d13a      	bne.n	800650e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649e:	69da      	ldr	r2, [r3, #28]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f003 030f 	and.w	r3, r3, #15
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f303 	lsl.w	r3, r1, r3
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	68f9      	ldr	r1, [r7, #12]
 80064b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064b6:	4313      	orrs	r3, r2
 80064b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d155      	bne.n	800657c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	791b      	ldrb	r3, [r3, #4]
 80064ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	059b      	lsls	r3, r3, #22
 80064f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064f4:	4313      	orrs	r3, r2
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006506:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	e036      	b.n	800657c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	69da      	ldr	r2, [r3, #28]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	2101      	movs	r1, #1
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	041b      	lsls	r3, r3, #16
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800652c:	4313      	orrs	r3, r2
 800652e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11a      	bne.n	800657c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	015a      	lsls	r2, r3, #5
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4413      	add	r3, r2
 800654e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	791b      	ldrb	r3, [r3, #4]
 8006560:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006562:	430b      	orrs	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800657a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
	...

0800658c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	785b      	ldrb	r3, [r3, #1]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d161      	bne.n	800666c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065be:	d11f      	bne.n	8006600 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006606:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	2101      	movs	r1, #1
 8006612:	fa01 f303 	lsl.w	r3, r1, r3
 8006616:	b29b      	uxth	r3, r3
 8006618:	43db      	mvns	r3, r3
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006620:	4013      	ands	r3, r2
 8006622:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f303 	lsl.w	r3, r1, r3
 800663a:	b29b      	uxth	r3, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	68f9      	ldr	r1, [r7, #12]
 8006640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006644:	4013      	ands	r3, r2
 8006646:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	0159      	lsls	r1, r3, #5
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	440b      	add	r3, r1
 800665e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006662:	4619      	mov	r1, r3
 8006664:	4b35      	ldr	r3, [pc, #212]	@ (800673c <USB_DeactivateEndpoint+0x1b0>)
 8006666:	4013      	ands	r3, r2
 8006668:	600b      	str	r3, [r1, #0]
 800666a:	e060      	b.n	800672e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800667e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006682:	d11f      	bne.n	80066c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	440a      	add	r2, r1
 800669a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	015a      	lsls	r2, r3, #5
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	0151      	lsls	r1, r2, #5
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	440a      	add	r2, r1
 80066ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	2101      	movs	r1, #1
 80066d6:	fa01 f303 	lsl.w	r3, r1, r3
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	43db      	mvns	r3, r3
 80066de:	68f9      	ldr	r1, [r7, #12]
 80066e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066e4:	4013      	ands	r3, r2
 80066e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	2101      	movs	r1, #1
 80066fa:	fa01 f303 	lsl.w	r3, r1, r3
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	43db      	mvns	r3, r3
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006708:	4013      	ands	r3, r2
 800670a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	0159      	lsls	r1, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	440b      	add	r3, r1
 8006722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006726:	4619      	mov	r1, r3
 8006728:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <USB_DeactivateEndpoint+0x1b4>)
 800672a:	4013      	ands	r3, r2
 800672c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	ec337800 	.word	0xec337800
 8006740:	eff37800 	.word	0xeff37800

08006744 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	@ 0x28
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	785b      	ldrb	r3, [r3, #1]
 8006760:	2b01      	cmp	r3, #1
 8006762:	f040 817f 	bne.w	8006a64 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d132      	bne.n	80067d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	0151      	lsls	r1, r2, #5
 8006780:	69fa      	ldr	r2, [r7, #28]
 8006782:	440a      	add	r2, r1
 8006784:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006788:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800678c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	015a      	lsls	r2, r3, #5
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	4413      	add	r3, r2
 800679a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	69fa      	ldr	r2, [r7, #28]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	69fa      	ldr	r2, [r7, #28]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067cc:	0cdb      	lsrs	r3, r3, #19
 80067ce:	04db      	lsls	r3, r3, #19
 80067d0:	6113      	str	r3, [r2, #16]
 80067d2:	e097      	b.n	8006904 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067ee:	0cdb      	lsrs	r3, r3, #19
 80067f0:	04db      	lsls	r3, r3, #19
 80067f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	69fa      	ldr	r2, [r7, #28]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800680e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006812:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006816:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11a      	bne.n	8006854 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	d903      	bls.n	8006832 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800684c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006850:	6113      	str	r3, [r2, #16]
 8006852:	e044      	b.n	80068de <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	4413      	add	r3, r2
 800685e:	1e5a      	subs	r2, r3, #1
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006876:	691a      	ldr	r2, [r3, #16]
 8006878:	8afb      	ldrh	r3, [r7, #22]
 800687a:	04d9      	lsls	r1, r3, #19
 800687c:	4ba4      	ldr	r3, [pc, #656]	@ (8006b10 <USB_EPStartXfer+0x3cc>)
 800687e:	400b      	ands	r3, r1
 8006880:	69b9      	ldr	r1, [r7, #24]
 8006882:	0148      	lsls	r0, r1, #5
 8006884:	69f9      	ldr	r1, [r7, #28]
 8006886:	4401      	add	r1, r0
 8006888:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800688c:	4313      	orrs	r3, r2
 800688e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	791b      	ldrb	r3, [r3, #4]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d122      	bne.n	80068de <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80068b6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	8afb      	ldrh	r3, [r7, #22]
 80068c8:	075b      	lsls	r3, r3, #29
 80068ca:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80068ce:	69b9      	ldr	r1, [r7, #24]
 80068d0:	0148      	lsls	r0, r1, #5
 80068d2:	69f9      	ldr	r1, [r7, #28]
 80068d4:	4401      	add	r1, r0
 80068d6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068da:	4313      	orrs	r3, r2
 80068dc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ea:	691a      	ldr	r2, [r3, #16]
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	0148      	lsls	r0, r1, #5
 80068f8:	69f9      	ldr	r1, [r7, #28]
 80068fa:	4401      	add	r1, r0
 80068fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006900:	4313      	orrs	r3, r2
 8006902:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d14b      	bne.n	80069a2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691e:	461a      	mov	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	791b      	ldrb	r3, [r3, #4]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d128      	bne.n	8006980 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d110      	bne.n	8006960 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006958:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e00f      	b.n	8006980 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800697e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	0151      	lsls	r1, r2, #5
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	440a      	add	r2, r1
 8006996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800699a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e166      	b.n	8006c70 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	0151      	lsls	r1, r2, #5
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	440a      	add	r2, r1
 80069b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069bc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	791b      	ldrb	r3, [r3, #4]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d015      	beq.n	80069f6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 814e 	beq.w	8006c70 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	69f9      	ldr	r1, [r7, #28]
 80069ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f0:	4313      	orrs	r3, r2
 80069f2:	634b      	str	r3, [r1, #52]	@ 0x34
 80069f4:	e13c      	b.n	8006c70 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d110      	bne.n	8006a28 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	0151      	lsls	r1, r2, #5
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	440a      	add	r2, r1
 8006a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e00f      	b.n	8006a48 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a46:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	68d9      	ldr	r1, [r3, #12]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	781a      	ldrb	r2, [r3, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	b298      	uxth	r0, r3
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f9b9 	bl	8006dd4 <USB_WritePacket>
 8006a62:	e105      	b.n	8006c70 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a7e:	0cdb      	lsrs	r3, r3, #19
 8006a80:	04db      	lsls	r3, r3, #19
 8006a82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	0151      	lsls	r1, r2, #5
 8006a96:	69fa      	ldr	r2, [r7, #28]
 8006a98:	440a      	add	r2, r1
 8006a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006aa2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006aa6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d132      	bne.n	8006b14 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d003      	beq.n	8006abe <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006adc:	69b9      	ldr	r1, [r7, #24]
 8006ade:	0148      	lsls	r0, r1, #5
 8006ae0:	69f9      	ldr	r1, [r7, #28]
 8006ae2:	4401      	add	r1, r0
 8006ae4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b0a:	6113      	str	r3, [r2, #16]
 8006b0c:	e062      	b.n	8006bd4 <USB_EPStartXfer+0x490>
 8006b0e:	bf00      	nop
 8006b10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d123      	bne.n	8006b64 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	0148      	lsls	r0, r1, #5
 8006b36:	69f9      	ldr	r1, [r7, #28]
 8006b38:	4401      	add	r1, r0
 8006b3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b60:	6113      	str	r3, [r2, #16]
 8006b62:	e037      	b.n	8006bd4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	691a      	ldr	r2, [r3, #16]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b78:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	8afa      	ldrh	r2, [r7, #22]
 8006b80:	fb03 f202 	mul.w	r2, r3, r2
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	8afb      	ldrh	r3, [r7, #22]
 8006b98:	04d9      	lsls	r1, r3, #19
 8006b9a:	4b38      	ldr	r3, [pc, #224]	@ (8006c7c <USB_EPStartXfer+0x538>)
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	69b9      	ldr	r1, [r7, #24]
 8006ba0:	0148      	lsls	r0, r1, #5
 8006ba2:	69f9      	ldr	r1, [r7, #28]
 8006ba4:	4401      	add	r1, r0
 8006ba6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006baa:	4313      	orrs	r3, r2
 8006bac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	0148      	lsls	r0, r1, #5
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	4401      	add	r1, r0
 8006bcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10d      	bne.n	8006bf6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d009      	beq.n	8006bf6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	68d9      	ldr	r1, [r3, #12]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d128      	bne.n	8006c50 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d110      	bne.n	8006c30 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e00f      	b.n	8006c50 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3720      	adds	r7, #32
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	1ff80000 	.word	0x1ff80000

08006c80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d14a      	bne.n	8006d34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cb6:	f040 8086 	bne.w	8006dc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	7812      	ldrb	r2, [r2, #0]
 8006cce:	0151      	lsls	r1, r2, #5
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	440a      	add	r2, r1
 8006cd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cdc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	0151      	lsls	r1, r2, #5
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	440a      	add	r2, r1
 8006cf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d902      	bls.n	8006d18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
          break;
 8006d16:	e056      	b.n	8006dc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d30:	d0e7      	beq.n	8006d02 <USB_EPStopXfer+0x82>
 8006d32:	e048      	b.n	8006dc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d4c:	d13b      	bne.n	8006dc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	7812      	ldrb	r2, [r2, #0]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d902      	bls.n	8006dac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
          break;
 8006daa:	e00c      	b.n	8006dc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dc4:	d0e7      	beq.n	8006d96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	@ 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	4611      	mov	r1, r2
 8006de0:	461a      	mov	r2, r3
 8006de2:	460b      	mov	r3, r1
 8006de4:	71fb      	strb	r3, [r7, #7]
 8006de6:	4613      	mov	r3, r2
 8006de8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006df2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d123      	bne.n	8006e42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dfa:	88bb      	ldrh	r3, [r7, #4]
 8006dfc:	3303      	adds	r3, #3
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e02:	2300      	movs	r3, #0
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	e018      	b.n	8006e3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	031a      	lsls	r2, r3, #12
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e14:	461a      	mov	r2, r3
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3301      	adds	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d3e2      	bcc.n	8006e08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3724      	adds	r7, #36	@ 0x24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b08b      	sub	sp, #44	@ 0x2c
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e6e:	88fb      	ldrh	r3, [r7, #6]
 8006e70:	f003 0303 	and.w	r3, r3, #3
 8006e74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e76:	2300      	movs	r3, #0
 8006e78:	623b      	str	r3, [r7, #32]
 8006e7a:	e014      	b.n	8006ea6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	3301      	adds	r3, #1
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	3301      	adds	r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d3e6      	bcc.n	8006e7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006eae:	8bfb      	ldrh	r3, [r7, #30]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01e      	beq.n	8006ef2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f107 0310 	add.w	r3, r7, #16
 8006ec4:	6812      	ldr	r2, [r2, #0]
 8006ec6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	3301      	adds	r3, #1
 8006ede:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ee6:	8bfb      	ldrh	r3, [r7, #30]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006eec:	8bfb      	ldrh	r3, [r7, #30]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1ea      	bne.n	8006ec8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	372c      	adds	r7, #44	@ 0x2c
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d12c      	bne.n	8006f76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	db12      	blt.n	8006f54 <USB_EPSetStall+0x54>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00f      	beq.n	8006f54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f6e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e02b      	b.n	8006fce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	db12      	blt.n	8006fae <USB_EPSetStall+0xae>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00f      	beq.n	8006fae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fa8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	015a      	lsls	r2, r3, #5
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	0151      	lsls	r1, r2, #5
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	440a      	add	r2, r1
 8006fc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3714      	adds	r7, #20
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	785b      	ldrb	r3, [r3, #1]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d128      	bne.n	800704a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007012:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007016:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	791b      	ldrb	r3, [r3, #4]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d003      	beq.n	8007028 <USB_EPClearStall+0x4c>
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	2b02      	cmp	r3, #2
 8007026:	d138      	bne.n	800709a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007046:	6013      	str	r3, [r2, #0]
 8007048:	e027      	b.n	800709a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007064:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007068:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	791b      	ldrb	r3, [r3, #4]
 800706e:	2b03      	cmp	r3, #3
 8007070:	d003      	beq.n	800707a <USB_EPClearStall+0x9e>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	791b      	ldrb	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d10f      	bne.n	800709a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	0151      	lsls	r1, r2, #5
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	440a      	add	r2, r1
 8007090:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007098:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80070ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80070dc:	68f9      	ldr	r1, [r7, #12]
 80070de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e2:	4313      	orrs	r3, r2
 80070e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800710e:	f023 0303 	bic.w	r3, r3, #3
 8007112:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007122:	f023 0302 	bic.w	r3, r3, #2
 8007126:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007150:	f023 0303 	bic.w	r3, r3, #3
 8007154:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007164:	f043 0302 	orr.w	r3, r3, #2
 8007168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007190:	68fb      	ldr	r3, [r7, #12]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	0c1b      	lsrs	r3, r3, #16
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b085      	sub	sp, #20
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	4013      	ands	r3, r2
 80071f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	b29b      	uxth	r3, r3
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007206:	b480      	push	{r7}
 8007208:	b085      	sub	sp, #20
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	460b      	mov	r3, r1
 8007210:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4013      	ands	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007234:	68bb      	ldr	r3, [r7, #8]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007242:	b480      	push	{r7}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	460b      	mov	r3, r1
 800724c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007264:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	fa22 f303 	lsr.w	r3, r2, r3
 8007272:	01db      	lsls	r3, r3, #7
 8007274:	b2db      	uxtb	r3, r3
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4013      	ands	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007290:	68bb      	ldr	r3, [r7, #8]
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0301 	and.w	r3, r3, #1
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b085      	sub	sp, #20
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072d8:	f023 0307 	bic.w	r3, r3, #7
 80072dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	460b      	mov	r3, r1
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	333c      	adds	r3, #60	@ 0x3c
 8007316:	3304      	adds	r3, #4
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4a26      	ldr	r2, [pc, #152]	@ (80073b8 <USB_EP0_OutStart+0xb8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d90a      	bls.n	800733a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007334:	d101      	bne.n	800733a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e037      	b.n	80073aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007340:	461a      	mov	r2, r3
 8007342:	2300      	movs	r3, #0
 8007344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007358:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007368:	f043 0318 	orr.w	r3, r3, #24
 800736c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800737c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007380:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007382:	7afb      	ldrb	r3, [r7, #11]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10f      	bne.n	80073a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80073a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	4f54300a 	.word	0x4f54300a

080073bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073d4:	d901      	bls.n	80073da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e01b      	b.n	8007412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	daf2      	bge.n	80073c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f043 0201 	orr.w	r2, r3, #1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073fe:	d901      	bls.n	8007404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007400:	2303      	movs	r3, #3
 8007402:	e006      	b.n	8007412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b01      	cmp	r3, #1
 800740e:	d0f0      	beq.n	80073f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800742c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007430:	f004 fe9c 	bl	800c16c <USBD_static_malloc>
 8007434:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	32b0      	adds	r2, #176	@ 0xb0
 8007446:	2100      	movs	r1, #0
 8007448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800744c:	2302      	movs	r3, #2
 800744e:	e0d4      	b.n	80075fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007450:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007454:	2100      	movs	r1, #0
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f005 ff5c 	bl	800d314 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	32b0      	adds	r2, #176	@ 0xb0
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	32b0      	adds	r2, #176	@ 0xb0
 8007476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	7c1b      	ldrb	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d138      	bne.n	80074fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007488:	4b5e      	ldr	r3, [pc, #376]	@ (8007604 <USBD_CDC_Init+0x1e4>)
 800748a:	7819      	ldrb	r1, [r3, #0]
 800748c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007490:	2202      	movs	r2, #2
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f004 fd47 	bl	800bf26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007498:	4b5a      	ldr	r3, [pc, #360]	@ (8007604 <USBD_CDC_Init+0x1e4>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f003 020f 	and.w	r2, r3, #15
 80074a0:	6879      	ldr	r1, [r7, #4]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	440b      	add	r3, r1
 80074ac:	3324      	adds	r3, #36	@ 0x24
 80074ae:	2201      	movs	r2, #1
 80074b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074b2:	4b55      	ldr	r3, [pc, #340]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074ba:	2202      	movs	r2, #2
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f004 fd32 	bl	800bf26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074c2:	4b51      	ldr	r3, [pc, #324]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 020f 	and.w	r2, r3, #15
 80074ca:	6879      	ldr	r1, [r7, #4]
 80074cc:	4613      	mov	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	440b      	add	r3, r1
 80074d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80074da:	2201      	movs	r2, #1
 80074dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074de:	4b4b      	ldr	r3, [pc, #300]	@ (800760c <USBD_CDC_Init+0x1ec>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	3326      	adds	r3, #38	@ 0x26
 80074f4:	2210      	movs	r2, #16
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e035      	b.n	8007566 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074fa:	4b42      	ldr	r3, [pc, #264]	@ (8007604 <USBD_CDC_Init+0x1e4>)
 80074fc:	7819      	ldrb	r1, [r3, #0]
 80074fe:	2340      	movs	r3, #64	@ 0x40
 8007500:	2202      	movs	r2, #2
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f004 fd0f 	bl	800bf26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007508:	4b3e      	ldr	r3, [pc, #248]	@ (8007604 <USBD_CDC_Init+0x1e4>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	f003 020f 	and.w	r2, r3, #15
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	3324      	adds	r3, #36	@ 0x24
 800751e:	2201      	movs	r2, #1
 8007520:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007522:	4b39      	ldr	r3, [pc, #228]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 8007524:	7819      	ldrb	r1, [r3, #0]
 8007526:	2340      	movs	r3, #64	@ 0x40
 8007528:	2202      	movs	r2, #2
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f004 fcfb 	bl	800bf26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007530:	4b35      	ldr	r3, [pc, #212]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007548:	2201      	movs	r2, #1
 800754a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800754c:	4b2f      	ldr	r3, [pc, #188]	@ (800760c <USBD_CDC_Init+0x1ec>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	3326      	adds	r3, #38	@ 0x26
 8007562:	2210      	movs	r2, #16
 8007564:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007566:	4b29      	ldr	r3, [pc, #164]	@ (800760c <USBD_CDC_Init+0x1ec>)
 8007568:	7819      	ldrb	r1, [r3, #0]
 800756a:	2308      	movs	r3, #8
 800756c:	2203      	movs	r2, #3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f004 fcd9 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007574:	4b25      	ldr	r3, [pc, #148]	@ (800760c <USBD_CDC_Init+0x1ec>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 020f 	and.w	r2, r3, #15
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	440b      	add	r3, r1
 8007588:	3324      	adds	r3, #36	@ 0x24
 800758a:	2201      	movs	r2, #1
 800758c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	33b0      	adds	r3, #176	@ 0xb0
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d101      	bne.n	80075c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075c4:	2302      	movs	r3, #2
 80075c6:	e018      	b.n	80075fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	7c1b      	ldrb	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 80075d2:	7819      	ldrb	r1, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f004 fd90 	bl	800c104 <USBD_LL_PrepareReceive>
 80075e4:	e008      	b.n	80075f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075e6:	4b08      	ldr	r3, [pc, #32]	@ (8007608 <USBD_CDC_Init+0x1e8>)
 80075e8:	7819      	ldrb	r1, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075f0:	2340      	movs	r3, #64	@ 0x40
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f004 fd86 	bl	800c104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200000a3 	.word	0x200000a3
 8007608:	200000a4 	.word	0x200000a4
 800760c:	200000a5 	.word	0x200000a5

08007610 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800761c:	4b3a      	ldr	r3, [pc, #232]	@ (8007708 <USBD_CDC_DeInit+0xf8>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f004 fca5 	bl	800bf72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007628:	4b37      	ldr	r3, [pc, #220]	@ (8007708 <USBD_CDC_DeInit+0xf8>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	3324      	adds	r3, #36	@ 0x24
 800763e:	2200      	movs	r2, #0
 8007640:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007642:	4b32      	ldr	r3, [pc, #200]	@ (800770c <USBD_CDC_DeInit+0xfc>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f004 fc92 	bl	800bf72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800764e:	4b2f      	ldr	r3, [pc, #188]	@ (800770c <USBD_CDC_DeInit+0xfc>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 020f 	and.w	r2, r3, #15
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007666:	2200      	movs	r2, #0
 8007668:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800766a:	4b29      	ldr	r3, [pc, #164]	@ (8007710 <USBD_CDC_DeInit+0x100>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f004 fc7e 	bl	800bf72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007676:	4b26      	ldr	r3, [pc, #152]	@ (8007710 <USBD_CDC_DeInit+0x100>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f003 020f 	and.w	r2, r3, #15
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	3324      	adds	r3, #36	@ 0x24
 800768c:	2200      	movs	r2, #0
 800768e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007690:	4b1f      	ldr	r3, [pc, #124]	@ (8007710 <USBD_CDC_DeInit+0x100>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	3326      	adds	r3, #38	@ 0x26
 80076a6:	2200      	movs	r2, #0
 80076a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	32b0      	adds	r2, #176	@ 0xb0
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01f      	beq.n	80076fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	33b0      	adds	r3, #176	@ 0xb0
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	4413      	add	r3, r2
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	32b0      	adds	r2, #176	@ 0xb0
 80076da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076de:	4618      	mov	r0, r3
 80076e0:	f004 fd52 	bl	800c188 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	32b0      	adds	r2, #176	@ 0xb0
 80076ee:	2100      	movs	r1, #0
 80076f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	200000a3 	.word	0x200000a3
 800770c:	200000a4 	.word	0x200000a4
 8007710:	200000a5 	.word	0x200000a5

08007714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	32b0      	adds	r2, #176	@ 0xb0
 8007728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007740:	2303      	movs	r3, #3
 8007742:	e0bf      	b.n	80078c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800774c:	2b00      	cmp	r3, #0
 800774e:	d050      	beq.n	80077f2 <USBD_CDC_Setup+0xde>
 8007750:	2b20      	cmp	r3, #32
 8007752:	f040 80af 	bne.w	80078b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	88db      	ldrh	r3, [r3, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03a      	beq.n	80077d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b25b      	sxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	da1b      	bge.n	80077a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	33b0      	adds	r3, #176	@ 0xb0
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800777e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	88d2      	ldrh	r2, [r2, #6]
 8007784:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	88db      	ldrh	r3, [r3, #6]
 800778a:	2b07      	cmp	r3, #7
 800778c:	bf28      	it	cs
 800778e:	2307      	movcs	r3, #7
 8007790:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	89fa      	ldrh	r2, [r7, #14]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f001 fd53 	bl	8009244 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800779e:	e090      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785a      	ldrb	r2, [r3, #1]
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	88db      	ldrh	r3, [r3, #6]
 80077ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80077b0:	d803      	bhi.n	80077ba <USBD_CDC_Setup+0xa6>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	e000      	b.n	80077bc <USBD_CDC_Setup+0xa8>
 80077ba:	2240      	movs	r2, #64	@ 0x40
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077c2:	6939      	ldr	r1, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80077ca:	461a      	mov	r2, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 fd65 	bl	800929c <USBD_CtlPrepareRx>
      break;
 80077d2:	e076      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	33b0      	adds	r3, #176	@ 0xb0
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	683a      	ldr	r2, [r7, #0]
 80077e8:	7850      	ldrb	r0, [r2, #1]
 80077ea:	2200      	movs	r2, #0
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	4798      	blx	r3
      break;
 80077f0:	e067      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	2b0b      	cmp	r3, #11
 80077f8:	d851      	bhi.n	800789e <USBD_CDC_Setup+0x18a>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <USBD_CDC_Setup+0xec>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007831 	.word	0x08007831
 8007804:	080078ad 	.word	0x080078ad
 8007808:	0800789f 	.word	0x0800789f
 800780c:	0800789f 	.word	0x0800789f
 8007810:	0800789f 	.word	0x0800789f
 8007814:	0800789f 	.word	0x0800789f
 8007818:	0800789f 	.word	0x0800789f
 800781c:	0800789f 	.word	0x0800789f
 8007820:	0800789f 	.word	0x0800789f
 8007824:	0800789f 	.word	0x0800789f
 8007828:	0800785b 	.word	0x0800785b
 800782c:	08007885 	.word	0x08007885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d107      	bne.n	800784c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800783c:	f107 030a 	add.w	r3, r7, #10
 8007840:	2202      	movs	r2, #2
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fcfd 	bl	8009244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800784a:	e032      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 fc7b 	bl	800914a <USBD_CtlError>
            ret = USBD_FAIL;
 8007854:	2303      	movs	r3, #3
 8007856:	75fb      	strb	r3, [r7, #23]
          break;
 8007858:	e02b      	b.n	80078b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b03      	cmp	r3, #3
 8007864:	d107      	bne.n	8007876 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007866:	f107 030d 	add.w	r3, r7, #13
 800786a:	2201      	movs	r2, #1
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fce8 	bl	8009244 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007874:	e01d      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 fc66 	bl	800914a <USBD_CtlError>
            ret = USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	75fb      	strb	r3, [r7, #23]
          break;
 8007882:	e016      	b.n	80078b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b03      	cmp	r3, #3
 800788e:	d00f      	beq.n	80078b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fc59 	bl	800914a <USBD_CtlError>
            ret = USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800789c:	e008      	b.n	80078b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fc52 	bl	800914a <USBD_CtlError>
          ret = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	75fb      	strb	r3, [r7, #23]
          break;
 80078aa:	e002      	b.n	80078b2 <USBD_CDC_Setup+0x19e>
          break;
 80078ac:	bf00      	nop
 80078ae:	e008      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>
          break;
 80078b0:	bf00      	nop
      }
      break;
 80078b2:	e006      	b.n	80078c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f001 fc47 	bl	800914a <USBD_CtlError>
      ret = USBD_FAIL;
 80078bc:	2303      	movs	r3, #3
 80078be:	75fb      	strb	r3, [r7, #23]
      break;
 80078c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32b0      	adds	r2, #176	@ 0xb0
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e065      	b.n	80079c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	32b0      	adds	r2, #176	@ 0xb0
 8007900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f003 020f 	and.w	r2, r3, #15
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	3318      	adds	r3, #24
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d02f      	beq.n	8007980 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	f003 020f 	and.w	r2, r3, #15
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	3318      	adds	r3, #24
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	f003 010f 	and.w	r1, r3, #15
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	460b      	mov	r3, r1
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4403      	add	r3, r0
 8007948:	331c      	adds	r3, #28
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007956:	2b00      	cmp	r3, #0
 8007958:	d112      	bne.n	8007980 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	3318      	adds	r3, #24
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007972:	78f9      	ldrb	r1, [r7, #3]
 8007974:	2300      	movs	r3, #0
 8007976:	2200      	movs	r2, #0
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f004 fba2 	bl	800c0c2 <USBD_LL_Transmit>
 800797e:	e01f      	b.n	80079c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	33b0      	adds	r3, #176	@ 0xb0
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d010      	beq.n	80079c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	33b0      	adds	r3, #176	@ 0xb0
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80079bc:	78fa      	ldrb	r2, [r7, #3]
 80079be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	460b      	mov	r3, r1
 80079d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	32b0      	adds	r2, #176	@ 0xb0
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	32b0      	adds	r2, #176	@ 0xb0
 80079f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e01a      	b.n	8007a32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	4619      	mov	r1, r3
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f004 fba0 	bl	800c146 <USBD_LL_GetRxDataSize>
 8007a06:	4602      	mov	r2, r0
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	33b0      	adds	r3, #176	@ 0xb0
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	32b0      	adds	r2, #176	@ 0xb0
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e024      	b.n	8007aa6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	33b0      	adds	r3, #176	@ 0xb0
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4413      	add	r3, r2
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d019      	beq.n	8007aa4 <USBD_CDC_EP0_RxReady+0x6a>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a76:	2bff      	cmp	r3, #255	@ 0xff
 8007a78:	d014      	beq.n	8007aa4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	33b0      	adds	r3, #176	@ 0xb0
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a9a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	22ff      	movs	r2, #255	@ 0xff
 8007aa0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
	...

08007ab0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab8:	2182      	movs	r1, #130	@ 0x82
 8007aba:	4818      	ldr	r0, [pc, #96]	@ (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007abc:	f000 fd0f 	bl	80084de <USBD_GetEpDesc>
 8007ac0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ac2:	2101      	movs	r1, #1
 8007ac4:	4815      	ldr	r0, [pc, #84]	@ (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ac6:	f000 fd0a 	bl	80084de <USBD_GetEpDesc>
 8007aca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007acc:	2181      	movs	r1, #129	@ 0x81
 8007ace:	4813      	ldr	r0, [pc, #76]	@ (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ad0:	f000 fd05 	bl	80084de <USBD_GetEpDesc>
 8007ad4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007af0:	711a      	strb	r2, [r3, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d006      	beq.n	8007b0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b04:	711a      	strb	r2, [r3, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2243      	movs	r2, #67	@ 0x43
 8007b0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b10:	4b02      	ldr	r3, [pc, #8]	@ (8007b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000060 	.word	0x20000060

08007b20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b28:	2182      	movs	r1, #130	@ 0x82
 8007b2a:	4818      	ldr	r0, [pc, #96]	@ (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b2c:	f000 fcd7 	bl	80084de <USBD_GetEpDesc>
 8007b30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b32:	2101      	movs	r1, #1
 8007b34:	4815      	ldr	r0, [pc, #84]	@ (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b36:	f000 fcd2 	bl	80084de <USBD_GetEpDesc>
 8007b3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b3c:	2181      	movs	r1, #129	@ 0x81
 8007b3e:	4813      	ldr	r0, [pc, #76]	@ (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b40:	f000 fccd 	bl	80084de <USBD_GetEpDesc>
 8007b44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d006      	beq.n	8007b66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	711a      	strb	r2, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f042 0202 	orr.w	r2, r2, #2
 8007b64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d006      	beq.n	8007b7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f042 0202 	orr.w	r2, r2, #2
 8007b78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2243      	movs	r2, #67	@ 0x43
 8007b7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b80:	4b02      	ldr	r3, [pc, #8]	@ (8007b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000060 	.word	0x20000060

08007b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b98:	2182      	movs	r1, #130	@ 0x82
 8007b9a:	4818      	ldr	r0, [pc, #96]	@ (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b9c:	f000 fc9f 	bl	80084de <USBD_GetEpDesc>
 8007ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	4815      	ldr	r0, [pc, #84]	@ (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ba6:	f000 fc9a 	bl	80084de <USBD_GetEpDesc>
 8007baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bac:	2181      	movs	r1, #129	@ 0x81
 8007bae:	4813      	ldr	r0, [pc, #76]	@ (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bb0:	f000 fc95 	bl	80084de <USBD_GetEpDesc>
 8007bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d006      	beq.n	8007bd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bd0:	711a      	strb	r2, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be4:	711a      	strb	r2, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2243      	movs	r2, #67	@ 0x43
 8007bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007bf0:	4b02      	ldr	r3, [pc, #8]	@ (8007bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000060 	.word	0x20000060

08007c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	220a      	movs	r2, #10
 8007c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c0e:	4b03      	ldr	r3, [pc, #12]	@ (8007c1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	2000001c 	.word	0x2000001c

08007c20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e009      	b.n	8007c48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	33b0      	adds	r3, #176	@ 0xb0
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	32b0      	adds	r2, #176	@ 0xb0
 8007c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e008      	b.n	8007c8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68ba      	ldr	r2, [r7, #8]
 8007c7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	@ 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e004      	b.n	8007cc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32b0      	adds	r2, #176	@ 0xb0
 8007ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32b0      	adds	r2, #176	@ 0xb0
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e018      	b.n	8007d34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7c1b      	ldrb	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10a      	bne.n	8007d20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8007d3c <USBD_CDC_ReceivePacket+0x68>)
 8007d0c:	7819      	ldrb	r1, [r3, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f004 f9f3 	bl	800c104 <USBD_LL_PrepareReceive>
 8007d1e:	e008      	b.n	8007d32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d20:	4b06      	ldr	r3, [pc, #24]	@ (8007d3c <USBD_CDC_ReceivePacket+0x68>)
 8007d22:	7819      	ldrb	r1, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007d2a:	2340      	movs	r3, #64	@ 0x40
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f004 f9e9 	bl	800c104 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200000a4 	.word	0x200000a4

08007d40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e01f      	b.n	8007d98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	79fa      	ldrb	r2, [r7, #7]
 8007d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f004 f863 	bl	800be58 <USBD_LL_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007daa:	2300      	movs	r3, #0
 8007dac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e025      	b.n	8007e04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	32ae      	adds	r2, #174	@ 0xae
 8007dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32ae      	adds	r2, #174	@ 0xae
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	f107 020e 	add.w	r2, r7, #14
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
 8007dec:	4602      	mov	r2, r0
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f004 f86b 	bl	800bef0 <USBD_LL_Start>
 8007e1a:	4603      	mov	r3, r0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	78fa      	ldrb	r2, [r7, #3]
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f001 f90c 	bl	80090d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007ecc:	461a      	mov	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007eda:	f003 031f 	and.w	r3, r3, #31
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d01a      	beq.n	8007f18 <USBD_LL_SetupStage+0x72>
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d822      	bhi.n	8007f2c <USBD_LL_SetupStage+0x86>
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <USBD_LL_SetupStage+0x4a>
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d00a      	beq.n	8007f04 <USBD_LL_SetupStage+0x5e>
 8007eee:	e01d      	b.n	8007f2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb63 	bl	80085c4 <USBD_StdDevReq>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
      break;
 8007f02:	e020      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 fbcb 	bl	80086a8 <USBD_StdItfReq>
 8007f12:	4603      	mov	r3, r0
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e016      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fc2d 	bl	8008780 <USBD_StdEPReq>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2a:	e00c      	b.n	8007f46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f004 f838 	bl	800bfb0 <USBD_LL_StallEP>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
      break;
 8007f44:	bf00      	nop
  }

  return ret;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d16e      	bne.n	8008046 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	f040 8098 	bne.w	80080ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d913      	bls.n	8007fb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	68da      	ldr	r2, [r3, #12]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	bf28      	it	cs
 8007fa2:	4613      	movcs	r3, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f001 f994 	bl	80092d6 <USBD_CtlContinueRx>
 8007fae:	e07d      	b.n	80080ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007fb6:	f003 031f 	and.w	r3, r3, #31
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d014      	beq.n	8007fe8 <USBD_LL_DataOutStage+0x98>
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d81d      	bhi.n	8007ffe <USBD_LL_DataOutStage+0xae>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <USBD_LL_DataOutStage+0x7c>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d003      	beq.n	8007fd2 <USBD_LL_DataOutStage+0x82>
 8007fca:	e018      	b.n	8007ffe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75bb      	strb	r3, [r7, #22]
            break;
 8007fd0:	e018      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fa64 	bl	80084aa <USBD_CoreFindIF>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8007fe6:	e00d      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fa66 	bl	80084c4 <USBD_CoreFindEP>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8007ffc:	e002      	b.n	8008004 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75bb      	strb	r3, [r7, #22]
            break;
 8008002:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008004:	7dbb      	ldrb	r3, [r7, #22]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d119      	bne.n	800803e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b03      	cmp	r3, #3
 8008014:	d113      	bne.n	800803e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008016:	7dba      	ldrb	r2, [r7, #22]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	32ae      	adds	r2, #174	@ 0xae
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008026:	7dba      	ldrb	r2, [r7, #22]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	32ae      	adds	r2, #174	@ 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 f95a 	bl	80092f8 <USBD_CtlSendStatus>
 8008044:	e032      	b.n	80080ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008046:	7afb      	ldrb	r3, [r7, #11]
 8008048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800804c:	b2db      	uxtb	r3, r3
 800804e:	4619      	mov	r1, r3
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fa37 	bl	80084c4 <USBD_CoreFindEP>
 8008056:	4603      	mov	r3, r0
 8008058:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800805a:	7dbb      	ldrb	r3, [r7, #22]
 800805c:	2bff      	cmp	r3, #255	@ 0xff
 800805e:	d025      	beq.n	80080ac <USBD_LL_DataOutStage+0x15c>
 8008060:	7dbb      	ldrb	r3, [r7, #22]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d122      	bne.n	80080ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800806c:	b2db      	uxtb	r3, r3
 800806e:	2b03      	cmp	r3, #3
 8008070:	d117      	bne.n	80080a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008072:	7dba      	ldrb	r2, [r7, #22]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	32ae      	adds	r2, #174	@ 0xae
 8008078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00f      	beq.n	80080a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008082:	7dba      	ldrb	r2, [r7, #22]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800808a:	7dba      	ldrb	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	32ae      	adds	r2, #174	@ 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	7afa      	ldrb	r2, [r7, #11]
 8008098:	4611      	mov	r1, r2
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	4798      	blx	r3
 800809e:	4603      	mov	r3, r0
 80080a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080a2:	7dfb      	ldrb	r3, [r7, #23]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	e000      	b.n	80080ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3718      	adds	r7, #24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	460b      	mov	r3, r1
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080c4:	7afb      	ldrb	r3, [r7, #11]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d16f      	bne.n	80081aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	3314      	adds	r3, #20
 80080ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d15a      	bne.n	8008190 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	689a      	ldr	r2, [r3, #8]
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d914      	bls.n	8008110 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	1ad2      	subs	r2, r2, r3
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	461a      	mov	r2, r3
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f001 f8bc 	bl	800927a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008102:	2300      	movs	r3, #0
 8008104:	2200      	movs	r2, #0
 8008106:	2100      	movs	r1, #0
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f003 fffb 	bl	800c104 <USBD_LL_PrepareReceive>
 800810e:	e03f      	b.n	8008190 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d11c      	bne.n	8008156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008124:	429a      	cmp	r2, r3
 8008126:	d316      	bcc.n	8008156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008132:	429a      	cmp	r2, r3
 8008134:	d20f      	bcs.n	8008156 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f001 f89d 	bl	800927a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008148:	2300      	movs	r3, #0
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f003 ffd8 	bl	800c104 <USBD_LL_PrepareReceive>
 8008154:	e01c      	b.n	8008190 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d10f      	bne.n	8008182 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008182:	2180      	movs	r1, #128	@ 0x80
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f003 ff13 	bl	800bfb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f001 f8c7 	bl	800931e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d03a      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f7ff fe42 	bl	8007e24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80081a8:	e032      	b.n	8008210 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 f985 	bl	80084c4 <USBD_CoreFindEP>
 80081ba:	4603      	mov	r3, r0
 80081bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2bff      	cmp	r3, #255	@ 0xff
 80081c2:	d025      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d122      	bne.n	8008210 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	2b03      	cmp	r3, #3
 80081d4:	d11c      	bne.n	8008210 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081d6:	7dfa      	ldrb	r2, [r7, #23]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	32ae      	adds	r2, #174	@ 0xae
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d014      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081e6:	7dfa      	ldrb	r2, [r7, #23]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	32ae      	adds	r2, #174	@ 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	7afa      	ldrb	r2, [r7, #11]
 80081fc:	4611      	mov	r1, r2
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	4798      	blx	r3
 8008202:	4603      	mov	r3, r0
 8008204:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008206:	7dbb      	ldrb	r3, [r7, #22]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	e000      	b.n	8008212 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3718      	adds	r7, #24
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d014      	beq.n	8008280 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00e      	beq.n	8008280 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6852      	ldr	r2, [r2, #4]
 800826e:	b2d2      	uxtb	r2, r2
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008280:	2340      	movs	r3, #64	@ 0x40
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f003 fe4d 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2240      	movs	r2, #64	@ 0x40
 8008298:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800829c:	2340      	movs	r3, #64	@ 0x40
 800829e:	2200      	movs	r2, #0
 80082a0:	2180      	movs	r1, #128	@ 0x80
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f003 fe3f 	bl	800bf26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2240      	movs	r2, #64	@ 0x40
 80082b2:	621a      	str	r2, [r3, #32]

  return ret;
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}

080082be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d006      	beq.n	8008300 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2204      	movs	r2, #4
 8008304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b04      	cmp	r3, #4
 8008328:	d106      	bne.n	8008338 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b03      	cmp	r3, #3
 8008358:	d110      	bne.n	800837c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b082      	sub	sp, #8
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	32ae      	adds	r2, #174	@ 0xae
 800839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	e01c      	b.n	80083e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d115      	bne.n	80083e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32ae      	adds	r2, #174	@ 0xae
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	32ae      	adds	r2, #174	@ 0xae
 80083d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	4611      	mov	r1, r2
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	460b      	mov	r3, r1
 80083f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	32ae      	adds	r2, #174	@ 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008408:	2303      	movs	r3, #3
 800840a:	e01c      	b.n	8008446 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b03      	cmp	r3, #3
 8008416:	d115      	bne.n	8008444 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	32ae      	adds	r2, #174	@ 0xae
 8008422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00b      	beq.n	8008444 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	@ 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	78fa      	ldrb	r2, [r7, #3]
 800843e:	4611      	mov	r1, r2
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00e      	beq.n	80084a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	6852      	ldr	r2, [r2, #4]
 800848e:	b2d2      	uxtb	r2, r2
 8008490:	4611      	mov	r1, r2
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	4798      	blx	r3
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b083      	sub	sp, #12
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	885b      	ldrh	r3, [r3, #2]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	7812      	ldrb	r2, [r2, #0]
 8008500:	4293      	cmp	r3, r2
 8008502:	d91f      	bls.n	8008544 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800850a:	e013      	b.n	8008534 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800850c:	f107 030a 	add.w	r3, r7, #10
 8008510:	4619      	mov	r1, r3
 8008512:	6978      	ldr	r0, [r7, #20]
 8008514:	f000 f81b 	bl	800854e <USBD_GetNextDesc>
 8008518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b05      	cmp	r3, #5
 8008520:	d108      	bne.n	8008534 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	789b      	ldrb	r3, [r3, #2]
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	429a      	cmp	r2, r3
 800852e:	d008      	beq.n	8008542 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	885b      	ldrh	r3, [r3, #2]
 8008538:	b29a      	uxth	r2, r3
 800853a:	897b      	ldrh	r3, [r7, #10]
 800853c:	429a      	cmp	r2, r3
 800853e:	d8e5      	bhi.n	800850c <USBD_GetEpDesc+0x2e>
 8008540:	e000      	b.n	8008544 <USBD_GetEpDesc+0x66>
          break;
 8008542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008544:	693b      	ldr	r3, [r7, #16]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800854e:	b480      	push	{r7}
 8008550:	b085      	sub	sp, #20
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	4413      	add	r3, r2
 8008566:	b29a      	uxth	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4413      	add	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008586:	b480      	push	{r7}
 8008588:	b087      	sub	sp, #28
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	3301      	adds	r3, #1
 800859c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085a4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80085a8:	021b      	lsls	r3, r3, #8
 80085aa:	b21a      	sxth	r2, r3
 80085ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	b21b      	sxth	r3, r3
 80085b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085b6:	89fb      	ldrh	r3, [r7, #14]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085da:	2b40      	cmp	r3, #64	@ 0x40
 80085dc:	d005      	beq.n	80085ea <USBD_StdDevReq+0x26>
 80085de:	2b40      	cmp	r3, #64	@ 0x40
 80085e0:	d857      	bhi.n	8008692 <USBD_StdDevReq+0xce>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00f      	beq.n	8008606 <USBD_StdDevReq+0x42>
 80085e6:	2b20      	cmp	r3, #32
 80085e8:	d153      	bne.n	8008692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	32ae      	adds	r2, #174	@ 0xae
 80085f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4798      	blx	r3
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]
      break;
 8008604:	e04a      	b.n	800869c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	785b      	ldrb	r3, [r3, #1]
 800860a:	2b09      	cmp	r3, #9
 800860c:	d83b      	bhi.n	8008686 <USBD_StdDevReq+0xc2>
 800860e:	a201      	add	r2, pc, #4	@ (adr r2, 8008614 <USBD_StdDevReq+0x50>)
 8008610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008614:	08008669 	.word	0x08008669
 8008618:	0800867d 	.word	0x0800867d
 800861c:	08008687 	.word	0x08008687
 8008620:	08008673 	.word	0x08008673
 8008624:	08008687 	.word	0x08008687
 8008628:	08008647 	.word	0x08008647
 800862c:	0800863d 	.word	0x0800863d
 8008630:	08008687 	.word	0x08008687
 8008634:	0800865f 	.word	0x0800865f
 8008638:	08008651 	.word	0x08008651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa3c 	bl	8008abc <USBD_GetDescriptor>
          break;
 8008644:	e024      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008646:	6839      	ldr	r1, [r7, #0]
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fba1 	bl	8008d90 <USBD_SetAddress>
          break;
 800864e:	e01f      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fbe0 	bl	8008e18 <USBD_SetConfig>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
          break;
 800865c:	e018      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc83 	bl	8008f6c <USBD_GetConfig>
          break;
 8008666:	e013      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 fcb4 	bl	8008fd8 <USBD_GetStatus>
          break;
 8008670:	e00e      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fce3 	bl	8009040 <USBD_SetFeature>
          break;
 800867a:	e009      	b.n	8008690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fd07 	bl	8009092 <USBD_ClrFeature>
          break;
 8008684:	e004      	b.n	8008690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008686:	6839      	ldr	r1, [r7, #0]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 fd5e 	bl	800914a <USBD_CtlError>
          break;
 800868e:	bf00      	nop
      }
      break;
 8008690:	e004      	b.n	800869c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fd58 	bl	800914a <USBD_CtlError>
      break;
 800869a:	bf00      	nop
  }

  return ret;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop

080086a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80086be:	2b40      	cmp	r3, #64	@ 0x40
 80086c0:	d005      	beq.n	80086ce <USBD_StdItfReq+0x26>
 80086c2:	2b40      	cmp	r3, #64	@ 0x40
 80086c4:	d852      	bhi.n	800876c <USBD_StdItfReq+0xc4>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d001      	beq.n	80086ce <USBD_StdItfReq+0x26>
 80086ca:	2b20      	cmp	r3, #32
 80086cc:	d14e      	bne.n	800876c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d840      	bhi.n	800875e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	889b      	ldrh	r3, [r3, #4]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d836      	bhi.n	8008754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	889b      	ldrh	r3, [r3, #4]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fedb 	bl	80084aa <USBD_CoreFindIF>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2bff      	cmp	r3, #255	@ 0xff
 80086fc:	d01d      	beq.n	800873a <USBD_StdItfReq+0x92>
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11a      	bne.n	800873a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008704:	7bba      	ldrb	r2, [r7, #14]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	32ae      	adds	r2, #174	@ 0xae
 800870a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00f      	beq.n	8008734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008714:	7bba      	ldrb	r2, [r7, #14]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800871c:	7bba      	ldrb	r2, [r7, #14]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	32ae      	adds	r2, #174	@ 0xae
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008732:	e004      	b.n	800873e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008738:	e001      	b.n	800873e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	88db      	ldrh	r3, [r3, #6]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d110      	bne.n	8008768 <USBD_StdItfReq+0xc0>
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10d      	bne.n	8008768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fdd3 	bl	80092f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008752:	e009      	b.n	8008768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fcf7 	bl	800914a <USBD_CtlError>
          break;
 800875c:	e004      	b.n	8008768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fcf2 	bl	800914a <USBD_CtlError>
          break;
 8008766:	e000      	b.n	800876a <USBD_StdItfReq+0xc2>
          break;
 8008768:	bf00      	nop
      }
      break;
 800876a:	e004      	b.n	8008776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fceb 	bl	800914a <USBD_CtlError>
      break;
 8008774:	bf00      	nop
  }

  return ret;
 8008776:	7bfb      	ldrb	r3, [r7, #15]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	889b      	ldrh	r3, [r3, #4]
 8008792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800879c:	2b40      	cmp	r3, #64	@ 0x40
 800879e:	d007      	beq.n	80087b0 <USBD_StdEPReq+0x30>
 80087a0:	2b40      	cmp	r3, #64	@ 0x40
 80087a2:	f200 817f 	bhi.w	8008aa4 <USBD_StdEPReq+0x324>
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d02a      	beq.n	8008800 <USBD_StdEPReq+0x80>
 80087aa:	2b20      	cmp	r3, #32
 80087ac:	f040 817a 	bne.w	8008aa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fe85 	bl	80084c4 <USBD_CoreFindEP>
 80087ba:	4603      	mov	r3, r0
 80087bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087be:	7b7b      	ldrb	r3, [r7, #13]
 80087c0:	2bff      	cmp	r3, #255	@ 0xff
 80087c2:	f000 8174 	beq.w	8008aae <USBD_StdEPReq+0x32e>
 80087c6:	7b7b      	ldrb	r3, [r7, #13]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f040 8170 	bne.w	8008aae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087ce:	7b7a      	ldrb	r2, [r7, #13]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087d6:	7b7a      	ldrb	r2, [r7, #13]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	32ae      	adds	r2, #174	@ 0xae
 80087dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8163 	beq.w	8008aae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087e8:	7b7a      	ldrb	r2, [r7, #13]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	32ae      	adds	r2, #174	@ 0xae
 80087ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087fe:	e156      	b.n	8008aae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	785b      	ldrb	r3, [r3, #1]
 8008804:	2b03      	cmp	r3, #3
 8008806:	d008      	beq.n	800881a <USBD_StdEPReq+0x9a>
 8008808:	2b03      	cmp	r3, #3
 800880a:	f300 8145 	bgt.w	8008a98 <USBD_StdEPReq+0x318>
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 809b 	beq.w	800894a <USBD_StdEPReq+0x1ca>
 8008814:	2b01      	cmp	r3, #1
 8008816:	d03c      	beq.n	8008892 <USBD_StdEPReq+0x112>
 8008818:	e13e      	b.n	8008a98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d002      	beq.n	800882c <USBD_StdEPReq+0xac>
 8008826:	2b03      	cmp	r3, #3
 8008828:	d016      	beq.n	8008858 <USBD_StdEPReq+0xd8>
 800882a:	e02c      	b.n	8008886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <USBD_StdEPReq+0xce>
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b80      	cmp	r3, #128	@ 0x80
 8008836:	d00a      	beq.n	800884e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008838:	7bbb      	ldrb	r3, [r7, #14]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f003 fbb7 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008842:	2180      	movs	r1, #128	@ 0x80
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f003 fbb3 	bl	800bfb0 <USBD_LL_StallEP>
 800884a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800884c:	e020      	b.n	8008890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fc7a 	bl	800914a <USBD_CtlError>
              break;
 8008856:	e01b      	b.n	8008890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10e      	bne.n	800887e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008860:	7bbb      	ldrb	r3, [r7, #14]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <USBD_StdEPReq+0xfe>
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b80      	cmp	r3, #128	@ 0x80
 800886a:	d008      	beq.n	800887e <USBD_StdEPReq+0xfe>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	88db      	ldrh	r3, [r3, #6]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d104      	bne.n	800887e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f003 fb99 	bl	800bfb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fd3a 	bl	80092f8 <USBD_CtlSendStatus>

              break;
 8008884:	e004      	b.n	8008890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fc5e 	bl	800914a <USBD_CtlError>
              break;
 800888e:	bf00      	nop
          }
          break;
 8008890:	e107      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b02      	cmp	r3, #2
 800889c:	d002      	beq.n	80088a4 <USBD_StdEPReq+0x124>
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d016      	beq.n	80088d0 <USBD_StdEPReq+0x150>
 80088a2:	e04b      	b.n	800893c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088a4:	7bbb      	ldrb	r3, [r7, #14]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <USBD_StdEPReq+0x146>
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b80      	cmp	r3, #128	@ 0x80
 80088ae:	d00a      	beq.n	80088c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f003 fb7b 	bl	800bfb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ba:	2180      	movs	r1, #128	@ 0x80
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f003 fb77 	bl	800bfb0 <USBD_LL_StallEP>
 80088c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088c4:	e040      	b.n	8008948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc3e 	bl	800914a <USBD_CtlError>
              break;
 80088ce:	e03b      	b.n	8008948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d136      	bne.n	8008946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d004      	beq.n	80088ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f003 fb81 	bl	800bfee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fd03 	bl	80092f8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fde4 	bl	80084c4 <USBD_CoreFindEP>
 80088fc:	4603      	mov	r3, r0
 80088fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008900:	7b7b      	ldrb	r3, [r7, #13]
 8008902:	2bff      	cmp	r3, #255	@ 0xff
 8008904:	d01f      	beq.n	8008946 <USBD_StdEPReq+0x1c6>
 8008906:	7b7b      	ldrb	r3, [r7, #13]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d11c      	bne.n	8008946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800890c:	7b7a      	ldrb	r2, [r7, #13]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008914:	7b7a      	ldrb	r2, [r7, #13]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32ae      	adds	r2, #174	@ 0xae
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d010      	beq.n	8008946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32ae      	adds	r2, #174	@ 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800893a:	e004      	b.n	8008946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800893c:	6839      	ldr	r1, [r7, #0]
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fc03 	bl	800914a <USBD_CtlError>
              break;
 8008944:	e000      	b.n	8008948 <USBD_StdEPReq+0x1c8>
              break;
 8008946:	bf00      	nop
          }
          break;
 8008948:	e0ab      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d002      	beq.n	800895c <USBD_StdEPReq+0x1dc>
 8008956:	2b03      	cmp	r3, #3
 8008958:	d032      	beq.n	80089c0 <USBD_StdEPReq+0x240>
 800895a:	e097      	b.n	8008a8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <USBD_StdEPReq+0x1f2>
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b80      	cmp	r3, #128	@ 0x80
 8008966:	d004      	beq.n	8008972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008968:	6839      	ldr	r1, [r7, #0]
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fbed 	bl	800914a <USBD_CtlError>
                break;
 8008970:	e091      	b.n	8008a96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008976:	2b00      	cmp	r3, #0
 8008978:	da0b      	bge.n	8008992 <USBD_StdEPReq+0x212>
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	3310      	adds	r3, #16
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	e00b      	b.n	80089aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008998:	4613      	mov	r3, r2
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	4413      	add	r3, r2
 80089a8:	3304      	adds	r3, #4
 80089aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2202      	movs	r2, #2
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fc43 	bl	8009244 <USBD_CtlSendData>
              break;
 80089be:	e06a      	b.n	8008a96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da11      	bge.n	80089ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3324      	adds	r3, #36	@ 0x24
 80089dc:	881b      	ldrh	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d117      	bne.n	8008a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 fbb0 	bl	800914a <USBD_CtlError>
                  break;
 80089ea:	e054      	b.n	8008a96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb9d 	bl	800914a <USBD_CtlError>
                  break;
 8008a10:	e041      	b.n	8008a96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da0b      	bge.n	8008a32 <USBD_StdEPReq+0x2b2>
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	e00b      	b.n	8008a4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	3304      	adds	r3, #4
 8008a4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <USBD_StdEPReq+0x2d8>
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b80      	cmp	r3, #128	@ 0x80
 8008a56:	d103      	bne.n	8008a60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	e00e      	b.n	8008a7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f003 fae1 	bl	800c02c <USBD_LL_IsStallEP>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e002      	b.n	8008a7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2202      	movs	r2, #2
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fbdd 	bl	8009244 <USBD_CtlSendData>
              break;
 8008a8a:	e004      	b.n	8008a96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb5b 	bl	800914a <USBD_CtlError>
              break;
 8008a94:	bf00      	nop
          }
          break;
 8008a96:	e004      	b.n	8008aa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 fb55 	bl	800914a <USBD_CtlError>
          break;
 8008aa0:	bf00      	nop
      }
      break;
 8008aa2:	e005      	b.n	8008ab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb4f 	bl	800914a <USBD_CtlError>
      break;
 8008aac:	e000      	b.n	8008ab0 <USBD_StdEPReq+0x330>
      break;
 8008aae:	bf00      	nop
  }

  return ret;
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3710      	adds	r7, #16
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	0a1b      	lsrs	r3, r3, #8
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	3b01      	subs	r3, #1
 8008adc:	2b06      	cmp	r3, #6
 8008ade:	f200 8128 	bhi.w	8008d32 <USBD_GetDescriptor+0x276>
 8008ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <USBD_GetDescriptor+0x2c>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b05 	.word	0x08008b05
 8008aec:	08008b1d 	.word	0x08008b1d
 8008af0:	08008b5d 	.word	0x08008b5d
 8008af4:	08008d33 	.word	0x08008d33
 8008af8:	08008d33 	.word	0x08008d33
 8008afc:	08008cd3 	.word	0x08008cd3
 8008b00:	08008cff 	.word	0x08008cff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	7c12      	ldrb	r2, [r2, #16]
 8008b10:	f107 0108 	add.w	r1, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
      break;
 8008b1a:	e112      	b.n	8008d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7c1b      	ldrb	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10d      	bne.n	8008b40 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b2c:	f107 0208 	add.w	r2, r7, #8
 8008b30:	4610      	mov	r0, r2
 8008b32:	4798      	blx	r3
 8008b34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b3e:	e100      	b.n	8008d42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	f107 0208 	add.w	r2, r7, #8
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4798      	blx	r3
 8008b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3301      	adds	r3, #1
 8008b56:	2202      	movs	r2, #2
 8008b58:	701a      	strb	r2, [r3, #0]
      break;
 8008b5a:	e0f2      	b.n	8008d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	885b      	ldrh	r3, [r3, #2]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b05      	cmp	r3, #5
 8008b64:	f200 80ac 	bhi.w	8008cc0 <USBD_GetDescriptor+0x204>
 8008b68:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <USBD_GetDescriptor+0xb4>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b89 	.word	0x08008b89
 8008b74:	08008bbd 	.word	0x08008bbd
 8008b78:	08008bf1 	.word	0x08008bf1
 8008b7c:	08008c25 	.word	0x08008c25
 8008b80:	08008c59 	.word	0x08008c59
 8008b84:	08008c8d 	.word	0x08008c8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7c12      	ldrb	r2, [r2, #16]
 8008ba0:	f107 0108 	add.w	r1, r7, #8
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3
 8008ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008baa:	e091      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 facb 	bl	800914a <USBD_CtlError>
            err++;
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bba:	e089      	b.n	8008cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00b      	beq.n	8008be0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	7c12      	ldrb	r2, [r2, #16]
 8008bd4:	f107 0108 	add.w	r1, r7, #8
 8008bd8:	4610      	mov	r0, r2
 8008bda:	4798      	blx	r3
 8008bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bde:	e077      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fab1 	bl	800914a <USBD_CtlError>
            err++;
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	3301      	adds	r3, #1
 8008bec:	72fb      	strb	r3, [r7, #11]
          break;
 8008bee:	e06f      	b.n	8008cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00b      	beq.n	8008c14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	7c12      	ldrb	r2, [r2, #16]
 8008c08:	f107 0108 	add.w	r1, r7, #8
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4798      	blx	r3
 8008c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c12:	e05d      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa97 	bl	800914a <USBD_CtlError>
            err++;
 8008c1c:	7afb      	ldrb	r3, [r7, #11]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	72fb      	strb	r3, [r7, #11]
          break;
 8008c22:	e055      	b.n	8008cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00b      	beq.n	8008c48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	7c12      	ldrb	r2, [r2, #16]
 8008c3c:	f107 0108 	add.w	r1, r7, #8
 8008c40:	4610      	mov	r0, r2
 8008c42:	4798      	blx	r3
 8008c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c46:	e043      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fa7d 	bl	800914a <USBD_CtlError>
            err++;
 8008c50:	7afb      	ldrb	r3, [r7, #11]
 8008c52:	3301      	adds	r3, #1
 8008c54:	72fb      	strb	r3, [r7, #11]
          break;
 8008c56:	e03b      	b.n	8008cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	7c12      	ldrb	r2, [r2, #16]
 8008c70:	f107 0108 	add.w	r1, r7, #8
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7a:	e029      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa63 	bl	800914a <USBD_CtlError>
            err++;
 8008c84:	7afb      	ldrb	r3, [r7, #11]
 8008c86:	3301      	adds	r3, #1
 8008c88:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8a:	e021      	b.n	8008cd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00b      	beq.n	8008cb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	7c12      	ldrb	r2, [r2, #16]
 8008ca4:	f107 0108 	add.w	r1, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cae:	e00f      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa49 	bl	800914a <USBD_CtlError>
            err++;
 8008cb8:	7afb      	ldrb	r3, [r7, #11]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cbe:	e007      	b.n	8008cd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa41 	bl	800914a <USBD_CtlError>
          err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008cce:	bf00      	nop
      }
      break;
 8008cd0:	e037      	b.n	8008d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	7c1b      	ldrb	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce2:	f107 0208 	add.w	r2, r7, #8
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4798      	blx	r3
 8008cea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cec:	e029      	b.n	8008d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fa2a 	bl	800914a <USBD_CtlError>
        err++;
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8008cfc:	e021      	b.n	8008d42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7c1b      	ldrb	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10d      	bne.n	8008d22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0e:	f107 0208 	add.w	r2, r7, #8
 8008d12:	4610      	mov	r0, r2
 8008d14:	4798      	blx	r3
 8008d16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	2207      	movs	r2, #7
 8008d1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d20:	e00f      	b.n	8008d42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa10 	bl	800914a <USBD_CtlError>
        err++;
 8008d2a:	7afb      	ldrb	r3, [r7, #11]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d30:	e007      	b.n	8008d42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa08 	bl	800914a <USBD_CtlError>
      err++;
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d40:	bf00      	nop
  }

  if (err != 0U)
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11e      	bne.n	8008d86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d016      	beq.n	8008d7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d50:	893b      	ldrh	r3, [r7, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00e      	beq.n	8008d74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	88da      	ldrh	r2, [r3, #6]
 8008d5a:	893b      	ldrh	r3, [r7, #8]
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	bf28      	it	cs
 8008d60:	4613      	movcs	r3, r2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d66:	893b      	ldrh	r3, [r7, #8]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	68f9      	ldr	r1, [r7, #12]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa69 	bl	8009244 <USBD_CtlSendData>
 8008d72:	e009      	b.n	8008d88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f9e7 	bl	800914a <USBD_CtlError>
 8008d7c:	e004      	b.n	8008d88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 faba 	bl	80092f8 <USBD_CtlSendStatus>
 8008d84:	e000      	b.n	8008d88 <USBD_GetDescriptor+0x2cc>
    return;
 8008d86:	bf00      	nop
  }
}
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop

08008d90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	889b      	ldrh	r3, [r3, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d131      	bne.n	8008e06 <USBD_SetAddress+0x76>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	88db      	ldrh	r3, [r3, #6]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d12d      	bne.n	8008e06 <USBD_SetAddress+0x76>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	885b      	ldrh	r3, [r3, #2]
 8008dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8008db0:	d829      	bhi.n	8008e06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	885b      	ldrh	r3, [r3, #2]
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d104      	bne.n	8008dd4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f9bc 	bl	800914a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd2:	e01d      	b.n	8008e10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7bfa      	ldrb	r2, [r7, #15]
 8008dd8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f003 f94f 	bl	800c084 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fa86 	bl	80092f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2202      	movs	r2, #2
 8008df6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dfa:	e009      	b.n	8008e10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e04:	e004      	b.n	8008e10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f99e 	bl	800914a <USBD_CtlError>
  }
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008e2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e30:	4b4d      	ldr	r3, [pc, #308]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d905      	bls.n	8008e44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f985 	bl	800914a <USBD_CtlError>
    return USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e08c      	b.n	8008f5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d002      	beq.n	8008e56 <USBD_SetConfig+0x3e>
 8008e50:	2b03      	cmp	r3, #3
 8008e52:	d029      	beq.n	8008ea8 <USBD_SetConfig+0x90>
 8008e54:	e075      	b.n	8008f42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e56:	4b44      	ldr	r3, [pc, #272]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d020      	beq.n	8008ea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e5e:	4b42      	ldr	r3, [pc, #264]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e68:	4b3f      	ldr	r3, [pc, #252]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7fe ffe3 	bl	8007e3a <USBD_SetClassConfig>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d008      	beq.n	8008e90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f962 	bl	800914a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2202      	movs	r2, #2
 8008e8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e8e:	e065      	b.n	8008f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fa31 	bl	80092f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e9e:	e05d      	b.n	8008f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa29 	bl	80092f8 <USBD_CtlSendStatus>
      break;
 8008ea6:	e059      	b.n	8008f5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d112      	bne.n	8008ed6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ec2:	4b29      	ldr	r3, [pc, #164]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7fe ffd2 	bl	8007e72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa12 	bl	80092f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ed4:	e042      	b.n	8008f5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ed6:	4b24      	ldr	r3, [pc, #144]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d02a      	beq.n	8008f3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7fe ffc0 	bl	8007e72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008efc:	4b1a      	ldr	r3, [pc, #104]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fe ff99 	bl	8007e3a <USBD_SetClassConfig>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00f      	beq.n	8008f32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f918 	bl	800914a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7fe ffa5 	bl	8007e72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008f30:	e014      	b.n	8008f5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f9e0 	bl	80092f8 <USBD_CtlSendStatus>
      break;
 8008f38:	e010      	b.n	8008f5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 f9dc 	bl	80092f8 <USBD_CtlSendStatus>
      break;
 8008f40:	e00c      	b.n	8008f5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f900 	bl	800914a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f4a:	4b07      	ldr	r3, [pc, #28]	@ (8008f68 <USBD_SetConfig+0x150>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fe ff8e 	bl	8007e72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f56:	2303      	movs	r3, #3
 8008f58:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5a:	bf00      	nop
  }

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200004d4 	.word	0x200004d4

08008f6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	88db      	ldrh	r3, [r3, #6]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d004      	beq.n	8008f88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8e2 	bl	800914a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f86:	e023      	b.n	8008fd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	dc02      	bgt.n	8008f9a <USBD_GetConfig+0x2e>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	dc03      	bgt.n	8008fa0 <USBD_GetConfig+0x34>
 8008f98:	e015      	b.n	8008fc6 <USBD_GetConfig+0x5a>
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d00b      	beq.n	8008fb6 <USBD_GetConfig+0x4a>
 8008f9e:	e012      	b.n	8008fc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3308      	adds	r3, #8
 8008faa:	2201      	movs	r2, #1
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f948 	bl	8009244 <USBD_CtlSendData>
        break;
 8008fb4:	e00c      	b.n	8008fd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f940 	bl	8009244 <USBD_CtlSendData>
        break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f8be 	bl	800914a <USBD_CtlError>
        break;
 8008fce:	bf00      	nop
}
 8008fd0:	bf00      	nop
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d81e      	bhi.n	800902e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	88db      	ldrh	r3, [r3, #6]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d004      	beq.n	8009002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8a5 	bl	800914a <USBD_CtlError>
        break;
 8009000:	e01a      	b.n	8009038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f043 0202 	orr.w	r2, r3, #2
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	330c      	adds	r3, #12
 8009022:	2202      	movs	r2, #2
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f90c 	bl	8009244 <USBD_CtlSendData>
      break;
 800902c:	e004      	b.n	8009038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 f88a 	bl	800914a <USBD_CtlError>
      break;
 8009036:	bf00      	nop
  }
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	885b      	ldrh	r3, [r3, #2]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d107      	bne.n	8009062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f94c 	bl	80092f8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009060:	e013      	b.n	800908a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d10b      	bne.n	8009082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	889b      	ldrh	r3, [r3, #4]
 800906e:	0a1b      	lsrs	r3, r3, #8
 8009070:	b29b      	uxth	r3, r3
 8009072:	b2da      	uxtb	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f93c 	bl	80092f8 <USBD_CtlSendStatus>
}
 8009080:	e003      	b.n	800908a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 f860 	bl	800914a <USBD_CtlError>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d80b      	bhi.n	80090c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	885b      	ldrh	r3, [r3, #2]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d10c      	bne.n	80090cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f91c 	bl	80092f8 <USBD_CtlSendStatus>
      }
      break;
 80090c0:	e004      	b.n	80090cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f840 	bl	800914a <USBD_CtlError>
      break;
 80090ca:	e000      	b.n	80090ce <USBD_ClrFeature+0x3c>
      break;
 80090cc:	bf00      	nop
  }
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
 80090de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	3301      	adds	r3, #1
 80090f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	781a      	ldrb	r2, [r3, #0]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3301      	adds	r3, #1
 80090fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f7ff fa40 	bl	8008586 <SWAPBYTE>
 8009106:	4603      	mov	r3, r0
 8009108:	461a      	mov	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3301      	adds	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	3301      	adds	r3, #1
 8009118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f7ff fa33 	bl	8008586 <SWAPBYTE>
 8009120:	4603      	mov	r3, r0
 8009122:	461a      	mov	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3301      	adds	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	3301      	adds	r3, #1
 8009132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f7ff fa26 	bl	8008586 <SWAPBYTE>
 800913a:	4603      	mov	r3, r0
 800913c:	461a      	mov	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	80da      	strh	r2, [r3, #6]
}
 8009142:	bf00      	nop
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009154:	2180      	movs	r1, #128	@ 0x80
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f002 ff2a 	bl	800bfb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800915c:	2100      	movs	r1, #0
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f002 ff26 	bl	800bfb0 <USBD_LL_StallEP>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d042      	beq.n	8009208 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009186:	6938      	ldr	r0, [r7, #16]
 8009188:	f000 f842 	bl	8009210 <USBD_GetLen>
 800918c:	4603      	mov	r3, r0
 800918e:	3301      	adds	r3, #1
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009196:	d808      	bhi.n	80091aa <USBD_GetString+0x3e>
 8009198:	6938      	ldr	r0, [r7, #16]
 800919a:	f000 f839 	bl	8009210 <USBD_GetLen>
 800919e:	4603      	mov	r3, r0
 80091a0:	3301      	adds	r3, #1
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	e001      	b.n	80091ae <USBD_GetString+0x42>
 80091aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	4413      	add	r3, r2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7812      	ldrb	r2, [r2, #0]
 80091bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	3301      	adds	r3, #1
 80091c2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	4413      	add	r3, r2
 80091ca:	2203      	movs	r2, #3
 80091cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	3301      	adds	r3, #1
 80091d2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091d4:	e013      	b.n	80091fe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	4413      	add	r3, r2
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	3301      	adds	r3, #1
 80091e6:	613b      	str	r3, [r7, #16]
    idx++;
 80091e8:	7dfb      	ldrb	r3, [r7, #23]
 80091ea:	3301      	adds	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091ee:	7dfb      	ldrb	r3, [r7, #23]
 80091f0:	68ba      	ldr	r2, [r7, #8]
 80091f2:	4413      	add	r3, r2
 80091f4:	2200      	movs	r2, #0
 80091f6:	701a      	strb	r2, [r3, #0]
    idx++;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	3301      	adds	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e7      	bne.n	80091d6 <USBD_GetString+0x6a>
 8009206:	e000      	b.n	800920a <USBD_GetString+0x9e>
    return;
 8009208:	bf00      	nop
  }
}
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009220:	e005      	b.n	800922e <USBD_GetLen+0x1e>
  {
    len++;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	3301      	adds	r3, #1
 8009226:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	3301      	adds	r3, #1
 800922c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1f5      	bne.n	8009222 <USBD_GetLen+0x12>
  }

  return len;
 8009236:	7bfb      	ldrb	r3, [r7, #15]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2202      	movs	r2, #2
 8009254:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	2100      	movs	r1, #0
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f002 ff29 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	2100      	movs	r1, #0
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f002 ff18 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2203      	movs	r2, #3
 80092ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f002 ff1c 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	60f8      	str	r0, [r7, #12]
 80092de:	60b9      	str	r1, [r7, #8]
 80092e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	2100      	movs	r1, #0
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f002 ff0b 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2204      	movs	r2, #4
 8009304:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009308:	2300      	movs	r3, #0
 800930a:	2200      	movs	r2, #0
 800930c:	2100      	movs	r1, #0
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f002 fed7 	bl	800c0c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2205      	movs	r2, #5
 800932a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800932e:	2300      	movs	r3, #0
 8009330:	2200      	movs	r2, #0
 8009332:	2100      	movs	r1, #0
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f002 fee5 	bl	800c104 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <Complementary_Init>:

extern void Error_Handler(void);


void Complementary_Init(struct complementary *pComp,double alpha,double sampling_time)
{
 8009344:	b590      	push	{r4, r7, lr}
 8009346:	b087      	sub	sp, #28
 8009348:	af00      	add	r7, sp, #0
 800934a:	6178      	str	r0, [r7, #20]
 800934c:	ed87 0b02 	vstr	d0, [r7, #8]
 8009350:	ed87 1b00 	vstr	d1, [r7]
	if( pComp == NULL)
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <Complementary_Init+0x20>
	{
		printf("Null pointer error !\n");
 800935a:	4839      	ldr	r0, [pc, #228]	@ (8009440 <Complementary_Init+0xfc>)
 800935c:	f003 fed8 	bl	800d110 <puts>
		Error_Handler();
 8009360:	f7f8 f8bc 	bl	80014dc <Error_Handler>
	}

	if( !( ( alpha >= 0.0f ) && ( alpha <= 1.0f ) && ( sampling_time > 0.0f ) ) )
 8009364:	2301      	movs	r3, #1
 8009366:	461c      	mov	r4, r3
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009374:	f7f7 fbc6 	bl	8000b04 <__aeabi_dcmpge>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <Complementary_Init+0x3e>
 800937e:	2300      	movs	r3, #0
 8009380:	461c      	mov	r4, r3
 8009382:	b2e3      	uxtb	r3, r4
 8009384:	f083 0301 	eor.w	r3, r3, #1
 8009388:	b2db      	uxtb	r3, r3
 800938a:	2b00      	cmp	r3, #0
 800938c:	d128      	bne.n	80093e0 <Complementary_Init+0x9c>
 800938e:	2301      	movs	r3, #1
 8009390:	461c      	mov	r4, r3
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	4b2b      	ldr	r3, [pc, #172]	@ (8009444 <Complementary_Init+0x100>)
 8009398:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800939c:	f7f7 fba8 	bl	8000af0 <__aeabi_dcmple>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <Complementary_Init+0x66>
 80093a6:	2300      	movs	r3, #0
 80093a8:	461c      	mov	r4, r3
 80093aa:	b2e3      	uxtb	r3, r4
 80093ac:	f083 0301 	eor.w	r3, r3, #1
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d114      	bne.n	80093e0 <Complementary_Init+0x9c>
 80093b6:	2301      	movs	r3, #1
 80093b8:	461c      	mov	r4, r3
 80093ba:	f04f 0200 	mov.w	r2, #0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093c6:	f7f7 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d101      	bne.n	80093d4 <Complementary_Init+0x90>
 80093d0:	2300      	movs	r3, #0
 80093d2:	461c      	mov	r4, r3
 80093d4:	b2e3      	uxtb	r3, r4
 80093d6:	f083 0301 	eor.w	r3, r3, #1
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d004      	beq.n	80093ea <Complementary_Init+0xa6>
	{
		printf("Alpha must be [0-1] !\n");
 80093e0:	4819      	ldr	r0, [pc, #100]	@ (8009448 <Complementary_Init+0x104>)
 80093e2:	f003 fe95 	bl	800d110 <puts>
		Error_Handler();
 80093e6:	f7f8 f879 	bl	80014dc <Error_Handler>
	}

	pComp->alpha = alpha;
 80093ea:	6979      	ldr	r1, [r7, #20]
 80093ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093f0:	e9c1 2300 	strd	r2, r3, [r1]
	pComp->pitch = 0.0f;
 80093f4:	6979      	ldr	r1, [r7, #20]
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	f04f 0300 	mov.w	r3, #0
 80093fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pComp->roll = 0.0f;
 8009402:	6979      	ldr	r1, [r7, #20]
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pComp->yaw = 0.0f;
 8009410:	6979      	ldr	r1, [r7, #20]
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pComp->ts = sampling_time / 1000.0f;
 800941e:	f04f 0200 	mov.w	r2, #0
 8009422:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <Complementary_Init+0x108>)
 8009424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009428:	f7f7 fa10 	bl	800084c <__aeabi_ddiv>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	e9c1 2308 	strd	r2, r3, [r1, #32]

}
 8009436:	bf00      	nop
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	bd90      	pop	{r4, r7, pc}
 800943e:	bf00      	nop
 8009440:	080121cc 	.word	0x080121cc
 8009444:	3ff00000 	.word	0x3ff00000
 8009448:	080121e4 	.word	0x080121e4
 800944c:	408f4000 	.word	0x408f4000

08009450 <Complementary_Update>:
 * @note  The timing of this function call is critical for the correct processing
 *        of sensor data.
 */
void Complementary_Update(struct complementary *pComp,\
						double ax,double ay,double az,double gx,double gy,double gz,double mx,double my,double mz)
{
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	b099      	sub	sp, #100	@ 0x64
 8009456:	af00      	add	r7, sp, #0
 8009458:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800945a:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
 800945e:	ed87 1b0e 	vstr	d1, [r7, #56]	@ 0x38
 8009462:	ed87 2b0c 	vstr	d2, [r7, #48]	@ 0x30
 8009466:	ed87 3b0a 	vstr	d3, [r7, #40]	@ 0x28
 800946a:	ed87 4b08 	vstr	d4, [r7, #32]
 800946e:	ed87 5b06 	vstr	d5, [r7, #24]
 8009472:	ed87 6b04 	vstr	d6, [r7, #16]
 8009476:	ed87 7b02 	vstr	d7, [r7, #8]
	if( pComp == NULL)
 800947a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <Complementary_Update+0x3a>
	{
		printf("Null pointer error !\n");
 8009480:	48c3      	ldr	r0, [pc, #780]	@ (8009790 <Complementary_Update+0x340>)
 8009482:	f003 fe45 	bl	800d110 <puts>
		Error_Handler();
 8009486:	f7f8 f829 	bl	80014dc <Error_Handler>
	}

	if( !( ( pComp->alpha >= 0.0f ) && ( pComp->alpha <= 1.0f ) && ( pComp->ts > 0.0f ) ) )
 800948a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800948c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009490:	2301      	movs	r3, #1
 8009492:	461e      	mov	r6, r3
 8009494:	f04f 0200 	mov.w	r2, #0
 8009498:	f04f 0300 	mov.w	r3, #0
 800949c:	f7f7 fb32 	bl	8000b04 <__aeabi_dcmpge>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <Complementary_Update+0x5a>
 80094a6:	2300      	movs	r3, #0
 80094a8:	461e      	mov	r6, r3
 80094aa:	b2f3      	uxtb	r3, r6
 80094ac:	f083 0301 	eor.w	r3, r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d12a      	bne.n	800950c <Complementary_Update+0xbc>
 80094b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80094bc:	2301      	movs	r3, #1
 80094be:	461e      	mov	r6, r3
 80094c0:	f04f 0200 	mov.w	r2, #0
 80094c4:	4bb3      	ldr	r3, [pc, #716]	@ (8009794 <Complementary_Update+0x344>)
 80094c6:	f7f7 fb13 	bl	8000af0 <__aeabi_dcmple>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <Complementary_Update+0x84>
 80094d0:	2300      	movs	r3, #0
 80094d2:	461e      	mov	r6, r3
 80094d4:	b2f3      	uxtb	r3, r6
 80094d6:	f083 0301 	eor.w	r3, r3, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d115      	bne.n	800950c <Complementary_Update+0xbc>
 80094e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80094e6:	2301      	movs	r3, #1
 80094e8:	461e      	mov	r6, r3
 80094ea:	f04f 0200 	mov.w	r2, #0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	f7f7 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <Complementary_Update+0xb0>
 80094fc:	2300      	movs	r3, #0
 80094fe:	461e      	mov	r6, r3
 8009500:	b2f3      	uxtb	r3, r6
 8009502:	f083 0301 	eor.w	r3, r3, #1
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d004      	beq.n	8009516 <Complementary_Update+0xc6>
	{
		printf("Alpha must be [0-1] !\n");
 800950c:	48a2      	ldr	r0, [pc, #648]	@ (8009798 <Complementary_Update+0x348>)
 800950e:	f003 fdff 	bl	800d110 <puts>
		Error_Handler();
 8009512:	f7f7 ffe3 	bl	80014dc <Error_Handler>
	}

	roll_gyro = ( roll_acc + ( gx * pComp->ts ) ) ;
 8009516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009518:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800951c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009520:	f7f7 f86a 	bl	80005f8 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	4b9b      	ldr	r3, [pc, #620]	@ (800979c <Complementary_Update+0x34c>)
 800952e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009532:	f7f6 feab 	bl	800028c <__adddf3>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	4999      	ldr	r1, [pc, #612]	@ (80097a0 <Complementary_Update+0x350>)
 800953c:	e9c1 2300 	strd	r2, r3, [r1]
	pitch_gyro = ( pitch_acc + ( gy * pComp->ts ) ) ;
 8009540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009542:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8009546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800954a:	f7f7 f855 	bl	80005f8 <__aeabi_dmul>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	4b93      	ldr	r3, [pc, #588]	@ (80097a4 <Complementary_Update+0x354>)
 8009558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955c:	f7f6 fe96 	bl	800028c <__adddf3>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4990      	ldr	r1, [pc, #576]	@ (80097a8 <Complementary_Update+0x358>)
 8009566:	e9c1 2300 	strd	r2, r3, [r1]
	yaw_gyro = ( yaw_acc + ( gz * pComp->ts ) ) ;
 800956a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8009570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4610      	mov	r0, r2
 800957e:	4619      	mov	r1, r3
 8009580:	4b8a      	ldr	r3, [pc, #552]	@ (80097ac <Complementary_Update+0x35c>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	f7f6 fe81 	bl	800028c <__adddf3>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4988      	ldr	r1, [pc, #544]	@ (80097b0 <Complementary_Update+0x360>)
 8009590:	e9c1 2300 	strd	r2, r3, [r1]

	roll_acc = atan2(ay,az) * ( 180.0f / M_PI );
 8009594:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8009598:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 800959c:	f007 fa02 	bl	80109a4 <atan2>
 80095a0:	ec51 0b10 	vmov	r0, r1, d0
 80095a4:	a376      	add	r3, pc, #472	@ (adr r3, 8009780 <Complementary_Update+0x330>)
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f7f7 f825 	bl	80005f8 <__aeabi_dmul>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	497a      	ldr	r1, [pc, #488]	@ (800979c <Complementary_Update+0x34c>)
 80095b4:	e9c1 2300 	strd	r2, r3, [r1]
	pitch_acc = atan2(-ax, sqrt(ay * ay + az * az)) * ( 180.0f / M_PI );
 80095b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80095c2:	607b      	str	r3, [r7, #4]
 80095c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80095c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4690      	mov	r8, r2
 80095d6:	4699      	mov	r9, r3
 80095d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80095dc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80095e0:	f7f7 f80a 	bl	80005f8 <__aeabi_dmul>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f6 fe4e 	bl	800028c <__adddf3>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	ec43 2b17 	vmov	d7, r2, r3
 80095f8:	eeb0 0a47 	vmov.f32	s0, s14
 80095fc:	eef0 0a67 	vmov.f32	s1, s15
 8009600:	f007 f9d2 	bl	80109a8 <sqrt>
 8009604:	eeb0 7a40 	vmov.f32	s14, s0
 8009608:	eef0 7a60 	vmov.f32	s15, s1
 800960c:	eeb0 1a47 	vmov.f32	s2, s14
 8009610:	eef0 1a67 	vmov.f32	s3, s15
 8009614:	ed97 0b00 	vldr	d0, [r7]
 8009618:	f007 f9c4 	bl	80109a4 <atan2>
 800961c:	ec51 0b10 	vmov	r0, r1, d0
 8009620:	a357      	add	r3, pc, #348	@ (adr r3, 8009780 <Complementary_Update+0x330>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 ffe7 	bl	80005f8 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	495d      	ldr	r1, [pc, #372]	@ (80097a4 <Complementary_Update+0x354>)
 8009630:	e9c1 2300 	strd	r2, r3, [r1]

	double bx=0.0f,by=0.0f;
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8009640:	f04f 0200 	mov.w	r2, #0
 8009644:	f04f 0300 	mov.w	r3, #0
 8009648:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	bx = mx * cos(roll_acc*(M_PI / 180.0f)) + my * sin(roll_acc*(M_PI / 180.0f)) * sin(pitch_acc*(M_PI / 180.0f)) + mz * sin(roll_acc*(M_PI / 180.0f)) * cos(pitch_acc*(M_PI / 180.0f));
 800964c:	4b53      	ldr	r3, [pc, #332]	@ (800979c <Complementary_Update+0x34c>)
 800964e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009652:	a34d      	add	r3, pc, #308	@ (adr r3, 8009788 <Complementary_Update+0x338>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 ffce 	bl	80005f8 <__aeabi_dmul>
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	ec43 2b17 	vmov	d7, r2, r3
 8009664:	eeb0 0a47 	vmov.f32	s0, s14
 8009668:	eef0 0a67 	vmov.f32	s1, s15
 800966c:	f007 f9c8 	bl	8010a00 <cos>
 8009670:	ec51 0b10 	vmov	r0, r1, d0
 8009674:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009678:	f7f6 ffbe 	bl	80005f8 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4690      	mov	r8, r2
 8009682:	4699      	mov	r9, r3
 8009684:	4b45      	ldr	r3, [pc, #276]	@ (800979c <Complementary_Update+0x34c>)
 8009686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800968a:	a33f      	add	r3, pc, #252	@ (adr r3, 8009788 <Complementary_Update+0x338>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	4602      	mov	r2, r0
 8009696:	460b      	mov	r3, r1
 8009698:	ec43 2b17 	vmov	d7, r2, r3
 800969c:	eeb0 0a47 	vmov.f32	s0, s14
 80096a0:	eef0 0a67 	vmov.f32	s1, s15
 80096a4:	f007 fa00 	bl	8010aa8 <sin>
 80096a8:	ec51 0b10 	vmov	r0, r1, d0
 80096ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096b0:	f7f6 ffa2 	bl	80005f8 <__aeabi_dmul>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4692      	mov	sl, r2
 80096ba:	469b      	mov	fp, r3
 80096bc:	4b39      	ldr	r3, [pc, #228]	@ (80097a4 <Complementary_Update+0x354>)
 80096be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80096c2:	a331      	add	r3, pc, #196	@ (adr r3, 8009788 <Complementary_Update+0x338>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	ec43 2b17 	vmov	d7, r2, r3
 80096d4:	eeb0 0a47 	vmov.f32	s0, s14
 80096d8:	eef0 0a67 	vmov.f32	s1, s15
 80096dc:	f007 f9e4 	bl	8010aa8 <sin>
 80096e0:	ec53 2b10 	vmov	r2, r3, d0
 80096e4:	4650      	mov	r0, sl
 80096e6:	4659      	mov	r1, fp
 80096e8:	f7f6 ff86 	bl	80005f8 <__aeabi_dmul>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4640      	mov	r0, r8
 80096f2:	4649      	mov	r1, r9
 80096f4:	f7f6 fdca 	bl	800028c <__adddf3>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4690      	mov	r8, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	4b26      	ldr	r3, [pc, #152]	@ (800979c <Complementary_Update+0x34c>)
 8009702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009706:	a320      	add	r3, pc, #128	@ (adr r3, 8009788 <Complementary_Update+0x338>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	ec43 2b17 	vmov	d7, r2, r3
 8009718:	eeb0 0a47 	vmov.f32	s0, s14
 800971c:	eef0 0a67 	vmov.f32	s1, s15
 8009720:	f007 f9c2 	bl	8010aa8 <sin>
 8009724:	ec51 0b10 	vmov	r0, r1, d0
 8009728:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800972c:	f7f6 ff64 	bl	80005f8 <__aeabi_dmul>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4692      	mov	sl, r2
 8009736:	469b      	mov	fp, r3
 8009738:	4b1a      	ldr	r3, [pc, #104]	@ (80097a4 <Complementary_Update+0x354>)
 800973a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800973e:	a312      	add	r3, pc, #72	@ (adr r3, 8009788 <Complementary_Update+0x338>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 ff58 	bl	80005f8 <__aeabi_dmul>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	ec43 2b17 	vmov	d7, r2, r3
 8009750:	eeb0 0a47 	vmov.f32	s0, s14
 8009754:	eef0 0a67 	vmov.f32	s1, s15
 8009758:	f007 f952 	bl	8010a00 <cos>
 800975c:	ec53 2b10 	vmov	r2, r3, d0
 8009760:	4650      	mov	r0, sl
 8009762:	4659      	mov	r1, fp
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4640      	mov	r0, r8
 800976e:	4649      	mov	r1, r9
 8009770:	f7f6 fd8c 	bl	800028c <__adddf3>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 800977c:	e01a      	b.n	80097b4 <Complementary_Update+0x364>
 800977e:	bf00      	nop
 8009780:	1a63c1f8 	.word	0x1a63c1f8
 8009784:	404ca5dc 	.word	0x404ca5dc
 8009788:	a2529d39 	.word	0xa2529d39
 800978c:	3f91df46 	.word	0x3f91df46
 8009790:	080121cc 	.word	0x080121cc
 8009794:	3ff00000 	.word	0x3ff00000
 8009798:	080121e4 	.word	0x080121e4
 800979c:	200004d8 	.word	0x200004d8
 80097a0:	200004f0 	.word	0x200004f0
 80097a4:	200004e0 	.word	0x200004e0
 80097a8:	200004f8 	.word	0x200004f8
 80097ac:	200004e8 	.word	0x200004e8
 80097b0:	20000500 	.word	0x20000500
	by = my * cos(pitch_acc*(M_PI / 180.0f)) - mz *sin(pitch_acc*(M_PI / 180.0f));
 80097b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009968 <Complementary_Update+0x518>)
 80097b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097ba:	a367      	add	r3, pc, #412	@ (adr r3, 8009958 <Complementary_Update+0x508>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f7f6 ff1a 	bl	80005f8 <__aeabi_dmul>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	ec43 2b17 	vmov	d7, r2, r3
 80097cc:	eeb0 0a47 	vmov.f32	s0, s14
 80097d0:	eef0 0a67 	vmov.f32	s1, s15
 80097d4:	f007 f914 	bl	8010a00 <cos>
 80097d8:	ec51 0b10 	vmov	r0, r1, d0
 80097dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80097e0:	f7f6 ff0a 	bl	80005f8 <__aeabi_dmul>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4690      	mov	r8, r2
 80097ea:	4699      	mov	r9, r3
 80097ec:	4b5e      	ldr	r3, [pc, #376]	@ (8009968 <Complementary_Update+0x518>)
 80097ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097f2:	a359      	add	r3, pc, #356	@ (adr r3, 8009958 <Complementary_Update+0x508>)
 80097f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f8:	f7f6 fefe 	bl	80005f8 <__aeabi_dmul>
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	ec43 2b17 	vmov	d7, r2, r3
 8009804:	eeb0 0a47 	vmov.f32	s0, s14
 8009808:	eef0 0a67 	vmov.f32	s1, s15
 800980c:	f007 f94c 	bl	8010aa8 <sin>
 8009810:	ec51 0b10 	vmov	r0, r1, d0
 8009814:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009818:	f7f6 feee 	bl	80005f8 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4640      	mov	r0, r8
 8009822:	4649      	mov	r1, r9
 8009824:	f7f6 fd30 	bl	8000288 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	yaw_acc = atan2(-by,bx) * ( 180.0f / M_PI );
 8009830:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8009832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009834:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8009838:	ed97 1b16 	vldr	d1, [r7, #88]	@ 0x58
 800983c:	ec45 4b10 	vmov	d0, r4, r5
 8009840:	f007 f8b0 	bl	80109a4 <atan2>
 8009844:	ec51 0b10 	vmov	r0, r1, d0
 8009848:	a345      	add	r3, pc, #276	@ (adr r3, 8009960 <Complementary_Update+0x510>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fed3 	bl	80005f8 <__aeabi_dmul>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4945      	ldr	r1, [pc, #276]	@ (800996c <Complementary_Update+0x51c>)
 8009858:	e9c1 2300 	strd	r2, r3, [r1]

	pComp->roll  = ( pComp->alpha * roll_gyro ) + ( 1 - pComp->alpha ) * ( roll_acc );
 800985c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800985e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009862:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <Complementary_Update+0x520>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f7f6 fec6 	bl	80005f8 <__aeabi_dmul>
 800986c:	4602      	mov	r2, r0
 800986e:	460b      	mov	r3, r1
 8009870:	4614      	mov	r4, r2
 8009872:	461d      	mov	r5, r3
 8009874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	f04f 0000 	mov.w	r0, #0
 800987e:	493d      	ldr	r1, [pc, #244]	@ (8009974 <Complementary_Update+0x524>)
 8009880:	f7f6 fd02 	bl	8000288 <__aeabi_dsub>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4610      	mov	r0, r2
 800988a:	4619      	mov	r1, r3
 800988c:	4b3a      	ldr	r3, [pc, #232]	@ (8009978 <Complementary_Update+0x528>)
 800988e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f6 fcf5 	bl	800028c <__adddf3>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80098a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pComp->pitch = ( pComp->alpha * pitch_gyro ) + ( 1 - pComp->alpha ) * ( pitch_acc );
 80098ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80098b2:	4b32      	ldr	r3, [pc, #200]	@ (800997c <Complementary_Update+0x52c>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	461d      	mov	r5, r3
 80098c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f04f 0000 	mov.w	r0, #0
 80098ce:	4929      	ldr	r1, [pc, #164]	@ (8009974 <Complementary_Update+0x524>)
 80098d0:	f7f6 fcda 	bl	8000288 <__aeabi_dsub>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4610      	mov	r0, r2
 80098da:	4619      	mov	r1, r3
 80098dc:	4b22      	ldr	r3, [pc, #136]	@ (8009968 <Complementary_Update+0x518>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fe89 	bl	80005f8 <__aeabi_dmul>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4620      	mov	r0, r4
 80098ec:	4629      	mov	r1, r5
 80098ee:	f7f6 fccd 	bl	800028c <__adddf3>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80098f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pComp->yaw = ( pComp->alpha * yaw_gyro ) + ( 1 - pComp->alpha ) * ( yaw_acc );
 80098fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009902:	4b1f      	ldr	r3, [pc, #124]	@ (8009980 <Complementary_Update+0x530>)
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	f7f6 fe76 	bl	80005f8 <__aeabi_dmul>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4614      	mov	r4, r2
 8009912:	461d      	mov	r5, r3
 8009914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f04f 0000 	mov.w	r0, #0
 800991e:	4915      	ldr	r1, [pc, #84]	@ (8009974 <Complementary_Update+0x524>)
 8009920:	f7f6 fcb2 	bl	8000288 <__aeabi_dsub>
 8009924:	4602      	mov	r2, r0
 8009926:	460b      	mov	r3, r1
 8009928:	4610      	mov	r0, r2
 800992a:	4619      	mov	r1, r3
 800992c:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <Complementary_Update+0x51c>)
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	f7f6 fe61 	bl	80005f8 <__aeabi_dmul>
 8009936:	4602      	mov	r2, r0
 8009938:	460b      	mov	r3, r1
 800993a:	4620      	mov	r0, r4
 800993c:	4629      	mov	r1, r5
 800993e:	f7f6 fca5 	bl	800028c <__adddf3>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009948:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800994c:	bf00      	nop
 800994e:	3764      	adds	r7, #100	@ 0x64
 8009950:	46bd      	mov	sp, r7
 8009952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009956:	bf00      	nop
 8009958:	a2529d39 	.word	0xa2529d39
 800995c:	3f91df46 	.word	0x3f91df46
 8009960:	1a63c1f8 	.word	0x1a63c1f8
 8009964:	404ca5dc 	.word	0x404ca5dc
 8009968:	200004e0 	.word	0x200004e0
 800996c:	200004e8 	.word	0x200004e8
 8009970:	200004f0 	.word	0x200004f0
 8009974:	3ff00000 	.word	0x3ff00000
 8009978:	200004d8 	.word	0x200004d8
 800997c:	200004f8 	.word	0x200004f8
 8009980:	20000500 	.word	0x20000500

08009984 <hmc5883l_read>:

static __int8_t hmc5883l_self_test(struct hmc5883l_dev *hmc5883l);


__int8_t hmc5883l_read(uint16_t regaddr,const uint8_t *pdata,uint16_t len)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af04      	add	r7, sp, #16
 800998a:	4603      	mov	r3, r0
 800998c:	6039      	str	r1, [r7, #0]
 800998e:	80fb      	strh	r3, [r7, #6]
 8009990:	4613      	mov	r3, r2
 8009992:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0U;
 8009994:	2300      	movs	r3, #0
 8009996:	73fb      	strb	r3, [r7, #15]

	if ( pdata == NULL )
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d104      	bne.n	80099a8 <hmc5883l_read+0x24>
	{
		printf("Null pointer error !\n");
 800999e:	4811      	ldr	r0, [pc, #68]	@ (80099e4 <hmc5883l_read+0x60>)
 80099a0:	f003 fbb6 	bl	800d110 <puts>
		Error_Handler();
 80099a4:	f7f7 fd9a 	bl	80014dc <Error_Handler>
	}

	status = HAL_I2C_Mem_Read(hmc5883l_intf.hi2c, HMC5883L_READ_ADDR,regaddr,1,(uint8_t*)pdata,len,HAL_MAX_DELAY);
 80099a8:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <hmc5883l_read+0x64>)
 80099aa:	6818      	ldr	r0, [r3, #0]
 80099ac:	88fa      	ldrh	r2, [r7, #6]
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295
 80099b2:	9302      	str	r3, [sp, #8]
 80099b4:	88bb      	ldrh	r3, [r7, #4]
 80099b6:	9301      	str	r3, [sp, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	2301      	movs	r3, #1
 80099be:	213d      	movs	r1, #61	@ 0x3d
 80099c0:	f7f8 fd38 	bl	8002434 <HAL_I2C_Mem_Read>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

	if ( status != HAL_OK )
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d004      	beq.n	80099d8 <hmc5883l_read+0x54>
	{
		printf("I2C Protocol Error !\n");
 80099ce:	4807      	ldr	r0, [pc, #28]	@ (80099ec <hmc5883l_read+0x68>)
 80099d0:	f003 fb9e 	bl	800d110 <puts>
		Error_Handler();
 80099d4:	f7f7 fd82 	bl	80014dc <Error_Handler>
	}

	return ( HMC5883L_OK );
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	080121fc 	.word	0x080121fc
 80099e8:	2000000c 	.word	0x2000000c
 80099ec:	08012214 	.word	0x08012214

080099f0 <hmc5883l_write>:
__int8_t hmc5883l_write(uint16_t regaddr,uint8_t *pdata,uint16_t len)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af04      	add	r7, sp, #16
 80099f6:	4603      	mov	r3, r0
 80099f8:	6039      	str	r1, [r7, #0]
 80099fa:	80fb      	strh	r3, [r7, #6]
 80099fc:	4613      	mov	r3, r2
 80099fe:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73fb      	strb	r3, [r7, #15]

	if ( pdata == NULL )
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d104      	bne.n	8009a14 <hmc5883l_write+0x24>
	{
		printf("Null pointer error !\n");
 8009a0a:	4811      	ldr	r0, [pc, #68]	@ (8009a50 <hmc5883l_write+0x60>)
 8009a0c:	f003 fb80 	bl	800d110 <puts>
		Error_Handler();
 8009a10:	f7f7 fd64 	bl	80014dc <Error_Handler>
	}

	status = HAL_I2C_Mem_Write(hmc5883l_intf.hi2c, HMC5883L_WRITE_ADDR,regaddr,1,pdata,len,HAL_MAX_DELAY);
 8009a14:	4b0f      	ldr	r3, [pc, #60]	@ (8009a54 <hmc5883l_write+0x64>)
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	88fa      	ldrh	r2, [r7, #6]
 8009a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	88bb      	ldrh	r3, [r7, #4]
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	213c      	movs	r1, #60	@ 0x3c
 8009a2c:	f7f8 fc08 	bl	8002240 <HAL_I2C_Mem_Write>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]

	if ( status != HAL_OK )
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d004      	beq.n	8009a44 <hmc5883l_write+0x54>
	{
		printf("I2C Protocol Error !\n");
 8009a3a:	4807      	ldr	r0, [pc, #28]	@ (8009a58 <hmc5883l_write+0x68>)
 8009a3c:	f003 fb68 	bl	800d110 <puts>
		Error_Handler();
 8009a40:	f7f7 fd4c 	bl	80014dc <Error_Handler>
	}

	return ( HMC5883L_OK );
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	080121fc 	.word	0x080121fc
 8009a54:	2000000c 	.word	0x2000000c
 8009a58:	08012214 	.word	0x08012214

08009a5c <hmc5883l_init>:


__int8_t hmc5883l_init(struct hmc5883l_dev *hmc5883l)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	uint8_t read_data[3] = {0};
 8009a64:	f107 030c 	add.w	r3, r7, #12
 8009a68:	2100      	movs	r1, #0
 8009a6a:	460a      	mov	r2, r1
 8009a6c:	801a      	strh	r2, [r3, #0]
 8009a6e:	460a      	mov	r2, r1
 8009a70:	709a      	strb	r2, [r3, #2]
	uint8_t temp = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]

	if ( hmc5883l == NULL )
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d104      	bne.n	8009a86 <hmc5883l_init+0x2a>
	{
		printf("Null pointer error !\n");
 8009a7c:	4828      	ldr	r0, [pc, #160]	@ (8009b20 <hmc5883l_init+0xc4>)
 8009a7e:	f003 fb47 	bl	800d110 <puts>
		Error_Handler();
 8009a82:	f7f7 fd2b 	bl	80014dc <Error_Handler>
	}

	if ( hmc5883l_is_ready(hmc5883l,&hmc5883l_intf) != HMC5883L_OK)
 8009a86:	4927      	ldr	r1, [pc, #156]	@ (8009b24 <hmc5883l_init+0xc8>)
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f855 	bl	8009b38 <hmc5883l_is_ready>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <hmc5883l_init+0x42>
	{
		printf("Device Not Founded !\n");
 8009a94:	4824      	ldr	r0, [pc, #144]	@ (8009b28 <hmc5883l_init+0xcc>)
 8009a96:	f003 fb3b 	bl	800d110 <puts>
		Error_Handler();
 8009a9a:	f7f7 fd1f 	bl	80014dc <Error_Handler>
	}

	if ( hmc5883l->read_func(HMC5883L_ID_A_REG,(uint8_t*)read_data,3) != HMC5883L_OK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f107 010c 	add.w	r1, r7, #12
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	200a      	movs	r0, #10
 8009aaa:	4798      	blx	r3
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d004      	beq.n	8009abc <hmc5883l_init+0x60>
	{
		printf("I2C Read Error!\n");
 8009ab2:	481e      	ldr	r0, [pc, #120]	@ (8009b2c <hmc5883l_init+0xd0>)
 8009ab4:	f003 fb2c 	bl	800d110 <puts>
		Error_Handler();
 8009ab8:	f7f7 fd10 	bl	80014dc <Error_Handler>
	}

	hmc5883l->id_A = *read_data;
 8009abc:	7b3a      	ldrb	r2, [r7, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	705a      	strb	r2, [r3, #1]

	hmc5883l->id_B = *(read_data + 1);
 8009ac2:	7b7a      	ldrb	r2, [r7, #13]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	709a      	strb	r2, [r3, #2]

	hmc5883l->id_C = *(read_data + 2);
 8009ac8:	7bba      	ldrb	r2, [r7, #14]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	70da      	strb	r2, [r3, #3]

	temp = (hmc5883l->id_A == HMC5883L_ID_A_REG_VAL) && (hmc5883l->id_B == HMC5883L_ID_B_REG_VAL) &&\
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b48      	cmp	r3, #72	@ 0x48
 8009ad4:	d109      	bne.n	8009aea <hmc5883l_init+0x8e>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	789b      	ldrb	r3, [r3, #2]
 8009ada:	2b34      	cmp	r3, #52	@ 0x34
 8009adc:	d105      	bne.n	8009aea <hmc5883l_init+0x8e>
			(hmc5883l->id_C == HMC5883L_ID_C_REG_VAL);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	78db      	ldrb	r3, [r3, #3]
	temp = (hmc5883l->id_A == HMC5883L_ID_A_REG_VAL) && (hmc5883l->id_B == HMC5883L_ID_B_REG_VAL) &&\
 8009ae2:	2b33      	cmp	r3, #51	@ 0x33
 8009ae4:	d101      	bne.n	8009aea <hmc5883l_init+0x8e>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e000      	b.n	8009aec <hmc5883l_init+0x90>
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

	if( !temp )
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d104      	bne.n	8009afe <hmc5883l_init+0xa2>
	{
		printf("All ID Register Read Error!\n");
 8009af4:	480e      	ldr	r0, [pc, #56]	@ (8009b30 <hmc5883l_init+0xd4>)
 8009af6:	f003 fb0b 	bl	800d110 <puts>
		Error_Handler();
 8009afa:	f7f7 fcef 	bl	80014dc <Error_Handler>
	}

	if ( hmc5883l_self_test(hmc5883l) != HMC5883L_OK)
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f85a 	bl	8009bb8 <hmc5883l_self_test>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d004      	beq.n	8009b14 <hmc5883l_init+0xb8>
	{
		printf("HMC5883L self-test error !\n");
 8009b0a:	480a      	ldr	r0, [pc, #40]	@ (8009b34 <hmc5883l_init+0xd8>)
 8009b0c:	f003 fb00 	bl	800d110 <puts>
		Error_Handler();
 8009b10:	f7f7 fce4 	bl	80014dc <Error_Handler>
	}



	return ( HMC5883L_OK );
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	080121fc 	.word	0x080121fc
 8009b24:	2000000c 	.word	0x2000000c
 8009b28:	0801222c 	.word	0x0801222c
 8009b2c:	08012244 	.word	0x08012244
 8009b30:	08012254 	.word	0x08012254
 8009b34:	08012270 	.word	0x08012270

08009b38 <hmc5883l_is_ready>:


__int8_t hmc5883l_is_ready(struct hmc5883l_dev *hmc5883l,struct hmc5883l_dev_intf *hmc5883l_intf)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73bb      	strb	r3, [r7, #14]
	uint8_t dev_no = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

	if ( ( hmc5883l == NULL ) || ( hmc5883l_intf == NULL ) )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <hmc5883l_is_ready+0x1e>
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d120      	bne.n	8009b98 <hmc5883l_is_ready+0x60>
	{
		printf("Null pointer error !\n");
 8009b56:	4816      	ldr	r0, [pc, #88]	@ (8009bb0 <hmc5883l_is_ready+0x78>)
 8009b58:	f003 fada 	bl	800d110 <puts>
		Error_Handler();
 8009b5c:	f7f7 fcbe 	bl	80014dc <Error_Handler>
	}

	while ( dev_no++ < MAX_I2C_DEV_NUM )
 8009b60:	e01a      	b.n	8009b98 <hmc5883l_is_ready+0x60>
	{

		status = HAL_I2C_IsDeviceReady(hmc5883l_intf->hi2c,(uint16_t)(dev_no << 1U),100,HAL_MAX_DELAY);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	b299      	uxth	r1, r3
 8009b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b72:	2264      	movs	r2, #100	@ 0x64
 8009b74:	f7f8 fe90 	bl	8002898 <HAL_I2C_IsDeviceReady>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

		if ( status == HAL_OK)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <hmc5883l_is_ready+0x60>
		{
			hmc5883l->dev_addr = (uint8_t)dev_no;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	7bfa      	ldrb	r2, [r7, #15]
 8009b86:	701a      	strb	r2, [r3, #0]

			printf("Device found address 0x%X\n",hmc5883l->dev_addr);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4809      	ldr	r0, [pc, #36]	@ (8009bb4 <hmc5883l_is_ready+0x7c>)
 8009b90:	f003 fa56 	bl	800d040 <iprintf>

			return ( HMC5883L_OK );
 8009b94:	2300      	movs	r3, #0
 8009b96:	e006      	b.n	8009ba6 <hmc5883l_is_ready+0x6e>
	while ( dev_no++ < MAX_I2C_DEV_NUM )
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	1c5a      	adds	r2, r3, #1
 8009b9c:	73fa      	strb	r2, [r7, #15]
 8009b9e:	2b7e      	cmp	r3, #126	@ 0x7e
 8009ba0:	d9df      	bls.n	8009b62 <hmc5883l_is_ready+0x2a>
		}

	}

	return ( HMC5883L_DEV_NOT_FOUND );
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	080121fc 	.word	0x080121fc
 8009bb4:	0801228c 	.word	0x0801228c

08009bb8 <hmc5883l_self_test>:



static __int8_t hmc5883l_self_test(struct hmc5883l_dev *hmc5883l)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	if ( hmc5883l == NULL )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d104      	bne.n	8009bd0 <hmc5883l_self_test+0x18>
	{
		printf("Null pointer error !\n");
 8009bc6:	4844      	ldr	r0, [pc, #272]	@ (8009cd8 <hmc5883l_self_test+0x120>)
 8009bc8:	f003 faa2 	bl	800d110 <puts>
		Error_Handler();
 8009bcc:	f7f7 fc86 	bl	80014dc <Error_Handler>
	}

	uint8_t temp = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	77fb      	strb	r3, [r7, #31]
	uint8_t rx_data[6]={0};
 8009bd4:	f107 0310 	add.w	r3, r7, #16
 8009bd8:	2200      	movs	r2, #0
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	809a      	strh	r2, [r3, #4]
	uint8_t tx_data[1]={0};
 8009bde:	2300      	movs	r3, #0
 8009be0:	733b      	strb	r3, [r7, #12]

	int16_t self_test_x = 0,self_test_y = 0,self_test_z = 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	83bb      	strh	r3, [r7, #28]
 8009be6:	2300      	movs	r3, #0
 8009be8:	837b      	strh	r3, [r7, #26]
 8009bea:	2300      	movs	r3, #0
 8009bec:	833b      	strh	r3, [r7, #24]

	// Write CRA (00) – send 0x3C 0x00 0x71 (8-average, 15 Hz default, positive self test measurement)
	tx_data[0] = 0x71;
 8009bee:	2371      	movs	r3, #113	@ 0x71
 8009bf0:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_A_REG,tx_data,1U);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f107 010c 	add.w	r1, r7, #12
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	2000      	movs	r0, #0
 8009bfe:	4798      	blx	r3

	// Write CRB (01) – send 0x3C 0x01 0xA0 (Gain=5)
	tx_data[0] = 0xC0;
 8009c00:	23c0      	movs	r3, #192	@ 0xc0
 8009c02:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_B_REG,tx_data,1U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f107 010c 	add.w	r1, r7, #12
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	2001      	movs	r0, #1
 8009c10:	4798      	blx	r3

	// Write Mode (02) – send 0x3C 0x02 0x00 (Continuous-measurement mode)
	tx_data[0] = 0x00;
 8009c12:	2300      	movs	r3, #0
 8009c14:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_MODE_REG,tx_data,1U);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f107 010c 	add.w	r1, r7, #12
 8009c1e:	2201      	movs	r2, #1
 8009c20:	2002      	movs	r0, #2
 8009c22:	4798      	blx	r3

	HAL_Delay(20);
 8009c24:	2014      	movs	r0, #20
 8009c26:	f7f7 fedb 	bl	80019e0 <HAL_Delay>

	hmc5883l->read_func(HMC5883L_DOR_X_MSB_REG,rx_data,6U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f107 0110 	add.w	r1, r7, #16
 8009c32:	2206      	movs	r2, #6
 8009c34:	2003      	movs	r0, #3
 8009c36:	4798      	blx	r3

	self_test_x = (int16_t)(( rx_data[0] << 8U ) | rx_data[1]);
 8009c38:	7c3b      	ldrb	r3, [r7, #16]
 8009c3a:	b21b      	sxth	r3, r3
 8009c3c:	021b      	lsls	r3, r3, #8
 8009c3e:	b21a      	sxth	r2, r3
 8009c40:	7c7b      	ldrb	r3, [r7, #17]
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	4313      	orrs	r3, r2
 8009c46:	83bb      	strh	r3, [r7, #28]
	self_test_y = (int16_t)(( rx_data[2] << 8U ) | rx_data[3]);
 8009c48:	7cbb      	ldrb	r3, [r7, #18]
 8009c4a:	b21b      	sxth	r3, r3
 8009c4c:	021b      	lsls	r3, r3, #8
 8009c4e:	b21a      	sxth	r2, r3
 8009c50:	7cfb      	ldrb	r3, [r7, #19]
 8009c52:	b21b      	sxth	r3, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	837b      	strh	r3, [r7, #26]
	self_test_z = (int16_t)(( rx_data[4] << 8U ) | rx_data[5]);
 8009c58:	7d3b      	ldrb	r3, [r7, #20]
 8009c5a:	b21b      	sxth	r3, r3
 8009c5c:	021b      	lsls	r3, r3, #8
 8009c5e:	b21a      	sxth	r2, r3
 8009c60:	7d7b      	ldrb	r3, [r7, #21]
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	4313      	orrs	r3, r2
 8009c66:	833b      	strh	r3, [r7, #24]

	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
		   (self_test_y >= 243) &&  (self_test_y <= 575) &&\
		   (self_test_z >= 243) &&  (self_test_z <= 575);
 8009c68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009c6c:	2bf2      	cmp	r3, #242	@ 0xf2
 8009c6e:	dd18      	ble.n	8009ca2 <hmc5883l_self_test+0xea>
	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
 8009c70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8009c74:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8009c78:	da13      	bge.n	8009ca2 <hmc5883l_self_test+0xea>
 8009c7a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009c7e:	2bf2      	cmp	r3, #242	@ 0xf2
 8009c80:	dd0f      	ble.n	8009ca2 <hmc5883l_self_test+0xea>
		   (self_test_y >= 243) &&  (self_test_y <= 575) &&\
 8009c82:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009c86:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8009c8a:	da0a      	bge.n	8009ca2 <hmc5883l_self_test+0xea>
 8009c8c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c90:	2bf2      	cmp	r3, #242	@ 0xf2
 8009c92:	dd06      	ble.n	8009ca2 <hmc5883l_self_test+0xea>
		   (self_test_z >= 243) &&  (self_test_z <= 575);
 8009c94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c98:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8009c9c:	da01      	bge.n	8009ca2 <hmc5883l_self_test+0xea>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <hmc5883l_self_test+0xec>
 8009ca2:	2300      	movs	r3, #0
	temp = (self_test_x >= 243) &&  (self_test_x <= 575) &&\
 8009ca4:	77fb      	strb	r3, [r7, #31]

	if ( !temp )
 8009ca6:	7ffb      	ldrb	r3, [r7, #31]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d104      	bne.n	8009cb6 <hmc5883l_self_test+0xfe>
	{
		printf("HMC5883C self-test error !\n");
 8009cac:	480b      	ldr	r0, [pc, #44]	@ (8009cdc <hmc5883l_self_test+0x124>)
 8009cae:	f003 fa2f 	bl	800d110 <puts>
		Error_Handler();
 8009cb2:	f7f7 fc13 	bl	80014dc <Error_Handler>
	}

	printf("HMC5883C self-test successful !\n");
 8009cb6:	480a      	ldr	r0, [pc, #40]	@ (8009ce0 <hmc5883l_self_test+0x128>)
 8009cb8:	f003 fa2a 	bl	800d110 <puts>

	// All 3 axes pass positive self test and Exit self test mode and this procedure)
	tx_data[0] = 0x70;
 8009cbc:	2370      	movs	r3, #112	@ 0x70
 8009cbe:	733b      	strb	r3, [r7, #12]
	hmc5883l->write_func(HMC5883L_CONFIG_A_REG,tx_data,1U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	f107 010c 	add.w	r1, r7, #12
 8009cc8:	2201      	movs	r2, #1
 8009cca:	2000      	movs	r0, #0
 8009ccc:	4798      	blx	r3

	return ( HMC5883L_OK );
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	080121fc 	.word	0x080121fc
 8009cdc:	080122a8 	.word	0x080122a8
 8009ce0:	080122c4 	.word	0x080122c4
 8009ce4:	00000000 	.word	0x00000000

08009ce8 <hmc5883l_get_data>:

__int8_t hmc5883l_get_data(struct hmc5883l_dev *hmc5883l,struct hmc5883l_data *hmc5883l_data)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	uint8_t rx_data[6]={0};
 8009cf2:	f107 030c 	add.w	r3, r7, #12
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	601a      	str	r2, [r3, #0]
 8009cfa:	809a      	strh	r2, [r3, #4]
	uint8_t tx_data[1]={0};
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	723b      	strb	r3, [r7, #8]
	int16_t x = 0,y = 0,z = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	82fb      	strh	r3, [r7, #22]
 8009d04:	2300      	movs	r3, #0
 8009d06:	82bb      	strh	r3, [r7, #20]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	827b      	strh	r3, [r7, #18]

	if ( ( hmc5883l == NULL ) || ( hmc5883l_data == NULL ) )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <hmc5883l_get_data+0x30>
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <hmc5883l_get_data+0x3a>
	{
		printf("Null pointer error !\n");
 8009d18:	483b      	ldr	r0, [pc, #236]	@ (8009e08 <hmc5883l_get_data+0x120>)
 8009d1a:	f003 f9f9 	bl	800d110 <puts>
		Error_Handler();
 8009d1e:	f7f7 fbdd 	bl	80014dc <Error_Handler>
	}

	// All 3 axes pass positive self test and Exit self test mode and this procedure)
	tx_data[0] = 0x70;
 8009d22:	2370      	movs	r3, #112	@ 0x70
 8009d24:	723b      	strb	r3, [r7, #8]
	hmc5883l->write_func(HMC5883L_CONFIG_A_REG,tx_data,1U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f107 0108 	add.w	r1, r7, #8
 8009d2e:	2201      	movs	r2, #1
 8009d30:	2000      	movs	r0, #0
 8009d32:	4798      	blx	r3


	// All 3 axes pass positive self test and Exit self test mode and this procedure)
	tx_data[0] = 0xA0;
 8009d34:	23a0      	movs	r3, #160	@ 0xa0
 8009d36:	723b      	strb	r3, [r7, #8]
	hmc5883l->write_func(HMC5883L_CONFIG_B_REG,tx_data,1U);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	2201      	movs	r2, #1
 8009d42:	2001      	movs	r0, #1
 8009d44:	4798      	blx	r3


	// Write Mode (02) – send 0x3C 0x02 0x00 (Continuous-measurement mode)
	tx_data[0] = 0x00;
 8009d46:	2300      	movs	r3, #0
 8009d48:	723b      	strb	r3, [r7, #8]
	hmc5883l->write_func(HMC5883L_MODE_REG,tx_data,1U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f107 0108 	add.w	r1, r7, #8
 8009d52:	2201      	movs	r2, #1
 8009d54:	2002      	movs	r0, #2
 8009d56:	4798      	blx	r3

	HAL_Delay(20);
 8009d58:	2014      	movs	r0, #20
 8009d5a:	f7f7 fe41 	bl	80019e0 <HAL_Delay>

	hmc5883l->read_func(HMC5883L_DOR_X_MSB_REG,rx_data,6U);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f107 010c 	add.w	r1, r7, #12
 8009d66:	2206      	movs	r2, #6
 8009d68:	2003      	movs	r0, #3
 8009d6a:	4798      	blx	r3

	x = (int16_t)(( rx_data[0] << 8U ) | rx_data[1]);
 8009d6c:	7b3b      	ldrb	r3, [r7, #12]
 8009d6e:	b21b      	sxth	r3, r3
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	b21a      	sxth	r2, r3
 8009d74:	7b7b      	ldrb	r3, [r7, #13]
 8009d76:	b21b      	sxth	r3, r3
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	82fb      	strh	r3, [r7, #22]
	y = (int16_t)(( rx_data[4] << 8U ) | rx_data[5]);
 8009d7c:	7c3b      	ldrb	r3, [r7, #16]
 8009d7e:	b21b      	sxth	r3, r3
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	b21a      	sxth	r2, r3
 8009d84:	7c7b      	ldrb	r3, [r7, #17]
 8009d86:	b21b      	sxth	r3, r3
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	82bb      	strh	r3, [r7, #20]
	z = (int16_t)(( rx_data[2] << 8U ) | rx_data[3]);
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	b21b      	sxth	r3, r3
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	b21a      	sxth	r2, r3
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	b21b      	sxth	r3, r3
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	827b      	strh	r3, [r7, #18]

	hmc5883l_data->mx = (double)x * (double)2.56f;
 8009d9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7f6 fbbf 	bl	8000524 <__aeabi_i2d>
 8009da6:	a316      	add	r3, pc, #88	@ (adr r3, 8009e00 <hmc5883l_get_data+0x118>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	6839      	ldr	r1, [r7, #0]
 8009db6:	e9c1 2300 	strd	r2, r3, [r1]
	hmc5883l_data->my = (double)y * (double)2.56f;
 8009dba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f6 fbb0 	bl	8000524 <__aeabi_i2d>
 8009dc4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009e00 <hmc5883l_get_data+0x118>)
 8009dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dca:	f7f6 fc15 	bl	80005f8 <__aeabi_dmul>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	hmc5883l_data->mz = (double)z * (double)2.56f;
 8009dd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7f6 fba1 	bl	8000524 <__aeabi_i2d>
 8009de2:	a307      	add	r3, pc, #28	@ (adr r3, 8009e00 <hmc5883l_get_data+0x118>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	6839      	ldr	r1, [r7, #0]
 8009df2:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return ( HMC5883L_OK );
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	40000000 	.word	0x40000000
 8009e04:	40047ae1 	.word	0x40047ae1
 8009e08:	080121fc 	.word	0x080121fc

08009e0c <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8009e0c:	b590      	push	{r4, r7, lr}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607b      	str	r3, [r7, #4]
 8009e16:	4603      	mov	r3, r0
 8009e18:	73fb      	strb	r3, [r7, #15]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <bmi160_get_regs+0x24>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	69db      	ldr	r3, [r3, #28]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d102      	bne.n	8009e36 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8009e30:	23ff      	movs	r3, #255	@ 0xff
 8009e32:	75fb      	strb	r3, [r7, #23]
 8009e34:	e017      	b.n	8009e66 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8009e36:	89bb      	ldrh	r3, [r7, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8009e3c:	23f4      	movs	r3, #244	@ 0xf4
 8009e3e:	75fb      	strb	r3, [r7, #23]
 8009e40:	e011      	b.n	8009e66 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	789b      	ldrb	r3, [r3, #2]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d103      	bne.n	8009e52 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009e50:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69dc      	ldr	r4, [r3, #28]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	7858      	ldrb	r0, [r3, #1]
 8009e5a:	89bb      	ldrh	r3, [r7, #12]
 8009e5c:	7bf9      	ldrb	r1, [r7, #15]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	47a0      	blx	r4
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8009e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}

08009e72 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8009e72:	b590      	push	{r4, r7, lr}
 8009e74:	b087      	sub	sp, #28
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	4613      	mov	r3, r2
 8009e82:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <bmi160_set_regs+0x28>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a1b      	ldr	r3, [r3, #32]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d102      	bne.n	8009ea0 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8009e9a:	23ff      	movs	r3, #255	@ 0xff
 8009e9c:	75fb      	strb	r3, [r7, #23]
 8009e9e:	e045      	b.n	8009f2c <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8009ea0:	89bb      	ldrh	r3, [r7, #12]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8009ea6:	23f4      	movs	r3, #244	@ 0xf4
 8009ea8:	75fb      	strb	r3, [r7, #23]
 8009eaa:	e03f      	b.n	8009f2c <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	789b      	ldrb	r3, [r3, #2]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d103      	bne.n	8009ebc <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8009eb4:	7bfb      	ldrb	r3, [r7, #15]
 8009eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eba:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	7a1b      	ldrb	r3, [r3, #8]
 8009ec0:	2b11      	cmp	r3, #17
 8009ec2:	d003      	beq.n	8009ecc <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8009ec8:	2b15      	cmp	r3, #21
 8009eca:	d124      	bne.n	8009f16 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a1c      	ldr	r4, [r3, #32]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7858      	ldrb	r0, [r3, #1]
 8009ed4:	89bb      	ldrh	r3, [r7, #12]
 8009ed6:	7bf9      	ldrb	r1, [r7, #15]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	47a0      	blx	r4
 8009edc:	4603      	mov	r3, r0
 8009ede:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	4798      	blx	r3
 8009ee8:	e01a      	b.n	8009f20 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1c      	ldr	r4, [r3, #32]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	7858      	ldrb	r0, [r3, #1]
 8009ef2:	7dbb      	ldrb	r3, [r7, #22]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	441a      	add	r2, r3
 8009ef8:	7bf9      	ldrb	r1, [r7, #15]
 8009efa:	2301      	movs	r3, #1
 8009efc:	47a0      	blx	r4
 8009efe:	4603      	mov	r3, r0
 8009f00:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
 8009f04:	3301      	adds	r3, #1
 8009f06:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	4798      	blx	r3
            for (; count < len; count++)
 8009f10:	7dbb      	ldrb	r3, [r7, #22]
 8009f12:	3301      	adds	r3, #1
 8009f14:	75bb      	strb	r3, [r7, #22]
 8009f16:	7dbb      	ldrb	r3, [r7, #22]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	89ba      	ldrh	r2, [r7, #12]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d8e4      	bhi.n	8009eea <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8009f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d001      	beq.n	8009f2c <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8009f28:	23fe      	movs	r3, #254	@ 0xfe
 8009f2a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8009f2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	371c      	adds	r7, #28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd90      	pop	{r4, r7, pc}

08009f38 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8009f40:	2303      	movs	r3, #3
 8009f42:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 fa98 	bl	800a47a <null_ptr_check>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8009f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d10c      	bne.n	8009f70 <bmi160_init+0x38>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	789b      	ldrb	r3, [r3, #2]
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d108      	bne.n	8009f70 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8009f5e:	f107 010d 	add.w	r1, r7, #13
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	207f      	movs	r0, #127	@ 0x7f
 8009f68:	f7ff ff50 	bl	8009e0c <bmi160_get_regs>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8009f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d127      	bne.n	8009fc8 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8009f7e:	e007      	b.n	8009f90 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	2000      	movs	r0, #0
 8009f88:	f7ff ff40 	bl	8009e0c <bmi160_get_regs>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8009f90:	7bbb      	ldrb	r3, [r7, #14]
 8009f92:	1e5a      	subs	r2, r3, #1
 8009f94:	73ba      	strb	r2, [r7, #14]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d003      	beq.n	8009fa2 <bmi160_init+0x6a>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2bd1      	cmp	r3, #209	@ 0xd1
 8009fa0:	d1ee      	bne.n	8009f80 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8009fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10c      	bne.n	8009fc4 <bmi160_init+0x8c>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2bd1      	cmp	r3, #209	@ 0xd1
 8009fb0:	d108      	bne.n	8009fc4 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	22ff      	movs	r2, #255	@ 0xff
 8009fb6:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f80b 	bl	8009fd4 <bmi160_soft_reset>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	73fb      	strb	r3, [r7, #15]
 8009fc2:	e001      	b.n	8009fc8 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8009fc4:	23fd      	movs	r3, #253	@ 0xfd
 8009fc6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8009fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8009fdc:	23b6      	movs	r3, #182	@ 0xb6
 8009fde:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <bmi160_soft_reset+0x1a>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d102      	bne.n	8009ff4 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8009fee:	23ff      	movs	r3, #255	@ 0xff
 8009ff0:	73fb      	strb	r3, [r7, #15]
 8009ff2:	e024      	b.n	800a03e <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8009ff4:	f107 010e 	add.w	r1, r7, #14
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	207e      	movs	r0, #126	@ 0x7e
 8009ffe:	f7ff ff38 	bl	8009e72 <bmi160_set_regs>
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00a:	2001      	movs	r0, #1
 800a00c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800a00e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <bmi160_soft_reset+0x5c>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	789b      	ldrb	r3, [r3, #2]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d108      	bne.n	800a030 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800a01e:	f107 010e 	add.w	r1, r7, #14
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	207f      	movs	r0, #127	@ 0x7f
 800a028:	f7ff fef0 	bl	8009e0c <bmi160_get_regs>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800a030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d102      	bne.n	800a03e <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fa3e 	bl	800a4ba <default_param_settg>
        }
    }

    return rslt;
 800a03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <bmi160_set_sens_conf+0x1a>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800a064:	23ff      	movs	r3, #255	@ 0xff
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	e01f      	b.n	800a0aa <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa4f 	bl	800a50e <set_accel_conf>
 800a070:	4603      	mov	r3, r0
 800a072:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d116      	bne.n	800a0aa <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fb8b 	bl	800a798 <set_gyro_conf>
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10d      	bne.n	800a0aa <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f811 	bl	800a0b6 <bmi160_set_power_mode>
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800a098:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d104      	bne.n	800a0aa <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 fb44 	bl	800a72e <check_invalid_settg>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b084      	sub	sp, #16
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <bmi160_set_power_mode+0x1a>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800a0d0:	23ff      	movs	r3, #255	@ 0xff
 800a0d2:	73fb      	strb	r3, [r7, #15]
 800a0d4:	e00d      	b.n	800a0f2 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fc68 	bl	800a9ac <set_accel_pwr>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 fcf6 	bl	800aada <set_gyro_pwr>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b086      	sub	sp, #24
 800a102:	af00      	add	r7, sp, #0
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	603b      	str	r3, [r7, #0]
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 800a11e:	7d7b      	ldrb	r3, [r7, #21]
 800a120:	109b      	asrs	r3, r3, #2
 800a122:	b2db      	uxtb	r3, r3
 800a124:	f003 0301 	and.w	r3, r3, #1
 800a128:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 800a12a:	7d7b      	ldrb	r3, [r7, #21]
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 800a132:	7d3b      	ldrb	r3, [r7, #20]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 800a138:	2303      	movs	r3, #3
 800a13a:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d03c      	beq.n	800a1bc <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 800a142:	7d7b      	ldrb	r3, [r7, #21]
 800a144:	2b03      	cmp	r3, #3
 800a146:	d024      	beq.n	800a192 <bmi160_get_sensor_data+0x94>
 800a148:	2b03      	cmp	r3, #3
 800a14a:	dc34      	bgt.n	800a1b6 <bmi160_get_sensor_data+0xb8>
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d002      	beq.n	800a156 <bmi160_get_sensor_data+0x58>
 800a150:	2b02      	cmp	r3, #2
 800a152:	d00f      	beq.n	800a174 <bmi160_get_sensor_data+0x76>
 800a154:	e02f      	b.n	800a1b6 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 800a15c:	23ff      	movs	r3, #255	@ 0xff
 800a15e:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 800a160:	e02e      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 800a162:	7dbb      	ldrb	r3, [r7, #22]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	4618      	mov	r0, r3
 800a16a:	f000 fcfa 	bl	800ab62 <get_accel_data>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]
                break;
 800a172:	e025      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d102      	bne.n	800a180 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 800a17a:	23ff      	movs	r3, #255	@ 0xff
 800a17c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 800a17e:	e01f      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 800a180:	7dbb      	ldrb	r3, [r7, #22]
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fdb7 	bl	800acfa <get_gyro_data>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]
                break;
 800a190:	e016      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <bmi160_get_sensor_data+0xa0>
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d102      	bne.n	800a1a4 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 800a19e:	23ff      	movs	r3, #255	@ 0xff
 800a1a0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 800a1a2:	e00d      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 800a1a4:	7db8      	ldrb	r0, [r7, #22]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	68b9      	ldr	r1, [r7, #8]
 800a1ac:	f000 fef3 	bl	800af96 <get_accel_gyro_data>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]
                break;
 800a1b4:	e004      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800a1b6:	23fb      	movs	r3, #251	@ 0xfb
 800a1b8:	75fb      	strb	r3, [r7, #23]
                break;
 800a1ba:	e001      	b.n	800a1c0 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 800a1bc:	23ff      	movs	r3, #255	@ 0xff
 800a1be:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800a1c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	6039      	str	r1, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    int8_t self_test_rslt = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800a1dc:	6838      	ldr	r0, [r7, #0]
 800a1de:	f000 f94c 	bl	800a47a <null_ptr_check>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 800a1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <bmi160_perform_self_test+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800a1ee:	23ff      	movs	r3, #255	@ 0xff
 800a1f0:	73fb      	strb	r3, [r7, #15]
 800a1f2:	e032      	b.n	800a25a <bmi160_perform_self_test+0x8e>
    }
    else
    {

        /* Proceed if null check is fine */
        switch (select_sensor)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d002      	beq.n	800a200 <bmi160_perform_self_test+0x34>
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d006      	beq.n	800a20c <bmi160_perform_self_test+0x40>
 800a1fe:	e017      	b.n	800a230 <bmi160_perform_self_test+0x64>
        {
            case BMI160_ACCEL_ONLY:
                rslt = perform_accel_self_test(dev);
 800a200:	6838      	ldr	r0, [r7, #0]
 800a202:	f001 f80b 	bl	800b21c <perform_accel_self_test>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]
                break;
 800a20a:	e015      	b.n	800a238 <bmi160_perform_self_test+0x6c>
            case BMI160_GYRO_ONLY:

                /* Set the power mode as normal mode */
                dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2215      	movs	r2, #21
 800a210:	731a      	strb	r2, [r3, #12]
                rslt = bmi160_set_power_mode(dev);
 800a212:	6838      	ldr	r0, [r7, #0]
 800a214:	f7ff ff4f 	bl	800a0b6 <bmi160_set_power_mode>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]

                /* Perform gyro self test */
                if (rslt == BMI160_OK)
 800a21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <bmi160_perform_self_test+0x6a>
                {
                    /* Perform gyro self test */
                    rslt = perform_gyro_self_test(dev);
 800a224:	6838      	ldr	r0, [r7, #0]
 800a226:	f001 f8d5 	bl	800b3d4 <perform_gyro_self_test>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73fb      	strb	r3, [r7, #15]
                }

                break;
 800a22e:	e002      	b.n	800a236 <bmi160_perform_self_test+0x6a>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 800a230:	23fb      	movs	r3, #251	@ 0xfb
 800a232:	73fb      	strb	r3, [r7, #15]
                break;
 800a234:	e000      	b.n	800a238 <bmi160_perform_self_test+0x6c>
                break;
 800a236:	bf00      	nop
        }

        /* Check to ensure bus error does not occur */
        if (rslt >= BMI160_OK)
 800a238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	db06      	blt.n	800a24e <bmi160_perform_self_test+0x82>
        {
            /* Store the status of self test result */
            self_test_rslt = rslt;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	73bb      	strb	r3, [r7, #14]

            /* Perform soft reset */
            rslt = bmi160_soft_reset(dev);
 800a244:	6838      	ldr	r0, [r7, #0]
 800a246:	f7ff fec5 	bl	8009fd4 <bmi160_soft_reset>
 800a24a:	4603      	mov	r3, r0
 800a24c:	73fb      	strb	r3, [r7, #15]

        }

        /* Check to ensure bus operations are success */
        if (rslt == BMI160_OK)
 800a24e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <bmi160_perform_self_test+0x8e>
        {
            /* Restore self_test_rslt as return value */
            rslt = self_test_rslt;
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800a25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b088      	sub	sp, #32
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800a270:	6838      	ldr	r0, [r7, #0]
 800a272:	f000 f902 	bl	800a47a <null_ptr_check>
 800a276:	4603      	mov	r3, r0
 800a278:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800a27a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d002      	beq.n	800a288 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800a282:	23ff      	movs	r3, #255	@ 0xff
 800a284:	77fb      	strb	r3, [r7, #31]
 800a286:	e069      	b.n	800a35c <bmi160_get_offsets+0xf6>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 800a288:	f107 010c 	add.w	r1, r7, #12
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2207      	movs	r2, #7
 800a290:	2071      	movs	r0, #113	@ 0x71
 800a292:	f7ff fdbb 	bl	8009e0c <bmi160_get_regs>
 800a296:	4603      	mov	r3, r0
 800a298:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800a29a:	7b3b      	ldrb	r3, [r7, #12]
 800a29c:	b25a      	sxtb	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 800a2a2:	7b7b      	ldrb	r3, [r7, #13]
 800a2a4:	b25a      	sxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	b25a      	sxtb	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 800a2b6:	7cbb      	ldrb	r3, [r7, #18]
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800a2be:	7f7b      	ldrb	r3, [r7, #29]
 800a2c0:	b21b      	sxth	r3, r3
 800a2c2:	039b      	lsls	r3, r3, #14
 800a2c4:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800a2c6:	7fbb      	ldrb	r3, [r7, #30]
 800a2c8:	b21b      	sxth	r3, r3
 800a2ca:	019b      	lsls	r3, r3, #6
 800a2cc:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800a2ce:	8b7a      	ldrh	r2, [r7, #26]
 800a2d0:	8b3b      	ldrh	r3, [r7, #24]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 800a2d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	da00      	bge.n	800a2e0 <bmi160_get_offsets+0x7a>
 800a2de:	333f      	adds	r3, #63	@ 0x3f
 800a2e0:	119b      	asrs	r3, r3, #6
 800a2e2:	b21a      	sxth	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 800a2e8:	7c3b      	ldrb	r3, [r7, #16]
 800a2ea:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 800a2ec:	7cbb      	ldrb	r3, [r7, #18]
 800a2ee:	109b      	asrs	r3, r3, #2
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 0303 	and.w	r3, r3, #3
 800a2f6:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800a2f8:	7f7b      	ldrb	r3, [r7, #29]
 800a2fa:	b21b      	sxth	r3, r3
 800a2fc:	039b      	lsls	r3, r3, #14
 800a2fe:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800a300:	7fbb      	ldrb	r3, [r7, #30]
 800a302:	b21b      	sxth	r3, r3
 800a304:	019b      	lsls	r3, r3, #6
 800a306:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800a308:	8b7a      	ldrh	r2, [r7, #26]
 800a30a:	8b3b      	ldrh	r3, [r7, #24]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 800a310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a314:	2b00      	cmp	r3, #0
 800a316:	da00      	bge.n	800a31a <bmi160_get_offsets+0xb4>
 800a318:	333f      	adds	r3, #63	@ 0x3f
 800a31a:	119b      	asrs	r3, r3, #6
 800a31c:	b21a      	sxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800a322:	7c7b      	ldrb	r3, [r7, #17]
 800a324:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800a326:	7cbb      	ldrb	r3, [r7, #18]
 800a328:	111b      	asrs	r3, r3, #4
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	f003 0303 	and.w	r3, r3, #3
 800a330:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800a332:	7f7b      	ldrb	r3, [r7, #29]
 800a334:	b21b      	sxth	r3, r3
 800a336:	039b      	lsls	r3, r3, #14
 800a338:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 800a33a:	7fbb      	ldrb	r3, [r7, #30]
 800a33c:	b21b      	sxth	r3, r3
 800a33e:	019b      	lsls	r3, r3, #6
 800a340:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 800a342:	8b7a      	ldrh	r2, [r7, #26]
 800a344:	8b3b      	ldrh	r3, [r7, #24]
 800a346:	4313      	orrs	r3, r2
 800a348:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800a34a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	da00      	bge.n	800a354 <bmi160_get_offsets+0xee>
 800a352:	333f      	adds	r3, #63	@ 0x3f
 800a354:	119b      	asrs	r3, r3, #6
 800a356:	b21a      	sxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 800a35c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3720      	adds	r7, #32
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <bmi160_set_offsets>:
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf,
                          const struct bmi160_offsets *offset,
                          struct bmi160_dev const *dev)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b088      	sub	sp, #32
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data[7];
    uint8_t x_msb, y_msb, z_msb;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f880 	bl	800a47a <null_ptr_check>
 800a37a:	4603      	mov	r3, r0
 800a37c:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800a37e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <bmi160_set_offsets+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 800a386:	23ff      	movs	r3, #255	@ 0xff
 800a388:	77fb      	strb	r3, [r7, #31]
 800a38a:	e070      	b.n	800a46e <bmi160_set_offsets+0x106>
    }
    else
    {
        /* Update the accel offset */
        data[0] = (uint8_t)offset->off_acc_x;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f993 3000 	ldrsb.w	r3, [r3]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	753b      	strb	r3, [r7, #20]
        data[1] = (uint8_t)offset->off_acc_y;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	757b      	strb	r3, [r7, #21]
        data[2] = (uint8_t)offset->off_acc_z;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	75bb      	strb	r3, [r7, #22]

        /* Update the LSB of gyro offset */
        data[3] = BMI160_GET_LSB(offset->off_gyro_x);
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	75fb      	strb	r3, [r7, #23]
        data[4] = BMI160_GET_LSB(offset->off_gyro_y);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	763b      	strb	r3, [r7, #24]
        data[5] = BMI160_GET_LSB(offset->off_gyro_z);
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	767b      	strb	r3, [r7, #25]

        /* Update the MSB of gyro offset */
        x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	121b      	asrs	r3, r3, #8
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	f003 0303 	and.w	r3, r3, #3
 800a3d8:	77bb      	strb	r3, [r7, #30]
        y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	121b      	asrs	r3, r3, #8
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	777b      	strb	r3, [r7, #29]
        z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	121b      	asrs	r3, r3, #8
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	f003 0303 	and.w	r3, r3, #3
 800a3fc:	773b      	strb	r3, [r7, #28]
        data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
 800a3fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a402:	011b      	lsls	r3, r3, #4
 800a404:	b25a      	sxtb	r2, r3
 800a406:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	b25b      	sxtb	r3, r3
 800a40e:	4313      	orrs	r3, r2
 800a410:	b25a      	sxtb	r2, r3
 800a412:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a416:	4313      	orrs	r3, r2
 800a418:	b25b      	sxtb	r3, r3
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	76bb      	strb	r3, [r7, #26]

        /* Set the offset enable/disable for gyro and accel */
        data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800a41e:	7ebb      	ldrb	r3, [r7, #26]
 800a420:	b25b      	sxtb	r3, r3
 800a422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a426:	b25a      	sxtb	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	795b      	ldrb	r3, [r3, #5]
 800a42c:	b25b      	sxtb	r3, r3
 800a42e:	01db      	lsls	r3, r3, #7
 800a430:	b25b      	sxtb	r3, r3
 800a432:	4313      	orrs	r3, r2
 800a434:	b25b      	sxtb	r3, r3
 800a436:	b2db      	uxtb	r3, r3
 800a438:	76bb      	strb	r3, [r7, #26]
        data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 800a43a:	7ebb      	ldrb	r3, [r7, #26]
 800a43c:	b25b      	sxtb	r3, r3
 800a43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a442:	b25a      	sxtb	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	791b      	ldrb	r3, [r3, #4]
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	019b      	lsls	r3, r3, #6
 800a44c:	b25b      	sxtb	r3, r3
 800a44e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a452:	b25b      	sxtb	r3, r3
 800a454:	4313      	orrs	r3, r2
 800a456:	b25b      	sxtb	r3, r3
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	76bb      	strb	r3, [r7, #26]

        /* Set the offset config and values in the sensor */
        rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 800a45c:	f107 0114 	add.w	r1, r7, #20
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2207      	movs	r2, #7
 800a464:	2071      	movs	r0, #113	@ 0x71
 800a466:	f7ff fd04 	bl	8009e72 <bmi160_set_regs>
 800a46a:	4603      	mov	r3, r0
 800a46c:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800a46e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b085      	sub	sp, #20
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00b      	beq.n	800a4a0 <null_ptr_check+0x26>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d007      	beq.n	800a4a0 <null_ptr_check+0x26>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a1b      	ldr	r3, [r3, #32]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <null_ptr_check+0x26>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 800a4a0:	23ff      	movs	r3, #255	@ 0xff
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e001      	b.n	800a4aa <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b083      	sub	sp, #12
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2202      	movs	r2, #2
 800a4c6:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2208      	movs	r2, #8
 800a4cc:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2210      	movs	r2, #16
 800a4d2:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2203      	movs	r2, #3
 800a4d8:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2202      	movs	r2, #2
 800a4de:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2208      	movs	r2, #8
 800a4e4:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2214      	movs	r2, #20
 800a4ea:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	687a      	ldr	r2, [r7, #4]
 800a4f6:	6852      	ldr	r2, [r2, #4]
 800a4f8:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68d2      	ldr	r2, [r2, #12]
 800a500:	611a      	str	r2, [r3, #16]
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800a516:	2300      	movs	r3, #0
 800a518:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	6879      	ldr	r1, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	f000 f833 	bl	800a58c <check_accel_config>
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a52a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d126      	bne.n	800a580 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 800a532:	f107 010c 	add.w	r1, r7, #12
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	2040      	movs	r0, #64	@ 0x40
 800a53c:	f7ff fc99 	bl	8009e72 <bmi160_set_regs>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d119      	bne.n	800a580 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	795a      	ldrb	r2, [r3, #5]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	79da      	ldrb	r2, [r3, #7]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 800a55c:	f107 030c 	add.w	r3, r7, #12
 800a560:	1c59      	adds	r1, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	2041      	movs	r0, #65	@ 0x41
 800a568:	f7ff fc83 	bl	8009e72 <bmi160_set_regs>
 800a56c:	4603      	mov	r3, r0
 800a56e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d103      	bne.n	800a580 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	799a      	ldrb	r2, [r3, #6]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 800a580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2202      	movs	r2, #2
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	2040      	movs	r0, #64	@ 0x40
 800a59e:	f7ff fc35 	bl	8009e0c <bmi160_get_regs>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d11b      	bne.n	800a5e6 <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f81e 	bl	800a5f2 <process_accel_odr>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a5ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d111      	bne.n	800a5e6 <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f848 	bl	800a65a <process_accel_bw>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a5ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d107      	bne.n	800a5e6 <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f872 	bl	800a6c6 <process_accel_range>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800a5e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800a604:	2300      	movs	r3, #0
 800a606:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	795b      	ldrb	r3, [r3, #5]
 800a60c:	2b0c      	cmp	r3, #12
 800a60e:	d81a      	bhi.n	800a646 <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	795a      	ldrb	r2, [r3, #5]
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	7a5b      	ldrb	r3, [r3, #9]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d016      	beq.n	800a64a <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	795b      	ldrb	r3, [r3, #5]
 800a620:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	f023 030f 	bic.w	r3, r3, #15
 800a62a:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 800a62c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a630:	f003 030f 	and.w	r3, r3, #15
 800a634:	b25a      	sxtb	r2, r3
 800a636:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	b25b      	sxtb	r3, r3
 800a63e:	b2da      	uxtb	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	e001      	b.n	800a64a <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a646:	23fc      	movs	r3, #252	@ 0xfc
 800a648:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	79db      	ldrb	r3, [r3, #7]
 800a674:	2b07      	cmp	r3, #7
 800a676:	d81c      	bhi.n	800a6b2 <process_accel_bw+0x58>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	79da      	ldrb	r2, [r3, #7]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	7adb      	ldrb	r3, [r3, #11]
 800a680:	429a      	cmp	r2, r3
 800a682:	d018      	beq.n	800a6b6 <process_accel_bw+0x5c>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	79db      	ldrb	r3, [r3, #7]
 800a688:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a692:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 800a694:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a698:	011b      	lsls	r3, r3, #4
 800a69a:	b25b      	sxtb	r3, r3
 800a69c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a6a0:	b25a      	sxtb	r2, r3
 800a6a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	b2da      	uxtb	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	e001      	b.n	800a6b6 <process_accel_bw+0x5c>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a6b2:	23fc      	movs	r3, #252	@ 0xfc
 800a6b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	799b      	ldrb	r3, [r3, #6]
 800a6e0:	2b0c      	cmp	r3, #12
 800a6e2:	d81a      	bhi.n	800a71a <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	799a      	ldrb	r2, [r3, #6]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	7a9b      	ldrb	r3, [r3, #10]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d016      	beq.n	800a71e <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	799b      	ldrb	r3, [r3, #6]
 800a6f4:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	f023 030f 	bic.w	r3, r3, #15
 800a6fe:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 800a700:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a704:	f003 030f 	and.w	r3, r3, #15
 800a708:	b25a      	sxtb	r2, r3
 800a70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a70e:	4313      	orrs	r3, r2
 800a710:	b25b      	sxtb	r3, r3
 800a712:	b2da      	uxtb	r2, r3
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	701a      	strb	r2, [r3, #0]
 800a718:	e001      	b.n	800a71e <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a71a:	23fc      	movs	r3, #252	@ 0xfc
 800a71c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 800a73a:	f107 010e 	add.w	r1, r7, #14
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	2002      	movs	r0, #2
 800a744:	f7ff fb62 	bl	8009e0c <bmi160_get_regs>
 800a748:	4603      	mov	r3, r0
 800a74a:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	085b      	lsrs	r3, r3, #1
 800a750:	b2db      	uxtb	r3, r3
 800a752:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d102      	bne.n	800a76a <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 800a764:	23fa      	movs	r3, #250	@ 0xfa
 800a766:	73fb      	strb	r3, [r7, #15]
 800a768:	e010      	b.n	800a78c <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d102      	bne.n	800a776 <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 800a770:	23f9      	movs	r3, #249	@ 0xf9
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e00a      	b.n	800a78c <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d102      	bne.n	800a782 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 800a77c:	23f8      	movs	r3, #248	@ 0xf8
 800a77e:	73fb      	strb	r3, [r7, #15]
 800a780:	e004      	b.n	800a78c <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b07      	cmp	r3, #7
 800a786:	d101      	bne.n	800a78c <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 800a788:	23f7      	movs	r3, #247	@ 0xf7
 800a78a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a78c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 800a7a4:	f107 030c 	add.w	r3, r7, #12
 800a7a8:	6879      	ldr	r1, [r7, #4]
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 f833 	bl	800a816 <check_gyro_config>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a7b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d126      	bne.n	800a80a <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 800a7bc:	f107 010c 	add.w	r1, r7, #12
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	2042      	movs	r0, #66	@ 0x42
 800a7c6:	f7ff fb54 	bl	8009e72 <bmi160_set_regs>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d119      	bne.n	800a80a <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	7b5a      	ldrb	r2, [r3, #13]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7bda      	ldrb	r2, [r3, #15]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 800a7e6:	f107 030c 	add.w	r3, r7, #12
 800a7ea:	1c59      	adds	r1, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	2043      	movs	r0, #67	@ 0x43
 800a7f2:	f7ff fb3e 	bl	8009e72 <bmi160_set_regs>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d103      	bne.n	800a80a <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7b9a      	ldrb	r2, [r3, #14]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 800a80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2202      	movs	r2, #2
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	2042      	movs	r0, #66	@ 0x42
 800a828:	f7ff faf0 	bl	8009e0c <bmi160_get_regs>
 800a82c:	4603      	mov	r3, r0
 800a82e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800a830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d11b      	bne.n	800a870 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f000 f81e 	bl	800a87c <process_gyro_odr>
 800a840:	4603      	mov	r3, r0
 800a842:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800a844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d111      	bne.n	800a870 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f848 	bl	800a8e4 <process_gyro_bw>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d107      	bne.n	800a870 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3301      	adds	r3, #1
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	4618      	mov	r0, r3
 800a868:	f000 f86c 	bl	800a944 <process_gyro_range>
 800a86c:	4603      	mov	r3, r0
 800a86e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800a870:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3710      	adds	r7, #16
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	7b5b      	ldrb	r3, [r3, #13]
 800a896:	2b0d      	cmp	r3, #13
 800a898:	d81a      	bhi.n	800a8d0 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	7b5a      	ldrb	r2, [r3, #13]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	7c5b      	ldrb	r3, [r3, #17]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d016      	beq.n	800a8d4 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	7b5b      	ldrb	r3, [r3, #13]
 800a8aa:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	f023 030f 	bic.w	r3, r3, #15
 800a8b4:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 800a8b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	b25a      	sxtb	r2, r3
 800a8c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e001      	b.n	800a8d4 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a8d0:	23fc      	movs	r3, #252	@ 0xfc
 800a8d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	7bdb      	ldrb	r3, [r3, #15]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d816      	bhi.n	800a930 <process_gyro_bw+0x4c>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	7bdb      	ldrb	r3, [r3, #15]
 800a906:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a910:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 800a912:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a916:	011b      	lsls	r3, r3, #4
 800a918:	b25b      	sxtb	r3, r3
 800a91a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a91e:	b25a      	sxtb	r2, r3
 800a920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a924:	4313      	orrs	r3, r2
 800a926:	b25b      	sxtb	r3, r3
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e001      	b.n	800a934 <process_gyro_bw+0x50>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a930:	23fc      	movs	r3, #252	@ 0xfc
 800a932:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a934:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800a944:	b480      	push	{r7}
 800a946:	b085      	sub	sp, #20
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	7b9b      	ldrb	r3, [r3, #14]
 800a95e:	2b04      	cmp	r3, #4
 800a960:	d81a      	bhi.n	800a998 <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	7b9a      	ldrb	r2, [r3, #14]
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	7c9b      	ldrb	r3, [r3, #18]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d016      	beq.n	800a99c <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	7b9b      	ldrb	r3, [r3, #14]
 800a972:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f023 0307 	bic.w	r3, r3, #7
 800a97c:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 800a97e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	b25a      	sxtb	r2, r3
 800a988:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	b25b      	sxtb	r3, r3
 800a990:	b2da      	uxtb	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	701a      	strb	r2, [r3, #0]
 800a996:	e001      	b.n	800a99c <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 800a998:	23fc      	movs	r3, #252	@ 0xfc
 800a99a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800a99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3714      	adds	r7, #20
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	791b      	ldrb	r3, [r3, #4]
 800a9c0:	2b0f      	cmp	r3, #15
 800a9c2:	d92b      	bls.n	800aa1c <set_accel_pwr+0x70>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	791b      	ldrb	r3, [r3, #4]
 800a9c8:	2b12      	cmp	r3, #18
 800a9ca:	d827      	bhi.n	800aa1c <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	791a      	ldrb	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	7a1b      	ldrb	r3, [r3, #8]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d024      	beq.n	800aa22 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 800a9d8:	f107 030e 	add.w	r3, r7, #14
 800a9dc:	6879      	ldr	r1, [r7, #4]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f000 f826 	bl	800aa30 <process_under_sampling>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800a9e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d118      	bne.n	800aa22 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	1d19      	adds	r1, r3, #4
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	207e      	movs	r0, #126	@ 0x7e
 800a9fa:	f7ff fa3a 	bl	8009e72 <bmi160_set_regs>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	7a1b      	ldrb	r3, [r3, #8]
 800aa06:	2b10      	cmp	r3, #16
 800aa08:	d103      	bne.n	800aa12 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0e:	2005      	movs	r0, #5
 800aa10:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	791a      	ldrb	r2, [r3, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800aa1a:	e002      	b.n	800aa22 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800aa1c:	23f3      	movs	r3, #243	@ 0xf3
 800aa1e:	73fb      	strb	r3, [r7, #15]
 800aa20:	e000      	b.n	800aa24 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 800aa22:	bf00      	nop
    }

    return rslt;
 800aa24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 800aa3e:	2300      	movs	r3, #0
 800aa40:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2201      	movs	r2, #1
 800aa46:	6879      	ldr	r1, [r7, #4]
 800aa48:	2040      	movs	r0, #64	@ 0x40
 800aa4a:	f7ff f9df 	bl	8009e0c <bmi160_get_regs>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800aa52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d139      	bne.n	800aace <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	791b      	ldrb	r3, [r3, #4]
 800aa5e:	2b12      	cmp	r3, #18
 800aa60:	d120      	bne.n	800aaa4 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa6a:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	2040      	movs	r0, #64	@ 0x40
 800aa80:	f7ff f9f7 	bl	8009e72 <bmi160_set_regs>
 800aa84:	4603      	mov	r3, r0
 800aa86:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 800aa88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d11e      	bne.n	800aace <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 800aa90:	f107 010c 	add.w	r1, r7, #12
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2202      	movs	r2, #2
 800aa98:	2058      	movs	r0, #88	@ 0x58
 800aa9a:	f7ff f9ea 	bl	8009e72 <bmi160_set_regs>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	73fb      	strb	r3, [r7, #15]
 800aaa2:	e014      	b.n	800aace <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	b25b      	sxtb	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	da0f      	bge.n	800aace <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab6:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7bba      	ldrb	r2, [r7, #14]
 800aabc:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	2201      	movs	r2, #1
 800aac2:	6879      	ldr	r1, [r7, #4]
 800aac4:	2040      	movs	r0, #64	@ 0x40
 800aac6:	f7ff f9d4 	bl	8009e72 <bmi160_set_regs>
 800aaca:	4603      	mov	r3, r0
 800aacc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800aace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	7b1b      	ldrb	r3, [r3, #12]
 800aaea:	2b14      	cmp	r3, #20
 800aaec:	d007      	beq.n	800aafe <set_gyro_pwr+0x24>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7b1b      	ldrb	r3, [r3, #12]
 800aaf2:	2b15      	cmp	r3, #21
 800aaf4:	d003      	beq.n	800aafe <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 800aafa:	2b17      	cmp	r3, #23
 800aafc:	d129      	bne.n	800ab52 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	7b1a      	ldrb	r2, [r3, #12]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7c1b      	ldrb	r3, [r3, #16]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d025      	beq.n	800ab56 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f103 010c 	add.w	r1, r3, #12
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	207e      	movs	r0, #126	@ 0x7e
 800ab16:	f7ff f9ac 	bl	8009e72 <bmi160_set_regs>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7c1b      	ldrb	r3, [r3, #16]
 800ab22:	2b14      	cmp	r3, #20
 800ab24:	d104      	bne.n	800ab30 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2a:	2050      	movs	r0, #80	@ 0x50
 800ab2c:	4798      	blx	r3
 800ab2e:	e00b      	b.n	800ab48 <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	7c1b      	ldrb	r3, [r3, #16]
 800ab34:	2b17      	cmp	r3, #23
 800ab36:	d107      	bne.n	800ab48 <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 800ab3c:	2b15      	cmp	r3, #21
 800ab3e:	d103      	bne.n	800ab48 <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab44:	200a      	movs	r0, #10
 800ab46:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	7b1a      	ldrb	r2, [r3, #12]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 800ab50:	e001      	b.n	800ab56 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 800ab52:	23f3      	movs	r3, #243	@ 0xf3
 800ab54:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800ab56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b08c      	sub	sp, #48	@ 0x30
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	4603      	mov	r3, r0
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
 800ab6e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 800ab76:	f107 0314 	add.w	r3, r7, #20
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	605a      	str	r2, [r3, #4]
 800ab80:	721a      	strb	r2, [r3, #8]
    uint8_t time_0 = 0;
 800ab82:	2300      	movs	r3, #0
 800ab84:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	3306      	adds	r3, #6
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	f107 0114 	add.w	r1, r7, #20
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2012      	movs	r0, #18
 800aba0:	f7ff f934 	bl	8009e0c <bmi160_get_regs>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800abaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f040 809a 	bne.w	800ace8 <get_accel_data+0x186>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 800abb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abb8:	1c5a      	adds	r2, r3, #1
 800abba:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800abbe:	3330      	adds	r3, #48	@ 0x30
 800abc0:	443b      	add	r3, r7
 800abc2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800abc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800abca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abce:	1c5a      	adds	r2, r3, #1
 800abd0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800abd4:	3330      	adds	r3, #48	@ 0x30
 800abd6:	443b      	add	r3, r7
 800abd8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800abdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800abe0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800abe4:	b21b      	sxth	r3, r3
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	b21a      	sxth	r2, r3
 800abea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800abee:	b21b      	sxth	r3, r3
 800abf0:	4313      	orrs	r3, r2
 800abf2:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	8c3a      	ldrh	r2, [r7, #32]
 800abf8:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800abfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac04:	3330      	adds	r3, #48	@ 0x30
 800ac06:	443b      	add	r3, r7
 800ac08:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800ac10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac1a:	3330      	adds	r3, #48	@ 0x30
 800ac1c:	443b      	add	r3, r7
 800ac1e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac22:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800ac26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ac2a:	b21b      	sxth	r3, r3
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	b21a      	sxth	r2, r3
 800ac30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac34:	b21b      	sxth	r3, r3
 800ac36:	4313      	orrs	r3, r2
 800ac38:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	8c3a      	ldrh	r2, [r7, #32]
 800ac3e:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800ac40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac4a:	3330      	adds	r3, #48	@ 0x30
 800ac4c:	443b      	add	r3, r7
 800ac4e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800ac56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac60:	3330      	adds	r3, #48	@ 0x30
 800ac62:	443b      	add	r3, r7
 800ac64:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800ac6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ac70:	b21b      	sxth	r3, r3
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	b21a      	sxth	r2, r3
 800ac76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac7a:	b21b      	sxth	r3, r3
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	8c3a      	ldrh	r2, [r7, #32]
 800ac84:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d129      	bne.n	800ace0 <get_accel_data+0x17e>
        {
            time_0 = data_array[idx++];
 800ac8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ac96:	3330      	adds	r3, #48	@ 0x30
 800ac98:	443b      	add	r3, r7
 800ac9a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800ac9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800aca2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aca6:	1c5a      	adds	r2, r3, #1
 800aca8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800acac:	3330      	adds	r3, #48	@ 0x30
 800acae:	443b      	add	r3, r7
 800acb0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800acb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800acc2:	3330      	adds	r3, #48	@ 0x30
 800acc4:	443b      	add	r3, r7
 800acc6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800acca:	041b      	lsls	r3, r3, #16
 800accc:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800acce:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	431a      	orrs	r2, r3
 800acd4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800acd8:	431a      	orrs	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	609a      	str	r2, [r3, #8]
 800acde:	e006      	b.n	800acee <get_accel_data+0x18c>
        }
        else
        {
            accel->sensortime = 0;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	609a      	str	r2, [r3, #8]
 800ace6:	e002      	b.n	800acee <get_accel_data+0x18c>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800ace8:	23fe      	movs	r3, #254	@ 0xfe
 800acea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800acee:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3730      	adds	r7, #48	@ 0x30
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b08c      	sub	sp, #48	@ 0x30
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	4603      	mov	r3, r0
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]
 800ad06:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800ad0e:	f107 0310 	add.w	r3, r7, #16
 800ad12:	2200      	movs	r2, #0
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	605a      	str	r2, [r3, #4]
 800ad18:	609a      	str	r2, [r3, #8]
 800ad1a:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d17e      	bne.n	800ae30 <get_gyro_data+0x136>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 800ad32:	f107 0110 	add.w	r1, r7, #16
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2206      	movs	r2, #6
 800ad3a:	200c      	movs	r0, #12
 800ad3c:	f7ff f866 	bl	8009e0c <bmi160_get_regs>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800ad46:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d16c      	bne.n	800ae28 <get_gyro_data+0x12e>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800ad4e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ad58:	3330      	adds	r3, #48	@ 0x30
 800ad5a:	443b      	add	r3, r7
 800ad5c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ad60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800ad64:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ad6e:	3330      	adds	r3, #48	@ 0x30
 800ad70:	443b      	add	r3, r7
 800ad72:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ad76:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800ad7a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad7e:	b21b      	sxth	r3, r3
 800ad80:	021b      	lsls	r3, r3, #8
 800ad82:	b21a      	sxth	r2, r3
 800ad84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad88:	b21b      	sxth	r3, r3
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	8c3a      	ldrh	r2, [r7, #32]
 800ad92:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800ad94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ad9e:	3330      	adds	r3, #48	@ 0x30
 800ada0:	443b      	add	r3, r7
 800ada2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ada6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800adaa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adae:	1c5a      	adds	r2, r3, #1
 800adb0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800adb4:	3330      	adds	r3, #48	@ 0x30
 800adb6:	443b      	add	r3, r7
 800adb8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800adbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800adc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800adc4:	b21b      	sxth	r3, r3
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	b21a      	sxth	r2, r3
 800adca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800adce:	b21b      	sxth	r3, r3
 800add0:	4313      	orrs	r3, r2
 800add2:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	8c3a      	ldrh	r2, [r7, #32]
 800add8:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800adda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ade4:	3330      	adds	r3, #48	@ 0x30
 800ade6:	443b      	add	r3, r7
 800ade8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800adec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800adf0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adf4:	1c5a      	adds	r2, r3, #1
 800adf6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800adfa:	3330      	adds	r3, #48	@ 0x30
 800adfc:	443b      	add	r3, r7
 800adfe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ae02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800ae06:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ae0a:	b21b      	sxth	r3, r3
 800ae0c:	021b      	lsls	r3, r3, #8
 800ae0e:	b21a      	sxth	r2, r3
 800ae10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae14:	b21b      	sxth	r3, r3
 800ae16:	4313      	orrs	r3, r2
 800ae18:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	8c3a      	ldrh	r2, [r7, #32]
 800ae1e:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	609a      	str	r2, [r3, #8]
 800ae26:	e0b0      	b.n	800af8a <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800ae28:	23fe      	movs	r3, #254	@ 0xfe
 800ae2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ae2e:	e0ac      	b.n	800af8a <get_gyro_data+0x290>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	330c      	adds	r3, #12
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	f107 0110 	add.w	r1, r7, #16
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	200c      	movs	r0, #12
 800ae40:	f7fe ffe4 	bl	8009e0c <bmi160_get_regs>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 800ae4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f040 8098 	bne.w	800af84 <get_gyro_data+0x28a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 800ae54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae58:	1c5a      	adds	r2, r3, #1
 800ae5a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ae5e:	3330      	adds	r3, #48	@ 0x30
 800ae60:	443b      	add	r3, r7
 800ae62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ae66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800ae6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae6e:	1c5a      	adds	r2, r3, #1
 800ae70:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800ae74:	3330      	adds	r3, #48	@ 0x30
 800ae76:	443b      	add	r3, r7
 800ae78:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800ae7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800ae80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ae84:	b21b      	sxth	r3, r3
 800ae86:	021b      	lsls	r3, r3, #8
 800ae88:	b21a      	sxth	r2, r3
 800ae8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae8e:	b21b      	sxth	r3, r3
 800ae90:	4313      	orrs	r3, r2
 800ae92:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	8c3a      	ldrh	r2, [r7, #32]
 800ae98:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 800ae9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae9e:	1c5a      	adds	r2, r3, #1
 800aea0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aea4:	3330      	adds	r3, #48	@ 0x30
 800aea6:	443b      	add	r3, r7
 800aea8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aeac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800aeb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aeba:	3330      	adds	r3, #48	@ 0x30
 800aebc:	443b      	add	r3, r7
 800aebe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aec2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800aec6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800aeca:	b21b      	sxth	r3, r3
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	b21a      	sxth	r2, r3
 800aed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aed4:	b21b      	sxth	r3, r3
 800aed6:	4313      	orrs	r3, r2
 800aed8:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	8c3a      	ldrh	r2, [r7, #32]
 800aede:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 800aee0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aee4:	1c5a      	adds	r2, r3, #1
 800aee6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aeea:	3330      	adds	r3, #48	@ 0x30
 800aeec:	443b      	add	r3, r7
 800aeee:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800aef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800aef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800af00:	3330      	adds	r3, #48	@ 0x30
 800af02:	443b      	add	r3, r7
 800af04:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800af08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800af0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800af10:	b21b      	sxth	r3, r3
 800af12:	021b      	lsls	r3, r3, #8
 800af14:	b21a      	sxth	r2, r3
 800af16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	4313      	orrs	r3, r2
 800af1e:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	8c3a      	ldrh	r2, [r7, #32]
 800af24:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 800af26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800af2a:	3306      	adds	r3, #6
 800af2c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 800af30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800af3a:	3330      	adds	r3, #48	@ 0x30
 800af3c:	443b      	add	r3, r7
 800af3e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800af42:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800af46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800af50:	3330      	adds	r3, #48	@ 0x30
 800af52:	443b      	add	r3, r7
 800af54:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800af5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800af60:	1c5a      	adds	r2, r3, #1
 800af62:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800af66:	3330      	adds	r3, #48	@ 0x30
 800af68:	443b      	add	r3, r7
 800af6a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800af72:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800af74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af76:	431a      	orrs	r2, r3
 800af78:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800af7c:	431a      	orrs	r2, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	609a      	str	r2, [r3, #8]
 800af82:	e002      	b.n	800af8a <get_gyro_data+0x290>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 800af84:	23fe      	movs	r3, #254	@ 0xfe
 800af86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800af8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3730      	adds	r7, #48	@ 0x30
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b08c      	sub	sp, #48	@ 0x30
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
 800afa2:	4603      	mov	r3, r0
 800afa4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 800afac:	f107 0310 	add.w	r3, r7, #16
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	605a      	str	r2, [r3, #4]
 800afb6:	609a      	str	r2, [r3, #8]
 800afb8:	f8c3 200b 	str.w	r2, [r3, #11]
    uint8_t time_0 = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 800afc2:	2300      	movs	r3, #0
 800afc4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 800afca:	7bfb      	ldrb	r3, [r7, #15]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	330c      	adds	r3, #12
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	f107 0110 	add.w	r1, r7, #16
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	200c      	movs	r0, #12
 800afda:	f7fe ff17 	bl	8009e0c <bmi160_get_regs>
 800afde:	4603      	mov	r3, r0
 800afe0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800afe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f040 810e 	bne.w	800b20a <get_accel_gyro_data+0x274>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 800afee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aff2:	1c5a      	adds	r2, r3, #1
 800aff4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800aff8:	3330      	adds	r3, #48	@ 0x30
 800affa:	443b      	add	r3, r7
 800affc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b008:	1c5a      	adds	r2, r3, #1
 800b00a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b00e:	3330      	adds	r3, #48	@ 0x30
 800b010:	443b      	add	r3, r7
 800b012:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b016:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b01a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b01e:	b21b      	sxth	r3, r3
 800b020:	021b      	lsls	r3, r3, #8
 800b022:	b21a      	sxth	r2, r3
 800b024:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b028:	b21b      	sxth	r3, r3
 800b02a:	4313      	orrs	r3, r2
 800b02c:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	8c3a      	ldrh	r2, [r7, #32]
 800b032:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800b034:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b038:	1c5a      	adds	r2, r3, #1
 800b03a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b03e:	3330      	adds	r3, #48	@ 0x30
 800b040:	443b      	add	r3, r7
 800b042:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b04a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b054:	3330      	adds	r3, #48	@ 0x30
 800b056:	443b      	add	r3, r7
 800b058:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b05c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b060:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b064:	b21b      	sxth	r3, r3
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	b21a      	sxth	r2, r3
 800b06a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b06e:	b21b      	sxth	r3, r3
 800b070:	4313      	orrs	r3, r2
 800b072:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	8c3a      	ldrh	r2, [r7, #32]
 800b078:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800b07a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b084:	3330      	adds	r3, #48	@ 0x30
 800b086:	443b      	add	r3, r7
 800b088:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b08c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b090:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b09a:	3330      	adds	r3, #48	@ 0x30
 800b09c:	443b      	add	r3, r7
 800b09e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b0a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b0a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b0aa:	b21b      	sxth	r3, r3
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	b21a      	sxth	r2, r3
 800b0b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b0b4:	b21b      	sxth	r3, r3
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	8c3a      	ldrh	r2, [r7, #32]
 800b0be:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 800b0c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b0ca:	3330      	adds	r3, #48	@ 0x30
 800b0cc:	443b      	add	r3, r7
 800b0ce:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b0d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b0d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b0e0:	3330      	adds	r3, #48	@ 0x30
 800b0e2:	443b      	add	r3, r7
 800b0e4:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b0e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b0ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b0f0:	b21b      	sxth	r3, r3
 800b0f2:	021b      	lsls	r3, r3, #8
 800b0f4:	b21a      	sxth	r2, r3
 800b0f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b0fa:	b21b      	sxth	r3, r3
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	8c3a      	ldrh	r2, [r7, #32]
 800b104:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 800b106:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b110:	3330      	adds	r3, #48	@ 0x30
 800b112:	443b      	add	r3, r7
 800b114:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b11c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b120:	1c5a      	adds	r2, r3, #1
 800b122:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b126:	3330      	adds	r3, #48	@ 0x30
 800b128:	443b      	add	r3, r7
 800b12a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b12e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b132:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b136:	b21b      	sxth	r3, r3
 800b138:	021b      	lsls	r3, r3, #8
 800b13a:	b21a      	sxth	r2, r3
 800b13c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b140:	b21b      	sxth	r3, r3
 800b142:	4313      	orrs	r3, r2
 800b144:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	8c3a      	ldrh	r2, [r7, #32]
 800b14a:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800b14c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b156:	3330      	adds	r3, #48	@ 0x30
 800b158:	443b      	add	r3, r7
 800b15a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b15e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800b162:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b16c:	3330      	adds	r3, #48	@ 0x30
 800b16e:	443b      	add	r3, r7
 800b170:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800b178:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b17c:	b21b      	sxth	r3, r3
 800b17e:	021b      	lsls	r3, r3, #8
 800b180:	b21a      	sxth	r2, r3
 800b182:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b186:	b21b      	sxth	r3, r3
 800b188:	4313      	orrs	r3, r2
 800b18a:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	8c3a      	ldrh	r2, [r7, #32]
 800b190:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	2b03      	cmp	r3, #3
 800b196:	d131      	bne.n	800b1fc <get_accel_gyro_data+0x266>
        {
            time_0 = data_array[idx++];
 800b198:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b1a2:	3330      	adds	r3, #48	@ 0x30
 800b1a4:	443b      	add	r3, r7
 800b1a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b1aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 800b1ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b1b8:	3330      	adds	r3, #48	@ 0x30
 800b1ba:	443b      	add	r3, r7
 800b1bc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b1c0:	021b      	lsls	r3, r3, #8
 800b1c2:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800b1c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800b1ce:	3330      	adds	r3, #48	@ 0x30
 800b1d0:	443b      	add	r3, r7
 800b1d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800b1d6:	041b      	lsls	r3, r3, #16
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800b1da:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 800b1ea:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	609a      	str	r2, [r3, #8]
 800b1fa:	e009      	b.n	800b210 <get_accel_gyro_data+0x27a>
        }
        else
        {
            accel->sensortime = 0;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2200      	movs	r2, #0
 800b200:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	609a      	str	r2, [r3, #8]
 800b208:	e002      	b.n	800b210 <get_accel_gyro_data+0x27a>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 800b20a:	23fe      	movs	r3, #254	@ 0xfe
 800b20c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800b210:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800b214:	4618      	mov	r0, r3
 800b216:	3730      	adds	r7, #48	@ 0x30
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <perform_accel_self_test>:

/*!
 * @brief This API performs the self test for accelerometer of BMI160
 */
static int8_t perform_accel_self_test(struct bmi160_dev *dev)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	@ 0x28
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    struct bmi160_sensor_data accel_pos, accel_neg;

    /* Enable Gyro self test bit */
    rslt = enable_accel_self_test(dev);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f832 	bl	800b28e <enable_accel_self_test>
 800b22a:	4603      	mov	r3, r0
 800b22c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (rslt == BMI160_OK)
 800b230:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b234:	2b00      	cmp	r3, #0
 800b236:	d124      	bne.n	800b282 <perform_accel_self_test+0x66>
    {
        /* Perform accel self test with positive excitation */
        rslt = accel_self_test_positive_excitation(&accel_pos, dev);
 800b238:	f107 0318 	add.w	r3, r7, #24
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f849 	bl	800b2d6 <accel_self_test_positive_excitation>
 800b244:	4603      	mov	r3, r0
 800b246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (rslt == BMI160_OK)
 800b24a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d117      	bne.n	800b282 <perform_accel_self_test+0x66>
        {
            /* Perform accel self test with negative excitation */
            rslt = accel_self_test_negative_excitation(&accel_neg, dev);
 800b252:	f107 030c 	add.w	r3, r7, #12
 800b256:	6879      	ldr	r1, [r7, #4]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 f862 	bl	800b322 <accel_self_test_negative_excitation>
 800b25e:	4603      	mov	r3, r0
 800b260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BMI160_OK)
 800b264:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <perform_accel_self_test+0x66>
            {
                /* Validate the self test result */
                rslt = validate_accel_self_test(&accel_pos, &accel_neg);
 800b26c:	f107 020c 	add.w	r2, r7, #12
 800b270:	f107 0318 	add.w	r3, r7, #24
 800b274:	4611      	mov	r1, r2
 800b276:	4618      	mov	r0, r3
 800b278:	f000 f879 	bl	800b36e <validate_accel_self_test>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
        }
    }

    return rslt;
 800b282:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b286:	4618      	mov	r0, r3
 800b288:	3728      	adds	r7, #40	@ 0x28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <enable_accel_self_test>:
/*!
 * @brief This API enables to perform the accel self test by setting proper
 * configurations to facilitate accel self test
 */
static int8_t enable_accel_self_test(struct bmi160_dev *dev)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Set the Accel power mode as normal mode */
    dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2211      	movs	r2, #17
 800b29a:	711a      	strb	r2, [r3, #4]

    /* Set the sensor range configuration as 8G */
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2208      	movs	r2, #8
 800b2a0:	719a      	strb	r2, [r3, #6]
    rslt = bmi160_set_sens_conf(dev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7fe fed1 	bl	800a04a <bmi160_set_sens_conf>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b2ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10a      	bne.n	800b2ca <enable_accel_self_test+0x3c>
    {
        /* Accel configurations are set to facilitate self test
         * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
        reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
 800b2b4:	232c      	movs	r3, #44	@ 0x2c
 800b2b6:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
 800b2b8:	f107 010e 	add.w	r1, r7, #14
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	2040      	movs	r0, #64	@ 0x40
 800b2c2:	f7fe fdd6 	bl	8009e72 <bmi160_set_regs>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <accel_self_test_positive_excitation>:

/*!
 * @brief This API performs accel self test with positive excitation
 */
static int8_t accel_self_test_positive_excitation(struct bmi160_sensor_data *accel_pos, const struct bmi160_dev *dev)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with positive self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
 800b2e0:	230d      	movs	r3, #13
 800b2e2:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800b2e4:	f107 010e 	add.w	r1, r7, #14
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	206d      	movs	r0, #109	@ 0x6d
 800b2ee:	f7fe fdc0 	bl	8009e72 <bmi160_set_regs>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10b      	bne.n	800b316 <accel_self_test_positive_excitation+0x40>
    {
        /* Read the data after a delay of 50ms - refer datasheet  2.8.1 accel self test*/
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b302:	2032      	movs	r0, #50	@ 0x32
 800b304:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2200      	movs	r2, #0
 800b30a:	6879      	ldr	r1, [r7, #4]
 800b30c:	2001      	movs	r0, #1
 800b30e:	f7fe fef6 	bl	800a0fe <bmi160_get_sensor_data>
 800b312:	4603      	mov	r3, r0
 800b314:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <accel_self_test_negative_excitation>:

/*!
 * @brief This API performs accel self test with negative excitation
 */
static int8_t accel_self_test_negative_excitation(struct bmi160_sensor_data *accel_neg, const struct bmi160_dev *dev)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable accel self test with negative self-test excitation
     * and with amplitude of deflection set as high */
    reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
 800b32c:	2309      	movs	r3, #9
 800b32e:	73bb      	strb	r3, [r7, #14]
    rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800b330:	f107 010e 	add.w	r1, r7, #14
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	2201      	movs	r2, #1
 800b338:	206d      	movs	r0, #109	@ 0x6d
 800b33a:	f7fe fd9a 	bl	8009e72 <bmi160_set_regs>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <accel_self_test_negative_excitation+0x40>
    {
        /* Read the data after a delay of 50ms */
        dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34e:	2032      	movs	r0, #50	@ 0x32
 800b350:	4798      	blx	r3
        rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2200      	movs	r2, #0
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	2001      	movs	r0, #1
 800b35a:	f7fe fed0 	bl	800a0fe <bmi160_get_sensor_data>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b362:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <validate_accel_self_test>:
/*!
 * @brief This API validates the accel self test results
 */
static int8_t validate_accel_self_test(const struct bmi160_sensor_data *accel_pos,
                                       const struct bmi160_sensor_data *accel_neg)
{
 800b36e:	b480      	push	{r7}
 800b370:	b085      	sub	sp, #20
 800b372:	af00      	add	r7, sp, #0
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Validate the results of self test */
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b37e:	461a      	mov	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b38c:	dd18      	ble.n	800b3c0 <validate_accel_self_test+0x52>
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b394:	461a      	mov	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b39c:	1ad3      	subs	r3, r2, r3
    if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800b39e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3a2:	dd0d      	ble.n	800b3c0 <validate_accel_self_test+0x52>
        ((accel_neg->z - accel_pos->z) > BMI160_ACCEL_SELF_TEST_LIMIT))
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b3b2:	1ad3      	subs	r3, r2, r3
        ((accel_neg->y - accel_pos->y) > BMI160_ACCEL_SELF_TEST_LIMIT) &&
 800b3b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3b8:	dd02      	ble.n	800b3c0 <validate_accel_self_test+0x52>
    {
        /* Self test pass condition */
        rslt = BMI160_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	73fb      	strb	r3, [r7, #15]
 800b3be:	e001      	b.n	800b3c4 <validate_accel_self_test+0x56>
    }
    else
    {
        rslt = BMI160_W_ACCEl_SELF_TEST_FAIL;
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <perform_gyro_self_test>:

/*!
 * @brief This API performs the self test for gyroscope of BMI160
 */
static int8_t perform_gyro_self_test(const struct bmi160_dev *dev)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* Enable Gyro self test bit */
    rslt = enable_gyro_self_test(dev);
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f815 	bl	800b40c <enable_gyro_self_test>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d108      	bne.n	800b400 <perform_gyro_self_test+0x2c>
    {
        /* Validate the gyro self test a delay of 50ms */
        dev->delay_ms(50);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f2:	2032      	movs	r0, #50	@ 0x32
 800b3f4:	4798      	blx	r3

        /* Validate the gyro self test results */
        rslt = validate_gyro_self_test(dev);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f835 	bl	800b466 <validate_gyro_self_test>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800b400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <enable_gyro_self_test>:

/*!
 * @brief This API enables the self test bit to trigger self test for Gyro
 */
static int8_t enable_gyro_self_test(const struct bmi160_dev *dev)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Enable the Gyro self test bit to trigger the self test */
    rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800b414:	f107 010e 	add.w	r1, r7, #14
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	206d      	movs	r0, #109	@ 0x6d
 800b41e:	f7fe fcf5 	bl	8009e0c <bmi160_get_regs>
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d115      	bne.n	800b45a <enable_gyro_self_test+0x4e>
    {
        reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
 800b430:	f043 0310 	orr.w	r3, r3, #16
 800b434:	b2db      	uxtb	r3, r3
 800b436:	73bb      	strb	r3, [r7, #14]
        rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
 800b438:	f107 010e 	add.w	r1, r7, #14
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	206d      	movs	r0, #109	@ 0x6d
 800b442:	f7fe fd16 	bl	8009e72 <bmi160_set_regs>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800b44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d103      	bne.n	800b45a <enable_gyro_self_test+0x4e>
        {
            /* Delay to enable gyro self test */
            dev->delay_ms(15);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b456:	200f      	movs	r0, #15
 800b458:	4798      	blx	r3
        }
    }

    return rslt;
 800b45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <validate_gyro_self_test>:

/*!
 * @brief This API validates the self test results of Gyro
 */
static int8_t validate_gyro_self_test(const struct bmi160_dev *dev)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data;

    /* Validate the Gyro self test result */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
 800b46e:	f107 010e 	add.w	r1, r7, #14
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	201b      	movs	r0, #27
 800b478:	f7fe fcc8 	bl	8009e0c <bmi160_get_regs>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800b480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10e      	bne.n	800b4a6 <validate_gyro_self_test+0x40>
    {

        reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
 800b488:	7bbb      	ldrb	r3, [r7, #14]
 800b48a:	105b      	asrs	r3, r3, #1
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	b2db      	uxtb	r3, r3
 800b494:	73bb      	strb	r3, [r7, #14]
        if (reg_data == BMI160_ENABLE)
 800b496:	7bbb      	ldrb	r3, [r7, #14]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d102      	bne.n	800b4a2 <validate_gyro_self_test+0x3c>
        {
            /* Gyro self test success case */
            rslt = BMI160_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
 800b4a0:	e001      	b.n	800b4a6 <validate_gyro_self_test+0x40>
        }
        else
        {
            rslt = BMI160_W_GYRO_SELF_TEST_FAIL;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800b4a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <bmi160_i2c_write>:
		  Error_Handler();
	  }
}

int8_t bmi160_i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *read_data, uint16_t len)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af04      	add	r7, sp, #16
 800b4ba:	603a      	str	r2, [r7, #0]
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4603      	mov	r3, r0
 800b4c0:	71fb      	strb	r3, [r7, #7]
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	71bb      	strb	r3, [r7, #6]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x0U);
 800b4ca:	79fb      	ldrb	r3, [r7, #7]
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, dev_addr, reg_addr, 1U, read_data, len, HAL_MAX_DELAY);
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	b299      	uxth	r1, r3
 800b4d4:	79bb      	ldrb	r3, [r7, #6]
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	88bb      	ldrh	r3, [r7, #4]
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4803      	ldr	r0, [pc, #12]	@ (800b4f8 <bmi160_i2c_write+0x44>)
 800b4ea:	f7f6 fea9 	bl	8002240 <HAL_I2C_Mem_Write>
	return ( BMI160_OK );
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	200002f4 	.word	0x200002f4

0800b4fc <bmi160_i2c_read>:
int8_t bmi160_i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af04      	add	r7, sp, #16
 800b502:	603a      	str	r2, [r7, #0]
 800b504:	461a      	mov	r2, r3
 800b506:	4603      	mov	r3, r0
 800b508:	71fb      	strb	r3, [r7, #7]
 800b50a:	460b      	mov	r3, r1
 800b50c:	71bb      	strb	r3, [r7, #6]
 800b50e:	4613      	mov	r3, r2
 800b510:	80bb      	strh	r3, [r7, #4]
	dev_addr = ((dev_addr << 1U) | 0x1U);
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f043 0301 	orr.w	r3, r3, #1
 800b51c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr, reg_addr, 1U, data, len, HAL_MAX_DELAY);
 800b51e:	79fb      	ldrb	r3, [r7, #7]
 800b520:	b299      	uxth	r1, r3
 800b522:	79bb      	ldrb	r3, [r7, #6]
 800b524:	b29a      	uxth	r2, r3
 800b526:	f04f 33ff 	mov.w	r3, #4294967295
 800b52a:	9302      	str	r3, [sp, #8]
 800b52c:	88bb      	ldrh	r3, [r7, #4]
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	2301      	movs	r3, #1
 800b536:	4804      	ldr	r0, [pc, #16]	@ (800b548 <bmi160_i2c_read+0x4c>)
 800b538:	f7f6 ff7c 	bl	8002434 <HAL_I2C_Mem_Read>
	return ( BMI160_OK );
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	200002f4 	.word	0x200002f4

0800b54c <delay_ms>:
void delay_ms(uint32_t period)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);		//Systick yerine TIM6 olacak
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7f6 fa43 	bl	80019e0 <HAL_Delay>
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <init_bmi160_sensor_driver_interface>:

int8_t init_bmi160_sensor_driver_interface(struct bmi160_dev *bmi160)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	/*<! Check null-pointer  <!*/
	if( bmi160 == NULL )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <init_bmi160_sensor_driver_interface+0x12>
	{
	  Error_Handler();
 800b572:	f7f5 ffb3 	bl	80014dc <Error_Handler>

#if ( ( BMI160_I2C_INTERFACE) && ( !BMI160_SPI_INTERFACE ) )

	int8_t rslt;

	bmi160_soft_reset(bmi160);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f7fe fd2c 	bl	8009fd4 <bmi160_soft_reset>

	bmi160->id = BMI160_DEV_ADDR;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2268      	movs	r2, #104	@ 0x68
 800b580:	705a      	strb	r2, [r3, #1]
	bmi160->intf = BMI160_I2C_INTF;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	709a      	strb	r2, [r3, #2]
	bmi160->read = bmi160_i2c_read;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a5c      	ldr	r2, [pc, #368]	@ (800b6fc <init_bmi160_sensor_driver_interface+0x198>)
 800b58c:	61da      	str	r2, [r3, #28]
	bmi160->write = bmi160_i2c_write;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	4a5b      	ldr	r2, [pc, #364]	@ (800b700 <init_bmi160_sensor_driver_interface+0x19c>)
 800b592:	621a      	str	r2, [r3, #32]
	bmi160->delay_ms = delay_ms;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a5b      	ldr	r2, [pc, #364]	@ (800b704 <init_bmi160_sensor_driver_interface+0x1a0>)
 800b598:	625a      	str	r2, [r3, #36]	@ 0x24

	/* After sensor init introduce 200 msec sleep */
	bmi160->delay_ms(200);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b59e:	20c8      	movs	r0, #200	@ 0xc8
 800b5a0:	4798      	blx	r3

	rslt = bmi160_init(bmi160);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7fe fcc8 	bl	8009f38 <bmi160_init>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	77fb      	strb	r3, [r7, #31]

	if ( rslt != BMI160_OK )
 800b5ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d004      	beq.n	800b5be <init_bmi160_sensor_driver_interface+0x5a>
	{
		printf("BMI160 initialization failure !\n");
 800b5b4:	4854      	ldr	r0, [pc, #336]	@ (800b708 <init_bmi160_sensor_driver_interface+0x1a4>)
 800b5b6:	f001 fdab 	bl	800d110 <puts>
		Error_Handler();
 800b5ba:	f7f5 ff8f 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 initialization success !\n");
 800b5be:	4853      	ldr	r0, [pc, #332]	@ (800b70c <init_bmi160_sensor_driver_interface+0x1a8>)
 800b5c0:	f001 fda6 	bl	800d110 <puts>
	printf("Chip ID 0x%X\n" , bmi160->chip_id);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4851      	ldr	r0, [pc, #324]	@ (800b710 <init_bmi160_sensor_driver_interface+0x1ac>)
 800b5cc:	f001 fd38 	bl	800d040 <iprintf>

	//acceleration self-test configuration
	rslt = bmi160_perform_self_test(BMI160_ACCEL_ONLY,bmi160);
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	f7fe fdfa 	bl	800a1cc <bmi160_perform_self_test>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b5dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d004      	beq.n	800b5ee <init_bmi160_sensor_driver_interface+0x8a>
	{
		printf("BMI160 acceleration self-test failure !\n");
 800b5e4:	484b      	ldr	r0, [pc, #300]	@ (800b714 <init_bmi160_sensor_driver_interface+0x1b0>)
 800b5e6:	f001 fd93 	bl	800d110 <puts>
		Error_Handler();
 800b5ea:	f7f5 ff77 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 acceleration self-test success !\n");
 800b5ee:	484a      	ldr	r0, [pc, #296]	@ (800b718 <init_bmi160_sensor_driver_interface+0x1b4>)
 800b5f0:	f001 fd8e 	bl	800d110 <puts>

	//gyroscope self-test configuration
	rslt = bmi160_perform_self_test(BMI160_GYRO_ONLY,bmi160);
 800b5f4:	6879      	ldr	r1, [r7, #4]
 800b5f6:	2002      	movs	r0, #2
 800b5f8:	f7fe fde8 	bl	800a1cc <bmi160_perform_self_test>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b600:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <init_bmi160_sensor_driver_interface+0xae>
	{
		printf("BMI160 gyroscope self-test failure !\n");
 800b608:	4844      	ldr	r0, [pc, #272]	@ (800b71c <init_bmi160_sensor_driver_interface+0x1b8>)
 800b60a:	f001 fd81 	bl	800d110 <puts>
		Error_Handler();
 800b60e:	f7f5 ff65 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 gyroscope self-test success !\n");
 800b612:	4843      	ldr	r0, [pc, #268]	@ (800b720 <init_bmi160_sensor_driver_interface+0x1bc>)
 800b614:	f001 fd7c 	bl	800d110 <puts>

	/* Select the Output data rate, range of accelerometer sensor */
	bmi160->accel_cfg.odr = BMI160_ACCEL_ODR_1600HZ;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	220c      	movs	r2, #12
 800b61c:	715a      	strb	r2, [r3, #5]
	bmi160->accel_cfg.range = BMI160_ACCEL_RANGE_16G;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	220c      	movs	r2, #12
 800b622:	719a      	strb	r2, [r3, #6]
	bmi160->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	71da      	strb	r2, [r3, #7]

	/* Select the power mode of accelerometer sensor */
	bmi160->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2211      	movs	r2, #17
 800b62e:	711a      	strb	r2, [r3, #4]

	/* Select the Output data rate, range of Gyroscope sensor */
	bmi160->gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	220d      	movs	r2, #13
 800b634:	735a      	strb	r2, [r3, #13]
	bmi160->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	739a      	strb	r2, [r3, #14]
	bmi160->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	73da      	strb	r2, [r3, #15]

	/* Select the power mode of Gyroscope sensor */
	bmi160->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2215      	movs	r2, #21
 800b646:	731a      	strb	r2, [r3, #12]

	/* Set the sensor configuration */
	rslt = bmi160_set_power_mode(bmi160);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7fe fd34 	bl	800a0b6 <bmi160_set_power_mode>
 800b64e:	4603      	mov	r3, r0
 800b650:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b652:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d004      	beq.n	800b664 <init_bmi160_sensor_driver_interface+0x100>
	{
		printf("BMI160 sensor configuration failure !\n");
 800b65a:	4832      	ldr	r0, [pc, #200]	@ (800b724 <init_bmi160_sensor_driver_interface+0x1c0>)
 800b65c:	f001 fd58 	bl	800d110 <puts>
		Error_Handler();
 800b660:	f7f5 ff3c 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 sensor configuration success !\n");
 800b664:	4830      	ldr	r0, [pc, #192]	@ (800b728 <init_bmi160_sensor_driver_interface+0x1c4>)
 800b666:	f001 fd53 	bl	800d110 <puts>

	struct bmi160_offsets bmi160_offset = {0};
 800b66a:	f107 0314 	add.w	r3, r7, #20
 800b66e:	2200      	movs	r2, #0
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	605a      	str	r2, [r3, #4]
 800b674:	811a      	strh	r2, [r3, #8]
	struct bmi160_foc_conf bmi160_foc = {0};
 800b676:	f107 030c 	add.w	r3, r7, #12
 800b67a:	2200      	movs	r2, #0
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	809a      	strh	r2, [r3, #4]

	rslt = bmi160_get_offsets(&bmi160_offset,bmi160);
 800b680:	f107 0314 	add.w	r3, r7, #20
 800b684:	6879      	ldr	r1, [r7, #4]
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe fded 	bl	800a266 <bmi160_get_offsets>
 800b68c:	4603      	mov	r3, r0
 800b68e:	77fb      	strb	r3, [r7, #31]

	if( rslt != BMI160_OK )
 800b690:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d004      	beq.n	800b6a2 <init_bmi160_sensor_driver_interface+0x13e>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b698:	4824      	ldr	r0, [pc, #144]	@ (800b72c <init_bmi160_sensor_driver_interface+0x1c8>)
 800b69a:	f001 fd39 	bl	800d110 <puts>
		Error_Handler();
 800b69e:	f7f5 ff1d 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b6a2:	4823      	ldr	r0, [pc, #140]	@ (800b730 <init_bmi160_sensor_driver_interface+0x1cc>)
 800b6a4:	f001 fd34 	bl	800d110 <puts>

	bmi160_foc.acc_off_en = BMI160_ENABLE;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	743b      	strb	r3, [r7, #16]
	bmi160_foc.gyro_off_en = BMI160_ENABLE;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	747b      	strb	r3, [r7, #17]
	bmi160_foc.foc_gyr_en = BMI160_FOC_ACCEL_POSITIVE_G;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	733b      	strb	r3, [r7, #12]
	bmi160_foc.foc_acc_x = BMI160_FOC_ACCEL_POSITIVE_G;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	737b      	strb	r3, [r7, #13]
	bmi160_foc.foc_acc_y = BMI160_FOC_ACCEL_POSITIVE_G;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73bb      	strb	r3, [r7, #14]
	bmi160_foc.foc_acc_z = BMI160_FOC_ACCEL_POSITIVE_G;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	73fb      	strb	r3, [r7, #15]

	bmi160_set_offsets(&bmi160_foc, &bmi160_offset, bmi160);
 800b6c0:	f107 0114 	add.w	r1, r7, #20
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fe4c 	bl	800a368 <bmi160_set_offsets>

	if( rslt != BMI160_OK )
 800b6d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <init_bmi160_sensor_driver_interface+0x17e>
	{
		printf("BMI160 sensor offset value failure !\n");
 800b6d8:	4814      	ldr	r0, [pc, #80]	@ (800b72c <init_bmi160_sensor_driver_interface+0x1c8>)
 800b6da:	f001 fd19 	bl	800d110 <puts>
		Error_Handler();
 800b6de:	f7f5 fefd 	bl	80014dc <Error_Handler>
	}

	printf("BMI160 sensor offset value success !\n");
 800b6e2:	4813      	ldr	r0, [pc, #76]	@ (800b730 <init_bmi160_sensor_driver_interface+0x1cc>)
 800b6e4:	f001 fd14 	bl	800d110 <puts>

	HAL_Delay(2000);
 800b6e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b6ec:	f7f6 f978 	bl	80019e0 <HAL_Delay>

	return ( BMI160_OK );
 800b6f0:	2300      	movs	r3, #0

	#else
		Error_Handler();
	#endif
	return ( BMI160_E_INVALID_CONFIG );
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	0800b4fd 	.word	0x0800b4fd
 800b700:	0800b4b5 	.word	0x0800b4b5
 800b704:	0800b54d 	.word	0x0800b54d
 800b708:	080122e4 	.word	0x080122e4
 800b70c:	08012304 	.word	0x08012304
 800b710:	08012324 	.word	0x08012324
 800b714:	08012334 	.word	0x08012334
 800b718:	0801235c 	.word	0x0801235c
 800b71c:	08012384 	.word	0x08012384
 800b720:	080123ac 	.word	0x080123ac
 800b724:	080123d4 	.word	0x080123d4
 800b728:	080123fc 	.word	0x080123fc
 800b72c:	08012424 	.word	0x08012424
 800b730:	0801244c 	.word	0x0801244c

0800b734 <HAL_TIM_PeriodElapsedCallback>:

	counter = 0U;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
	if ( htim == NULL )
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_TIM_PeriodElapsedCallback+0x12>
	{
		Error_Handler();
 800b742:	f7f5 fecb 	bl	80014dc <Error_Handler>
	}

	if ( htim->Instance == (TIM_TypeDef*)(bmp388_intf.htim->Instance) )
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	4b07      	ldr	r3, [pc, #28]	@ (800b768 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d104      	bne.n	800b75e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		++counter;
 800b754:	4b05      	ldr	r3, [pc, #20]	@ (800b76c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	3301      	adds	r3, #1
 800b75a:	4a04      	ldr	r2, [pc, #16]	@ (800b76c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800b75c:	6013      	str	r3, [r2, #0]
	}

}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20000000 	.word	0x20000000
 800b76c:	20000508 	.word	0x20000508

0800b770 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b774:	2200      	movs	r2, #0
 800b776:	4912      	ldr	r1, [pc, #72]	@ (800b7c0 <MX_USB_DEVICE_Init+0x50>)
 800b778:	4812      	ldr	r0, [pc, #72]	@ (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b77a:	f7fc fae1 	bl	8007d40 <USBD_Init>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d001      	beq.n	800b788 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b784:	f7f5 feaa 	bl	80014dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b788:	490f      	ldr	r1, [pc, #60]	@ (800b7c8 <MX_USB_DEVICE_Init+0x58>)
 800b78a:	480e      	ldr	r0, [pc, #56]	@ (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b78c:	f7fc fb08 	bl	8007da0 <USBD_RegisterClass>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b796:	f7f5 fea1 	bl	80014dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b79a:	490c      	ldr	r1, [pc, #48]	@ (800b7cc <MX_USB_DEVICE_Init+0x5c>)
 800b79c:	4809      	ldr	r0, [pc, #36]	@ (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b79e:	f7fc fa3f 	bl	8007c20 <USBD_CDC_RegisterInterface>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7a8:	f7f5 fe98 	bl	80014dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7ac:	4805      	ldr	r0, [pc, #20]	@ (800b7c4 <MX_USB_DEVICE_Init+0x54>)
 800b7ae:	f7fc fb2d 	bl	8007e0c <USBD_Start>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7b8:	f7f5 fe90 	bl	80014dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7bc:	bf00      	nop
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	200000bc 	.word	0x200000bc
 800b7c4:	2000050c 	.word	0x2000050c
 800b7c8:	20000028 	.word	0x20000028
 800b7cc:	200000a8 	.word	0x200000a8

0800b7d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4905      	ldr	r1, [pc, #20]	@ (800b7ec <CDC_Init_FS+0x1c>)
 800b7d8:	4805      	ldr	r0, [pc, #20]	@ (800b7f0 <CDC_Init_FS+0x20>)
 800b7da:	f7fc fa3b 	bl	8007c54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b7de:	4905      	ldr	r1, [pc, #20]	@ (800b7f4 <CDC_Init_FS+0x24>)
 800b7e0:	4803      	ldr	r0, [pc, #12]	@ (800b7f0 <CDC_Init_FS+0x20>)
 800b7e2:	f7fc fa59 	bl	8007c98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b7e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	20000ff0 	.word	0x20000ff0
 800b7f0:	2000050c 	.word	0x2000050c
 800b7f4:	200007f0 	.word	0x200007f0

0800b7f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	6039      	str	r1, [r7, #0]
 800b812:	71fb      	strb	r3, [r7, #7]
 800b814:	4613      	mov	r3, r2
 800b816:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	2b23      	cmp	r3, #35	@ 0x23
 800b81c:	f200 808c 	bhi.w	800b938 <CDC_Control_FS+0x130>
 800b820:	a201      	add	r2, pc, #4	@ (adr r2, 800b828 <CDC_Control_FS+0x20>)
 800b822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b826:	bf00      	nop
 800b828:	0800b939 	.word	0x0800b939
 800b82c:	0800b939 	.word	0x0800b939
 800b830:	0800b939 	.word	0x0800b939
 800b834:	0800b939 	.word	0x0800b939
 800b838:	0800b939 	.word	0x0800b939
 800b83c:	0800b939 	.word	0x0800b939
 800b840:	0800b939 	.word	0x0800b939
 800b844:	0800b939 	.word	0x0800b939
 800b848:	0800b939 	.word	0x0800b939
 800b84c:	0800b939 	.word	0x0800b939
 800b850:	0800b939 	.word	0x0800b939
 800b854:	0800b939 	.word	0x0800b939
 800b858:	0800b939 	.word	0x0800b939
 800b85c:	0800b939 	.word	0x0800b939
 800b860:	0800b939 	.word	0x0800b939
 800b864:	0800b939 	.word	0x0800b939
 800b868:	0800b939 	.word	0x0800b939
 800b86c:	0800b939 	.word	0x0800b939
 800b870:	0800b939 	.word	0x0800b939
 800b874:	0800b939 	.word	0x0800b939
 800b878:	0800b939 	.word	0x0800b939
 800b87c:	0800b939 	.word	0x0800b939
 800b880:	0800b939 	.word	0x0800b939
 800b884:	0800b939 	.word	0x0800b939
 800b888:	0800b939 	.word	0x0800b939
 800b88c:	0800b939 	.word	0x0800b939
 800b890:	0800b939 	.word	0x0800b939
 800b894:	0800b939 	.word	0x0800b939
 800b898:	0800b939 	.word	0x0800b939
 800b89c:	0800b939 	.word	0x0800b939
 800b8a0:	0800b939 	.word	0x0800b939
 800b8a4:	0800b939 	.word	0x0800b939
 800b8a8:	0800b8b9 	.word	0x0800b8b9
 800b8ac:	0800b8f3 	.word	0x0800b8f3
 800b8b0:	0800b939 	.word	0x0800b939
 800b8b4:	0800b939 	.word	0x0800b939
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	4b22      	ldr	r3, [pc, #136]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8be:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	785a      	ldrb	r2, [r3, #1]
 800b8c4:	4b20      	ldr	r3, [pc, #128]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8c6:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	789a      	ldrb	r2, [r3, #2]
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8ce:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	78da      	ldrb	r2, [r3, #3]
 800b8d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8d6:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	791a      	ldrb	r2, [r3, #4]
 800b8dc:	4b1a      	ldr	r3, [pc, #104]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8de:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	795a      	ldrb	r2, [r3, #5]
 800b8e4:	4b18      	ldr	r3, [pc, #96]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8e6:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	799a      	ldrb	r2, [r3, #6]
 800b8ec:	4b16      	ldr	r3, [pc, #88]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8ee:	719a      	strb	r2, [r3, #6]
    break;
 800b8f0:	e023      	b.n	800b93a <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 800b8f2:	4b15      	ldr	r3, [pc, #84]	@ (800b948 <CDC_Control_FS+0x140>)
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	4a12      	ldr	r2, [pc, #72]	@ (800b948 <CDC_Control_FS+0x140>)
 800b900:	7852      	ldrb	r2, [r2, #1]
 800b902:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	3302      	adds	r3, #2
 800b908:	4a0f      	ldr	r2, [pc, #60]	@ (800b948 <CDC_Control_FS+0x140>)
 800b90a:	7892      	ldrb	r2, [r2, #2]
 800b90c:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	3303      	adds	r3, #3
 800b912:	4a0d      	ldr	r2, [pc, #52]	@ (800b948 <CDC_Control_FS+0x140>)
 800b914:	78d2      	ldrb	r2, [r2, #3]
 800b916:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	3304      	adds	r3, #4
 800b91c:	4a0a      	ldr	r2, [pc, #40]	@ (800b948 <CDC_Control_FS+0x140>)
 800b91e:	7912      	ldrb	r2, [r2, #4]
 800b920:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	3305      	adds	r3, #5
 800b926:	4a08      	ldr	r2, [pc, #32]	@ (800b948 <CDC_Control_FS+0x140>)
 800b928:	7952      	ldrb	r2, [r2, #5]
 800b92a:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	3306      	adds	r3, #6
 800b930:	4a05      	ldr	r2, [pc, #20]	@ (800b948 <CDC_Control_FS+0x140>)
 800b932:	7992      	ldrb	r2, [r2, #6]
 800b934:	701a      	strb	r2, [r3, #0]
    break;
 800b936:	e000      	b.n	800b93a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b938:	bf00      	nop
  }

  return (USBD_OK);
 800b93a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr
 800b948:	200007e8 	.word	0x200007e8

0800b94c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b956:	6879      	ldr	r1, [r7, #4]
 800b958:	4808      	ldr	r0, [pc, #32]	@ (800b97c <CDC_Receive_FS+0x30>)
 800b95a:	f7fc f99d 	bl	8007c98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b95e:	4807      	ldr	r0, [pc, #28]	@ (800b97c <CDC_Receive_FS+0x30>)
 800b960:	f7fc f9b8 	bl	8007cd4 <USBD_CDC_ReceivePacket>
  usb_ch = Buf[0];
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	781a      	ldrb	r2, [r3, #0]
 800b968:	4b05      	ldr	r3, [pc, #20]	@ (800b980 <CDC_Receive_FS+0x34>)
 800b96a:	701a      	strb	r2, [r3, #0]
  flag=1;
 800b96c:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <CDC_Receive_FS+0x38>)
 800b96e:	2201      	movs	r2, #1
 800b970:	601a      	str	r2, [r3, #0]
  return (USBD_OK);
 800b972:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	2000050c 	.word	0x2000050c
 800b980:	200004c8 	.word	0x200004c8
 800b984:	200004cc 	.word	0x200004cc

0800b988 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	4613      	mov	r3, r2
 800b994:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	371c      	adds	r7, #28
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
	...

0800b9ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	6039      	str	r1, [r7, #0]
 800b9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	2212      	movs	r2, #18
 800b9bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9be:	4b03      	ldr	r3, [pc, #12]	@ (800b9cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	200000d8 	.word	0x200000d8

0800b9d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6039      	str	r1, [r7, #0]
 800b9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	2204      	movs	r2, #4
 800b9e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9e2:	4b03      	ldr	r3, [pc, #12]	@ (800b9f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	200000ec 	.word	0x200000ec

0800b9f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	6039      	str	r1, [r7, #0]
 800b9fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba00:	79fb      	ldrb	r3, [r7, #7]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d105      	bne.n	800ba12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	4907      	ldr	r1, [pc, #28]	@ (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba0a:	4808      	ldr	r0, [pc, #32]	@ (800ba2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba0c:	f7fd fbae 	bl	800916c <USBD_GetString>
 800ba10:	e004      	b.n	800ba1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4904      	ldr	r1, [pc, #16]	@ (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba16:	4805      	ldr	r0, [pc, #20]	@ (800ba2c <USBD_FS_ProductStrDescriptor+0x38>)
 800ba18:	f7fd fba8 	bl	800916c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba1c:	4b02      	ldr	r3, [pc, #8]	@ (800ba28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	200017f0 	.word	0x200017f0
 800ba2c:	08012474 	.word	0x08012474

0800ba30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	4904      	ldr	r1, [pc, #16]	@ (800ba50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba40:	4804      	ldr	r0, [pc, #16]	@ (800ba54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba42:	f7fd fb93 	bl	800916c <USBD_GetString>
  return USBD_StrDesc;
 800ba46:	4b02      	ldr	r3, [pc, #8]	@ (800ba50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	200017f0 	.word	0x200017f0
 800ba54:	0801247c 	.word	0x0801247c

0800ba58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	6039      	str	r1, [r7, #0]
 800ba62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	221a      	movs	r2, #26
 800ba68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba6a:	f000 f843 	bl	800baf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba6e:	4b02      	ldr	r3, [pc, #8]	@ (800ba78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200000f0 	.word	0x200000f0

0800ba7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d105      	bne.n	800ba9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4907      	ldr	r1, [pc, #28]	@ (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba92:	4808      	ldr	r0, [pc, #32]	@ (800bab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba94:	f7fd fb6a 	bl	800916c <USBD_GetString>
 800ba98:	e004      	b.n	800baa4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	4904      	ldr	r1, [pc, #16]	@ (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba9e:	4805      	ldr	r0, [pc, #20]	@ (800bab4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baa0:	f7fd fb64 	bl	800916c <USBD_GetString>
  }
  return USBD_StrDesc;
 800baa4:	4b02      	ldr	r3, [pc, #8]	@ (800bab0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3708      	adds	r7, #8
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	200017f0 	.word	0x200017f0
 800bab4:	08012490 	.word	0x08012490

0800bab8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	4907      	ldr	r1, [pc, #28]	@ (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bace:	4808      	ldr	r0, [pc, #32]	@ (800baf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bad0:	f7fd fb4c 	bl	800916c <USBD_GetString>
 800bad4:	e004      	b.n	800bae0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4904      	ldr	r1, [pc, #16]	@ (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bada:	4805      	ldr	r0, [pc, #20]	@ (800baf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800badc:	f7fd fb46 	bl	800916c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae0:	4b02      	ldr	r3, [pc, #8]	@ (800baec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200017f0 	.word	0x200017f0
 800baf0:	0801249c 	.word	0x0801249c

0800baf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bafa:	4b0f      	ldr	r3, [pc, #60]	@ (800bb38 <Get_SerialNum+0x44>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb00:	4b0e      	ldr	r3, [pc, #56]	@ (800bb3c <Get_SerialNum+0x48>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb06:	4b0e      	ldr	r3, [pc, #56]	@ (800bb40 <Get_SerialNum+0x4c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4413      	add	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb1a:	2208      	movs	r2, #8
 800bb1c:	4909      	ldr	r1, [pc, #36]	@ (800bb44 <Get_SerialNum+0x50>)
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 f814 	bl	800bb4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb24:	2204      	movs	r2, #4
 800bb26:	4908      	ldr	r1, [pc, #32]	@ (800bb48 <Get_SerialNum+0x54>)
 800bb28:	68b8      	ldr	r0, [r7, #8]
 800bb2a:	f000 f80f 	bl	800bb4c <IntToUnicode>
  }
}
 800bb2e:	bf00      	nop
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	1fff7a10 	.word	0x1fff7a10
 800bb3c:	1fff7a14 	.word	0x1fff7a14
 800bb40:	1fff7a18 	.word	0x1fff7a18
 800bb44:	200000f2 	.word	0x200000f2
 800bb48:	20000102 	.word	0x20000102

0800bb4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]
 800bb62:	e027      	b.n	800bbb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	0f1b      	lsrs	r3, r3, #28
 800bb68:	2b09      	cmp	r3, #9
 800bb6a:	d80b      	bhi.n	800bb84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	0f1b      	lsrs	r3, r3, #28
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4619      	mov	r1, r3
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3230      	adds	r2, #48	@ 0x30
 800bb7e:	b2d2      	uxtb	r2, r2
 800bb80:	701a      	strb	r2, [r3, #0]
 800bb82:	e00a      	b.n	800bb9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	0f1b      	lsrs	r3, r3, #28
 800bb88:	b2da      	uxtb	r2, r3
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	005b      	lsls	r3, r3, #1
 800bb8e:	4619      	mov	r1, r3
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	440b      	add	r3, r1
 800bb94:	3237      	adds	r2, #55	@ 0x37
 800bb96:	b2d2      	uxtb	r2, r2
 800bb98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	011b      	lsls	r3, r3, #4
 800bb9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	3301      	adds	r3, #1
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	4413      	add	r3, r2
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	75fb      	strb	r3, [r7, #23]
 800bbb4:	7dfa      	ldrb	r2, [r7, #23]
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d3d3      	bcc.n	800bb64 <IntToUnicode+0x18>
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
	...

0800bbcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08a      	sub	sp, #40	@ 0x28
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]
 800bbdc:	605a      	str	r2, [r3, #4]
 800bbde:	609a      	str	r2, [r3, #8]
 800bbe0:	60da      	str	r2, [r3, #12]
 800bbe2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbec:	d13a      	bne.n	800bc64 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbee:	2300      	movs	r3, #0
 800bbf0:	613b      	str	r3, [r7, #16]
 800bbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bbf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbf6:	4a1d      	ldr	r2, [pc, #116]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bbf8:	f043 0301 	orr.w	r3, r3, #1
 800bbfc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbfe:	4b1b      	ldr	r3, [pc, #108]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc02:	f003 0301 	and.w	r3, r3, #1
 800bc06:	613b      	str	r3, [r7, #16]
 800bc08:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc0a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bc0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc10:	2302      	movs	r3, #2
 800bc12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc1c:	230a      	movs	r3, #10
 800bc1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc20:	f107 0314 	add.w	r3, r7, #20
 800bc24:	4619      	mov	r1, r3
 800bc26:	4812      	ldr	r0, [pc, #72]	@ (800bc70 <HAL_PCD_MspInit+0xa4>)
 800bc28:	f7f6 f810 	bl	8001c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc30:	4a0e      	ldr	r2, [pc, #56]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc36:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc38:	2300      	movs	r3, #0
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc40:	4a0a      	ldr	r2, [pc, #40]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc46:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc48:	4b08      	ldr	r3, [pc, #32]	@ (800bc6c <HAL_PCD_MspInit+0xa0>)
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc54:	2200      	movs	r2, #0
 800bc56:	2100      	movs	r1, #0
 800bc58:	2043      	movs	r0, #67	@ 0x43
 800bc5a:	f7f5 ffc0 	bl	8001bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc5e:	2043      	movs	r0, #67	@ 0x43
 800bc60:	f7f5 ffd9 	bl	8001c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc64:	bf00      	nop
 800bc66:	3728      	adds	r7, #40	@ 0x28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	40023800 	.word	0x40023800
 800bc70:	40020000 	.word	0x40020000

0800bc74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f7fc f90b 	bl	8007ea6 <USBD_LL_SetupStage>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bcaa:	78fa      	ldrb	r2, [r7, #3]
 800bcac:	6879      	ldr	r1, [r7, #4]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	00db      	lsls	r3, r3, #3
 800bcb2:	4413      	add	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	440b      	add	r3, r1
 800bcb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	78fb      	ldrb	r3, [r7, #3]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f7fc f945 	bl	8007f50 <USBD_LL_DataOutStage>
}
 800bcc6:	bf00      	nop
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}

0800bcce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcce:	b580      	push	{r7, lr}
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	af00      	add	r7, sp, #0
 800bcd4:	6078      	str	r0, [r7, #4]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bce0:	78fa      	ldrb	r2, [r7, #3]
 800bce2:	6879      	ldr	r1, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	440b      	add	r3, r1
 800bcee:	3320      	adds	r3, #32
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	78fb      	ldrb	r3, [r7, #3]
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f7fc f9de 	bl	80080b6 <USBD_LL_DataInStage>
}
 800bcfa:	bf00      	nop
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fc fb18 	bl	8008346 <USBD_LL_SOF>
}
 800bd16:	bf00      	nop
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd26:	2301      	movs	r3, #1
 800bd28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	79db      	ldrb	r3, [r3, #7]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]
 800bd36:	e008      	b.n	800bd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	79db      	ldrb	r3, [r3, #7]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d102      	bne.n	800bd46 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd40:	2301      	movs	r3, #1
 800bd42:	73fb      	strb	r3, [r7, #15]
 800bd44:	e001      	b.n	800bd4a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd46:	f7f5 fbc9 	bl	80014dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd50:	7bfa      	ldrb	r2, [r7, #15]
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fc fab2 	bl	80082be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fc fa5a 	bl	800821a <USBD_LL_Reset>
}
 800bd66:	bf00      	nop
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
	...

0800bd70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fc faad 	bl	80082de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	6812      	ldr	r2, [r2, #0]
 800bd92:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7adb      	ldrb	r3, [r3, #11]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bda4:	4b04      	ldr	r3, [pc, #16]	@ (800bdb8 <HAL_PCD_SuspendCallback+0x48>)
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	4a03      	ldr	r2, [pc, #12]	@ (800bdb8 <HAL_PCD_SuspendCallback+0x48>)
 800bdaa:	f043 0306 	orr.w	r3, r3, #6
 800bdae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fc faa3 	bl	8008316 <USBD_LL_Resume>
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	460b      	mov	r3, r1
 800bde2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdea:	78fa      	ldrb	r2, [r7, #3]
 800bdec:	4611      	mov	r1, r2
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7fc fafb 	bl	80083ea <USBD_LL_IsoOUTIncomplete>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b082      	sub	sp, #8
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	460b      	mov	r3, r1
 800be06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be0e:	78fa      	ldrb	r2, [r7, #3]
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f7fc fab7 	bl	8008386 <USBD_LL_IsoINIncomplete>
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be2e:	4618      	mov	r0, r3
 800be30:	f7fc fb0d 	bl	800844e <USBD_LL_DevConnected>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7fc fb0a 	bl	8008464 <USBD_LL_DevDisconnected>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d13c      	bne.n	800bee2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be68:	4a20      	ldr	r2, [pc, #128]	@ (800beec <USBD_LL_Init+0x94>)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a1e      	ldr	r2, [pc, #120]	@ (800beec <USBD_LL_Init+0x94>)
 800be74:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be78:	4b1c      	ldr	r3, [pc, #112]	@ (800beec <USBD_LL_Init+0x94>)
 800be7a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800be7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be80:	4b1a      	ldr	r3, [pc, #104]	@ (800beec <USBD_LL_Init+0x94>)
 800be82:	2204      	movs	r2, #4
 800be84:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be86:	4b19      	ldr	r3, [pc, #100]	@ (800beec <USBD_LL_Init+0x94>)
 800be88:	2202      	movs	r2, #2
 800be8a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be8c:	4b17      	ldr	r3, [pc, #92]	@ (800beec <USBD_LL_Init+0x94>)
 800be8e:	2200      	movs	r2, #0
 800be90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be92:	4b16      	ldr	r3, [pc, #88]	@ (800beec <USBD_LL_Init+0x94>)
 800be94:	2202      	movs	r2, #2
 800be96:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be98:	4b14      	ldr	r3, [pc, #80]	@ (800beec <USBD_LL_Init+0x94>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be9e:	4b13      	ldr	r3, [pc, #76]	@ (800beec <USBD_LL_Init+0x94>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bea4:	4b11      	ldr	r3, [pc, #68]	@ (800beec <USBD_LL_Init+0x94>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800beaa:	4b10      	ldr	r3, [pc, #64]	@ (800beec <USBD_LL_Init+0x94>)
 800beac:	2200      	movs	r2, #0
 800beae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800beb0:	4b0e      	ldr	r3, [pc, #56]	@ (800beec <USBD_LL_Init+0x94>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800beb6:	480d      	ldr	r0, [pc, #52]	@ (800beec <USBD_LL_Init+0x94>)
 800beb8:	f7f7 f9d0 	bl	800325c <HAL_PCD_Init>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d001      	beq.n	800bec6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bec2:	f7f5 fb0b 	bl	80014dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bec6:	2180      	movs	r1, #128	@ 0x80
 800bec8:	4808      	ldr	r0, [pc, #32]	@ (800beec <USBD_LL_Init+0x94>)
 800beca:	f7f8 fbfc 	bl	80046c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bece:	2240      	movs	r2, #64	@ 0x40
 800bed0:	2100      	movs	r1, #0
 800bed2:	4806      	ldr	r0, [pc, #24]	@ (800beec <USBD_LL_Init+0x94>)
 800bed4:	f7f8 fbb0 	bl	8004638 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bed8:	2280      	movs	r2, #128	@ 0x80
 800beda:	2101      	movs	r1, #1
 800bedc:	4803      	ldr	r0, [pc, #12]	@ (800beec <USBD_LL_Init+0x94>)
 800bede:	f7f8 fbab 	bl	8004638 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3708      	adds	r7, #8
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200019f0 	.word	0x200019f0

0800bef0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7f7 fab7 	bl	800347a <HAL_PCD_Start>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf10:	7bfb      	ldrb	r3, [r7, #15]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 f942 	bl	800c19c <USBD_Get_USB_Status>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	4611      	mov	r1, r2
 800bf32:	461a      	mov	r2, r3
 800bf34:	4603      	mov	r3, r0
 800bf36:	70fb      	strb	r3, [r7, #3]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70bb      	strb	r3, [r7, #2]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf4e:	78bb      	ldrb	r3, [r7, #2]
 800bf50:	883a      	ldrh	r2, [r7, #0]
 800bf52:	78f9      	ldrb	r1, [r7, #3]
 800bf54:	f7f7 ff8b 	bl	8003e6e <HAL_PCD_EP_Open>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f000 f91c 	bl	800c19c <USBD_Get_USB_Status>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b084      	sub	sp, #16
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f7 ffd6 	bl	8003f42 <HAL_PCD_EP_Close>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9a:	7bfb      	ldrb	r3, [r7, #15]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f8fd 	bl	800c19c <USBD_Get_USB_Status>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	460b      	mov	r3, r1
 800bfba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfca:	78fa      	ldrb	r2, [r7, #3]
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f8 f88e 	bl	80040f0 <HAL_PCD_EP_SetStall>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 f8de 	bl	800c19c <USBD_Get_USB_Status>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b084      	sub	sp, #16
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	460b      	mov	r3, r1
 800bff8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4611      	mov	r1, r2
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7f8 f8d2 	bl	80041b6 <HAL_PCD_EP_ClrStall>
 800c012:	4603      	mov	r3, r0
 800c014:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f8bf 	bl	800c19c <USBD_Get_USB_Status>
 800c01e:	4603      	mov	r3, r0
 800c020:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c022:	7bbb      	ldrb	r3, [r7, #14]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	460b      	mov	r3, r1
 800c036:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c03e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c040:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c044:	2b00      	cmp	r3, #0
 800c046:	da0b      	bge.n	800c060 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	4613      	mov	r3, r2
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	4413      	add	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	440b      	add	r3, r1
 800c05a:	3316      	adds	r3, #22
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	e00b      	b.n	800c078 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c060:	78fb      	ldrb	r3, [r7, #3]
 800c062:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c066:	68f9      	ldr	r1, [r7, #12]
 800c068:	4613      	mov	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	4413      	add	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	440b      	add	r3, r1
 800c072:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c076:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f7 febf 	bl	8003e26 <HAL_PCD_SetAddress>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f874 	bl	800c19c <USBD_Get_USB_Status>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b086      	sub	sp, #24
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0e0:	7af9      	ldrb	r1, [r7, #11]
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	687a      	ldr	r2, [r7, #4]
 800c0e6:	f7f7 ffc9 	bl	800407c <HAL_PCD_EP_Transmit>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f853 	bl	800c19c <USBD_Get_USB_Status>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	607a      	str	r2, [r7, #4]
 800c10e:	603b      	str	r3, [r7, #0]
 800c110:	460b      	mov	r3, r1
 800c112:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c122:	7af9      	ldrb	r1, [r7, #11]
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	f7f7 ff55 	bl	8003fd6 <HAL_PCD_EP_Receive>
 800c12c:	4603      	mov	r3, r0
 800c12e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c130:	7dfb      	ldrb	r3, [r7, #23]
 800c132:	4618      	mov	r0, r3
 800c134:	f000 f832 	bl	800c19c <USBD_Get_USB_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c13c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b082      	sub	sp, #8
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c158:	78fa      	ldrb	r2, [r7, #3]
 800c15a:	4611      	mov	r1, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7f7 ff75 	bl	800404c <HAL_PCD_EP_GetRxCount>
 800c162:	4603      	mov	r3, r0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c174:	4b03      	ldr	r3, [pc, #12]	@ (800c184 <USBD_static_malloc+0x18>)
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	20001ed4 	.word	0x20001ed4

0800c188 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]

}
 800c190:	bf00      	nop
 800c192:	370c      	adds	r7, #12
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b085      	sub	sp, #20
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d817      	bhi.n	800c1e0 <USBD_Get_USB_Status+0x44>
 800c1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1b8 <USBD_Get_USB_Status+0x1c>)
 800c1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b6:	bf00      	nop
 800c1b8:	0800c1c9 	.word	0x0800c1c9
 800c1bc:	0800c1cf 	.word	0x0800c1cf
 800c1c0:	0800c1d5 	.word	0x0800c1d5
 800c1c4:	0800c1db 	.word	0x0800c1db
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c1cc:	e00b      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1ce:	2303      	movs	r3, #3
 800c1d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d2:	e008      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d8:	e005      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c1de:	e002      	b.n	800c1e6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e4:	bf00      	nop
  }
  return usb_status;
 800c1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <__cvt>:
 800c1f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f8:	ec57 6b10 	vmov	r6, r7, d0
 800c1fc:	2f00      	cmp	r7, #0
 800c1fe:	460c      	mov	r4, r1
 800c200:	4619      	mov	r1, r3
 800c202:	463b      	mov	r3, r7
 800c204:	bfbb      	ittet	lt
 800c206:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c20a:	461f      	movlt	r7, r3
 800c20c:	2300      	movge	r3, #0
 800c20e:	232d      	movlt	r3, #45	@ 0x2d
 800c210:	700b      	strb	r3, [r1, #0]
 800c212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c214:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c218:	4691      	mov	r9, r2
 800c21a:	f023 0820 	bic.w	r8, r3, #32
 800c21e:	bfbc      	itt	lt
 800c220:	4632      	movlt	r2, r6
 800c222:	4616      	movlt	r6, r2
 800c224:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c228:	d005      	beq.n	800c236 <__cvt+0x42>
 800c22a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c22e:	d100      	bne.n	800c232 <__cvt+0x3e>
 800c230:	3401      	adds	r4, #1
 800c232:	2102      	movs	r1, #2
 800c234:	e000      	b.n	800c238 <__cvt+0x44>
 800c236:	2103      	movs	r1, #3
 800c238:	ab03      	add	r3, sp, #12
 800c23a:	9301      	str	r3, [sp, #4]
 800c23c:	ab02      	add	r3, sp, #8
 800c23e:	9300      	str	r3, [sp, #0]
 800c240:	ec47 6b10 	vmov	d0, r6, r7
 800c244:	4653      	mov	r3, sl
 800c246:	4622      	mov	r2, r4
 800c248:	f001 f982 	bl	800d550 <_dtoa_r>
 800c24c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c250:	4605      	mov	r5, r0
 800c252:	d119      	bne.n	800c288 <__cvt+0x94>
 800c254:	f019 0f01 	tst.w	r9, #1
 800c258:	d00e      	beq.n	800c278 <__cvt+0x84>
 800c25a:	eb00 0904 	add.w	r9, r0, r4
 800c25e:	2200      	movs	r2, #0
 800c260:	2300      	movs	r3, #0
 800c262:	4630      	mov	r0, r6
 800c264:	4639      	mov	r1, r7
 800c266:	f7f4 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c26a:	b108      	cbz	r0, 800c270 <__cvt+0x7c>
 800c26c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c270:	2230      	movs	r2, #48	@ 0x30
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	454b      	cmp	r3, r9
 800c276:	d31e      	bcc.n	800c2b6 <__cvt+0xc2>
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c27c:	1b5b      	subs	r3, r3, r5
 800c27e:	4628      	mov	r0, r5
 800c280:	6013      	str	r3, [r2, #0]
 800c282:	b004      	add	sp, #16
 800c284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c288:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c28c:	eb00 0904 	add.w	r9, r0, r4
 800c290:	d1e5      	bne.n	800c25e <__cvt+0x6a>
 800c292:	7803      	ldrb	r3, [r0, #0]
 800c294:	2b30      	cmp	r3, #48	@ 0x30
 800c296:	d10a      	bne.n	800c2ae <__cvt+0xba>
 800c298:	2200      	movs	r2, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	4630      	mov	r0, r6
 800c29e:	4639      	mov	r1, r7
 800c2a0:	f7f4 fc12 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2a4:	b918      	cbnz	r0, 800c2ae <__cvt+0xba>
 800c2a6:	f1c4 0401 	rsb	r4, r4, #1
 800c2aa:	f8ca 4000 	str.w	r4, [sl]
 800c2ae:	f8da 3000 	ldr.w	r3, [sl]
 800c2b2:	4499      	add	r9, r3
 800c2b4:	e7d3      	b.n	800c25e <__cvt+0x6a>
 800c2b6:	1c59      	adds	r1, r3, #1
 800c2b8:	9103      	str	r1, [sp, #12]
 800c2ba:	701a      	strb	r2, [r3, #0]
 800c2bc:	e7d9      	b.n	800c272 <__cvt+0x7e>

0800c2be <__exponent>:
 800c2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2c0:	2900      	cmp	r1, #0
 800c2c2:	bfba      	itte	lt
 800c2c4:	4249      	neglt	r1, r1
 800c2c6:	232d      	movlt	r3, #45	@ 0x2d
 800c2c8:	232b      	movge	r3, #43	@ 0x2b
 800c2ca:	2909      	cmp	r1, #9
 800c2cc:	7002      	strb	r2, [r0, #0]
 800c2ce:	7043      	strb	r3, [r0, #1]
 800c2d0:	dd29      	ble.n	800c326 <__exponent+0x68>
 800c2d2:	f10d 0307 	add.w	r3, sp, #7
 800c2d6:	461d      	mov	r5, r3
 800c2d8:	270a      	movs	r7, #10
 800c2da:	461a      	mov	r2, r3
 800c2dc:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2e0:	fb07 1416 	mls	r4, r7, r6, r1
 800c2e4:	3430      	adds	r4, #48	@ 0x30
 800c2e6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2c63      	cmp	r4, #99	@ 0x63
 800c2ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	dcf1      	bgt.n	800c2da <__exponent+0x1c>
 800c2f6:	3130      	adds	r1, #48	@ 0x30
 800c2f8:	1e94      	subs	r4, r2, #2
 800c2fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c2fe:	1c41      	adds	r1, r0, #1
 800c300:	4623      	mov	r3, r4
 800c302:	42ab      	cmp	r3, r5
 800c304:	d30a      	bcc.n	800c31c <__exponent+0x5e>
 800c306:	f10d 0309 	add.w	r3, sp, #9
 800c30a:	1a9b      	subs	r3, r3, r2
 800c30c:	42ac      	cmp	r4, r5
 800c30e:	bf88      	it	hi
 800c310:	2300      	movhi	r3, #0
 800c312:	3302      	adds	r3, #2
 800c314:	4403      	add	r3, r0
 800c316:	1a18      	subs	r0, r3, r0
 800c318:	b003      	add	sp, #12
 800c31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c31c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c320:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c324:	e7ed      	b.n	800c302 <__exponent+0x44>
 800c326:	2330      	movs	r3, #48	@ 0x30
 800c328:	3130      	adds	r1, #48	@ 0x30
 800c32a:	7083      	strb	r3, [r0, #2]
 800c32c:	70c1      	strb	r1, [r0, #3]
 800c32e:	1d03      	adds	r3, r0, #4
 800c330:	e7f1      	b.n	800c316 <__exponent+0x58>
	...

0800c334 <_printf_float>:
 800c334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c338:	b08d      	sub	sp, #52	@ 0x34
 800c33a:	460c      	mov	r4, r1
 800c33c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c340:	4616      	mov	r6, r2
 800c342:	461f      	mov	r7, r3
 800c344:	4605      	mov	r5, r0
 800c346:	f000 ffed 	bl	800d324 <_localeconv_r>
 800c34a:	6803      	ldr	r3, [r0, #0]
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	4618      	mov	r0, r3
 800c350:	f7f3 ff8e 	bl	8000270 <strlen>
 800c354:	2300      	movs	r3, #0
 800c356:	930a      	str	r3, [sp, #40]	@ 0x28
 800c358:	f8d8 3000 	ldr.w	r3, [r8]
 800c35c:	9005      	str	r0, [sp, #20]
 800c35e:	3307      	adds	r3, #7
 800c360:	f023 0307 	bic.w	r3, r3, #7
 800c364:	f103 0208 	add.w	r2, r3, #8
 800c368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c36c:	f8d4 b000 	ldr.w	fp, [r4]
 800c370:	f8c8 2000 	str.w	r2, [r8]
 800c374:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c378:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c37c:	9307      	str	r3, [sp, #28]
 800c37e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c382:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c38a:	4b9c      	ldr	r3, [pc, #624]	@ (800c5fc <_printf_float+0x2c8>)
 800c38c:	f04f 32ff 	mov.w	r2, #4294967295
 800c390:	f7f4 fbcc 	bl	8000b2c <__aeabi_dcmpun>
 800c394:	bb70      	cbnz	r0, 800c3f4 <_printf_float+0xc0>
 800c396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c39a:	4b98      	ldr	r3, [pc, #608]	@ (800c5fc <_printf_float+0x2c8>)
 800c39c:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a0:	f7f4 fba6 	bl	8000af0 <__aeabi_dcmple>
 800c3a4:	bb30      	cbnz	r0, 800c3f4 <_printf_float+0xc0>
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f4 fb95 	bl	8000adc <__aeabi_dcmplt>
 800c3b2:	b110      	cbz	r0, 800c3ba <_printf_float+0x86>
 800c3b4:	232d      	movs	r3, #45	@ 0x2d
 800c3b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ba:	4a91      	ldr	r2, [pc, #580]	@ (800c600 <_printf_float+0x2cc>)
 800c3bc:	4b91      	ldr	r3, [pc, #580]	@ (800c604 <_printf_float+0x2d0>)
 800c3be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3c2:	bf8c      	ite	hi
 800c3c4:	4690      	movhi	r8, r2
 800c3c6:	4698      	movls	r8, r3
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	6123      	str	r3, [r4, #16]
 800c3cc:	f02b 0304 	bic.w	r3, fp, #4
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	f04f 0900 	mov.w	r9, #0
 800c3d6:	9700      	str	r7, [sp, #0]
 800c3d8:	4633      	mov	r3, r6
 800c3da:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3dc:	4621      	mov	r1, r4
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f000 f9d2 	bl	800c788 <_printf_common>
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	f040 808d 	bne.w	800c504 <_printf_float+0x1d0>
 800c3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ee:	b00d      	add	sp, #52	@ 0x34
 800c3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f4:	4642      	mov	r2, r8
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	4640      	mov	r0, r8
 800c3fa:	4649      	mov	r1, r9
 800c3fc:	f7f4 fb96 	bl	8000b2c <__aeabi_dcmpun>
 800c400:	b140      	cbz	r0, 800c414 <_printf_float+0xe0>
 800c402:	464b      	mov	r3, r9
 800c404:	2b00      	cmp	r3, #0
 800c406:	bfbc      	itt	lt
 800c408:	232d      	movlt	r3, #45	@ 0x2d
 800c40a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c40e:	4a7e      	ldr	r2, [pc, #504]	@ (800c608 <_printf_float+0x2d4>)
 800c410:	4b7e      	ldr	r3, [pc, #504]	@ (800c60c <_printf_float+0x2d8>)
 800c412:	e7d4      	b.n	800c3be <_printf_float+0x8a>
 800c414:	6863      	ldr	r3, [r4, #4]
 800c416:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c41a:	9206      	str	r2, [sp, #24]
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	d13b      	bne.n	800c498 <_printf_float+0x164>
 800c420:	2306      	movs	r3, #6
 800c422:	6063      	str	r3, [r4, #4]
 800c424:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c428:	2300      	movs	r3, #0
 800c42a:	6022      	str	r2, [r4, #0]
 800c42c:	9303      	str	r3, [sp, #12]
 800c42e:	ab0a      	add	r3, sp, #40	@ 0x28
 800c430:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c434:	ab09      	add	r3, sp, #36	@ 0x24
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	6861      	ldr	r1, [r4, #4]
 800c43a:	ec49 8b10 	vmov	d0, r8, r9
 800c43e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c442:	4628      	mov	r0, r5
 800c444:	f7ff fed6 	bl	800c1f4 <__cvt>
 800c448:	9b06      	ldr	r3, [sp, #24]
 800c44a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c44c:	2b47      	cmp	r3, #71	@ 0x47
 800c44e:	4680      	mov	r8, r0
 800c450:	d129      	bne.n	800c4a6 <_printf_float+0x172>
 800c452:	1cc8      	adds	r0, r1, #3
 800c454:	db02      	blt.n	800c45c <_printf_float+0x128>
 800c456:	6863      	ldr	r3, [r4, #4]
 800c458:	4299      	cmp	r1, r3
 800c45a:	dd41      	ble.n	800c4e0 <_printf_float+0x1ac>
 800c45c:	f1aa 0a02 	sub.w	sl, sl, #2
 800c460:	fa5f fa8a 	uxtb.w	sl, sl
 800c464:	3901      	subs	r1, #1
 800c466:	4652      	mov	r2, sl
 800c468:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c46c:	9109      	str	r1, [sp, #36]	@ 0x24
 800c46e:	f7ff ff26 	bl	800c2be <__exponent>
 800c472:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c474:	1813      	adds	r3, r2, r0
 800c476:	2a01      	cmp	r2, #1
 800c478:	4681      	mov	r9, r0
 800c47a:	6123      	str	r3, [r4, #16]
 800c47c:	dc02      	bgt.n	800c484 <_printf_float+0x150>
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	07d2      	lsls	r2, r2, #31
 800c482:	d501      	bpl.n	800c488 <_printf_float+0x154>
 800c484:	3301      	adds	r3, #1
 800c486:	6123      	str	r3, [r4, #16]
 800c488:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d0a2      	beq.n	800c3d6 <_printf_float+0xa2>
 800c490:	232d      	movs	r3, #45	@ 0x2d
 800c492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c496:	e79e      	b.n	800c3d6 <_printf_float+0xa2>
 800c498:	9a06      	ldr	r2, [sp, #24]
 800c49a:	2a47      	cmp	r2, #71	@ 0x47
 800c49c:	d1c2      	bne.n	800c424 <_printf_float+0xf0>
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1c0      	bne.n	800c424 <_printf_float+0xf0>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e7bd      	b.n	800c422 <_printf_float+0xee>
 800c4a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4aa:	d9db      	bls.n	800c464 <_printf_float+0x130>
 800c4ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4b0:	d118      	bne.n	800c4e4 <_printf_float+0x1b0>
 800c4b2:	2900      	cmp	r1, #0
 800c4b4:	6863      	ldr	r3, [r4, #4]
 800c4b6:	dd0b      	ble.n	800c4d0 <_printf_float+0x19c>
 800c4b8:	6121      	str	r1, [r4, #16]
 800c4ba:	b913      	cbnz	r3, 800c4c2 <_printf_float+0x18e>
 800c4bc:	6822      	ldr	r2, [r4, #0]
 800c4be:	07d0      	lsls	r0, r2, #31
 800c4c0:	d502      	bpl.n	800c4c8 <_printf_float+0x194>
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	440b      	add	r3, r1
 800c4c6:	6123      	str	r3, [r4, #16]
 800c4c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4ca:	f04f 0900 	mov.w	r9, #0
 800c4ce:	e7db      	b.n	800c488 <_printf_float+0x154>
 800c4d0:	b913      	cbnz	r3, 800c4d8 <_printf_float+0x1a4>
 800c4d2:	6822      	ldr	r2, [r4, #0]
 800c4d4:	07d2      	lsls	r2, r2, #31
 800c4d6:	d501      	bpl.n	800c4dc <_printf_float+0x1a8>
 800c4d8:	3302      	adds	r3, #2
 800c4da:	e7f4      	b.n	800c4c6 <_printf_float+0x192>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	e7f2      	b.n	800c4c6 <_printf_float+0x192>
 800c4e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4e6:	4299      	cmp	r1, r3
 800c4e8:	db05      	blt.n	800c4f6 <_printf_float+0x1c2>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	6121      	str	r1, [r4, #16]
 800c4ee:	07d8      	lsls	r0, r3, #31
 800c4f0:	d5ea      	bpl.n	800c4c8 <_printf_float+0x194>
 800c4f2:	1c4b      	adds	r3, r1, #1
 800c4f4:	e7e7      	b.n	800c4c6 <_printf_float+0x192>
 800c4f6:	2900      	cmp	r1, #0
 800c4f8:	bfd4      	ite	le
 800c4fa:	f1c1 0202 	rsble	r2, r1, #2
 800c4fe:	2201      	movgt	r2, #1
 800c500:	4413      	add	r3, r2
 800c502:	e7e0      	b.n	800c4c6 <_printf_float+0x192>
 800c504:	6823      	ldr	r3, [r4, #0]
 800c506:	055a      	lsls	r2, r3, #21
 800c508:	d407      	bmi.n	800c51a <_printf_float+0x1e6>
 800c50a:	6923      	ldr	r3, [r4, #16]
 800c50c:	4642      	mov	r2, r8
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	47b8      	blx	r7
 800c514:	3001      	adds	r0, #1
 800c516:	d12b      	bne.n	800c570 <_printf_float+0x23c>
 800c518:	e767      	b.n	800c3ea <_printf_float+0xb6>
 800c51a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c51e:	f240 80dd 	bls.w	800c6dc <_printf_float+0x3a8>
 800c522:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c526:	2200      	movs	r2, #0
 800c528:	2300      	movs	r3, #0
 800c52a:	f7f4 facd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d033      	beq.n	800c59a <_printf_float+0x266>
 800c532:	4a37      	ldr	r2, [pc, #220]	@ (800c610 <_printf_float+0x2dc>)
 800c534:	2301      	movs	r3, #1
 800c536:	4631      	mov	r1, r6
 800c538:	4628      	mov	r0, r5
 800c53a:	47b8      	blx	r7
 800c53c:	3001      	adds	r0, #1
 800c53e:	f43f af54 	beq.w	800c3ea <_printf_float+0xb6>
 800c542:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c546:	4543      	cmp	r3, r8
 800c548:	db02      	blt.n	800c550 <_printf_float+0x21c>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	07d8      	lsls	r0, r3, #31
 800c54e:	d50f      	bpl.n	800c570 <_printf_float+0x23c>
 800c550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c554:	4631      	mov	r1, r6
 800c556:	4628      	mov	r0, r5
 800c558:	47b8      	blx	r7
 800c55a:	3001      	adds	r0, #1
 800c55c:	f43f af45 	beq.w	800c3ea <_printf_float+0xb6>
 800c560:	f04f 0900 	mov.w	r9, #0
 800c564:	f108 38ff 	add.w	r8, r8, #4294967295
 800c568:	f104 0a1a 	add.w	sl, r4, #26
 800c56c:	45c8      	cmp	r8, r9
 800c56e:	dc09      	bgt.n	800c584 <_printf_float+0x250>
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	079b      	lsls	r3, r3, #30
 800c574:	f100 8103 	bmi.w	800c77e <_printf_float+0x44a>
 800c578:	68e0      	ldr	r0, [r4, #12]
 800c57a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c57c:	4298      	cmp	r0, r3
 800c57e:	bfb8      	it	lt
 800c580:	4618      	movlt	r0, r3
 800c582:	e734      	b.n	800c3ee <_printf_float+0xba>
 800c584:	2301      	movs	r3, #1
 800c586:	4652      	mov	r2, sl
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f af2b 	beq.w	800c3ea <_printf_float+0xb6>
 800c594:	f109 0901 	add.w	r9, r9, #1
 800c598:	e7e8      	b.n	800c56c <_printf_float+0x238>
 800c59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	dc39      	bgt.n	800c614 <_printf_float+0x2e0>
 800c5a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c610 <_printf_float+0x2dc>)
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	47b8      	blx	r7
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	f43f af1d 	beq.w	800c3ea <_printf_float+0xb6>
 800c5b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5b4:	ea59 0303 	orrs.w	r3, r9, r3
 800c5b8:	d102      	bne.n	800c5c0 <_printf_float+0x28c>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	07d9      	lsls	r1, r3, #31
 800c5be:	d5d7      	bpl.n	800c570 <_printf_float+0x23c>
 800c5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f af0d 	beq.w	800c3ea <_printf_float+0xb6>
 800c5d0:	f04f 0a00 	mov.w	sl, #0
 800c5d4:	f104 0b1a 	add.w	fp, r4, #26
 800c5d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5da:	425b      	negs	r3, r3
 800c5dc:	4553      	cmp	r3, sl
 800c5de:	dc01      	bgt.n	800c5e4 <_printf_float+0x2b0>
 800c5e0:	464b      	mov	r3, r9
 800c5e2:	e793      	b.n	800c50c <_printf_float+0x1d8>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	465a      	mov	r2, fp
 800c5e8:	4631      	mov	r1, r6
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	47b8      	blx	r7
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	f43f aefb 	beq.w	800c3ea <_printf_float+0xb6>
 800c5f4:	f10a 0a01 	add.w	sl, sl, #1
 800c5f8:	e7ee      	b.n	800c5d8 <_printf_float+0x2a4>
 800c5fa:	bf00      	nop
 800c5fc:	7fefffff 	.word	0x7fefffff
 800c600:	080124c8 	.word	0x080124c8
 800c604:	080124c4 	.word	0x080124c4
 800c608:	080124d0 	.word	0x080124d0
 800c60c:	080124cc 	.word	0x080124cc
 800c610:	080124d4 	.word	0x080124d4
 800c614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c616:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c61a:	4553      	cmp	r3, sl
 800c61c:	bfa8      	it	ge
 800c61e:	4653      	movge	r3, sl
 800c620:	2b00      	cmp	r3, #0
 800c622:	4699      	mov	r9, r3
 800c624:	dc36      	bgt.n	800c694 <_printf_float+0x360>
 800c626:	f04f 0b00 	mov.w	fp, #0
 800c62a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c62e:	f104 021a 	add.w	r2, r4, #26
 800c632:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c634:	9306      	str	r3, [sp, #24]
 800c636:	eba3 0309 	sub.w	r3, r3, r9
 800c63a:	455b      	cmp	r3, fp
 800c63c:	dc31      	bgt.n	800c6a2 <_printf_float+0x36e>
 800c63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c640:	459a      	cmp	sl, r3
 800c642:	dc3a      	bgt.n	800c6ba <_printf_float+0x386>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	07da      	lsls	r2, r3, #31
 800c648:	d437      	bmi.n	800c6ba <_printf_float+0x386>
 800c64a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64c:	ebaa 0903 	sub.w	r9, sl, r3
 800c650:	9b06      	ldr	r3, [sp, #24]
 800c652:	ebaa 0303 	sub.w	r3, sl, r3
 800c656:	4599      	cmp	r9, r3
 800c658:	bfa8      	it	ge
 800c65a:	4699      	movge	r9, r3
 800c65c:	f1b9 0f00 	cmp.w	r9, #0
 800c660:	dc33      	bgt.n	800c6ca <_printf_float+0x396>
 800c662:	f04f 0800 	mov.w	r8, #0
 800c666:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c66a:	f104 0b1a 	add.w	fp, r4, #26
 800c66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c670:	ebaa 0303 	sub.w	r3, sl, r3
 800c674:	eba3 0309 	sub.w	r3, r3, r9
 800c678:	4543      	cmp	r3, r8
 800c67a:	f77f af79 	ble.w	800c570 <_printf_float+0x23c>
 800c67e:	2301      	movs	r3, #1
 800c680:	465a      	mov	r2, fp
 800c682:	4631      	mov	r1, r6
 800c684:	4628      	mov	r0, r5
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	f43f aeae 	beq.w	800c3ea <_printf_float+0xb6>
 800c68e:	f108 0801 	add.w	r8, r8, #1
 800c692:	e7ec      	b.n	800c66e <_printf_float+0x33a>
 800c694:	4642      	mov	r2, r8
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	d1c2      	bne.n	800c626 <_printf_float+0x2f2>
 800c6a0:	e6a3      	b.n	800c3ea <_printf_float+0xb6>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	4631      	mov	r1, r6
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	9206      	str	r2, [sp, #24]
 800c6aa:	47b8      	blx	r7
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	f43f ae9c 	beq.w	800c3ea <_printf_float+0xb6>
 800c6b2:	9a06      	ldr	r2, [sp, #24]
 800c6b4:	f10b 0b01 	add.w	fp, fp, #1
 800c6b8:	e7bb      	b.n	800c632 <_printf_float+0x2fe>
 800c6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6be:	4631      	mov	r1, r6
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	47b8      	blx	r7
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d1c0      	bne.n	800c64a <_printf_float+0x316>
 800c6c8:	e68f      	b.n	800c3ea <_printf_float+0xb6>
 800c6ca:	9a06      	ldr	r2, [sp, #24]
 800c6cc:	464b      	mov	r3, r9
 800c6ce:	4442      	add	r2, r8
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	47b8      	blx	r7
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d1c3      	bne.n	800c662 <_printf_float+0x32e>
 800c6da:	e686      	b.n	800c3ea <_printf_float+0xb6>
 800c6dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6e0:	f1ba 0f01 	cmp.w	sl, #1
 800c6e4:	dc01      	bgt.n	800c6ea <_printf_float+0x3b6>
 800c6e6:	07db      	lsls	r3, r3, #31
 800c6e8:	d536      	bpl.n	800c758 <_printf_float+0x424>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	4642      	mov	r2, r8
 800c6ee:	4631      	mov	r1, r6
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	47b8      	blx	r7
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	f43f ae78 	beq.w	800c3ea <_printf_float+0xb6>
 800c6fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f ae70 	beq.w	800c3ea <_printf_float+0xb6>
 800c70a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c70e:	2200      	movs	r2, #0
 800c710:	2300      	movs	r3, #0
 800c712:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c716:	f7f4 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c71a:	b9c0      	cbnz	r0, 800c74e <_printf_float+0x41a>
 800c71c:	4653      	mov	r3, sl
 800c71e:	f108 0201 	add.w	r2, r8, #1
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	d10c      	bne.n	800c746 <_printf_float+0x412>
 800c72c:	e65d      	b.n	800c3ea <_printf_float+0xb6>
 800c72e:	2301      	movs	r3, #1
 800c730:	465a      	mov	r2, fp
 800c732:	4631      	mov	r1, r6
 800c734:	4628      	mov	r0, r5
 800c736:	47b8      	blx	r7
 800c738:	3001      	adds	r0, #1
 800c73a:	f43f ae56 	beq.w	800c3ea <_printf_float+0xb6>
 800c73e:	f108 0801 	add.w	r8, r8, #1
 800c742:	45d0      	cmp	r8, sl
 800c744:	dbf3      	blt.n	800c72e <_printf_float+0x3fa>
 800c746:	464b      	mov	r3, r9
 800c748:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c74c:	e6df      	b.n	800c50e <_printf_float+0x1da>
 800c74e:	f04f 0800 	mov.w	r8, #0
 800c752:	f104 0b1a 	add.w	fp, r4, #26
 800c756:	e7f4      	b.n	800c742 <_printf_float+0x40e>
 800c758:	2301      	movs	r3, #1
 800c75a:	4642      	mov	r2, r8
 800c75c:	e7e1      	b.n	800c722 <_printf_float+0x3ee>
 800c75e:	2301      	movs	r3, #1
 800c760:	464a      	mov	r2, r9
 800c762:	4631      	mov	r1, r6
 800c764:	4628      	mov	r0, r5
 800c766:	47b8      	blx	r7
 800c768:	3001      	adds	r0, #1
 800c76a:	f43f ae3e 	beq.w	800c3ea <_printf_float+0xb6>
 800c76e:	f108 0801 	add.w	r8, r8, #1
 800c772:	68e3      	ldr	r3, [r4, #12]
 800c774:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c776:	1a5b      	subs	r3, r3, r1
 800c778:	4543      	cmp	r3, r8
 800c77a:	dcf0      	bgt.n	800c75e <_printf_float+0x42a>
 800c77c:	e6fc      	b.n	800c578 <_printf_float+0x244>
 800c77e:	f04f 0800 	mov.w	r8, #0
 800c782:	f104 0919 	add.w	r9, r4, #25
 800c786:	e7f4      	b.n	800c772 <_printf_float+0x43e>

0800c788 <_printf_common>:
 800c788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c78c:	4616      	mov	r6, r2
 800c78e:	4698      	mov	r8, r3
 800c790:	688a      	ldr	r2, [r1, #8]
 800c792:	690b      	ldr	r3, [r1, #16]
 800c794:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c798:	4293      	cmp	r3, r2
 800c79a:	bfb8      	it	lt
 800c79c:	4613      	movlt	r3, r2
 800c79e:	6033      	str	r3, [r6, #0]
 800c7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	460c      	mov	r4, r1
 800c7a8:	b10a      	cbz	r2, 800c7ae <_printf_common+0x26>
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	6033      	str	r3, [r6, #0]
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	0699      	lsls	r1, r3, #26
 800c7b2:	bf42      	ittt	mi
 800c7b4:	6833      	ldrmi	r3, [r6, #0]
 800c7b6:	3302      	addmi	r3, #2
 800c7b8:	6033      	strmi	r3, [r6, #0]
 800c7ba:	6825      	ldr	r5, [r4, #0]
 800c7bc:	f015 0506 	ands.w	r5, r5, #6
 800c7c0:	d106      	bne.n	800c7d0 <_printf_common+0x48>
 800c7c2:	f104 0a19 	add.w	sl, r4, #25
 800c7c6:	68e3      	ldr	r3, [r4, #12]
 800c7c8:	6832      	ldr	r2, [r6, #0]
 800c7ca:	1a9b      	subs	r3, r3, r2
 800c7cc:	42ab      	cmp	r3, r5
 800c7ce:	dc26      	bgt.n	800c81e <_printf_common+0x96>
 800c7d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7d4:	6822      	ldr	r2, [r4, #0]
 800c7d6:	3b00      	subs	r3, #0
 800c7d8:	bf18      	it	ne
 800c7da:	2301      	movne	r3, #1
 800c7dc:	0692      	lsls	r2, r2, #26
 800c7de:	d42b      	bmi.n	800c838 <_printf_common+0xb0>
 800c7e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7e4:	4641      	mov	r1, r8
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	47c8      	blx	r9
 800c7ea:	3001      	adds	r0, #1
 800c7ec:	d01e      	beq.n	800c82c <_printf_common+0xa4>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	6922      	ldr	r2, [r4, #16]
 800c7f2:	f003 0306 	and.w	r3, r3, #6
 800c7f6:	2b04      	cmp	r3, #4
 800c7f8:	bf02      	ittt	eq
 800c7fa:	68e5      	ldreq	r5, [r4, #12]
 800c7fc:	6833      	ldreq	r3, [r6, #0]
 800c7fe:	1aed      	subeq	r5, r5, r3
 800c800:	68a3      	ldr	r3, [r4, #8]
 800c802:	bf0c      	ite	eq
 800c804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c808:	2500      	movne	r5, #0
 800c80a:	4293      	cmp	r3, r2
 800c80c:	bfc4      	itt	gt
 800c80e:	1a9b      	subgt	r3, r3, r2
 800c810:	18ed      	addgt	r5, r5, r3
 800c812:	2600      	movs	r6, #0
 800c814:	341a      	adds	r4, #26
 800c816:	42b5      	cmp	r5, r6
 800c818:	d11a      	bne.n	800c850 <_printf_common+0xc8>
 800c81a:	2000      	movs	r0, #0
 800c81c:	e008      	b.n	800c830 <_printf_common+0xa8>
 800c81e:	2301      	movs	r3, #1
 800c820:	4652      	mov	r2, sl
 800c822:	4641      	mov	r1, r8
 800c824:	4638      	mov	r0, r7
 800c826:	47c8      	blx	r9
 800c828:	3001      	adds	r0, #1
 800c82a:	d103      	bne.n	800c834 <_printf_common+0xac>
 800c82c:	f04f 30ff 	mov.w	r0, #4294967295
 800c830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c834:	3501      	adds	r5, #1
 800c836:	e7c6      	b.n	800c7c6 <_printf_common+0x3e>
 800c838:	18e1      	adds	r1, r4, r3
 800c83a:	1c5a      	adds	r2, r3, #1
 800c83c:	2030      	movs	r0, #48	@ 0x30
 800c83e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c842:	4422      	add	r2, r4
 800c844:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c84c:	3302      	adds	r3, #2
 800c84e:	e7c7      	b.n	800c7e0 <_printf_common+0x58>
 800c850:	2301      	movs	r3, #1
 800c852:	4622      	mov	r2, r4
 800c854:	4641      	mov	r1, r8
 800c856:	4638      	mov	r0, r7
 800c858:	47c8      	blx	r9
 800c85a:	3001      	adds	r0, #1
 800c85c:	d0e6      	beq.n	800c82c <_printf_common+0xa4>
 800c85e:	3601      	adds	r6, #1
 800c860:	e7d9      	b.n	800c816 <_printf_common+0x8e>
	...

0800c864 <_printf_i>:
 800c864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c868:	7e0f      	ldrb	r7, [r1, #24]
 800c86a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c86c:	2f78      	cmp	r7, #120	@ 0x78
 800c86e:	4691      	mov	r9, r2
 800c870:	4680      	mov	r8, r0
 800c872:	460c      	mov	r4, r1
 800c874:	469a      	mov	sl, r3
 800c876:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c87a:	d807      	bhi.n	800c88c <_printf_i+0x28>
 800c87c:	2f62      	cmp	r7, #98	@ 0x62
 800c87e:	d80a      	bhi.n	800c896 <_printf_i+0x32>
 800c880:	2f00      	cmp	r7, #0
 800c882:	f000 80d1 	beq.w	800ca28 <_printf_i+0x1c4>
 800c886:	2f58      	cmp	r7, #88	@ 0x58
 800c888:	f000 80b8 	beq.w	800c9fc <_printf_i+0x198>
 800c88c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c890:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c894:	e03a      	b.n	800c90c <_printf_i+0xa8>
 800c896:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c89a:	2b15      	cmp	r3, #21
 800c89c:	d8f6      	bhi.n	800c88c <_printf_i+0x28>
 800c89e:	a101      	add	r1, pc, #4	@ (adr r1, 800c8a4 <_printf_i+0x40>)
 800c8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8a4:	0800c8fd 	.word	0x0800c8fd
 800c8a8:	0800c911 	.word	0x0800c911
 800c8ac:	0800c88d 	.word	0x0800c88d
 800c8b0:	0800c88d 	.word	0x0800c88d
 800c8b4:	0800c88d 	.word	0x0800c88d
 800c8b8:	0800c88d 	.word	0x0800c88d
 800c8bc:	0800c911 	.word	0x0800c911
 800c8c0:	0800c88d 	.word	0x0800c88d
 800c8c4:	0800c88d 	.word	0x0800c88d
 800c8c8:	0800c88d 	.word	0x0800c88d
 800c8cc:	0800c88d 	.word	0x0800c88d
 800c8d0:	0800ca0f 	.word	0x0800ca0f
 800c8d4:	0800c93b 	.word	0x0800c93b
 800c8d8:	0800c9c9 	.word	0x0800c9c9
 800c8dc:	0800c88d 	.word	0x0800c88d
 800c8e0:	0800c88d 	.word	0x0800c88d
 800c8e4:	0800ca31 	.word	0x0800ca31
 800c8e8:	0800c88d 	.word	0x0800c88d
 800c8ec:	0800c93b 	.word	0x0800c93b
 800c8f0:	0800c88d 	.word	0x0800c88d
 800c8f4:	0800c88d 	.word	0x0800c88d
 800c8f8:	0800c9d1 	.word	0x0800c9d1
 800c8fc:	6833      	ldr	r3, [r6, #0]
 800c8fe:	1d1a      	adds	r2, r3, #4
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	6032      	str	r2, [r6, #0]
 800c904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c908:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c90c:	2301      	movs	r3, #1
 800c90e:	e09c      	b.n	800ca4a <_printf_i+0x1e6>
 800c910:	6833      	ldr	r3, [r6, #0]
 800c912:	6820      	ldr	r0, [r4, #0]
 800c914:	1d19      	adds	r1, r3, #4
 800c916:	6031      	str	r1, [r6, #0]
 800c918:	0606      	lsls	r6, r0, #24
 800c91a:	d501      	bpl.n	800c920 <_printf_i+0xbc>
 800c91c:	681d      	ldr	r5, [r3, #0]
 800c91e:	e003      	b.n	800c928 <_printf_i+0xc4>
 800c920:	0645      	lsls	r5, r0, #25
 800c922:	d5fb      	bpl.n	800c91c <_printf_i+0xb8>
 800c924:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c928:	2d00      	cmp	r5, #0
 800c92a:	da03      	bge.n	800c934 <_printf_i+0xd0>
 800c92c:	232d      	movs	r3, #45	@ 0x2d
 800c92e:	426d      	negs	r5, r5
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c934:	4858      	ldr	r0, [pc, #352]	@ (800ca98 <_printf_i+0x234>)
 800c936:	230a      	movs	r3, #10
 800c938:	e011      	b.n	800c95e <_printf_i+0xfa>
 800c93a:	6821      	ldr	r1, [r4, #0]
 800c93c:	6833      	ldr	r3, [r6, #0]
 800c93e:	0608      	lsls	r0, r1, #24
 800c940:	f853 5b04 	ldr.w	r5, [r3], #4
 800c944:	d402      	bmi.n	800c94c <_printf_i+0xe8>
 800c946:	0649      	lsls	r1, r1, #25
 800c948:	bf48      	it	mi
 800c94a:	b2ad      	uxthmi	r5, r5
 800c94c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c94e:	4852      	ldr	r0, [pc, #328]	@ (800ca98 <_printf_i+0x234>)
 800c950:	6033      	str	r3, [r6, #0]
 800c952:	bf14      	ite	ne
 800c954:	230a      	movne	r3, #10
 800c956:	2308      	moveq	r3, #8
 800c958:	2100      	movs	r1, #0
 800c95a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c95e:	6866      	ldr	r6, [r4, #4]
 800c960:	60a6      	str	r6, [r4, #8]
 800c962:	2e00      	cmp	r6, #0
 800c964:	db05      	blt.n	800c972 <_printf_i+0x10e>
 800c966:	6821      	ldr	r1, [r4, #0]
 800c968:	432e      	orrs	r6, r5
 800c96a:	f021 0104 	bic.w	r1, r1, #4
 800c96e:	6021      	str	r1, [r4, #0]
 800c970:	d04b      	beq.n	800ca0a <_printf_i+0x1a6>
 800c972:	4616      	mov	r6, r2
 800c974:	fbb5 f1f3 	udiv	r1, r5, r3
 800c978:	fb03 5711 	mls	r7, r3, r1, r5
 800c97c:	5dc7      	ldrb	r7, [r0, r7]
 800c97e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c982:	462f      	mov	r7, r5
 800c984:	42bb      	cmp	r3, r7
 800c986:	460d      	mov	r5, r1
 800c988:	d9f4      	bls.n	800c974 <_printf_i+0x110>
 800c98a:	2b08      	cmp	r3, #8
 800c98c:	d10b      	bne.n	800c9a6 <_printf_i+0x142>
 800c98e:	6823      	ldr	r3, [r4, #0]
 800c990:	07df      	lsls	r7, r3, #31
 800c992:	d508      	bpl.n	800c9a6 <_printf_i+0x142>
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	6861      	ldr	r1, [r4, #4]
 800c998:	4299      	cmp	r1, r3
 800c99a:	bfde      	ittt	le
 800c99c:	2330      	movle	r3, #48	@ 0x30
 800c99e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9a6:	1b92      	subs	r2, r2, r6
 800c9a8:	6122      	str	r2, [r4, #16]
 800c9aa:	f8cd a000 	str.w	sl, [sp]
 800c9ae:	464b      	mov	r3, r9
 800c9b0:	aa03      	add	r2, sp, #12
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	f7ff fee7 	bl	800c788 <_printf_common>
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	d14a      	bne.n	800ca54 <_printf_i+0x1f0>
 800c9be:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c2:	b004      	add	sp, #16
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	6823      	ldr	r3, [r4, #0]
 800c9ca:	f043 0320 	orr.w	r3, r3, #32
 800c9ce:	6023      	str	r3, [r4, #0]
 800c9d0:	4832      	ldr	r0, [pc, #200]	@ (800ca9c <_printf_i+0x238>)
 800c9d2:	2778      	movs	r7, #120	@ 0x78
 800c9d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	6831      	ldr	r1, [r6, #0]
 800c9dc:	061f      	lsls	r7, r3, #24
 800c9de:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9e2:	d402      	bmi.n	800c9ea <_printf_i+0x186>
 800c9e4:	065f      	lsls	r7, r3, #25
 800c9e6:	bf48      	it	mi
 800c9e8:	b2ad      	uxthmi	r5, r5
 800c9ea:	6031      	str	r1, [r6, #0]
 800c9ec:	07d9      	lsls	r1, r3, #31
 800c9ee:	bf44      	itt	mi
 800c9f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c9f4:	6023      	strmi	r3, [r4, #0]
 800c9f6:	b11d      	cbz	r5, 800ca00 <_printf_i+0x19c>
 800c9f8:	2310      	movs	r3, #16
 800c9fa:	e7ad      	b.n	800c958 <_printf_i+0xf4>
 800c9fc:	4826      	ldr	r0, [pc, #152]	@ (800ca98 <_printf_i+0x234>)
 800c9fe:	e7e9      	b.n	800c9d4 <_printf_i+0x170>
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	f023 0320 	bic.w	r3, r3, #32
 800ca06:	6023      	str	r3, [r4, #0]
 800ca08:	e7f6      	b.n	800c9f8 <_printf_i+0x194>
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	e7bd      	b.n	800c98a <_printf_i+0x126>
 800ca0e:	6833      	ldr	r3, [r6, #0]
 800ca10:	6825      	ldr	r5, [r4, #0]
 800ca12:	6961      	ldr	r1, [r4, #20]
 800ca14:	1d18      	adds	r0, r3, #4
 800ca16:	6030      	str	r0, [r6, #0]
 800ca18:	062e      	lsls	r6, r5, #24
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	d501      	bpl.n	800ca22 <_printf_i+0x1be>
 800ca1e:	6019      	str	r1, [r3, #0]
 800ca20:	e002      	b.n	800ca28 <_printf_i+0x1c4>
 800ca22:	0668      	lsls	r0, r5, #25
 800ca24:	d5fb      	bpl.n	800ca1e <_printf_i+0x1ba>
 800ca26:	8019      	strh	r1, [r3, #0]
 800ca28:	2300      	movs	r3, #0
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	4616      	mov	r6, r2
 800ca2e:	e7bc      	b.n	800c9aa <_printf_i+0x146>
 800ca30:	6833      	ldr	r3, [r6, #0]
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	6032      	str	r2, [r6, #0]
 800ca36:	681e      	ldr	r6, [r3, #0]
 800ca38:	6862      	ldr	r2, [r4, #4]
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7f3 fbc7 	bl	80001d0 <memchr>
 800ca42:	b108      	cbz	r0, 800ca48 <_printf_i+0x1e4>
 800ca44:	1b80      	subs	r0, r0, r6
 800ca46:	6060      	str	r0, [r4, #4]
 800ca48:	6863      	ldr	r3, [r4, #4]
 800ca4a:	6123      	str	r3, [r4, #16]
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca52:	e7aa      	b.n	800c9aa <_printf_i+0x146>
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	4632      	mov	r2, r6
 800ca58:	4649      	mov	r1, r9
 800ca5a:	4640      	mov	r0, r8
 800ca5c:	47d0      	blx	sl
 800ca5e:	3001      	adds	r0, #1
 800ca60:	d0ad      	beq.n	800c9be <_printf_i+0x15a>
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	079b      	lsls	r3, r3, #30
 800ca66:	d413      	bmi.n	800ca90 <_printf_i+0x22c>
 800ca68:	68e0      	ldr	r0, [r4, #12]
 800ca6a:	9b03      	ldr	r3, [sp, #12]
 800ca6c:	4298      	cmp	r0, r3
 800ca6e:	bfb8      	it	lt
 800ca70:	4618      	movlt	r0, r3
 800ca72:	e7a6      	b.n	800c9c2 <_printf_i+0x15e>
 800ca74:	2301      	movs	r3, #1
 800ca76:	4632      	mov	r2, r6
 800ca78:	4649      	mov	r1, r9
 800ca7a:	4640      	mov	r0, r8
 800ca7c:	47d0      	blx	sl
 800ca7e:	3001      	adds	r0, #1
 800ca80:	d09d      	beq.n	800c9be <_printf_i+0x15a>
 800ca82:	3501      	adds	r5, #1
 800ca84:	68e3      	ldr	r3, [r4, #12]
 800ca86:	9903      	ldr	r1, [sp, #12]
 800ca88:	1a5b      	subs	r3, r3, r1
 800ca8a:	42ab      	cmp	r3, r5
 800ca8c:	dcf2      	bgt.n	800ca74 <_printf_i+0x210>
 800ca8e:	e7eb      	b.n	800ca68 <_printf_i+0x204>
 800ca90:	2500      	movs	r5, #0
 800ca92:	f104 0619 	add.w	r6, r4, #25
 800ca96:	e7f5      	b.n	800ca84 <_printf_i+0x220>
 800ca98:	080124d6 	.word	0x080124d6
 800ca9c:	080124e7 	.word	0x080124e7

0800caa0 <_scanf_float>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	b087      	sub	sp, #28
 800caa6:	4691      	mov	r9, r2
 800caa8:	9303      	str	r3, [sp, #12]
 800caaa:	688b      	ldr	r3, [r1, #8]
 800caac:	1e5a      	subs	r2, r3, #1
 800caae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cab2:	bf81      	itttt	hi
 800cab4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cab8:	eb03 0b05 	addhi.w	fp, r3, r5
 800cabc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cac0:	608b      	strhi	r3, [r1, #8]
 800cac2:	680b      	ldr	r3, [r1, #0]
 800cac4:	460a      	mov	r2, r1
 800cac6:	f04f 0500 	mov.w	r5, #0
 800caca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cace:	f842 3b1c 	str.w	r3, [r2], #28
 800cad2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cad6:	4680      	mov	r8, r0
 800cad8:	460c      	mov	r4, r1
 800cada:	bf98      	it	ls
 800cadc:	f04f 0b00 	movls.w	fp, #0
 800cae0:	9201      	str	r2, [sp, #4]
 800cae2:	4616      	mov	r6, r2
 800cae4:	46aa      	mov	sl, r5
 800cae6:	462f      	mov	r7, r5
 800cae8:	9502      	str	r5, [sp, #8]
 800caea:	68a2      	ldr	r2, [r4, #8]
 800caec:	b15a      	cbz	r2, 800cb06 <_scanf_float+0x66>
 800caee:	f8d9 3000 	ldr.w	r3, [r9]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	2b4e      	cmp	r3, #78	@ 0x4e
 800caf6:	d863      	bhi.n	800cbc0 <_scanf_float+0x120>
 800caf8:	2b40      	cmp	r3, #64	@ 0x40
 800cafa:	d83b      	bhi.n	800cb74 <_scanf_float+0xd4>
 800cafc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb00:	b2c8      	uxtb	r0, r1
 800cb02:	280e      	cmp	r0, #14
 800cb04:	d939      	bls.n	800cb7a <_scanf_float+0xda>
 800cb06:	b11f      	cbz	r7, 800cb10 <_scanf_float+0x70>
 800cb08:	6823      	ldr	r3, [r4, #0]
 800cb0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb14:	f1ba 0f01 	cmp.w	sl, #1
 800cb18:	f200 8114 	bhi.w	800cd44 <_scanf_float+0x2a4>
 800cb1c:	9b01      	ldr	r3, [sp, #4]
 800cb1e:	429e      	cmp	r6, r3
 800cb20:	f200 8105 	bhi.w	800cd2e <_scanf_float+0x28e>
 800cb24:	2001      	movs	r0, #1
 800cb26:	b007      	add	sp, #28
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb30:	2a0d      	cmp	r2, #13
 800cb32:	d8e8      	bhi.n	800cb06 <_scanf_float+0x66>
 800cb34:	a101      	add	r1, pc, #4	@ (adr r1, 800cb3c <_scanf_float+0x9c>)
 800cb36:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb3a:	bf00      	nop
 800cb3c:	0800cc85 	.word	0x0800cc85
 800cb40:	0800cb07 	.word	0x0800cb07
 800cb44:	0800cb07 	.word	0x0800cb07
 800cb48:	0800cb07 	.word	0x0800cb07
 800cb4c:	0800cce1 	.word	0x0800cce1
 800cb50:	0800ccbb 	.word	0x0800ccbb
 800cb54:	0800cb07 	.word	0x0800cb07
 800cb58:	0800cb07 	.word	0x0800cb07
 800cb5c:	0800cc93 	.word	0x0800cc93
 800cb60:	0800cb07 	.word	0x0800cb07
 800cb64:	0800cb07 	.word	0x0800cb07
 800cb68:	0800cb07 	.word	0x0800cb07
 800cb6c:	0800cb07 	.word	0x0800cb07
 800cb70:	0800cc4f 	.word	0x0800cc4f
 800cb74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cb78:	e7da      	b.n	800cb30 <_scanf_float+0x90>
 800cb7a:	290e      	cmp	r1, #14
 800cb7c:	d8c3      	bhi.n	800cb06 <_scanf_float+0x66>
 800cb7e:	a001      	add	r0, pc, #4	@ (adr r0, 800cb84 <_scanf_float+0xe4>)
 800cb80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb84:	0800cc3f 	.word	0x0800cc3f
 800cb88:	0800cb07 	.word	0x0800cb07
 800cb8c:	0800cc3f 	.word	0x0800cc3f
 800cb90:	0800cccf 	.word	0x0800cccf
 800cb94:	0800cb07 	.word	0x0800cb07
 800cb98:	0800cbe1 	.word	0x0800cbe1
 800cb9c:	0800cc25 	.word	0x0800cc25
 800cba0:	0800cc25 	.word	0x0800cc25
 800cba4:	0800cc25 	.word	0x0800cc25
 800cba8:	0800cc25 	.word	0x0800cc25
 800cbac:	0800cc25 	.word	0x0800cc25
 800cbb0:	0800cc25 	.word	0x0800cc25
 800cbb4:	0800cc25 	.word	0x0800cc25
 800cbb8:	0800cc25 	.word	0x0800cc25
 800cbbc:	0800cc25 	.word	0x0800cc25
 800cbc0:	2b6e      	cmp	r3, #110	@ 0x6e
 800cbc2:	d809      	bhi.n	800cbd8 <_scanf_float+0x138>
 800cbc4:	2b60      	cmp	r3, #96	@ 0x60
 800cbc6:	d8b1      	bhi.n	800cb2c <_scanf_float+0x8c>
 800cbc8:	2b54      	cmp	r3, #84	@ 0x54
 800cbca:	d07b      	beq.n	800ccc4 <_scanf_float+0x224>
 800cbcc:	2b59      	cmp	r3, #89	@ 0x59
 800cbce:	d19a      	bne.n	800cb06 <_scanf_float+0x66>
 800cbd0:	2d07      	cmp	r5, #7
 800cbd2:	d198      	bne.n	800cb06 <_scanf_float+0x66>
 800cbd4:	2508      	movs	r5, #8
 800cbd6:	e02f      	b.n	800cc38 <_scanf_float+0x198>
 800cbd8:	2b74      	cmp	r3, #116	@ 0x74
 800cbda:	d073      	beq.n	800ccc4 <_scanf_float+0x224>
 800cbdc:	2b79      	cmp	r3, #121	@ 0x79
 800cbde:	e7f6      	b.n	800cbce <_scanf_float+0x12e>
 800cbe0:	6821      	ldr	r1, [r4, #0]
 800cbe2:	05c8      	lsls	r0, r1, #23
 800cbe4:	d51e      	bpl.n	800cc24 <_scanf_float+0x184>
 800cbe6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cbea:	6021      	str	r1, [r4, #0]
 800cbec:	3701      	adds	r7, #1
 800cbee:	f1bb 0f00 	cmp.w	fp, #0
 800cbf2:	d003      	beq.n	800cbfc <_scanf_float+0x15c>
 800cbf4:	3201      	adds	r2, #1
 800cbf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cbfa:	60a2      	str	r2, [r4, #8]
 800cbfc:	68a3      	ldr	r3, [r4, #8]
 800cbfe:	3b01      	subs	r3, #1
 800cc00:	60a3      	str	r3, [r4, #8]
 800cc02:	6923      	ldr	r3, [r4, #16]
 800cc04:	3301      	adds	r3, #1
 800cc06:	6123      	str	r3, [r4, #16]
 800cc08:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f8c9 3004 	str.w	r3, [r9, #4]
 800cc14:	f340 8082 	ble.w	800cd1c <_scanf_float+0x27c>
 800cc18:	f8d9 3000 	ldr.w	r3, [r9]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	f8c9 3000 	str.w	r3, [r9]
 800cc22:	e762      	b.n	800caea <_scanf_float+0x4a>
 800cc24:	eb1a 0105 	adds.w	r1, sl, r5
 800cc28:	f47f af6d 	bne.w	800cb06 <_scanf_float+0x66>
 800cc2c:	6822      	ldr	r2, [r4, #0]
 800cc2e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc32:	6022      	str	r2, [r4, #0]
 800cc34:	460d      	mov	r5, r1
 800cc36:	468a      	mov	sl, r1
 800cc38:	f806 3b01 	strb.w	r3, [r6], #1
 800cc3c:	e7de      	b.n	800cbfc <_scanf_float+0x15c>
 800cc3e:	6822      	ldr	r2, [r4, #0]
 800cc40:	0610      	lsls	r0, r2, #24
 800cc42:	f57f af60 	bpl.w	800cb06 <_scanf_float+0x66>
 800cc46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc4a:	6022      	str	r2, [r4, #0]
 800cc4c:	e7f4      	b.n	800cc38 <_scanf_float+0x198>
 800cc4e:	f1ba 0f00 	cmp.w	sl, #0
 800cc52:	d10c      	bne.n	800cc6e <_scanf_float+0x1ce>
 800cc54:	b977      	cbnz	r7, 800cc74 <_scanf_float+0x1d4>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc5c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc60:	d108      	bne.n	800cc74 <_scanf_float+0x1d4>
 800cc62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc66:	6022      	str	r2, [r4, #0]
 800cc68:	f04f 0a01 	mov.w	sl, #1
 800cc6c:	e7e4      	b.n	800cc38 <_scanf_float+0x198>
 800cc6e:	f1ba 0f02 	cmp.w	sl, #2
 800cc72:	d050      	beq.n	800cd16 <_scanf_float+0x276>
 800cc74:	2d01      	cmp	r5, #1
 800cc76:	d002      	beq.n	800cc7e <_scanf_float+0x1de>
 800cc78:	2d04      	cmp	r5, #4
 800cc7a:	f47f af44 	bne.w	800cb06 <_scanf_float+0x66>
 800cc7e:	3501      	adds	r5, #1
 800cc80:	b2ed      	uxtb	r5, r5
 800cc82:	e7d9      	b.n	800cc38 <_scanf_float+0x198>
 800cc84:	f1ba 0f01 	cmp.w	sl, #1
 800cc88:	f47f af3d 	bne.w	800cb06 <_scanf_float+0x66>
 800cc8c:	f04f 0a02 	mov.w	sl, #2
 800cc90:	e7d2      	b.n	800cc38 <_scanf_float+0x198>
 800cc92:	b975      	cbnz	r5, 800ccb2 <_scanf_float+0x212>
 800cc94:	2f00      	cmp	r7, #0
 800cc96:	f47f af37 	bne.w	800cb08 <_scanf_float+0x68>
 800cc9a:	6822      	ldr	r2, [r4, #0]
 800cc9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cca0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cca4:	f040 8103 	bne.w	800ceae <_scanf_float+0x40e>
 800cca8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	2501      	movs	r5, #1
 800ccb0:	e7c2      	b.n	800cc38 <_scanf_float+0x198>
 800ccb2:	2d03      	cmp	r5, #3
 800ccb4:	d0e3      	beq.n	800cc7e <_scanf_float+0x1de>
 800ccb6:	2d05      	cmp	r5, #5
 800ccb8:	e7df      	b.n	800cc7a <_scanf_float+0x1da>
 800ccba:	2d02      	cmp	r5, #2
 800ccbc:	f47f af23 	bne.w	800cb06 <_scanf_float+0x66>
 800ccc0:	2503      	movs	r5, #3
 800ccc2:	e7b9      	b.n	800cc38 <_scanf_float+0x198>
 800ccc4:	2d06      	cmp	r5, #6
 800ccc6:	f47f af1e 	bne.w	800cb06 <_scanf_float+0x66>
 800ccca:	2507      	movs	r5, #7
 800cccc:	e7b4      	b.n	800cc38 <_scanf_float+0x198>
 800ccce:	6822      	ldr	r2, [r4, #0]
 800ccd0:	0591      	lsls	r1, r2, #22
 800ccd2:	f57f af18 	bpl.w	800cb06 <_scanf_float+0x66>
 800ccd6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ccda:	6022      	str	r2, [r4, #0]
 800ccdc:	9702      	str	r7, [sp, #8]
 800ccde:	e7ab      	b.n	800cc38 <_scanf_float+0x198>
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cce6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ccea:	d005      	beq.n	800ccf8 <_scanf_float+0x258>
 800ccec:	0550      	lsls	r0, r2, #21
 800ccee:	f57f af0a 	bpl.w	800cb06 <_scanf_float+0x66>
 800ccf2:	2f00      	cmp	r7, #0
 800ccf4:	f000 80db 	beq.w	800ceae <_scanf_float+0x40e>
 800ccf8:	0591      	lsls	r1, r2, #22
 800ccfa:	bf58      	it	pl
 800ccfc:	9902      	ldrpl	r1, [sp, #8]
 800ccfe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd02:	bf58      	it	pl
 800cd04:	1a79      	subpl	r1, r7, r1
 800cd06:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd0a:	bf58      	it	pl
 800cd0c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd10:	6022      	str	r2, [r4, #0]
 800cd12:	2700      	movs	r7, #0
 800cd14:	e790      	b.n	800cc38 <_scanf_float+0x198>
 800cd16:	f04f 0a03 	mov.w	sl, #3
 800cd1a:	e78d      	b.n	800cc38 <_scanf_float+0x198>
 800cd1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd20:	4649      	mov	r1, r9
 800cd22:	4640      	mov	r0, r8
 800cd24:	4798      	blx	r3
 800cd26:	2800      	cmp	r0, #0
 800cd28:	f43f aedf 	beq.w	800caea <_scanf_float+0x4a>
 800cd2c:	e6eb      	b.n	800cb06 <_scanf_float+0x66>
 800cd2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd36:	464a      	mov	r2, r9
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4798      	blx	r3
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	e6eb      	b.n	800cb1c <_scanf_float+0x7c>
 800cd44:	1e6b      	subs	r3, r5, #1
 800cd46:	2b06      	cmp	r3, #6
 800cd48:	d824      	bhi.n	800cd94 <_scanf_float+0x2f4>
 800cd4a:	2d02      	cmp	r5, #2
 800cd4c:	d836      	bhi.n	800cdbc <_scanf_float+0x31c>
 800cd4e:	9b01      	ldr	r3, [sp, #4]
 800cd50:	429e      	cmp	r6, r3
 800cd52:	f67f aee7 	bls.w	800cb24 <_scanf_float+0x84>
 800cd56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd5e:	464a      	mov	r2, r9
 800cd60:	4640      	mov	r0, r8
 800cd62:	4798      	blx	r3
 800cd64:	6923      	ldr	r3, [r4, #16]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	6123      	str	r3, [r4, #16]
 800cd6a:	e7f0      	b.n	800cd4e <_scanf_float+0x2ae>
 800cd6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cd74:	464a      	mov	r2, r9
 800cd76:	4640      	mov	r0, r8
 800cd78:	4798      	blx	r3
 800cd7a:	6923      	ldr	r3, [r4, #16]
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	6123      	str	r3, [r4, #16]
 800cd80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd84:	fa5f fa8a 	uxtb.w	sl, sl
 800cd88:	f1ba 0f02 	cmp.w	sl, #2
 800cd8c:	d1ee      	bne.n	800cd6c <_scanf_float+0x2cc>
 800cd8e:	3d03      	subs	r5, #3
 800cd90:	b2ed      	uxtb	r5, r5
 800cd92:	1b76      	subs	r6, r6, r5
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	05da      	lsls	r2, r3, #23
 800cd98:	d530      	bpl.n	800cdfc <_scanf_float+0x35c>
 800cd9a:	055b      	lsls	r3, r3, #21
 800cd9c:	d511      	bpl.n	800cdc2 <_scanf_float+0x322>
 800cd9e:	9b01      	ldr	r3, [sp, #4]
 800cda0:	429e      	cmp	r6, r3
 800cda2:	f67f aebf 	bls.w	800cb24 <_scanf_float+0x84>
 800cda6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdae:	464a      	mov	r2, r9
 800cdb0:	4640      	mov	r0, r8
 800cdb2:	4798      	blx	r3
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	6123      	str	r3, [r4, #16]
 800cdba:	e7f0      	b.n	800cd9e <_scanf_float+0x2fe>
 800cdbc:	46aa      	mov	sl, r5
 800cdbe:	46b3      	mov	fp, r6
 800cdc0:	e7de      	b.n	800cd80 <_scanf_float+0x2e0>
 800cdc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	2965      	cmp	r1, #101	@ 0x65
 800cdca:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdce:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	d00c      	beq.n	800cdf0 <_scanf_float+0x350>
 800cdd6:	2945      	cmp	r1, #69	@ 0x45
 800cdd8:	d00a      	beq.n	800cdf0 <_scanf_float+0x350>
 800cdda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdde:	464a      	mov	r2, r9
 800cde0:	4640      	mov	r0, r8
 800cde2:	4798      	blx	r3
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	1eb5      	subs	r5, r6, #2
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdf4:	464a      	mov	r2, r9
 800cdf6:	4640      	mov	r0, r8
 800cdf8:	4798      	blx	r3
 800cdfa:	462e      	mov	r6, r5
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	f012 0210 	ands.w	r2, r2, #16
 800ce02:	d001      	beq.n	800ce08 <_scanf_float+0x368>
 800ce04:	2000      	movs	r0, #0
 800ce06:	e68e      	b.n	800cb26 <_scanf_float+0x86>
 800ce08:	7032      	strb	r2, [r6, #0]
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce14:	d125      	bne.n	800ce62 <_scanf_float+0x3c2>
 800ce16:	9b02      	ldr	r3, [sp, #8]
 800ce18:	429f      	cmp	r7, r3
 800ce1a:	d00a      	beq.n	800ce32 <_scanf_float+0x392>
 800ce1c:	1bda      	subs	r2, r3, r7
 800ce1e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce22:	429e      	cmp	r6, r3
 800ce24:	bf28      	it	cs
 800ce26:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce2a:	4922      	ldr	r1, [pc, #136]	@ (800ceb4 <_scanf_float+0x414>)
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	f000 f977 	bl	800d120 <siprintf>
 800ce32:	9901      	ldr	r1, [sp, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	4640      	mov	r0, r8
 800ce38:	f002 fd06 	bl	800f848 <_strtod_r>
 800ce3c:	9b03      	ldr	r3, [sp, #12]
 800ce3e:	6821      	ldr	r1, [r4, #0]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f011 0f02 	tst.w	r1, #2
 800ce46:	ec57 6b10 	vmov	r6, r7, d0
 800ce4a:	f103 0204 	add.w	r2, r3, #4
 800ce4e:	d015      	beq.n	800ce7c <_scanf_float+0x3dc>
 800ce50:	9903      	ldr	r1, [sp, #12]
 800ce52:	600a      	str	r2, [r1, #0]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	e9c3 6700 	strd	r6, r7, [r3]
 800ce5a:	68e3      	ldr	r3, [r4, #12]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	60e3      	str	r3, [r4, #12]
 800ce60:	e7d0      	b.n	800ce04 <_scanf_float+0x364>
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0e4      	beq.n	800ce32 <_scanf_float+0x392>
 800ce68:	9905      	ldr	r1, [sp, #20]
 800ce6a:	230a      	movs	r3, #10
 800ce6c:	3101      	adds	r1, #1
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f002 fd6a 	bl	800f948 <_strtol_r>
 800ce74:	9b04      	ldr	r3, [sp, #16]
 800ce76:	9e05      	ldr	r6, [sp, #20]
 800ce78:	1ac2      	subs	r2, r0, r3
 800ce7a:	e7d0      	b.n	800ce1e <_scanf_float+0x37e>
 800ce7c:	f011 0f04 	tst.w	r1, #4
 800ce80:	9903      	ldr	r1, [sp, #12]
 800ce82:	600a      	str	r2, [r1, #0]
 800ce84:	d1e6      	bne.n	800ce54 <_scanf_float+0x3b4>
 800ce86:	681d      	ldr	r5, [r3, #0]
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fe4c 	bl	8000b2c <__aeabi_dcmpun>
 800ce94:	b128      	cbz	r0, 800cea2 <_scanf_float+0x402>
 800ce96:	4808      	ldr	r0, [pc, #32]	@ (800ceb8 <_scanf_float+0x418>)
 800ce98:	f000 faca 	bl	800d430 <nanf>
 800ce9c:	ed85 0a00 	vstr	s0, [r5]
 800cea0:	e7db      	b.n	800ce5a <_scanf_float+0x3ba>
 800cea2:	4630      	mov	r0, r6
 800cea4:	4639      	mov	r1, r7
 800cea6:	f7f3 fe9f 	bl	8000be8 <__aeabi_d2f>
 800ceaa:	6028      	str	r0, [r5, #0]
 800ceac:	e7d5      	b.n	800ce5a <_scanf_float+0x3ba>
 800ceae:	2700      	movs	r7, #0
 800ceb0:	e62e      	b.n	800cb10 <_scanf_float+0x70>
 800ceb2:	bf00      	nop
 800ceb4:	080124f8 	.word	0x080124f8
 800ceb8:	08012639 	.word	0x08012639

0800cebc <std>:
 800cebc:	2300      	movs	r3, #0
 800cebe:	b510      	push	{r4, lr}
 800cec0:	4604      	mov	r4, r0
 800cec2:	e9c0 3300 	strd	r3, r3, [r0]
 800cec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceca:	6083      	str	r3, [r0, #8]
 800cecc:	8181      	strh	r1, [r0, #12]
 800cece:	6643      	str	r3, [r0, #100]	@ 0x64
 800ced0:	81c2      	strh	r2, [r0, #14]
 800ced2:	6183      	str	r3, [r0, #24]
 800ced4:	4619      	mov	r1, r3
 800ced6:	2208      	movs	r2, #8
 800ced8:	305c      	adds	r0, #92	@ 0x5c
 800ceda:	f000 fa1b 	bl	800d314 <memset>
 800cede:	4b0d      	ldr	r3, [pc, #52]	@ (800cf14 <std+0x58>)
 800cee0:	6263      	str	r3, [r4, #36]	@ 0x24
 800cee2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf18 <std+0x5c>)
 800cee4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cee6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf1c <std+0x60>)
 800cee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ceea:	4b0d      	ldr	r3, [pc, #52]	@ (800cf20 <std+0x64>)
 800ceec:	6323      	str	r3, [r4, #48]	@ 0x30
 800ceee:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <std+0x68>)
 800cef0:	6224      	str	r4, [r4, #32]
 800cef2:	429c      	cmp	r4, r3
 800cef4:	d006      	beq.n	800cf04 <std+0x48>
 800cef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cefa:	4294      	cmp	r4, r2
 800cefc:	d002      	beq.n	800cf04 <std+0x48>
 800cefe:	33d0      	adds	r3, #208	@ 0xd0
 800cf00:	429c      	cmp	r4, r3
 800cf02:	d105      	bne.n	800cf10 <std+0x54>
 800cf04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf0c:	f000 ba7e 	b.w	800d40c <__retarget_lock_init_recursive>
 800cf10:	bd10      	pop	{r4, pc}
 800cf12:	bf00      	nop
 800cf14:	0800d165 	.word	0x0800d165
 800cf18:	0800d187 	.word	0x0800d187
 800cf1c:	0800d1bf 	.word	0x0800d1bf
 800cf20:	0800d1e3 	.word	0x0800d1e3
 800cf24:	200020f4 	.word	0x200020f4

0800cf28 <stdio_exit_handler>:
 800cf28:	4a02      	ldr	r2, [pc, #8]	@ (800cf34 <stdio_exit_handler+0xc>)
 800cf2a:	4903      	ldr	r1, [pc, #12]	@ (800cf38 <stdio_exit_handler+0x10>)
 800cf2c:	4803      	ldr	r0, [pc, #12]	@ (800cf3c <stdio_exit_handler+0x14>)
 800cf2e:	f000 b869 	b.w	800d004 <_fwalk_sglue>
 800cf32:	bf00      	nop
 800cf34:	2000010c 	.word	0x2000010c
 800cf38:	0800ff89 	.word	0x0800ff89
 800cf3c:	2000011c 	.word	0x2000011c

0800cf40 <cleanup_stdio>:
 800cf40:	6841      	ldr	r1, [r0, #4]
 800cf42:	4b0c      	ldr	r3, [pc, #48]	@ (800cf74 <cleanup_stdio+0x34>)
 800cf44:	4299      	cmp	r1, r3
 800cf46:	b510      	push	{r4, lr}
 800cf48:	4604      	mov	r4, r0
 800cf4a:	d001      	beq.n	800cf50 <cleanup_stdio+0x10>
 800cf4c:	f003 f81c 	bl	800ff88 <_fflush_r>
 800cf50:	68a1      	ldr	r1, [r4, #8]
 800cf52:	4b09      	ldr	r3, [pc, #36]	@ (800cf78 <cleanup_stdio+0x38>)
 800cf54:	4299      	cmp	r1, r3
 800cf56:	d002      	beq.n	800cf5e <cleanup_stdio+0x1e>
 800cf58:	4620      	mov	r0, r4
 800cf5a:	f003 f815 	bl	800ff88 <_fflush_r>
 800cf5e:	68e1      	ldr	r1, [r4, #12]
 800cf60:	4b06      	ldr	r3, [pc, #24]	@ (800cf7c <cleanup_stdio+0x3c>)
 800cf62:	4299      	cmp	r1, r3
 800cf64:	d004      	beq.n	800cf70 <cleanup_stdio+0x30>
 800cf66:	4620      	mov	r0, r4
 800cf68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf6c:	f003 b80c 	b.w	800ff88 <_fflush_r>
 800cf70:	bd10      	pop	{r4, pc}
 800cf72:	bf00      	nop
 800cf74:	200020f4 	.word	0x200020f4
 800cf78:	2000215c 	.word	0x2000215c
 800cf7c:	200021c4 	.word	0x200021c4

0800cf80 <global_stdio_init.part.0>:
 800cf80:	b510      	push	{r4, lr}
 800cf82:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb0 <global_stdio_init.part.0+0x30>)
 800cf84:	4c0b      	ldr	r4, [pc, #44]	@ (800cfb4 <global_stdio_init.part.0+0x34>)
 800cf86:	4a0c      	ldr	r2, [pc, #48]	@ (800cfb8 <global_stdio_init.part.0+0x38>)
 800cf88:	601a      	str	r2, [r3, #0]
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2104      	movs	r1, #4
 800cf90:	f7ff ff94 	bl	800cebc <std>
 800cf94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cf98:	2201      	movs	r2, #1
 800cf9a:	2109      	movs	r1, #9
 800cf9c:	f7ff ff8e 	bl	800cebc <std>
 800cfa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfa4:	2202      	movs	r2, #2
 800cfa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfaa:	2112      	movs	r1, #18
 800cfac:	f7ff bf86 	b.w	800cebc <std>
 800cfb0:	2000222c 	.word	0x2000222c
 800cfb4:	200020f4 	.word	0x200020f4
 800cfb8:	0800cf29 	.word	0x0800cf29

0800cfbc <__sfp_lock_acquire>:
 800cfbc:	4801      	ldr	r0, [pc, #4]	@ (800cfc4 <__sfp_lock_acquire+0x8>)
 800cfbe:	f000 ba26 	b.w	800d40e <__retarget_lock_acquire_recursive>
 800cfc2:	bf00      	nop
 800cfc4:	20002235 	.word	0x20002235

0800cfc8 <__sfp_lock_release>:
 800cfc8:	4801      	ldr	r0, [pc, #4]	@ (800cfd0 <__sfp_lock_release+0x8>)
 800cfca:	f000 ba21 	b.w	800d410 <__retarget_lock_release_recursive>
 800cfce:	bf00      	nop
 800cfd0:	20002235 	.word	0x20002235

0800cfd4 <__sinit>:
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	f7ff fff0 	bl	800cfbc <__sfp_lock_acquire>
 800cfdc:	6a23      	ldr	r3, [r4, #32]
 800cfde:	b11b      	cbz	r3, 800cfe8 <__sinit+0x14>
 800cfe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfe4:	f7ff bff0 	b.w	800cfc8 <__sfp_lock_release>
 800cfe8:	4b04      	ldr	r3, [pc, #16]	@ (800cffc <__sinit+0x28>)
 800cfea:	6223      	str	r3, [r4, #32]
 800cfec:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <__sinit+0x2c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1f5      	bne.n	800cfe0 <__sinit+0xc>
 800cff4:	f7ff ffc4 	bl	800cf80 <global_stdio_init.part.0>
 800cff8:	e7f2      	b.n	800cfe0 <__sinit+0xc>
 800cffa:	bf00      	nop
 800cffc:	0800cf41 	.word	0x0800cf41
 800d000:	2000222c 	.word	0x2000222c

0800d004 <_fwalk_sglue>:
 800d004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d008:	4607      	mov	r7, r0
 800d00a:	4688      	mov	r8, r1
 800d00c:	4614      	mov	r4, r2
 800d00e:	2600      	movs	r6, #0
 800d010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d014:	f1b9 0901 	subs.w	r9, r9, #1
 800d018:	d505      	bpl.n	800d026 <_fwalk_sglue+0x22>
 800d01a:	6824      	ldr	r4, [r4, #0]
 800d01c:	2c00      	cmp	r4, #0
 800d01e:	d1f7      	bne.n	800d010 <_fwalk_sglue+0xc>
 800d020:	4630      	mov	r0, r6
 800d022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d907      	bls.n	800d03c <_fwalk_sglue+0x38>
 800d02c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d030:	3301      	adds	r3, #1
 800d032:	d003      	beq.n	800d03c <_fwalk_sglue+0x38>
 800d034:	4629      	mov	r1, r5
 800d036:	4638      	mov	r0, r7
 800d038:	47c0      	blx	r8
 800d03a:	4306      	orrs	r6, r0
 800d03c:	3568      	adds	r5, #104	@ 0x68
 800d03e:	e7e9      	b.n	800d014 <_fwalk_sglue+0x10>

0800d040 <iprintf>:
 800d040:	b40f      	push	{r0, r1, r2, r3}
 800d042:	b507      	push	{r0, r1, r2, lr}
 800d044:	4906      	ldr	r1, [pc, #24]	@ (800d060 <iprintf+0x20>)
 800d046:	ab04      	add	r3, sp, #16
 800d048:	6808      	ldr	r0, [r1, #0]
 800d04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04e:	6881      	ldr	r1, [r0, #8]
 800d050:	9301      	str	r3, [sp, #4]
 800d052:	f002 fdfd 	bl	800fc50 <_vfiprintf_r>
 800d056:	b003      	add	sp, #12
 800d058:	f85d eb04 	ldr.w	lr, [sp], #4
 800d05c:	b004      	add	sp, #16
 800d05e:	4770      	bx	lr
 800d060:	20000118 	.word	0x20000118

0800d064 <_puts_r>:
 800d064:	6a03      	ldr	r3, [r0, #32]
 800d066:	b570      	push	{r4, r5, r6, lr}
 800d068:	6884      	ldr	r4, [r0, #8]
 800d06a:	4605      	mov	r5, r0
 800d06c:	460e      	mov	r6, r1
 800d06e:	b90b      	cbnz	r3, 800d074 <_puts_r+0x10>
 800d070:	f7ff ffb0 	bl	800cfd4 <__sinit>
 800d074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d076:	07db      	lsls	r3, r3, #31
 800d078:	d405      	bmi.n	800d086 <_puts_r+0x22>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	0598      	lsls	r0, r3, #22
 800d07e:	d402      	bmi.n	800d086 <_puts_r+0x22>
 800d080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d082:	f000 f9c4 	bl	800d40e <__retarget_lock_acquire_recursive>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	0719      	lsls	r1, r3, #28
 800d08a:	d502      	bpl.n	800d092 <_puts_r+0x2e>
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d135      	bne.n	800d0fe <_puts_r+0x9a>
 800d092:	4621      	mov	r1, r4
 800d094:	4628      	mov	r0, r5
 800d096:	f000 f8e7 	bl	800d268 <__swsetup_r>
 800d09a:	b380      	cbz	r0, 800d0fe <_puts_r+0x9a>
 800d09c:	f04f 35ff 	mov.w	r5, #4294967295
 800d0a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0a2:	07da      	lsls	r2, r3, #31
 800d0a4:	d405      	bmi.n	800d0b2 <_puts_r+0x4e>
 800d0a6:	89a3      	ldrh	r3, [r4, #12]
 800d0a8:	059b      	lsls	r3, r3, #22
 800d0aa:	d402      	bmi.n	800d0b2 <_puts_r+0x4e>
 800d0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ae:	f000 f9af 	bl	800d410 <__retarget_lock_release_recursive>
 800d0b2:	4628      	mov	r0, r5
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	da04      	bge.n	800d0c4 <_puts_r+0x60>
 800d0ba:	69a2      	ldr	r2, [r4, #24]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	dc17      	bgt.n	800d0f0 <_puts_r+0x8c>
 800d0c0:	290a      	cmp	r1, #10
 800d0c2:	d015      	beq.n	800d0f0 <_puts_r+0x8c>
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	6022      	str	r2, [r4, #0]
 800d0ca:	7019      	strb	r1, [r3, #0]
 800d0cc:	68a3      	ldr	r3, [r4, #8]
 800d0ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	60a3      	str	r3, [r4, #8]
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	d1ed      	bne.n	800d0b6 <_puts_r+0x52>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	da11      	bge.n	800d102 <_puts_r+0x9e>
 800d0de:	4622      	mov	r2, r4
 800d0e0:	210a      	movs	r1, #10
 800d0e2:	4628      	mov	r0, r5
 800d0e4:	f000 f881 	bl	800d1ea <__swbuf_r>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d0d7      	beq.n	800d09c <_puts_r+0x38>
 800d0ec:	250a      	movs	r5, #10
 800d0ee:	e7d7      	b.n	800d0a0 <_puts_r+0x3c>
 800d0f0:	4622      	mov	r2, r4
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f000 f879 	bl	800d1ea <__swbuf_r>
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	d1e7      	bne.n	800d0cc <_puts_r+0x68>
 800d0fc:	e7ce      	b.n	800d09c <_puts_r+0x38>
 800d0fe:	3e01      	subs	r6, #1
 800d100:	e7e4      	b.n	800d0cc <_puts_r+0x68>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	6022      	str	r2, [r4, #0]
 800d108:	220a      	movs	r2, #10
 800d10a:	701a      	strb	r2, [r3, #0]
 800d10c:	e7ee      	b.n	800d0ec <_puts_r+0x88>
	...

0800d110 <puts>:
 800d110:	4b02      	ldr	r3, [pc, #8]	@ (800d11c <puts+0xc>)
 800d112:	4601      	mov	r1, r0
 800d114:	6818      	ldr	r0, [r3, #0]
 800d116:	f7ff bfa5 	b.w	800d064 <_puts_r>
 800d11a:	bf00      	nop
 800d11c:	20000118 	.word	0x20000118

0800d120 <siprintf>:
 800d120:	b40e      	push	{r1, r2, r3}
 800d122:	b510      	push	{r4, lr}
 800d124:	b09d      	sub	sp, #116	@ 0x74
 800d126:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d128:	9002      	str	r0, [sp, #8]
 800d12a:	9006      	str	r0, [sp, #24]
 800d12c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d130:	480a      	ldr	r0, [pc, #40]	@ (800d15c <siprintf+0x3c>)
 800d132:	9107      	str	r1, [sp, #28]
 800d134:	9104      	str	r1, [sp, #16]
 800d136:	490a      	ldr	r1, [pc, #40]	@ (800d160 <siprintf+0x40>)
 800d138:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13c:	9105      	str	r1, [sp, #20]
 800d13e:	2400      	movs	r4, #0
 800d140:	a902      	add	r1, sp, #8
 800d142:	6800      	ldr	r0, [r0, #0]
 800d144:	9301      	str	r3, [sp, #4]
 800d146:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d148:	f002 fc5c 	bl	800fa04 <_svfiprintf_r>
 800d14c:	9b02      	ldr	r3, [sp, #8]
 800d14e:	701c      	strb	r4, [r3, #0]
 800d150:	b01d      	add	sp, #116	@ 0x74
 800d152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d156:	b003      	add	sp, #12
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	20000118 	.word	0x20000118
 800d160:	ffff0208 	.word	0xffff0208

0800d164 <__sread>:
 800d164:	b510      	push	{r4, lr}
 800d166:	460c      	mov	r4, r1
 800d168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16c:	f000 f900 	bl	800d370 <_read_r>
 800d170:	2800      	cmp	r0, #0
 800d172:	bfab      	itete	ge
 800d174:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d176:	89a3      	ldrhlt	r3, [r4, #12]
 800d178:	181b      	addge	r3, r3, r0
 800d17a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d17e:	bfac      	ite	ge
 800d180:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d182:	81a3      	strhlt	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__swrite>:
 800d186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18a:	461f      	mov	r7, r3
 800d18c:	898b      	ldrh	r3, [r1, #12]
 800d18e:	05db      	lsls	r3, r3, #23
 800d190:	4605      	mov	r5, r0
 800d192:	460c      	mov	r4, r1
 800d194:	4616      	mov	r6, r2
 800d196:	d505      	bpl.n	800d1a4 <__swrite+0x1e>
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	2302      	movs	r3, #2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f000 f8d4 	bl	800d34c <_lseek_r>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	4632      	mov	r2, r6
 800d1b2:	463b      	mov	r3, r7
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ba:	f000 b8eb 	b.w	800d394 <_write_r>

0800d1be <__sseek>:
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c6:	f000 f8c1 	bl	800d34c <_lseek_r>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	bf15      	itete	ne
 800d1d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d1d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d1d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1da:	81a3      	strheq	r3, [r4, #12]
 800d1dc:	bf18      	it	ne
 800d1de:	81a3      	strhne	r3, [r4, #12]
 800d1e0:	bd10      	pop	{r4, pc}

0800d1e2 <__sclose>:
 800d1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e6:	f000 b8a1 	b.w	800d32c <_close_r>

0800d1ea <__swbuf_r>:
 800d1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ec:	460e      	mov	r6, r1
 800d1ee:	4614      	mov	r4, r2
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	b118      	cbz	r0, 800d1fc <__swbuf_r+0x12>
 800d1f4:	6a03      	ldr	r3, [r0, #32]
 800d1f6:	b90b      	cbnz	r3, 800d1fc <__swbuf_r+0x12>
 800d1f8:	f7ff feec 	bl	800cfd4 <__sinit>
 800d1fc:	69a3      	ldr	r3, [r4, #24]
 800d1fe:	60a3      	str	r3, [r4, #8]
 800d200:	89a3      	ldrh	r3, [r4, #12]
 800d202:	071a      	lsls	r2, r3, #28
 800d204:	d501      	bpl.n	800d20a <__swbuf_r+0x20>
 800d206:	6923      	ldr	r3, [r4, #16]
 800d208:	b943      	cbnz	r3, 800d21c <__swbuf_r+0x32>
 800d20a:	4621      	mov	r1, r4
 800d20c:	4628      	mov	r0, r5
 800d20e:	f000 f82b 	bl	800d268 <__swsetup_r>
 800d212:	b118      	cbz	r0, 800d21c <__swbuf_r+0x32>
 800d214:	f04f 37ff 	mov.w	r7, #4294967295
 800d218:	4638      	mov	r0, r7
 800d21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d21c:	6823      	ldr	r3, [r4, #0]
 800d21e:	6922      	ldr	r2, [r4, #16]
 800d220:	1a98      	subs	r0, r3, r2
 800d222:	6963      	ldr	r3, [r4, #20]
 800d224:	b2f6      	uxtb	r6, r6
 800d226:	4283      	cmp	r3, r0
 800d228:	4637      	mov	r7, r6
 800d22a:	dc05      	bgt.n	800d238 <__swbuf_r+0x4e>
 800d22c:	4621      	mov	r1, r4
 800d22e:	4628      	mov	r0, r5
 800d230:	f002 feaa 	bl	800ff88 <_fflush_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	d1ed      	bne.n	800d214 <__swbuf_r+0x2a>
 800d238:	68a3      	ldr	r3, [r4, #8]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	60a3      	str	r3, [r4, #8]
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	701e      	strb	r6, [r3, #0]
 800d246:	6962      	ldr	r2, [r4, #20]
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d004      	beq.n	800d258 <__swbuf_r+0x6e>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	07db      	lsls	r3, r3, #31
 800d252:	d5e1      	bpl.n	800d218 <__swbuf_r+0x2e>
 800d254:	2e0a      	cmp	r6, #10
 800d256:	d1df      	bne.n	800d218 <__swbuf_r+0x2e>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f002 fe94 	bl	800ff88 <_fflush_r>
 800d260:	2800      	cmp	r0, #0
 800d262:	d0d9      	beq.n	800d218 <__swbuf_r+0x2e>
 800d264:	e7d6      	b.n	800d214 <__swbuf_r+0x2a>
	...

0800d268 <__swsetup_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4b29      	ldr	r3, [pc, #164]	@ (800d310 <__swsetup_r+0xa8>)
 800d26c:	4605      	mov	r5, r0
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	460c      	mov	r4, r1
 800d272:	b118      	cbz	r0, 800d27c <__swsetup_r+0x14>
 800d274:	6a03      	ldr	r3, [r0, #32]
 800d276:	b90b      	cbnz	r3, 800d27c <__swsetup_r+0x14>
 800d278:	f7ff feac 	bl	800cfd4 <__sinit>
 800d27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d280:	0719      	lsls	r1, r3, #28
 800d282:	d422      	bmi.n	800d2ca <__swsetup_r+0x62>
 800d284:	06da      	lsls	r2, r3, #27
 800d286:	d407      	bmi.n	800d298 <__swsetup_r+0x30>
 800d288:	2209      	movs	r2, #9
 800d28a:	602a      	str	r2, [r5, #0]
 800d28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	e033      	b.n	800d300 <__swsetup_r+0x98>
 800d298:	0758      	lsls	r0, r3, #29
 800d29a:	d512      	bpl.n	800d2c2 <__swsetup_r+0x5a>
 800d29c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d29e:	b141      	cbz	r1, 800d2b2 <__swsetup_r+0x4a>
 800d2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	d002      	beq.n	800d2ae <__swsetup_r+0x46>
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f000 ff21 	bl	800e0f0 <_free_r>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f043 0308 	orr.w	r3, r3, #8
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	b94b      	cbnz	r3, 800d2e2 <__swsetup_r+0x7a>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2d8:	d003      	beq.n	800d2e2 <__swsetup_r+0x7a>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f002 fea1 	bl	8010024 <__smakebuf_r>
 800d2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2e6:	f013 0201 	ands.w	r2, r3, #1
 800d2ea:	d00a      	beq.n	800d302 <__swsetup_r+0x9a>
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	60a2      	str	r2, [r4, #8]
 800d2f0:	6962      	ldr	r2, [r4, #20]
 800d2f2:	4252      	negs	r2, r2
 800d2f4:	61a2      	str	r2, [r4, #24]
 800d2f6:	6922      	ldr	r2, [r4, #16]
 800d2f8:	b942      	cbnz	r2, 800d30c <__swsetup_r+0xa4>
 800d2fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2fe:	d1c5      	bne.n	800d28c <__swsetup_r+0x24>
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	0799      	lsls	r1, r3, #30
 800d304:	bf58      	it	pl
 800d306:	6962      	ldrpl	r2, [r4, #20]
 800d308:	60a2      	str	r2, [r4, #8]
 800d30a:	e7f4      	b.n	800d2f6 <__swsetup_r+0x8e>
 800d30c:	2000      	movs	r0, #0
 800d30e:	e7f7      	b.n	800d300 <__swsetup_r+0x98>
 800d310:	20000118 	.word	0x20000118

0800d314 <memset>:
 800d314:	4402      	add	r2, r0
 800d316:	4603      	mov	r3, r0
 800d318:	4293      	cmp	r3, r2
 800d31a:	d100      	bne.n	800d31e <memset+0xa>
 800d31c:	4770      	bx	lr
 800d31e:	f803 1b01 	strb.w	r1, [r3], #1
 800d322:	e7f9      	b.n	800d318 <memset+0x4>

0800d324 <_localeconv_r>:
 800d324:	4800      	ldr	r0, [pc, #0]	@ (800d328 <_localeconv_r+0x4>)
 800d326:	4770      	bx	lr
 800d328:	20000258 	.word	0x20000258

0800d32c <_close_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4d06      	ldr	r5, [pc, #24]	@ (800d348 <_close_r+0x1c>)
 800d330:	2300      	movs	r3, #0
 800d332:	4604      	mov	r4, r0
 800d334:	4608      	mov	r0, r1
 800d336:	602b      	str	r3, [r5, #0]
 800d338:	f7f4 fa70 	bl	800181c <_close>
 800d33c:	1c43      	adds	r3, r0, #1
 800d33e:	d102      	bne.n	800d346 <_close_r+0x1a>
 800d340:	682b      	ldr	r3, [r5, #0]
 800d342:	b103      	cbz	r3, 800d346 <_close_r+0x1a>
 800d344:	6023      	str	r3, [r4, #0]
 800d346:	bd38      	pop	{r3, r4, r5, pc}
 800d348:	20002230 	.word	0x20002230

0800d34c <_lseek_r>:
 800d34c:	b538      	push	{r3, r4, r5, lr}
 800d34e:	4d07      	ldr	r5, [pc, #28]	@ (800d36c <_lseek_r+0x20>)
 800d350:	4604      	mov	r4, r0
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	2200      	movs	r2, #0
 800d358:	602a      	str	r2, [r5, #0]
 800d35a:	461a      	mov	r2, r3
 800d35c:	f7f4 fa85 	bl	800186a <_lseek>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_lseek_r+0x1e>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_lseek_r+0x1e>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	20002230 	.word	0x20002230

0800d370 <_read_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4d07      	ldr	r5, [pc, #28]	@ (800d390 <_read_r+0x20>)
 800d374:	4604      	mov	r4, r0
 800d376:	4608      	mov	r0, r1
 800d378:	4611      	mov	r1, r2
 800d37a:	2200      	movs	r2, #0
 800d37c:	602a      	str	r2, [r5, #0]
 800d37e:	461a      	mov	r2, r3
 800d380:	f7f4 fa2f 	bl	80017e2 <_read>
 800d384:	1c43      	adds	r3, r0, #1
 800d386:	d102      	bne.n	800d38e <_read_r+0x1e>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	b103      	cbz	r3, 800d38e <_read_r+0x1e>
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	20002230 	.word	0x20002230

0800d394 <_write_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d07      	ldr	r5, [pc, #28]	@ (800d3b4 <_write_r+0x20>)
 800d398:	4604      	mov	r4, r0
 800d39a:	4608      	mov	r0, r1
 800d39c:	4611      	mov	r1, r2
 800d39e:	2200      	movs	r2, #0
 800d3a0:	602a      	str	r2, [r5, #0]
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	f7f4 f884 	bl	80014b0 <_write>
 800d3a8:	1c43      	adds	r3, r0, #1
 800d3aa:	d102      	bne.n	800d3b2 <_write_r+0x1e>
 800d3ac:	682b      	ldr	r3, [r5, #0]
 800d3ae:	b103      	cbz	r3, 800d3b2 <_write_r+0x1e>
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	bd38      	pop	{r3, r4, r5, pc}
 800d3b4:	20002230 	.word	0x20002230

0800d3b8 <__errno>:
 800d3b8:	4b01      	ldr	r3, [pc, #4]	@ (800d3c0 <__errno+0x8>)
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	20000118 	.word	0x20000118

0800d3c4 <__libc_init_array>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d3fc <__libc_init_array+0x38>)
 800d3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d400 <__libc_init_array+0x3c>)
 800d3ca:	1b64      	subs	r4, r4, r5
 800d3cc:	10a4      	asrs	r4, r4, #2
 800d3ce:	2600      	movs	r6, #0
 800d3d0:	42a6      	cmp	r6, r4
 800d3d2:	d109      	bne.n	800d3e8 <__libc_init_array+0x24>
 800d3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d404 <__libc_init_array+0x40>)
 800d3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d408 <__libc_init_array+0x44>)
 800d3d8:	f004 fed0 	bl	801217c <_init>
 800d3dc:	1b64      	subs	r4, r4, r5
 800d3de:	10a4      	asrs	r4, r4, #2
 800d3e0:	2600      	movs	r6, #0
 800d3e2:	42a6      	cmp	r6, r4
 800d3e4:	d105      	bne.n	800d3f2 <__libc_init_array+0x2e>
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ec:	4798      	blx	r3
 800d3ee:	3601      	adds	r6, #1
 800d3f0:	e7ee      	b.n	800d3d0 <__libc_init_array+0xc>
 800d3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f6:	4798      	blx	r3
 800d3f8:	3601      	adds	r6, #1
 800d3fa:	e7f2      	b.n	800d3e2 <__libc_init_array+0x1e>
 800d3fc:	08012b50 	.word	0x08012b50
 800d400:	08012b50 	.word	0x08012b50
 800d404:	08012b50 	.word	0x08012b50
 800d408:	08012b54 	.word	0x08012b54

0800d40c <__retarget_lock_init_recursive>:
 800d40c:	4770      	bx	lr

0800d40e <__retarget_lock_acquire_recursive>:
 800d40e:	4770      	bx	lr

0800d410 <__retarget_lock_release_recursive>:
 800d410:	4770      	bx	lr

0800d412 <memcpy>:
 800d412:	440a      	add	r2, r1
 800d414:	4291      	cmp	r1, r2
 800d416:	f100 33ff 	add.w	r3, r0, #4294967295
 800d41a:	d100      	bne.n	800d41e <memcpy+0xc>
 800d41c:	4770      	bx	lr
 800d41e:	b510      	push	{r4, lr}
 800d420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d428:	4291      	cmp	r1, r2
 800d42a:	d1f9      	bne.n	800d420 <memcpy+0xe>
 800d42c:	bd10      	pop	{r4, pc}
	...

0800d430 <nanf>:
 800d430:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d438 <nanf+0x8>
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	7fc00000 	.word	0x7fc00000

0800d43c <quorem>:
 800d43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	6903      	ldr	r3, [r0, #16]
 800d442:	690c      	ldr	r4, [r1, #16]
 800d444:	42a3      	cmp	r3, r4
 800d446:	4607      	mov	r7, r0
 800d448:	db7e      	blt.n	800d548 <quorem+0x10c>
 800d44a:	3c01      	subs	r4, #1
 800d44c:	f101 0814 	add.w	r8, r1, #20
 800d450:	00a3      	lsls	r3, r4, #2
 800d452:	f100 0514 	add.w	r5, r0, #20
 800d456:	9300      	str	r3, [sp, #0]
 800d458:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d466:	3301      	adds	r3, #1
 800d468:	429a      	cmp	r2, r3
 800d46a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d46e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d472:	d32e      	bcc.n	800d4d2 <quorem+0x96>
 800d474:	f04f 0a00 	mov.w	sl, #0
 800d478:	46c4      	mov	ip, r8
 800d47a:	46ae      	mov	lr, r5
 800d47c:	46d3      	mov	fp, sl
 800d47e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d482:	b298      	uxth	r0, r3
 800d484:	fb06 a000 	mla	r0, r6, r0, sl
 800d488:	0c02      	lsrs	r2, r0, #16
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	fb06 2303 	mla	r3, r6, r3, r2
 800d490:	f8de 2000 	ldr.w	r2, [lr]
 800d494:	b280      	uxth	r0, r0
 800d496:	b292      	uxth	r2, r2
 800d498:	1a12      	subs	r2, r2, r0
 800d49a:	445a      	add	r2, fp
 800d49c:	f8de 0000 	ldr.w	r0, [lr]
 800d4a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d4aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d4ae:	b292      	uxth	r2, r2
 800d4b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d4b4:	45e1      	cmp	r9, ip
 800d4b6:	f84e 2b04 	str.w	r2, [lr], #4
 800d4ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d4be:	d2de      	bcs.n	800d47e <quorem+0x42>
 800d4c0:	9b00      	ldr	r3, [sp, #0]
 800d4c2:	58eb      	ldr	r3, [r5, r3]
 800d4c4:	b92b      	cbnz	r3, 800d4d2 <quorem+0x96>
 800d4c6:	9b01      	ldr	r3, [sp, #4]
 800d4c8:	3b04      	subs	r3, #4
 800d4ca:	429d      	cmp	r5, r3
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	d32f      	bcc.n	800d530 <quorem+0xf4>
 800d4d0:	613c      	str	r4, [r7, #16]
 800d4d2:	4638      	mov	r0, r7
 800d4d4:	f001 f9c8 	bl	800e868 <__mcmp>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	db25      	blt.n	800d528 <quorem+0xec>
 800d4dc:	4629      	mov	r1, r5
 800d4de:	2000      	movs	r0, #0
 800d4e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800d4e4:	f8d1 c000 	ldr.w	ip, [r1]
 800d4e8:	fa1f fe82 	uxth.w	lr, r2
 800d4ec:	fa1f f38c 	uxth.w	r3, ip
 800d4f0:	eba3 030e 	sub.w	r3, r3, lr
 800d4f4:	4403      	add	r3, r0
 800d4f6:	0c12      	lsrs	r2, r2, #16
 800d4f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d4fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d500:	b29b      	uxth	r3, r3
 800d502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d506:	45c1      	cmp	r9, r8
 800d508:	f841 3b04 	str.w	r3, [r1], #4
 800d50c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d510:	d2e6      	bcs.n	800d4e0 <quorem+0xa4>
 800d512:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d51a:	b922      	cbnz	r2, 800d526 <quorem+0xea>
 800d51c:	3b04      	subs	r3, #4
 800d51e:	429d      	cmp	r5, r3
 800d520:	461a      	mov	r2, r3
 800d522:	d30b      	bcc.n	800d53c <quorem+0x100>
 800d524:	613c      	str	r4, [r7, #16]
 800d526:	3601      	adds	r6, #1
 800d528:	4630      	mov	r0, r6
 800d52a:	b003      	add	sp, #12
 800d52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d530:	6812      	ldr	r2, [r2, #0]
 800d532:	3b04      	subs	r3, #4
 800d534:	2a00      	cmp	r2, #0
 800d536:	d1cb      	bne.n	800d4d0 <quorem+0x94>
 800d538:	3c01      	subs	r4, #1
 800d53a:	e7c6      	b.n	800d4ca <quorem+0x8e>
 800d53c:	6812      	ldr	r2, [r2, #0]
 800d53e:	3b04      	subs	r3, #4
 800d540:	2a00      	cmp	r2, #0
 800d542:	d1ef      	bne.n	800d524 <quorem+0xe8>
 800d544:	3c01      	subs	r4, #1
 800d546:	e7ea      	b.n	800d51e <quorem+0xe2>
 800d548:	2000      	movs	r0, #0
 800d54a:	e7ee      	b.n	800d52a <quorem+0xee>
 800d54c:	0000      	movs	r0, r0
	...

0800d550 <_dtoa_r>:
 800d550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d554:	69c7      	ldr	r7, [r0, #28]
 800d556:	b097      	sub	sp, #92	@ 0x5c
 800d558:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d55c:	ec55 4b10 	vmov	r4, r5, d0
 800d560:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d562:	9107      	str	r1, [sp, #28]
 800d564:	4681      	mov	r9, r0
 800d566:	920c      	str	r2, [sp, #48]	@ 0x30
 800d568:	9311      	str	r3, [sp, #68]	@ 0x44
 800d56a:	b97f      	cbnz	r7, 800d58c <_dtoa_r+0x3c>
 800d56c:	2010      	movs	r0, #16
 800d56e:	f000 fe09 	bl	800e184 <malloc>
 800d572:	4602      	mov	r2, r0
 800d574:	f8c9 001c 	str.w	r0, [r9, #28]
 800d578:	b920      	cbnz	r0, 800d584 <_dtoa_r+0x34>
 800d57a:	4ba9      	ldr	r3, [pc, #676]	@ (800d820 <_dtoa_r+0x2d0>)
 800d57c:	21ef      	movs	r1, #239	@ 0xef
 800d57e:	48a9      	ldr	r0, [pc, #676]	@ (800d824 <_dtoa_r+0x2d4>)
 800d580:	f002 fdf2 	bl	8010168 <__assert_func>
 800d584:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d588:	6007      	str	r7, [r0, #0]
 800d58a:	60c7      	str	r7, [r0, #12]
 800d58c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d590:	6819      	ldr	r1, [r3, #0]
 800d592:	b159      	cbz	r1, 800d5ac <_dtoa_r+0x5c>
 800d594:	685a      	ldr	r2, [r3, #4]
 800d596:	604a      	str	r2, [r1, #4]
 800d598:	2301      	movs	r3, #1
 800d59a:	4093      	lsls	r3, r2
 800d59c:	608b      	str	r3, [r1, #8]
 800d59e:	4648      	mov	r0, r9
 800d5a0:	f000 fee6 	bl	800e370 <_Bfree>
 800d5a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	601a      	str	r2, [r3, #0]
 800d5ac:	1e2b      	subs	r3, r5, #0
 800d5ae:	bfb9      	ittee	lt
 800d5b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d5b4:	9305      	strlt	r3, [sp, #20]
 800d5b6:	2300      	movge	r3, #0
 800d5b8:	6033      	strge	r3, [r6, #0]
 800d5ba:	9f05      	ldr	r7, [sp, #20]
 800d5bc:	4b9a      	ldr	r3, [pc, #616]	@ (800d828 <_dtoa_r+0x2d8>)
 800d5be:	bfbc      	itt	lt
 800d5c0:	2201      	movlt	r2, #1
 800d5c2:	6032      	strlt	r2, [r6, #0]
 800d5c4:	43bb      	bics	r3, r7
 800d5c6:	d112      	bne.n	800d5ee <_dtoa_r+0x9e>
 800d5c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d5ce:	6013      	str	r3, [r2, #0]
 800d5d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d5d4:	4323      	orrs	r3, r4
 800d5d6:	f000 855a 	beq.w	800e08e <_dtoa_r+0xb3e>
 800d5da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5dc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d83c <_dtoa_r+0x2ec>
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 855c 	beq.w	800e09e <_dtoa_r+0xb4e>
 800d5e6:	f10a 0303 	add.w	r3, sl, #3
 800d5ea:	f000 bd56 	b.w	800e09a <_dtoa_r+0xb4a>
 800d5ee:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	ec51 0b17 	vmov	r0, r1, d7
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d5fe:	f7f3 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 800d602:	4680      	mov	r8, r0
 800d604:	b158      	cbz	r0, 800d61e <_dtoa_r+0xce>
 800d606:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d608:	2301      	movs	r3, #1
 800d60a:	6013      	str	r3, [r2, #0]
 800d60c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d60e:	b113      	cbz	r3, 800d616 <_dtoa_r+0xc6>
 800d610:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d612:	4b86      	ldr	r3, [pc, #536]	@ (800d82c <_dtoa_r+0x2dc>)
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d840 <_dtoa_r+0x2f0>
 800d61a:	f000 bd40 	b.w	800e09e <_dtoa_r+0xb4e>
 800d61e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d622:	aa14      	add	r2, sp, #80	@ 0x50
 800d624:	a915      	add	r1, sp, #84	@ 0x54
 800d626:	4648      	mov	r0, r9
 800d628:	f001 fa3e 	bl	800eaa8 <__d2b>
 800d62c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d630:	9002      	str	r0, [sp, #8]
 800d632:	2e00      	cmp	r6, #0
 800d634:	d078      	beq.n	800d728 <_dtoa_r+0x1d8>
 800d636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d638:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d644:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d648:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d64c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d650:	4619      	mov	r1, r3
 800d652:	2200      	movs	r2, #0
 800d654:	4b76      	ldr	r3, [pc, #472]	@ (800d830 <_dtoa_r+0x2e0>)
 800d656:	f7f2 fe17 	bl	8000288 <__aeabi_dsub>
 800d65a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d808 <_dtoa_r+0x2b8>)
 800d65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d660:	f7f2 ffca 	bl	80005f8 <__aeabi_dmul>
 800d664:	a36a      	add	r3, pc, #424	@ (adr r3, 800d810 <_dtoa_r+0x2c0>)
 800d666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66a:	f7f2 fe0f 	bl	800028c <__adddf3>
 800d66e:	4604      	mov	r4, r0
 800d670:	4630      	mov	r0, r6
 800d672:	460d      	mov	r5, r1
 800d674:	f7f2 ff56 	bl	8000524 <__aeabi_i2d>
 800d678:	a367      	add	r3, pc, #412	@ (adr r3, 800d818 <_dtoa_r+0x2c8>)
 800d67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d67e:	f7f2 ffbb 	bl	80005f8 <__aeabi_dmul>
 800d682:	4602      	mov	r2, r0
 800d684:	460b      	mov	r3, r1
 800d686:	4620      	mov	r0, r4
 800d688:	4629      	mov	r1, r5
 800d68a:	f7f2 fdff 	bl	800028c <__adddf3>
 800d68e:	4604      	mov	r4, r0
 800d690:	460d      	mov	r5, r1
 800d692:	f7f3 fa61 	bl	8000b58 <__aeabi_d2iz>
 800d696:	2200      	movs	r2, #0
 800d698:	4607      	mov	r7, r0
 800d69a:	2300      	movs	r3, #0
 800d69c:	4620      	mov	r0, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	f7f3 fa1c 	bl	8000adc <__aeabi_dcmplt>
 800d6a4:	b140      	cbz	r0, 800d6b8 <_dtoa_r+0x168>
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	f7f2 ff3c 	bl	8000524 <__aeabi_i2d>
 800d6ac:	4622      	mov	r2, r4
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	f7f3 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6b4:	b900      	cbnz	r0, 800d6b8 <_dtoa_r+0x168>
 800d6b6:	3f01      	subs	r7, #1
 800d6b8:	2f16      	cmp	r7, #22
 800d6ba:	d852      	bhi.n	800d762 <_dtoa_r+0x212>
 800d6bc:	4b5d      	ldr	r3, [pc, #372]	@ (800d834 <_dtoa_r+0x2e4>)
 800d6be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d6ca:	f7f3 fa07 	bl	8000adc <__aeabi_dcmplt>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d049      	beq.n	800d766 <_dtoa_r+0x216>
 800d6d2:	3f01      	subs	r7, #1
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d6d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d6da:	1b9b      	subs	r3, r3, r6
 800d6dc:	1e5a      	subs	r2, r3, #1
 800d6de:	bf45      	ittet	mi
 800d6e0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d6e4:	9300      	strmi	r3, [sp, #0]
 800d6e6:	2300      	movpl	r3, #0
 800d6e8:	2300      	movmi	r3, #0
 800d6ea:	9206      	str	r2, [sp, #24]
 800d6ec:	bf54      	ite	pl
 800d6ee:	9300      	strpl	r3, [sp, #0]
 800d6f0:	9306      	strmi	r3, [sp, #24]
 800d6f2:	2f00      	cmp	r7, #0
 800d6f4:	db39      	blt.n	800d76a <_dtoa_r+0x21a>
 800d6f6:	9b06      	ldr	r3, [sp, #24]
 800d6f8:	970d      	str	r7, [sp, #52]	@ 0x34
 800d6fa:	443b      	add	r3, r7
 800d6fc:	9306      	str	r3, [sp, #24]
 800d6fe:	2300      	movs	r3, #0
 800d700:	9308      	str	r3, [sp, #32]
 800d702:	9b07      	ldr	r3, [sp, #28]
 800d704:	2b09      	cmp	r3, #9
 800d706:	d863      	bhi.n	800d7d0 <_dtoa_r+0x280>
 800d708:	2b05      	cmp	r3, #5
 800d70a:	bfc4      	itt	gt
 800d70c:	3b04      	subgt	r3, #4
 800d70e:	9307      	strgt	r3, [sp, #28]
 800d710:	9b07      	ldr	r3, [sp, #28]
 800d712:	f1a3 0302 	sub.w	r3, r3, #2
 800d716:	bfcc      	ite	gt
 800d718:	2400      	movgt	r4, #0
 800d71a:	2401      	movle	r4, #1
 800d71c:	2b03      	cmp	r3, #3
 800d71e:	d863      	bhi.n	800d7e8 <_dtoa_r+0x298>
 800d720:	e8df f003 	tbb	[pc, r3]
 800d724:	2b375452 	.word	0x2b375452
 800d728:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d72c:	441e      	add	r6, r3
 800d72e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d732:	2b20      	cmp	r3, #32
 800d734:	bfc1      	itttt	gt
 800d736:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d73a:	409f      	lslgt	r7, r3
 800d73c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d740:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d744:	bfd6      	itet	le
 800d746:	f1c3 0320 	rsble	r3, r3, #32
 800d74a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d74e:	fa04 f003 	lslle.w	r0, r4, r3
 800d752:	f7f2 fed7 	bl	8000504 <__aeabi_ui2d>
 800d756:	2201      	movs	r2, #1
 800d758:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d75c:	3e01      	subs	r6, #1
 800d75e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d760:	e776      	b.n	800d650 <_dtoa_r+0x100>
 800d762:	2301      	movs	r3, #1
 800d764:	e7b7      	b.n	800d6d6 <_dtoa_r+0x186>
 800d766:	9010      	str	r0, [sp, #64]	@ 0x40
 800d768:	e7b6      	b.n	800d6d8 <_dtoa_r+0x188>
 800d76a:	9b00      	ldr	r3, [sp, #0]
 800d76c:	1bdb      	subs	r3, r3, r7
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	427b      	negs	r3, r7
 800d772:	9308      	str	r3, [sp, #32]
 800d774:	2300      	movs	r3, #0
 800d776:	930d      	str	r3, [sp, #52]	@ 0x34
 800d778:	e7c3      	b.n	800d702 <_dtoa_r+0x1b2>
 800d77a:	2301      	movs	r3, #1
 800d77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d77e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d780:	eb07 0b03 	add.w	fp, r7, r3
 800d784:	f10b 0301 	add.w	r3, fp, #1
 800d788:	2b01      	cmp	r3, #1
 800d78a:	9303      	str	r3, [sp, #12]
 800d78c:	bfb8      	it	lt
 800d78e:	2301      	movlt	r3, #1
 800d790:	e006      	b.n	800d7a0 <_dtoa_r+0x250>
 800d792:	2301      	movs	r3, #1
 800d794:	9309      	str	r3, [sp, #36]	@ 0x24
 800d796:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dd28      	ble.n	800d7ee <_dtoa_r+0x29e>
 800d79c:	469b      	mov	fp, r3
 800d79e:	9303      	str	r3, [sp, #12]
 800d7a0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	2204      	movs	r2, #4
 800d7a8:	f102 0514 	add.w	r5, r2, #20
 800d7ac:	429d      	cmp	r5, r3
 800d7ae:	d926      	bls.n	800d7fe <_dtoa_r+0x2ae>
 800d7b0:	6041      	str	r1, [r0, #4]
 800d7b2:	4648      	mov	r0, r9
 800d7b4:	f000 fd9c 	bl	800e2f0 <_Balloc>
 800d7b8:	4682      	mov	sl, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d142      	bne.n	800d844 <_dtoa_r+0x2f4>
 800d7be:	4b1e      	ldr	r3, [pc, #120]	@ (800d838 <_dtoa_r+0x2e8>)
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d7c6:	e6da      	b.n	800d57e <_dtoa_r+0x2e>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e7e3      	b.n	800d794 <_dtoa_r+0x244>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	e7d5      	b.n	800d77c <_dtoa_r+0x22c>
 800d7d0:	2401      	movs	r4, #1
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9307      	str	r3, [sp, #28]
 800d7d6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d7d8:	f04f 3bff 	mov.w	fp, #4294967295
 800d7dc:	2200      	movs	r2, #0
 800d7de:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7e2:	2312      	movs	r3, #18
 800d7e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7e6:	e7db      	b.n	800d7a0 <_dtoa_r+0x250>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ec:	e7f4      	b.n	800d7d8 <_dtoa_r+0x288>
 800d7ee:	f04f 0b01 	mov.w	fp, #1
 800d7f2:	f8cd b00c 	str.w	fp, [sp, #12]
 800d7f6:	465b      	mov	r3, fp
 800d7f8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d7fc:	e7d0      	b.n	800d7a0 <_dtoa_r+0x250>
 800d7fe:	3101      	adds	r1, #1
 800d800:	0052      	lsls	r2, r2, #1
 800d802:	e7d1      	b.n	800d7a8 <_dtoa_r+0x258>
 800d804:	f3af 8000 	nop.w
 800d808:	636f4361 	.word	0x636f4361
 800d80c:	3fd287a7 	.word	0x3fd287a7
 800d810:	8b60c8b3 	.word	0x8b60c8b3
 800d814:	3fc68a28 	.word	0x3fc68a28
 800d818:	509f79fb 	.word	0x509f79fb
 800d81c:	3fd34413 	.word	0x3fd34413
 800d820:	0801250a 	.word	0x0801250a
 800d824:	08012521 	.word	0x08012521
 800d828:	7ff00000 	.word	0x7ff00000
 800d82c:	080124d5 	.word	0x080124d5
 800d830:	3ff80000 	.word	0x3ff80000
 800d834:	080126d0 	.word	0x080126d0
 800d838:	08012579 	.word	0x08012579
 800d83c:	08012506 	.word	0x08012506
 800d840:	080124d4 	.word	0x080124d4
 800d844:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d848:	6018      	str	r0, [r3, #0]
 800d84a:	9b03      	ldr	r3, [sp, #12]
 800d84c:	2b0e      	cmp	r3, #14
 800d84e:	f200 80a1 	bhi.w	800d994 <_dtoa_r+0x444>
 800d852:	2c00      	cmp	r4, #0
 800d854:	f000 809e 	beq.w	800d994 <_dtoa_r+0x444>
 800d858:	2f00      	cmp	r7, #0
 800d85a:	dd33      	ble.n	800d8c4 <_dtoa_r+0x374>
 800d85c:	4b9c      	ldr	r3, [pc, #624]	@ (800dad0 <_dtoa_r+0x580>)
 800d85e:	f007 020f 	and.w	r2, r7, #15
 800d862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d866:	ed93 7b00 	vldr	d7, [r3]
 800d86a:	05f8      	lsls	r0, r7, #23
 800d86c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d870:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d874:	d516      	bpl.n	800d8a4 <_dtoa_r+0x354>
 800d876:	4b97      	ldr	r3, [pc, #604]	@ (800dad4 <_dtoa_r+0x584>)
 800d878:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d87c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d880:	f7f2 ffe4 	bl	800084c <__aeabi_ddiv>
 800d884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d888:	f004 040f 	and.w	r4, r4, #15
 800d88c:	2603      	movs	r6, #3
 800d88e:	4d91      	ldr	r5, [pc, #580]	@ (800dad4 <_dtoa_r+0x584>)
 800d890:	b954      	cbnz	r4, 800d8a8 <_dtoa_r+0x358>
 800d892:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d89a:	f7f2 ffd7 	bl	800084c <__aeabi_ddiv>
 800d89e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8a2:	e028      	b.n	800d8f6 <_dtoa_r+0x3a6>
 800d8a4:	2602      	movs	r6, #2
 800d8a6:	e7f2      	b.n	800d88e <_dtoa_r+0x33e>
 800d8a8:	07e1      	lsls	r1, r4, #31
 800d8aa:	d508      	bpl.n	800d8be <_dtoa_r+0x36e>
 800d8ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d8b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d8b4:	f7f2 fea0 	bl	80005f8 <__aeabi_dmul>
 800d8b8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d8bc:	3601      	adds	r6, #1
 800d8be:	1064      	asrs	r4, r4, #1
 800d8c0:	3508      	adds	r5, #8
 800d8c2:	e7e5      	b.n	800d890 <_dtoa_r+0x340>
 800d8c4:	f000 80af 	beq.w	800da26 <_dtoa_r+0x4d6>
 800d8c8:	427c      	negs	r4, r7
 800d8ca:	4b81      	ldr	r3, [pc, #516]	@ (800dad0 <_dtoa_r+0x580>)
 800d8cc:	4d81      	ldr	r5, [pc, #516]	@ (800dad4 <_dtoa_r+0x584>)
 800d8ce:	f004 020f 	and.w	r2, r4, #15
 800d8d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d8de:	f7f2 fe8b 	bl	80005f8 <__aeabi_dmul>
 800d8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8e6:	1124      	asrs	r4, r4, #4
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	2602      	movs	r6, #2
 800d8ec:	2c00      	cmp	r4, #0
 800d8ee:	f040 808f 	bne.w	800da10 <_dtoa_r+0x4c0>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d1d3      	bne.n	800d89e <_dtoa_r+0x34e>
 800d8f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d8f8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f000 8094 	beq.w	800da2a <_dtoa_r+0x4da>
 800d902:	4b75      	ldr	r3, [pc, #468]	@ (800dad8 <_dtoa_r+0x588>)
 800d904:	2200      	movs	r2, #0
 800d906:	4620      	mov	r0, r4
 800d908:	4629      	mov	r1, r5
 800d90a:	f7f3 f8e7 	bl	8000adc <__aeabi_dcmplt>
 800d90e:	2800      	cmp	r0, #0
 800d910:	f000 808b 	beq.w	800da2a <_dtoa_r+0x4da>
 800d914:	9b03      	ldr	r3, [sp, #12]
 800d916:	2b00      	cmp	r3, #0
 800d918:	f000 8087 	beq.w	800da2a <_dtoa_r+0x4da>
 800d91c:	f1bb 0f00 	cmp.w	fp, #0
 800d920:	dd34      	ble.n	800d98c <_dtoa_r+0x43c>
 800d922:	4620      	mov	r0, r4
 800d924:	4b6d      	ldr	r3, [pc, #436]	@ (800dadc <_dtoa_r+0x58c>)
 800d926:	2200      	movs	r2, #0
 800d928:	4629      	mov	r1, r5
 800d92a:	f7f2 fe65 	bl	80005f8 <__aeabi_dmul>
 800d92e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d932:	f107 38ff 	add.w	r8, r7, #4294967295
 800d936:	3601      	adds	r6, #1
 800d938:	465c      	mov	r4, fp
 800d93a:	4630      	mov	r0, r6
 800d93c:	f7f2 fdf2 	bl	8000524 <__aeabi_i2d>
 800d940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d944:	f7f2 fe58 	bl	80005f8 <__aeabi_dmul>
 800d948:	4b65      	ldr	r3, [pc, #404]	@ (800dae0 <_dtoa_r+0x590>)
 800d94a:	2200      	movs	r2, #0
 800d94c:	f7f2 fc9e 	bl	800028c <__adddf3>
 800d950:	4605      	mov	r5, r0
 800d952:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d956:	2c00      	cmp	r4, #0
 800d958:	d16a      	bne.n	800da30 <_dtoa_r+0x4e0>
 800d95a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d95e:	4b61      	ldr	r3, [pc, #388]	@ (800dae4 <_dtoa_r+0x594>)
 800d960:	2200      	movs	r2, #0
 800d962:	f7f2 fc91 	bl	8000288 <__aeabi_dsub>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d96e:	462a      	mov	r2, r5
 800d970:	4633      	mov	r3, r6
 800d972:	f7f3 f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 800d976:	2800      	cmp	r0, #0
 800d978:	f040 8298 	bne.w	800deac <_dtoa_r+0x95c>
 800d97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d980:	462a      	mov	r2, r5
 800d982:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d986:	f7f3 f8a9 	bl	8000adc <__aeabi_dcmplt>
 800d98a:	bb38      	cbnz	r0, 800d9dc <_dtoa_r+0x48c>
 800d98c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d990:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d994:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d996:	2b00      	cmp	r3, #0
 800d998:	f2c0 8157 	blt.w	800dc4a <_dtoa_r+0x6fa>
 800d99c:	2f0e      	cmp	r7, #14
 800d99e:	f300 8154 	bgt.w	800dc4a <_dtoa_r+0x6fa>
 800d9a2:	4b4b      	ldr	r3, [pc, #300]	@ (800dad0 <_dtoa_r+0x580>)
 800d9a4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d9a8:	ed93 7b00 	vldr	d7, [r3]
 800d9ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	ed8d 7b00 	vstr	d7, [sp]
 800d9b4:	f280 80e5 	bge.w	800db82 <_dtoa_r+0x632>
 800d9b8:	9b03      	ldr	r3, [sp, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f300 80e1 	bgt.w	800db82 <_dtoa_r+0x632>
 800d9c0:	d10c      	bne.n	800d9dc <_dtoa_r+0x48c>
 800d9c2:	4b48      	ldr	r3, [pc, #288]	@ (800dae4 <_dtoa_r+0x594>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	ec51 0b17 	vmov	r0, r1, d7
 800d9ca:	f7f2 fe15 	bl	80005f8 <__aeabi_dmul>
 800d9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9d2:	f7f3 f897 	bl	8000b04 <__aeabi_dcmpge>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	f000 8266 	beq.w	800dea8 <_dtoa_r+0x958>
 800d9dc:	2400      	movs	r4, #0
 800d9de:	4625      	mov	r5, r4
 800d9e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9e2:	4656      	mov	r6, sl
 800d9e4:	ea6f 0803 	mvn.w	r8, r3
 800d9e8:	2700      	movs	r7, #0
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fcbf 	bl	800e370 <_Bfree>
 800d9f2:	2d00      	cmp	r5, #0
 800d9f4:	f000 80bd 	beq.w	800db72 <_dtoa_r+0x622>
 800d9f8:	b12f      	cbz	r7, 800da06 <_dtoa_r+0x4b6>
 800d9fa:	42af      	cmp	r7, r5
 800d9fc:	d003      	beq.n	800da06 <_dtoa_r+0x4b6>
 800d9fe:	4639      	mov	r1, r7
 800da00:	4648      	mov	r0, r9
 800da02:	f000 fcb5 	bl	800e370 <_Bfree>
 800da06:	4629      	mov	r1, r5
 800da08:	4648      	mov	r0, r9
 800da0a:	f000 fcb1 	bl	800e370 <_Bfree>
 800da0e:	e0b0      	b.n	800db72 <_dtoa_r+0x622>
 800da10:	07e2      	lsls	r2, r4, #31
 800da12:	d505      	bpl.n	800da20 <_dtoa_r+0x4d0>
 800da14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da18:	f7f2 fdee 	bl	80005f8 <__aeabi_dmul>
 800da1c:	3601      	adds	r6, #1
 800da1e:	2301      	movs	r3, #1
 800da20:	1064      	asrs	r4, r4, #1
 800da22:	3508      	adds	r5, #8
 800da24:	e762      	b.n	800d8ec <_dtoa_r+0x39c>
 800da26:	2602      	movs	r6, #2
 800da28:	e765      	b.n	800d8f6 <_dtoa_r+0x3a6>
 800da2a:	9c03      	ldr	r4, [sp, #12]
 800da2c:	46b8      	mov	r8, r7
 800da2e:	e784      	b.n	800d93a <_dtoa_r+0x3ea>
 800da30:	4b27      	ldr	r3, [pc, #156]	@ (800dad0 <_dtoa_r+0x580>)
 800da32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800da3c:	4454      	add	r4, sl
 800da3e:	2900      	cmp	r1, #0
 800da40:	d054      	beq.n	800daec <_dtoa_r+0x59c>
 800da42:	4929      	ldr	r1, [pc, #164]	@ (800dae8 <_dtoa_r+0x598>)
 800da44:	2000      	movs	r0, #0
 800da46:	f7f2 ff01 	bl	800084c <__aeabi_ddiv>
 800da4a:	4633      	mov	r3, r6
 800da4c:	462a      	mov	r2, r5
 800da4e:	f7f2 fc1b 	bl	8000288 <__aeabi_dsub>
 800da52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da56:	4656      	mov	r6, sl
 800da58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da5c:	f7f3 f87c 	bl	8000b58 <__aeabi_d2iz>
 800da60:	4605      	mov	r5, r0
 800da62:	f7f2 fd5f 	bl	8000524 <__aeabi_i2d>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da6e:	f7f2 fc0b 	bl	8000288 <__aeabi_dsub>
 800da72:	3530      	adds	r5, #48	@ 0x30
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da7c:	f806 5b01 	strb.w	r5, [r6], #1
 800da80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da84:	f7f3 f82a 	bl	8000adc <__aeabi_dcmplt>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d172      	bne.n	800db72 <_dtoa_r+0x622>
 800da8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da90:	4911      	ldr	r1, [pc, #68]	@ (800dad8 <_dtoa_r+0x588>)
 800da92:	2000      	movs	r0, #0
 800da94:	f7f2 fbf8 	bl	8000288 <__aeabi_dsub>
 800da98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da9c:	f7f3 f81e 	bl	8000adc <__aeabi_dcmplt>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	f040 80b4 	bne.w	800dc0e <_dtoa_r+0x6be>
 800daa6:	42a6      	cmp	r6, r4
 800daa8:	f43f af70 	beq.w	800d98c <_dtoa_r+0x43c>
 800daac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dab0:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <_dtoa_r+0x58c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	4b08      	ldr	r3, [pc, #32]	@ (800dadc <_dtoa_r+0x58c>)
 800daba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dabe:	2200      	movs	r2, #0
 800dac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dac4:	f7f2 fd98 	bl	80005f8 <__aeabi_dmul>
 800dac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dacc:	e7c4      	b.n	800da58 <_dtoa_r+0x508>
 800dace:	bf00      	nop
 800dad0:	080126d0 	.word	0x080126d0
 800dad4:	080126a8 	.word	0x080126a8
 800dad8:	3ff00000 	.word	0x3ff00000
 800dadc:	40240000 	.word	0x40240000
 800dae0:	401c0000 	.word	0x401c0000
 800dae4:	40140000 	.word	0x40140000
 800dae8:	3fe00000 	.word	0x3fe00000
 800daec:	4631      	mov	r1, r6
 800daee:	4628      	mov	r0, r5
 800daf0:	f7f2 fd82 	bl	80005f8 <__aeabi_dmul>
 800daf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800daf8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dafa:	4656      	mov	r6, sl
 800dafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db00:	f7f3 f82a 	bl	8000b58 <__aeabi_d2iz>
 800db04:	4605      	mov	r5, r0
 800db06:	f7f2 fd0d 	bl	8000524 <__aeabi_i2d>
 800db0a:	4602      	mov	r2, r0
 800db0c:	460b      	mov	r3, r1
 800db0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db12:	f7f2 fbb9 	bl	8000288 <__aeabi_dsub>
 800db16:	3530      	adds	r5, #48	@ 0x30
 800db18:	f806 5b01 	strb.w	r5, [r6], #1
 800db1c:	4602      	mov	r2, r0
 800db1e:	460b      	mov	r3, r1
 800db20:	42a6      	cmp	r6, r4
 800db22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800db26:	f04f 0200 	mov.w	r2, #0
 800db2a:	d124      	bne.n	800db76 <_dtoa_r+0x626>
 800db2c:	4baf      	ldr	r3, [pc, #700]	@ (800ddec <_dtoa_r+0x89c>)
 800db2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800db32:	f7f2 fbab 	bl	800028c <__adddf3>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db3e:	f7f2 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 800db42:	2800      	cmp	r0, #0
 800db44:	d163      	bne.n	800dc0e <_dtoa_r+0x6be>
 800db46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800db4a:	49a8      	ldr	r1, [pc, #672]	@ (800ddec <_dtoa_r+0x89c>)
 800db4c:	2000      	movs	r0, #0
 800db4e:	f7f2 fb9b 	bl	8000288 <__aeabi_dsub>
 800db52:	4602      	mov	r2, r0
 800db54:	460b      	mov	r3, r1
 800db56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db5a:	f7f2 ffbf 	bl	8000adc <__aeabi_dcmplt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	f43f af14 	beq.w	800d98c <_dtoa_r+0x43c>
 800db64:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db66:	1e73      	subs	r3, r6, #1
 800db68:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db6a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db6e:	2b30      	cmp	r3, #48	@ 0x30
 800db70:	d0f8      	beq.n	800db64 <_dtoa_r+0x614>
 800db72:	4647      	mov	r7, r8
 800db74:	e03b      	b.n	800dbee <_dtoa_r+0x69e>
 800db76:	4b9e      	ldr	r3, [pc, #632]	@ (800ddf0 <_dtoa_r+0x8a0>)
 800db78:	f7f2 fd3e 	bl	80005f8 <__aeabi_dmul>
 800db7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db80:	e7bc      	b.n	800dafc <_dtoa_r+0x5ac>
 800db82:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db86:	4656      	mov	r6, sl
 800db88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db8c:	4620      	mov	r0, r4
 800db8e:	4629      	mov	r1, r5
 800db90:	f7f2 fe5c 	bl	800084c <__aeabi_ddiv>
 800db94:	f7f2 ffe0 	bl	8000b58 <__aeabi_d2iz>
 800db98:	4680      	mov	r8, r0
 800db9a:	f7f2 fcc3 	bl	8000524 <__aeabi_i2d>
 800db9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba2:	f7f2 fd29 	bl	80005f8 <__aeabi_dmul>
 800dba6:	4602      	mov	r2, r0
 800dba8:	460b      	mov	r3, r1
 800dbaa:	4620      	mov	r0, r4
 800dbac:	4629      	mov	r1, r5
 800dbae:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800dbb2:	f7f2 fb69 	bl	8000288 <__aeabi_dsub>
 800dbb6:	f806 4b01 	strb.w	r4, [r6], #1
 800dbba:	9d03      	ldr	r5, [sp, #12]
 800dbbc:	eba6 040a 	sub.w	r4, r6, sl
 800dbc0:	42a5      	cmp	r5, r4
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	d133      	bne.n	800dc30 <_dtoa_r+0x6e0>
 800dbc8:	f7f2 fb60 	bl	800028c <__adddf3>
 800dbcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	f7f2 ffa0 	bl	8000b18 <__aeabi_dcmpgt>
 800dbd8:	b9c0      	cbnz	r0, 800dc0c <_dtoa_r+0x6bc>
 800dbda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbde:	4620      	mov	r0, r4
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	f7f2 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbe6:	b110      	cbz	r0, 800dbee <_dtoa_r+0x69e>
 800dbe8:	f018 0f01 	tst.w	r8, #1
 800dbec:	d10e      	bne.n	800dc0c <_dtoa_r+0x6bc>
 800dbee:	9902      	ldr	r1, [sp, #8]
 800dbf0:	4648      	mov	r0, r9
 800dbf2:	f000 fbbd 	bl	800e370 <_Bfree>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	7033      	strb	r3, [r6, #0]
 800dbfa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbfc:	3701      	adds	r7, #1
 800dbfe:	601f      	str	r7, [r3, #0]
 800dc00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f000 824b 	beq.w	800e09e <_dtoa_r+0xb4e>
 800dc08:	601e      	str	r6, [r3, #0]
 800dc0a:	e248      	b.n	800e09e <_dtoa_r+0xb4e>
 800dc0c:	46b8      	mov	r8, r7
 800dc0e:	4633      	mov	r3, r6
 800dc10:	461e      	mov	r6, r3
 800dc12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc16:	2a39      	cmp	r2, #57	@ 0x39
 800dc18:	d106      	bne.n	800dc28 <_dtoa_r+0x6d8>
 800dc1a:	459a      	cmp	sl, r3
 800dc1c:	d1f8      	bne.n	800dc10 <_dtoa_r+0x6c0>
 800dc1e:	2230      	movs	r2, #48	@ 0x30
 800dc20:	f108 0801 	add.w	r8, r8, #1
 800dc24:	f88a 2000 	strb.w	r2, [sl]
 800dc28:	781a      	ldrb	r2, [r3, #0]
 800dc2a:	3201      	adds	r2, #1
 800dc2c:	701a      	strb	r2, [r3, #0]
 800dc2e:	e7a0      	b.n	800db72 <_dtoa_r+0x622>
 800dc30:	4b6f      	ldr	r3, [pc, #444]	@ (800ddf0 <_dtoa_r+0x8a0>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	f7f2 fce0 	bl	80005f8 <__aeabi_dmul>
 800dc38:	2200      	movs	r2, #0
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	460d      	mov	r5, r1
 800dc40:	f7f2 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d09f      	beq.n	800db88 <_dtoa_r+0x638>
 800dc48:	e7d1      	b.n	800dbee <_dtoa_r+0x69e>
 800dc4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dc4c:	2a00      	cmp	r2, #0
 800dc4e:	f000 80ea 	beq.w	800de26 <_dtoa_r+0x8d6>
 800dc52:	9a07      	ldr	r2, [sp, #28]
 800dc54:	2a01      	cmp	r2, #1
 800dc56:	f300 80cd 	bgt.w	800ddf4 <_dtoa_r+0x8a4>
 800dc5a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dc5c:	2a00      	cmp	r2, #0
 800dc5e:	f000 80c1 	beq.w	800dde4 <_dtoa_r+0x894>
 800dc62:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc66:	9c08      	ldr	r4, [sp, #32]
 800dc68:	9e00      	ldr	r6, [sp, #0]
 800dc6a:	9a00      	ldr	r2, [sp, #0]
 800dc6c:	441a      	add	r2, r3
 800dc6e:	9200      	str	r2, [sp, #0]
 800dc70:	9a06      	ldr	r2, [sp, #24]
 800dc72:	2101      	movs	r1, #1
 800dc74:	441a      	add	r2, r3
 800dc76:	4648      	mov	r0, r9
 800dc78:	9206      	str	r2, [sp, #24]
 800dc7a:	f000 fc77 	bl	800e56c <__i2b>
 800dc7e:	4605      	mov	r5, r0
 800dc80:	b166      	cbz	r6, 800dc9c <_dtoa_r+0x74c>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	dd09      	ble.n	800dc9c <_dtoa_r+0x74c>
 800dc88:	42b3      	cmp	r3, r6
 800dc8a:	9a00      	ldr	r2, [sp, #0]
 800dc8c:	bfa8      	it	ge
 800dc8e:	4633      	movge	r3, r6
 800dc90:	1ad2      	subs	r2, r2, r3
 800dc92:	9200      	str	r2, [sp, #0]
 800dc94:	9a06      	ldr	r2, [sp, #24]
 800dc96:	1af6      	subs	r6, r6, r3
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	9306      	str	r3, [sp, #24]
 800dc9c:	9b08      	ldr	r3, [sp, #32]
 800dc9e:	b30b      	cbz	r3, 800dce4 <_dtoa_r+0x794>
 800dca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80c6 	beq.w	800de34 <_dtoa_r+0x8e4>
 800dca8:	2c00      	cmp	r4, #0
 800dcaa:	f000 80c0 	beq.w	800de2e <_dtoa_r+0x8de>
 800dcae:	4629      	mov	r1, r5
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	4648      	mov	r0, r9
 800dcb4:	f000 fd12 	bl	800e6dc <__pow5mult>
 800dcb8:	9a02      	ldr	r2, [sp, #8]
 800dcba:	4601      	mov	r1, r0
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f000 fc6a 	bl	800e598 <__multiply>
 800dcc4:	9902      	ldr	r1, [sp, #8]
 800dcc6:	4680      	mov	r8, r0
 800dcc8:	4648      	mov	r0, r9
 800dcca:	f000 fb51 	bl	800e370 <_Bfree>
 800dcce:	9b08      	ldr	r3, [sp, #32]
 800dcd0:	1b1b      	subs	r3, r3, r4
 800dcd2:	9308      	str	r3, [sp, #32]
 800dcd4:	f000 80b1 	beq.w	800de3a <_dtoa_r+0x8ea>
 800dcd8:	9a08      	ldr	r2, [sp, #32]
 800dcda:	4641      	mov	r1, r8
 800dcdc:	4648      	mov	r0, r9
 800dcde:	f000 fcfd 	bl	800e6dc <__pow5mult>
 800dce2:	9002      	str	r0, [sp, #8]
 800dce4:	2101      	movs	r1, #1
 800dce6:	4648      	mov	r0, r9
 800dce8:	f000 fc40 	bl	800e56c <__i2b>
 800dcec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcee:	4604      	mov	r4, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f000 81d8 	beq.w	800e0a6 <_dtoa_r+0xb56>
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	4601      	mov	r1, r0
 800dcfa:	4648      	mov	r0, r9
 800dcfc:	f000 fcee 	bl	800e6dc <__pow5mult>
 800dd00:	9b07      	ldr	r3, [sp, #28]
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	4604      	mov	r4, r0
 800dd06:	f300 809f 	bgt.w	800de48 <_dtoa_r+0x8f8>
 800dd0a:	9b04      	ldr	r3, [sp, #16]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 8097 	bne.w	800de40 <_dtoa_r+0x8f0>
 800dd12:	9b05      	ldr	r3, [sp, #20]
 800dd14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f040 8093 	bne.w	800de44 <_dtoa_r+0x8f4>
 800dd1e:	9b05      	ldr	r3, [sp, #20]
 800dd20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dd24:	0d1b      	lsrs	r3, r3, #20
 800dd26:	051b      	lsls	r3, r3, #20
 800dd28:	b133      	cbz	r3, 800dd38 <_dtoa_r+0x7e8>
 800dd2a:	9b00      	ldr	r3, [sp, #0]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	9300      	str	r3, [sp, #0]
 800dd30:	9b06      	ldr	r3, [sp, #24]
 800dd32:	3301      	adds	r3, #1
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	2301      	movs	r3, #1
 800dd38:	9308      	str	r3, [sp, #32]
 800dd3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f000 81b8 	beq.w	800e0b2 <_dtoa_r+0xb62>
 800dd42:	6923      	ldr	r3, [r4, #16]
 800dd44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dd48:	6918      	ldr	r0, [r3, #16]
 800dd4a:	f000 fbc3 	bl	800e4d4 <__hi0bits>
 800dd4e:	f1c0 0020 	rsb	r0, r0, #32
 800dd52:	9b06      	ldr	r3, [sp, #24]
 800dd54:	4418      	add	r0, r3
 800dd56:	f010 001f 	ands.w	r0, r0, #31
 800dd5a:	f000 8082 	beq.w	800de62 <_dtoa_r+0x912>
 800dd5e:	f1c0 0320 	rsb	r3, r0, #32
 800dd62:	2b04      	cmp	r3, #4
 800dd64:	dd73      	ble.n	800de4e <_dtoa_r+0x8fe>
 800dd66:	9b00      	ldr	r3, [sp, #0]
 800dd68:	f1c0 001c 	rsb	r0, r0, #28
 800dd6c:	4403      	add	r3, r0
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	9b06      	ldr	r3, [sp, #24]
 800dd72:	4403      	add	r3, r0
 800dd74:	4406      	add	r6, r0
 800dd76:	9306      	str	r3, [sp, #24]
 800dd78:	9b00      	ldr	r3, [sp, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	dd05      	ble.n	800dd8a <_dtoa_r+0x83a>
 800dd7e:	9902      	ldr	r1, [sp, #8]
 800dd80:	461a      	mov	r2, r3
 800dd82:	4648      	mov	r0, r9
 800dd84:	f000 fd04 	bl	800e790 <__lshift>
 800dd88:	9002      	str	r0, [sp, #8]
 800dd8a:	9b06      	ldr	r3, [sp, #24]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	dd05      	ble.n	800dd9c <_dtoa_r+0x84c>
 800dd90:	4621      	mov	r1, r4
 800dd92:	461a      	mov	r2, r3
 800dd94:	4648      	mov	r0, r9
 800dd96:	f000 fcfb 	bl	800e790 <__lshift>
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d061      	beq.n	800de66 <_dtoa_r+0x916>
 800dda2:	9802      	ldr	r0, [sp, #8]
 800dda4:	4621      	mov	r1, r4
 800dda6:	f000 fd5f 	bl	800e868 <__mcmp>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	da5b      	bge.n	800de66 <_dtoa_r+0x916>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9902      	ldr	r1, [sp, #8]
 800ddb2:	220a      	movs	r2, #10
 800ddb4:	4648      	mov	r0, r9
 800ddb6:	f000 fafd 	bl	800e3b4 <__multadd>
 800ddba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddbc:	9002      	str	r0, [sp, #8]
 800ddbe:	f107 38ff 	add.w	r8, r7, #4294967295
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f000 8177 	beq.w	800e0b6 <_dtoa_r+0xb66>
 800ddc8:	4629      	mov	r1, r5
 800ddca:	2300      	movs	r3, #0
 800ddcc:	220a      	movs	r2, #10
 800ddce:	4648      	mov	r0, r9
 800ddd0:	f000 faf0 	bl	800e3b4 <__multadd>
 800ddd4:	f1bb 0f00 	cmp.w	fp, #0
 800ddd8:	4605      	mov	r5, r0
 800ddda:	dc6f      	bgt.n	800debc <_dtoa_r+0x96c>
 800dddc:	9b07      	ldr	r3, [sp, #28]
 800ddde:	2b02      	cmp	r3, #2
 800dde0:	dc49      	bgt.n	800de76 <_dtoa_r+0x926>
 800dde2:	e06b      	b.n	800debc <_dtoa_r+0x96c>
 800dde4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dde6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ddea:	e73c      	b.n	800dc66 <_dtoa_r+0x716>
 800ddec:	3fe00000 	.word	0x3fe00000
 800ddf0:	40240000 	.word	0x40240000
 800ddf4:	9b03      	ldr	r3, [sp, #12]
 800ddf6:	1e5c      	subs	r4, r3, #1
 800ddf8:	9b08      	ldr	r3, [sp, #32]
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	db09      	blt.n	800de12 <_dtoa_r+0x8c2>
 800ddfe:	1b1c      	subs	r4, r3, r4
 800de00:	9b03      	ldr	r3, [sp, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	f6bf af30 	bge.w	800dc68 <_dtoa_r+0x718>
 800de08:	9b00      	ldr	r3, [sp, #0]
 800de0a:	9a03      	ldr	r2, [sp, #12]
 800de0c:	1a9e      	subs	r6, r3, r2
 800de0e:	2300      	movs	r3, #0
 800de10:	e72b      	b.n	800dc6a <_dtoa_r+0x71a>
 800de12:	9b08      	ldr	r3, [sp, #32]
 800de14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800de16:	9408      	str	r4, [sp, #32]
 800de18:	1ae3      	subs	r3, r4, r3
 800de1a:	441a      	add	r2, r3
 800de1c:	9e00      	ldr	r6, [sp, #0]
 800de1e:	9b03      	ldr	r3, [sp, #12]
 800de20:	920d      	str	r2, [sp, #52]	@ 0x34
 800de22:	2400      	movs	r4, #0
 800de24:	e721      	b.n	800dc6a <_dtoa_r+0x71a>
 800de26:	9c08      	ldr	r4, [sp, #32]
 800de28:	9e00      	ldr	r6, [sp, #0]
 800de2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800de2c:	e728      	b.n	800dc80 <_dtoa_r+0x730>
 800de2e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800de32:	e751      	b.n	800dcd8 <_dtoa_r+0x788>
 800de34:	9a08      	ldr	r2, [sp, #32]
 800de36:	9902      	ldr	r1, [sp, #8]
 800de38:	e750      	b.n	800dcdc <_dtoa_r+0x78c>
 800de3a:	f8cd 8008 	str.w	r8, [sp, #8]
 800de3e:	e751      	b.n	800dce4 <_dtoa_r+0x794>
 800de40:	2300      	movs	r3, #0
 800de42:	e779      	b.n	800dd38 <_dtoa_r+0x7e8>
 800de44:	9b04      	ldr	r3, [sp, #16]
 800de46:	e777      	b.n	800dd38 <_dtoa_r+0x7e8>
 800de48:	2300      	movs	r3, #0
 800de4a:	9308      	str	r3, [sp, #32]
 800de4c:	e779      	b.n	800dd42 <_dtoa_r+0x7f2>
 800de4e:	d093      	beq.n	800dd78 <_dtoa_r+0x828>
 800de50:	9a00      	ldr	r2, [sp, #0]
 800de52:	331c      	adds	r3, #28
 800de54:	441a      	add	r2, r3
 800de56:	9200      	str	r2, [sp, #0]
 800de58:	9a06      	ldr	r2, [sp, #24]
 800de5a:	441a      	add	r2, r3
 800de5c:	441e      	add	r6, r3
 800de5e:	9206      	str	r2, [sp, #24]
 800de60:	e78a      	b.n	800dd78 <_dtoa_r+0x828>
 800de62:	4603      	mov	r3, r0
 800de64:	e7f4      	b.n	800de50 <_dtoa_r+0x900>
 800de66:	9b03      	ldr	r3, [sp, #12]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	46b8      	mov	r8, r7
 800de6c:	dc20      	bgt.n	800deb0 <_dtoa_r+0x960>
 800de6e:	469b      	mov	fp, r3
 800de70:	9b07      	ldr	r3, [sp, #28]
 800de72:	2b02      	cmp	r3, #2
 800de74:	dd1e      	ble.n	800deb4 <_dtoa_r+0x964>
 800de76:	f1bb 0f00 	cmp.w	fp, #0
 800de7a:	f47f adb1 	bne.w	800d9e0 <_dtoa_r+0x490>
 800de7e:	4621      	mov	r1, r4
 800de80:	465b      	mov	r3, fp
 800de82:	2205      	movs	r2, #5
 800de84:	4648      	mov	r0, r9
 800de86:	f000 fa95 	bl	800e3b4 <__multadd>
 800de8a:	4601      	mov	r1, r0
 800de8c:	4604      	mov	r4, r0
 800de8e:	9802      	ldr	r0, [sp, #8]
 800de90:	f000 fcea 	bl	800e868 <__mcmp>
 800de94:	2800      	cmp	r0, #0
 800de96:	f77f ada3 	ble.w	800d9e0 <_dtoa_r+0x490>
 800de9a:	4656      	mov	r6, sl
 800de9c:	2331      	movs	r3, #49	@ 0x31
 800de9e:	f806 3b01 	strb.w	r3, [r6], #1
 800dea2:	f108 0801 	add.w	r8, r8, #1
 800dea6:	e59f      	b.n	800d9e8 <_dtoa_r+0x498>
 800dea8:	9c03      	ldr	r4, [sp, #12]
 800deaa:	46b8      	mov	r8, r7
 800deac:	4625      	mov	r5, r4
 800deae:	e7f4      	b.n	800de9a <_dtoa_r+0x94a>
 800deb0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800deb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f000 8101 	beq.w	800e0be <_dtoa_r+0xb6e>
 800debc:	2e00      	cmp	r6, #0
 800debe:	dd05      	ble.n	800decc <_dtoa_r+0x97c>
 800dec0:	4629      	mov	r1, r5
 800dec2:	4632      	mov	r2, r6
 800dec4:	4648      	mov	r0, r9
 800dec6:	f000 fc63 	bl	800e790 <__lshift>
 800deca:	4605      	mov	r5, r0
 800decc:	9b08      	ldr	r3, [sp, #32]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d05c      	beq.n	800df8c <_dtoa_r+0xa3c>
 800ded2:	6869      	ldr	r1, [r5, #4]
 800ded4:	4648      	mov	r0, r9
 800ded6:	f000 fa0b 	bl	800e2f0 <_Balloc>
 800deda:	4606      	mov	r6, r0
 800dedc:	b928      	cbnz	r0, 800deea <_dtoa_r+0x99a>
 800dede:	4b82      	ldr	r3, [pc, #520]	@ (800e0e8 <_dtoa_r+0xb98>)
 800dee0:	4602      	mov	r2, r0
 800dee2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dee6:	f7ff bb4a 	b.w	800d57e <_dtoa_r+0x2e>
 800deea:	692a      	ldr	r2, [r5, #16]
 800deec:	3202      	adds	r2, #2
 800deee:	0092      	lsls	r2, r2, #2
 800def0:	f105 010c 	add.w	r1, r5, #12
 800def4:	300c      	adds	r0, #12
 800def6:	f7ff fa8c 	bl	800d412 <memcpy>
 800defa:	2201      	movs	r2, #1
 800defc:	4631      	mov	r1, r6
 800defe:	4648      	mov	r0, r9
 800df00:	f000 fc46 	bl	800e790 <__lshift>
 800df04:	f10a 0301 	add.w	r3, sl, #1
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	eb0a 030b 	add.w	r3, sl, fp
 800df0e:	9308      	str	r3, [sp, #32]
 800df10:	9b04      	ldr	r3, [sp, #16]
 800df12:	f003 0301 	and.w	r3, r3, #1
 800df16:	462f      	mov	r7, r5
 800df18:	9306      	str	r3, [sp, #24]
 800df1a:	4605      	mov	r5, r0
 800df1c:	9b00      	ldr	r3, [sp, #0]
 800df1e:	9802      	ldr	r0, [sp, #8]
 800df20:	4621      	mov	r1, r4
 800df22:	f103 3bff 	add.w	fp, r3, #4294967295
 800df26:	f7ff fa89 	bl	800d43c <quorem>
 800df2a:	4603      	mov	r3, r0
 800df2c:	3330      	adds	r3, #48	@ 0x30
 800df2e:	9003      	str	r0, [sp, #12]
 800df30:	4639      	mov	r1, r7
 800df32:	9802      	ldr	r0, [sp, #8]
 800df34:	9309      	str	r3, [sp, #36]	@ 0x24
 800df36:	f000 fc97 	bl	800e868 <__mcmp>
 800df3a:	462a      	mov	r2, r5
 800df3c:	9004      	str	r0, [sp, #16]
 800df3e:	4621      	mov	r1, r4
 800df40:	4648      	mov	r0, r9
 800df42:	f000 fcad 	bl	800e8a0 <__mdiff>
 800df46:	68c2      	ldr	r2, [r0, #12]
 800df48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df4a:	4606      	mov	r6, r0
 800df4c:	bb02      	cbnz	r2, 800df90 <_dtoa_r+0xa40>
 800df4e:	4601      	mov	r1, r0
 800df50:	9802      	ldr	r0, [sp, #8]
 800df52:	f000 fc89 	bl	800e868 <__mcmp>
 800df56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df58:	4602      	mov	r2, r0
 800df5a:	4631      	mov	r1, r6
 800df5c:	4648      	mov	r0, r9
 800df5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800df60:	9309      	str	r3, [sp, #36]	@ 0x24
 800df62:	f000 fa05 	bl	800e370 <_Bfree>
 800df66:	9b07      	ldr	r3, [sp, #28]
 800df68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df6a:	9e00      	ldr	r6, [sp, #0]
 800df6c:	ea42 0103 	orr.w	r1, r2, r3
 800df70:	9b06      	ldr	r3, [sp, #24]
 800df72:	4319      	orrs	r1, r3
 800df74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df76:	d10d      	bne.n	800df94 <_dtoa_r+0xa44>
 800df78:	2b39      	cmp	r3, #57	@ 0x39
 800df7a:	d027      	beq.n	800dfcc <_dtoa_r+0xa7c>
 800df7c:	9a04      	ldr	r2, [sp, #16]
 800df7e:	2a00      	cmp	r2, #0
 800df80:	dd01      	ble.n	800df86 <_dtoa_r+0xa36>
 800df82:	9b03      	ldr	r3, [sp, #12]
 800df84:	3331      	adds	r3, #49	@ 0x31
 800df86:	f88b 3000 	strb.w	r3, [fp]
 800df8a:	e52e      	b.n	800d9ea <_dtoa_r+0x49a>
 800df8c:	4628      	mov	r0, r5
 800df8e:	e7b9      	b.n	800df04 <_dtoa_r+0x9b4>
 800df90:	2201      	movs	r2, #1
 800df92:	e7e2      	b.n	800df5a <_dtoa_r+0xa0a>
 800df94:	9904      	ldr	r1, [sp, #16]
 800df96:	2900      	cmp	r1, #0
 800df98:	db04      	blt.n	800dfa4 <_dtoa_r+0xa54>
 800df9a:	9807      	ldr	r0, [sp, #28]
 800df9c:	4301      	orrs	r1, r0
 800df9e:	9806      	ldr	r0, [sp, #24]
 800dfa0:	4301      	orrs	r1, r0
 800dfa2:	d120      	bne.n	800dfe6 <_dtoa_r+0xa96>
 800dfa4:	2a00      	cmp	r2, #0
 800dfa6:	ddee      	ble.n	800df86 <_dtoa_r+0xa36>
 800dfa8:	9902      	ldr	r1, [sp, #8]
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	2201      	movs	r2, #1
 800dfae:	4648      	mov	r0, r9
 800dfb0:	f000 fbee 	bl	800e790 <__lshift>
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	9002      	str	r0, [sp, #8]
 800dfb8:	f000 fc56 	bl	800e868 <__mcmp>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	9b00      	ldr	r3, [sp, #0]
 800dfc0:	dc02      	bgt.n	800dfc8 <_dtoa_r+0xa78>
 800dfc2:	d1e0      	bne.n	800df86 <_dtoa_r+0xa36>
 800dfc4:	07da      	lsls	r2, r3, #31
 800dfc6:	d5de      	bpl.n	800df86 <_dtoa_r+0xa36>
 800dfc8:	2b39      	cmp	r3, #57	@ 0x39
 800dfca:	d1da      	bne.n	800df82 <_dtoa_r+0xa32>
 800dfcc:	2339      	movs	r3, #57	@ 0x39
 800dfce:	f88b 3000 	strb.w	r3, [fp]
 800dfd2:	4633      	mov	r3, r6
 800dfd4:	461e      	mov	r6, r3
 800dfd6:	3b01      	subs	r3, #1
 800dfd8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dfdc:	2a39      	cmp	r2, #57	@ 0x39
 800dfde:	d04e      	beq.n	800e07e <_dtoa_r+0xb2e>
 800dfe0:	3201      	adds	r2, #1
 800dfe2:	701a      	strb	r2, [r3, #0]
 800dfe4:	e501      	b.n	800d9ea <_dtoa_r+0x49a>
 800dfe6:	2a00      	cmp	r2, #0
 800dfe8:	dd03      	ble.n	800dff2 <_dtoa_r+0xaa2>
 800dfea:	2b39      	cmp	r3, #57	@ 0x39
 800dfec:	d0ee      	beq.n	800dfcc <_dtoa_r+0xa7c>
 800dfee:	3301      	adds	r3, #1
 800dff0:	e7c9      	b.n	800df86 <_dtoa_r+0xa36>
 800dff2:	9a00      	ldr	r2, [sp, #0]
 800dff4:	9908      	ldr	r1, [sp, #32]
 800dff6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dffa:	428a      	cmp	r2, r1
 800dffc:	d028      	beq.n	800e050 <_dtoa_r+0xb00>
 800dffe:	9902      	ldr	r1, [sp, #8]
 800e000:	2300      	movs	r3, #0
 800e002:	220a      	movs	r2, #10
 800e004:	4648      	mov	r0, r9
 800e006:	f000 f9d5 	bl	800e3b4 <__multadd>
 800e00a:	42af      	cmp	r7, r5
 800e00c:	9002      	str	r0, [sp, #8]
 800e00e:	f04f 0300 	mov.w	r3, #0
 800e012:	f04f 020a 	mov.w	r2, #10
 800e016:	4639      	mov	r1, r7
 800e018:	4648      	mov	r0, r9
 800e01a:	d107      	bne.n	800e02c <_dtoa_r+0xadc>
 800e01c:	f000 f9ca 	bl	800e3b4 <__multadd>
 800e020:	4607      	mov	r7, r0
 800e022:	4605      	mov	r5, r0
 800e024:	9b00      	ldr	r3, [sp, #0]
 800e026:	3301      	adds	r3, #1
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	e777      	b.n	800df1c <_dtoa_r+0x9cc>
 800e02c:	f000 f9c2 	bl	800e3b4 <__multadd>
 800e030:	4629      	mov	r1, r5
 800e032:	4607      	mov	r7, r0
 800e034:	2300      	movs	r3, #0
 800e036:	220a      	movs	r2, #10
 800e038:	4648      	mov	r0, r9
 800e03a:	f000 f9bb 	bl	800e3b4 <__multadd>
 800e03e:	4605      	mov	r5, r0
 800e040:	e7f0      	b.n	800e024 <_dtoa_r+0xad4>
 800e042:	f1bb 0f00 	cmp.w	fp, #0
 800e046:	bfcc      	ite	gt
 800e048:	465e      	movgt	r6, fp
 800e04a:	2601      	movle	r6, #1
 800e04c:	4456      	add	r6, sl
 800e04e:	2700      	movs	r7, #0
 800e050:	9902      	ldr	r1, [sp, #8]
 800e052:	9300      	str	r3, [sp, #0]
 800e054:	2201      	movs	r2, #1
 800e056:	4648      	mov	r0, r9
 800e058:	f000 fb9a 	bl	800e790 <__lshift>
 800e05c:	4621      	mov	r1, r4
 800e05e:	9002      	str	r0, [sp, #8]
 800e060:	f000 fc02 	bl	800e868 <__mcmp>
 800e064:	2800      	cmp	r0, #0
 800e066:	dcb4      	bgt.n	800dfd2 <_dtoa_r+0xa82>
 800e068:	d102      	bne.n	800e070 <_dtoa_r+0xb20>
 800e06a:	9b00      	ldr	r3, [sp, #0]
 800e06c:	07db      	lsls	r3, r3, #31
 800e06e:	d4b0      	bmi.n	800dfd2 <_dtoa_r+0xa82>
 800e070:	4633      	mov	r3, r6
 800e072:	461e      	mov	r6, r3
 800e074:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e078:	2a30      	cmp	r2, #48	@ 0x30
 800e07a:	d0fa      	beq.n	800e072 <_dtoa_r+0xb22>
 800e07c:	e4b5      	b.n	800d9ea <_dtoa_r+0x49a>
 800e07e:	459a      	cmp	sl, r3
 800e080:	d1a8      	bne.n	800dfd4 <_dtoa_r+0xa84>
 800e082:	2331      	movs	r3, #49	@ 0x31
 800e084:	f108 0801 	add.w	r8, r8, #1
 800e088:	f88a 3000 	strb.w	r3, [sl]
 800e08c:	e4ad      	b.n	800d9ea <_dtoa_r+0x49a>
 800e08e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e090:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e0ec <_dtoa_r+0xb9c>
 800e094:	b11b      	cbz	r3, 800e09e <_dtoa_r+0xb4e>
 800e096:	f10a 0308 	add.w	r3, sl, #8
 800e09a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e09c:	6013      	str	r3, [r2, #0]
 800e09e:	4650      	mov	r0, sl
 800e0a0:	b017      	add	sp, #92	@ 0x5c
 800e0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a6:	9b07      	ldr	r3, [sp, #28]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	f77f ae2e 	ble.w	800dd0a <_dtoa_r+0x7ba>
 800e0ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0b0:	9308      	str	r3, [sp, #32]
 800e0b2:	2001      	movs	r0, #1
 800e0b4:	e64d      	b.n	800dd52 <_dtoa_r+0x802>
 800e0b6:	f1bb 0f00 	cmp.w	fp, #0
 800e0ba:	f77f aed9 	ble.w	800de70 <_dtoa_r+0x920>
 800e0be:	4656      	mov	r6, sl
 800e0c0:	9802      	ldr	r0, [sp, #8]
 800e0c2:	4621      	mov	r1, r4
 800e0c4:	f7ff f9ba 	bl	800d43c <quorem>
 800e0c8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e0cc:	f806 3b01 	strb.w	r3, [r6], #1
 800e0d0:	eba6 020a 	sub.w	r2, r6, sl
 800e0d4:	4593      	cmp	fp, r2
 800e0d6:	ddb4      	ble.n	800e042 <_dtoa_r+0xaf2>
 800e0d8:	9902      	ldr	r1, [sp, #8]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	220a      	movs	r2, #10
 800e0de:	4648      	mov	r0, r9
 800e0e0:	f000 f968 	bl	800e3b4 <__multadd>
 800e0e4:	9002      	str	r0, [sp, #8]
 800e0e6:	e7eb      	b.n	800e0c0 <_dtoa_r+0xb70>
 800e0e8:	08012579 	.word	0x08012579
 800e0ec:	080124fd 	.word	0x080124fd

0800e0f0 <_free_r>:
 800e0f0:	b538      	push	{r3, r4, r5, lr}
 800e0f2:	4605      	mov	r5, r0
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	d041      	beq.n	800e17c <_free_r+0x8c>
 800e0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0fc:	1f0c      	subs	r4, r1, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	bfb8      	it	lt
 800e102:	18e4      	addlt	r4, r4, r3
 800e104:	f000 f8e8 	bl	800e2d8 <__malloc_lock>
 800e108:	4a1d      	ldr	r2, [pc, #116]	@ (800e180 <_free_r+0x90>)
 800e10a:	6813      	ldr	r3, [r2, #0]
 800e10c:	b933      	cbnz	r3, 800e11c <_free_r+0x2c>
 800e10e:	6063      	str	r3, [r4, #4]
 800e110:	6014      	str	r4, [r2, #0]
 800e112:	4628      	mov	r0, r5
 800e114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e118:	f000 b8e4 	b.w	800e2e4 <__malloc_unlock>
 800e11c:	42a3      	cmp	r3, r4
 800e11e:	d908      	bls.n	800e132 <_free_r+0x42>
 800e120:	6820      	ldr	r0, [r4, #0]
 800e122:	1821      	adds	r1, r4, r0
 800e124:	428b      	cmp	r3, r1
 800e126:	bf01      	itttt	eq
 800e128:	6819      	ldreq	r1, [r3, #0]
 800e12a:	685b      	ldreq	r3, [r3, #4]
 800e12c:	1809      	addeq	r1, r1, r0
 800e12e:	6021      	streq	r1, [r4, #0]
 800e130:	e7ed      	b.n	800e10e <_free_r+0x1e>
 800e132:	461a      	mov	r2, r3
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	b10b      	cbz	r3, 800e13c <_free_r+0x4c>
 800e138:	42a3      	cmp	r3, r4
 800e13a:	d9fa      	bls.n	800e132 <_free_r+0x42>
 800e13c:	6811      	ldr	r1, [r2, #0]
 800e13e:	1850      	adds	r0, r2, r1
 800e140:	42a0      	cmp	r0, r4
 800e142:	d10b      	bne.n	800e15c <_free_r+0x6c>
 800e144:	6820      	ldr	r0, [r4, #0]
 800e146:	4401      	add	r1, r0
 800e148:	1850      	adds	r0, r2, r1
 800e14a:	4283      	cmp	r3, r0
 800e14c:	6011      	str	r1, [r2, #0]
 800e14e:	d1e0      	bne.n	800e112 <_free_r+0x22>
 800e150:	6818      	ldr	r0, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	6053      	str	r3, [r2, #4]
 800e156:	4408      	add	r0, r1
 800e158:	6010      	str	r0, [r2, #0]
 800e15a:	e7da      	b.n	800e112 <_free_r+0x22>
 800e15c:	d902      	bls.n	800e164 <_free_r+0x74>
 800e15e:	230c      	movs	r3, #12
 800e160:	602b      	str	r3, [r5, #0]
 800e162:	e7d6      	b.n	800e112 <_free_r+0x22>
 800e164:	6820      	ldr	r0, [r4, #0]
 800e166:	1821      	adds	r1, r4, r0
 800e168:	428b      	cmp	r3, r1
 800e16a:	bf04      	itt	eq
 800e16c:	6819      	ldreq	r1, [r3, #0]
 800e16e:	685b      	ldreq	r3, [r3, #4]
 800e170:	6063      	str	r3, [r4, #4]
 800e172:	bf04      	itt	eq
 800e174:	1809      	addeq	r1, r1, r0
 800e176:	6021      	streq	r1, [r4, #0]
 800e178:	6054      	str	r4, [r2, #4]
 800e17a:	e7ca      	b.n	800e112 <_free_r+0x22>
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	2000223c 	.word	0x2000223c

0800e184 <malloc>:
 800e184:	4b02      	ldr	r3, [pc, #8]	@ (800e190 <malloc+0xc>)
 800e186:	4601      	mov	r1, r0
 800e188:	6818      	ldr	r0, [r3, #0]
 800e18a:	f000 b825 	b.w	800e1d8 <_malloc_r>
 800e18e:	bf00      	nop
 800e190:	20000118 	.word	0x20000118

0800e194 <sbrk_aligned>:
 800e194:	b570      	push	{r4, r5, r6, lr}
 800e196:	4e0f      	ldr	r6, [pc, #60]	@ (800e1d4 <sbrk_aligned+0x40>)
 800e198:	460c      	mov	r4, r1
 800e19a:	6831      	ldr	r1, [r6, #0]
 800e19c:	4605      	mov	r5, r0
 800e19e:	b911      	cbnz	r1, 800e1a6 <sbrk_aligned+0x12>
 800e1a0:	f001 ffca 	bl	8010138 <_sbrk_r>
 800e1a4:	6030      	str	r0, [r6, #0]
 800e1a6:	4621      	mov	r1, r4
 800e1a8:	4628      	mov	r0, r5
 800e1aa:	f001 ffc5 	bl	8010138 <_sbrk_r>
 800e1ae:	1c43      	adds	r3, r0, #1
 800e1b0:	d103      	bne.n	800e1ba <sbrk_aligned+0x26>
 800e1b2:	f04f 34ff 	mov.w	r4, #4294967295
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	bd70      	pop	{r4, r5, r6, pc}
 800e1ba:	1cc4      	adds	r4, r0, #3
 800e1bc:	f024 0403 	bic.w	r4, r4, #3
 800e1c0:	42a0      	cmp	r0, r4
 800e1c2:	d0f8      	beq.n	800e1b6 <sbrk_aligned+0x22>
 800e1c4:	1a21      	subs	r1, r4, r0
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f001 ffb6 	bl	8010138 <_sbrk_r>
 800e1cc:	3001      	adds	r0, #1
 800e1ce:	d1f2      	bne.n	800e1b6 <sbrk_aligned+0x22>
 800e1d0:	e7ef      	b.n	800e1b2 <sbrk_aligned+0x1e>
 800e1d2:	bf00      	nop
 800e1d4:	20002238 	.word	0x20002238

0800e1d8 <_malloc_r>:
 800e1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1dc:	1ccd      	adds	r5, r1, #3
 800e1de:	f025 0503 	bic.w	r5, r5, #3
 800e1e2:	3508      	adds	r5, #8
 800e1e4:	2d0c      	cmp	r5, #12
 800e1e6:	bf38      	it	cc
 800e1e8:	250c      	movcc	r5, #12
 800e1ea:	2d00      	cmp	r5, #0
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	db01      	blt.n	800e1f4 <_malloc_r+0x1c>
 800e1f0:	42a9      	cmp	r1, r5
 800e1f2:	d904      	bls.n	800e1fe <_malloc_r+0x26>
 800e1f4:	230c      	movs	r3, #12
 800e1f6:	6033      	str	r3, [r6, #0]
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2d4 <_malloc_r+0xfc>
 800e202:	f000 f869 	bl	800e2d8 <__malloc_lock>
 800e206:	f8d8 3000 	ldr.w	r3, [r8]
 800e20a:	461c      	mov	r4, r3
 800e20c:	bb44      	cbnz	r4, 800e260 <_malloc_r+0x88>
 800e20e:	4629      	mov	r1, r5
 800e210:	4630      	mov	r0, r6
 800e212:	f7ff ffbf 	bl	800e194 <sbrk_aligned>
 800e216:	1c43      	adds	r3, r0, #1
 800e218:	4604      	mov	r4, r0
 800e21a:	d158      	bne.n	800e2ce <_malloc_r+0xf6>
 800e21c:	f8d8 4000 	ldr.w	r4, [r8]
 800e220:	4627      	mov	r7, r4
 800e222:	2f00      	cmp	r7, #0
 800e224:	d143      	bne.n	800e2ae <_malloc_r+0xd6>
 800e226:	2c00      	cmp	r4, #0
 800e228:	d04b      	beq.n	800e2c2 <_malloc_r+0xea>
 800e22a:	6823      	ldr	r3, [r4, #0]
 800e22c:	4639      	mov	r1, r7
 800e22e:	4630      	mov	r0, r6
 800e230:	eb04 0903 	add.w	r9, r4, r3
 800e234:	f001 ff80 	bl	8010138 <_sbrk_r>
 800e238:	4581      	cmp	r9, r0
 800e23a:	d142      	bne.n	800e2c2 <_malloc_r+0xea>
 800e23c:	6821      	ldr	r1, [r4, #0]
 800e23e:	1a6d      	subs	r5, r5, r1
 800e240:	4629      	mov	r1, r5
 800e242:	4630      	mov	r0, r6
 800e244:	f7ff ffa6 	bl	800e194 <sbrk_aligned>
 800e248:	3001      	adds	r0, #1
 800e24a:	d03a      	beq.n	800e2c2 <_malloc_r+0xea>
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	442b      	add	r3, r5
 800e250:	6023      	str	r3, [r4, #0]
 800e252:	f8d8 3000 	ldr.w	r3, [r8]
 800e256:	685a      	ldr	r2, [r3, #4]
 800e258:	bb62      	cbnz	r2, 800e2b4 <_malloc_r+0xdc>
 800e25a:	f8c8 7000 	str.w	r7, [r8]
 800e25e:	e00f      	b.n	800e280 <_malloc_r+0xa8>
 800e260:	6822      	ldr	r2, [r4, #0]
 800e262:	1b52      	subs	r2, r2, r5
 800e264:	d420      	bmi.n	800e2a8 <_malloc_r+0xd0>
 800e266:	2a0b      	cmp	r2, #11
 800e268:	d917      	bls.n	800e29a <_malloc_r+0xc2>
 800e26a:	1961      	adds	r1, r4, r5
 800e26c:	42a3      	cmp	r3, r4
 800e26e:	6025      	str	r5, [r4, #0]
 800e270:	bf18      	it	ne
 800e272:	6059      	strne	r1, [r3, #4]
 800e274:	6863      	ldr	r3, [r4, #4]
 800e276:	bf08      	it	eq
 800e278:	f8c8 1000 	streq.w	r1, [r8]
 800e27c:	5162      	str	r2, [r4, r5]
 800e27e:	604b      	str	r3, [r1, #4]
 800e280:	4630      	mov	r0, r6
 800e282:	f000 f82f 	bl	800e2e4 <__malloc_unlock>
 800e286:	f104 000b 	add.w	r0, r4, #11
 800e28a:	1d23      	adds	r3, r4, #4
 800e28c:	f020 0007 	bic.w	r0, r0, #7
 800e290:	1ac2      	subs	r2, r0, r3
 800e292:	bf1c      	itt	ne
 800e294:	1a1b      	subne	r3, r3, r0
 800e296:	50a3      	strne	r3, [r4, r2]
 800e298:	e7af      	b.n	800e1fa <_malloc_r+0x22>
 800e29a:	6862      	ldr	r2, [r4, #4]
 800e29c:	42a3      	cmp	r3, r4
 800e29e:	bf0c      	ite	eq
 800e2a0:	f8c8 2000 	streq.w	r2, [r8]
 800e2a4:	605a      	strne	r2, [r3, #4]
 800e2a6:	e7eb      	b.n	800e280 <_malloc_r+0xa8>
 800e2a8:	4623      	mov	r3, r4
 800e2aa:	6864      	ldr	r4, [r4, #4]
 800e2ac:	e7ae      	b.n	800e20c <_malloc_r+0x34>
 800e2ae:	463c      	mov	r4, r7
 800e2b0:	687f      	ldr	r7, [r7, #4]
 800e2b2:	e7b6      	b.n	800e222 <_malloc_r+0x4a>
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	42a3      	cmp	r3, r4
 800e2ba:	d1fb      	bne.n	800e2b4 <_malloc_r+0xdc>
 800e2bc:	2300      	movs	r3, #0
 800e2be:	6053      	str	r3, [r2, #4]
 800e2c0:	e7de      	b.n	800e280 <_malloc_r+0xa8>
 800e2c2:	230c      	movs	r3, #12
 800e2c4:	6033      	str	r3, [r6, #0]
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	f000 f80c 	bl	800e2e4 <__malloc_unlock>
 800e2cc:	e794      	b.n	800e1f8 <_malloc_r+0x20>
 800e2ce:	6005      	str	r5, [r0, #0]
 800e2d0:	e7d6      	b.n	800e280 <_malloc_r+0xa8>
 800e2d2:	bf00      	nop
 800e2d4:	2000223c 	.word	0x2000223c

0800e2d8 <__malloc_lock>:
 800e2d8:	4801      	ldr	r0, [pc, #4]	@ (800e2e0 <__malloc_lock+0x8>)
 800e2da:	f7ff b898 	b.w	800d40e <__retarget_lock_acquire_recursive>
 800e2de:	bf00      	nop
 800e2e0:	20002234 	.word	0x20002234

0800e2e4 <__malloc_unlock>:
 800e2e4:	4801      	ldr	r0, [pc, #4]	@ (800e2ec <__malloc_unlock+0x8>)
 800e2e6:	f7ff b893 	b.w	800d410 <__retarget_lock_release_recursive>
 800e2ea:	bf00      	nop
 800e2ec:	20002234 	.word	0x20002234

0800e2f0 <_Balloc>:
 800e2f0:	b570      	push	{r4, r5, r6, lr}
 800e2f2:	69c6      	ldr	r6, [r0, #28]
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	460d      	mov	r5, r1
 800e2f8:	b976      	cbnz	r6, 800e318 <_Balloc+0x28>
 800e2fa:	2010      	movs	r0, #16
 800e2fc:	f7ff ff42 	bl	800e184 <malloc>
 800e300:	4602      	mov	r2, r0
 800e302:	61e0      	str	r0, [r4, #28]
 800e304:	b920      	cbnz	r0, 800e310 <_Balloc+0x20>
 800e306:	4b18      	ldr	r3, [pc, #96]	@ (800e368 <_Balloc+0x78>)
 800e308:	4818      	ldr	r0, [pc, #96]	@ (800e36c <_Balloc+0x7c>)
 800e30a:	216b      	movs	r1, #107	@ 0x6b
 800e30c:	f001 ff2c 	bl	8010168 <__assert_func>
 800e310:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e314:	6006      	str	r6, [r0, #0]
 800e316:	60c6      	str	r6, [r0, #12]
 800e318:	69e6      	ldr	r6, [r4, #28]
 800e31a:	68f3      	ldr	r3, [r6, #12]
 800e31c:	b183      	cbz	r3, 800e340 <_Balloc+0x50>
 800e31e:	69e3      	ldr	r3, [r4, #28]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e326:	b9b8      	cbnz	r0, 800e358 <_Balloc+0x68>
 800e328:	2101      	movs	r1, #1
 800e32a:	fa01 f605 	lsl.w	r6, r1, r5
 800e32e:	1d72      	adds	r2, r6, #5
 800e330:	0092      	lsls	r2, r2, #2
 800e332:	4620      	mov	r0, r4
 800e334:	f001 ff36 	bl	80101a4 <_calloc_r>
 800e338:	b160      	cbz	r0, 800e354 <_Balloc+0x64>
 800e33a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e33e:	e00e      	b.n	800e35e <_Balloc+0x6e>
 800e340:	2221      	movs	r2, #33	@ 0x21
 800e342:	2104      	movs	r1, #4
 800e344:	4620      	mov	r0, r4
 800e346:	f001 ff2d 	bl	80101a4 <_calloc_r>
 800e34a:	69e3      	ldr	r3, [r4, #28]
 800e34c:	60f0      	str	r0, [r6, #12]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d1e4      	bne.n	800e31e <_Balloc+0x2e>
 800e354:	2000      	movs	r0, #0
 800e356:	bd70      	pop	{r4, r5, r6, pc}
 800e358:	6802      	ldr	r2, [r0, #0]
 800e35a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e35e:	2300      	movs	r3, #0
 800e360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e364:	e7f7      	b.n	800e356 <_Balloc+0x66>
 800e366:	bf00      	nop
 800e368:	0801250a 	.word	0x0801250a
 800e36c:	0801258a 	.word	0x0801258a

0800e370 <_Bfree>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	69c6      	ldr	r6, [r0, #28]
 800e374:	4605      	mov	r5, r0
 800e376:	460c      	mov	r4, r1
 800e378:	b976      	cbnz	r6, 800e398 <_Bfree+0x28>
 800e37a:	2010      	movs	r0, #16
 800e37c:	f7ff ff02 	bl	800e184 <malloc>
 800e380:	4602      	mov	r2, r0
 800e382:	61e8      	str	r0, [r5, #28]
 800e384:	b920      	cbnz	r0, 800e390 <_Bfree+0x20>
 800e386:	4b09      	ldr	r3, [pc, #36]	@ (800e3ac <_Bfree+0x3c>)
 800e388:	4809      	ldr	r0, [pc, #36]	@ (800e3b0 <_Bfree+0x40>)
 800e38a:	218f      	movs	r1, #143	@ 0x8f
 800e38c:	f001 feec 	bl	8010168 <__assert_func>
 800e390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e394:	6006      	str	r6, [r0, #0]
 800e396:	60c6      	str	r6, [r0, #12]
 800e398:	b13c      	cbz	r4, 800e3aa <_Bfree+0x3a>
 800e39a:	69eb      	ldr	r3, [r5, #28]
 800e39c:	6862      	ldr	r2, [r4, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e3a4:	6021      	str	r1, [r4, #0]
 800e3a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e3aa:	bd70      	pop	{r4, r5, r6, pc}
 800e3ac:	0801250a 	.word	0x0801250a
 800e3b0:	0801258a 	.word	0x0801258a

0800e3b4 <__multadd>:
 800e3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b8:	690d      	ldr	r5, [r1, #16]
 800e3ba:	4607      	mov	r7, r0
 800e3bc:	460c      	mov	r4, r1
 800e3be:	461e      	mov	r6, r3
 800e3c0:	f101 0c14 	add.w	ip, r1, #20
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	f8dc 3000 	ldr.w	r3, [ip]
 800e3ca:	b299      	uxth	r1, r3
 800e3cc:	fb02 6101 	mla	r1, r2, r1, r6
 800e3d0:	0c1e      	lsrs	r6, r3, #16
 800e3d2:	0c0b      	lsrs	r3, r1, #16
 800e3d4:	fb02 3306 	mla	r3, r2, r6, r3
 800e3d8:	b289      	uxth	r1, r1
 800e3da:	3001      	adds	r0, #1
 800e3dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3e0:	4285      	cmp	r5, r0
 800e3e2:	f84c 1b04 	str.w	r1, [ip], #4
 800e3e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3ea:	dcec      	bgt.n	800e3c6 <__multadd+0x12>
 800e3ec:	b30e      	cbz	r6, 800e432 <__multadd+0x7e>
 800e3ee:	68a3      	ldr	r3, [r4, #8]
 800e3f0:	42ab      	cmp	r3, r5
 800e3f2:	dc19      	bgt.n	800e428 <__multadd+0x74>
 800e3f4:	6861      	ldr	r1, [r4, #4]
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	3101      	adds	r1, #1
 800e3fa:	f7ff ff79 	bl	800e2f0 <_Balloc>
 800e3fe:	4680      	mov	r8, r0
 800e400:	b928      	cbnz	r0, 800e40e <__multadd+0x5a>
 800e402:	4602      	mov	r2, r0
 800e404:	4b0c      	ldr	r3, [pc, #48]	@ (800e438 <__multadd+0x84>)
 800e406:	480d      	ldr	r0, [pc, #52]	@ (800e43c <__multadd+0x88>)
 800e408:	21ba      	movs	r1, #186	@ 0xba
 800e40a:	f001 fead 	bl	8010168 <__assert_func>
 800e40e:	6922      	ldr	r2, [r4, #16]
 800e410:	3202      	adds	r2, #2
 800e412:	f104 010c 	add.w	r1, r4, #12
 800e416:	0092      	lsls	r2, r2, #2
 800e418:	300c      	adds	r0, #12
 800e41a:	f7fe fffa 	bl	800d412 <memcpy>
 800e41e:	4621      	mov	r1, r4
 800e420:	4638      	mov	r0, r7
 800e422:	f7ff ffa5 	bl	800e370 <_Bfree>
 800e426:	4644      	mov	r4, r8
 800e428:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e42c:	3501      	adds	r5, #1
 800e42e:	615e      	str	r6, [r3, #20]
 800e430:	6125      	str	r5, [r4, #16]
 800e432:	4620      	mov	r0, r4
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e438:	08012579 	.word	0x08012579
 800e43c:	0801258a 	.word	0x0801258a

0800e440 <__s2b>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	460c      	mov	r4, r1
 800e446:	4615      	mov	r5, r2
 800e448:	461f      	mov	r7, r3
 800e44a:	2209      	movs	r2, #9
 800e44c:	3308      	adds	r3, #8
 800e44e:	4606      	mov	r6, r0
 800e450:	fb93 f3f2 	sdiv	r3, r3, r2
 800e454:	2100      	movs	r1, #0
 800e456:	2201      	movs	r2, #1
 800e458:	429a      	cmp	r2, r3
 800e45a:	db09      	blt.n	800e470 <__s2b+0x30>
 800e45c:	4630      	mov	r0, r6
 800e45e:	f7ff ff47 	bl	800e2f0 <_Balloc>
 800e462:	b940      	cbnz	r0, 800e476 <__s2b+0x36>
 800e464:	4602      	mov	r2, r0
 800e466:	4b19      	ldr	r3, [pc, #100]	@ (800e4cc <__s2b+0x8c>)
 800e468:	4819      	ldr	r0, [pc, #100]	@ (800e4d0 <__s2b+0x90>)
 800e46a:	21d3      	movs	r1, #211	@ 0xd3
 800e46c:	f001 fe7c 	bl	8010168 <__assert_func>
 800e470:	0052      	lsls	r2, r2, #1
 800e472:	3101      	adds	r1, #1
 800e474:	e7f0      	b.n	800e458 <__s2b+0x18>
 800e476:	9b08      	ldr	r3, [sp, #32]
 800e478:	6143      	str	r3, [r0, #20]
 800e47a:	2d09      	cmp	r5, #9
 800e47c:	f04f 0301 	mov.w	r3, #1
 800e480:	6103      	str	r3, [r0, #16]
 800e482:	dd16      	ble.n	800e4b2 <__s2b+0x72>
 800e484:	f104 0909 	add.w	r9, r4, #9
 800e488:	46c8      	mov	r8, r9
 800e48a:	442c      	add	r4, r5
 800e48c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e490:	4601      	mov	r1, r0
 800e492:	3b30      	subs	r3, #48	@ 0x30
 800e494:	220a      	movs	r2, #10
 800e496:	4630      	mov	r0, r6
 800e498:	f7ff ff8c 	bl	800e3b4 <__multadd>
 800e49c:	45a0      	cmp	r8, r4
 800e49e:	d1f5      	bne.n	800e48c <__s2b+0x4c>
 800e4a0:	f1a5 0408 	sub.w	r4, r5, #8
 800e4a4:	444c      	add	r4, r9
 800e4a6:	1b2d      	subs	r5, r5, r4
 800e4a8:	1963      	adds	r3, r4, r5
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	db04      	blt.n	800e4b8 <__s2b+0x78>
 800e4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4b2:	340a      	adds	r4, #10
 800e4b4:	2509      	movs	r5, #9
 800e4b6:	e7f6      	b.n	800e4a6 <__s2b+0x66>
 800e4b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e4bc:	4601      	mov	r1, r0
 800e4be:	3b30      	subs	r3, #48	@ 0x30
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	f7ff ff76 	bl	800e3b4 <__multadd>
 800e4c8:	e7ee      	b.n	800e4a8 <__s2b+0x68>
 800e4ca:	bf00      	nop
 800e4cc:	08012579 	.word	0x08012579
 800e4d0:	0801258a 	.word	0x0801258a

0800e4d4 <__hi0bits>:
 800e4d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e4d8:	4603      	mov	r3, r0
 800e4da:	bf36      	itet	cc
 800e4dc:	0403      	lslcc	r3, r0, #16
 800e4de:	2000      	movcs	r0, #0
 800e4e0:	2010      	movcc	r0, #16
 800e4e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e4e6:	bf3c      	itt	cc
 800e4e8:	021b      	lslcc	r3, r3, #8
 800e4ea:	3008      	addcc	r0, #8
 800e4ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4f0:	bf3c      	itt	cc
 800e4f2:	011b      	lslcc	r3, r3, #4
 800e4f4:	3004      	addcc	r0, #4
 800e4f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4fa:	bf3c      	itt	cc
 800e4fc:	009b      	lslcc	r3, r3, #2
 800e4fe:	3002      	addcc	r0, #2
 800e500:	2b00      	cmp	r3, #0
 800e502:	db05      	blt.n	800e510 <__hi0bits+0x3c>
 800e504:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e508:	f100 0001 	add.w	r0, r0, #1
 800e50c:	bf08      	it	eq
 800e50e:	2020      	moveq	r0, #32
 800e510:	4770      	bx	lr

0800e512 <__lo0bits>:
 800e512:	6803      	ldr	r3, [r0, #0]
 800e514:	4602      	mov	r2, r0
 800e516:	f013 0007 	ands.w	r0, r3, #7
 800e51a:	d00b      	beq.n	800e534 <__lo0bits+0x22>
 800e51c:	07d9      	lsls	r1, r3, #31
 800e51e:	d421      	bmi.n	800e564 <__lo0bits+0x52>
 800e520:	0798      	lsls	r0, r3, #30
 800e522:	bf49      	itett	mi
 800e524:	085b      	lsrmi	r3, r3, #1
 800e526:	089b      	lsrpl	r3, r3, #2
 800e528:	2001      	movmi	r0, #1
 800e52a:	6013      	strmi	r3, [r2, #0]
 800e52c:	bf5c      	itt	pl
 800e52e:	6013      	strpl	r3, [r2, #0]
 800e530:	2002      	movpl	r0, #2
 800e532:	4770      	bx	lr
 800e534:	b299      	uxth	r1, r3
 800e536:	b909      	cbnz	r1, 800e53c <__lo0bits+0x2a>
 800e538:	0c1b      	lsrs	r3, r3, #16
 800e53a:	2010      	movs	r0, #16
 800e53c:	b2d9      	uxtb	r1, r3
 800e53e:	b909      	cbnz	r1, 800e544 <__lo0bits+0x32>
 800e540:	3008      	adds	r0, #8
 800e542:	0a1b      	lsrs	r3, r3, #8
 800e544:	0719      	lsls	r1, r3, #28
 800e546:	bf04      	itt	eq
 800e548:	091b      	lsreq	r3, r3, #4
 800e54a:	3004      	addeq	r0, #4
 800e54c:	0799      	lsls	r1, r3, #30
 800e54e:	bf04      	itt	eq
 800e550:	089b      	lsreq	r3, r3, #2
 800e552:	3002      	addeq	r0, #2
 800e554:	07d9      	lsls	r1, r3, #31
 800e556:	d403      	bmi.n	800e560 <__lo0bits+0x4e>
 800e558:	085b      	lsrs	r3, r3, #1
 800e55a:	f100 0001 	add.w	r0, r0, #1
 800e55e:	d003      	beq.n	800e568 <__lo0bits+0x56>
 800e560:	6013      	str	r3, [r2, #0]
 800e562:	4770      	bx	lr
 800e564:	2000      	movs	r0, #0
 800e566:	4770      	bx	lr
 800e568:	2020      	movs	r0, #32
 800e56a:	4770      	bx	lr

0800e56c <__i2b>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	460c      	mov	r4, r1
 800e570:	2101      	movs	r1, #1
 800e572:	f7ff febd 	bl	800e2f0 <_Balloc>
 800e576:	4602      	mov	r2, r0
 800e578:	b928      	cbnz	r0, 800e586 <__i2b+0x1a>
 800e57a:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <__i2b+0x24>)
 800e57c:	4805      	ldr	r0, [pc, #20]	@ (800e594 <__i2b+0x28>)
 800e57e:	f240 1145 	movw	r1, #325	@ 0x145
 800e582:	f001 fdf1 	bl	8010168 <__assert_func>
 800e586:	2301      	movs	r3, #1
 800e588:	6144      	str	r4, [r0, #20]
 800e58a:	6103      	str	r3, [r0, #16]
 800e58c:	bd10      	pop	{r4, pc}
 800e58e:	bf00      	nop
 800e590:	08012579 	.word	0x08012579
 800e594:	0801258a 	.word	0x0801258a

0800e598 <__multiply>:
 800e598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e59c:	4617      	mov	r7, r2
 800e59e:	690a      	ldr	r2, [r1, #16]
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	bfa8      	it	ge
 800e5a6:	463b      	movge	r3, r7
 800e5a8:	4689      	mov	r9, r1
 800e5aa:	bfa4      	itt	ge
 800e5ac:	460f      	movge	r7, r1
 800e5ae:	4699      	movge	r9, r3
 800e5b0:	693d      	ldr	r5, [r7, #16]
 800e5b2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	eb05 060a 	add.w	r6, r5, sl
 800e5be:	42b3      	cmp	r3, r6
 800e5c0:	b085      	sub	sp, #20
 800e5c2:	bfb8      	it	lt
 800e5c4:	3101      	addlt	r1, #1
 800e5c6:	f7ff fe93 	bl	800e2f0 <_Balloc>
 800e5ca:	b930      	cbnz	r0, 800e5da <__multiply+0x42>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	4b41      	ldr	r3, [pc, #260]	@ (800e6d4 <__multiply+0x13c>)
 800e5d0:	4841      	ldr	r0, [pc, #260]	@ (800e6d8 <__multiply+0x140>)
 800e5d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e5d6:	f001 fdc7 	bl	8010168 <__assert_func>
 800e5da:	f100 0414 	add.w	r4, r0, #20
 800e5de:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e5e2:	4623      	mov	r3, r4
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	4573      	cmp	r3, lr
 800e5e8:	d320      	bcc.n	800e62c <__multiply+0x94>
 800e5ea:	f107 0814 	add.w	r8, r7, #20
 800e5ee:	f109 0114 	add.w	r1, r9, #20
 800e5f2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e5f6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e5fa:	9302      	str	r3, [sp, #8]
 800e5fc:	1beb      	subs	r3, r5, r7
 800e5fe:	3b15      	subs	r3, #21
 800e600:	f023 0303 	bic.w	r3, r3, #3
 800e604:	3304      	adds	r3, #4
 800e606:	3715      	adds	r7, #21
 800e608:	42bd      	cmp	r5, r7
 800e60a:	bf38      	it	cc
 800e60c:	2304      	movcc	r3, #4
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	9b02      	ldr	r3, [sp, #8]
 800e612:	9103      	str	r1, [sp, #12]
 800e614:	428b      	cmp	r3, r1
 800e616:	d80c      	bhi.n	800e632 <__multiply+0x9a>
 800e618:	2e00      	cmp	r6, #0
 800e61a:	dd03      	ble.n	800e624 <__multiply+0x8c>
 800e61c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e620:	2b00      	cmp	r3, #0
 800e622:	d055      	beq.n	800e6d0 <__multiply+0x138>
 800e624:	6106      	str	r6, [r0, #16]
 800e626:	b005      	add	sp, #20
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	f843 2b04 	str.w	r2, [r3], #4
 800e630:	e7d9      	b.n	800e5e6 <__multiply+0x4e>
 800e632:	f8b1 a000 	ldrh.w	sl, [r1]
 800e636:	f1ba 0f00 	cmp.w	sl, #0
 800e63a:	d01f      	beq.n	800e67c <__multiply+0xe4>
 800e63c:	46c4      	mov	ip, r8
 800e63e:	46a1      	mov	r9, r4
 800e640:	2700      	movs	r7, #0
 800e642:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e646:	f8d9 3000 	ldr.w	r3, [r9]
 800e64a:	fa1f fb82 	uxth.w	fp, r2
 800e64e:	b29b      	uxth	r3, r3
 800e650:	fb0a 330b 	mla	r3, sl, fp, r3
 800e654:	443b      	add	r3, r7
 800e656:	f8d9 7000 	ldr.w	r7, [r9]
 800e65a:	0c12      	lsrs	r2, r2, #16
 800e65c:	0c3f      	lsrs	r7, r7, #16
 800e65e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e662:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e666:	b29b      	uxth	r3, r3
 800e668:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e66c:	4565      	cmp	r5, ip
 800e66e:	f849 3b04 	str.w	r3, [r9], #4
 800e672:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e676:	d8e4      	bhi.n	800e642 <__multiply+0xaa>
 800e678:	9b01      	ldr	r3, [sp, #4]
 800e67a:	50e7      	str	r7, [r4, r3]
 800e67c:	9b03      	ldr	r3, [sp, #12]
 800e67e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e682:	3104      	adds	r1, #4
 800e684:	f1b9 0f00 	cmp.w	r9, #0
 800e688:	d020      	beq.n	800e6cc <__multiply+0x134>
 800e68a:	6823      	ldr	r3, [r4, #0]
 800e68c:	4647      	mov	r7, r8
 800e68e:	46a4      	mov	ip, r4
 800e690:	f04f 0a00 	mov.w	sl, #0
 800e694:	f8b7 b000 	ldrh.w	fp, [r7]
 800e698:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e69c:	fb09 220b 	mla	r2, r9, fp, r2
 800e6a0:	4452      	add	r2, sl
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6a8:	f84c 3b04 	str.w	r3, [ip], #4
 800e6ac:	f857 3b04 	ldr.w	r3, [r7], #4
 800e6b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6b4:	f8bc 3000 	ldrh.w	r3, [ip]
 800e6b8:	fb09 330a 	mla	r3, r9, sl, r3
 800e6bc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e6c0:	42bd      	cmp	r5, r7
 800e6c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6c6:	d8e5      	bhi.n	800e694 <__multiply+0xfc>
 800e6c8:	9a01      	ldr	r2, [sp, #4]
 800e6ca:	50a3      	str	r3, [r4, r2]
 800e6cc:	3404      	adds	r4, #4
 800e6ce:	e79f      	b.n	800e610 <__multiply+0x78>
 800e6d0:	3e01      	subs	r6, #1
 800e6d2:	e7a1      	b.n	800e618 <__multiply+0x80>
 800e6d4:	08012579 	.word	0x08012579
 800e6d8:	0801258a 	.word	0x0801258a

0800e6dc <__pow5mult>:
 800e6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6e0:	4615      	mov	r5, r2
 800e6e2:	f012 0203 	ands.w	r2, r2, #3
 800e6e6:	4607      	mov	r7, r0
 800e6e8:	460e      	mov	r6, r1
 800e6ea:	d007      	beq.n	800e6fc <__pow5mult+0x20>
 800e6ec:	4c25      	ldr	r4, [pc, #148]	@ (800e784 <__pow5mult+0xa8>)
 800e6ee:	3a01      	subs	r2, #1
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e6f6:	f7ff fe5d 	bl	800e3b4 <__multadd>
 800e6fa:	4606      	mov	r6, r0
 800e6fc:	10ad      	asrs	r5, r5, #2
 800e6fe:	d03d      	beq.n	800e77c <__pow5mult+0xa0>
 800e700:	69fc      	ldr	r4, [r7, #28]
 800e702:	b97c      	cbnz	r4, 800e724 <__pow5mult+0x48>
 800e704:	2010      	movs	r0, #16
 800e706:	f7ff fd3d 	bl	800e184 <malloc>
 800e70a:	4602      	mov	r2, r0
 800e70c:	61f8      	str	r0, [r7, #28]
 800e70e:	b928      	cbnz	r0, 800e71c <__pow5mult+0x40>
 800e710:	4b1d      	ldr	r3, [pc, #116]	@ (800e788 <__pow5mult+0xac>)
 800e712:	481e      	ldr	r0, [pc, #120]	@ (800e78c <__pow5mult+0xb0>)
 800e714:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e718:	f001 fd26 	bl	8010168 <__assert_func>
 800e71c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e720:	6004      	str	r4, [r0, #0]
 800e722:	60c4      	str	r4, [r0, #12]
 800e724:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e72c:	b94c      	cbnz	r4, 800e742 <__pow5mult+0x66>
 800e72e:	f240 2171 	movw	r1, #625	@ 0x271
 800e732:	4638      	mov	r0, r7
 800e734:	f7ff ff1a 	bl	800e56c <__i2b>
 800e738:	2300      	movs	r3, #0
 800e73a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e73e:	4604      	mov	r4, r0
 800e740:	6003      	str	r3, [r0, #0]
 800e742:	f04f 0900 	mov.w	r9, #0
 800e746:	07eb      	lsls	r3, r5, #31
 800e748:	d50a      	bpl.n	800e760 <__pow5mult+0x84>
 800e74a:	4631      	mov	r1, r6
 800e74c:	4622      	mov	r2, r4
 800e74e:	4638      	mov	r0, r7
 800e750:	f7ff ff22 	bl	800e598 <__multiply>
 800e754:	4631      	mov	r1, r6
 800e756:	4680      	mov	r8, r0
 800e758:	4638      	mov	r0, r7
 800e75a:	f7ff fe09 	bl	800e370 <_Bfree>
 800e75e:	4646      	mov	r6, r8
 800e760:	106d      	asrs	r5, r5, #1
 800e762:	d00b      	beq.n	800e77c <__pow5mult+0xa0>
 800e764:	6820      	ldr	r0, [r4, #0]
 800e766:	b938      	cbnz	r0, 800e778 <__pow5mult+0x9c>
 800e768:	4622      	mov	r2, r4
 800e76a:	4621      	mov	r1, r4
 800e76c:	4638      	mov	r0, r7
 800e76e:	f7ff ff13 	bl	800e598 <__multiply>
 800e772:	6020      	str	r0, [r4, #0]
 800e774:	f8c0 9000 	str.w	r9, [r0]
 800e778:	4604      	mov	r4, r0
 800e77a:	e7e4      	b.n	800e746 <__pow5mult+0x6a>
 800e77c:	4630      	mov	r0, r6
 800e77e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e782:	bf00      	nop
 800e784:	0801269c 	.word	0x0801269c
 800e788:	0801250a 	.word	0x0801250a
 800e78c:	0801258a 	.word	0x0801258a

0800e790 <__lshift>:
 800e790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	460c      	mov	r4, r1
 800e796:	6849      	ldr	r1, [r1, #4]
 800e798:	6923      	ldr	r3, [r4, #16]
 800e79a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e79e:	68a3      	ldr	r3, [r4, #8]
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	4691      	mov	r9, r2
 800e7a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e7a8:	f108 0601 	add.w	r6, r8, #1
 800e7ac:	42b3      	cmp	r3, r6
 800e7ae:	db0b      	blt.n	800e7c8 <__lshift+0x38>
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7ff fd9d 	bl	800e2f0 <_Balloc>
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	b948      	cbnz	r0, 800e7ce <__lshift+0x3e>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	4b28      	ldr	r3, [pc, #160]	@ (800e860 <__lshift+0xd0>)
 800e7be:	4829      	ldr	r0, [pc, #164]	@ (800e864 <__lshift+0xd4>)
 800e7c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e7c4:	f001 fcd0 	bl	8010168 <__assert_func>
 800e7c8:	3101      	adds	r1, #1
 800e7ca:	005b      	lsls	r3, r3, #1
 800e7cc:	e7ee      	b.n	800e7ac <__lshift+0x1c>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f100 0114 	add.w	r1, r0, #20
 800e7d4:	f100 0210 	add.w	r2, r0, #16
 800e7d8:	4618      	mov	r0, r3
 800e7da:	4553      	cmp	r3, sl
 800e7dc:	db33      	blt.n	800e846 <__lshift+0xb6>
 800e7de:	6920      	ldr	r0, [r4, #16]
 800e7e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7e4:	f104 0314 	add.w	r3, r4, #20
 800e7e8:	f019 091f 	ands.w	r9, r9, #31
 800e7ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e7f4:	d02b      	beq.n	800e84e <__lshift+0xbe>
 800e7f6:	f1c9 0e20 	rsb	lr, r9, #32
 800e7fa:	468a      	mov	sl, r1
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	6818      	ldr	r0, [r3, #0]
 800e800:	fa00 f009 	lsl.w	r0, r0, r9
 800e804:	4310      	orrs	r0, r2
 800e806:	f84a 0b04 	str.w	r0, [sl], #4
 800e80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e80e:	459c      	cmp	ip, r3
 800e810:	fa22 f20e 	lsr.w	r2, r2, lr
 800e814:	d8f3      	bhi.n	800e7fe <__lshift+0x6e>
 800e816:	ebac 0304 	sub.w	r3, ip, r4
 800e81a:	3b15      	subs	r3, #21
 800e81c:	f023 0303 	bic.w	r3, r3, #3
 800e820:	3304      	adds	r3, #4
 800e822:	f104 0015 	add.w	r0, r4, #21
 800e826:	4560      	cmp	r0, ip
 800e828:	bf88      	it	hi
 800e82a:	2304      	movhi	r3, #4
 800e82c:	50ca      	str	r2, [r1, r3]
 800e82e:	b10a      	cbz	r2, 800e834 <__lshift+0xa4>
 800e830:	f108 0602 	add.w	r6, r8, #2
 800e834:	3e01      	subs	r6, #1
 800e836:	4638      	mov	r0, r7
 800e838:	612e      	str	r6, [r5, #16]
 800e83a:	4621      	mov	r1, r4
 800e83c:	f7ff fd98 	bl	800e370 <_Bfree>
 800e840:	4628      	mov	r0, r5
 800e842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e846:	f842 0f04 	str.w	r0, [r2, #4]!
 800e84a:	3301      	adds	r3, #1
 800e84c:	e7c5      	b.n	800e7da <__lshift+0x4a>
 800e84e:	3904      	subs	r1, #4
 800e850:	f853 2b04 	ldr.w	r2, [r3], #4
 800e854:	f841 2f04 	str.w	r2, [r1, #4]!
 800e858:	459c      	cmp	ip, r3
 800e85a:	d8f9      	bhi.n	800e850 <__lshift+0xc0>
 800e85c:	e7ea      	b.n	800e834 <__lshift+0xa4>
 800e85e:	bf00      	nop
 800e860:	08012579 	.word	0x08012579
 800e864:	0801258a 	.word	0x0801258a

0800e868 <__mcmp>:
 800e868:	690a      	ldr	r2, [r1, #16]
 800e86a:	4603      	mov	r3, r0
 800e86c:	6900      	ldr	r0, [r0, #16]
 800e86e:	1a80      	subs	r0, r0, r2
 800e870:	b530      	push	{r4, r5, lr}
 800e872:	d10e      	bne.n	800e892 <__mcmp+0x2a>
 800e874:	3314      	adds	r3, #20
 800e876:	3114      	adds	r1, #20
 800e878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e87c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e880:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e884:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e888:	4295      	cmp	r5, r2
 800e88a:	d003      	beq.n	800e894 <__mcmp+0x2c>
 800e88c:	d205      	bcs.n	800e89a <__mcmp+0x32>
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	bd30      	pop	{r4, r5, pc}
 800e894:	42a3      	cmp	r3, r4
 800e896:	d3f3      	bcc.n	800e880 <__mcmp+0x18>
 800e898:	e7fb      	b.n	800e892 <__mcmp+0x2a>
 800e89a:	2001      	movs	r0, #1
 800e89c:	e7f9      	b.n	800e892 <__mcmp+0x2a>
	...

0800e8a0 <__mdiff>:
 800e8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a4:	4689      	mov	r9, r1
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	4648      	mov	r0, r9
 800e8ac:	4614      	mov	r4, r2
 800e8ae:	f7ff ffdb 	bl	800e868 <__mcmp>
 800e8b2:	1e05      	subs	r5, r0, #0
 800e8b4:	d112      	bne.n	800e8dc <__mdiff+0x3c>
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	f7ff fd19 	bl	800e2f0 <_Balloc>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	b928      	cbnz	r0, 800e8ce <__mdiff+0x2e>
 800e8c2:	4b3f      	ldr	r3, [pc, #252]	@ (800e9c0 <__mdiff+0x120>)
 800e8c4:	f240 2137 	movw	r1, #567	@ 0x237
 800e8c8:	483e      	ldr	r0, [pc, #248]	@ (800e9c4 <__mdiff+0x124>)
 800e8ca:	f001 fc4d 	bl	8010168 <__assert_func>
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	b003      	add	sp, #12
 800e8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8dc:	bfbc      	itt	lt
 800e8de:	464b      	movlt	r3, r9
 800e8e0:	46a1      	movlt	r9, r4
 800e8e2:	4630      	mov	r0, r6
 800e8e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e8e8:	bfba      	itte	lt
 800e8ea:	461c      	movlt	r4, r3
 800e8ec:	2501      	movlt	r5, #1
 800e8ee:	2500      	movge	r5, #0
 800e8f0:	f7ff fcfe 	bl	800e2f0 <_Balloc>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	b918      	cbnz	r0, 800e900 <__mdiff+0x60>
 800e8f8:	4b31      	ldr	r3, [pc, #196]	@ (800e9c0 <__mdiff+0x120>)
 800e8fa:	f240 2145 	movw	r1, #581	@ 0x245
 800e8fe:	e7e3      	b.n	800e8c8 <__mdiff+0x28>
 800e900:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e904:	6926      	ldr	r6, [r4, #16]
 800e906:	60c5      	str	r5, [r0, #12]
 800e908:	f109 0310 	add.w	r3, r9, #16
 800e90c:	f109 0514 	add.w	r5, r9, #20
 800e910:	f104 0e14 	add.w	lr, r4, #20
 800e914:	f100 0b14 	add.w	fp, r0, #20
 800e918:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e91c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	46d9      	mov	r9, fp
 800e924:	f04f 0c00 	mov.w	ip, #0
 800e928:	9b01      	ldr	r3, [sp, #4]
 800e92a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e92e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	fa1f f38a 	uxth.w	r3, sl
 800e938:	4619      	mov	r1, r3
 800e93a:	b283      	uxth	r3, r0
 800e93c:	1acb      	subs	r3, r1, r3
 800e93e:	0c00      	lsrs	r0, r0, #16
 800e940:	4463      	add	r3, ip
 800e942:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e946:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e950:	4576      	cmp	r6, lr
 800e952:	f849 3b04 	str.w	r3, [r9], #4
 800e956:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e95a:	d8e5      	bhi.n	800e928 <__mdiff+0x88>
 800e95c:	1b33      	subs	r3, r6, r4
 800e95e:	3b15      	subs	r3, #21
 800e960:	f023 0303 	bic.w	r3, r3, #3
 800e964:	3415      	adds	r4, #21
 800e966:	3304      	adds	r3, #4
 800e968:	42a6      	cmp	r6, r4
 800e96a:	bf38      	it	cc
 800e96c:	2304      	movcc	r3, #4
 800e96e:	441d      	add	r5, r3
 800e970:	445b      	add	r3, fp
 800e972:	461e      	mov	r6, r3
 800e974:	462c      	mov	r4, r5
 800e976:	4544      	cmp	r4, r8
 800e978:	d30e      	bcc.n	800e998 <__mdiff+0xf8>
 800e97a:	f108 0103 	add.w	r1, r8, #3
 800e97e:	1b49      	subs	r1, r1, r5
 800e980:	f021 0103 	bic.w	r1, r1, #3
 800e984:	3d03      	subs	r5, #3
 800e986:	45a8      	cmp	r8, r5
 800e988:	bf38      	it	cc
 800e98a:	2100      	movcc	r1, #0
 800e98c:	440b      	add	r3, r1
 800e98e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e992:	b191      	cbz	r1, 800e9ba <__mdiff+0x11a>
 800e994:	6117      	str	r7, [r2, #16]
 800e996:	e79d      	b.n	800e8d4 <__mdiff+0x34>
 800e998:	f854 1b04 	ldr.w	r1, [r4], #4
 800e99c:	46e6      	mov	lr, ip
 800e99e:	0c08      	lsrs	r0, r1, #16
 800e9a0:	fa1c fc81 	uxtah	ip, ip, r1
 800e9a4:	4471      	add	r1, lr
 800e9a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e9aa:	b289      	uxth	r1, r1
 800e9ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e9b0:	f846 1b04 	str.w	r1, [r6], #4
 800e9b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e9b8:	e7dd      	b.n	800e976 <__mdiff+0xd6>
 800e9ba:	3f01      	subs	r7, #1
 800e9bc:	e7e7      	b.n	800e98e <__mdiff+0xee>
 800e9be:	bf00      	nop
 800e9c0:	08012579 	.word	0x08012579
 800e9c4:	0801258a 	.word	0x0801258a

0800e9c8 <__ulp>:
 800e9c8:	b082      	sub	sp, #8
 800e9ca:	ed8d 0b00 	vstr	d0, [sp]
 800e9ce:	9a01      	ldr	r2, [sp, #4]
 800e9d0:	4b0f      	ldr	r3, [pc, #60]	@ (800ea10 <__ulp+0x48>)
 800e9d2:	4013      	ands	r3, r2
 800e9d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	dc08      	bgt.n	800e9ee <__ulp+0x26>
 800e9dc:	425b      	negs	r3, r3
 800e9de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e9e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e9e6:	da04      	bge.n	800e9f2 <__ulp+0x2a>
 800e9e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e9ec:	4113      	asrs	r3, r2
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	e008      	b.n	800ea04 <__ulp+0x3c>
 800e9f2:	f1a2 0314 	sub.w	r3, r2, #20
 800e9f6:	2b1e      	cmp	r3, #30
 800e9f8:	bfda      	itte	le
 800e9fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e9fe:	40da      	lsrle	r2, r3
 800ea00:	2201      	movgt	r2, #1
 800ea02:	2300      	movs	r3, #0
 800ea04:	4619      	mov	r1, r3
 800ea06:	4610      	mov	r0, r2
 800ea08:	ec41 0b10 	vmov	d0, r0, r1
 800ea0c:	b002      	add	sp, #8
 800ea0e:	4770      	bx	lr
 800ea10:	7ff00000 	.word	0x7ff00000

0800ea14 <__b2d>:
 800ea14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea18:	6906      	ldr	r6, [r0, #16]
 800ea1a:	f100 0814 	add.w	r8, r0, #20
 800ea1e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ea22:	1f37      	subs	r7, r6, #4
 800ea24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea28:	4610      	mov	r0, r2
 800ea2a:	f7ff fd53 	bl	800e4d4 <__hi0bits>
 800ea2e:	f1c0 0320 	rsb	r3, r0, #32
 800ea32:	280a      	cmp	r0, #10
 800ea34:	600b      	str	r3, [r1, #0]
 800ea36:	491b      	ldr	r1, [pc, #108]	@ (800eaa4 <__b2d+0x90>)
 800ea38:	dc15      	bgt.n	800ea66 <__b2d+0x52>
 800ea3a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ea3e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ea42:	45b8      	cmp	r8, r7
 800ea44:	ea43 0501 	orr.w	r5, r3, r1
 800ea48:	bf34      	ite	cc
 800ea4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea4e:	2300      	movcs	r3, #0
 800ea50:	3015      	adds	r0, #21
 800ea52:	fa02 f000 	lsl.w	r0, r2, r0
 800ea56:	fa23 f30c 	lsr.w	r3, r3, ip
 800ea5a:	4303      	orrs	r3, r0
 800ea5c:	461c      	mov	r4, r3
 800ea5e:	ec45 4b10 	vmov	d0, r4, r5
 800ea62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea66:	45b8      	cmp	r8, r7
 800ea68:	bf3a      	itte	cc
 800ea6a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ea6e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ea72:	2300      	movcs	r3, #0
 800ea74:	380b      	subs	r0, #11
 800ea76:	d012      	beq.n	800ea9e <__b2d+0x8a>
 800ea78:	f1c0 0120 	rsb	r1, r0, #32
 800ea7c:	fa23 f401 	lsr.w	r4, r3, r1
 800ea80:	4082      	lsls	r2, r0
 800ea82:	4322      	orrs	r2, r4
 800ea84:	4547      	cmp	r7, r8
 800ea86:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ea8a:	bf8c      	ite	hi
 800ea8c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ea90:	2200      	movls	r2, #0
 800ea92:	4083      	lsls	r3, r0
 800ea94:	40ca      	lsrs	r2, r1
 800ea96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	e7de      	b.n	800ea5c <__b2d+0x48>
 800ea9e:	ea42 0501 	orr.w	r5, r2, r1
 800eaa2:	e7db      	b.n	800ea5c <__b2d+0x48>
 800eaa4:	3ff00000 	.word	0x3ff00000

0800eaa8 <__d2b>:
 800eaa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eaac:	460f      	mov	r7, r1
 800eaae:	2101      	movs	r1, #1
 800eab0:	ec59 8b10 	vmov	r8, r9, d0
 800eab4:	4616      	mov	r6, r2
 800eab6:	f7ff fc1b 	bl	800e2f0 <_Balloc>
 800eaba:	4604      	mov	r4, r0
 800eabc:	b930      	cbnz	r0, 800eacc <__d2b+0x24>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b23      	ldr	r3, [pc, #140]	@ (800eb50 <__d2b+0xa8>)
 800eac2:	4824      	ldr	r0, [pc, #144]	@ (800eb54 <__d2b+0xac>)
 800eac4:	f240 310f 	movw	r1, #783	@ 0x30f
 800eac8:	f001 fb4e 	bl	8010168 <__assert_func>
 800eacc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ead0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ead4:	b10d      	cbz	r5, 800eada <__d2b+0x32>
 800ead6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eada:	9301      	str	r3, [sp, #4]
 800eadc:	f1b8 0300 	subs.w	r3, r8, #0
 800eae0:	d023      	beq.n	800eb2a <__d2b+0x82>
 800eae2:	4668      	mov	r0, sp
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	f7ff fd14 	bl	800e512 <__lo0bits>
 800eaea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800eaee:	b1d0      	cbz	r0, 800eb26 <__d2b+0x7e>
 800eaf0:	f1c0 0320 	rsb	r3, r0, #32
 800eaf4:	fa02 f303 	lsl.w	r3, r2, r3
 800eaf8:	430b      	orrs	r3, r1
 800eafa:	40c2      	lsrs	r2, r0
 800eafc:	6163      	str	r3, [r4, #20]
 800eafe:	9201      	str	r2, [sp, #4]
 800eb00:	9b01      	ldr	r3, [sp, #4]
 800eb02:	61a3      	str	r3, [r4, #24]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	bf0c      	ite	eq
 800eb08:	2201      	moveq	r2, #1
 800eb0a:	2202      	movne	r2, #2
 800eb0c:	6122      	str	r2, [r4, #16]
 800eb0e:	b1a5      	cbz	r5, 800eb3a <__d2b+0x92>
 800eb10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800eb14:	4405      	add	r5, r0
 800eb16:	603d      	str	r5, [r7, #0]
 800eb18:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800eb1c:	6030      	str	r0, [r6, #0]
 800eb1e:	4620      	mov	r0, r4
 800eb20:	b003      	add	sp, #12
 800eb22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb26:	6161      	str	r1, [r4, #20]
 800eb28:	e7ea      	b.n	800eb00 <__d2b+0x58>
 800eb2a:	a801      	add	r0, sp, #4
 800eb2c:	f7ff fcf1 	bl	800e512 <__lo0bits>
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	6163      	str	r3, [r4, #20]
 800eb34:	3020      	adds	r0, #32
 800eb36:	2201      	movs	r2, #1
 800eb38:	e7e8      	b.n	800eb0c <__d2b+0x64>
 800eb3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eb3e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800eb42:	6038      	str	r0, [r7, #0]
 800eb44:	6918      	ldr	r0, [r3, #16]
 800eb46:	f7ff fcc5 	bl	800e4d4 <__hi0bits>
 800eb4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eb4e:	e7e5      	b.n	800eb1c <__d2b+0x74>
 800eb50:	08012579 	.word	0x08012579
 800eb54:	0801258a 	.word	0x0801258a

0800eb58 <__ratio>:
 800eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb5c:	b085      	sub	sp, #20
 800eb5e:	e9cd 1000 	strd	r1, r0, [sp]
 800eb62:	a902      	add	r1, sp, #8
 800eb64:	f7ff ff56 	bl	800ea14 <__b2d>
 800eb68:	9800      	ldr	r0, [sp, #0]
 800eb6a:	a903      	add	r1, sp, #12
 800eb6c:	ec55 4b10 	vmov	r4, r5, d0
 800eb70:	f7ff ff50 	bl	800ea14 <__b2d>
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	6919      	ldr	r1, [r3, #16]
 800eb78:	9b00      	ldr	r3, [sp, #0]
 800eb7a:	691b      	ldr	r3, [r3, #16]
 800eb7c:	1ac9      	subs	r1, r1, r3
 800eb7e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eb82:	1a9b      	subs	r3, r3, r2
 800eb84:	ec5b ab10 	vmov	sl, fp, d0
 800eb88:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	bfce      	itee	gt
 800eb90:	462a      	movgt	r2, r5
 800eb92:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb96:	465a      	movle	r2, fp
 800eb98:	462f      	mov	r7, r5
 800eb9a:	46d9      	mov	r9, fp
 800eb9c:	bfcc      	ite	gt
 800eb9e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eba2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eba6:	464b      	mov	r3, r9
 800eba8:	4652      	mov	r2, sl
 800ebaa:	4620      	mov	r0, r4
 800ebac:	4639      	mov	r1, r7
 800ebae:	f7f1 fe4d 	bl	800084c <__aeabi_ddiv>
 800ebb2:	ec41 0b10 	vmov	d0, r0, r1
 800ebb6:	b005      	add	sp, #20
 800ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebbc <__copybits>:
 800ebbc:	3901      	subs	r1, #1
 800ebbe:	b570      	push	{r4, r5, r6, lr}
 800ebc0:	1149      	asrs	r1, r1, #5
 800ebc2:	6914      	ldr	r4, [r2, #16]
 800ebc4:	3101      	adds	r1, #1
 800ebc6:	f102 0314 	add.w	r3, r2, #20
 800ebca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ebce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ebd2:	1f05      	subs	r5, r0, #4
 800ebd4:	42a3      	cmp	r3, r4
 800ebd6:	d30c      	bcc.n	800ebf2 <__copybits+0x36>
 800ebd8:	1aa3      	subs	r3, r4, r2
 800ebda:	3b11      	subs	r3, #17
 800ebdc:	f023 0303 	bic.w	r3, r3, #3
 800ebe0:	3211      	adds	r2, #17
 800ebe2:	42a2      	cmp	r2, r4
 800ebe4:	bf88      	it	hi
 800ebe6:	2300      	movhi	r3, #0
 800ebe8:	4418      	add	r0, r3
 800ebea:	2300      	movs	r3, #0
 800ebec:	4288      	cmp	r0, r1
 800ebee:	d305      	bcc.n	800ebfc <__copybits+0x40>
 800ebf0:	bd70      	pop	{r4, r5, r6, pc}
 800ebf2:	f853 6b04 	ldr.w	r6, [r3], #4
 800ebf6:	f845 6f04 	str.w	r6, [r5, #4]!
 800ebfa:	e7eb      	b.n	800ebd4 <__copybits+0x18>
 800ebfc:	f840 3b04 	str.w	r3, [r0], #4
 800ec00:	e7f4      	b.n	800ebec <__copybits+0x30>

0800ec02 <__any_on>:
 800ec02:	f100 0214 	add.w	r2, r0, #20
 800ec06:	6900      	ldr	r0, [r0, #16]
 800ec08:	114b      	asrs	r3, r1, #5
 800ec0a:	4298      	cmp	r0, r3
 800ec0c:	b510      	push	{r4, lr}
 800ec0e:	db11      	blt.n	800ec34 <__any_on+0x32>
 800ec10:	dd0a      	ble.n	800ec28 <__any_on+0x26>
 800ec12:	f011 011f 	ands.w	r1, r1, #31
 800ec16:	d007      	beq.n	800ec28 <__any_on+0x26>
 800ec18:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ec1c:	fa24 f001 	lsr.w	r0, r4, r1
 800ec20:	fa00 f101 	lsl.w	r1, r0, r1
 800ec24:	428c      	cmp	r4, r1
 800ec26:	d10b      	bne.n	800ec40 <__any_on+0x3e>
 800ec28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d803      	bhi.n	800ec38 <__any_on+0x36>
 800ec30:	2000      	movs	r0, #0
 800ec32:	bd10      	pop	{r4, pc}
 800ec34:	4603      	mov	r3, r0
 800ec36:	e7f7      	b.n	800ec28 <__any_on+0x26>
 800ec38:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec3c:	2900      	cmp	r1, #0
 800ec3e:	d0f5      	beq.n	800ec2c <__any_on+0x2a>
 800ec40:	2001      	movs	r0, #1
 800ec42:	e7f6      	b.n	800ec32 <__any_on+0x30>

0800ec44 <sulp>:
 800ec44:	b570      	push	{r4, r5, r6, lr}
 800ec46:	4604      	mov	r4, r0
 800ec48:	460d      	mov	r5, r1
 800ec4a:	ec45 4b10 	vmov	d0, r4, r5
 800ec4e:	4616      	mov	r6, r2
 800ec50:	f7ff feba 	bl	800e9c8 <__ulp>
 800ec54:	ec51 0b10 	vmov	r0, r1, d0
 800ec58:	b17e      	cbz	r6, 800ec7a <sulp+0x36>
 800ec5a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ec5e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	dd09      	ble.n	800ec7a <sulp+0x36>
 800ec66:	051b      	lsls	r3, r3, #20
 800ec68:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ec6c:	2400      	movs	r4, #0
 800ec6e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ec72:	4622      	mov	r2, r4
 800ec74:	462b      	mov	r3, r5
 800ec76:	f7f1 fcbf 	bl	80005f8 <__aeabi_dmul>
 800ec7a:	ec41 0b10 	vmov	d0, r0, r1
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}

0800ec80 <_strtod_l>:
 800ec80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec84:	b09f      	sub	sp, #124	@ 0x7c
 800ec86:	460c      	mov	r4, r1
 800ec88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ec8e:	9005      	str	r0, [sp, #20]
 800ec90:	f04f 0a00 	mov.w	sl, #0
 800ec94:	f04f 0b00 	mov.w	fp, #0
 800ec98:	460a      	mov	r2, r1
 800ec9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec9c:	7811      	ldrb	r1, [r2, #0]
 800ec9e:	292b      	cmp	r1, #43	@ 0x2b
 800eca0:	d04a      	beq.n	800ed38 <_strtod_l+0xb8>
 800eca2:	d838      	bhi.n	800ed16 <_strtod_l+0x96>
 800eca4:	290d      	cmp	r1, #13
 800eca6:	d832      	bhi.n	800ed0e <_strtod_l+0x8e>
 800eca8:	2908      	cmp	r1, #8
 800ecaa:	d832      	bhi.n	800ed12 <_strtod_l+0x92>
 800ecac:	2900      	cmp	r1, #0
 800ecae:	d03b      	beq.n	800ed28 <_strtod_l+0xa8>
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	920e      	str	r2, [sp, #56]	@ 0x38
 800ecb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ecb6:	782a      	ldrb	r2, [r5, #0]
 800ecb8:	2a30      	cmp	r2, #48	@ 0x30
 800ecba:	f040 80b2 	bne.w	800ee22 <_strtod_l+0x1a2>
 800ecbe:	786a      	ldrb	r2, [r5, #1]
 800ecc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ecc4:	2a58      	cmp	r2, #88	@ 0x58
 800ecc6:	d16e      	bne.n	800eda6 <_strtod_l+0x126>
 800ecc8:	9302      	str	r3, [sp, #8]
 800ecca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	ab1a      	add	r3, sp, #104	@ 0x68
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	4a8f      	ldr	r2, [pc, #572]	@ (800ef10 <_strtod_l+0x290>)
 800ecd4:	9805      	ldr	r0, [sp, #20]
 800ecd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ecd8:	a919      	add	r1, sp, #100	@ 0x64
 800ecda:	f001 fadf 	bl	801029c <__gethex>
 800ecde:	f010 060f 	ands.w	r6, r0, #15
 800ece2:	4604      	mov	r4, r0
 800ece4:	d005      	beq.n	800ecf2 <_strtod_l+0x72>
 800ece6:	2e06      	cmp	r6, #6
 800ece8:	d128      	bne.n	800ed3c <_strtod_l+0xbc>
 800ecea:	3501      	adds	r5, #1
 800ecec:	2300      	movs	r3, #0
 800ecee:	9519      	str	r5, [sp, #100]	@ 0x64
 800ecf0:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f040 858e 	bne.w	800f816 <_strtod_l+0xb96>
 800ecfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecfc:	b1cb      	cbz	r3, 800ed32 <_strtod_l+0xb2>
 800ecfe:	4652      	mov	r2, sl
 800ed00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ed04:	ec43 2b10 	vmov	d0, r2, r3
 800ed08:	b01f      	add	sp, #124	@ 0x7c
 800ed0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed0e:	2920      	cmp	r1, #32
 800ed10:	d1ce      	bne.n	800ecb0 <_strtod_l+0x30>
 800ed12:	3201      	adds	r2, #1
 800ed14:	e7c1      	b.n	800ec9a <_strtod_l+0x1a>
 800ed16:	292d      	cmp	r1, #45	@ 0x2d
 800ed18:	d1ca      	bne.n	800ecb0 <_strtod_l+0x30>
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ed1e:	1c51      	adds	r1, r2, #1
 800ed20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ed22:	7852      	ldrb	r2, [r2, #1]
 800ed24:	2a00      	cmp	r2, #0
 800ed26:	d1c5      	bne.n	800ecb4 <_strtod_l+0x34>
 800ed28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ed2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f040 8570 	bne.w	800f812 <_strtod_l+0xb92>
 800ed32:	4652      	mov	r2, sl
 800ed34:	465b      	mov	r3, fp
 800ed36:	e7e5      	b.n	800ed04 <_strtod_l+0x84>
 800ed38:	2100      	movs	r1, #0
 800ed3a:	e7ef      	b.n	800ed1c <_strtod_l+0x9c>
 800ed3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ed3e:	b13a      	cbz	r2, 800ed50 <_strtod_l+0xd0>
 800ed40:	2135      	movs	r1, #53	@ 0x35
 800ed42:	a81c      	add	r0, sp, #112	@ 0x70
 800ed44:	f7ff ff3a 	bl	800ebbc <__copybits>
 800ed48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed4a:	9805      	ldr	r0, [sp, #20]
 800ed4c:	f7ff fb10 	bl	800e370 <_Bfree>
 800ed50:	3e01      	subs	r6, #1
 800ed52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ed54:	2e04      	cmp	r6, #4
 800ed56:	d806      	bhi.n	800ed66 <_strtod_l+0xe6>
 800ed58:	e8df f006 	tbb	[pc, r6]
 800ed5c:	201d0314 	.word	0x201d0314
 800ed60:	14          	.byte	0x14
 800ed61:	00          	.byte	0x00
 800ed62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ed66:	05e1      	lsls	r1, r4, #23
 800ed68:	bf48      	it	mi
 800ed6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ed6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed72:	0d1b      	lsrs	r3, r3, #20
 800ed74:	051b      	lsls	r3, r3, #20
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d1bb      	bne.n	800ecf2 <_strtod_l+0x72>
 800ed7a:	f7fe fb1d 	bl	800d3b8 <__errno>
 800ed7e:	2322      	movs	r3, #34	@ 0x22
 800ed80:	6003      	str	r3, [r0, #0]
 800ed82:	e7b6      	b.n	800ecf2 <_strtod_l+0x72>
 800ed84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ed88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ed8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ed90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ed94:	e7e7      	b.n	800ed66 <_strtod_l+0xe6>
 800ed96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ef18 <_strtod_l+0x298>
 800ed9a:	e7e4      	b.n	800ed66 <_strtod_l+0xe6>
 800ed9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eda0:	f04f 3aff 	mov.w	sl, #4294967295
 800eda4:	e7df      	b.n	800ed66 <_strtod_l+0xe6>
 800eda6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eda8:	1c5a      	adds	r2, r3, #1
 800edaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800edac:	785b      	ldrb	r3, [r3, #1]
 800edae:	2b30      	cmp	r3, #48	@ 0x30
 800edb0:	d0f9      	beq.n	800eda6 <_strtod_l+0x126>
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d09d      	beq.n	800ecf2 <_strtod_l+0x72>
 800edb6:	2301      	movs	r3, #1
 800edb8:	2700      	movs	r7, #0
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800edc0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800edc2:	46b9      	mov	r9, r7
 800edc4:	220a      	movs	r2, #10
 800edc6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800edc8:	7805      	ldrb	r5, [r0, #0]
 800edca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800edce:	b2d9      	uxtb	r1, r3
 800edd0:	2909      	cmp	r1, #9
 800edd2:	d928      	bls.n	800ee26 <_strtod_l+0x1a6>
 800edd4:	494f      	ldr	r1, [pc, #316]	@ (800ef14 <_strtod_l+0x294>)
 800edd6:	2201      	movs	r2, #1
 800edd8:	f001 f97a 	bl	80100d0 <strncmp>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d032      	beq.n	800ee46 <_strtod_l+0x1c6>
 800ede0:	2000      	movs	r0, #0
 800ede2:	462a      	mov	r2, r5
 800ede4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ede6:	464d      	mov	r5, r9
 800ede8:	4603      	mov	r3, r0
 800edea:	2a65      	cmp	r2, #101	@ 0x65
 800edec:	d001      	beq.n	800edf2 <_strtod_l+0x172>
 800edee:	2a45      	cmp	r2, #69	@ 0x45
 800edf0:	d114      	bne.n	800ee1c <_strtod_l+0x19c>
 800edf2:	b91d      	cbnz	r5, 800edfc <_strtod_l+0x17c>
 800edf4:	9a08      	ldr	r2, [sp, #32]
 800edf6:	4302      	orrs	r2, r0
 800edf8:	d096      	beq.n	800ed28 <_strtod_l+0xa8>
 800edfa:	2500      	movs	r5, #0
 800edfc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800edfe:	1c62      	adds	r2, r4, #1
 800ee00:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee02:	7862      	ldrb	r2, [r4, #1]
 800ee04:	2a2b      	cmp	r2, #43	@ 0x2b
 800ee06:	d07a      	beq.n	800eefe <_strtod_l+0x27e>
 800ee08:	2a2d      	cmp	r2, #45	@ 0x2d
 800ee0a:	d07e      	beq.n	800ef0a <_strtod_l+0x28a>
 800ee0c:	f04f 0c00 	mov.w	ip, #0
 800ee10:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ee14:	2909      	cmp	r1, #9
 800ee16:	f240 8085 	bls.w	800ef24 <_strtod_l+0x2a4>
 800ee1a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ee1c:	f04f 0800 	mov.w	r8, #0
 800ee20:	e0a5      	b.n	800ef6e <_strtod_l+0x2ee>
 800ee22:	2300      	movs	r3, #0
 800ee24:	e7c8      	b.n	800edb8 <_strtod_l+0x138>
 800ee26:	f1b9 0f08 	cmp.w	r9, #8
 800ee2a:	bfd8      	it	le
 800ee2c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ee2e:	f100 0001 	add.w	r0, r0, #1
 800ee32:	bfda      	itte	le
 800ee34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ee38:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ee3a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ee3e:	f109 0901 	add.w	r9, r9, #1
 800ee42:	9019      	str	r0, [sp, #100]	@ 0x64
 800ee44:	e7bf      	b.n	800edc6 <_strtod_l+0x146>
 800ee46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee48:	1c5a      	adds	r2, r3, #1
 800ee4a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee4c:	785a      	ldrb	r2, [r3, #1]
 800ee4e:	f1b9 0f00 	cmp.w	r9, #0
 800ee52:	d03b      	beq.n	800eecc <_strtod_l+0x24c>
 800ee54:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee56:	464d      	mov	r5, r9
 800ee58:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ee5c:	2b09      	cmp	r3, #9
 800ee5e:	d912      	bls.n	800ee86 <_strtod_l+0x206>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e7c2      	b.n	800edea <_strtod_l+0x16a>
 800ee64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee6a:	785a      	ldrb	r2, [r3, #1]
 800ee6c:	3001      	adds	r0, #1
 800ee6e:	2a30      	cmp	r2, #48	@ 0x30
 800ee70:	d0f8      	beq.n	800ee64 <_strtod_l+0x1e4>
 800ee72:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ee76:	2b08      	cmp	r3, #8
 800ee78:	f200 84d2 	bhi.w	800f820 <_strtod_l+0xba0>
 800ee7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ee7e:	900a      	str	r0, [sp, #40]	@ 0x28
 800ee80:	2000      	movs	r0, #0
 800ee82:	930c      	str	r3, [sp, #48]	@ 0x30
 800ee84:	4605      	mov	r5, r0
 800ee86:	3a30      	subs	r2, #48	@ 0x30
 800ee88:	f100 0301 	add.w	r3, r0, #1
 800ee8c:	d018      	beq.n	800eec0 <_strtod_l+0x240>
 800ee8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee90:	4419      	add	r1, r3
 800ee92:	910a      	str	r1, [sp, #40]	@ 0x28
 800ee94:	462e      	mov	r6, r5
 800ee96:	f04f 0e0a 	mov.w	lr, #10
 800ee9a:	1c71      	adds	r1, r6, #1
 800ee9c:	eba1 0c05 	sub.w	ip, r1, r5
 800eea0:	4563      	cmp	r3, ip
 800eea2:	dc15      	bgt.n	800eed0 <_strtod_l+0x250>
 800eea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800eea8:	182b      	adds	r3, r5, r0
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	f105 0501 	add.w	r5, r5, #1
 800eeb0:	4405      	add	r5, r0
 800eeb2:	dc1a      	bgt.n	800eeea <_strtod_l+0x26a>
 800eeb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	fb03 2301 	mla	r3, r3, r1, r2
 800eebc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eebe:	2300      	movs	r3, #0
 800eec0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800eec2:	1c51      	adds	r1, r2, #1
 800eec4:	9119      	str	r1, [sp, #100]	@ 0x64
 800eec6:	7852      	ldrb	r2, [r2, #1]
 800eec8:	4618      	mov	r0, r3
 800eeca:	e7c5      	b.n	800ee58 <_strtod_l+0x1d8>
 800eecc:	4648      	mov	r0, r9
 800eece:	e7ce      	b.n	800ee6e <_strtod_l+0x1ee>
 800eed0:	2e08      	cmp	r6, #8
 800eed2:	dc05      	bgt.n	800eee0 <_strtod_l+0x260>
 800eed4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800eed6:	fb0e f606 	mul.w	r6, lr, r6
 800eeda:	960b      	str	r6, [sp, #44]	@ 0x2c
 800eedc:	460e      	mov	r6, r1
 800eede:	e7dc      	b.n	800ee9a <_strtod_l+0x21a>
 800eee0:	2910      	cmp	r1, #16
 800eee2:	bfd8      	it	le
 800eee4:	fb0e f707 	mulle.w	r7, lr, r7
 800eee8:	e7f8      	b.n	800eedc <_strtod_l+0x25c>
 800eeea:	2b0f      	cmp	r3, #15
 800eeec:	bfdc      	itt	le
 800eeee:	230a      	movle	r3, #10
 800eef0:	fb03 2707 	mlale	r7, r3, r7, r2
 800eef4:	e7e3      	b.n	800eebe <_strtod_l+0x23e>
 800eef6:	2300      	movs	r3, #0
 800eef8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eefa:	2301      	movs	r3, #1
 800eefc:	e77a      	b.n	800edf4 <_strtod_l+0x174>
 800eefe:	f04f 0c00 	mov.w	ip, #0
 800ef02:	1ca2      	adds	r2, r4, #2
 800ef04:	9219      	str	r2, [sp, #100]	@ 0x64
 800ef06:	78a2      	ldrb	r2, [r4, #2]
 800ef08:	e782      	b.n	800ee10 <_strtod_l+0x190>
 800ef0a:	f04f 0c01 	mov.w	ip, #1
 800ef0e:	e7f8      	b.n	800ef02 <_strtod_l+0x282>
 800ef10:	080127ac 	.word	0x080127ac
 800ef14:	080125e3 	.word	0x080125e3
 800ef18:	7ff00000 	.word	0x7ff00000
 800ef1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef1e:	1c51      	adds	r1, r2, #1
 800ef20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef22:	7852      	ldrb	r2, [r2, #1]
 800ef24:	2a30      	cmp	r2, #48	@ 0x30
 800ef26:	d0f9      	beq.n	800ef1c <_strtod_l+0x29c>
 800ef28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ef2c:	2908      	cmp	r1, #8
 800ef2e:	f63f af75 	bhi.w	800ee1c <_strtod_l+0x19c>
 800ef32:	3a30      	subs	r2, #48	@ 0x30
 800ef34:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef36:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef38:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ef3a:	f04f 080a 	mov.w	r8, #10
 800ef3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ef40:	1c56      	adds	r6, r2, #1
 800ef42:	9619      	str	r6, [sp, #100]	@ 0x64
 800ef44:	7852      	ldrb	r2, [r2, #1]
 800ef46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ef4a:	f1be 0f09 	cmp.w	lr, #9
 800ef4e:	d939      	bls.n	800efc4 <_strtod_l+0x344>
 800ef50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ef52:	1a76      	subs	r6, r6, r1
 800ef54:	2e08      	cmp	r6, #8
 800ef56:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ef5a:	dc03      	bgt.n	800ef64 <_strtod_l+0x2e4>
 800ef5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef5e:	4588      	cmp	r8, r1
 800ef60:	bfa8      	it	ge
 800ef62:	4688      	movge	r8, r1
 800ef64:	f1bc 0f00 	cmp.w	ip, #0
 800ef68:	d001      	beq.n	800ef6e <_strtod_l+0x2ee>
 800ef6a:	f1c8 0800 	rsb	r8, r8, #0
 800ef6e:	2d00      	cmp	r5, #0
 800ef70:	d14e      	bne.n	800f010 <_strtod_l+0x390>
 800ef72:	9908      	ldr	r1, [sp, #32]
 800ef74:	4308      	orrs	r0, r1
 800ef76:	f47f aebc 	bne.w	800ecf2 <_strtod_l+0x72>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f47f aed4 	bne.w	800ed28 <_strtod_l+0xa8>
 800ef80:	2a69      	cmp	r2, #105	@ 0x69
 800ef82:	d028      	beq.n	800efd6 <_strtod_l+0x356>
 800ef84:	dc25      	bgt.n	800efd2 <_strtod_l+0x352>
 800ef86:	2a49      	cmp	r2, #73	@ 0x49
 800ef88:	d025      	beq.n	800efd6 <_strtod_l+0x356>
 800ef8a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ef8c:	f47f aecc 	bne.w	800ed28 <_strtod_l+0xa8>
 800ef90:	499a      	ldr	r1, [pc, #616]	@ (800f1fc <_strtod_l+0x57c>)
 800ef92:	a819      	add	r0, sp, #100	@ 0x64
 800ef94:	f001 fba4 	bl	80106e0 <__match>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	f43f aec5 	beq.w	800ed28 <_strtod_l+0xa8>
 800ef9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b28      	cmp	r3, #40	@ 0x28
 800efa4:	d12e      	bne.n	800f004 <_strtod_l+0x384>
 800efa6:	4996      	ldr	r1, [pc, #600]	@ (800f200 <_strtod_l+0x580>)
 800efa8:	aa1c      	add	r2, sp, #112	@ 0x70
 800efaa:	a819      	add	r0, sp, #100	@ 0x64
 800efac:	f001 fbac 	bl	8010708 <__hexnan>
 800efb0:	2805      	cmp	r0, #5
 800efb2:	d127      	bne.n	800f004 <_strtod_l+0x384>
 800efb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800efb6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800efba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800efbe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800efc2:	e696      	b.n	800ecf2 <_strtod_l+0x72>
 800efc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efc6:	fb08 2101 	mla	r1, r8, r1, r2
 800efca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800efce:	9209      	str	r2, [sp, #36]	@ 0x24
 800efd0:	e7b5      	b.n	800ef3e <_strtod_l+0x2be>
 800efd2:	2a6e      	cmp	r2, #110	@ 0x6e
 800efd4:	e7da      	b.n	800ef8c <_strtod_l+0x30c>
 800efd6:	498b      	ldr	r1, [pc, #556]	@ (800f204 <_strtod_l+0x584>)
 800efd8:	a819      	add	r0, sp, #100	@ 0x64
 800efda:	f001 fb81 	bl	80106e0 <__match>
 800efde:	2800      	cmp	r0, #0
 800efe0:	f43f aea2 	beq.w	800ed28 <_strtod_l+0xa8>
 800efe4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efe6:	4988      	ldr	r1, [pc, #544]	@ (800f208 <_strtod_l+0x588>)
 800efe8:	3b01      	subs	r3, #1
 800efea:	a819      	add	r0, sp, #100	@ 0x64
 800efec:	9319      	str	r3, [sp, #100]	@ 0x64
 800efee:	f001 fb77 	bl	80106e0 <__match>
 800eff2:	b910      	cbnz	r0, 800effa <_strtod_l+0x37a>
 800eff4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eff6:	3301      	adds	r3, #1
 800eff8:	9319      	str	r3, [sp, #100]	@ 0x64
 800effa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f218 <_strtod_l+0x598>
 800effe:	f04f 0a00 	mov.w	sl, #0
 800f002:	e676      	b.n	800ecf2 <_strtod_l+0x72>
 800f004:	4881      	ldr	r0, [pc, #516]	@ (800f20c <_strtod_l+0x58c>)
 800f006:	f001 f8a7 	bl	8010158 <nan>
 800f00a:	ec5b ab10 	vmov	sl, fp, d0
 800f00e:	e670      	b.n	800ecf2 <_strtod_l+0x72>
 800f010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f012:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f014:	eba8 0303 	sub.w	r3, r8, r3
 800f018:	f1b9 0f00 	cmp.w	r9, #0
 800f01c:	bf08      	it	eq
 800f01e:	46a9      	moveq	r9, r5
 800f020:	2d10      	cmp	r5, #16
 800f022:	9309      	str	r3, [sp, #36]	@ 0x24
 800f024:	462c      	mov	r4, r5
 800f026:	bfa8      	it	ge
 800f028:	2410      	movge	r4, #16
 800f02a:	f7f1 fa6b 	bl	8000504 <__aeabi_ui2d>
 800f02e:	2d09      	cmp	r5, #9
 800f030:	4682      	mov	sl, r0
 800f032:	468b      	mov	fp, r1
 800f034:	dc13      	bgt.n	800f05e <_strtod_l+0x3de>
 800f036:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f43f ae5a 	beq.w	800ecf2 <_strtod_l+0x72>
 800f03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f040:	dd78      	ble.n	800f134 <_strtod_l+0x4b4>
 800f042:	2b16      	cmp	r3, #22
 800f044:	dc5f      	bgt.n	800f106 <_strtod_l+0x486>
 800f046:	4972      	ldr	r1, [pc, #456]	@ (800f210 <_strtod_l+0x590>)
 800f048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f050:	4652      	mov	r2, sl
 800f052:	465b      	mov	r3, fp
 800f054:	f7f1 fad0 	bl	80005f8 <__aeabi_dmul>
 800f058:	4682      	mov	sl, r0
 800f05a:	468b      	mov	fp, r1
 800f05c:	e649      	b.n	800ecf2 <_strtod_l+0x72>
 800f05e:	4b6c      	ldr	r3, [pc, #432]	@ (800f210 <_strtod_l+0x590>)
 800f060:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f064:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f068:	f7f1 fac6 	bl	80005f8 <__aeabi_dmul>
 800f06c:	4682      	mov	sl, r0
 800f06e:	4638      	mov	r0, r7
 800f070:	468b      	mov	fp, r1
 800f072:	f7f1 fa47 	bl	8000504 <__aeabi_ui2d>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4650      	mov	r0, sl
 800f07c:	4659      	mov	r1, fp
 800f07e:	f7f1 f905 	bl	800028c <__adddf3>
 800f082:	2d0f      	cmp	r5, #15
 800f084:	4682      	mov	sl, r0
 800f086:	468b      	mov	fp, r1
 800f088:	ddd5      	ble.n	800f036 <_strtod_l+0x3b6>
 800f08a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f08c:	1b2c      	subs	r4, r5, r4
 800f08e:	441c      	add	r4, r3
 800f090:	2c00      	cmp	r4, #0
 800f092:	f340 8093 	ble.w	800f1bc <_strtod_l+0x53c>
 800f096:	f014 030f 	ands.w	r3, r4, #15
 800f09a:	d00a      	beq.n	800f0b2 <_strtod_l+0x432>
 800f09c:	495c      	ldr	r1, [pc, #368]	@ (800f210 <_strtod_l+0x590>)
 800f09e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	465b      	mov	r3, fp
 800f0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f0aa:	f7f1 faa5 	bl	80005f8 <__aeabi_dmul>
 800f0ae:	4682      	mov	sl, r0
 800f0b0:	468b      	mov	fp, r1
 800f0b2:	f034 040f 	bics.w	r4, r4, #15
 800f0b6:	d073      	beq.n	800f1a0 <_strtod_l+0x520>
 800f0b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f0bc:	dd49      	ble.n	800f152 <_strtod_l+0x4d2>
 800f0be:	2400      	movs	r4, #0
 800f0c0:	46a0      	mov	r8, r4
 800f0c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f0c4:	46a1      	mov	r9, r4
 800f0c6:	9a05      	ldr	r2, [sp, #20]
 800f0c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f218 <_strtod_l+0x598>
 800f0cc:	2322      	movs	r3, #34	@ 0x22
 800f0ce:	6013      	str	r3, [r2, #0]
 800f0d0:	f04f 0a00 	mov.w	sl, #0
 800f0d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f43f ae0b 	beq.w	800ecf2 <_strtod_l+0x72>
 800f0dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0de:	9805      	ldr	r0, [sp, #20]
 800f0e0:	f7ff f946 	bl	800e370 <_Bfree>
 800f0e4:	9805      	ldr	r0, [sp, #20]
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	f7ff f942 	bl	800e370 <_Bfree>
 800f0ec:	9805      	ldr	r0, [sp, #20]
 800f0ee:	4641      	mov	r1, r8
 800f0f0:	f7ff f93e 	bl	800e370 <_Bfree>
 800f0f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f0f6:	9805      	ldr	r0, [sp, #20]
 800f0f8:	f7ff f93a 	bl	800e370 <_Bfree>
 800f0fc:	9805      	ldr	r0, [sp, #20]
 800f0fe:	4621      	mov	r1, r4
 800f100:	f7ff f936 	bl	800e370 <_Bfree>
 800f104:	e5f5      	b.n	800ecf2 <_strtod_l+0x72>
 800f106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f108:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f10c:	4293      	cmp	r3, r2
 800f10e:	dbbc      	blt.n	800f08a <_strtod_l+0x40a>
 800f110:	4c3f      	ldr	r4, [pc, #252]	@ (800f210 <_strtod_l+0x590>)
 800f112:	f1c5 050f 	rsb	r5, r5, #15
 800f116:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f11a:	4652      	mov	r2, sl
 800f11c:	465b      	mov	r3, fp
 800f11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f122:	f7f1 fa69 	bl	80005f8 <__aeabi_dmul>
 800f126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f128:	1b5d      	subs	r5, r3, r5
 800f12a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f12e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f132:	e78f      	b.n	800f054 <_strtod_l+0x3d4>
 800f134:	3316      	adds	r3, #22
 800f136:	dba8      	blt.n	800f08a <_strtod_l+0x40a>
 800f138:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f13a:	eba3 0808 	sub.w	r8, r3, r8
 800f13e:	4b34      	ldr	r3, [pc, #208]	@ (800f210 <_strtod_l+0x590>)
 800f140:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f144:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f148:	4650      	mov	r0, sl
 800f14a:	4659      	mov	r1, fp
 800f14c:	f7f1 fb7e 	bl	800084c <__aeabi_ddiv>
 800f150:	e782      	b.n	800f058 <_strtod_l+0x3d8>
 800f152:	2300      	movs	r3, #0
 800f154:	4f2f      	ldr	r7, [pc, #188]	@ (800f214 <_strtod_l+0x594>)
 800f156:	1124      	asrs	r4, r4, #4
 800f158:	4650      	mov	r0, sl
 800f15a:	4659      	mov	r1, fp
 800f15c:	461e      	mov	r6, r3
 800f15e:	2c01      	cmp	r4, #1
 800f160:	dc21      	bgt.n	800f1a6 <_strtod_l+0x526>
 800f162:	b10b      	cbz	r3, 800f168 <_strtod_l+0x4e8>
 800f164:	4682      	mov	sl, r0
 800f166:	468b      	mov	fp, r1
 800f168:	492a      	ldr	r1, [pc, #168]	@ (800f214 <_strtod_l+0x594>)
 800f16a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f16e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f172:	4652      	mov	r2, sl
 800f174:	465b      	mov	r3, fp
 800f176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17a:	f7f1 fa3d 	bl	80005f8 <__aeabi_dmul>
 800f17e:	4b26      	ldr	r3, [pc, #152]	@ (800f218 <_strtod_l+0x598>)
 800f180:	460a      	mov	r2, r1
 800f182:	400b      	ands	r3, r1
 800f184:	4925      	ldr	r1, [pc, #148]	@ (800f21c <_strtod_l+0x59c>)
 800f186:	428b      	cmp	r3, r1
 800f188:	4682      	mov	sl, r0
 800f18a:	d898      	bhi.n	800f0be <_strtod_l+0x43e>
 800f18c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f190:	428b      	cmp	r3, r1
 800f192:	bf86      	itte	hi
 800f194:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f220 <_strtod_l+0x5a0>
 800f198:	f04f 3aff 	movhi.w	sl, #4294967295
 800f19c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	9308      	str	r3, [sp, #32]
 800f1a4:	e076      	b.n	800f294 <_strtod_l+0x614>
 800f1a6:	07e2      	lsls	r2, r4, #31
 800f1a8:	d504      	bpl.n	800f1b4 <_strtod_l+0x534>
 800f1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ae:	f7f1 fa23 	bl	80005f8 <__aeabi_dmul>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	3601      	adds	r6, #1
 800f1b6:	1064      	asrs	r4, r4, #1
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	e7d0      	b.n	800f15e <_strtod_l+0x4de>
 800f1bc:	d0f0      	beq.n	800f1a0 <_strtod_l+0x520>
 800f1be:	4264      	negs	r4, r4
 800f1c0:	f014 020f 	ands.w	r2, r4, #15
 800f1c4:	d00a      	beq.n	800f1dc <_strtod_l+0x55c>
 800f1c6:	4b12      	ldr	r3, [pc, #72]	@ (800f210 <_strtod_l+0x590>)
 800f1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1cc:	4650      	mov	r0, sl
 800f1ce:	4659      	mov	r1, fp
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	f7f1 fb3a 	bl	800084c <__aeabi_ddiv>
 800f1d8:	4682      	mov	sl, r0
 800f1da:	468b      	mov	fp, r1
 800f1dc:	1124      	asrs	r4, r4, #4
 800f1de:	d0df      	beq.n	800f1a0 <_strtod_l+0x520>
 800f1e0:	2c1f      	cmp	r4, #31
 800f1e2:	dd1f      	ble.n	800f224 <_strtod_l+0x5a4>
 800f1e4:	2400      	movs	r4, #0
 800f1e6:	46a0      	mov	r8, r4
 800f1e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1ea:	46a1      	mov	r9, r4
 800f1ec:	9a05      	ldr	r2, [sp, #20]
 800f1ee:	2322      	movs	r3, #34	@ 0x22
 800f1f0:	f04f 0a00 	mov.w	sl, #0
 800f1f4:	f04f 0b00 	mov.w	fp, #0
 800f1f8:	6013      	str	r3, [r2, #0]
 800f1fa:	e76b      	b.n	800f0d4 <_strtod_l+0x454>
 800f1fc:	080124d1 	.word	0x080124d1
 800f200:	08012798 	.word	0x08012798
 800f204:	080124c9 	.word	0x080124c9
 800f208:	08012500 	.word	0x08012500
 800f20c:	08012639 	.word	0x08012639
 800f210:	080126d0 	.word	0x080126d0
 800f214:	080126a8 	.word	0x080126a8
 800f218:	7ff00000 	.word	0x7ff00000
 800f21c:	7ca00000 	.word	0x7ca00000
 800f220:	7fefffff 	.word	0x7fefffff
 800f224:	f014 0310 	ands.w	r3, r4, #16
 800f228:	bf18      	it	ne
 800f22a:	236a      	movne	r3, #106	@ 0x6a
 800f22c:	4ea9      	ldr	r6, [pc, #676]	@ (800f4d4 <_strtod_l+0x854>)
 800f22e:	9308      	str	r3, [sp, #32]
 800f230:	4650      	mov	r0, sl
 800f232:	4659      	mov	r1, fp
 800f234:	2300      	movs	r3, #0
 800f236:	07e7      	lsls	r7, r4, #31
 800f238:	d504      	bpl.n	800f244 <_strtod_l+0x5c4>
 800f23a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f23e:	f7f1 f9db 	bl	80005f8 <__aeabi_dmul>
 800f242:	2301      	movs	r3, #1
 800f244:	1064      	asrs	r4, r4, #1
 800f246:	f106 0608 	add.w	r6, r6, #8
 800f24a:	d1f4      	bne.n	800f236 <_strtod_l+0x5b6>
 800f24c:	b10b      	cbz	r3, 800f252 <_strtod_l+0x5d2>
 800f24e:	4682      	mov	sl, r0
 800f250:	468b      	mov	fp, r1
 800f252:	9b08      	ldr	r3, [sp, #32]
 800f254:	b1b3      	cbz	r3, 800f284 <_strtod_l+0x604>
 800f256:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f25a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f25e:	2b00      	cmp	r3, #0
 800f260:	4659      	mov	r1, fp
 800f262:	dd0f      	ble.n	800f284 <_strtod_l+0x604>
 800f264:	2b1f      	cmp	r3, #31
 800f266:	dd56      	ble.n	800f316 <_strtod_l+0x696>
 800f268:	2b34      	cmp	r3, #52	@ 0x34
 800f26a:	bfde      	ittt	le
 800f26c:	f04f 33ff 	movle.w	r3, #4294967295
 800f270:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f274:	4093      	lslle	r3, r2
 800f276:	f04f 0a00 	mov.w	sl, #0
 800f27a:	bfcc      	ite	gt
 800f27c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f280:	ea03 0b01 	andle.w	fp, r3, r1
 800f284:	2200      	movs	r2, #0
 800f286:	2300      	movs	r3, #0
 800f288:	4650      	mov	r0, sl
 800f28a:	4659      	mov	r1, fp
 800f28c:	f7f1 fc1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f290:	2800      	cmp	r0, #0
 800f292:	d1a7      	bne.n	800f1e4 <_strtod_l+0x564>
 800f294:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f29a:	9805      	ldr	r0, [sp, #20]
 800f29c:	462b      	mov	r3, r5
 800f29e:	464a      	mov	r2, r9
 800f2a0:	f7ff f8ce 	bl	800e440 <__s2b>
 800f2a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	f43f af09 	beq.w	800f0be <_strtod_l+0x43e>
 800f2ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f2ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	eba3 0308 	sub.w	r3, r3, r8
 800f2b6:	bfa8      	it	ge
 800f2b8:	2300      	movge	r3, #0
 800f2ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f2bc:	2400      	movs	r4, #0
 800f2be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f2c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f2c4:	46a0      	mov	r8, r4
 800f2c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2c8:	9805      	ldr	r0, [sp, #20]
 800f2ca:	6859      	ldr	r1, [r3, #4]
 800f2cc:	f7ff f810 	bl	800e2f0 <_Balloc>
 800f2d0:	4681      	mov	r9, r0
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	f43f aef7 	beq.w	800f0c6 <_strtod_l+0x446>
 800f2d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2da:	691a      	ldr	r2, [r3, #16]
 800f2dc:	3202      	adds	r2, #2
 800f2de:	f103 010c 	add.w	r1, r3, #12
 800f2e2:	0092      	lsls	r2, r2, #2
 800f2e4:	300c      	adds	r0, #12
 800f2e6:	f7fe f894 	bl	800d412 <memcpy>
 800f2ea:	ec4b ab10 	vmov	d0, sl, fp
 800f2ee:	9805      	ldr	r0, [sp, #20]
 800f2f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800f2f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800f2f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f2f8:	f7ff fbd6 	bl	800eaa8 <__d2b>
 800f2fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f2fe:	2800      	cmp	r0, #0
 800f300:	f43f aee1 	beq.w	800f0c6 <_strtod_l+0x446>
 800f304:	9805      	ldr	r0, [sp, #20]
 800f306:	2101      	movs	r1, #1
 800f308:	f7ff f930 	bl	800e56c <__i2b>
 800f30c:	4680      	mov	r8, r0
 800f30e:	b948      	cbnz	r0, 800f324 <_strtod_l+0x6a4>
 800f310:	f04f 0800 	mov.w	r8, #0
 800f314:	e6d7      	b.n	800f0c6 <_strtod_l+0x446>
 800f316:	f04f 32ff 	mov.w	r2, #4294967295
 800f31a:	fa02 f303 	lsl.w	r3, r2, r3
 800f31e:	ea03 0a0a 	and.w	sl, r3, sl
 800f322:	e7af      	b.n	800f284 <_strtod_l+0x604>
 800f324:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f326:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f328:	2d00      	cmp	r5, #0
 800f32a:	bfab      	itete	ge
 800f32c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f32e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f330:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f332:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f334:	bfac      	ite	ge
 800f336:	18ef      	addge	r7, r5, r3
 800f338:	1b5e      	sublt	r6, r3, r5
 800f33a:	9b08      	ldr	r3, [sp, #32]
 800f33c:	1aed      	subs	r5, r5, r3
 800f33e:	4415      	add	r5, r2
 800f340:	4b65      	ldr	r3, [pc, #404]	@ (800f4d8 <_strtod_l+0x858>)
 800f342:	3d01      	subs	r5, #1
 800f344:	429d      	cmp	r5, r3
 800f346:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f34a:	da50      	bge.n	800f3ee <_strtod_l+0x76e>
 800f34c:	1b5b      	subs	r3, r3, r5
 800f34e:	2b1f      	cmp	r3, #31
 800f350:	eba2 0203 	sub.w	r2, r2, r3
 800f354:	f04f 0101 	mov.w	r1, #1
 800f358:	dc3d      	bgt.n	800f3d6 <_strtod_l+0x756>
 800f35a:	fa01 f303 	lsl.w	r3, r1, r3
 800f35e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f360:	2300      	movs	r3, #0
 800f362:	9310      	str	r3, [sp, #64]	@ 0x40
 800f364:	18bd      	adds	r5, r7, r2
 800f366:	9b08      	ldr	r3, [sp, #32]
 800f368:	42af      	cmp	r7, r5
 800f36a:	4416      	add	r6, r2
 800f36c:	441e      	add	r6, r3
 800f36e:	463b      	mov	r3, r7
 800f370:	bfa8      	it	ge
 800f372:	462b      	movge	r3, r5
 800f374:	42b3      	cmp	r3, r6
 800f376:	bfa8      	it	ge
 800f378:	4633      	movge	r3, r6
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	bfc2      	ittt	gt
 800f37e:	1aed      	subgt	r5, r5, r3
 800f380:	1af6      	subgt	r6, r6, r3
 800f382:	1aff      	subgt	r7, r7, r3
 800f384:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f386:	2b00      	cmp	r3, #0
 800f388:	dd16      	ble.n	800f3b8 <_strtod_l+0x738>
 800f38a:	4641      	mov	r1, r8
 800f38c:	9805      	ldr	r0, [sp, #20]
 800f38e:	461a      	mov	r2, r3
 800f390:	f7ff f9a4 	bl	800e6dc <__pow5mult>
 800f394:	4680      	mov	r8, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d0ba      	beq.n	800f310 <_strtod_l+0x690>
 800f39a:	4601      	mov	r1, r0
 800f39c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f39e:	9805      	ldr	r0, [sp, #20]
 800f3a0:	f7ff f8fa 	bl	800e598 <__multiply>
 800f3a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f43f ae8d 	beq.w	800f0c6 <_strtod_l+0x446>
 800f3ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3ae:	9805      	ldr	r0, [sp, #20]
 800f3b0:	f7fe ffde 	bl	800e370 <_Bfree>
 800f3b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3b8:	2d00      	cmp	r5, #0
 800f3ba:	dc1d      	bgt.n	800f3f8 <_strtod_l+0x778>
 800f3bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	dd23      	ble.n	800f40a <_strtod_l+0x78a>
 800f3c2:	4649      	mov	r1, r9
 800f3c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f3c6:	9805      	ldr	r0, [sp, #20]
 800f3c8:	f7ff f988 	bl	800e6dc <__pow5mult>
 800f3cc:	4681      	mov	r9, r0
 800f3ce:	b9e0      	cbnz	r0, 800f40a <_strtod_l+0x78a>
 800f3d0:	f04f 0900 	mov.w	r9, #0
 800f3d4:	e677      	b.n	800f0c6 <_strtod_l+0x446>
 800f3d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f3da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f3de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f3e2:	35e2      	adds	r5, #226	@ 0xe2
 800f3e4:	fa01 f305 	lsl.w	r3, r1, r5
 800f3e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f3ec:	e7ba      	b.n	800f364 <_strtod_l+0x6e4>
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3f6:	e7b5      	b.n	800f364 <_strtod_l+0x6e4>
 800f3f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f3fa:	9805      	ldr	r0, [sp, #20]
 800f3fc:	462a      	mov	r2, r5
 800f3fe:	f7ff f9c7 	bl	800e790 <__lshift>
 800f402:	901a      	str	r0, [sp, #104]	@ 0x68
 800f404:	2800      	cmp	r0, #0
 800f406:	d1d9      	bne.n	800f3bc <_strtod_l+0x73c>
 800f408:	e65d      	b.n	800f0c6 <_strtod_l+0x446>
 800f40a:	2e00      	cmp	r6, #0
 800f40c:	dd07      	ble.n	800f41e <_strtod_l+0x79e>
 800f40e:	4649      	mov	r1, r9
 800f410:	9805      	ldr	r0, [sp, #20]
 800f412:	4632      	mov	r2, r6
 800f414:	f7ff f9bc 	bl	800e790 <__lshift>
 800f418:	4681      	mov	r9, r0
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d0d8      	beq.n	800f3d0 <_strtod_l+0x750>
 800f41e:	2f00      	cmp	r7, #0
 800f420:	dd08      	ble.n	800f434 <_strtod_l+0x7b4>
 800f422:	4641      	mov	r1, r8
 800f424:	9805      	ldr	r0, [sp, #20]
 800f426:	463a      	mov	r2, r7
 800f428:	f7ff f9b2 	bl	800e790 <__lshift>
 800f42c:	4680      	mov	r8, r0
 800f42e:	2800      	cmp	r0, #0
 800f430:	f43f ae49 	beq.w	800f0c6 <_strtod_l+0x446>
 800f434:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f436:	9805      	ldr	r0, [sp, #20]
 800f438:	464a      	mov	r2, r9
 800f43a:	f7ff fa31 	bl	800e8a0 <__mdiff>
 800f43e:	4604      	mov	r4, r0
 800f440:	2800      	cmp	r0, #0
 800f442:	f43f ae40 	beq.w	800f0c6 <_strtod_l+0x446>
 800f446:	68c3      	ldr	r3, [r0, #12]
 800f448:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f44a:	2300      	movs	r3, #0
 800f44c:	60c3      	str	r3, [r0, #12]
 800f44e:	4641      	mov	r1, r8
 800f450:	f7ff fa0a 	bl	800e868 <__mcmp>
 800f454:	2800      	cmp	r0, #0
 800f456:	da45      	bge.n	800f4e4 <_strtod_l+0x864>
 800f458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f45a:	ea53 030a 	orrs.w	r3, r3, sl
 800f45e:	d16b      	bne.n	800f538 <_strtod_l+0x8b8>
 800f460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f464:	2b00      	cmp	r3, #0
 800f466:	d167      	bne.n	800f538 <_strtod_l+0x8b8>
 800f468:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f46c:	0d1b      	lsrs	r3, r3, #20
 800f46e:	051b      	lsls	r3, r3, #20
 800f470:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f474:	d960      	bls.n	800f538 <_strtod_l+0x8b8>
 800f476:	6963      	ldr	r3, [r4, #20]
 800f478:	b913      	cbnz	r3, 800f480 <_strtod_l+0x800>
 800f47a:	6923      	ldr	r3, [r4, #16]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	dd5b      	ble.n	800f538 <_strtod_l+0x8b8>
 800f480:	4621      	mov	r1, r4
 800f482:	2201      	movs	r2, #1
 800f484:	9805      	ldr	r0, [sp, #20]
 800f486:	f7ff f983 	bl	800e790 <__lshift>
 800f48a:	4641      	mov	r1, r8
 800f48c:	4604      	mov	r4, r0
 800f48e:	f7ff f9eb 	bl	800e868 <__mcmp>
 800f492:	2800      	cmp	r0, #0
 800f494:	dd50      	ble.n	800f538 <_strtod_l+0x8b8>
 800f496:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f49a:	9a08      	ldr	r2, [sp, #32]
 800f49c:	0d1b      	lsrs	r3, r3, #20
 800f49e:	051b      	lsls	r3, r3, #20
 800f4a0:	2a00      	cmp	r2, #0
 800f4a2:	d06a      	beq.n	800f57a <_strtod_l+0x8fa>
 800f4a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f4a8:	d867      	bhi.n	800f57a <_strtod_l+0x8fa>
 800f4aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f4ae:	f67f ae9d 	bls.w	800f1ec <_strtod_l+0x56c>
 800f4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f4dc <_strtod_l+0x85c>)
 800f4b4:	4650      	mov	r0, sl
 800f4b6:	4659      	mov	r1, fp
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f7f1 f89d 	bl	80005f8 <__aeabi_dmul>
 800f4be:	4b08      	ldr	r3, [pc, #32]	@ (800f4e0 <_strtod_l+0x860>)
 800f4c0:	400b      	ands	r3, r1
 800f4c2:	4682      	mov	sl, r0
 800f4c4:	468b      	mov	fp, r1
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	f47f ae08 	bne.w	800f0dc <_strtod_l+0x45c>
 800f4cc:	9a05      	ldr	r2, [sp, #20]
 800f4ce:	2322      	movs	r3, #34	@ 0x22
 800f4d0:	6013      	str	r3, [r2, #0]
 800f4d2:	e603      	b.n	800f0dc <_strtod_l+0x45c>
 800f4d4:	080127c0 	.word	0x080127c0
 800f4d8:	fffffc02 	.word	0xfffffc02
 800f4dc:	39500000 	.word	0x39500000
 800f4e0:	7ff00000 	.word	0x7ff00000
 800f4e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f4e8:	d165      	bne.n	800f5b6 <_strtod_l+0x936>
 800f4ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f4ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f4f0:	b35a      	cbz	r2, 800f54a <_strtod_l+0x8ca>
 800f4f2:	4a9f      	ldr	r2, [pc, #636]	@ (800f770 <_strtod_l+0xaf0>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d12b      	bne.n	800f550 <_strtod_l+0x8d0>
 800f4f8:	9b08      	ldr	r3, [sp, #32]
 800f4fa:	4651      	mov	r1, sl
 800f4fc:	b303      	cbz	r3, 800f540 <_strtod_l+0x8c0>
 800f4fe:	4b9d      	ldr	r3, [pc, #628]	@ (800f774 <_strtod_l+0xaf4>)
 800f500:	465a      	mov	r2, fp
 800f502:	4013      	ands	r3, r2
 800f504:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f508:	f04f 32ff 	mov.w	r2, #4294967295
 800f50c:	d81b      	bhi.n	800f546 <_strtod_l+0x8c6>
 800f50e:	0d1b      	lsrs	r3, r3, #20
 800f510:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f514:	fa02 f303 	lsl.w	r3, r2, r3
 800f518:	4299      	cmp	r1, r3
 800f51a:	d119      	bne.n	800f550 <_strtod_l+0x8d0>
 800f51c:	4b96      	ldr	r3, [pc, #600]	@ (800f778 <_strtod_l+0xaf8>)
 800f51e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f520:	429a      	cmp	r2, r3
 800f522:	d102      	bne.n	800f52a <_strtod_l+0x8aa>
 800f524:	3101      	adds	r1, #1
 800f526:	f43f adce 	beq.w	800f0c6 <_strtod_l+0x446>
 800f52a:	4b92      	ldr	r3, [pc, #584]	@ (800f774 <_strtod_l+0xaf4>)
 800f52c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f52e:	401a      	ands	r2, r3
 800f530:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f534:	f04f 0a00 	mov.w	sl, #0
 800f538:	9b08      	ldr	r3, [sp, #32]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1b9      	bne.n	800f4b2 <_strtod_l+0x832>
 800f53e:	e5cd      	b.n	800f0dc <_strtod_l+0x45c>
 800f540:	f04f 33ff 	mov.w	r3, #4294967295
 800f544:	e7e8      	b.n	800f518 <_strtod_l+0x898>
 800f546:	4613      	mov	r3, r2
 800f548:	e7e6      	b.n	800f518 <_strtod_l+0x898>
 800f54a:	ea53 030a 	orrs.w	r3, r3, sl
 800f54e:	d0a2      	beq.n	800f496 <_strtod_l+0x816>
 800f550:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f552:	b1db      	cbz	r3, 800f58c <_strtod_l+0x90c>
 800f554:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f556:	4213      	tst	r3, r2
 800f558:	d0ee      	beq.n	800f538 <_strtod_l+0x8b8>
 800f55a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f55c:	9a08      	ldr	r2, [sp, #32]
 800f55e:	4650      	mov	r0, sl
 800f560:	4659      	mov	r1, fp
 800f562:	b1bb      	cbz	r3, 800f594 <_strtod_l+0x914>
 800f564:	f7ff fb6e 	bl	800ec44 <sulp>
 800f568:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f56c:	ec53 2b10 	vmov	r2, r3, d0
 800f570:	f7f0 fe8c 	bl	800028c <__adddf3>
 800f574:	4682      	mov	sl, r0
 800f576:	468b      	mov	fp, r1
 800f578:	e7de      	b.n	800f538 <_strtod_l+0x8b8>
 800f57a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f57e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f582:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f586:	f04f 3aff 	mov.w	sl, #4294967295
 800f58a:	e7d5      	b.n	800f538 <_strtod_l+0x8b8>
 800f58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f58e:	ea13 0f0a 	tst.w	r3, sl
 800f592:	e7e1      	b.n	800f558 <_strtod_l+0x8d8>
 800f594:	f7ff fb56 	bl	800ec44 <sulp>
 800f598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f59c:	ec53 2b10 	vmov	r2, r3, d0
 800f5a0:	f7f0 fe72 	bl	8000288 <__aeabi_dsub>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4682      	mov	sl, r0
 800f5aa:	468b      	mov	fp, r1
 800f5ac:	f7f1 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d0c1      	beq.n	800f538 <_strtod_l+0x8b8>
 800f5b4:	e61a      	b.n	800f1ec <_strtod_l+0x56c>
 800f5b6:	4641      	mov	r1, r8
 800f5b8:	4620      	mov	r0, r4
 800f5ba:	f7ff facd 	bl	800eb58 <__ratio>
 800f5be:	ec57 6b10 	vmov	r6, r7, d0
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	4639      	mov	r1, r7
 800f5cc:	f7f1 fa90 	bl	8000af0 <__aeabi_dcmple>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d06f      	beq.n	800f6b4 <_strtod_l+0xa34>
 800f5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d17a      	bne.n	800f6d0 <_strtod_l+0xa50>
 800f5da:	f1ba 0f00 	cmp.w	sl, #0
 800f5de:	d158      	bne.n	800f692 <_strtod_l+0xa12>
 800f5e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d15a      	bne.n	800f6a0 <_strtod_l+0xa20>
 800f5ea:	4b64      	ldr	r3, [pc, #400]	@ (800f77c <_strtod_l+0xafc>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	4639      	mov	r1, r7
 800f5f2:	f7f1 fa73 	bl	8000adc <__aeabi_dcmplt>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d159      	bne.n	800f6ae <_strtod_l+0xa2e>
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	4639      	mov	r1, r7
 800f5fe:	4b60      	ldr	r3, [pc, #384]	@ (800f780 <_strtod_l+0xb00>)
 800f600:	2200      	movs	r2, #0
 800f602:	f7f0 fff9 	bl	80005f8 <__aeabi_dmul>
 800f606:	4606      	mov	r6, r0
 800f608:	460f      	mov	r7, r1
 800f60a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f60e:	9606      	str	r6, [sp, #24]
 800f610:	9307      	str	r3, [sp, #28]
 800f612:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f616:	4d57      	ldr	r5, [pc, #348]	@ (800f774 <_strtod_l+0xaf4>)
 800f618:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f61e:	401d      	ands	r5, r3
 800f620:	4b58      	ldr	r3, [pc, #352]	@ (800f784 <_strtod_l+0xb04>)
 800f622:	429d      	cmp	r5, r3
 800f624:	f040 80b2 	bne.w	800f78c <_strtod_l+0xb0c>
 800f628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f62a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f62e:	ec4b ab10 	vmov	d0, sl, fp
 800f632:	f7ff f9c9 	bl	800e9c8 <__ulp>
 800f636:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f63a:	ec51 0b10 	vmov	r0, r1, d0
 800f63e:	f7f0 ffdb 	bl	80005f8 <__aeabi_dmul>
 800f642:	4652      	mov	r2, sl
 800f644:	465b      	mov	r3, fp
 800f646:	f7f0 fe21 	bl	800028c <__adddf3>
 800f64a:	460b      	mov	r3, r1
 800f64c:	4949      	ldr	r1, [pc, #292]	@ (800f774 <_strtod_l+0xaf4>)
 800f64e:	4a4e      	ldr	r2, [pc, #312]	@ (800f788 <_strtod_l+0xb08>)
 800f650:	4019      	ands	r1, r3
 800f652:	4291      	cmp	r1, r2
 800f654:	4682      	mov	sl, r0
 800f656:	d942      	bls.n	800f6de <_strtod_l+0xa5e>
 800f658:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f65a:	4b47      	ldr	r3, [pc, #284]	@ (800f778 <_strtod_l+0xaf8>)
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d103      	bne.n	800f668 <_strtod_l+0x9e8>
 800f660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f662:	3301      	adds	r3, #1
 800f664:	f43f ad2f 	beq.w	800f0c6 <_strtod_l+0x446>
 800f668:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f778 <_strtod_l+0xaf8>
 800f66c:	f04f 3aff 	mov.w	sl, #4294967295
 800f670:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f672:	9805      	ldr	r0, [sp, #20]
 800f674:	f7fe fe7c 	bl	800e370 <_Bfree>
 800f678:	9805      	ldr	r0, [sp, #20]
 800f67a:	4649      	mov	r1, r9
 800f67c:	f7fe fe78 	bl	800e370 <_Bfree>
 800f680:	9805      	ldr	r0, [sp, #20]
 800f682:	4641      	mov	r1, r8
 800f684:	f7fe fe74 	bl	800e370 <_Bfree>
 800f688:	9805      	ldr	r0, [sp, #20]
 800f68a:	4621      	mov	r1, r4
 800f68c:	f7fe fe70 	bl	800e370 <_Bfree>
 800f690:	e619      	b.n	800f2c6 <_strtod_l+0x646>
 800f692:	f1ba 0f01 	cmp.w	sl, #1
 800f696:	d103      	bne.n	800f6a0 <_strtod_l+0xa20>
 800f698:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f43f ada6 	beq.w	800f1ec <_strtod_l+0x56c>
 800f6a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f750 <_strtod_l+0xad0>
 800f6a4:	4f35      	ldr	r7, [pc, #212]	@ (800f77c <_strtod_l+0xafc>)
 800f6a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6aa:	2600      	movs	r6, #0
 800f6ac:	e7b1      	b.n	800f612 <_strtod_l+0x992>
 800f6ae:	4f34      	ldr	r7, [pc, #208]	@ (800f780 <_strtod_l+0xb00>)
 800f6b0:	2600      	movs	r6, #0
 800f6b2:	e7aa      	b.n	800f60a <_strtod_l+0x98a>
 800f6b4:	4b32      	ldr	r3, [pc, #200]	@ (800f780 <_strtod_l+0xb00>)
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f7f0 ff9c 	bl	80005f8 <__aeabi_dmul>
 800f6c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6c2:	4606      	mov	r6, r0
 800f6c4:	460f      	mov	r7, r1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d09f      	beq.n	800f60a <_strtod_l+0x98a>
 800f6ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f6ce:	e7a0      	b.n	800f612 <_strtod_l+0x992>
 800f6d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f758 <_strtod_l+0xad8>
 800f6d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f6d8:	ec57 6b17 	vmov	r6, r7, d7
 800f6dc:	e799      	b.n	800f612 <_strtod_l+0x992>
 800f6de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f6e2:	9b08      	ldr	r3, [sp, #32]
 800f6e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1c1      	bne.n	800f670 <_strtod_l+0x9f0>
 800f6ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f6f0:	0d1b      	lsrs	r3, r3, #20
 800f6f2:	051b      	lsls	r3, r3, #20
 800f6f4:	429d      	cmp	r5, r3
 800f6f6:	d1bb      	bne.n	800f670 <_strtod_l+0x9f0>
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	f7f1 fadc 	bl	8000cb8 <__aeabi_d2lz>
 800f700:	f7f0 ff4c 	bl	800059c <__aeabi_l2d>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4630      	mov	r0, r6
 800f70a:	4639      	mov	r1, r7
 800f70c:	f7f0 fdbc 	bl	8000288 <__aeabi_dsub>
 800f710:	460b      	mov	r3, r1
 800f712:	4602      	mov	r2, r0
 800f714:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f718:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f71e:	ea46 060a 	orr.w	r6, r6, sl
 800f722:	431e      	orrs	r6, r3
 800f724:	d06f      	beq.n	800f806 <_strtod_l+0xb86>
 800f726:	a30e      	add	r3, pc, #56	@ (adr r3, 800f760 <_strtod_l+0xae0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f1 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800f730:	2800      	cmp	r0, #0
 800f732:	f47f acd3 	bne.w	800f0dc <_strtod_l+0x45c>
 800f736:	a30c      	add	r3, pc, #48	@ (adr r3, 800f768 <_strtod_l+0xae8>)
 800f738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f73c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f740:	f7f1 f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 800f744:	2800      	cmp	r0, #0
 800f746:	d093      	beq.n	800f670 <_strtod_l+0x9f0>
 800f748:	e4c8      	b.n	800f0dc <_strtod_l+0x45c>
 800f74a:	bf00      	nop
 800f74c:	f3af 8000 	nop.w
 800f750:	00000000 	.word	0x00000000
 800f754:	bff00000 	.word	0xbff00000
 800f758:	00000000 	.word	0x00000000
 800f75c:	3ff00000 	.word	0x3ff00000
 800f760:	94a03595 	.word	0x94a03595
 800f764:	3fdfffff 	.word	0x3fdfffff
 800f768:	35afe535 	.word	0x35afe535
 800f76c:	3fe00000 	.word	0x3fe00000
 800f770:	000fffff 	.word	0x000fffff
 800f774:	7ff00000 	.word	0x7ff00000
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	3ff00000 	.word	0x3ff00000
 800f780:	3fe00000 	.word	0x3fe00000
 800f784:	7fe00000 	.word	0x7fe00000
 800f788:	7c9fffff 	.word	0x7c9fffff
 800f78c:	9b08      	ldr	r3, [sp, #32]
 800f78e:	b323      	cbz	r3, 800f7da <_strtod_l+0xb5a>
 800f790:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f794:	d821      	bhi.n	800f7da <_strtod_l+0xb5a>
 800f796:	a328      	add	r3, pc, #160	@ (adr r3, 800f838 <_strtod_l+0xbb8>)
 800f798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f79c:	4630      	mov	r0, r6
 800f79e:	4639      	mov	r1, r7
 800f7a0:	f7f1 f9a6 	bl	8000af0 <__aeabi_dcmple>
 800f7a4:	b1a0      	cbz	r0, 800f7d0 <_strtod_l+0xb50>
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	f7f1 f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 800f7ae:	2801      	cmp	r0, #1
 800f7b0:	bf38      	it	cc
 800f7b2:	2001      	movcc	r0, #1
 800f7b4:	f7f0 fea6 	bl	8000504 <__aeabi_ui2d>
 800f7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	460f      	mov	r7, r1
 800f7be:	b9fb      	cbnz	r3, 800f800 <_strtod_l+0xb80>
 800f7c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f7c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f7c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f7cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f7d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f7d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f7d6:	1b5b      	subs	r3, r3, r5
 800f7d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f7da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f7de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f7e2:	f7ff f8f1 	bl	800e9c8 <__ulp>
 800f7e6:	4650      	mov	r0, sl
 800f7e8:	ec53 2b10 	vmov	r2, r3, d0
 800f7ec:	4659      	mov	r1, fp
 800f7ee:	f7f0 ff03 	bl	80005f8 <__aeabi_dmul>
 800f7f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f7f6:	f7f0 fd49 	bl	800028c <__adddf3>
 800f7fa:	4682      	mov	sl, r0
 800f7fc:	468b      	mov	fp, r1
 800f7fe:	e770      	b.n	800f6e2 <_strtod_l+0xa62>
 800f800:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f804:	e7e0      	b.n	800f7c8 <_strtod_l+0xb48>
 800f806:	a30e      	add	r3, pc, #56	@ (adr r3, 800f840 <_strtod_l+0xbc0>)
 800f808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80c:	f7f1 f966 	bl	8000adc <__aeabi_dcmplt>
 800f810:	e798      	b.n	800f744 <_strtod_l+0xac4>
 800f812:	2300      	movs	r3, #0
 800f814:	930e      	str	r3, [sp, #56]	@ 0x38
 800f816:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	f7ff ba6d 	b.w	800ecfa <_strtod_l+0x7a>
 800f820:	2a65      	cmp	r2, #101	@ 0x65
 800f822:	f43f ab68 	beq.w	800eef6 <_strtod_l+0x276>
 800f826:	2a45      	cmp	r2, #69	@ 0x45
 800f828:	f43f ab65 	beq.w	800eef6 <_strtod_l+0x276>
 800f82c:	2301      	movs	r3, #1
 800f82e:	f7ff bba0 	b.w	800ef72 <_strtod_l+0x2f2>
 800f832:	bf00      	nop
 800f834:	f3af 8000 	nop.w
 800f838:	ffc00000 	.word	0xffc00000
 800f83c:	41dfffff 	.word	0x41dfffff
 800f840:	94a03595 	.word	0x94a03595
 800f844:	3fcfffff 	.word	0x3fcfffff

0800f848 <_strtod_r>:
 800f848:	4b01      	ldr	r3, [pc, #4]	@ (800f850 <_strtod_r+0x8>)
 800f84a:	f7ff ba19 	b.w	800ec80 <_strtod_l>
 800f84e:	bf00      	nop
 800f850:	20000168 	.word	0x20000168

0800f854 <_strtol_l.isra.0>:
 800f854:	2b24      	cmp	r3, #36	@ 0x24
 800f856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f85a:	4686      	mov	lr, r0
 800f85c:	4690      	mov	r8, r2
 800f85e:	d801      	bhi.n	800f864 <_strtol_l.isra.0+0x10>
 800f860:	2b01      	cmp	r3, #1
 800f862:	d106      	bne.n	800f872 <_strtol_l.isra.0+0x1e>
 800f864:	f7fd fda8 	bl	800d3b8 <__errno>
 800f868:	2316      	movs	r3, #22
 800f86a:	6003      	str	r3, [r0, #0]
 800f86c:	2000      	movs	r0, #0
 800f86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f872:	4834      	ldr	r0, [pc, #208]	@ (800f944 <_strtol_l.isra.0+0xf0>)
 800f874:	460d      	mov	r5, r1
 800f876:	462a      	mov	r2, r5
 800f878:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f87c:	5d06      	ldrb	r6, [r0, r4]
 800f87e:	f016 0608 	ands.w	r6, r6, #8
 800f882:	d1f8      	bne.n	800f876 <_strtol_l.isra.0+0x22>
 800f884:	2c2d      	cmp	r4, #45	@ 0x2d
 800f886:	d110      	bne.n	800f8aa <_strtol_l.isra.0+0x56>
 800f888:	782c      	ldrb	r4, [r5, #0]
 800f88a:	2601      	movs	r6, #1
 800f88c:	1c95      	adds	r5, r2, #2
 800f88e:	f033 0210 	bics.w	r2, r3, #16
 800f892:	d115      	bne.n	800f8c0 <_strtol_l.isra.0+0x6c>
 800f894:	2c30      	cmp	r4, #48	@ 0x30
 800f896:	d10d      	bne.n	800f8b4 <_strtol_l.isra.0+0x60>
 800f898:	782a      	ldrb	r2, [r5, #0]
 800f89a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f89e:	2a58      	cmp	r2, #88	@ 0x58
 800f8a0:	d108      	bne.n	800f8b4 <_strtol_l.isra.0+0x60>
 800f8a2:	786c      	ldrb	r4, [r5, #1]
 800f8a4:	3502      	adds	r5, #2
 800f8a6:	2310      	movs	r3, #16
 800f8a8:	e00a      	b.n	800f8c0 <_strtol_l.isra.0+0x6c>
 800f8aa:	2c2b      	cmp	r4, #43	@ 0x2b
 800f8ac:	bf04      	itt	eq
 800f8ae:	782c      	ldrbeq	r4, [r5, #0]
 800f8b0:	1c95      	addeq	r5, r2, #2
 800f8b2:	e7ec      	b.n	800f88e <_strtol_l.isra.0+0x3a>
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1f6      	bne.n	800f8a6 <_strtol_l.isra.0+0x52>
 800f8b8:	2c30      	cmp	r4, #48	@ 0x30
 800f8ba:	bf14      	ite	ne
 800f8bc:	230a      	movne	r3, #10
 800f8be:	2308      	moveq	r3, #8
 800f8c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f8c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	fbbc f9f3 	udiv	r9, ip, r3
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f8d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f8d8:	2f09      	cmp	r7, #9
 800f8da:	d80f      	bhi.n	800f8fc <_strtol_l.isra.0+0xa8>
 800f8dc:	463c      	mov	r4, r7
 800f8de:	42a3      	cmp	r3, r4
 800f8e0:	dd1b      	ble.n	800f91a <_strtol_l.isra.0+0xc6>
 800f8e2:	1c57      	adds	r7, r2, #1
 800f8e4:	d007      	beq.n	800f8f6 <_strtol_l.isra.0+0xa2>
 800f8e6:	4581      	cmp	r9, r0
 800f8e8:	d314      	bcc.n	800f914 <_strtol_l.isra.0+0xc0>
 800f8ea:	d101      	bne.n	800f8f0 <_strtol_l.isra.0+0x9c>
 800f8ec:	45a2      	cmp	sl, r4
 800f8ee:	db11      	blt.n	800f914 <_strtol_l.isra.0+0xc0>
 800f8f0:	fb00 4003 	mla	r0, r0, r3, r4
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8fa:	e7eb      	b.n	800f8d4 <_strtol_l.isra.0+0x80>
 800f8fc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f900:	2f19      	cmp	r7, #25
 800f902:	d801      	bhi.n	800f908 <_strtol_l.isra.0+0xb4>
 800f904:	3c37      	subs	r4, #55	@ 0x37
 800f906:	e7ea      	b.n	800f8de <_strtol_l.isra.0+0x8a>
 800f908:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f90c:	2f19      	cmp	r7, #25
 800f90e:	d804      	bhi.n	800f91a <_strtol_l.isra.0+0xc6>
 800f910:	3c57      	subs	r4, #87	@ 0x57
 800f912:	e7e4      	b.n	800f8de <_strtol_l.isra.0+0x8a>
 800f914:	f04f 32ff 	mov.w	r2, #4294967295
 800f918:	e7ed      	b.n	800f8f6 <_strtol_l.isra.0+0xa2>
 800f91a:	1c53      	adds	r3, r2, #1
 800f91c:	d108      	bne.n	800f930 <_strtol_l.isra.0+0xdc>
 800f91e:	2322      	movs	r3, #34	@ 0x22
 800f920:	f8ce 3000 	str.w	r3, [lr]
 800f924:	4660      	mov	r0, ip
 800f926:	f1b8 0f00 	cmp.w	r8, #0
 800f92a:	d0a0      	beq.n	800f86e <_strtol_l.isra.0+0x1a>
 800f92c:	1e69      	subs	r1, r5, #1
 800f92e:	e006      	b.n	800f93e <_strtol_l.isra.0+0xea>
 800f930:	b106      	cbz	r6, 800f934 <_strtol_l.isra.0+0xe0>
 800f932:	4240      	negs	r0, r0
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	d099      	beq.n	800f86e <_strtol_l.isra.0+0x1a>
 800f93a:	2a00      	cmp	r2, #0
 800f93c:	d1f6      	bne.n	800f92c <_strtol_l.isra.0+0xd8>
 800f93e:	f8c8 1000 	str.w	r1, [r8]
 800f942:	e794      	b.n	800f86e <_strtol_l.isra.0+0x1a>
 800f944:	080127e9 	.word	0x080127e9

0800f948 <_strtol_r>:
 800f948:	f7ff bf84 	b.w	800f854 <_strtol_l.isra.0>

0800f94c <__ssputs_r>:
 800f94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f950:	688e      	ldr	r6, [r1, #8]
 800f952:	461f      	mov	r7, r3
 800f954:	42be      	cmp	r6, r7
 800f956:	680b      	ldr	r3, [r1, #0]
 800f958:	4682      	mov	sl, r0
 800f95a:	460c      	mov	r4, r1
 800f95c:	4690      	mov	r8, r2
 800f95e:	d82d      	bhi.n	800f9bc <__ssputs_r+0x70>
 800f960:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f964:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f968:	d026      	beq.n	800f9b8 <__ssputs_r+0x6c>
 800f96a:	6965      	ldr	r5, [r4, #20]
 800f96c:	6909      	ldr	r1, [r1, #16]
 800f96e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f972:	eba3 0901 	sub.w	r9, r3, r1
 800f976:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f97a:	1c7b      	adds	r3, r7, #1
 800f97c:	444b      	add	r3, r9
 800f97e:	106d      	asrs	r5, r5, #1
 800f980:	429d      	cmp	r5, r3
 800f982:	bf38      	it	cc
 800f984:	461d      	movcc	r5, r3
 800f986:	0553      	lsls	r3, r2, #21
 800f988:	d527      	bpl.n	800f9da <__ssputs_r+0x8e>
 800f98a:	4629      	mov	r1, r5
 800f98c:	f7fe fc24 	bl	800e1d8 <_malloc_r>
 800f990:	4606      	mov	r6, r0
 800f992:	b360      	cbz	r0, 800f9ee <__ssputs_r+0xa2>
 800f994:	6921      	ldr	r1, [r4, #16]
 800f996:	464a      	mov	r2, r9
 800f998:	f7fd fd3b 	bl	800d412 <memcpy>
 800f99c:	89a3      	ldrh	r3, [r4, #12]
 800f99e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9a6:	81a3      	strh	r3, [r4, #12]
 800f9a8:	6126      	str	r6, [r4, #16]
 800f9aa:	6165      	str	r5, [r4, #20]
 800f9ac:	444e      	add	r6, r9
 800f9ae:	eba5 0509 	sub.w	r5, r5, r9
 800f9b2:	6026      	str	r6, [r4, #0]
 800f9b4:	60a5      	str	r5, [r4, #8]
 800f9b6:	463e      	mov	r6, r7
 800f9b8:	42be      	cmp	r6, r7
 800f9ba:	d900      	bls.n	800f9be <__ssputs_r+0x72>
 800f9bc:	463e      	mov	r6, r7
 800f9be:	6820      	ldr	r0, [r4, #0]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	4641      	mov	r1, r8
 800f9c4:	f000 fb6a 	bl	801009c <memmove>
 800f9c8:	68a3      	ldr	r3, [r4, #8]
 800f9ca:	1b9b      	subs	r3, r3, r6
 800f9cc:	60a3      	str	r3, [r4, #8]
 800f9ce:	6823      	ldr	r3, [r4, #0]
 800f9d0:	4433      	add	r3, r6
 800f9d2:	6023      	str	r3, [r4, #0]
 800f9d4:	2000      	movs	r0, #0
 800f9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9da:	462a      	mov	r2, r5
 800f9dc:	f000 ff41 	bl	8010862 <_realloc_r>
 800f9e0:	4606      	mov	r6, r0
 800f9e2:	2800      	cmp	r0, #0
 800f9e4:	d1e0      	bne.n	800f9a8 <__ssputs_r+0x5c>
 800f9e6:	6921      	ldr	r1, [r4, #16]
 800f9e8:	4650      	mov	r0, sl
 800f9ea:	f7fe fb81 	bl	800e0f0 <_free_r>
 800f9ee:	230c      	movs	r3, #12
 800f9f0:	f8ca 3000 	str.w	r3, [sl]
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9fa:	81a3      	strh	r3, [r4, #12]
 800f9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800fa00:	e7e9      	b.n	800f9d6 <__ssputs_r+0x8a>
	...

0800fa04 <_svfiprintf_r>:
 800fa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa08:	4698      	mov	r8, r3
 800fa0a:	898b      	ldrh	r3, [r1, #12]
 800fa0c:	061b      	lsls	r3, r3, #24
 800fa0e:	b09d      	sub	sp, #116	@ 0x74
 800fa10:	4607      	mov	r7, r0
 800fa12:	460d      	mov	r5, r1
 800fa14:	4614      	mov	r4, r2
 800fa16:	d510      	bpl.n	800fa3a <_svfiprintf_r+0x36>
 800fa18:	690b      	ldr	r3, [r1, #16]
 800fa1a:	b973      	cbnz	r3, 800fa3a <_svfiprintf_r+0x36>
 800fa1c:	2140      	movs	r1, #64	@ 0x40
 800fa1e:	f7fe fbdb 	bl	800e1d8 <_malloc_r>
 800fa22:	6028      	str	r0, [r5, #0]
 800fa24:	6128      	str	r0, [r5, #16]
 800fa26:	b930      	cbnz	r0, 800fa36 <_svfiprintf_r+0x32>
 800fa28:	230c      	movs	r3, #12
 800fa2a:	603b      	str	r3, [r7, #0]
 800fa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa30:	b01d      	add	sp, #116	@ 0x74
 800fa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa36:	2340      	movs	r3, #64	@ 0x40
 800fa38:	616b      	str	r3, [r5, #20]
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa3e:	2320      	movs	r3, #32
 800fa40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa48:	2330      	movs	r3, #48	@ 0x30
 800fa4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fbe8 <_svfiprintf_r+0x1e4>
 800fa4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa52:	f04f 0901 	mov.w	r9, #1
 800fa56:	4623      	mov	r3, r4
 800fa58:	469a      	mov	sl, r3
 800fa5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa5e:	b10a      	cbz	r2, 800fa64 <_svfiprintf_r+0x60>
 800fa60:	2a25      	cmp	r2, #37	@ 0x25
 800fa62:	d1f9      	bne.n	800fa58 <_svfiprintf_r+0x54>
 800fa64:	ebba 0b04 	subs.w	fp, sl, r4
 800fa68:	d00b      	beq.n	800fa82 <_svfiprintf_r+0x7e>
 800fa6a:	465b      	mov	r3, fp
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	4629      	mov	r1, r5
 800fa70:	4638      	mov	r0, r7
 800fa72:	f7ff ff6b 	bl	800f94c <__ssputs_r>
 800fa76:	3001      	adds	r0, #1
 800fa78:	f000 80a7 	beq.w	800fbca <_svfiprintf_r+0x1c6>
 800fa7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa7e:	445a      	add	r2, fp
 800fa80:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa82:	f89a 3000 	ldrb.w	r3, [sl]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	f000 809f 	beq.w	800fbca <_svfiprintf_r+0x1c6>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa96:	f10a 0a01 	add.w	sl, sl, #1
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	9307      	str	r3, [sp, #28]
 800fa9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800faa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800faa4:	4654      	mov	r4, sl
 800faa6:	2205      	movs	r2, #5
 800faa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faac:	484e      	ldr	r0, [pc, #312]	@ (800fbe8 <_svfiprintf_r+0x1e4>)
 800faae:	f7f0 fb8f 	bl	80001d0 <memchr>
 800fab2:	9a04      	ldr	r2, [sp, #16]
 800fab4:	b9d8      	cbnz	r0, 800faee <_svfiprintf_r+0xea>
 800fab6:	06d0      	lsls	r0, r2, #27
 800fab8:	bf44      	itt	mi
 800faba:	2320      	movmi	r3, #32
 800fabc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fac0:	0711      	lsls	r1, r2, #28
 800fac2:	bf44      	itt	mi
 800fac4:	232b      	movmi	r3, #43	@ 0x2b
 800fac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faca:	f89a 3000 	ldrb.w	r3, [sl]
 800face:	2b2a      	cmp	r3, #42	@ 0x2a
 800fad0:	d015      	beq.n	800fafe <_svfiprintf_r+0xfa>
 800fad2:	9a07      	ldr	r2, [sp, #28]
 800fad4:	4654      	mov	r4, sl
 800fad6:	2000      	movs	r0, #0
 800fad8:	f04f 0c0a 	mov.w	ip, #10
 800fadc:	4621      	mov	r1, r4
 800fade:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fae2:	3b30      	subs	r3, #48	@ 0x30
 800fae4:	2b09      	cmp	r3, #9
 800fae6:	d94b      	bls.n	800fb80 <_svfiprintf_r+0x17c>
 800fae8:	b1b0      	cbz	r0, 800fb18 <_svfiprintf_r+0x114>
 800faea:	9207      	str	r2, [sp, #28]
 800faec:	e014      	b.n	800fb18 <_svfiprintf_r+0x114>
 800faee:	eba0 0308 	sub.w	r3, r0, r8
 800faf2:	fa09 f303 	lsl.w	r3, r9, r3
 800faf6:	4313      	orrs	r3, r2
 800faf8:	9304      	str	r3, [sp, #16]
 800fafa:	46a2      	mov	sl, r4
 800fafc:	e7d2      	b.n	800faa4 <_svfiprintf_r+0xa0>
 800fafe:	9b03      	ldr	r3, [sp, #12]
 800fb00:	1d19      	adds	r1, r3, #4
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	9103      	str	r1, [sp, #12]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bfbb      	ittet	lt
 800fb0a:	425b      	neglt	r3, r3
 800fb0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fb10:	9307      	strge	r3, [sp, #28]
 800fb12:	9307      	strlt	r3, [sp, #28]
 800fb14:	bfb8      	it	lt
 800fb16:	9204      	strlt	r2, [sp, #16]
 800fb18:	7823      	ldrb	r3, [r4, #0]
 800fb1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb1c:	d10a      	bne.n	800fb34 <_svfiprintf_r+0x130>
 800fb1e:	7863      	ldrb	r3, [r4, #1]
 800fb20:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb22:	d132      	bne.n	800fb8a <_svfiprintf_r+0x186>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9203      	str	r2, [sp, #12]
 800fb2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb30:	3402      	adds	r4, #2
 800fb32:	9305      	str	r3, [sp, #20]
 800fb34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fbf8 <_svfiprintf_r+0x1f4>
 800fb38:	7821      	ldrb	r1, [r4, #0]
 800fb3a:	2203      	movs	r2, #3
 800fb3c:	4650      	mov	r0, sl
 800fb3e:	f7f0 fb47 	bl	80001d0 <memchr>
 800fb42:	b138      	cbz	r0, 800fb54 <_svfiprintf_r+0x150>
 800fb44:	9b04      	ldr	r3, [sp, #16]
 800fb46:	eba0 000a 	sub.w	r0, r0, sl
 800fb4a:	2240      	movs	r2, #64	@ 0x40
 800fb4c:	4082      	lsls	r2, r0
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	3401      	adds	r4, #1
 800fb52:	9304      	str	r3, [sp, #16]
 800fb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb58:	4824      	ldr	r0, [pc, #144]	@ (800fbec <_svfiprintf_r+0x1e8>)
 800fb5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb5e:	2206      	movs	r2, #6
 800fb60:	f7f0 fb36 	bl	80001d0 <memchr>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	d036      	beq.n	800fbd6 <_svfiprintf_r+0x1d2>
 800fb68:	4b21      	ldr	r3, [pc, #132]	@ (800fbf0 <_svfiprintf_r+0x1ec>)
 800fb6a:	bb1b      	cbnz	r3, 800fbb4 <_svfiprintf_r+0x1b0>
 800fb6c:	9b03      	ldr	r3, [sp, #12]
 800fb6e:	3307      	adds	r3, #7
 800fb70:	f023 0307 	bic.w	r3, r3, #7
 800fb74:	3308      	adds	r3, #8
 800fb76:	9303      	str	r3, [sp, #12]
 800fb78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb7a:	4433      	add	r3, r6
 800fb7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb7e:	e76a      	b.n	800fa56 <_svfiprintf_r+0x52>
 800fb80:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb84:	460c      	mov	r4, r1
 800fb86:	2001      	movs	r0, #1
 800fb88:	e7a8      	b.n	800fadc <_svfiprintf_r+0xd8>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	3401      	adds	r4, #1
 800fb8e:	9305      	str	r3, [sp, #20]
 800fb90:	4619      	mov	r1, r3
 800fb92:	f04f 0c0a 	mov.w	ip, #10
 800fb96:	4620      	mov	r0, r4
 800fb98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb9c:	3a30      	subs	r2, #48	@ 0x30
 800fb9e:	2a09      	cmp	r2, #9
 800fba0:	d903      	bls.n	800fbaa <_svfiprintf_r+0x1a6>
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0c6      	beq.n	800fb34 <_svfiprintf_r+0x130>
 800fba6:	9105      	str	r1, [sp, #20]
 800fba8:	e7c4      	b.n	800fb34 <_svfiprintf_r+0x130>
 800fbaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbae:	4604      	mov	r4, r0
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e7f0      	b.n	800fb96 <_svfiprintf_r+0x192>
 800fbb4:	ab03      	add	r3, sp, #12
 800fbb6:	9300      	str	r3, [sp, #0]
 800fbb8:	462a      	mov	r2, r5
 800fbba:	4b0e      	ldr	r3, [pc, #56]	@ (800fbf4 <_svfiprintf_r+0x1f0>)
 800fbbc:	a904      	add	r1, sp, #16
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	f7fc fbb8 	bl	800c334 <_printf_float>
 800fbc4:	1c42      	adds	r2, r0, #1
 800fbc6:	4606      	mov	r6, r0
 800fbc8:	d1d6      	bne.n	800fb78 <_svfiprintf_r+0x174>
 800fbca:	89ab      	ldrh	r3, [r5, #12]
 800fbcc:	065b      	lsls	r3, r3, #25
 800fbce:	f53f af2d 	bmi.w	800fa2c <_svfiprintf_r+0x28>
 800fbd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbd4:	e72c      	b.n	800fa30 <_svfiprintf_r+0x2c>
 800fbd6:	ab03      	add	r3, sp, #12
 800fbd8:	9300      	str	r3, [sp, #0]
 800fbda:	462a      	mov	r2, r5
 800fbdc:	4b05      	ldr	r3, [pc, #20]	@ (800fbf4 <_svfiprintf_r+0x1f0>)
 800fbde:	a904      	add	r1, sp, #16
 800fbe0:	4638      	mov	r0, r7
 800fbe2:	f7fc fe3f 	bl	800c864 <_printf_i>
 800fbe6:	e7ed      	b.n	800fbc4 <_svfiprintf_r+0x1c0>
 800fbe8:	080125e5 	.word	0x080125e5
 800fbec:	080125ef 	.word	0x080125ef
 800fbf0:	0800c335 	.word	0x0800c335
 800fbf4:	0800f94d 	.word	0x0800f94d
 800fbf8:	080125eb 	.word	0x080125eb

0800fbfc <__sfputc_r>:
 800fbfc:	6893      	ldr	r3, [r2, #8]
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	b410      	push	{r4}
 800fc04:	6093      	str	r3, [r2, #8]
 800fc06:	da08      	bge.n	800fc1a <__sfputc_r+0x1e>
 800fc08:	6994      	ldr	r4, [r2, #24]
 800fc0a:	42a3      	cmp	r3, r4
 800fc0c:	db01      	blt.n	800fc12 <__sfputc_r+0x16>
 800fc0e:	290a      	cmp	r1, #10
 800fc10:	d103      	bne.n	800fc1a <__sfputc_r+0x1e>
 800fc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc16:	f7fd bae8 	b.w	800d1ea <__swbuf_r>
 800fc1a:	6813      	ldr	r3, [r2, #0]
 800fc1c:	1c58      	adds	r0, r3, #1
 800fc1e:	6010      	str	r0, [r2, #0]
 800fc20:	7019      	strb	r1, [r3, #0]
 800fc22:	4608      	mov	r0, r1
 800fc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc28:	4770      	bx	lr

0800fc2a <__sfputs_r>:
 800fc2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	460f      	mov	r7, r1
 800fc30:	4614      	mov	r4, r2
 800fc32:	18d5      	adds	r5, r2, r3
 800fc34:	42ac      	cmp	r4, r5
 800fc36:	d101      	bne.n	800fc3c <__sfputs_r+0x12>
 800fc38:	2000      	movs	r0, #0
 800fc3a:	e007      	b.n	800fc4c <__sfputs_r+0x22>
 800fc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc40:	463a      	mov	r2, r7
 800fc42:	4630      	mov	r0, r6
 800fc44:	f7ff ffda 	bl	800fbfc <__sfputc_r>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d1f3      	bne.n	800fc34 <__sfputs_r+0xa>
 800fc4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc50 <_vfiprintf_r>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	460d      	mov	r5, r1
 800fc56:	b09d      	sub	sp, #116	@ 0x74
 800fc58:	4614      	mov	r4, r2
 800fc5a:	4698      	mov	r8, r3
 800fc5c:	4606      	mov	r6, r0
 800fc5e:	b118      	cbz	r0, 800fc68 <_vfiprintf_r+0x18>
 800fc60:	6a03      	ldr	r3, [r0, #32]
 800fc62:	b90b      	cbnz	r3, 800fc68 <_vfiprintf_r+0x18>
 800fc64:	f7fd f9b6 	bl	800cfd4 <__sinit>
 800fc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc6a:	07d9      	lsls	r1, r3, #31
 800fc6c:	d405      	bmi.n	800fc7a <_vfiprintf_r+0x2a>
 800fc6e:	89ab      	ldrh	r3, [r5, #12]
 800fc70:	059a      	lsls	r2, r3, #22
 800fc72:	d402      	bmi.n	800fc7a <_vfiprintf_r+0x2a>
 800fc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc76:	f7fd fbca 	bl	800d40e <__retarget_lock_acquire_recursive>
 800fc7a:	89ab      	ldrh	r3, [r5, #12]
 800fc7c:	071b      	lsls	r3, r3, #28
 800fc7e:	d501      	bpl.n	800fc84 <_vfiprintf_r+0x34>
 800fc80:	692b      	ldr	r3, [r5, #16]
 800fc82:	b99b      	cbnz	r3, 800fcac <_vfiprintf_r+0x5c>
 800fc84:	4629      	mov	r1, r5
 800fc86:	4630      	mov	r0, r6
 800fc88:	f7fd faee 	bl	800d268 <__swsetup_r>
 800fc8c:	b170      	cbz	r0, 800fcac <_vfiprintf_r+0x5c>
 800fc8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc90:	07dc      	lsls	r4, r3, #31
 800fc92:	d504      	bpl.n	800fc9e <_vfiprintf_r+0x4e>
 800fc94:	f04f 30ff 	mov.w	r0, #4294967295
 800fc98:	b01d      	add	sp, #116	@ 0x74
 800fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9e:	89ab      	ldrh	r3, [r5, #12]
 800fca0:	0598      	lsls	r0, r3, #22
 800fca2:	d4f7      	bmi.n	800fc94 <_vfiprintf_r+0x44>
 800fca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fca6:	f7fd fbb3 	bl	800d410 <__retarget_lock_release_recursive>
 800fcaa:	e7f3      	b.n	800fc94 <_vfiprintf_r+0x44>
 800fcac:	2300      	movs	r3, #0
 800fcae:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcb0:	2320      	movs	r3, #32
 800fcb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcba:	2330      	movs	r3, #48	@ 0x30
 800fcbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe6c <_vfiprintf_r+0x21c>
 800fcc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcc4:	f04f 0901 	mov.w	r9, #1
 800fcc8:	4623      	mov	r3, r4
 800fcca:	469a      	mov	sl, r3
 800fccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcd0:	b10a      	cbz	r2, 800fcd6 <_vfiprintf_r+0x86>
 800fcd2:	2a25      	cmp	r2, #37	@ 0x25
 800fcd4:	d1f9      	bne.n	800fcca <_vfiprintf_r+0x7a>
 800fcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800fcda:	d00b      	beq.n	800fcf4 <_vfiprintf_r+0xa4>
 800fcdc:	465b      	mov	r3, fp
 800fcde:	4622      	mov	r2, r4
 800fce0:	4629      	mov	r1, r5
 800fce2:	4630      	mov	r0, r6
 800fce4:	f7ff ffa1 	bl	800fc2a <__sfputs_r>
 800fce8:	3001      	adds	r0, #1
 800fcea:	f000 80a7 	beq.w	800fe3c <_vfiprintf_r+0x1ec>
 800fcee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fcf0:	445a      	add	r2, fp
 800fcf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800fcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	f000 809f 	beq.w	800fe3c <_vfiprintf_r+0x1ec>
 800fcfe:	2300      	movs	r3, #0
 800fd00:	f04f 32ff 	mov.w	r2, #4294967295
 800fd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd08:	f10a 0a01 	add.w	sl, sl, #1
 800fd0c:	9304      	str	r3, [sp, #16]
 800fd0e:	9307      	str	r3, [sp, #28]
 800fd10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd14:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd16:	4654      	mov	r4, sl
 800fd18:	2205      	movs	r2, #5
 800fd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd1e:	4853      	ldr	r0, [pc, #332]	@ (800fe6c <_vfiprintf_r+0x21c>)
 800fd20:	f7f0 fa56 	bl	80001d0 <memchr>
 800fd24:	9a04      	ldr	r2, [sp, #16]
 800fd26:	b9d8      	cbnz	r0, 800fd60 <_vfiprintf_r+0x110>
 800fd28:	06d1      	lsls	r1, r2, #27
 800fd2a:	bf44      	itt	mi
 800fd2c:	2320      	movmi	r3, #32
 800fd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd32:	0713      	lsls	r3, r2, #28
 800fd34:	bf44      	itt	mi
 800fd36:	232b      	movmi	r3, #43	@ 0x2b
 800fd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800fd40:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd42:	d015      	beq.n	800fd70 <_vfiprintf_r+0x120>
 800fd44:	9a07      	ldr	r2, [sp, #28]
 800fd46:	4654      	mov	r4, sl
 800fd48:	2000      	movs	r0, #0
 800fd4a:	f04f 0c0a 	mov.w	ip, #10
 800fd4e:	4621      	mov	r1, r4
 800fd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd54:	3b30      	subs	r3, #48	@ 0x30
 800fd56:	2b09      	cmp	r3, #9
 800fd58:	d94b      	bls.n	800fdf2 <_vfiprintf_r+0x1a2>
 800fd5a:	b1b0      	cbz	r0, 800fd8a <_vfiprintf_r+0x13a>
 800fd5c:	9207      	str	r2, [sp, #28]
 800fd5e:	e014      	b.n	800fd8a <_vfiprintf_r+0x13a>
 800fd60:	eba0 0308 	sub.w	r3, r0, r8
 800fd64:	fa09 f303 	lsl.w	r3, r9, r3
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	9304      	str	r3, [sp, #16]
 800fd6c:	46a2      	mov	sl, r4
 800fd6e:	e7d2      	b.n	800fd16 <_vfiprintf_r+0xc6>
 800fd70:	9b03      	ldr	r3, [sp, #12]
 800fd72:	1d19      	adds	r1, r3, #4
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	9103      	str	r1, [sp, #12]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	bfbb      	ittet	lt
 800fd7c:	425b      	neglt	r3, r3
 800fd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800fd82:	9307      	strge	r3, [sp, #28]
 800fd84:	9307      	strlt	r3, [sp, #28]
 800fd86:	bfb8      	it	lt
 800fd88:	9204      	strlt	r2, [sp, #16]
 800fd8a:	7823      	ldrb	r3, [r4, #0]
 800fd8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd8e:	d10a      	bne.n	800fda6 <_vfiprintf_r+0x156>
 800fd90:	7863      	ldrb	r3, [r4, #1]
 800fd92:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd94:	d132      	bne.n	800fdfc <_vfiprintf_r+0x1ac>
 800fd96:	9b03      	ldr	r3, [sp, #12]
 800fd98:	1d1a      	adds	r2, r3, #4
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	9203      	str	r2, [sp, #12]
 800fd9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fda2:	3402      	adds	r4, #2
 800fda4:	9305      	str	r3, [sp, #20]
 800fda6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe7c <_vfiprintf_r+0x22c>
 800fdaa:	7821      	ldrb	r1, [r4, #0]
 800fdac:	2203      	movs	r2, #3
 800fdae:	4650      	mov	r0, sl
 800fdb0:	f7f0 fa0e 	bl	80001d0 <memchr>
 800fdb4:	b138      	cbz	r0, 800fdc6 <_vfiprintf_r+0x176>
 800fdb6:	9b04      	ldr	r3, [sp, #16]
 800fdb8:	eba0 000a 	sub.w	r0, r0, sl
 800fdbc:	2240      	movs	r2, #64	@ 0x40
 800fdbe:	4082      	lsls	r2, r0
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	3401      	adds	r4, #1
 800fdc4:	9304      	str	r3, [sp, #16]
 800fdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdca:	4829      	ldr	r0, [pc, #164]	@ (800fe70 <_vfiprintf_r+0x220>)
 800fdcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fdd0:	2206      	movs	r2, #6
 800fdd2:	f7f0 f9fd 	bl	80001d0 <memchr>
 800fdd6:	2800      	cmp	r0, #0
 800fdd8:	d03f      	beq.n	800fe5a <_vfiprintf_r+0x20a>
 800fdda:	4b26      	ldr	r3, [pc, #152]	@ (800fe74 <_vfiprintf_r+0x224>)
 800fddc:	bb1b      	cbnz	r3, 800fe26 <_vfiprintf_r+0x1d6>
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	3307      	adds	r3, #7
 800fde2:	f023 0307 	bic.w	r3, r3, #7
 800fde6:	3308      	adds	r3, #8
 800fde8:	9303      	str	r3, [sp, #12]
 800fdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fdec:	443b      	add	r3, r7
 800fdee:	9309      	str	r3, [sp, #36]	@ 0x24
 800fdf0:	e76a      	b.n	800fcc8 <_vfiprintf_r+0x78>
 800fdf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	2001      	movs	r0, #1
 800fdfa:	e7a8      	b.n	800fd4e <_vfiprintf_r+0xfe>
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	3401      	adds	r4, #1
 800fe00:	9305      	str	r3, [sp, #20]
 800fe02:	4619      	mov	r1, r3
 800fe04:	f04f 0c0a 	mov.w	ip, #10
 800fe08:	4620      	mov	r0, r4
 800fe0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe0e:	3a30      	subs	r2, #48	@ 0x30
 800fe10:	2a09      	cmp	r2, #9
 800fe12:	d903      	bls.n	800fe1c <_vfiprintf_r+0x1cc>
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d0c6      	beq.n	800fda6 <_vfiprintf_r+0x156>
 800fe18:	9105      	str	r1, [sp, #20]
 800fe1a:	e7c4      	b.n	800fda6 <_vfiprintf_r+0x156>
 800fe1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe20:	4604      	mov	r4, r0
 800fe22:	2301      	movs	r3, #1
 800fe24:	e7f0      	b.n	800fe08 <_vfiprintf_r+0x1b8>
 800fe26:	ab03      	add	r3, sp, #12
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	462a      	mov	r2, r5
 800fe2c:	4b12      	ldr	r3, [pc, #72]	@ (800fe78 <_vfiprintf_r+0x228>)
 800fe2e:	a904      	add	r1, sp, #16
 800fe30:	4630      	mov	r0, r6
 800fe32:	f7fc fa7f 	bl	800c334 <_printf_float>
 800fe36:	4607      	mov	r7, r0
 800fe38:	1c78      	adds	r0, r7, #1
 800fe3a:	d1d6      	bne.n	800fdea <_vfiprintf_r+0x19a>
 800fe3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe3e:	07d9      	lsls	r1, r3, #31
 800fe40:	d405      	bmi.n	800fe4e <_vfiprintf_r+0x1fe>
 800fe42:	89ab      	ldrh	r3, [r5, #12]
 800fe44:	059a      	lsls	r2, r3, #22
 800fe46:	d402      	bmi.n	800fe4e <_vfiprintf_r+0x1fe>
 800fe48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe4a:	f7fd fae1 	bl	800d410 <__retarget_lock_release_recursive>
 800fe4e:	89ab      	ldrh	r3, [r5, #12]
 800fe50:	065b      	lsls	r3, r3, #25
 800fe52:	f53f af1f 	bmi.w	800fc94 <_vfiprintf_r+0x44>
 800fe56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe58:	e71e      	b.n	800fc98 <_vfiprintf_r+0x48>
 800fe5a:	ab03      	add	r3, sp, #12
 800fe5c:	9300      	str	r3, [sp, #0]
 800fe5e:	462a      	mov	r2, r5
 800fe60:	4b05      	ldr	r3, [pc, #20]	@ (800fe78 <_vfiprintf_r+0x228>)
 800fe62:	a904      	add	r1, sp, #16
 800fe64:	4630      	mov	r0, r6
 800fe66:	f7fc fcfd 	bl	800c864 <_printf_i>
 800fe6a:	e7e4      	b.n	800fe36 <_vfiprintf_r+0x1e6>
 800fe6c:	080125e5 	.word	0x080125e5
 800fe70:	080125ef 	.word	0x080125ef
 800fe74:	0800c335 	.word	0x0800c335
 800fe78:	0800fc2b 	.word	0x0800fc2b
 800fe7c:	080125eb 	.word	0x080125eb

0800fe80 <__sflush_r>:
 800fe80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	0716      	lsls	r6, r2, #28
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	d454      	bmi.n	800ff3a <__sflush_r+0xba>
 800fe90:	684b      	ldr	r3, [r1, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dc02      	bgt.n	800fe9c <__sflush_r+0x1c>
 800fe96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dd48      	ble.n	800ff2e <__sflush_r+0xae>
 800fe9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe9e:	2e00      	cmp	r6, #0
 800fea0:	d045      	beq.n	800ff2e <__sflush_r+0xae>
 800fea2:	2300      	movs	r3, #0
 800fea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fea8:	682f      	ldr	r7, [r5, #0]
 800feaa:	6a21      	ldr	r1, [r4, #32]
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	d030      	beq.n	800ff12 <__sflush_r+0x92>
 800feb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	0759      	lsls	r1, r3, #29
 800feb6:	d505      	bpl.n	800fec4 <__sflush_r+0x44>
 800feb8:	6863      	ldr	r3, [r4, #4]
 800feba:	1ad2      	subs	r2, r2, r3
 800febc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800febe:	b10b      	cbz	r3, 800fec4 <__sflush_r+0x44>
 800fec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fec2:	1ad2      	subs	r2, r2, r3
 800fec4:	2300      	movs	r3, #0
 800fec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fec8:	6a21      	ldr	r1, [r4, #32]
 800feca:	4628      	mov	r0, r5
 800fecc:	47b0      	blx	r6
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	d106      	bne.n	800fee2 <__sflush_r+0x62>
 800fed4:	6829      	ldr	r1, [r5, #0]
 800fed6:	291d      	cmp	r1, #29
 800fed8:	d82b      	bhi.n	800ff32 <__sflush_r+0xb2>
 800feda:	4a2a      	ldr	r2, [pc, #168]	@ (800ff84 <__sflush_r+0x104>)
 800fedc:	40ca      	lsrs	r2, r1
 800fede:	07d6      	lsls	r6, r2, #31
 800fee0:	d527      	bpl.n	800ff32 <__sflush_r+0xb2>
 800fee2:	2200      	movs	r2, #0
 800fee4:	6062      	str	r2, [r4, #4]
 800fee6:	04d9      	lsls	r1, r3, #19
 800fee8:	6922      	ldr	r2, [r4, #16]
 800feea:	6022      	str	r2, [r4, #0]
 800feec:	d504      	bpl.n	800fef8 <__sflush_r+0x78>
 800feee:	1c42      	adds	r2, r0, #1
 800fef0:	d101      	bne.n	800fef6 <__sflush_r+0x76>
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	b903      	cbnz	r3, 800fef8 <__sflush_r+0x78>
 800fef6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fefa:	602f      	str	r7, [r5, #0]
 800fefc:	b1b9      	cbz	r1, 800ff2e <__sflush_r+0xae>
 800fefe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff02:	4299      	cmp	r1, r3
 800ff04:	d002      	beq.n	800ff0c <__sflush_r+0x8c>
 800ff06:	4628      	mov	r0, r5
 800ff08:	f7fe f8f2 	bl	800e0f0 <_free_r>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff10:	e00d      	b.n	800ff2e <__sflush_r+0xae>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4628      	mov	r0, r5
 800ff16:	47b0      	blx	r6
 800ff18:	4602      	mov	r2, r0
 800ff1a:	1c50      	adds	r0, r2, #1
 800ff1c:	d1c9      	bne.n	800feb2 <__sflush_r+0x32>
 800ff1e:	682b      	ldr	r3, [r5, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0c6      	beq.n	800feb2 <__sflush_r+0x32>
 800ff24:	2b1d      	cmp	r3, #29
 800ff26:	d001      	beq.n	800ff2c <__sflush_r+0xac>
 800ff28:	2b16      	cmp	r3, #22
 800ff2a:	d11e      	bne.n	800ff6a <__sflush_r+0xea>
 800ff2c:	602f      	str	r7, [r5, #0]
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e022      	b.n	800ff78 <__sflush_r+0xf8>
 800ff32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	e01b      	b.n	800ff72 <__sflush_r+0xf2>
 800ff3a:	690f      	ldr	r7, [r1, #16]
 800ff3c:	2f00      	cmp	r7, #0
 800ff3e:	d0f6      	beq.n	800ff2e <__sflush_r+0xae>
 800ff40:	0793      	lsls	r3, r2, #30
 800ff42:	680e      	ldr	r6, [r1, #0]
 800ff44:	bf08      	it	eq
 800ff46:	694b      	ldreq	r3, [r1, #20]
 800ff48:	600f      	str	r7, [r1, #0]
 800ff4a:	bf18      	it	ne
 800ff4c:	2300      	movne	r3, #0
 800ff4e:	eba6 0807 	sub.w	r8, r6, r7
 800ff52:	608b      	str	r3, [r1, #8]
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	dde9      	ble.n	800ff2e <__sflush_r+0xae>
 800ff5a:	6a21      	ldr	r1, [r4, #32]
 800ff5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff5e:	4643      	mov	r3, r8
 800ff60:	463a      	mov	r2, r7
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b0      	blx	r6
 800ff66:	2800      	cmp	r0, #0
 800ff68:	dc08      	bgt.n	800ff7c <__sflush_r+0xfc>
 800ff6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7c:	4407      	add	r7, r0
 800ff7e:	eba8 0800 	sub.w	r8, r8, r0
 800ff82:	e7e7      	b.n	800ff54 <__sflush_r+0xd4>
 800ff84:	20400001 	.word	0x20400001

0800ff88 <_fflush_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	690b      	ldr	r3, [r1, #16]
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	b913      	cbnz	r3, 800ff98 <_fflush_r+0x10>
 800ff92:	2500      	movs	r5, #0
 800ff94:	4628      	mov	r0, r5
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	b118      	cbz	r0, 800ffa2 <_fflush_r+0x1a>
 800ff9a:	6a03      	ldr	r3, [r0, #32]
 800ff9c:	b90b      	cbnz	r3, 800ffa2 <_fflush_r+0x1a>
 800ff9e:	f7fd f819 	bl	800cfd4 <__sinit>
 800ffa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0f3      	beq.n	800ff92 <_fflush_r+0xa>
 800ffaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffac:	07d0      	lsls	r0, r2, #31
 800ffae:	d404      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb0:	0599      	lsls	r1, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffb6:	f7fd fa2a 	bl	800d40e <__retarget_lock_acquire_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f7ff ff5f 	bl	800fe80 <__sflush_r>
 800ffc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffc4:	07da      	lsls	r2, r3, #31
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	d4e4      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	d4e1      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffd2:	f7fd fa1d 	bl	800d410 <__retarget_lock_release_recursive>
 800ffd6:	e7dd      	b.n	800ff94 <_fflush_r+0xc>

0800ffd8 <__swhatbuf_r>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	460c      	mov	r4, r1
 800ffdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffe0:	2900      	cmp	r1, #0
 800ffe2:	b096      	sub	sp, #88	@ 0x58
 800ffe4:	4615      	mov	r5, r2
 800ffe6:	461e      	mov	r6, r3
 800ffe8:	da0d      	bge.n	8010006 <__swhatbuf_r+0x2e>
 800ffea:	89a3      	ldrh	r3, [r4, #12]
 800ffec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fff0:	f04f 0100 	mov.w	r1, #0
 800fff4:	bf14      	ite	ne
 800fff6:	2340      	movne	r3, #64	@ 0x40
 800fff8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fffc:	2000      	movs	r0, #0
 800fffe:	6031      	str	r1, [r6, #0]
 8010000:	602b      	str	r3, [r5, #0]
 8010002:	b016      	add	sp, #88	@ 0x58
 8010004:	bd70      	pop	{r4, r5, r6, pc}
 8010006:	466a      	mov	r2, sp
 8010008:	f000 f874 	bl	80100f4 <_fstat_r>
 801000c:	2800      	cmp	r0, #0
 801000e:	dbec      	blt.n	800ffea <__swhatbuf_r+0x12>
 8010010:	9901      	ldr	r1, [sp, #4]
 8010012:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010016:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801001a:	4259      	negs	r1, r3
 801001c:	4159      	adcs	r1, r3
 801001e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010022:	e7eb      	b.n	800fffc <__swhatbuf_r+0x24>

08010024 <__smakebuf_r>:
 8010024:	898b      	ldrh	r3, [r1, #12]
 8010026:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010028:	079d      	lsls	r5, r3, #30
 801002a:	4606      	mov	r6, r0
 801002c:	460c      	mov	r4, r1
 801002e:	d507      	bpl.n	8010040 <__smakebuf_r+0x1c>
 8010030:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010034:	6023      	str	r3, [r4, #0]
 8010036:	6123      	str	r3, [r4, #16]
 8010038:	2301      	movs	r3, #1
 801003a:	6163      	str	r3, [r4, #20]
 801003c:	b003      	add	sp, #12
 801003e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010040:	ab01      	add	r3, sp, #4
 8010042:	466a      	mov	r2, sp
 8010044:	f7ff ffc8 	bl	800ffd8 <__swhatbuf_r>
 8010048:	9f00      	ldr	r7, [sp, #0]
 801004a:	4605      	mov	r5, r0
 801004c:	4639      	mov	r1, r7
 801004e:	4630      	mov	r0, r6
 8010050:	f7fe f8c2 	bl	800e1d8 <_malloc_r>
 8010054:	b948      	cbnz	r0, 801006a <__smakebuf_r+0x46>
 8010056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801005a:	059a      	lsls	r2, r3, #22
 801005c:	d4ee      	bmi.n	801003c <__smakebuf_r+0x18>
 801005e:	f023 0303 	bic.w	r3, r3, #3
 8010062:	f043 0302 	orr.w	r3, r3, #2
 8010066:	81a3      	strh	r3, [r4, #12]
 8010068:	e7e2      	b.n	8010030 <__smakebuf_r+0xc>
 801006a:	89a3      	ldrh	r3, [r4, #12]
 801006c:	6020      	str	r0, [r4, #0]
 801006e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010072:	81a3      	strh	r3, [r4, #12]
 8010074:	9b01      	ldr	r3, [sp, #4]
 8010076:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801007a:	b15b      	cbz	r3, 8010094 <__smakebuf_r+0x70>
 801007c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010080:	4630      	mov	r0, r6
 8010082:	f000 f849 	bl	8010118 <_isatty_r>
 8010086:	b128      	cbz	r0, 8010094 <__smakebuf_r+0x70>
 8010088:	89a3      	ldrh	r3, [r4, #12]
 801008a:	f023 0303 	bic.w	r3, r3, #3
 801008e:	f043 0301 	orr.w	r3, r3, #1
 8010092:	81a3      	strh	r3, [r4, #12]
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	431d      	orrs	r5, r3
 8010098:	81a5      	strh	r5, [r4, #12]
 801009a:	e7cf      	b.n	801003c <__smakebuf_r+0x18>

0801009c <memmove>:
 801009c:	4288      	cmp	r0, r1
 801009e:	b510      	push	{r4, lr}
 80100a0:	eb01 0402 	add.w	r4, r1, r2
 80100a4:	d902      	bls.n	80100ac <memmove+0x10>
 80100a6:	4284      	cmp	r4, r0
 80100a8:	4623      	mov	r3, r4
 80100aa:	d807      	bhi.n	80100bc <memmove+0x20>
 80100ac:	1e43      	subs	r3, r0, #1
 80100ae:	42a1      	cmp	r1, r4
 80100b0:	d008      	beq.n	80100c4 <memmove+0x28>
 80100b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100ba:	e7f8      	b.n	80100ae <memmove+0x12>
 80100bc:	4402      	add	r2, r0
 80100be:	4601      	mov	r1, r0
 80100c0:	428a      	cmp	r2, r1
 80100c2:	d100      	bne.n	80100c6 <memmove+0x2a>
 80100c4:	bd10      	pop	{r4, pc}
 80100c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80100ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80100ce:	e7f7      	b.n	80100c0 <memmove+0x24>

080100d0 <strncmp>:
 80100d0:	b510      	push	{r4, lr}
 80100d2:	b16a      	cbz	r2, 80100f0 <strncmp+0x20>
 80100d4:	3901      	subs	r1, #1
 80100d6:	1884      	adds	r4, r0, r2
 80100d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d103      	bne.n	80100ec <strncmp+0x1c>
 80100e4:	42a0      	cmp	r0, r4
 80100e6:	d001      	beq.n	80100ec <strncmp+0x1c>
 80100e8:	2a00      	cmp	r2, #0
 80100ea:	d1f5      	bne.n	80100d8 <strncmp+0x8>
 80100ec:	1ad0      	subs	r0, r2, r3
 80100ee:	bd10      	pop	{r4, pc}
 80100f0:	4610      	mov	r0, r2
 80100f2:	e7fc      	b.n	80100ee <strncmp+0x1e>

080100f4 <_fstat_r>:
 80100f4:	b538      	push	{r3, r4, r5, lr}
 80100f6:	4d07      	ldr	r5, [pc, #28]	@ (8010114 <_fstat_r+0x20>)
 80100f8:	2300      	movs	r3, #0
 80100fa:	4604      	mov	r4, r0
 80100fc:	4608      	mov	r0, r1
 80100fe:	4611      	mov	r1, r2
 8010100:	602b      	str	r3, [r5, #0]
 8010102:	f7f1 fb97 	bl	8001834 <_fstat>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d102      	bne.n	8010110 <_fstat_r+0x1c>
 801010a:	682b      	ldr	r3, [r5, #0]
 801010c:	b103      	cbz	r3, 8010110 <_fstat_r+0x1c>
 801010e:	6023      	str	r3, [r4, #0]
 8010110:	bd38      	pop	{r3, r4, r5, pc}
 8010112:	bf00      	nop
 8010114:	20002230 	.word	0x20002230

08010118 <_isatty_r>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	4d06      	ldr	r5, [pc, #24]	@ (8010134 <_isatty_r+0x1c>)
 801011c:	2300      	movs	r3, #0
 801011e:	4604      	mov	r4, r0
 8010120:	4608      	mov	r0, r1
 8010122:	602b      	str	r3, [r5, #0]
 8010124:	f7f1 fb96 	bl	8001854 <_isatty>
 8010128:	1c43      	adds	r3, r0, #1
 801012a:	d102      	bne.n	8010132 <_isatty_r+0x1a>
 801012c:	682b      	ldr	r3, [r5, #0]
 801012e:	b103      	cbz	r3, 8010132 <_isatty_r+0x1a>
 8010130:	6023      	str	r3, [r4, #0]
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	20002230 	.word	0x20002230

08010138 <_sbrk_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d06      	ldr	r5, [pc, #24]	@ (8010154 <_sbrk_r+0x1c>)
 801013c:	2300      	movs	r3, #0
 801013e:	4604      	mov	r4, r0
 8010140:	4608      	mov	r0, r1
 8010142:	602b      	str	r3, [r5, #0]
 8010144:	f002 f80c 	bl	8012160 <_sbrk>
 8010148:	1c43      	adds	r3, r0, #1
 801014a:	d102      	bne.n	8010152 <_sbrk_r+0x1a>
 801014c:	682b      	ldr	r3, [r5, #0]
 801014e:	b103      	cbz	r3, 8010152 <_sbrk_r+0x1a>
 8010150:	6023      	str	r3, [r4, #0]
 8010152:	bd38      	pop	{r3, r4, r5, pc}
 8010154:	20002230 	.word	0x20002230

08010158 <nan>:
 8010158:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010160 <nan+0x8>
 801015c:	4770      	bx	lr
 801015e:	bf00      	nop
 8010160:	00000000 	.word	0x00000000
 8010164:	7ff80000 	.word	0x7ff80000

08010168 <__assert_func>:
 8010168:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801016a:	4614      	mov	r4, r2
 801016c:	461a      	mov	r2, r3
 801016e:	4b09      	ldr	r3, [pc, #36]	@ (8010194 <__assert_func+0x2c>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4605      	mov	r5, r0
 8010174:	68d8      	ldr	r0, [r3, #12]
 8010176:	b14c      	cbz	r4, 801018c <__assert_func+0x24>
 8010178:	4b07      	ldr	r3, [pc, #28]	@ (8010198 <__assert_func+0x30>)
 801017a:	9100      	str	r1, [sp, #0]
 801017c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010180:	4906      	ldr	r1, [pc, #24]	@ (801019c <__assert_func+0x34>)
 8010182:	462b      	mov	r3, r5
 8010184:	f000 fba8 	bl	80108d8 <fiprintf>
 8010188:	f000 fbb8 	bl	80108fc <abort>
 801018c:	4b04      	ldr	r3, [pc, #16]	@ (80101a0 <__assert_func+0x38>)
 801018e:	461c      	mov	r4, r3
 8010190:	e7f3      	b.n	801017a <__assert_func+0x12>
 8010192:	bf00      	nop
 8010194:	20000118 	.word	0x20000118
 8010198:	080125fe 	.word	0x080125fe
 801019c:	0801260b 	.word	0x0801260b
 80101a0:	08012639 	.word	0x08012639

080101a4 <_calloc_r>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	fba1 5402 	umull	r5, r4, r1, r2
 80101aa:	b934      	cbnz	r4, 80101ba <_calloc_r+0x16>
 80101ac:	4629      	mov	r1, r5
 80101ae:	f7fe f813 	bl	800e1d8 <_malloc_r>
 80101b2:	4606      	mov	r6, r0
 80101b4:	b928      	cbnz	r0, 80101c2 <_calloc_r+0x1e>
 80101b6:	4630      	mov	r0, r6
 80101b8:	bd70      	pop	{r4, r5, r6, pc}
 80101ba:	220c      	movs	r2, #12
 80101bc:	6002      	str	r2, [r0, #0]
 80101be:	2600      	movs	r6, #0
 80101c0:	e7f9      	b.n	80101b6 <_calloc_r+0x12>
 80101c2:	462a      	mov	r2, r5
 80101c4:	4621      	mov	r1, r4
 80101c6:	f7fd f8a5 	bl	800d314 <memset>
 80101ca:	e7f4      	b.n	80101b6 <_calloc_r+0x12>

080101cc <rshift>:
 80101cc:	6903      	ldr	r3, [r0, #16]
 80101ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80101d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80101da:	f100 0414 	add.w	r4, r0, #20
 80101de:	dd45      	ble.n	801026c <rshift+0xa0>
 80101e0:	f011 011f 	ands.w	r1, r1, #31
 80101e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80101e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80101ec:	d10c      	bne.n	8010208 <rshift+0x3c>
 80101ee:	f100 0710 	add.w	r7, r0, #16
 80101f2:	4629      	mov	r1, r5
 80101f4:	42b1      	cmp	r1, r6
 80101f6:	d334      	bcc.n	8010262 <rshift+0x96>
 80101f8:	1a9b      	subs	r3, r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	1eea      	subs	r2, r5, #3
 80101fe:	4296      	cmp	r6, r2
 8010200:	bf38      	it	cc
 8010202:	2300      	movcc	r3, #0
 8010204:	4423      	add	r3, r4
 8010206:	e015      	b.n	8010234 <rshift+0x68>
 8010208:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801020c:	f1c1 0820 	rsb	r8, r1, #32
 8010210:	40cf      	lsrs	r7, r1
 8010212:	f105 0e04 	add.w	lr, r5, #4
 8010216:	46a1      	mov	r9, r4
 8010218:	4576      	cmp	r6, lr
 801021a:	46f4      	mov	ip, lr
 801021c:	d815      	bhi.n	801024a <rshift+0x7e>
 801021e:	1a9a      	subs	r2, r3, r2
 8010220:	0092      	lsls	r2, r2, #2
 8010222:	3a04      	subs	r2, #4
 8010224:	3501      	adds	r5, #1
 8010226:	42ae      	cmp	r6, r5
 8010228:	bf38      	it	cc
 801022a:	2200      	movcc	r2, #0
 801022c:	18a3      	adds	r3, r4, r2
 801022e:	50a7      	str	r7, [r4, r2]
 8010230:	b107      	cbz	r7, 8010234 <rshift+0x68>
 8010232:	3304      	adds	r3, #4
 8010234:	1b1a      	subs	r2, r3, r4
 8010236:	42a3      	cmp	r3, r4
 8010238:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801023c:	bf08      	it	eq
 801023e:	2300      	moveq	r3, #0
 8010240:	6102      	str	r2, [r0, #16]
 8010242:	bf08      	it	eq
 8010244:	6143      	streq	r3, [r0, #20]
 8010246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801024a:	f8dc c000 	ldr.w	ip, [ip]
 801024e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010252:	ea4c 0707 	orr.w	r7, ip, r7
 8010256:	f849 7b04 	str.w	r7, [r9], #4
 801025a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801025e:	40cf      	lsrs	r7, r1
 8010260:	e7da      	b.n	8010218 <rshift+0x4c>
 8010262:	f851 cb04 	ldr.w	ip, [r1], #4
 8010266:	f847 cf04 	str.w	ip, [r7, #4]!
 801026a:	e7c3      	b.n	80101f4 <rshift+0x28>
 801026c:	4623      	mov	r3, r4
 801026e:	e7e1      	b.n	8010234 <rshift+0x68>

08010270 <__hexdig_fun>:
 8010270:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010274:	2b09      	cmp	r3, #9
 8010276:	d802      	bhi.n	801027e <__hexdig_fun+0xe>
 8010278:	3820      	subs	r0, #32
 801027a:	b2c0      	uxtb	r0, r0
 801027c:	4770      	bx	lr
 801027e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010282:	2b05      	cmp	r3, #5
 8010284:	d801      	bhi.n	801028a <__hexdig_fun+0x1a>
 8010286:	3847      	subs	r0, #71	@ 0x47
 8010288:	e7f7      	b.n	801027a <__hexdig_fun+0xa>
 801028a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801028e:	2b05      	cmp	r3, #5
 8010290:	d801      	bhi.n	8010296 <__hexdig_fun+0x26>
 8010292:	3827      	subs	r0, #39	@ 0x27
 8010294:	e7f1      	b.n	801027a <__hexdig_fun+0xa>
 8010296:	2000      	movs	r0, #0
 8010298:	4770      	bx	lr
	...

0801029c <__gethex>:
 801029c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102a0:	b085      	sub	sp, #20
 80102a2:	468a      	mov	sl, r1
 80102a4:	9302      	str	r3, [sp, #8]
 80102a6:	680b      	ldr	r3, [r1, #0]
 80102a8:	9001      	str	r0, [sp, #4]
 80102aa:	4690      	mov	r8, r2
 80102ac:	1c9c      	adds	r4, r3, #2
 80102ae:	46a1      	mov	r9, r4
 80102b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80102b4:	2830      	cmp	r0, #48	@ 0x30
 80102b6:	d0fa      	beq.n	80102ae <__gethex+0x12>
 80102b8:	eba9 0303 	sub.w	r3, r9, r3
 80102bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80102c0:	f7ff ffd6 	bl	8010270 <__hexdig_fun>
 80102c4:	4605      	mov	r5, r0
 80102c6:	2800      	cmp	r0, #0
 80102c8:	d168      	bne.n	801039c <__gethex+0x100>
 80102ca:	49a0      	ldr	r1, [pc, #640]	@ (801054c <__gethex+0x2b0>)
 80102cc:	2201      	movs	r2, #1
 80102ce:	4648      	mov	r0, r9
 80102d0:	f7ff fefe 	bl	80100d0 <strncmp>
 80102d4:	4607      	mov	r7, r0
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d167      	bne.n	80103aa <__gethex+0x10e>
 80102da:	f899 0001 	ldrb.w	r0, [r9, #1]
 80102de:	4626      	mov	r6, r4
 80102e0:	f7ff ffc6 	bl	8010270 <__hexdig_fun>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d062      	beq.n	80103ae <__gethex+0x112>
 80102e8:	4623      	mov	r3, r4
 80102ea:	7818      	ldrb	r0, [r3, #0]
 80102ec:	2830      	cmp	r0, #48	@ 0x30
 80102ee:	4699      	mov	r9, r3
 80102f0:	f103 0301 	add.w	r3, r3, #1
 80102f4:	d0f9      	beq.n	80102ea <__gethex+0x4e>
 80102f6:	f7ff ffbb 	bl	8010270 <__hexdig_fun>
 80102fa:	fab0 f580 	clz	r5, r0
 80102fe:	096d      	lsrs	r5, r5, #5
 8010300:	f04f 0b01 	mov.w	fp, #1
 8010304:	464a      	mov	r2, r9
 8010306:	4616      	mov	r6, r2
 8010308:	3201      	adds	r2, #1
 801030a:	7830      	ldrb	r0, [r6, #0]
 801030c:	f7ff ffb0 	bl	8010270 <__hexdig_fun>
 8010310:	2800      	cmp	r0, #0
 8010312:	d1f8      	bne.n	8010306 <__gethex+0x6a>
 8010314:	498d      	ldr	r1, [pc, #564]	@ (801054c <__gethex+0x2b0>)
 8010316:	2201      	movs	r2, #1
 8010318:	4630      	mov	r0, r6
 801031a:	f7ff fed9 	bl	80100d0 <strncmp>
 801031e:	2800      	cmp	r0, #0
 8010320:	d13f      	bne.n	80103a2 <__gethex+0x106>
 8010322:	b944      	cbnz	r4, 8010336 <__gethex+0x9a>
 8010324:	1c74      	adds	r4, r6, #1
 8010326:	4622      	mov	r2, r4
 8010328:	4616      	mov	r6, r2
 801032a:	3201      	adds	r2, #1
 801032c:	7830      	ldrb	r0, [r6, #0]
 801032e:	f7ff ff9f 	bl	8010270 <__hexdig_fun>
 8010332:	2800      	cmp	r0, #0
 8010334:	d1f8      	bne.n	8010328 <__gethex+0x8c>
 8010336:	1ba4      	subs	r4, r4, r6
 8010338:	00a7      	lsls	r7, r4, #2
 801033a:	7833      	ldrb	r3, [r6, #0]
 801033c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010340:	2b50      	cmp	r3, #80	@ 0x50
 8010342:	d13e      	bne.n	80103c2 <__gethex+0x126>
 8010344:	7873      	ldrb	r3, [r6, #1]
 8010346:	2b2b      	cmp	r3, #43	@ 0x2b
 8010348:	d033      	beq.n	80103b2 <__gethex+0x116>
 801034a:	2b2d      	cmp	r3, #45	@ 0x2d
 801034c:	d034      	beq.n	80103b8 <__gethex+0x11c>
 801034e:	1c71      	adds	r1, r6, #1
 8010350:	2400      	movs	r4, #0
 8010352:	7808      	ldrb	r0, [r1, #0]
 8010354:	f7ff ff8c 	bl	8010270 <__hexdig_fun>
 8010358:	1e43      	subs	r3, r0, #1
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b18      	cmp	r3, #24
 801035e:	d830      	bhi.n	80103c2 <__gethex+0x126>
 8010360:	f1a0 0210 	sub.w	r2, r0, #16
 8010364:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010368:	f7ff ff82 	bl	8010270 <__hexdig_fun>
 801036c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010370:	fa5f fc8c 	uxtb.w	ip, ip
 8010374:	f1bc 0f18 	cmp.w	ip, #24
 8010378:	f04f 030a 	mov.w	r3, #10
 801037c:	d91e      	bls.n	80103bc <__gethex+0x120>
 801037e:	b104      	cbz	r4, 8010382 <__gethex+0xe6>
 8010380:	4252      	negs	r2, r2
 8010382:	4417      	add	r7, r2
 8010384:	f8ca 1000 	str.w	r1, [sl]
 8010388:	b1ed      	cbz	r5, 80103c6 <__gethex+0x12a>
 801038a:	f1bb 0f00 	cmp.w	fp, #0
 801038e:	bf0c      	ite	eq
 8010390:	2506      	moveq	r5, #6
 8010392:	2500      	movne	r5, #0
 8010394:	4628      	mov	r0, r5
 8010396:	b005      	add	sp, #20
 8010398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801039c:	2500      	movs	r5, #0
 801039e:	462c      	mov	r4, r5
 80103a0:	e7b0      	b.n	8010304 <__gethex+0x68>
 80103a2:	2c00      	cmp	r4, #0
 80103a4:	d1c7      	bne.n	8010336 <__gethex+0x9a>
 80103a6:	4627      	mov	r7, r4
 80103a8:	e7c7      	b.n	801033a <__gethex+0x9e>
 80103aa:	464e      	mov	r6, r9
 80103ac:	462f      	mov	r7, r5
 80103ae:	2501      	movs	r5, #1
 80103b0:	e7c3      	b.n	801033a <__gethex+0x9e>
 80103b2:	2400      	movs	r4, #0
 80103b4:	1cb1      	adds	r1, r6, #2
 80103b6:	e7cc      	b.n	8010352 <__gethex+0xb6>
 80103b8:	2401      	movs	r4, #1
 80103ba:	e7fb      	b.n	80103b4 <__gethex+0x118>
 80103bc:	fb03 0002 	mla	r0, r3, r2, r0
 80103c0:	e7ce      	b.n	8010360 <__gethex+0xc4>
 80103c2:	4631      	mov	r1, r6
 80103c4:	e7de      	b.n	8010384 <__gethex+0xe8>
 80103c6:	eba6 0309 	sub.w	r3, r6, r9
 80103ca:	3b01      	subs	r3, #1
 80103cc:	4629      	mov	r1, r5
 80103ce:	2b07      	cmp	r3, #7
 80103d0:	dc0a      	bgt.n	80103e8 <__gethex+0x14c>
 80103d2:	9801      	ldr	r0, [sp, #4]
 80103d4:	f7fd ff8c 	bl	800e2f0 <_Balloc>
 80103d8:	4604      	mov	r4, r0
 80103da:	b940      	cbnz	r0, 80103ee <__gethex+0x152>
 80103dc:	4b5c      	ldr	r3, [pc, #368]	@ (8010550 <__gethex+0x2b4>)
 80103de:	4602      	mov	r2, r0
 80103e0:	21e4      	movs	r1, #228	@ 0xe4
 80103e2:	485c      	ldr	r0, [pc, #368]	@ (8010554 <__gethex+0x2b8>)
 80103e4:	f7ff fec0 	bl	8010168 <__assert_func>
 80103e8:	3101      	adds	r1, #1
 80103ea:	105b      	asrs	r3, r3, #1
 80103ec:	e7ef      	b.n	80103ce <__gethex+0x132>
 80103ee:	f100 0a14 	add.w	sl, r0, #20
 80103f2:	2300      	movs	r3, #0
 80103f4:	4655      	mov	r5, sl
 80103f6:	469b      	mov	fp, r3
 80103f8:	45b1      	cmp	r9, r6
 80103fa:	d337      	bcc.n	801046c <__gethex+0x1d0>
 80103fc:	f845 bb04 	str.w	fp, [r5], #4
 8010400:	eba5 050a 	sub.w	r5, r5, sl
 8010404:	10ad      	asrs	r5, r5, #2
 8010406:	6125      	str	r5, [r4, #16]
 8010408:	4658      	mov	r0, fp
 801040a:	f7fe f863 	bl	800e4d4 <__hi0bits>
 801040e:	016d      	lsls	r5, r5, #5
 8010410:	f8d8 6000 	ldr.w	r6, [r8]
 8010414:	1a2d      	subs	r5, r5, r0
 8010416:	42b5      	cmp	r5, r6
 8010418:	dd54      	ble.n	80104c4 <__gethex+0x228>
 801041a:	1bad      	subs	r5, r5, r6
 801041c:	4629      	mov	r1, r5
 801041e:	4620      	mov	r0, r4
 8010420:	f7fe fbef 	bl	800ec02 <__any_on>
 8010424:	4681      	mov	r9, r0
 8010426:	b178      	cbz	r0, 8010448 <__gethex+0x1ac>
 8010428:	1e6b      	subs	r3, r5, #1
 801042a:	1159      	asrs	r1, r3, #5
 801042c:	f003 021f 	and.w	r2, r3, #31
 8010430:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010434:	f04f 0901 	mov.w	r9, #1
 8010438:	fa09 f202 	lsl.w	r2, r9, r2
 801043c:	420a      	tst	r2, r1
 801043e:	d003      	beq.n	8010448 <__gethex+0x1ac>
 8010440:	454b      	cmp	r3, r9
 8010442:	dc36      	bgt.n	80104b2 <__gethex+0x216>
 8010444:	f04f 0902 	mov.w	r9, #2
 8010448:	4629      	mov	r1, r5
 801044a:	4620      	mov	r0, r4
 801044c:	f7ff febe 	bl	80101cc <rshift>
 8010450:	442f      	add	r7, r5
 8010452:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010456:	42bb      	cmp	r3, r7
 8010458:	da42      	bge.n	80104e0 <__gethex+0x244>
 801045a:	9801      	ldr	r0, [sp, #4]
 801045c:	4621      	mov	r1, r4
 801045e:	f7fd ff87 	bl	800e370 <_Bfree>
 8010462:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010464:	2300      	movs	r3, #0
 8010466:	6013      	str	r3, [r2, #0]
 8010468:	25a3      	movs	r5, #163	@ 0xa3
 801046a:	e793      	b.n	8010394 <__gethex+0xf8>
 801046c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010470:	2a2e      	cmp	r2, #46	@ 0x2e
 8010472:	d012      	beq.n	801049a <__gethex+0x1fe>
 8010474:	2b20      	cmp	r3, #32
 8010476:	d104      	bne.n	8010482 <__gethex+0x1e6>
 8010478:	f845 bb04 	str.w	fp, [r5], #4
 801047c:	f04f 0b00 	mov.w	fp, #0
 8010480:	465b      	mov	r3, fp
 8010482:	7830      	ldrb	r0, [r6, #0]
 8010484:	9303      	str	r3, [sp, #12]
 8010486:	f7ff fef3 	bl	8010270 <__hexdig_fun>
 801048a:	9b03      	ldr	r3, [sp, #12]
 801048c:	f000 000f 	and.w	r0, r0, #15
 8010490:	4098      	lsls	r0, r3
 8010492:	ea4b 0b00 	orr.w	fp, fp, r0
 8010496:	3304      	adds	r3, #4
 8010498:	e7ae      	b.n	80103f8 <__gethex+0x15c>
 801049a:	45b1      	cmp	r9, r6
 801049c:	d8ea      	bhi.n	8010474 <__gethex+0x1d8>
 801049e:	492b      	ldr	r1, [pc, #172]	@ (801054c <__gethex+0x2b0>)
 80104a0:	9303      	str	r3, [sp, #12]
 80104a2:	2201      	movs	r2, #1
 80104a4:	4630      	mov	r0, r6
 80104a6:	f7ff fe13 	bl	80100d0 <strncmp>
 80104aa:	9b03      	ldr	r3, [sp, #12]
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d1e1      	bne.n	8010474 <__gethex+0x1d8>
 80104b0:	e7a2      	b.n	80103f8 <__gethex+0x15c>
 80104b2:	1ea9      	subs	r1, r5, #2
 80104b4:	4620      	mov	r0, r4
 80104b6:	f7fe fba4 	bl	800ec02 <__any_on>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	d0c2      	beq.n	8010444 <__gethex+0x1a8>
 80104be:	f04f 0903 	mov.w	r9, #3
 80104c2:	e7c1      	b.n	8010448 <__gethex+0x1ac>
 80104c4:	da09      	bge.n	80104da <__gethex+0x23e>
 80104c6:	1b75      	subs	r5, r6, r5
 80104c8:	4621      	mov	r1, r4
 80104ca:	9801      	ldr	r0, [sp, #4]
 80104cc:	462a      	mov	r2, r5
 80104ce:	f7fe f95f 	bl	800e790 <__lshift>
 80104d2:	1b7f      	subs	r7, r7, r5
 80104d4:	4604      	mov	r4, r0
 80104d6:	f100 0a14 	add.w	sl, r0, #20
 80104da:	f04f 0900 	mov.w	r9, #0
 80104de:	e7b8      	b.n	8010452 <__gethex+0x1b6>
 80104e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80104e4:	42bd      	cmp	r5, r7
 80104e6:	dd6f      	ble.n	80105c8 <__gethex+0x32c>
 80104e8:	1bed      	subs	r5, r5, r7
 80104ea:	42ae      	cmp	r6, r5
 80104ec:	dc34      	bgt.n	8010558 <__gethex+0x2bc>
 80104ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80104f2:	2b02      	cmp	r3, #2
 80104f4:	d022      	beq.n	801053c <__gethex+0x2a0>
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	d024      	beq.n	8010544 <__gethex+0x2a8>
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	d115      	bne.n	801052a <__gethex+0x28e>
 80104fe:	42ae      	cmp	r6, r5
 8010500:	d113      	bne.n	801052a <__gethex+0x28e>
 8010502:	2e01      	cmp	r6, #1
 8010504:	d10b      	bne.n	801051e <__gethex+0x282>
 8010506:	9a02      	ldr	r2, [sp, #8]
 8010508:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801050c:	6013      	str	r3, [r2, #0]
 801050e:	2301      	movs	r3, #1
 8010510:	6123      	str	r3, [r4, #16]
 8010512:	f8ca 3000 	str.w	r3, [sl]
 8010516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010518:	2562      	movs	r5, #98	@ 0x62
 801051a:	601c      	str	r4, [r3, #0]
 801051c:	e73a      	b.n	8010394 <__gethex+0xf8>
 801051e:	1e71      	subs	r1, r6, #1
 8010520:	4620      	mov	r0, r4
 8010522:	f7fe fb6e 	bl	800ec02 <__any_on>
 8010526:	2800      	cmp	r0, #0
 8010528:	d1ed      	bne.n	8010506 <__gethex+0x26a>
 801052a:	9801      	ldr	r0, [sp, #4]
 801052c:	4621      	mov	r1, r4
 801052e:	f7fd ff1f 	bl	800e370 <_Bfree>
 8010532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010534:	2300      	movs	r3, #0
 8010536:	6013      	str	r3, [r2, #0]
 8010538:	2550      	movs	r5, #80	@ 0x50
 801053a:	e72b      	b.n	8010394 <__gethex+0xf8>
 801053c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d1f3      	bne.n	801052a <__gethex+0x28e>
 8010542:	e7e0      	b.n	8010506 <__gethex+0x26a>
 8010544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010546:	2b00      	cmp	r3, #0
 8010548:	d1dd      	bne.n	8010506 <__gethex+0x26a>
 801054a:	e7ee      	b.n	801052a <__gethex+0x28e>
 801054c:	080125e3 	.word	0x080125e3
 8010550:	08012579 	.word	0x08012579
 8010554:	0801263a 	.word	0x0801263a
 8010558:	1e6f      	subs	r7, r5, #1
 801055a:	f1b9 0f00 	cmp.w	r9, #0
 801055e:	d130      	bne.n	80105c2 <__gethex+0x326>
 8010560:	b127      	cbz	r7, 801056c <__gethex+0x2d0>
 8010562:	4639      	mov	r1, r7
 8010564:	4620      	mov	r0, r4
 8010566:	f7fe fb4c 	bl	800ec02 <__any_on>
 801056a:	4681      	mov	r9, r0
 801056c:	117a      	asrs	r2, r7, #5
 801056e:	2301      	movs	r3, #1
 8010570:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010574:	f007 071f 	and.w	r7, r7, #31
 8010578:	40bb      	lsls	r3, r7
 801057a:	4213      	tst	r3, r2
 801057c:	4629      	mov	r1, r5
 801057e:	4620      	mov	r0, r4
 8010580:	bf18      	it	ne
 8010582:	f049 0902 	orrne.w	r9, r9, #2
 8010586:	f7ff fe21 	bl	80101cc <rshift>
 801058a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801058e:	1b76      	subs	r6, r6, r5
 8010590:	2502      	movs	r5, #2
 8010592:	f1b9 0f00 	cmp.w	r9, #0
 8010596:	d047      	beq.n	8010628 <__gethex+0x38c>
 8010598:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801059c:	2b02      	cmp	r3, #2
 801059e:	d015      	beq.n	80105cc <__gethex+0x330>
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d017      	beq.n	80105d4 <__gethex+0x338>
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d109      	bne.n	80105bc <__gethex+0x320>
 80105a8:	f019 0f02 	tst.w	r9, #2
 80105ac:	d006      	beq.n	80105bc <__gethex+0x320>
 80105ae:	f8da 3000 	ldr.w	r3, [sl]
 80105b2:	ea49 0903 	orr.w	r9, r9, r3
 80105b6:	f019 0f01 	tst.w	r9, #1
 80105ba:	d10e      	bne.n	80105da <__gethex+0x33e>
 80105bc:	f045 0510 	orr.w	r5, r5, #16
 80105c0:	e032      	b.n	8010628 <__gethex+0x38c>
 80105c2:	f04f 0901 	mov.w	r9, #1
 80105c6:	e7d1      	b.n	801056c <__gethex+0x2d0>
 80105c8:	2501      	movs	r5, #1
 80105ca:	e7e2      	b.n	8010592 <__gethex+0x2f6>
 80105cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105ce:	f1c3 0301 	rsb	r3, r3, #1
 80105d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80105d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d0f0      	beq.n	80105bc <__gethex+0x320>
 80105da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80105de:	f104 0314 	add.w	r3, r4, #20
 80105e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80105e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80105ea:	f04f 0c00 	mov.w	ip, #0
 80105ee:	4618      	mov	r0, r3
 80105f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80105f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80105f8:	d01b      	beq.n	8010632 <__gethex+0x396>
 80105fa:	3201      	adds	r2, #1
 80105fc:	6002      	str	r2, [r0, #0]
 80105fe:	2d02      	cmp	r5, #2
 8010600:	f104 0314 	add.w	r3, r4, #20
 8010604:	d13c      	bne.n	8010680 <__gethex+0x3e4>
 8010606:	f8d8 2000 	ldr.w	r2, [r8]
 801060a:	3a01      	subs	r2, #1
 801060c:	42b2      	cmp	r2, r6
 801060e:	d109      	bne.n	8010624 <__gethex+0x388>
 8010610:	1171      	asrs	r1, r6, #5
 8010612:	2201      	movs	r2, #1
 8010614:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010618:	f006 061f 	and.w	r6, r6, #31
 801061c:	fa02 f606 	lsl.w	r6, r2, r6
 8010620:	421e      	tst	r6, r3
 8010622:	d13a      	bne.n	801069a <__gethex+0x3fe>
 8010624:	f045 0520 	orr.w	r5, r5, #32
 8010628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801062a:	601c      	str	r4, [r3, #0]
 801062c:	9b02      	ldr	r3, [sp, #8]
 801062e:	601f      	str	r7, [r3, #0]
 8010630:	e6b0      	b.n	8010394 <__gethex+0xf8>
 8010632:	4299      	cmp	r1, r3
 8010634:	f843 cc04 	str.w	ip, [r3, #-4]
 8010638:	d8d9      	bhi.n	80105ee <__gethex+0x352>
 801063a:	68a3      	ldr	r3, [r4, #8]
 801063c:	459b      	cmp	fp, r3
 801063e:	db17      	blt.n	8010670 <__gethex+0x3d4>
 8010640:	6861      	ldr	r1, [r4, #4]
 8010642:	9801      	ldr	r0, [sp, #4]
 8010644:	3101      	adds	r1, #1
 8010646:	f7fd fe53 	bl	800e2f0 <_Balloc>
 801064a:	4681      	mov	r9, r0
 801064c:	b918      	cbnz	r0, 8010656 <__gethex+0x3ba>
 801064e:	4b1a      	ldr	r3, [pc, #104]	@ (80106b8 <__gethex+0x41c>)
 8010650:	4602      	mov	r2, r0
 8010652:	2184      	movs	r1, #132	@ 0x84
 8010654:	e6c5      	b.n	80103e2 <__gethex+0x146>
 8010656:	6922      	ldr	r2, [r4, #16]
 8010658:	3202      	adds	r2, #2
 801065a:	f104 010c 	add.w	r1, r4, #12
 801065e:	0092      	lsls	r2, r2, #2
 8010660:	300c      	adds	r0, #12
 8010662:	f7fc fed6 	bl	800d412 <memcpy>
 8010666:	4621      	mov	r1, r4
 8010668:	9801      	ldr	r0, [sp, #4]
 801066a:	f7fd fe81 	bl	800e370 <_Bfree>
 801066e:	464c      	mov	r4, r9
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010678:	6122      	str	r2, [r4, #16]
 801067a:	2201      	movs	r2, #1
 801067c:	615a      	str	r2, [r3, #20]
 801067e:	e7be      	b.n	80105fe <__gethex+0x362>
 8010680:	6922      	ldr	r2, [r4, #16]
 8010682:	455a      	cmp	r2, fp
 8010684:	dd0b      	ble.n	801069e <__gethex+0x402>
 8010686:	2101      	movs	r1, #1
 8010688:	4620      	mov	r0, r4
 801068a:	f7ff fd9f 	bl	80101cc <rshift>
 801068e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010692:	3701      	adds	r7, #1
 8010694:	42bb      	cmp	r3, r7
 8010696:	f6ff aee0 	blt.w	801045a <__gethex+0x1be>
 801069a:	2501      	movs	r5, #1
 801069c:	e7c2      	b.n	8010624 <__gethex+0x388>
 801069e:	f016 061f 	ands.w	r6, r6, #31
 80106a2:	d0fa      	beq.n	801069a <__gethex+0x3fe>
 80106a4:	4453      	add	r3, sl
 80106a6:	f1c6 0620 	rsb	r6, r6, #32
 80106aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80106ae:	f7fd ff11 	bl	800e4d4 <__hi0bits>
 80106b2:	42b0      	cmp	r0, r6
 80106b4:	dbe7      	blt.n	8010686 <__gethex+0x3ea>
 80106b6:	e7f0      	b.n	801069a <__gethex+0x3fe>
 80106b8:	08012579 	.word	0x08012579

080106bc <L_shift>:
 80106bc:	f1c2 0208 	rsb	r2, r2, #8
 80106c0:	0092      	lsls	r2, r2, #2
 80106c2:	b570      	push	{r4, r5, r6, lr}
 80106c4:	f1c2 0620 	rsb	r6, r2, #32
 80106c8:	6843      	ldr	r3, [r0, #4]
 80106ca:	6804      	ldr	r4, [r0, #0]
 80106cc:	fa03 f506 	lsl.w	r5, r3, r6
 80106d0:	432c      	orrs	r4, r5
 80106d2:	40d3      	lsrs	r3, r2
 80106d4:	6004      	str	r4, [r0, #0]
 80106d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80106da:	4288      	cmp	r0, r1
 80106dc:	d3f4      	bcc.n	80106c8 <L_shift+0xc>
 80106de:	bd70      	pop	{r4, r5, r6, pc}

080106e0 <__match>:
 80106e0:	b530      	push	{r4, r5, lr}
 80106e2:	6803      	ldr	r3, [r0, #0]
 80106e4:	3301      	adds	r3, #1
 80106e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106ea:	b914      	cbnz	r4, 80106f2 <__match+0x12>
 80106ec:	6003      	str	r3, [r0, #0]
 80106ee:	2001      	movs	r0, #1
 80106f0:	bd30      	pop	{r4, r5, pc}
 80106f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80106fa:	2d19      	cmp	r5, #25
 80106fc:	bf98      	it	ls
 80106fe:	3220      	addls	r2, #32
 8010700:	42a2      	cmp	r2, r4
 8010702:	d0f0      	beq.n	80106e6 <__match+0x6>
 8010704:	2000      	movs	r0, #0
 8010706:	e7f3      	b.n	80106f0 <__match+0x10>

08010708 <__hexnan>:
 8010708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801070c:	680b      	ldr	r3, [r1, #0]
 801070e:	6801      	ldr	r1, [r0, #0]
 8010710:	115e      	asrs	r6, r3, #5
 8010712:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010716:	f013 031f 	ands.w	r3, r3, #31
 801071a:	b087      	sub	sp, #28
 801071c:	bf18      	it	ne
 801071e:	3604      	addne	r6, #4
 8010720:	2500      	movs	r5, #0
 8010722:	1f37      	subs	r7, r6, #4
 8010724:	4682      	mov	sl, r0
 8010726:	4690      	mov	r8, r2
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	f846 5c04 	str.w	r5, [r6, #-4]
 801072e:	46b9      	mov	r9, r7
 8010730:	463c      	mov	r4, r7
 8010732:	9502      	str	r5, [sp, #8]
 8010734:	46ab      	mov	fp, r5
 8010736:	784a      	ldrb	r2, [r1, #1]
 8010738:	1c4b      	adds	r3, r1, #1
 801073a:	9303      	str	r3, [sp, #12]
 801073c:	b342      	cbz	r2, 8010790 <__hexnan+0x88>
 801073e:	4610      	mov	r0, r2
 8010740:	9105      	str	r1, [sp, #20]
 8010742:	9204      	str	r2, [sp, #16]
 8010744:	f7ff fd94 	bl	8010270 <__hexdig_fun>
 8010748:	2800      	cmp	r0, #0
 801074a:	d151      	bne.n	80107f0 <__hexnan+0xe8>
 801074c:	9a04      	ldr	r2, [sp, #16]
 801074e:	9905      	ldr	r1, [sp, #20]
 8010750:	2a20      	cmp	r2, #32
 8010752:	d818      	bhi.n	8010786 <__hexnan+0x7e>
 8010754:	9b02      	ldr	r3, [sp, #8]
 8010756:	459b      	cmp	fp, r3
 8010758:	dd13      	ble.n	8010782 <__hexnan+0x7a>
 801075a:	454c      	cmp	r4, r9
 801075c:	d206      	bcs.n	801076c <__hexnan+0x64>
 801075e:	2d07      	cmp	r5, #7
 8010760:	dc04      	bgt.n	801076c <__hexnan+0x64>
 8010762:	462a      	mov	r2, r5
 8010764:	4649      	mov	r1, r9
 8010766:	4620      	mov	r0, r4
 8010768:	f7ff ffa8 	bl	80106bc <L_shift>
 801076c:	4544      	cmp	r4, r8
 801076e:	d952      	bls.n	8010816 <__hexnan+0x10e>
 8010770:	2300      	movs	r3, #0
 8010772:	f1a4 0904 	sub.w	r9, r4, #4
 8010776:	f844 3c04 	str.w	r3, [r4, #-4]
 801077a:	f8cd b008 	str.w	fp, [sp, #8]
 801077e:	464c      	mov	r4, r9
 8010780:	461d      	mov	r5, r3
 8010782:	9903      	ldr	r1, [sp, #12]
 8010784:	e7d7      	b.n	8010736 <__hexnan+0x2e>
 8010786:	2a29      	cmp	r2, #41	@ 0x29
 8010788:	d157      	bne.n	801083a <__hexnan+0x132>
 801078a:	3102      	adds	r1, #2
 801078c:	f8ca 1000 	str.w	r1, [sl]
 8010790:	f1bb 0f00 	cmp.w	fp, #0
 8010794:	d051      	beq.n	801083a <__hexnan+0x132>
 8010796:	454c      	cmp	r4, r9
 8010798:	d206      	bcs.n	80107a8 <__hexnan+0xa0>
 801079a:	2d07      	cmp	r5, #7
 801079c:	dc04      	bgt.n	80107a8 <__hexnan+0xa0>
 801079e:	462a      	mov	r2, r5
 80107a0:	4649      	mov	r1, r9
 80107a2:	4620      	mov	r0, r4
 80107a4:	f7ff ff8a 	bl	80106bc <L_shift>
 80107a8:	4544      	cmp	r4, r8
 80107aa:	d936      	bls.n	801081a <__hexnan+0x112>
 80107ac:	f1a8 0204 	sub.w	r2, r8, #4
 80107b0:	4623      	mov	r3, r4
 80107b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80107b6:	f842 1f04 	str.w	r1, [r2, #4]!
 80107ba:	429f      	cmp	r7, r3
 80107bc:	d2f9      	bcs.n	80107b2 <__hexnan+0xaa>
 80107be:	1b3b      	subs	r3, r7, r4
 80107c0:	f023 0303 	bic.w	r3, r3, #3
 80107c4:	3304      	adds	r3, #4
 80107c6:	3401      	adds	r4, #1
 80107c8:	3e03      	subs	r6, #3
 80107ca:	42b4      	cmp	r4, r6
 80107cc:	bf88      	it	hi
 80107ce:	2304      	movhi	r3, #4
 80107d0:	4443      	add	r3, r8
 80107d2:	2200      	movs	r2, #0
 80107d4:	f843 2b04 	str.w	r2, [r3], #4
 80107d8:	429f      	cmp	r7, r3
 80107da:	d2fb      	bcs.n	80107d4 <__hexnan+0xcc>
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	b91b      	cbnz	r3, 80107e8 <__hexnan+0xe0>
 80107e0:	4547      	cmp	r7, r8
 80107e2:	d128      	bne.n	8010836 <__hexnan+0x12e>
 80107e4:	2301      	movs	r3, #1
 80107e6:	603b      	str	r3, [r7, #0]
 80107e8:	2005      	movs	r0, #5
 80107ea:	b007      	add	sp, #28
 80107ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f0:	3501      	adds	r5, #1
 80107f2:	2d08      	cmp	r5, #8
 80107f4:	f10b 0b01 	add.w	fp, fp, #1
 80107f8:	dd06      	ble.n	8010808 <__hexnan+0x100>
 80107fa:	4544      	cmp	r4, r8
 80107fc:	d9c1      	bls.n	8010782 <__hexnan+0x7a>
 80107fe:	2300      	movs	r3, #0
 8010800:	f844 3c04 	str.w	r3, [r4, #-4]
 8010804:	2501      	movs	r5, #1
 8010806:	3c04      	subs	r4, #4
 8010808:	6822      	ldr	r2, [r4, #0]
 801080a:	f000 000f 	and.w	r0, r0, #15
 801080e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010812:	6020      	str	r0, [r4, #0]
 8010814:	e7b5      	b.n	8010782 <__hexnan+0x7a>
 8010816:	2508      	movs	r5, #8
 8010818:	e7b3      	b.n	8010782 <__hexnan+0x7a>
 801081a:	9b01      	ldr	r3, [sp, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d0dd      	beq.n	80107dc <__hexnan+0xd4>
 8010820:	f1c3 0320 	rsb	r3, r3, #32
 8010824:	f04f 32ff 	mov.w	r2, #4294967295
 8010828:	40da      	lsrs	r2, r3
 801082a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801082e:	4013      	ands	r3, r2
 8010830:	f846 3c04 	str.w	r3, [r6, #-4]
 8010834:	e7d2      	b.n	80107dc <__hexnan+0xd4>
 8010836:	3f04      	subs	r7, #4
 8010838:	e7d0      	b.n	80107dc <__hexnan+0xd4>
 801083a:	2004      	movs	r0, #4
 801083c:	e7d5      	b.n	80107ea <__hexnan+0xe2>

0801083e <__ascii_mbtowc>:
 801083e:	b082      	sub	sp, #8
 8010840:	b901      	cbnz	r1, 8010844 <__ascii_mbtowc+0x6>
 8010842:	a901      	add	r1, sp, #4
 8010844:	b142      	cbz	r2, 8010858 <__ascii_mbtowc+0x1a>
 8010846:	b14b      	cbz	r3, 801085c <__ascii_mbtowc+0x1e>
 8010848:	7813      	ldrb	r3, [r2, #0]
 801084a:	600b      	str	r3, [r1, #0]
 801084c:	7812      	ldrb	r2, [r2, #0]
 801084e:	1e10      	subs	r0, r2, #0
 8010850:	bf18      	it	ne
 8010852:	2001      	movne	r0, #1
 8010854:	b002      	add	sp, #8
 8010856:	4770      	bx	lr
 8010858:	4610      	mov	r0, r2
 801085a:	e7fb      	b.n	8010854 <__ascii_mbtowc+0x16>
 801085c:	f06f 0001 	mvn.w	r0, #1
 8010860:	e7f8      	b.n	8010854 <__ascii_mbtowc+0x16>

08010862 <_realloc_r>:
 8010862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010866:	4607      	mov	r7, r0
 8010868:	4614      	mov	r4, r2
 801086a:	460d      	mov	r5, r1
 801086c:	b921      	cbnz	r1, 8010878 <_realloc_r+0x16>
 801086e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010872:	4611      	mov	r1, r2
 8010874:	f7fd bcb0 	b.w	800e1d8 <_malloc_r>
 8010878:	b92a      	cbnz	r2, 8010886 <_realloc_r+0x24>
 801087a:	f7fd fc39 	bl	800e0f0 <_free_r>
 801087e:	4625      	mov	r5, r4
 8010880:	4628      	mov	r0, r5
 8010882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010886:	f000 f840 	bl	801090a <_malloc_usable_size_r>
 801088a:	4284      	cmp	r4, r0
 801088c:	4606      	mov	r6, r0
 801088e:	d802      	bhi.n	8010896 <_realloc_r+0x34>
 8010890:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010894:	d8f4      	bhi.n	8010880 <_realloc_r+0x1e>
 8010896:	4621      	mov	r1, r4
 8010898:	4638      	mov	r0, r7
 801089a:	f7fd fc9d 	bl	800e1d8 <_malloc_r>
 801089e:	4680      	mov	r8, r0
 80108a0:	b908      	cbnz	r0, 80108a6 <_realloc_r+0x44>
 80108a2:	4645      	mov	r5, r8
 80108a4:	e7ec      	b.n	8010880 <_realloc_r+0x1e>
 80108a6:	42b4      	cmp	r4, r6
 80108a8:	4622      	mov	r2, r4
 80108aa:	4629      	mov	r1, r5
 80108ac:	bf28      	it	cs
 80108ae:	4632      	movcs	r2, r6
 80108b0:	f7fc fdaf 	bl	800d412 <memcpy>
 80108b4:	4629      	mov	r1, r5
 80108b6:	4638      	mov	r0, r7
 80108b8:	f7fd fc1a 	bl	800e0f0 <_free_r>
 80108bc:	e7f1      	b.n	80108a2 <_realloc_r+0x40>

080108be <__ascii_wctomb>:
 80108be:	4603      	mov	r3, r0
 80108c0:	4608      	mov	r0, r1
 80108c2:	b141      	cbz	r1, 80108d6 <__ascii_wctomb+0x18>
 80108c4:	2aff      	cmp	r2, #255	@ 0xff
 80108c6:	d904      	bls.n	80108d2 <__ascii_wctomb+0x14>
 80108c8:	228a      	movs	r2, #138	@ 0x8a
 80108ca:	601a      	str	r2, [r3, #0]
 80108cc:	f04f 30ff 	mov.w	r0, #4294967295
 80108d0:	4770      	bx	lr
 80108d2:	700a      	strb	r2, [r1, #0]
 80108d4:	2001      	movs	r0, #1
 80108d6:	4770      	bx	lr

080108d8 <fiprintf>:
 80108d8:	b40e      	push	{r1, r2, r3}
 80108da:	b503      	push	{r0, r1, lr}
 80108dc:	4601      	mov	r1, r0
 80108de:	ab03      	add	r3, sp, #12
 80108e0:	4805      	ldr	r0, [pc, #20]	@ (80108f8 <fiprintf+0x20>)
 80108e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e6:	6800      	ldr	r0, [r0, #0]
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f7ff f9b1 	bl	800fc50 <_vfiprintf_r>
 80108ee:	b002      	add	sp, #8
 80108f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80108f4:	b003      	add	sp, #12
 80108f6:	4770      	bx	lr
 80108f8:	20000118 	.word	0x20000118

080108fc <abort>:
 80108fc:	b508      	push	{r3, lr}
 80108fe:	2006      	movs	r0, #6
 8010900:	f000 f834 	bl	801096c <raise>
 8010904:	2001      	movs	r0, #1
 8010906:	f7f0 ff61 	bl	80017cc <_exit>

0801090a <_malloc_usable_size_r>:
 801090a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801090e:	1f18      	subs	r0, r3, #4
 8010910:	2b00      	cmp	r3, #0
 8010912:	bfbc      	itt	lt
 8010914:	580b      	ldrlt	r3, [r1, r0]
 8010916:	18c0      	addlt	r0, r0, r3
 8010918:	4770      	bx	lr

0801091a <_raise_r>:
 801091a:	291f      	cmp	r1, #31
 801091c:	b538      	push	{r3, r4, r5, lr}
 801091e:	4605      	mov	r5, r0
 8010920:	460c      	mov	r4, r1
 8010922:	d904      	bls.n	801092e <_raise_r+0x14>
 8010924:	2316      	movs	r3, #22
 8010926:	6003      	str	r3, [r0, #0]
 8010928:	f04f 30ff 	mov.w	r0, #4294967295
 801092c:	bd38      	pop	{r3, r4, r5, pc}
 801092e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010930:	b112      	cbz	r2, 8010938 <_raise_r+0x1e>
 8010932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010936:	b94b      	cbnz	r3, 801094c <_raise_r+0x32>
 8010938:	4628      	mov	r0, r5
 801093a:	f000 f831 	bl	80109a0 <_getpid_r>
 801093e:	4622      	mov	r2, r4
 8010940:	4601      	mov	r1, r0
 8010942:	4628      	mov	r0, r5
 8010944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010948:	f000 b818 	b.w	801097c <_kill_r>
 801094c:	2b01      	cmp	r3, #1
 801094e:	d00a      	beq.n	8010966 <_raise_r+0x4c>
 8010950:	1c59      	adds	r1, r3, #1
 8010952:	d103      	bne.n	801095c <_raise_r+0x42>
 8010954:	2316      	movs	r3, #22
 8010956:	6003      	str	r3, [r0, #0]
 8010958:	2001      	movs	r0, #1
 801095a:	e7e7      	b.n	801092c <_raise_r+0x12>
 801095c:	2100      	movs	r1, #0
 801095e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010962:	4620      	mov	r0, r4
 8010964:	4798      	blx	r3
 8010966:	2000      	movs	r0, #0
 8010968:	e7e0      	b.n	801092c <_raise_r+0x12>
	...

0801096c <raise>:
 801096c:	4b02      	ldr	r3, [pc, #8]	@ (8010978 <raise+0xc>)
 801096e:	4601      	mov	r1, r0
 8010970:	6818      	ldr	r0, [r3, #0]
 8010972:	f7ff bfd2 	b.w	801091a <_raise_r>
 8010976:	bf00      	nop
 8010978:	20000118 	.word	0x20000118

0801097c <_kill_r>:
 801097c:	b538      	push	{r3, r4, r5, lr}
 801097e:	4d07      	ldr	r5, [pc, #28]	@ (801099c <_kill_r+0x20>)
 8010980:	2300      	movs	r3, #0
 8010982:	4604      	mov	r4, r0
 8010984:	4608      	mov	r0, r1
 8010986:	4611      	mov	r1, r2
 8010988:	602b      	str	r3, [r5, #0]
 801098a:	f7f0 ff0f 	bl	80017ac <_kill>
 801098e:	1c43      	adds	r3, r0, #1
 8010990:	d102      	bne.n	8010998 <_kill_r+0x1c>
 8010992:	682b      	ldr	r3, [r5, #0]
 8010994:	b103      	cbz	r3, 8010998 <_kill_r+0x1c>
 8010996:	6023      	str	r3, [r4, #0]
 8010998:	bd38      	pop	{r3, r4, r5, pc}
 801099a:	bf00      	nop
 801099c:	20002230 	.word	0x20002230

080109a0 <_getpid_r>:
 80109a0:	f7f0 befc 	b.w	800179c <_getpid>

080109a4 <atan2>:
 80109a4:	f000 bb30 	b.w	8011008 <__ieee754_atan2>

080109a8 <sqrt>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	ed2d 8b02 	vpush	{d8}
 80109ae:	ec55 4b10 	vmov	r4, r5, d0
 80109b2:	f000 f8cd 	bl	8010b50 <__ieee754_sqrt>
 80109b6:	4622      	mov	r2, r4
 80109b8:	462b      	mov	r3, r5
 80109ba:	4620      	mov	r0, r4
 80109bc:	4629      	mov	r1, r5
 80109be:	eeb0 8a40 	vmov.f32	s16, s0
 80109c2:	eef0 8a60 	vmov.f32	s17, s1
 80109c6:	f7f0 f8b1 	bl	8000b2c <__aeabi_dcmpun>
 80109ca:	b990      	cbnz	r0, 80109f2 <sqrt+0x4a>
 80109cc:	2200      	movs	r2, #0
 80109ce:	2300      	movs	r3, #0
 80109d0:	4620      	mov	r0, r4
 80109d2:	4629      	mov	r1, r5
 80109d4:	f7f0 f882 	bl	8000adc <__aeabi_dcmplt>
 80109d8:	b158      	cbz	r0, 80109f2 <sqrt+0x4a>
 80109da:	f7fc fced 	bl	800d3b8 <__errno>
 80109de:	2321      	movs	r3, #33	@ 0x21
 80109e0:	6003      	str	r3, [r0, #0]
 80109e2:	2200      	movs	r2, #0
 80109e4:	2300      	movs	r3, #0
 80109e6:	4610      	mov	r0, r2
 80109e8:	4619      	mov	r1, r3
 80109ea:	f7ef ff2f 	bl	800084c <__aeabi_ddiv>
 80109ee:	ec41 0b18 	vmov	d8, r0, r1
 80109f2:	eeb0 0a48 	vmov.f32	s0, s16
 80109f6:	eef0 0a68 	vmov.f32	s1, s17
 80109fa:	ecbd 8b02 	vpop	{d8}
 80109fe:	bd38      	pop	{r3, r4, r5, pc}

08010a00 <cos>:
 8010a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a02:	ec53 2b10 	vmov	r2, r3, d0
 8010a06:	4826      	ldr	r0, [pc, #152]	@ (8010aa0 <cos+0xa0>)
 8010a08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010a0c:	4281      	cmp	r1, r0
 8010a0e:	d806      	bhi.n	8010a1e <cos+0x1e>
 8010a10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010a98 <cos+0x98>
 8010a14:	b005      	add	sp, #20
 8010a16:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a1a:	f000 b971 	b.w	8010d00 <__kernel_cos>
 8010a1e:	4821      	ldr	r0, [pc, #132]	@ (8010aa4 <cos+0xa4>)
 8010a20:	4281      	cmp	r1, r0
 8010a22:	d908      	bls.n	8010a36 <cos+0x36>
 8010a24:	4610      	mov	r0, r2
 8010a26:	4619      	mov	r1, r3
 8010a28:	f7ef fc2e 	bl	8000288 <__aeabi_dsub>
 8010a2c:	ec41 0b10 	vmov	d0, r0, r1
 8010a30:	b005      	add	sp, #20
 8010a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a36:	4668      	mov	r0, sp
 8010a38:	f000 fbae 	bl	8011198 <__ieee754_rem_pio2>
 8010a3c:	f000 0003 	and.w	r0, r0, #3
 8010a40:	2801      	cmp	r0, #1
 8010a42:	d00b      	beq.n	8010a5c <cos+0x5c>
 8010a44:	2802      	cmp	r0, #2
 8010a46:	d015      	beq.n	8010a74 <cos+0x74>
 8010a48:	b9d8      	cbnz	r0, 8010a82 <cos+0x82>
 8010a4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a4e:	ed9d 0b00 	vldr	d0, [sp]
 8010a52:	f000 f955 	bl	8010d00 <__kernel_cos>
 8010a56:	ec51 0b10 	vmov	r0, r1, d0
 8010a5a:	e7e7      	b.n	8010a2c <cos+0x2c>
 8010a5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a60:	ed9d 0b00 	vldr	d0, [sp]
 8010a64:	f000 fa14 	bl	8010e90 <__kernel_sin>
 8010a68:	ec53 2b10 	vmov	r2, r3, d0
 8010a6c:	4610      	mov	r0, r2
 8010a6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010a72:	e7db      	b.n	8010a2c <cos+0x2c>
 8010a74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a78:	ed9d 0b00 	vldr	d0, [sp]
 8010a7c:	f000 f940 	bl	8010d00 <__kernel_cos>
 8010a80:	e7f2      	b.n	8010a68 <cos+0x68>
 8010a82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a86:	ed9d 0b00 	vldr	d0, [sp]
 8010a8a:	2001      	movs	r0, #1
 8010a8c:	f000 fa00 	bl	8010e90 <__kernel_sin>
 8010a90:	e7e1      	b.n	8010a56 <cos+0x56>
 8010a92:	bf00      	nop
 8010a94:	f3af 8000 	nop.w
	...
 8010aa0:	3fe921fb 	.word	0x3fe921fb
 8010aa4:	7fefffff 	.word	0x7fefffff

08010aa8 <sin>:
 8010aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010aaa:	ec53 2b10 	vmov	r2, r3, d0
 8010aae:	4826      	ldr	r0, [pc, #152]	@ (8010b48 <sin+0xa0>)
 8010ab0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010ab4:	4281      	cmp	r1, r0
 8010ab6:	d807      	bhi.n	8010ac8 <sin+0x20>
 8010ab8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010b40 <sin+0x98>
 8010abc:	2000      	movs	r0, #0
 8010abe:	b005      	add	sp, #20
 8010ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ac4:	f000 b9e4 	b.w	8010e90 <__kernel_sin>
 8010ac8:	4820      	ldr	r0, [pc, #128]	@ (8010b4c <sin+0xa4>)
 8010aca:	4281      	cmp	r1, r0
 8010acc:	d908      	bls.n	8010ae0 <sin+0x38>
 8010ace:	4610      	mov	r0, r2
 8010ad0:	4619      	mov	r1, r3
 8010ad2:	f7ef fbd9 	bl	8000288 <__aeabi_dsub>
 8010ad6:	ec41 0b10 	vmov	d0, r0, r1
 8010ada:	b005      	add	sp, #20
 8010adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ae0:	4668      	mov	r0, sp
 8010ae2:	f000 fb59 	bl	8011198 <__ieee754_rem_pio2>
 8010ae6:	f000 0003 	and.w	r0, r0, #3
 8010aea:	2801      	cmp	r0, #1
 8010aec:	d00c      	beq.n	8010b08 <sin+0x60>
 8010aee:	2802      	cmp	r0, #2
 8010af0:	d011      	beq.n	8010b16 <sin+0x6e>
 8010af2:	b9e8      	cbnz	r0, 8010b30 <sin+0x88>
 8010af4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010af8:	ed9d 0b00 	vldr	d0, [sp]
 8010afc:	2001      	movs	r0, #1
 8010afe:	f000 f9c7 	bl	8010e90 <__kernel_sin>
 8010b02:	ec51 0b10 	vmov	r0, r1, d0
 8010b06:	e7e6      	b.n	8010ad6 <sin+0x2e>
 8010b08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b0c:	ed9d 0b00 	vldr	d0, [sp]
 8010b10:	f000 f8f6 	bl	8010d00 <__kernel_cos>
 8010b14:	e7f5      	b.n	8010b02 <sin+0x5a>
 8010b16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b1a:	ed9d 0b00 	vldr	d0, [sp]
 8010b1e:	2001      	movs	r0, #1
 8010b20:	f000 f9b6 	bl	8010e90 <__kernel_sin>
 8010b24:	ec53 2b10 	vmov	r2, r3, d0
 8010b28:	4610      	mov	r0, r2
 8010b2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010b2e:	e7d2      	b.n	8010ad6 <sin+0x2e>
 8010b30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b34:	ed9d 0b00 	vldr	d0, [sp]
 8010b38:	f000 f8e2 	bl	8010d00 <__kernel_cos>
 8010b3c:	e7f2      	b.n	8010b24 <sin+0x7c>
 8010b3e:	bf00      	nop
	...
 8010b48:	3fe921fb 	.word	0x3fe921fb
 8010b4c:	7fefffff 	.word	0x7fefffff

08010b50 <__ieee754_sqrt>:
 8010b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	4a66      	ldr	r2, [pc, #408]	@ (8010cf0 <__ieee754_sqrt+0x1a0>)
 8010b56:	ec55 4b10 	vmov	r4, r5, d0
 8010b5a:	43aa      	bics	r2, r5
 8010b5c:	462b      	mov	r3, r5
 8010b5e:	4621      	mov	r1, r4
 8010b60:	d110      	bne.n	8010b84 <__ieee754_sqrt+0x34>
 8010b62:	4622      	mov	r2, r4
 8010b64:	4620      	mov	r0, r4
 8010b66:	4629      	mov	r1, r5
 8010b68:	f7ef fd46 	bl	80005f8 <__aeabi_dmul>
 8010b6c:	4602      	mov	r2, r0
 8010b6e:	460b      	mov	r3, r1
 8010b70:	4620      	mov	r0, r4
 8010b72:	4629      	mov	r1, r5
 8010b74:	f7ef fb8a 	bl	800028c <__adddf3>
 8010b78:	4604      	mov	r4, r0
 8010b7a:	460d      	mov	r5, r1
 8010b7c:	ec45 4b10 	vmov	d0, r4, r5
 8010b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b84:	2d00      	cmp	r5, #0
 8010b86:	dc0e      	bgt.n	8010ba6 <__ieee754_sqrt+0x56>
 8010b88:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010b8c:	4322      	orrs	r2, r4
 8010b8e:	d0f5      	beq.n	8010b7c <__ieee754_sqrt+0x2c>
 8010b90:	b19d      	cbz	r5, 8010bba <__ieee754_sqrt+0x6a>
 8010b92:	4622      	mov	r2, r4
 8010b94:	4620      	mov	r0, r4
 8010b96:	4629      	mov	r1, r5
 8010b98:	f7ef fb76 	bl	8000288 <__aeabi_dsub>
 8010b9c:	4602      	mov	r2, r0
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	f7ef fe54 	bl	800084c <__aeabi_ddiv>
 8010ba4:	e7e8      	b.n	8010b78 <__ieee754_sqrt+0x28>
 8010ba6:	152a      	asrs	r2, r5, #20
 8010ba8:	d115      	bne.n	8010bd6 <__ieee754_sqrt+0x86>
 8010baa:	2000      	movs	r0, #0
 8010bac:	e009      	b.n	8010bc2 <__ieee754_sqrt+0x72>
 8010bae:	0acb      	lsrs	r3, r1, #11
 8010bb0:	3a15      	subs	r2, #21
 8010bb2:	0549      	lsls	r1, r1, #21
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d0fa      	beq.n	8010bae <__ieee754_sqrt+0x5e>
 8010bb8:	e7f7      	b.n	8010baa <__ieee754_sqrt+0x5a>
 8010bba:	462a      	mov	r2, r5
 8010bbc:	e7fa      	b.n	8010bb4 <__ieee754_sqrt+0x64>
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	3001      	adds	r0, #1
 8010bc2:	02dc      	lsls	r4, r3, #11
 8010bc4:	d5fb      	bpl.n	8010bbe <__ieee754_sqrt+0x6e>
 8010bc6:	1e44      	subs	r4, r0, #1
 8010bc8:	1b12      	subs	r2, r2, r4
 8010bca:	f1c0 0420 	rsb	r4, r0, #32
 8010bce:	fa21 f404 	lsr.w	r4, r1, r4
 8010bd2:	4323      	orrs	r3, r4
 8010bd4:	4081      	lsls	r1, r0
 8010bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010bda:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8010bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010be2:	07d2      	lsls	r2, r2, #31
 8010be4:	bf5c      	itt	pl
 8010be6:	005b      	lslpl	r3, r3, #1
 8010be8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010bf0:	bf58      	it	pl
 8010bf2:	0049      	lslpl	r1, r1, #1
 8010bf4:	2600      	movs	r6, #0
 8010bf6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010bfa:	107f      	asrs	r7, r7, #1
 8010bfc:	0049      	lsls	r1, r1, #1
 8010bfe:	2016      	movs	r0, #22
 8010c00:	4632      	mov	r2, r6
 8010c02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010c06:	1915      	adds	r5, r2, r4
 8010c08:	429d      	cmp	r5, r3
 8010c0a:	bfde      	ittt	le
 8010c0c:	192a      	addle	r2, r5, r4
 8010c0e:	1b5b      	suble	r3, r3, r5
 8010c10:	1936      	addle	r6, r6, r4
 8010c12:	0fcd      	lsrs	r5, r1, #31
 8010c14:	3801      	subs	r0, #1
 8010c16:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8010c1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010c1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010c22:	d1f0      	bne.n	8010c06 <__ieee754_sqrt+0xb6>
 8010c24:	4605      	mov	r5, r0
 8010c26:	2420      	movs	r4, #32
 8010c28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	eb0c 0e00 	add.w	lr, ip, r0
 8010c32:	dc02      	bgt.n	8010c3a <__ieee754_sqrt+0xea>
 8010c34:	d113      	bne.n	8010c5e <__ieee754_sqrt+0x10e>
 8010c36:	458e      	cmp	lr, r1
 8010c38:	d811      	bhi.n	8010c5e <__ieee754_sqrt+0x10e>
 8010c3a:	f1be 0f00 	cmp.w	lr, #0
 8010c3e:	eb0e 000c 	add.w	r0, lr, ip
 8010c42:	da3f      	bge.n	8010cc4 <__ieee754_sqrt+0x174>
 8010c44:	2800      	cmp	r0, #0
 8010c46:	db3d      	blt.n	8010cc4 <__ieee754_sqrt+0x174>
 8010c48:	f102 0801 	add.w	r8, r2, #1
 8010c4c:	1a9b      	subs	r3, r3, r2
 8010c4e:	458e      	cmp	lr, r1
 8010c50:	bf88      	it	hi
 8010c52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010c56:	eba1 010e 	sub.w	r1, r1, lr
 8010c5a:	4465      	add	r5, ip
 8010c5c:	4642      	mov	r2, r8
 8010c5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010c62:	3c01      	subs	r4, #1
 8010c64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010c68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010c6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010c70:	d1dc      	bne.n	8010c2c <__ieee754_sqrt+0xdc>
 8010c72:	4319      	orrs	r1, r3
 8010c74:	d01b      	beq.n	8010cae <__ieee754_sqrt+0x15e>
 8010c76:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8010cf4 <__ieee754_sqrt+0x1a4>
 8010c7a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8010cf8 <__ieee754_sqrt+0x1a8>
 8010c7e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010c82:	e9db 2300 	ldrd	r2, r3, [fp]
 8010c86:	f7ef faff 	bl	8000288 <__aeabi_dsub>
 8010c8a:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c8e:	4602      	mov	r2, r0
 8010c90:	460b      	mov	r3, r1
 8010c92:	4640      	mov	r0, r8
 8010c94:	4649      	mov	r1, r9
 8010c96:	f7ef ff2b 	bl	8000af0 <__aeabi_dcmple>
 8010c9a:	b140      	cbz	r0, 8010cae <__ieee754_sqrt+0x15e>
 8010c9c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8010ca0:	e9da 0100 	ldrd	r0, r1, [sl]
 8010ca4:	e9db 2300 	ldrd	r2, r3, [fp]
 8010ca8:	d10e      	bne.n	8010cc8 <__ieee754_sqrt+0x178>
 8010caa:	3601      	adds	r6, #1
 8010cac:	4625      	mov	r5, r4
 8010cae:	1073      	asrs	r3, r6, #1
 8010cb0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8010cb4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8010cb8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8010cbc:	086b      	lsrs	r3, r5, #1
 8010cbe:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8010cc2:	e759      	b.n	8010b78 <__ieee754_sqrt+0x28>
 8010cc4:	4690      	mov	r8, r2
 8010cc6:	e7c1      	b.n	8010c4c <__ieee754_sqrt+0xfc>
 8010cc8:	f7ef fae0 	bl	800028c <__adddf3>
 8010ccc:	e9da 8900 	ldrd	r8, r9, [sl]
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	4640      	mov	r0, r8
 8010cd6:	4649      	mov	r1, r9
 8010cd8:	f7ef ff00 	bl	8000adc <__aeabi_dcmplt>
 8010cdc:	b120      	cbz	r0, 8010ce8 <__ieee754_sqrt+0x198>
 8010cde:	1cab      	adds	r3, r5, #2
 8010ce0:	bf08      	it	eq
 8010ce2:	3601      	addeq	r6, #1
 8010ce4:	3502      	adds	r5, #2
 8010ce6:	e7e2      	b.n	8010cae <__ieee754_sqrt+0x15e>
 8010ce8:	1c6b      	adds	r3, r5, #1
 8010cea:	f023 0501 	bic.w	r5, r3, #1
 8010cee:	e7de      	b.n	8010cae <__ieee754_sqrt+0x15e>
 8010cf0:	7ff00000 	.word	0x7ff00000
 8010cf4:	080128f8 	.word	0x080128f8
 8010cf8:	080128f0 	.word	0x080128f0
 8010cfc:	00000000 	.word	0x00000000

08010d00 <__kernel_cos>:
 8010d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	ec57 6b10 	vmov	r6, r7, d0
 8010d08:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010d0c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8010d10:	ed8d 1b00 	vstr	d1, [sp]
 8010d14:	d206      	bcs.n	8010d24 <__kernel_cos+0x24>
 8010d16:	4630      	mov	r0, r6
 8010d18:	4639      	mov	r1, r7
 8010d1a:	f7ef ff1d 	bl	8000b58 <__aeabi_d2iz>
 8010d1e:	2800      	cmp	r0, #0
 8010d20:	f000 8088 	beq.w	8010e34 <__kernel_cos+0x134>
 8010d24:	4632      	mov	r2, r6
 8010d26:	463b      	mov	r3, r7
 8010d28:	4630      	mov	r0, r6
 8010d2a:	4639      	mov	r1, r7
 8010d2c:	f7ef fc64 	bl	80005f8 <__aeabi_dmul>
 8010d30:	4b51      	ldr	r3, [pc, #324]	@ (8010e78 <__kernel_cos+0x178>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	4604      	mov	r4, r0
 8010d36:	460d      	mov	r5, r1
 8010d38:	f7ef fc5e 	bl	80005f8 <__aeabi_dmul>
 8010d3c:	a340      	add	r3, pc, #256	@ (adr r3, 8010e40 <__kernel_cos+0x140>)
 8010d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d42:	4682      	mov	sl, r0
 8010d44:	468b      	mov	fp, r1
 8010d46:	4620      	mov	r0, r4
 8010d48:	4629      	mov	r1, r5
 8010d4a:	f7ef fc55 	bl	80005f8 <__aeabi_dmul>
 8010d4e:	a33e      	add	r3, pc, #248	@ (adr r3, 8010e48 <__kernel_cos+0x148>)
 8010d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d54:	f7ef fa9a 	bl	800028c <__adddf3>
 8010d58:	4622      	mov	r2, r4
 8010d5a:	462b      	mov	r3, r5
 8010d5c:	f7ef fc4c 	bl	80005f8 <__aeabi_dmul>
 8010d60:	a33b      	add	r3, pc, #236	@ (adr r3, 8010e50 <__kernel_cos+0x150>)
 8010d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d66:	f7ef fa8f 	bl	8000288 <__aeabi_dsub>
 8010d6a:	4622      	mov	r2, r4
 8010d6c:	462b      	mov	r3, r5
 8010d6e:	f7ef fc43 	bl	80005f8 <__aeabi_dmul>
 8010d72:	a339      	add	r3, pc, #228	@ (adr r3, 8010e58 <__kernel_cos+0x158>)
 8010d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d78:	f7ef fa88 	bl	800028c <__adddf3>
 8010d7c:	4622      	mov	r2, r4
 8010d7e:	462b      	mov	r3, r5
 8010d80:	f7ef fc3a 	bl	80005f8 <__aeabi_dmul>
 8010d84:	a336      	add	r3, pc, #216	@ (adr r3, 8010e60 <__kernel_cos+0x160>)
 8010d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8a:	f7ef fa7d 	bl	8000288 <__aeabi_dsub>
 8010d8e:	4622      	mov	r2, r4
 8010d90:	462b      	mov	r3, r5
 8010d92:	f7ef fc31 	bl	80005f8 <__aeabi_dmul>
 8010d96:	a334      	add	r3, pc, #208	@ (adr r3, 8010e68 <__kernel_cos+0x168>)
 8010d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d9c:	f7ef fa76 	bl	800028c <__adddf3>
 8010da0:	4622      	mov	r2, r4
 8010da2:	462b      	mov	r3, r5
 8010da4:	f7ef fc28 	bl	80005f8 <__aeabi_dmul>
 8010da8:	4622      	mov	r2, r4
 8010daa:	462b      	mov	r3, r5
 8010dac:	f7ef fc24 	bl	80005f8 <__aeabi_dmul>
 8010db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010db4:	4604      	mov	r4, r0
 8010db6:	460d      	mov	r5, r1
 8010db8:	4630      	mov	r0, r6
 8010dba:	4639      	mov	r1, r7
 8010dbc:	f7ef fc1c 	bl	80005f8 <__aeabi_dmul>
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f7ef fa5e 	bl	8000288 <__aeabi_dsub>
 8010dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8010e7c <__kernel_cos+0x17c>)
 8010dce:	4598      	cmp	r8, r3
 8010dd0:	4606      	mov	r6, r0
 8010dd2:	460f      	mov	r7, r1
 8010dd4:	d810      	bhi.n	8010df8 <__kernel_cos+0xf8>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	460b      	mov	r3, r1
 8010dda:	4650      	mov	r0, sl
 8010ddc:	4659      	mov	r1, fp
 8010dde:	f7ef fa53 	bl	8000288 <__aeabi_dsub>
 8010de2:	460b      	mov	r3, r1
 8010de4:	4926      	ldr	r1, [pc, #152]	@ (8010e80 <__kernel_cos+0x180>)
 8010de6:	4602      	mov	r2, r0
 8010de8:	2000      	movs	r0, #0
 8010dea:	f7ef fa4d 	bl	8000288 <__aeabi_dsub>
 8010dee:	ec41 0b10 	vmov	d0, r0, r1
 8010df2:	b003      	add	sp, #12
 8010df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010df8:	4b22      	ldr	r3, [pc, #136]	@ (8010e84 <__kernel_cos+0x184>)
 8010dfa:	4921      	ldr	r1, [pc, #132]	@ (8010e80 <__kernel_cos+0x180>)
 8010dfc:	4598      	cmp	r8, r3
 8010dfe:	bf8c      	ite	hi
 8010e00:	4d21      	ldrhi	r5, [pc, #132]	@ (8010e88 <__kernel_cos+0x188>)
 8010e02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8010e06:	2400      	movs	r4, #0
 8010e08:	4622      	mov	r2, r4
 8010e0a:	462b      	mov	r3, r5
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	f7ef fa3b 	bl	8000288 <__aeabi_dsub>
 8010e12:	4622      	mov	r2, r4
 8010e14:	4680      	mov	r8, r0
 8010e16:	4689      	mov	r9, r1
 8010e18:	462b      	mov	r3, r5
 8010e1a:	4650      	mov	r0, sl
 8010e1c:	4659      	mov	r1, fp
 8010e1e:	f7ef fa33 	bl	8000288 <__aeabi_dsub>
 8010e22:	4632      	mov	r2, r6
 8010e24:	463b      	mov	r3, r7
 8010e26:	f7ef fa2f 	bl	8000288 <__aeabi_dsub>
 8010e2a:	4602      	mov	r2, r0
 8010e2c:	460b      	mov	r3, r1
 8010e2e:	4640      	mov	r0, r8
 8010e30:	4649      	mov	r1, r9
 8010e32:	e7da      	b.n	8010dea <__kernel_cos+0xea>
 8010e34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8010e70 <__kernel_cos+0x170>
 8010e38:	e7db      	b.n	8010df2 <__kernel_cos+0xf2>
 8010e3a:	bf00      	nop
 8010e3c:	f3af 8000 	nop.w
 8010e40:	be8838d4 	.word	0xbe8838d4
 8010e44:	bda8fae9 	.word	0xbda8fae9
 8010e48:	bdb4b1c4 	.word	0xbdb4b1c4
 8010e4c:	3e21ee9e 	.word	0x3e21ee9e
 8010e50:	809c52ad 	.word	0x809c52ad
 8010e54:	3e927e4f 	.word	0x3e927e4f
 8010e58:	19cb1590 	.word	0x19cb1590
 8010e5c:	3efa01a0 	.word	0x3efa01a0
 8010e60:	16c15177 	.word	0x16c15177
 8010e64:	3f56c16c 	.word	0x3f56c16c
 8010e68:	5555554c 	.word	0x5555554c
 8010e6c:	3fa55555 	.word	0x3fa55555
 8010e70:	00000000 	.word	0x00000000
 8010e74:	3ff00000 	.word	0x3ff00000
 8010e78:	3fe00000 	.word	0x3fe00000
 8010e7c:	3fd33332 	.word	0x3fd33332
 8010e80:	3ff00000 	.word	0x3ff00000
 8010e84:	3fe90000 	.word	0x3fe90000
 8010e88:	3fd20000 	.word	0x3fd20000
 8010e8c:	00000000 	.word	0x00000000

08010e90 <__kernel_sin>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ec55 4b10 	vmov	r4, r5, d0
 8010e98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010e9c:	b085      	sub	sp, #20
 8010e9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8010ea2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8010ea6:	4680      	mov	r8, r0
 8010ea8:	d205      	bcs.n	8010eb6 <__kernel_sin+0x26>
 8010eaa:	4620      	mov	r0, r4
 8010eac:	4629      	mov	r1, r5
 8010eae:	f7ef fe53 	bl	8000b58 <__aeabi_d2iz>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d052      	beq.n	8010f5c <__kernel_sin+0xcc>
 8010eb6:	4622      	mov	r2, r4
 8010eb8:	462b      	mov	r3, r5
 8010eba:	4620      	mov	r0, r4
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	f7ef fb9b 	bl	80005f8 <__aeabi_dmul>
 8010ec2:	4682      	mov	sl, r0
 8010ec4:	468b      	mov	fp, r1
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	4620      	mov	r0, r4
 8010ecc:	4629      	mov	r1, r5
 8010ece:	f7ef fb93 	bl	80005f8 <__aeabi_dmul>
 8010ed2:	a342      	add	r3, pc, #264	@ (adr r3, 8010fdc <__kernel_sin+0x14c>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	e9cd 0100 	strd	r0, r1, [sp]
 8010edc:	4650      	mov	r0, sl
 8010ede:	4659      	mov	r1, fp
 8010ee0:	f7ef fb8a 	bl	80005f8 <__aeabi_dmul>
 8010ee4:	a33f      	add	r3, pc, #252	@ (adr r3, 8010fe4 <__kernel_sin+0x154>)
 8010ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eea:	f7ef f9cd 	bl	8000288 <__aeabi_dsub>
 8010eee:	4652      	mov	r2, sl
 8010ef0:	465b      	mov	r3, fp
 8010ef2:	f7ef fb81 	bl	80005f8 <__aeabi_dmul>
 8010ef6:	a33d      	add	r3, pc, #244	@ (adr r3, 8010fec <__kernel_sin+0x15c>)
 8010ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efc:	f7ef f9c6 	bl	800028c <__adddf3>
 8010f00:	4652      	mov	r2, sl
 8010f02:	465b      	mov	r3, fp
 8010f04:	f7ef fb78 	bl	80005f8 <__aeabi_dmul>
 8010f08:	a33a      	add	r3, pc, #232	@ (adr r3, 8010ff4 <__kernel_sin+0x164>)
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	f7ef f9bb 	bl	8000288 <__aeabi_dsub>
 8010f12:	4652      	mov	r2, sl
 8010f14:	465b      	mov	r3, fp
 8010f16:	f7ef fb6f 	bl	80005f8 <__aeabi_dmul>
 8010f1a:	a338      	add	r3, pc, #224	@ (adr r3, 8010ffc <__kernel_sin+0x16c>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	f7ef f9b4 	bl	800028c <__adddf3>
 8010f24:	4606      	mov	r6, r0
 8010f26:	460f      	mov	r7, r1
 8010f28:	f1b8 0f00 	cmp.w	r8, #0
 8010f2c:	d11b      	bne.n	8010f66 <__kernel_sin+0xd6>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	460b      	mov	r3, r1
 8010f32:	4650      	mov	r0, sl
 8010f34:	4659      	mov	r1, fp
 8010f36:	f7ef fb5f 	bl	80005f8 <__aeabi_dmul>
 8010f3a:	a325      	add	r3, pc, #148	@ (adr r3, 8010fd0 <__kernel_sin+0x140>)
 8010f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f40:	f7ef f9a2 	bl	8000288 <__aeabi_dsub>
 8010f44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f48:	f7ef fb56 	bl	80005f8 <__aeabi_dmul>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	460b      	mov	r3, r1
 8010f50:	4620      	mov	r0, r4
 8010f52:	4629      	mov	r1, r5
 8010f54:	f7ef f99a 	bl	800028c <__adddf3>
 8010f58:	4604      	mov	r4, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	ec45 4b10 	vmov	d0, r4, r5
 8010f60:	b005      	add	sp, #20
 8010f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8010fd8 <__kernel_sin+0x148>)
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f7ef fb43 	bl	80005f8 <__aeabi_dmul>
 8010f72:	4632      	mov	r2, r6
 8010f74:	4680      	mov	r8, r0
 8010f76:	4689      	mov	r9, r1
 8010f78:	463b      	mov	r3, r7
 8010f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f7e:	f7ef fb3b 	bl	80005f8 <__aeabi_dmul>
 8010f82:	4602      	mov	r2, r0
 8010f84:	460b      	mov	r3, r1
 8010f86:	4640      	mov	r0, r8
 8010f88:	4649      	mov	r1, r9
 8010f8a:	f7ef f97d 	bl	8000288 <__aeabi_dsub>
 8010f8e:	4652      	mov	r2, sl
 8010f90:	465b      	mov	r3, fp
 8010f92:	f7ef fb31 	bl	80005f8 <__aeabi_dmul>
 8010f96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010f9a:	f7ef f975 	bl	8000288 <__aeabi_dsub>
 8010f9e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010fd0 <__kernel_sin+0x140>)
 8010fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	460f      	mov	r7, r1
 8010fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fac:	f7ef fb24 	bl	80005f8 <__aeabi_dmul>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	460b      	mov	r3, r1
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	4639      	mov	r1, r7
 8010fb8:	f7ef f968 	bl	800028c <__adddf3>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	460b      	mov	r3, r1
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	f7ef f960 	bl	8000288 <__aeabi_dsub>
 8010fc8:	e7c6      	b.n	8010f58 <__kernel_sin+0xc8>
 8010fca:	bf00      	nop
 8010fcc:	f3af 8000 	nop.w
 8010fd0:	55555549 	.word	0x55555549
 8010fd4:	3fc55555 	.word	0x3fc55555
 8010fd8:	3fe00000 	.word	0x3fe00000
 8010fdc:	5acfd57c 	.word	0x5acfd57c
 8010fe0:	3de5d93a 	.word	0x3de5d93a
 8010fe4:	8a2b9ceb 	.word	0x8a2b9ceb
 8010fe8:	3e5ae5e6 	.word	0x3e5ae5e6
 8010fec:	57b1fe7d 	.word	0x57b1fe7d
 8010ff0:	3ec71de3 	.word	0x3ec71de3
 8010ff4:	19c161d5 	.word	0x19c161d5
 8010ff8:	3f2a01a0 	.word	0x3f2a01a0
 8010ffc:	1110f8a6 	.word	0x1110f8a6
 8011000:	3f811111 	.word	0x3f811111
 8011004:	00000000 	.word	0x00000000

08011008 <__ieee754_atan2>:
 8011008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801100c:	ec57 6b11 	vmov	r6, r7, d1
 8011010:	4273      	negs	r3, r6
 8011012:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8011190 <__ieee754_atan2+0x188>
 8011016:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801101a:	4333      	orrs	r3, r6
 801101c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011020:	4543      	cmp	r3, r8
 8011022:	ec51 0b10 	vmov	r0, r1, d0
 8011026:	4635      	mov	r5, r6
 8011028:	d809      	bhi.n	801103e <__ieee754_atan2+0x36>
 801102a:	4244      	negs	r4, r0
 801102c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011030:	4304      	orrs	r4, r0
 8011032:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011036:	4544      	cmp	r4, r8
 8011038:	468e      	mov	lr, r1
 801103a:	4681      	mov	r9, r0
 801103c:	d907      	bls.n	801104e <__ieee754_atan2+0x46>
 801103e:	4632      	mov	r2, r6
 8011040:	463b      	mov	r3, r7
 8011042:	f7ef f923 	bl	800028c <__adddf3>
 8011046:	ec41 0b10 	vmov	d0, r0, r1
 801104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801104e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8011052:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8011056:	4334      	orrs	r4, r6
 8011058:	d103      	bne.n	8011062 <__ieee754_atan2+0x5a>
 801105a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801105e:	f000 ba97 	b.w	8011590 <atan>
 8011062:	17bc      	asrs	r4, r7, #30
 8011064:	f004 0402 	and.w	r4, r4, #2
 8011068:	ea53 0909 	orrs.w	r9, r3, r9
 801106c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011070:	d107      	bne.n	8011082 <__ieee754_atan2+0x7a>
 8011072:	2c02      	cmp	r4, #2
 8011074:	d05f      	beq.n	8011136 <__ieee754_atan2+0x12e>
 8011076:	2c03      	cmp	r4, #3
 8011078:	d1e5      	bne.n	8011046 <__ieee754_atan2+0x3e>
 801107a:	a143      	add	r1, pc, #268	@ (adr r1, 8011188 <__ieee754_atan2+0x180>)
 801107c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011080:	e7e1      	b.n	8011046 <__ieee754_atan2+0x3e>
 8011082:	4315      	orrs	r5, r2
 8011084:	d106      	bne.n	8011094 <__ieee754_atan2+0x8c>
 8011086:	f1be 0f00 	cmp.w	lr, #0
 801108a:	db5f      	blt.n	801114c <__ieee754_atan2+0x144>
 801108c:	a136      	add	r1, pc, #216	@ (adr r1, 8011168 <__ieee754_atan2+0x160>)
 801108e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011092:	e7d8      	b.n	8011046 <__ieee754_atan2+0x3e>
 8011094:	4542      	cmp	r2, r8
 8011096:	d10f      	bne.n	80110b8 <__ieee754_atan2+0xb0>
 8011098:	4293      	cmp	r3, r2
 801109a:	f104 34ff 	add.w	r4, r4, #4294967295
 801109e:	d107      	bne.n	80110b0 <__ieee754_atan2+0xa8>
 80110a0:	2c02      	cmp	r4, #2
 80110a2:	d84c      	bhi.n	801113e <__ieee754_atan2+0x136>
 80110a4:	4b36      	ldr	r3, [pc, #216]	@ (8011180 <__ieee754_atan2+0x178>)
 80110a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80110aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80110ae:	e7ca      	b.n	8011046 <__ieee754_atan2+0x3e>
 80110b0:	2c02      	cmp	r4, #2
 80110b2:	d848      	bhi.n	8011146 <__ieee754_atan2+0x13e>
 80110b4:	4b33      	ldr	r3, [pc, #204]	@ (8011184 <__ieee754_atan2+0x17c>)
 80110b6:	e7f6      	b.n	80110a6 <__ieee754_atan2+0x9e>
 80110b8:	4543      	cmp	r3, r8
 80110ba:	d0e4      	beq.n	8011086 <__ieee754_atan2+0x7e>
 80110bc:	1a9b      	subs	r3, r3, r2
 80110be:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80110c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80110c6:	da1e      	bge.n	8011106 <__ieee754_atan2+0xfe>
 80110c8:	2f00      	cmp	r7, #0
 80110ca:	da01      	bge.n	80110d0 <__ieee754_atan2+0xc8>
 80110cc:	323c      	adds	r2, #60	@ 0x3c
 80110ce:	db1e      	blt.n	801110e <__ieee754_atan2+0x106>
 80110d0:	4632      	mov	r2, r6
 80110d2:	463b      	mov	r3, r7
 80110d4:	f7ef fbba 	bl	800084c <__aeabi_ddiv>
 80110d8:	ec41 0b10 	vmov	d0, r0, r1
 80110dc:	f000 fbf0 	bl	80118c0 <fabs>
 80110e0:	f000 fa56 	bl	8011590 <atan>
 80110e4:	ec51 0b10 	vmov	r0, r1, d0
 80110e8:	2c01      	cmp	r4, #1
 80110ea:	d013      	beq.n	8011114 <__ieee754_atan2+0x10c>
 80110ec:	2c02      	cmp	r4, #2
 80110ee:	d015      	beq.n	801111c <__ieee754_atan2+0x114>
 80110f0:	2c00      	cmp	r4, #0
 80110f2:	d0a8      	beq.n	8011046 <__ieee754_atan2+0x3e>
 80110f4:	a318      	add	r3, pc, #96	@ (adr r3, 8011158 <__ieee754_atan2+0x150>)
 80110f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fa:	f7ef f8c5 	bl	8000288 <__aeabi_dsub>
 80110fe:	a318      	add	r3, pc, #96	@ (adr r3, 8011160 <__ieee754_atan2+0x158>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	e014      	b.n	8011130 <__ieee754_atan2+0x128>
 8011106:	a118      	add	r1, pc, #96	@ (adr r1, 8011168 <__ieee754_atan2+0x160>)
 8011108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801110c:	e7ec      	b.n	80110e8 <__ieee754_atan2+0xe0>
 801110e:	2000      	movs	r0, #0
 8011110:	2100      	movs	r1, #0
 8011112:	e7e9      	b.n	80110e8 <__ieee754_atan2+0xe0>
 8011114:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011118:	4619      	mov	r1, r3
 801111a:	e794      	b.n	8011046 <__ieee754_atan2+0x3e>
 801111c:	a30e      	add	r3, pc, #56	@ (adr r3, 8011158 <__ieee754_atan2+0x150>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ef f8b1 	bl	8000288 <__aeabi_dsub>
 8011126:	4602      	mov	r2, r0
 8011128:	460b      	mov	r3, r1
 801112a:	a10d      	add	r1, pc, #52	@ (adr r1, 8011160 <__ieee754_atan2+0x158>)
 801112c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011130:	f7ef f8aa 	bl	8000288 <__aeabi_dsub>
 8011134:	e787      	b.n	8011046 <__ieee754_atan2+0x3e>
 8011136:	a10a      	add	r1, pc, #40	@ (adr r1, 8011160 <__ieee754_atan2+0x158>)
 8011138:	e9d1 0100 	ldrd	r0, r1, [r1]
 801113c:	e783      	b.n	8011046 <__ieee754_atan2+0x3e>
 801113e:	a10c      	add	r1, pc, #48	@ (adr r1, 8011170 <__ieee754_atan2+0x168>)
 8011140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011144:	e77f      	b.n	8011046 <__ieee754_atan2+0x3e>
 8011146:	2000      	movs	r0, #0
 8011148:	2100      	movs	r1, #0
 801114a:	e77c      	b.n	8011046 <__ieee754_atan2+0x3e>
 801114c:	a10a      	add	r1, pc, #40	@ (adr r1, 8011178 <__ieee754_atan2+0x170>)
 801114e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011152:	e778      	b.n	8011046 <__ieee754_atan2+0x3e>
 8011154:	f3af 8000 	nop.w
 8011158:	33145c07 	.word	0x33145c07
 801115c:	3ca1a626 	.word	0x3ca1a626
 8011160:	54442d18 	.word	0x54442d18
 8011164:	400921fb 	.word	0x400921fb
 8011168:	54442d18 	.word	0x54442d18
 801116c:	3ff921fb 	.word	0x3ff921fb
 8011170:	54442d18 	.word	0x54442d18
 8011174:	3fe921fb 	.word	0x3fe921fb
 8011178:	54442d18 	.word	0x54442d18
 801117c:	bff921fb 	.word	0xbff921fb
 8011180:	08012918 	.word	0x08012918
 8011184:	08012900 	.word	0x08012900
 8011188:	54442d18 	.word	0x54442d18
 801118c:	c00921fb 	.word	0xc00921fb
 8011190:	7ff00000 	.word	0x7ff00000
 8011194:	00000000 	.word	0x00000000

08011198 <__ieee754_rem_pio2>:
 8011198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801119c:	ec57 6b10 	vmov	r6, r7, d0
 80111a0:	4bc5      	ldr	r3, [pc, #788]	@ (80114b8 <__ieee754_rem_pio2+0x320>)
 80111a2:	b08d      	sub	sp, #52	@ 0x34
 80111a4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80111a8:	4598      	cmp	r8, r3
 80111aa:	4604      	mov	r4, r0
 80111ac:	9704      	str	r7, [sp, #16]
 80111ae:	d807      	bhi.n	80111c0 <__ieee754_rem_pio2+0x28>
 80111b0:	2200      	movs	r2, #0
 80111b2:	2300      	movs	r3, #0
 80111b4:	ed80 0b00 	vstr	d0, [r0]
 80111b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80111bc:	2500      	movs	r5, #0
 80111be:	e028      	b.n	8011212 <__ieee754_rem_pio2+0x7a>
 80111c0:	4bbe      	ldr	r3, [pc, #760]	@ (80114bc <__ieee754_rem_pio2+0x324>)
 80111c2:	4598      	cmp	r8, r3
 80111c4:	d878      	bhi.n	80112b8 <__ieee754_rem_pio2+0x120>
 80111c6:	9b04      	ldr	r3, [sp, #16]
 80111c8:	4dbd      	ldr	r5, [pc, #756]	@ (80114c0 <__ieee754_rem_pio2+0x328>)
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	4630      	mov	r0, r6
 80111ce:	a3ac      	add	r3, pc, #688	@ (adr r3, 8011480 <__ieee754_rem_pio2+0x2e8>)
 80111d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d4:	4639      	mov	r1, r7
 80111d6:	dd38      	ble.n	801124a <__ieee754_rem_pio2+0xb2>
 80111d8:	f7ef f856 	bl	8000288 <__aeabi_dsub>
 80111dc:	45a8      	cmp	r8, r5
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	d01a      	beq.n	801121a <__ieee754_rem_pio2+0x82>
 80111e4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8011488 <__ieee754_rem_pio2+0x2f0>)
 80111e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ea:	f7ef f84d 	bl	8000288 <__aeabi_dsub>
 80111ee:	4602      	mov	r2, r0
 80111f0:	460b      	mov	r3, r1
 80111f2:	4680      	mov	r8, r0
 80111f4:	4689      	mov	r9, r1
 80111f6:	4630      	mov	r0, r6
 80111f8:	4639      	mov	r1, r7
 80111fa:	f7ef f845 	bl	8000288 <__aeabi_dsub>
 80111fe:	a3a2      	add	r3, pc, #648	@ (adr r3, 8011488 <__ieee754_rem_pio2+0x2f0>)
 8011200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011204:	f7ef f840 	bl	8000288 <__aeabi_dsub>
 8011208:	e9c4 8900 	strd	r8, r9, [r4]
 801120c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011210:	2501      	movs	r5, #1
 8011212:	4628      	mov	r0, r5
 8011214:	b00d      	add	sp, #52	@ 0x34
 8011216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801121a:	a39d      	add	r3, pc, #628	@ (adr r3, 8011490 <__ieee754_rem_pio2+0x2f8>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	f7ef f832 	bl	8000288 <__aeabi_dsub>
 8011224:	a39c      	add	r3, pc, #624	@ (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	4606      	mov	r6, r0
 801122c:	460f      	mov	r7, r1
 801122e:	f7ef f82b 	bl	8000288 <__aeabi_dsub>
 8011232:	4602      	mov	r2, r0
 8011234:	460b      	mov	r3, r1
 8011236:	4680      	mov	r8, r0
 8011238:	4689      	mov	r9, r1
 801123a:	4630      	mov	r0, r6
 801123c:	4639      	mov	r1, r7
 801123e:	f7ef f823 	bl	8000288 <__aeabi_dsub>
 8011242:	a395      	add	r3, pc, #596	@ (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	e7dc      	b.n	8011204 <__ieee754_rem_pio2+0x6c>
 801124a:	f7ef f81f 	bl	800028c <__adddf3>
 801124e:	45a8      	cmp	r8, r5
 8011250:	4606      	mov	r6, r0
 8011252:	460f      	mov	r7, r1
 8011254:	d018      	beq.n	8011288 <__ieee754_rem_pio2+0xf0>
 8011256:	a38c      	add	r3, pc, #560	@ (adr r3, 8011488 <__ieee754_rem_pio2+0x2f0>)
 8011258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125c:	f7ef f816 	bl	800028c <__adddf3>
 8011260:	4602      	mov	r2, r0
 8011262:	460b      	mov	r3, r1
 8011264:	4680      	mov	r8, r0
 8011266:	4689      	mov	r9, r1
 8011268:	4630      	mov	r0, r6
 801126a:	4639      	mov	r1, r7
 801126c:	f7ef f80c 	bl	8000288 <__aeabi_dsub>
 8011270:	a385      	add	r3, pc, #532	@ (adr r3, 8011488 <__ieee754_rem_pio2+0x2f0>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	f7ef f809 	bl	800028c <__adddf3>
 801127a:	f04f 35ff 	mov.w	r5, #4294967295
 801127e:	e9c4 8900 	strd	r8, r9, [r4]
 8011282:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011286:	e7c4      	b.n	8011212 <__ieee754_rem_pio2+0x7a>
 8011288:	a381      	add	r3, pc, #516	@ (adr r3, 8011490 <__ieee754_rem_pio2+0x2f8>)
 801128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801128e:	f7ee fffd 	bl	800028c <__adddf3>
 8011292:	a381      	add	r3, pc, #516	@ (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 8011294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011298:	4606      	mov	r6, r0
 801129a:	460f      	mov	r7, r1
 801129c:	f7ee fff6 	bl	800028c <__adddf3>
 80112a0:	4602      	mov	r2, r0
 80112a2:	460b      	mov	r3, r1
 80112a4:	4680      	mov	r8, r0
 80112a6:	4689      	mov	r9, r1
 80112a8:	4630      	mov	r0, r6
 80112aa:	4639      	mov	r1, r7
 80112ac:	f7ee ffec 	bl	8000288 <__aeabi_dsub>
 80112b0:	a379      	add	r3, pc, #484	@ (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 80112b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b6:	e7de      	b.n	8011276 <__ieee754_rem_pio2+0xde>
 80112b8:	4b82      	ldr	r3, [pc, #520]	@ (80114c4 <__ieee754_rem_pio2+0x32c>)
 80112ba:	4598      	cmp	r8, r3
 80112bc:	f200 80d1 	bhi.w	8011462 <__ieee754_rem_pio2+0x2ca>
 80112c0:	f000 fafe 	bl	80118c0 <fabs>
 80112c4:	ec57 6b10 	vmov	r6, r7, d0
 80112c8:	a375      	add	r3, pc, #468	@ (adr r3, 80114a0 <__ieee754_rem_pio2+0x308>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	4630      	mov	r0, r6
 80112d0:	4639      	mov	r1, r7
 80112d2:	f7ef f991 	bl	80005f8 <__aeabi_dmul>
 80112d6:	4b7c      	ldr	r3, [pc, #496]	@ (80114c8 <__ieee754_rem_pio2+0x330>)
 80112d8:	2200      	movs	r2, #0
 80112da:	f7ee ffd7 	bl	800028c <__adddf3>
 80112de:	f7ef fc3b 	bl	8000b58 <__aeabi_d2iz>
 80112e2:	4605      	mov	r5, r0
 80112e4:	f7ef f91e 	bl	8000524 <__aeabi_i2d>
 80112e8:	4602      	mov	r2, r0
 80112ea:	460b      	mov	r3, r1
 80112ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112f0:	a363      	add	r3, pc, #396	@ (adr r3, 8011480 <__ieee754_rem_pio2+0x2e8>)
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	f7ef f97f 	bl	80005f8 <__aeabi_dmul>
 80112fa:	4602      	mov	r2, r0
 80112fc:	460b      	mov	r3, r1
 80112fe:	4630      	mov	r0, r6
 8011300:	4639      	mov	r1, r7
 8011302:	f7ee ffc1 	bl	8000288 <__aeabi_dsub>
 8011306:	a360      	add	r3, pc, #384	@ (adr r3, 8011488 <__ieee754_rem_pio2+0x2f0>)
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	4682      	mov	sl, r0
 801130e:	468b      	mov	fp, r1
 8011310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011314:	f7ef f970 	bl	80005f8 <__aeabi_dmul>
 8011318:	2d1f      	cmp	r5, #31
 801131a:	4606      	mov	r6, r0
 801131c:	460f      	mov	r7, r1
 801131e:	dc0c      	bgt.n	801133a <__ieee754_rem_pio2+0x1a2>
 8011320:	4b6a      	ldr	r3, [pc, #424]	@ (80114cc <__ieee754_rem_pio2+0x334>)
 8011322:	1e6a      	subs	r2, r5, #1
 8011324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011328:	4543      	cmp	r3, r8
 801132a:	d006      	beq.n	801133a <__ieee754_rem_pio2+0x1a2>
 801132c:	4632      	mov	r2, r6
 801132e:	463b      	mov	r3, r7
 8011330:	4650      	mov	r0, sl
 8011332:	4659      	mov	r1, fp
 8011334:	f7ee ffa8 	bl	8000288 <__aeabi_dsub>
 8011338:	e00e      	b.n	8011358 <__ieee754_rem_pio2+0x1c0>
 801133a:	463b      	mov	r3, r7
 801133c:	4632      	mov	r2, r6
 801133e:	4650      	mov	r0, sl
 8011340:	4659      	mov	r1, fp
 8011342:	f7ee ffa1 	bl	8000288 <__aeabi_dsub>
 8011346:	ea4f 5328 	mov.w	r3, r8, asr #20
 801134a:	9305      	str	r3, [sp, #20]
 801134c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011350:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8011354:	2b10      	cmp	r3, #16
 8011356:	dc02      	bgt.n	801135e <__ieee754_rem_pio2+0x1c6>
 8011358:	e9c4 0100 	strd	r0, r1, [r4]
 801135c:	e039      	b.n	80113d2 <__ieee754_rem_pio2+0x23a>
 801135e:	a34c      	add	r3, pc, #304	@ (adr r3, 8011490 <__ieee754_rem_pio2+0x2f8>)
 8011360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011368:	f7ef f946 	bl	80005f8 <__aeabi_dmul>
 801136c:	4606      	mov	r6, r0
 801136e:	460f      	mov	r7, r1
 8011370:	4602      	mov	r2, r0
 8011372:	460b      	mov	r3, r1
 8011374:	4650      	mov	r0, sl
 8011376:	4659      	mov	r1, fp
 8011378:	f7ee ff86 	bl	8000288 <__aeabi_dsub>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4680      	mov	r8, r0
 8011382:	4689      	mov	r9, r1
 8011384:	4650      	mov	r0, sl
 8011386:	4659      	mov	r1, fp
 8011388:	f7ee ff7e 	bl	8000288 <__aeabi_dsub>
 801138c:	4632      	mov	r2, r6
 801138e:	463b      	mov	r3, r7
 8011390:	f7ee ff7a 	bl	8000288 <__aeabi_dsub>
 8011394:	a340      	add	r3, pc, #256	@ (adr r3, 8011498 <__ieee754_rem_pio2+0x300>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	4606      	mov	r6, r0
 801139c:	460f      	mov	r7, r1
 801139e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113a2:	f7ef f929 	bl	80005f8 <__aeabi_dmul>
 80113a6:	4632      	mov	r2, r6
 80113a8:	463b      	mov	r3, r7
 80113aa:	f7ee ff6d 	bl	8000288 <__aeabi_dsub>
 80113ae:	4602      	mov	r2, r0
 80113b0:	460b      	mov	r3, r1
 80113b2:	4606      	mov	r6, r0
 80113b4:	460f      	mov	r7, r1
 80113b6:	4640      	mov	r0, r8
 80113b8:	4649      	mov	r1, r9
 80113ba:	f7ee ff65 	bl	8000288 <__aeabi_dsub>
 80113be:	9a05      	ldr	r2, [sp, #20]
 80113c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113c4:	1ad3      	subs	r3, r2, r3
 80113c6:	2b31      	cmp	r3, #49	@ 0x31
 80113c8:	dc20      	bgt.n	801140c <__ieee754_rem_pio2+0x274>
 80113ca:	e9c4 0100 	strd	r0, r1, [r4]
 80113ce:	46c2      	mov	sl, r8
 80113d0:	46cb      	mov	fp, r9
 80113d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80113d6:	4650      	mov	r0, sl
 80113d8:	4642      	mov	r2, r8
 80113da:	464b      	mov	r3, r9
 80113dc:	4659      	mov	r1, fp
 80113de:	f7ee ff53 	bl	8000288 <__aeabi_dsub>
 80113e2:	463b      	mov	r3, r7
 80113e4:	4632      	mov	r2, r6
 80113e6:	f7ee ff4f 	bl	8000288 <__aeabi_dsub>
 80113ea:	9b04      	ldr	r3, [sp, #16]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80113f2:	f6bf af0e 	bge.w	8011212 <__ieee754_rem_pio2+0x7a>
 80113f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80113fa:	6063      	str	r3, [r4, #4]
 80113fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011400:	f8c4 8000 	str.w	r8, [r4]
 8011404:	60a0      	str	r0, [r4, #8]
 8011406:	60e3      	str	r3, [r4, #12]
 8011408:	426d      	negs	r5, r5
 801140a:	e702      	b.n	8011212 <__ieee754_rem_pio2+0x7a>
 801140c:	a326      	add	r3, pc, #152	@ (adr r3, 80114a8 <__ieee754_rem_pio2+0x310>)
 801140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011416:	f7ef f8ef 	bl	80005f8 <__aeabi_dmul>
 801141a:	4606      	mov	r6, r0
 801141c:	460f      	mov	r7, r1
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	4640      	mov	r0, r8
 8011424:	4649      	mov	r1, r9
 8011426:	f7ee ff2f 	bl	8000288 <__aeabi_dsub>
 801142a:	4602      	mov	r2, r0
 801142c:	460b      	mov	r3, r1
 801142e:	4682      	mov	sl, r0
 8011430:	468b      	mov	fp, r1
 8011432:	4640      	mov	r0, r8
 8011434:	4649      	mov	r1, r9
 8011436:	f7ee ff27 	bl	8000288 <__aeabi_dsub>
 801143a:	4632      	mov	r2, r6
 801143c:	463b      	mov	r3, r7
 801143e:	f7ee ff23 	bl	8000288 <__aeabi_dsub>
 8011442:	a31b      	add	r3, pc, #108	@ (adr r3, 80114b0 <__ieee754_rem_pio2+0x318>)
 8011444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011448:	4606      	mov	r6, r0
 801144a:	460f      	mov	r7, r1
 801144c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011450:	f7ef f8d2 	bl	80005f8 <__aeabi_dmul>
 8011454:	4632      	mov	r2, r6
 8011456:	463b      	mov	r3, r7
 8011458:	f7ee ff16 	bl	8000288 <__aeabi_dsub>
 801145c:	4606      	mov	r6, r0
 801145e:	460f      	mov	r7, r1
 8011460:	e764      	b.n	801132c <__ieee754_rem_pio2+0x194>
 8011462:	4b1b      	ldr	r3, [pc, #108]	@ (80114d0 <__ieee754_rem_pio2+0x338>)
 8011464:	4598      	cmp	r8, r3
 8011466:	d935      	bls.n	80114d4 <__ieee754_rem_pio2+0x33c>
 8011468:	4632      	mov	r2, r6
 801146a:	463b      	mov	r3, r7
 801146c:	4630      	mov	r0, r6
 801146e:	4639      	mov	r1, r7
 8011470:	f7ee ff0a 	bl	8000288 <__aeabi_dsub>
 8011474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011478:	e9c4 0100 	strd	r0, r1, [r4]
 801147c:	e69e      	b.n	80111bc <__ieee754_rem_pio2+0x24>
 801147e:	bf00      	nop
 8011480:	54400000 	.word	0x54400000
 8011484:	3ff921fb 	.word	0x3ff921fb
 8011488:	1a626331 	.word	0x1a626331
 801148c:	3dd0b461 	.word	0x3dd0b461
 8011490:	1a600000 	.word	0x1a600000
 8011494:	3dd0b461 	.word	0x3dd0b461
 8011498:	2e037073 	.word	0x2e037073
 801149c:	3ba3198a 	.word	0x3ba3198a
 80114a0:	6dc9c883 	.word	0x6dc9c883
 80114a4:	3fe45f30 	.word	0x3fe45f30
 80114a8:	2e000000 	.word	0x2e000000
 80114ac:	3ba3198a 	.word	0x3ba3198a
 80114b0:	252049c1 	.word	0x252049c1
 80114b4:	397b839a 	.word	0x397b839a
 80114b8:	3fe921fb 	.word	0x3fe921fb
 80114bc:	4002d97b 	.word	0x4002d97b
 80114c0:	3ff921fb 	.word	0x3ff921fb
 80114c4:	413921fb 	.word	0x413921fb
 80114c8:	3fe00000 	.word	0x3fe00000
 80114cc:	08012930 	.word	0x08012930
 80114d0:	7fefffff 	.word	0x7fefffff
 80114d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80114d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80114dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80114e0:	4630      	mov	r0, r6
 80114e2:	460f      	mov	r7, r1
 80114e4:	f7ef fb38 	bl	8000b58 <__aeabi_d2iz>
 80114e8:	f7ef f81c 	bl	8000524 <__aeabi_i2d>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4630      	mov	r0, r6
 80114f2:	4639      	mov	r1, r7
 80114f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80114f8:	f7ee fec6 	bl	8000288 <__aeabi_dsub>
 80114fc:	4b22      	ldr	r3, [pc, #136]	@ (8011588 <__ieee754_rem_pio2+0x3f0>)
 80114fe:	2200      	movs	r2, #0
 8011500:	f7ef f87a 	bl	80005f8 <__aeabi_dmul>
 8011504:	460f      	mov	r7, r1
 8011506:	4606      	mov	r6, r0
 8011508:	f7ef fb26 	bl	8000b58 <__aeabi_d2iz>
 801150c:	f7ef f80a 	bl	8000524 <__aeabi_i2d>
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4630      	mov	r0, r6
 8011516:	4639      	mov	r1, r7
 8011518:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801151c:	f7ee feb4 	bl	8000288 <__aeabi_dsub>
 8011520:	4b19      	ldr	r3, [pc, #100]	@ (8011588 <__ieee754_rem_pio2+0x3f0>)
 8011522:	2200      	movs	r2, #0
 8011524:	f7ef f868 	bl	80005f8 <__aeabi_dmul>
 8011528:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801152c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8011530:	f04f 0803 	mov.w	r8, #3
 8011534:	2600      	movs	r6, #0
 8011536:	2700      	movs	r7, #0
 8011538:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801153c:	4632      	mov	r2, r6
 801153e:	463b      	mov	r3, r7
 8011540:	46c2      	mov	sl, r8
 8011542:	f108 38ff 	add.w	r8, r8, #4294967295
 8011546:	f7ef fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 801154a:	2800      	cmp	r0, #0
 801154c:	d1f4      	bne.n	8011538 <__ieee754_rem_pio2+0x3a0>
 801154e:	4b0f      	ldr	r3, [pc, #60]	@ (801158c <__ieee754_rem_pio2+0x3f4>)
 8011550:	9301      	str	r3, [sp, #4]
 8011552:	2302      	movs	r3, #2
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	462a      	mov	r2, r5
 8011558:	4653      	mov	r3, sl
 801155a:	4621      	mov	r1, r4
 801155c:	a806      	add	r0, sp, #24
 801155e:	f000 f9b7 	bl	80118d0 <__kernel_rem_pio2>
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	2b00      	cmp	r3, #0
 8011566:	4605      	mov	r5, r0
 8011568:	f6bf ae53 	bge.w	8011212 <__ieee754_rem_pio2+0x7a>
 801156c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8011570:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011574:	e9c4 2300 	strd	r2, r3, [r4]
 8011578:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801157c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011580:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8011584:	e740      	b.n	8011408 <__ieee754_rem_pio2+0x270>
 8011586:	bf00      	nop
 8011588:	41700000 	.word	0x41700000
 801158c:	080129b0 	.word	0x080129b0

08011590 <atan>:
 8011590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011594:	ec55 4b10 	vmov	r4, r5, d0
 8011598:	4bbf      	ldr	r3, [pc, #764]	@ (8011898 <atan+0x308>)
 801159a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801159e:	429e      	cmp	r6, r3
 80115a0:	46ab      	mov	fp, r5
 80115a2:	d918      	bls.n	80115d6 <atan+0x46>
 80115a4:	4bbd      	ldr	r3, [pc, #756]	@ (801189c <atan+0x30c>)
 80115a6:	429e      	cmp	r6, r3
 80115a8:	d801      	bhi.n	80115ae <atan+0x1e>
 80115aa:	d109      	bne.n	80115c0 <atan+0x30>
 80115ac:	b144      	cbz	r4, 80115c0 <atan+0x30>
 80115ae:	4622      	mov	r2, r4
 80115b0:	462b      	mov	r3, r5
 80115b2:	4620      	mov	r0, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	f7ee fe69 	bl	800028c <__adddf3>
 80115ba:	4604      	mov	r4, r0
 80115bc:	460d      	mov	r5, r1
 80115be:	e006      	b.n	80115ce <atan+0x3e>
 80115c0:	f1bb 0f00 	cmp.w	fp, #0
 80115c4:	f340 812b 	ble.w	801181e <atan+0x28e>
 80115c8:	a597      	add	r5, pc, #604	@ (adr r5, 8011828 <atan+0x298>)
 80115ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80115ce:	ec45 4b10 	vmov	d0, r4, r5
 80115d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d6:	4bb2      	ldr	r3, [pc, #712]	@ (80118a0 <atan+0x310>)
 80115d8:	429e      	cmp	r6, r3
 80115da:	d813      	bhi.n	8011604 <atan+0x74>
 80115dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80115e0:	429e      	cmp	r6, r3
 80115e2:	d80c      	bhi.n	80115fe <atan+0x6e>
 80115e4:	a392      	add	r3, pc, #584	@ (adr r3, 8011830 <atan+0x2a0>)
 80115e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	f7ee fe4d 	bl	800028c <__adddf3>
 80115f2:	4bac      	ldr	r3, [pc, #688]	@ (80118a4 <atan+0x314>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	f7ef fa8f 	bl	8000b18 <__aeabi_dcmpgt>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	d1e7      	bne.n	80115ce <atan+0x3e>
 80115fe:	f04f 3aff 	mov.w	sl, #4294967295
 8011602:	e029      	b.n	8011658 <atan+0xc8>
 8011604:	f000 f95c 	bl	80118c0 <fabs>
 8011608:	4ba7      	ldr	r3, [pc, #668]	@ (80118a8 <atan+0x318>)
 801160a:	429e      	cmp	r6, r3
 801160c:	ec55 4b10 	vmov	r4, r5, d0
 8011610:	f200 80bc 	bhi.w	801178c <atan+0x1fc>
 8011614:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011618:	429e      	cmp	r6, r3
 801161a:	f200 809e 	bhi.w	801175a <atan+0x1ca>
 801161e:	4622      	mov	r2, r4
 8011620:	462b      	mov	r3, r5
 8011622:	4620      	mov	r0, r4
 8011624:	4629      	mov	r1, r5
 8011626:	f7ee fe31 	bl	800028c <__adddf3>
 801162a:	4b9e      	ldr	r3, [pc, #632]	@ (80118a4 <atan+0x314>)
 801162c:	2200      	movs	r2, #0
 801162e:	f7ee fe2b 	bl	8000288 <__aeabi_dsub>
 8011632:	2200      	movs	r2, #0
 8011634:	4606      	mov	r6, r0
 8011636:	460f      	mov	r7, r1
 8011638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801163c:	4620      	mov	r0, r4
 801163e:	4629      	mov	r1, r5
 8011640:	f7ee fe24 	bl	800028c <__adddf3>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	4630      	mov	r0, r6
 801164a:	4639      	mov	r1, r7
 801164c:	f7ef f8fe 	bl	800084c <__aeabi_ddiv>
 8011650:	f04f 0a00 	mov.w	sl, #0
 8011654:	4604      	mov	r4, r0
 8011656:	460d      	mov	r5, r1
 8011658:	4622      	mov	r2, r4
 801165a:	462b      	mov	r3, r5
 801165c:	4620      	mov	r0, r4
 801165e:	4629      	mov	r1, r5
 8011660:	f7ee ffca 	bl	80005f8 <__aeabi_dmul>
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	4680      	mov	r8, r0
 801166a:	4689      	mov	r9, r1
 801166c:	f7ee ffc4 	bl	80005f8 <__aeabi_dmul>
 8011670:	a371      	add	r3, pc, #452	@ (adr r3, 8011838 <atan+0x2a8>)
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	4606      	mov	r6, r0
 8011678:	460f      	mov	r7, r1
 801167a:	f7ee ffbd 	bl	80005f8 <__aeabi_dmul>
 801167e:	a370      	add	r3, pc, #448	@ (adr r3, 8011840 <atan+0x2b0>)
 8011680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011684:	f7ee fe02 	bl	800028c <__adddf3>
 8011688:	4632      	mov	r2, r6
 801168a:	463b      	mov	r3, r7
 801168c:	f7ee ffb4 	bl	80005f8 <__aeabi_dmul>
 8011690:	a36d      	add	r3, pc, #436	@ (adr r3, 8011848 <atan+0x2b8>)
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	f7ee fdf9 	bl	800028c <__adddf3>
 801169a:	4632      	mov	r2, r6
 801169c:	463b      	mov	r3, r7
 801169e:	f7ee ffab 	bl	80005f8 <__aeabi_dmul>
 80116a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011850 <atan+0x2c0>)
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	f7ee fdf0 	bl	800028c <__adddf3>
 80116ac:	4632      	mov	r2, r6
 80116ae:	463b      	mov	r3, r7
 80116b0:	f7ee ffa2 	bl	80005f8 <__aeabi_dmul>
 80116b4:	a368      	add	r3, pc, #416	@ (adr r3, 8011858 <atan+0x2c8>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	f7ee fde7 	bl	800028c <__adddf3>
 80116be:	4632      	mov	r2, r6
 80116c0:	463b      	mov	r3, r7
 80116c2:	f7ee ff99 	bl	80005f8 <__aeabi_dmul>
 80116c6:	a366      	add	r3, pc, #408	@ (adr r3, 8011860 <atan+0x2d0>)
 80116c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116cc:	f7ee fdde 	bl	800028c <__adddf3>
 80116d0:	4642      	mov	r2, r8
 80116d2:	464b      	mov	r3, r9
 80116d4:	f7ee ff90 	bl	80005f8 <__aeabi_dmul>
 80116d8:	a363      	add	r3, pc, #396	@ (adr r3, 8011868 <atan+0x2d8>)
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	4680      	mov	r8, r0
 80116e0:	4689      	mov	r9, r1
 80116e2:	4630      	mov	r0, r6
 80116e4:	4639      	mov	r1, r7
 80116e6:	f7ee ff87 	bl	80005f8 <__aeabi_dmul>
 80116ea:	a361      	add	r3, pc, #388	@ (adr r3, 8011870 <atan+0x2e0>)
 80116ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f0:	f7ee fdca 	bl	8000288 <__aeabi_dsub>
 80116f4:	4632      	mov	r2, r6
 80116f6:	463b      	mov	r3, r7
 80116f8:	f7ee ff7e 	bl	80005f8 <__aeabi_dmul>
 80116fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8011878 <atan+0x2e8>)
 80116fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011702:	f7ee fdc1 	bl	8000288 <__aeabi_dsub>
 8011706:	4632      	mov	r2, r6
 8011708:	463b      	mov	r3, r7
 801170a:	f7ee ff75 	bl	80005f8 <__aeabi_dmul>
 801170e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011880 <atan+0x2f0>)
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f7ee fdb8 	bl	8000288 <__aeabi_dsub>
 8011718:	4632      	mov	r2, r6
 801171a:	463b      	mov	r3, r7
 801171c:	f7ee ff6c 	bl	80005f8 <__aeabi_dmul>
 8011720:	a359      	add	r3, pc, #356	@ (adr r3, 8011888 <atan+0x2f8>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	f7ee fdaf 	bl	8000288 <__aeabi_dsub>
 801172a:	4632      	mov	r2, r6
 801172c:	463b      	mov	r3, r7
 801172e:	f7ee ff63 	bl	80005f8 <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4640      	mov	r0, r8
 8011738:	4649      	mov	r1, r9
 801173a:	f7ee fda7 	bl	800028c <__adddf3>
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7ee ff59 	bl	80005f8 <__aeabi_dmul>
 8011746:	f1ba 3fff 	cmp.w	sl, #4294967295
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	d148      	bne.n	80117e2 <atan+0x252>
 8011750:	4620      	mov	r0, r4
 8011752:	4629      	mov	r1, r5
 8011754:	f7ee fd98 	bl	8000288 <__aeabi_dsub>
 8011758:	e72f      	b.n	80115ba <atan+0x2a>
 801175a:	4b52      	ldr	r3, [pc, #328]	@ (80118a4 <atan+0x314>)
 801175c:	2200      	movs	r2, #0
 801175e:	4620      	mov	r0, r4
 8011760:	4629      	mov	r1, r5
 8011762:	f7ee fd91 	bl	8000288 <__aeabi_dsub>
 8011766:	4b4f      	ldr	r3, [pc, #316]	@ (80118a4 <atan+0x314>)
 8011768:	4606      	mov	r6, r0
 801176a:	460f      	mov	r7, r1
 801176c:	2200      	movs	r2, #0
 801176e:	4620      	mov	r0, r4
 8011770:	4629      	mov	r1, r5
 8011772:	f7ee fd8b 	bl	800028c <__adddf3>
 8011776:	4602      	mov	r2, r0
 8011778:	460b      	mov	r3, r1
 801177a:	4630      	mov	r0, r6
 801177c:	4639      	mov	r1, r7
 801177e:	f7ef f865 	bl	800084c <__aeabi_ddiv>
 8011782:	f04f 0a01 	mov.w	sl, #1
 8011786:	4604      	mov	r4, r0
 8011788:	460d      	mov	r5, r1
 801178a:	e765      	b.n	8011658 <atan+0xc8>
 801178c:	4b47      	ldr	r3, [pc, #284]	@ (80118ac <atan+0x31c>)
 801178e:	429e      	cmp	r6, r3
 8011790:	d21c      	bcs.n	80117cc <atan+0x23c>
 8011792:	4b47      	ldr	r3, [pc, #284]	@ (80118b0 <atan+0x320>)
 8011794:	2200      	movs	r2, #0
 8011796:	4620      	mov	r0, r4
 8011798:	4629      	mov	r1, r5
 801179a:	f7ee fd75 	bl	8000288 <__aeabi_dsub>
 801179e:	4b44      	ldr	r3, [pc, #272]	@ (80118b0 <atan+0x320>)
 80117a0:	4606      	mov	r6, r0
 80117a2:	460f      	mov	r7, r1
 80117a4:	2200      	movs	r2, #0
 80117a6:	4620      	mov	r0, r4
 80117a8:	4629      	mov	r1, r5
 80117aa:	f7ee ff25 	bl	80005f8 <__aeabi_dmul>
 80117ae:	4b3d      	ldr	r3, [pc, #244]	@ (80118a4 <atan+0x314>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	f7ee fd6b 	bl	800028c <__adddf3>
 80117b6:	4602      	mov	r2, r0
 80117b8:	460b      	mov	r3, r1
 80117ba:	4630      	mov	r0, r6
 80117bc:	4639      	mov	r1, r7
 80117be:	f7ef f845 	bl	800084c <__aeabi_ddiv>
 80117c2:	f04f 0a02 	mov.w	sl, #2
 80117c6:	4604      	mov	r4, r0
 80117c8:	460d      	mov	r5, r1
 80117ca:	e745      	b.n	8011658 <atan+0xc8>
 80117cc:	4622      	mov	r2, r4
 80117ce:	462b      	mov	r3, r5
 80117d0:	4938      	ldr	r1, [pc, #224]	@ (80118b4 <atan+0x324>)
 80117d2:	2000      	movs	r0, #0
 80117d4:	f7ef f83a 	bl	800084c <__aeabi_ddiv>
 80117d8:	f04f 0a03 	mov.w	sl, #3
 80117dc:	4604      	mov	r4, r0
 80117de:	460d      	mov	r5, r1
 80117e0:	e73a      	b.n	8011658 <atan+0xc8>
 80117e2:	4b35      	ldr	r3, [pc, #212]	@ (80118b8 <atan+0x328>)
 80117e4:	4e35      	ldr	r6, [pc, #212]	@ (80118bc <atan+0x32c>)
 80117e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80117ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ee:	f7ee fd4b 	bl	8000288 <__aeabi_dsub>
 80117f2:	4622      	mov	r2, r4
 80117f4:	462b      	mov	r3, r5
 80117f6:	f7ee fd47 	bl	8000288 <__aeabi_dsub>
 80117fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80117fe:	4602      	mov	r2, r0
 8011800:	460b      	mov	r3, r1
 8011802:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011806:	f7ee fd3f 	bl	8000288 <__aeabi_dsub>
 801180a:	f1bb 0f00 	cmp.w	fp, #0
 801180e:	4604      	mov	r4, r0
 8011810:	460d      	mov	r5, r1
 8011812:	f6bf aedc 	bge.w	80115ce <atan+0x3e>
 8011816:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801181a:	461d      	mov	r5, r3
 801181c:	e6d7      	b.n	80115ce <atan+0x3e>
 801181e:	a51c      	add	r5, pc, #112	@ (adr r5, 8011890 <atan+0x300>)
 8011820:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011824:	e6d3      	b.n	80115ce <atan+0x3e>
 8011826:	bf00      	nop
 8011828:	54442d18 	.word	0x54442d18
 801182c:	3ff921fb 	.word	0x3ff921fb
 8011830:	8800759c 	.word	0x8800759c
 8011834:	7e37e43c 	.word	0x7e37e43c
 8011838:	e322da11 	.word	0xe322da11
 801183c:	3f90ad3a 	.word	0x3f90ad3a
 8011840:	24760deb 	.word	0x24760deb
 8011844:	3fa97b4b 	.word	0x3fa97b4b
 8011848:	a0d03d51 	.word	0xa0d03d51
 801184c:	3fb10d66 	.word	0x3fb10d66
 8011850:	c54c206e 	.word	0xc54c206e
 8011854:	3fb745cd 	.word	0x3fb745cd
 8011858:	920083ff 	.word	0x920083ff
 801185c:	3fc24924 	.word	0x3fc24924
 8011860:	5555550d 	.word	0x5555550d
 8011864:	3fd55555 	.word	0x3fd55555
 8011868:	2c6a6c2f 	.word	0x2c6a6c2f
 801186c:	bfa2b444 	.word	0xbfa2b444
 8011870:	52defd9a 	.word	0x52defd9a
 8011874:	3fadde2d 	.word	0x3fadde2d
 8011878:	af749a6d 	.word	0xaf749a6d
 801187c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011880:	fe231671 	.word	0xfe231671
 8011884:	3fbc71c6 	.word	0x3fbc71c6
 8011888:	9998ebc4 	.word	0x9998ebc4
 801188c:	3fc99999 	.word	0x3fc99999
 8011890:	54442d18 	.word	0x54442d18
 8011894:	bff921fb 	.word	0xbff921fb
 8011898:	440fffff 	.word	0x440fffff
 801189c:	7ff00000 	.word	0x7ff00000
 80118a0:	3fdbffff 	.word	0x3fdbffff
 80118a4:	3ff00000 	.word	0x3ff00000
 80118a8:	3ff2ffff 	.word	0x3ff2ffff
 80118ac:	40038000 	.word	0x40038000
 80118b0:	3ff80000 	.word	0x3ff80000
 80118b4:	bff00000 	.word	0xbff00000
 80118b8:	08012ab8 	.word	0x08012ab8
 80118bc:	08012ad8 	.word	0x08012ad8

080118c0 <fabs>:
 80118c0:	ec51 0b10 	vmov	r0, r1, d0
 80118c4:	4602      	mov	r2, r0
 80118c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80118ca:	ec43 2b10 	vmov	d0, r2, r3
 80118ce:	4770      	bx	lr

080118d0 <__kernel_rem_pio2>:
 80118d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d4:	ed2d 8b02 	vpush	{d8}
 80118d8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80118dc:	f112 0f14 	cmn.w	r2, #20
 80118e0:	9306      	str	r3, [sp, #24]
 80118e2:	9104      	str	r1, [sp, #16]
 80118e4:	4bc2      	ldr	r3, [pc, #776]	@ (8011bf0 <__kernel_rem_pio2+0x320>)
 80118e6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80118e8:	9008      	str	r0, [sp, #32]
 80118ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80118ee:	9300      	str	r3, [sp, #0]
 80118f0:	9b06      	ldr	r3, [sp, #24]
 80118f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80118f6:	bfa8      	it	ge
 80118f8:	1ed4      	subge	r4, r2, #3
 80118fa:	9305      	str	r3, [sp, #20]
 80118fc:	bfb2      	itee	lt
 80118fe:	2400      	movlt	r4, #0
 8011900:	2318      	movge	r3, #24
 8011902:	fb94 f4f3 	sdivge	r4, r4, r3
 8011906:	f06f 0317 	mvn.w	r3, #23
 801190a:	fb04 3303 	mla	r3, r4, r3, r3
 801190e:	eb03 0b02 	add.w	fp, r3, r2
 8011912:	9b00      	ldr	r3, [sp, #0]
 8011914:	9a05      	ldr	r2, [sp, #20]
 8011916:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8011be0 <__kernel_rem_pio2+0x310>
 801191a:	eb03 0802 	add.w	r8, r3, r2
 801191e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011920:	1aa7      	subs	r7, r4, r2
 8011922:	ae20      	add	r6, sp, #128	@ 0x80
 8011924:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011928:	2500      	movs	r5, #0
 801192a:	4545      	cmp	r5, r8
 801192c:	dd12      	ble.n	8011954 <__kernel_rem_pio2+0x84>
 801192e:	9b06      	ldr	r3, [sp, #24]
 8011930:	aa20      	add	r2, sp, #128	@ 0x80
 8011932:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011936:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801193a:	2700      	movs	r7, #0
 801193c:	9b00      	ldr	r3, [sp, #0]
 801193e:	429f      	cmp	r7, r3
 8011940:	dc2e      	bgt.n	80119a0 <__kernel_rem_pio2+0xd0>
 8011942:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8011be0 <__kernel_rem_pio2+0x310>
 8011946:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801194a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801194e:	46a8      	mov	r8, r5
 8011950:	2600      	movs	r6, #0
 8011952:	e01b      	b.n	801198c <__kernel_rem_pio2+0xbc>
 8011954:	42ef      	cmn	r7, r5
 8011956:	d407      	bmi.n	8011968 <__kernel_rem_pio2+0x98>
 8011958:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801195c:	f7ee fde2 	bl	8000524 <__aeabi_i2d>
 8011960:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011964:	3501      	adds	r5, #1
 8011966:	e7e0      	b.n	801192a <__kernel_rem_pio2+0x5a>
 8011968:	ec51 0b18 	vmov	r0, r1, d8
 801196c:	e7f8      	b.n	8011960 <__kernel_rem_pio2+0x90>
 801196e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8011972:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011976:	f7ee fe3f 	bl	80005f8 <__aeabi_dmul>
 801197a:	4602      	mov	r2, r0
 801197c:	460b      	mov	r3, r1
 801197e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011982:	f7ee fc83 	bl	800028c <__adddf3>
 8011986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801198a:	3601      	adds	r6, #1
 801198c:	9b05      	ldr	r3, [sp, #20]
 801198e:	429e      	cmp	r6, r3
 8011990:	dded      	ble.n	801196e <__kernel_rem_pio2+0x9e>
 8011992:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011996:	3701      	adds	r7, #1
 8011998:	ecaa 7b02 	vstmia	sl!, {d7}
 801199c:	3508      	adds	r5, #8
 801199e:	e7cd      	b.n	801193c <__kernel_rem_pio2+0x6c>
 80119a0:	9b00      	ldr	r3, [sp, #0]
 80119a2:	f8dd 8000 	ldr.w	r8, [sp]
 80119a6:	aa0c      	add	r2, sp, #48	@ 0x30
 80119a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80119ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80119ae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80119b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80119b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80119b6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80119ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80119bc:	ab98      	add	r3, sp, #608	@ 0x260
 80119be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80119c2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80119c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80119ca:	ac0c      	add	r4, sp, #48	@ 0x30
 80119cc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80119ce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80119d2:	46a1      	mov	r9, r4
 80119d4:	46c2      	mov	sl, r8
 80119d6:	f1ba 0f00 	cmp.w	sl, #0
 80119da:	dc77      	bgt.n	8011acc <__kernel_rem_pio2+0x1fc>
 80119dc:	4658      	mov	r0, fp
 80119de:	ed9d 0b02 	vldr	d0, [sp, #8]
 80119e2:	f000 fac5 	bl	8011f70 <scalbn>
 80119e6:	ec57 6b10 	vmov	r6, r7, d0
 80119ea:	2200      	movs	r2, #0
 80119ec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80119f0:	4630      	mov	r0, r6
 80119f2:	4639      	mov	r1, r7
 80119f4:	f7ee fe00 	bl	80005f8 <__aeabi_dmul>
 80119f8:	ec41 0b10 	vmov	d0, r0, r1
 80119fc:	f000 fb34 	bl	8012068 <floor>
 8011a00:	4b7c      	ldr	r3, [pc, #496]	@ (8011bf4 <__kernel_rem_pio2+0x324>)
 8011a02:	ec51 0b10 	vmov	r0, r1, d0
 8011a06:	2200      	movs	r2, #0
 8011a08:	f7ee fdf6 	bl	80005f8 <__aeabi_dmul>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	4630      	mov	r0, r6
 8011a12:	4639      	mov	r1, r7
 8011a14:	f7ee fc38 	bl	8000288 <__aeabi_dsub>
 8011a18:	460f      	mov	r7, r1
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	f7ef f89c 	bl	8000b58 <__aeabi_d2iz>
 8011a20:	9002      	str	r0, [sp, #8]
 8011a22:	f7ee fd7f 	bl	8000524 <__aeabi_i2d>
 8011a26:	4602      	mov	r2, r0
 8011a28:	460b      	mov	r3, r1
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	4639      	mov	r1, r7
 8011a2e:	f7ee fc2b 	bl	8000288 <__aeabi_dsub>
 8011a32:	f1bb 0f00 	cmp.w	fp, #0
 8011a36:	4606      	mov	r6, r0
 8011a38:	460f      	mov	r7, r1
 8011a3a:	dd6c      	ble.n	8011b16 <__kernel_rem_pio2+0x246>
 8011a3c:	f108 31ff 	add.w	r1, r8, #4294967295
 8011a40:	ab0c      	add	r3, sp, #48	@ 0x30
 8011a42:	9d02      	ldr	r5, [sp, #8]
 8011a44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011a48:	f1cb 0018 	rsb	r0, fp, #24
 8011a4c:	fa43 f200 	asr.w	r2, r3, r0
 8011a50:	4415      	add	r5, r2
 8011a52:	4082      	lsls	r2, r0
 8011a54:	1a9b      	subs	r3, r3, r2
 8011a56:	aa0c      	add	r2, sp, #48	@ 0x30
 8011a58:	9502      	str	r5, [sp, #8]
 8011a5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011a5e:	f1cb 0217 	rsb	r2, fp, #23
 8011a62:	fa43 f902 	asr.w	r9, r3, r2
 8011a66:	f1b9 0f00 	cmp.w	r9, #0
 8011a6a:	dd64      	ble.n	8011b36 <__kernel_rem_pio2+0x266>
 8011a6c:	9b02      	ldr	r3, [sp, #8]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	3301      	adds	r3, #1
 8011a72:	9302      	str	r3, [sp, #8]
 8011a74:	4615      	mov	r5, r2
 8011a76:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8011a7a:	4590      	cmp	r8, r2
 8011a7c:	f300 80a1 	bgt.w	8011bc2 <__kernel_rem_pio2+0x2f2>
 8011a80:	f1bb 0f00 	cmp.w	fp, #0
 8011a84:	dd07      	ble.n	8011a96 <__kernel_rem_pio2+0x1c6>
 8011a86:	f1bb 0f01 	cmp.w	fp, #1
 8011a8a:	f000 80c1 	beq.w	8011c10 <__kernel_rem_pio2+0x340>
 8011a8e:	f1bb 0f02 	cmp.w	fp, #2
 8011a92:	f000 80c8 	beq.w	8011c26 <__kernel_rem_pio2+0x356>
 8011a96:	f1b9 0f02 	cmp.w	r9, #2
 8011a9a:	d14c      	bne.n	8011b36 <__kernel_rem_pio2+0x266>
 8011a9c:	4632      	mov	r2, r6
 8011a9e:	463b      	mov	r3, r7
 8011aa0:	4955      	ldr	r1, [pc, #340]	@ (8011bf8 <__kernel_rem_pio2+0x328>)
 8011aa2:	2000      	movs	r0, #0
 8011aa4:	f7ee fbf0 	bl	8000288 <__aeabi_dsub>
 8011aa8:	4606      	mov	r6, r0
 8011aaa:	460f      	mov	r7, r1
 8011aac:	2d00      	cmp	r5, #0
 8011aae:	d042      	beq.n	8011b36 <__kernel_rem_pio2+0x266>
 8011ab0:	4658      	mov	r0, fp
 8011ab2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8011be8 <__kernel_rem_pio2+0x318>
 8011ab6:	f000 fa5b 	bl	8011f70 <scalbn>
 8011aba:	4630      	mov	r0, r6
 8011abc:	4639      	mov	r1, r7
 8011abe:	ec53 2b10 	vmov	r2, r3, d0
 8011ac2:	f7ee fbe1 	bl	8000288 <__aeabi_dsub>
 8011ac6:	4606      	mov	r6, r0
 8011ac8:	460f      	mov	r7, r1
 8011aca:	e034      	b.n	8011b36 <__kernel_rem_pio2+0x266>
 8011acc:	4b4b      	ldr	r3, [pc, #300]	@ (8011bfc <__kernel_rem_pio2+0x32c>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ad4:	f7ee fd90 	bl	80005f8 <__aeabi_dmul>
 8011ad8:	f7ef f83e 	bl	8000b58 <__aeabi_d2iz>
 8011adc:	f7ee fd22 	bl	8000524 <__aeabi_i2d>
 8011ae0:	4b47      	ldr	r3, [pc, #284]	@ (8011c00 <__kernel_rem_pio2+0x330>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	460f      	mov	r7, r1
 8011ae8:	f7ee fd86 	bl	80005f8 <__aeabi_dmul>
 8011aec:	4602      	mov	r2, r0
 8011aee:	460b      	mov	r3, r1
 8011af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011af4:	f7ee fbc8 	bl	8000288 <__aeabi_dsub>
 8011af8:	f7ef f82e 	bl	8000b58 <__aeabi_d2iz>
 8011afc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011b00:	f849 0b04 	str.w	r0, [r9], #4
 8011b04:	4639      	mov	r1, r7
 8011b06:	4630      	mov	r0, r6
 8011b08:	f7ee fbc0 	bl	800028c <__adddf3>
 8011b0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b14:	e75f      	b.n	80119d6 <__kernel_rem_pio2+0x106>
 8011b16:	d107      	bne.n	8011b28 <__kernel_rem_pio2+0x258>
 8011b18:	f108 33ff 	add.w	r3, r8, #4294967295
 8011b1c:	aa0c      	add	r2, sp, #48	@ 0x30
 8011b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b22:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011b26:	e79e      	b.n	8011a66 <__kernel_rem_pio2+0x196>
 8011b28:	4b36      	ldr	r3, [pc, #216]	@ (8011c04 <__kernel_rem_pio2+0x334>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	f7ee ffea 	bl	8000b04 <__aeabi_dcmpge>
 8011b30:	2800      	cmp	r0, #0
 8011b32:	d143      	bne.n	8011bbc <__kernel_rem_pio2+0x2ec>
 8011b34:	4681      	mov	r9, r0
 8011b36:	2200      	movs	r2, #0
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4630      	mov	r0, r6
 8011b3c:	4639      	mov	r1, r7
 8011b3e:	f7ee ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b42:	2800      	cmp	r0, #0
 8011b44:	f000 80c1 	beq.w	8011cca <__kernel_rem_pio2+0x3fa>
 8011b48:	f108 33ff 	add.w	r3, r8, #4294967295
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	9900      	ldr	r1, [sp, #0]
 8011b50:	428b      	cmp	r3, r1
 8011b52:	da70      	bge.n	8011c36 <__kernel_rem_pio2+0x366>
 8011b54:	2a00      	cmp	r2, #0
 8011b56:	f000 808b 	beq.w	8011c70 <__kernel_rem_pio2+0x3a0>
 8011b5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011b5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011b60:	f1ab 0b18 	sub.w	fp, fp, #24
 8011b64:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d0f6      	beq.n	8011b5a <__kernel_rem_pio2+0x28a>
 8011b6c:	4658      	mov	r0, fp
 8011b6e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8011be8 <__kernel_rem_pio2+0x318>
 8011b72:	f000 f9fd 	bl	8011f70 <scalbn>
 8011b76:	f108 0301 	add.w	r3, r8, #1
 8011b7a:	00da      	lsls	r2, r3, #3
 8011b7c:	9205      	str	r2, [sp, #20]
 8011b7e:	ec55 4b10 	vmov	r4, r5, d0
 8011b82:	aa70      	add	r2, sp, #448	@ 0x1c0
 8011b84:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8011bfc <__kernel_rem_pio2+0x32c>
 8011b88:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8011b8c:	4646      	mov	r6, r8
 8011b8e:	f04f 0a00 	mov.w	sl, #0
 8011b92:	2e00      	cmp	r6, #0
 8011b94:	f280 80d1 	bge.w	8011d3a <__kernel_rem_pio2+0x46a>
 8011b98:	4644      	mov	r4, r8
 8011b9a:	2c00      	cmp	r4, #0
 8011b9c:	f2c0 80ff 	blt.w	8011d9e <__kernel_rem_pio2+0x4ce>
 8011ba0:	4b19      	ldr	r3, [pc, #100]	@ (8011c08 <__kernel_rem_pio2+0x338>)
 8011ba2:	461f      	mov	r7, r3
 8011ba4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011ba6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011baa:	9306      	str	r3, [sp, #24]
 8011bac:	f04f 0a00 	mov.w	sl, #0
 8011bb0:	f04f 0b00 	mov.w	fp, #0
 8011bb4:	2600      	movs	r6, #0
 8011bb6:	eba8 0504 	sub.w	r5, r8, r4
 8011bba:	e0e4      	b.n	8011d86 <__kernel_rem_pio2+0x4b6>
 8011bbc:	f04f 0902 	mov.w	r9, #2
 8011bc0:	e754      	b.n	8011a6c <__kernel_rem_pio2+0x19c>
 8011bc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8011bc6:	bb0d      	cbnz	r5, 8011c0c <__kernel_rem_pio2+0x33c>
 8011bc8:	b123      	cbz	r3, 8011bd4 <__kernel_rem_pio2+0x304>
 8011bca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011bce:	f844 3c04 	str.w	r3, [r4, #-4]
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	3201      	adds	r2, #1
 8011bd6:	461d      	mov	r5, r3
 8011bd8:	e74f      	b.n	8011a7a <__kernel_rem_pio2+0x1aa>
 8011bda:	bf00      	nop
 8011bdc:	f3af 8000 	nop.w
	...
 8011bec:	3ff00000 	.word	0x3ff00000
 8011bf0:	08012b38 	.word	0x08012b38
 8011bf4:	40200000 	.word	0x40200000
 8011bf8:	3ff00000 	.word	0x3ff00000
 8011bfc:	3e700000 	.word	0x3e700000
 8011c00:	41700000 	.word	0x41700000
 8011c04:	3fe00000 	.word	0x3fe00000
 8011c08:	08012af8 	.word	0x08012af8
 8011c0c:	1acb      	subs	r3, r1, r3
 8011c0e:	e7de      	b.n	8011bce <__kernel_rem_pio2+0x2fe>
 8011c10:	f108 32ff 	add.w	r2, r8, #4294967295
 8011c14:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c1a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011c1e:	a90c      	add	r1, sp, #48	@ 0x30
 8011c20:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011c24:	e737      	b.n	8011a96 <__kernel_rem_pio2+0x1c6>
 8011c26:	f108 32ff 	add.w	r2, r8, #4294967295
 8011c2a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011c34:	e7f3      	b.n	8011c1e <__kernel_rem_pio2+0x34e>
 8011c36:	a90c      	add	r1, sp, #48	@ 0x30
 8011c38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011c3c:	3b01      	subs	r3, #1
 8011c3e:	430a      	orrs	r2, r1
 8011c40:	e785      	b.n	8011b4e <__kernel_rem_pio2+0x27e>
 8011c42:	3401      	adds	r4, #1
 8011c44:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	d0fa      	beq.n	8011c42 <__kernel_rem_pio2+0x372>
 8011c4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c4e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011c52:	eb0d 0503 	add.w	r5, sp, r3
 8011c56:	9b06      	ldr	r3, [sp, #24]
 8011c58:	aa20      	add	r2, sp, #128	@ 0x80
 8011c5a:	4443      	add	r3, r8
 8011c5c:	f108 0701 	add.w	r7, r8, #1
 8011c60:	3d98      	subs	r5, #152	@ 0x98
 8011c62:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8011c66:	4444      	add	r4, r8
 8011c68:	42bc      	cmp	r4, r7
 8011c6a:	da04      	bge.n	8011c76 <__kernel_rem_pio2+0x3a6>
 8011c6c:	46a0      	mov	r8, r4
 8011c6e:	e6a2      	b.n	80119b6 <__kernel_rem_pio2+0xe6>
 8011c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c72:	2401      	movs	r4, #1
 8011c74:	e7e6      	b.n	8011c44 <__kernel_rem_pio2+0x374>
 8011c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c78:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011c7c:	f7ee fc52 	bl	8000524 <__aeabi_i2d>
 8011c80:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8011f40 <__kernel_rem_pio2+0x670>
 8011c84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011c90:	46b2      	mov	sl, r6
 8011c92:	f04f 0800 	mov.w	r8, #0
 8011c96:	9b05      	ldr	r3, [sp, #20]
 8011c98:	4598      	cmp	r8, r3
 8011c9a:	dd05      	ble.n	8011ca8 <__kernel_rem_pio2+0x3d8>
 8011c9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011ca0:	3701      	adds	r7, #1
 8011ca2:	eca5 7b02 	vstmia	r5!, {d7}
 8011ca6:	e7df      	b.n	8011c68 <__kernel_rem_pio2+0x398>
 8011ca8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011cac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011cb0:	f7ee fca2 	bl	80005f8 <__aeabi_dmul>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cbc:	f7ee fae6 	bl	800028c <__adddf3>
 8011cc0:	f108 0801 	add.w	r8, r8, #1
 8011cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cc8:	e7e5      	b.n	8011c96 <__kernel_rem_pio2+0x3c6>
 8011cca:	f1cb 0000 	rsb	r0, fp, #0
 8011cce:	ec47 6b10 	vmov	d0, r6, r7
 8011cd2:	f000 f94d 	bl	8011f70 <scalbn>
 8011cd6:	ec55 4b10 	vmov	r4, r5, d0
 8011cda:	4b9b      	ldr	r3, [pc, #620]	@ (8011f48 <__kernel_rem_pio2+0x678>)
 8011cdc:	2200      	movs	r2, #0
 8011cde:	4620      	mov	r0, r4
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	f7ee ff0f 	bl	8000b04 <__aeabi_dcmpge>
 8011ce6:	b300      	cbz	r0, 8011d2a <__kernel_rem_pio2+0x45a>
 8011ce8:	4b98      	ldr	r3, [pc, #608]	@ (8011f4c <__kernel_rem_pio2+0x67c>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	4620      	mov	r0, r4
 8011cee:	4629      	mov	r1, r5
 8011cf0:	f7ee fc82 	bl	80005f8 <__aeabi_dmul>
 8011cf4:	f7ee ff30 	bl	8000b58 <__aeabi_d2iz>
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	f7ee fc13 	bl	8000524 <__aeabi_i2d>
 8011cfe:	4b92      	ldr	r3, [pc, #584]	@ (8011f48 <__kernel_rem_pio2+0x678>)
 8011d00:	2200      	movs	r2, #0
 8011d02:	f7ee fc79 	bl	80005f8 <__aeabi_dmul>
 8011d06:	460b      	mov	r3, r1
 8011d08:	4602      	mov	r2, r0
 8011d0a:	4629      	mov	r1, r5
 8011d0c:	4620      	mov	r0, r4
 8011d0e:	f7ee fabb 	bl	8000288 <__aeabi_dsub>
 8011d12:	f7ee ff21 	bl	8000b58 <__aeabi_d2iz>
 8011d16:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d18:	f10b 0b18 	add.w	fp, fp, #24
 8011d1c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011d20:	f108 0801 	add.w	r8, r8, #1
 8011d24:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011d28:	e720      	b.n	8011b6c <__kernel_rem_pio2+0x29c>
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	4629      	mov	r1, r5
 8011d2e:	f7ee ff13 	bl	8000b58 <__aeabi_d2iz>
 8011d32:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011d38:	e718      	b.n	8011b6c <__kernel_rem_pio2+0x29c>
 8011d3a:	ab0c      	add	r3, sp, #48	@ 0x30
 8011d3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011d40:	f7ee fbf0 	bl	8000524 <__aeabi_i2d>
 8011d44:	4622      	mov	r2, r4
 8011d46:	462b      	mov	r3, r5
 8011d48:	f7ee fc56 	bl	80005f8 <__aeabi_dmul>
 8011d4c:	4652      	mov	r2, sl
 8011d4e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8011d52:	465b      	mov	r3, fp
 8011d54:	4620      	mov	r0, r4
 8011d56:	4629      	mov	r1, r5
 8011d58:	f7ee fc4e 	bl	80005f8 <__aeabi_dmul>
 8011d5c:	3e01      	subs	r6, #1
 8011d5e:	4604      	mov	r4, r0
 8011d60:	460d      	mov	r5, r1
 8011d62:	e716      	b.n	8011b92 <__kernel_rem_pio2+0x2c2>
 8011d64:	9906      	ldr	r1, [sp, #24]
 8011d66:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8011d6a:	9106      	str	r1, [sp, #24]
 8011d6c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8011d70:	f7ee fc42 	bl	80005f8 <__aeabi_dmul>
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	4650      	mov	r0, sl
 8011d7a:	4659      	mov	r1, fp
 8011d7c:	f7ee fa86 	bl	800028c <__adddf3>
 8011d80:	3601      	adds	r6, #1
 8011d82:	4682      	mov	sl, r0
 8011d84:	468b      	mov	fp, r1
 8011d86:	9b00      	ldr	r3, [sp, #0]
 8011d88:	429e      	cmp	r6, r3
 8011d8a:	dc01      	bgt.n	8011d90 <__kernel_rem_pio2+0x4c0>
 8011d8c:	42ae      	cmp	r6, r5
 8011d8e:	dde9      	ble.n	8011d64 <__kernel_rem_pio2+0x494>
 8011d90:	ab48      	add	r3, sp, #288	@ 0x120
 8011d92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011d96:	e9c5 ab00 	strd	sl, fp, [r5]
 8011d9a:	3c01      	subs	r4, #1
 8011d9c:	e6fd      	b.n	8011b9a <__kernel_rem_pio2+0x2ca>
 8011d9e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011da0:	2b02      	cmp	r3, #2
 8011da2:	dc0b      	bgt.n	8011dbc <__kernel_rem_pio2+0x4ec>
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	dc35      	bgt.n	8011e14 <__kernel_rem_pio2+0x544>
 8011da8:	d059      	beq.n	8011e5e <__kernel_rem_pio2+0x58e>
 8011daa:	9b02      	ldr	r3, [sp, #8]
 8011dac:	f003 0007 	and.w	r0, r3, #7
 8011db0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8011db4:	ecbd 8b02 	vpop	{d8}
 8011db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dbc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011dbe:	2b03      	cmp	r3, #3
 8011dc0:	d1f3      	bne.n	8011daa <__kernel_rem_pio2+0x4da>
 8011dc2:	9b05      	ldr	r3, [sp, #20]
 8011dc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011dc8:	eb0d 0403 	add.w	r4, sp, r3
 8011dcc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011dd0:	4625      	mov	r5, r4
 8011dd2:	46c2      	mov	sl, r8
 8011dd4:	f1ba 0f00 	cmp.w	sl, #0
 8011dd8:	dc69      	bgt.n	8011eae <__kernel_rem_pio2+0x5de>
 8011dda:	4645      	mov	r5, r8
 8011ddc:	2d01      	cmp	r5, #1
 8011dde:	f300 8087 	bgt.w	8011ef0 <__kernel_rem_pio2+0x620>
 8011de2:	9c05      	ldr	r4, [sp, #20]
 8011de4:	ab48      	add	r3, sp, #288	@ 0x120
 8011de6:	441c      	add	r4, r3
 8011de8:	2000      	movs	r0, #0
 8011dea:	2100      	movs	r1, #0
 8011dec:	f1b8 0f01 	cmp.w	r8, #1
 8011df0:	f300 809c 	bgt.w	8011f2c <__kernel_rem_pio2+0x65c>
 8011df4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8011df8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8011dfc:	f1b9 0f00 	cmp.w	r9, #0
 8011e00:	f040 80a6 	bne.w	8011f50 <__kernel_rem_pio2+0x680>
 8011e04:	9b04      	ldr	r3, [sp, #16]
 8011e06:	e9c3 5600 	strd	r5, r6, [r3]
 8011e0a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011e0e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011e12:	e7ca      	b.n	8011daa <__kernel_rem_pio2+0x4da>
 8011e14:	9d05      	ldr	r5, [sp, #20]
 8011e16:	ab48      	add	r3, sp, #288	@ 0x120
 8011e18:	441d      	add	r5, r3
 8011e1a:	4644      	mov	r4, r8
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	2100      	movs	r1, #0
 8011e20:	2c00      	cmp	r4, #0
 8011e22:	da35      	bge.n	8011e90 <__kernel_rem_pio2+0x5c0>
 8011e24:	f1b9 0f00 	cmp.w	r9, #0
 8011e28:	d038      	beq.n	8011e9c <__kernel_rem_pio2+0x5cc>
 8011e2a:	4602      	mov	r2, r0
 8011e2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e30:	9c04      	ldr	r4, [sp, #16]
 8011e32:	e9c4 2300 	strd	r2, r3, [r4]
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8011e3e:	f7ee fa23 	bl	8000288 <__aeabi_dsub>
 8011e42:	ad4a      	add	r5, sp, #296	@ 0x128
 8011e44:	2401      	movs	r4, #1
 8011e46:	45a0      	cmp	r8, r4
 8011e48:	da2b      	bge.n	8011ea2 <__kernel_rem_pio2+0x5d2>
 8011e4a:	f1b9 0f00 	cmp.w	r9, #0
 8011e4e:	d002      	beq.n	8011e56 <__kernel_rem_pio2+0x586>
 8011e50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e54:	4619      	mov	r1, r3
 8011e56:	9b04      	ldr	r3, [sp, #16]
 8011e58:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011e5c:	e7a5      	b.n	8011daa <__kernel_rem_pio2+0x4da>
 8011e5e:	9c05      	ldr	r4, [sp, #20]
 8011e60:	ab48      	add	r3, sp, #288	@ 0x120
 8011e62:	441c      	add	r4, r3
 8011e64:	2000      	movs	r0, #0
 8011e66:	2100      	movs	r1, #0
 8011e68:	f1b8 0f00 	cmp.w	r8, #0
 8011e6c:	da09      	bge.n	8011e82 <__kernel_rem_pio2+0x5b2>
 8011e6e:	f1b9 0f00 	cmp.w	r9, #0
 8011e72:	d002      	beq.n	8011e7a <__kernel_rem_pio2+0x5aa>
 8011e74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e78:	4619      	mov	r1, r3
 8011e7a:	9b04      	ldr	r3, [sp, #16]
 8011e7c:	e9c3 0100 	strd	r0, r1, [r3]
 8011e80:	e793      	b.n	8011daa <__kernel_rem_pio2+0x4da>
 8011e82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e86:	f7ee fa01 	bl	800028c <__adddf3>
 8011e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011e8e:	e7eb      	b.n	8011e68 <__kernel_rem_pio2+0x598>
 8011e90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011e94:	f7ee f9fa 	bl	800028c <__adddf3>
 8011e98:	3c01      	subs	r4, #1
 8011e9a:	e7c1      	b.n	8011e20 <__kernel_rem_pio2+0x550>
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	e7c6      	b.n	8011e30 <__kernel_rem_pio2+0x560>
 8011ea2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011ea6:	f7ee f9f1 	bl	800028c <__adddf3>
 8011eaa:	3401      	adds	r4, #1
 8011eac:	e7cb      	b.n	8011e46 <__kernel_rem_pio2+0x576>
 8011eae:	ed35 7b02 	vldmdb	r5!, {d7}
 8011eb2:	ed8d 7b00 	vstr	d7, [sp]
 8011eb6:	ed95 7b02 	vldr	d7, [r5, #8]
 8011eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ebe:	ec53 2b17 	vmov	r2, r3, d7
 8011ec2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011ec6:	f7ee f9e1 	bl	800028c <__adddf3>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	460b      	mov	r3, r1
 8011ece:	4606      	mov	r6, r0
 8011ed0:	460f      	mov	r7, r1
 8011ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ed6:	f7ee f9d7 	bl	8000288 <__aeabi_dsub>
 8011eda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ede:	f7ee f9d5 	bl	800028c <__adddf3>
 8011ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011ee6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8011eea:	e9c5 6700 	strd	r6, r7, [r5]
 8011eee:	e771      	b.n	8011dd4 <__kernel_rem_pio2+0x504>
 8011ef0:	ed34 7b02 	vldmdb	r4!, {d7}
 8011ef4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011ef8:	ec51 0b17 	vmov	r0, r1, d7
 8011efc:	4652      	mov	r2, sl
 8011efe:	465b      	mov	r3, fp
 8011f00:	ed8d 7b00 	vstr	d7, [sp]
 8011f04:	f7ee f9c2 	bl	800028c <__adddf3>
 8011f08:	4602      	mov	r2, r0
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	460f      	mov	r7, r1
 8011f10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f14:	f7ee f9b8 	bl	8000288 <__aeabi_dsub>
 8011f18:	4652      	mov	r2, sl
 8011f1a:	465b      	mov	r3, fp
 8011f1c:	f7ee f9b6 	bl	800028c <__adddf3>
 8011f20:	3d01      	subs	r5, #1
 8011f22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f26:	e9c4 6700 	strd	r6, r7, [r4]
 8011f2a:	e757      	b.n	8011ddc <__kernel_rem_pio2+0x50c>
 8011f2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011f30:	f7ee f9ac 	bl	800028c <__adddf3>
 8011f34:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f38:	e758      	b.n	8011dec <__kernel_rem_pio2+0x51c>
 8011f3a:	bf00      	nop
 8011f3c:	f3af 8000 	nop.w
	...
 8011f48:	41700000 	.word	0x41700000
 8011f4c:	3e700000 	.word	0x3e700000
 8011f50:	9b04      	ldr	r3, [sp, #16]
 8011f52:	9a04      	ldr	r2, [sp, #16]
 8011f54:	601d      	str	r5, [r3, #0]
 8011f56:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8011f5a:	605c      	str	r4, [r3, #4]
 8011f5c:	609f      	str	r7, [r3, #8]
 8011f5e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8011f62:	60d3      	str	r3, [r2, #12]
 8011f64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011f68:	6110      	str	r0, [r2, #16]
 8011f6a:	6153      	str	r3, [r2, #20]
 8011f6c:	e71d      	b.n	8011daa <__kernel_rem_pio2+0x4da>
 8011f6e:	bf00      	nop

08011f70 <scalbn>:
 8011f70:	b570      	push	{r4, r5, r6, lr}
 8011f72:	ec55 4b10 	vmov	r4, r5, d0
 8011f76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011f7a:	4606      	mov	r6, r0
 8011f7c:	462b      	mov	r3, r5
 8011f7e:	b991      	cbnz	r1, 8011fa6 <scalbn+0x36>
 8011f80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011f84:	4323      	orrs	r3, r4
 8011f86:	d03b      	beq.n	8012000 <scalbn+0x90>
 8011f88:	4b33      	ldr	r3, [pc, #204]	@ (8012058 <scalbn+0xe8>)
 8011f8a:	4620      	mov	r0, r4
 8011f8c:	4629      	mov	r1, r5
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f7ee fb32 	bl	80005f8 <__aeabi_dmul>
 8011f94:	4b31      	ldr	r3, [pc, #196]	@ (801205c <scalbn+0xec>)
 8011f96:	429e      	cmp	r6, r3
 8011f98:	4604      	mov	r4, r0
 8011f9a:	460d      	mov	r5, r1
 8011f9c:	da0f      	bge.n	8011fbe <scalbn+0x4e>
 8011f9e:	a326      	add	r3, pc, #152	@ (adr r3, 8012038 <scalbn+0xc8>)
 8011fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa4:	e01e      	b.n	8011fe4 <scalbn+0x74>
 8011fa6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011faa:	4291      	cmp	r1, r2
 8011fac:	d10b      	bne.n	8011fc6 <scalbn+0x56>
 8011fae:	4622      	mov	r2, r4
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	f7ee f96a 	bl	800028c <__adddf3>
 8011fb8:	4604      	mov	r4, r0
 8011fba:	460d      	mov	r5, r1
 8011fbc:	e020      	b.n	8012000 <scalbn+0x90>
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011fc4:	3936      	subs	r1, #54	@ 0x36
 8011fc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011fca:	4296      	cmp	r6, r2
 8011fcc:	dd0d      	ble.n	8011fea <scalbn+0x7a>
 8011fce:	2d00      	cmp	r5, #0
 8011fd0:	a11b      	add	r1, pc, #108	@ (adr r1, 8012040 <scalbn+0xd0>)
 8011fd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fd6:	da02      	bge.n	8011fde <scalbn+0x6e>
 8011fd8:	a11b      	add	r1, pc, #108	@ (adr r1, 8012048 <scalbn+0xd8>)
 8011fda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fde:	a318      	add	r3, pc, #96	@ (adr r3, 8012040 <scalbn+0xd0>)
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	f7ee fb08 	bl	80005f8 <__aeabi_dmul>
 8011fe8:	e7e6      	b.n	8011fb8 <scalbn+0x48>
 8011fea:	1872      	adds	r2, r6, r1
 8011fec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011ff0:	428a      	cmp	r2, r1
 8011ff2:	dcec      	bgt.n	8011fce <scalbn+0x5e>
 8011ff4:	2a00      	cmp	r2, #0
 8011ff6:	dd06      	ble.n	8012006 <scalbn+0x96>
 8011ff8:	f36f 531e 	bfc	r3, #20, #11
 8011ffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012000:	ec45 4b10 	vmov	d0, r4, r5
 8012004:	bd70      	pop	{r4, r5, r6, pc}
 8012006:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801200a:	da08      	bge.n	801201e <scalbn+0xae>
 801200c:	2d00      	cmp	r5, #0
 801200e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012038 <scalbn+0xc8>)
 8012010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012014:	dac3      	bge.n	8011f9e <scalbn+0x2e>
 8012016:	a10e      	add	r1, pc, #56	@ (adr r1, 8012050 <scalbn+0xe0>)
 8012018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801201c:	e7bf      	b.n	8011f9e <scalbn+0x2e>
 801201e:	3236      	adds	r2, #54	@ 0x36
 8012020:	f36f 531e 	bfc	r3, #20, #11
 8012024:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012028:	4620      	mov	r0, r4
 801202a:	4b0d      	ldr	r3, [pc, #52]	@ (8012060 <scalbn+0xf0>)
 801202c:	4629      	mov	r1, r5
 801202e:	2200      	movs	r2, #0
 8012030:	e7d8      	b.n	8011fe4 <scalbn+0x74>
 8012032:	bf00      	nop
 8012034:	f3af 8000 	nop.w
 8012038:	c2f8f359 	.word	0xc2f8f359
 801203c:	01a56e1f 	.word	0x01a56e1f
 8012040:	8800759c 	.word	0x8800759c
 8012044:	7e37e43c 	.word	0x7e37e43c
 8012048:	8800759c 	.word	0x8800759c
 801204c:	fe37e43c 	.word	0xfe37e43c
 8012050:	c2f8f359 	.word	0xc2f8f359
 8012054:	81a56e1f 	.word	0x81a56e1f
 8012058:	43500000 	.word	0x43500000
 801205c:	ffff3cb0 	.word	0xffff3cb0
 8012060:	3c900000 	.word	0x3c900000
 8012064:	00000000 	.word	0x00000000

08012068 <floor>:
 8012068:	ec51 0b10 	vmov	r0, r1, d0
 801206c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012074:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8012078:	2e13      	cmp	r6, #19
 801207a:	460c      	mov	r4, r1
 801207c:	4605      	mov	r5, r0
 801207e:	4680      	mov	r8, r0
 8012080:	dc34      	bgt.n	80120ec <floor+0x84>
 8012082:	2e00      	cmp	r6, #0
 8012084:	da17      	bge.n	80120b6 <floor+0x4e>
 8012086:	a332      	add	r3, pc, #200	@ (adr r3, 8012150 <floor+0xe8>)
 8012088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208c:	f7ee f8fe 	bl	800028c <__adddf3>
 8012090:	2200      	movs	r2, #0
 8012092:	2300      	movs	r3, #0
 8012094:	f7ee fd40 	bl	8000b18 <__aeabi_dcmpgt>
 8012098:	b150      	cbz	r0, 80120b0 <floor+0x48>
 801209a:	2c00      	cmp	r4, #0
 801209c:	da55      	bge.n	801214a <floor+0xe2>
 801209e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80120a2:	432c      	orrs	r4, r5
 80120a4:	2500      	movs	r5, #0
 80120a6:	42ac      	cmp	r4, r5
 80120a8:	4c2b      	ldr	r4, [pc, #172]	@ (8012158 <floor+0xf0>)
 80120aa:	bf08      	it	eq
 80120ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80120b0:	4621      	mov	r1, r4
 80120b2:	4628      	mov	r0, r5
 80120b4:	e023      	b.n	80120fe <floor+0x96>
 80120b6:	4f29      	ldr	r7, [pc, #164]	@ (801215c <floor+0xf4>)
 80120b8:	4137      	asrs	r7, r6
 80120ba:	ea01 0307 	and.w	r3, r1, r7
 80120be:	4303      	orrs	r3, r0
 80120c0:	d01d      	beq.n	80120fe <floor+0x96>
 80120c2:	a323      	add	r3, pc, #140	@ (adr r3, 8012150 <floor+0xe8>)
 80120c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c8:	f7ee f8e0 	bl	800028c <__adddf3>
 80120cc:	2200      	movs	r2, #0
 80120ce:	2300      	movs	r3, #0
 80120d0:	f7ee fd22 	bl	8000b18 <__aeabi_dcmpgt>
 80120d4:	2800      	cmp	r0, #0
 80120d6:	d0eb      	beq.n	80120b0 <floor+0x48>
 80120d8:	2c00      	cmp	r4, #0
 80120da:	bfbe      	ittt	lt
 80120dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80120e0:	4133      	asrlt	r3, r6
 80120e2:	18e4      	addlt	r4, r4, r3
 80120e4:	ea24 0407 	bic.w	r4, r4, r7
 80120e8:	2500      	movs	r5, #0
 80120ea:	e7e1      	b.n	80120b0 <floor+0x48>
 80120ec:	2e33      	cmp	r6, #51	@ 0x33
 80120ee:	dd0a      	ble.n	8012106 <floor+0x9e>
 80120f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80120f4:	d103      	bne.n	80120fe <floor+0x96>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	f7ee f8c7 	bl	800028c <__adddf3>
 80120fe:	ec41 0b10 	vmov	d0, r0, r1
 8012102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012106:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801210a:	f04f 37ff 	mov.w	r7, #4294967295
 801210e:	40df      	lsrs	r7, r3
 8012110:	4207      	tst	r7, r0
 8012112:	d0f4      	beq.n	80120fe <floor+0x96>
 8012114:	a30e      	add	r3, pc, #56	@ (adr r3, 8012150 <floor+0xe8>)
 8012116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211a:	f7ee f8b7 	bl	800028c <__adddf3>
 801211e:	2200      	movs	r2, #0
 8012120:	2300      	movs	r3, #0
 8012122:	f7ee fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 8012126:	2800      	cmp	r0, #0
 8012128:	d0c2      	beq.n	80120b0 <floor+0x48>
 801212a:	2c00      	cmp	r4, #0
 801212c:	da0a      	bge.n	8012144 <floor+0xdc>
 801212e:	2e14      	cmp	r6, #20
 8012130:	d101      	bne.n	8012136 <floor+0xce>
 8012132:	3401      	adds	r4, #1
 8012134:	e006      	b.n	8012144 <floor+0xdc>
 8012136:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801213a:	2301      	movs	r3, #1
 801213c:	40b3      	lsls	r3, r6
 801213e:	441d      	add	r5, r3
 8012140:	4545      	cmp	r5, r8
 8012142:	d3f6      	bcc.n	8012132 <floor+0xca>
 8012144:	ea25 0507 	bic.w	r5, r5, r7
 8012148:	e7b2      	b.n	80120b0 <floor+0x48>
 801214a:	2500      	movs	r5, #0
 801214c:	462c      	mov	r4, r5
 801214e:	e7af      	b.n	80120b0 <floor+0x48>
 8012150:	8800759c 	.word	0x8800759c
 8012154:	7e37e43c 	.word	0x7e37e43c
 8012158:	bff00000 	.word	0xbff00000
 801215c:	000fffff 	.word	0x000fffff

08012160 <_sbrk>:
 8012160:	4a04      	ldr	r2, [pc, #16]	@ (8012174 <_sbrk+0x14>)
 8012162:	6811      	ldr	r1, [r2, #0]
 8012164:	4603      	mov	r3, r0
 8012166:	b909      	cbnz	r1, 801216c <_sbrk+0xc>
 8012168:	4903      	ldr	r1, [pc, #12]	@ (8012178 <_sbrk+0x18>)
 801216a:	6011      	str	r1, [r2, #0]
 801216c:	6810      	ldr	r0, [r2, #0]
 801216e:	4403      	add	r3, r0
 8012170:	6013      	str	r3, [r2, #0]
 8012172:	4770      	bx	lr
 8012174:	20002240 	.word	0x20002240
 8012178:	20002248 	.word	0x20002248

0801217c <_init>:
 801217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217e:	bf00      	nop
 8012180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012182:	bc08      	pop	{r3}
 8012184:	469e      	mov	lr, r3
 8012186:	4770      	bx	lr

08012188 <_fini>:
 8012188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218a:	bf00      	nop
 801218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801218e:	bc08      	pop	{r3}
 8012190:	469e      	mov	lr, r3
 8012192:	4770      	bx	lr
